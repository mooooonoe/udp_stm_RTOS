
rtosUdpServerSend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000167cc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003084  080169cc  080169cc  000269cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019a50  08019a50  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  08019a50  08019a50  00029a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019a58  08019a58  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019a58  08019a58  00029a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019a5c  08019a5c  00029a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08019a60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  08019af4  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  08019b94  00030134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00017a64  200001d4  08019c34  000301d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20017c38  08019c34  00037c38  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037bb1  00000000  00000000  00030202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000084b8  00000000  00000000  00067db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002630  00000000  00000000  00070270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002468  00000000  00000000  000728a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a6ff  00000000  00000000  00074d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003cbca  00000000  00000000  000af407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00122ad4  00000000  00000000  000ebfd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0020eaa5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ab24  00000000  00000000  0020eaf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .stab         00000024  00000000  00000000  0021961c  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      0000004e  00000000  00000000  00219640  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	080169b4 	.word	0x080169b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	080169b4 	.word	0x080169b4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
  /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  //turn on red led when detects stack overflow
 80005fe:	2201      	movs	r2, #1
 8000600:	2120      	movs	r1, #32
 8000602:	4803      	ldr	r0, [pc, #12]	; (8000610 <vApplicationStackOverflowHook+0x1c>)
 8000604:	f002 ff12 	bl	800342c <HAL_GPIO_WritePin>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40020000 	.word	0x40020000

08000614 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <vApplicationGetIdleTaskMemory+0x2c>)
 8000624:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <vApplicationGetIdleTaskMemory+0x30>)
 800062a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000632:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	200001f4 	.word	0x200001f4
 8000644:	200002a8 	.word	0x200002a8

08000648 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000648:	b5b0      	push	{r4, r5, r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_FREERTOS_Init+0x30>)
 8000650:	1d3c      	adds	r4, r7, #4
 8000652:	461d      	mov	r5, r3
 8000654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f006 fb1b 	bl	8006ca0 <osThreadCreate>
 800066a:	4603      	mov	r3, r0
 800066c:	4a03      	ldr	r2, [pc, #12]	; (800067c <MX_FREERTOS_Init+0x34>)
 800066e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bdb0      	pop	{r4, r5, r7, pc}
 8000678:	080169d8 	.word	0x080169d8
 800067c:	200001f0 	.word	0x200001f0

08000680 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000688:	f005 fc98 	bl	8005fbc <MX_LWIP_Init>

  udp_echoserver_init();
 800068c:	f000 fe7a 	bl	8001384 <udp_echoserver_init>


  /* Infinite loop */
  for (;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000690:	2120      	movs	r1, #32
 8000692:	4804      	ldr	r0, [pc, #16]	; (80006a4 <StartDefaultTask+0x24>)
 8000694:	f002 fee3 	bl	800345e <HAL_GPIO_TogglePin>
    osDelay(500);
 8000698:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800069c:	f006 fb4c 	bl	8006d38 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006a0:	e7f6      	b.n	8000690 <StartDefaultTask+0x10>
 80006a2:	bf00      	nop
 80006a4:	40020000 	.word	0x40020000

080006a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b50      	ldr	r3, [pc, #320]	; (8000800 <MX_GPIO_Init+0x158>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a4f      	ldr	r2, [pc, #316]	; (8000800 <MX_GPIO_Init+0x158>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b4d      	ldr	r3, [pc, #308]	; (8000800 <MX_GPIO_Init+0x158>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	4b4a      	ldr	r3, [pc, #296]	; (8000800 <MX_GPIO_Init+0x158>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a49      	ldr	r2, [pc, #292]	; (8000800 <MX_GPIO_Init+0x158>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b47      	ldr	r3, [pc, #284]	; (8000800 <MX_GPIO_Init+0x158>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b44      	ldr	r3, [pc, #272]	; (8000800 <MX_GPIO_Init+0x158>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a43      	ldr	r2, [pc, #268]	; (8000800 <MX_GPIO_Init+0x158>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b41      	ldr	r3, [pc, #260]	; (8000800 <MX_GPIO_Init+0x158>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b3e      	ldr	r3, [pc, #248]	; (8000800 <MX_GPIO_Init+0x158>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a3d      	ldr	r2, [pc, #244]	; (8000800 <MX_GPIO_Init+0x158>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b3b      	ldr	r3, [pc, #236]	; (8000800 <MX_GPIO_Init+0x158>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	4b38      	ldr	r3, [pc, #224]	; (8000800 <MX_GPIO_Init+0x158>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a37      	ldr	r2, [pc, #220]	; (8000800 <MX_GPIO_Init+0x158>)
 8000724:	f043 0308 	orr.w	r3, r3, #8
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b35      	ldr	r3, [pc, #212]	; (8000800 <MX_GPIO_Init+0x158>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000736:	4b32      	ldr	r3, [pc, #200]	; (8000800 <MX_GPIO_Init+0x158>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a31      	ldr	r2, [pc, #196]	; (8000800 <MX_GPIO_Init+0x158>)
 800073c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <MX_GPIO_Init+0x158>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2120      	movs	r1, #32
 8000752:	482c      	ldr	r0, [pc, #176]	; (8000804 <MX_GPIO_Init+0x15c>)
 8000754:	f002 fe6a 	bl	800342c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f244 0101 	movw	r1, #16385	; 0x4001
 800075e:	482a      	ldr	r0, [pc, #168]	; (8000808 <MX_GPIO_Init+0x160>)
 8000760:	f002 fe64 	bl	800342c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2140      	movs	r1, #64	; 0x40
 8000768:	4828      	ldr	r0, [pc, #160]	; (800080c <MX_GPIO_Init+0x164>)
 800076a:	f002 fe5f 	bl	800342c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800076e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000774:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	4822      	ldr	r0, [pc, #136]	; (8000810 <MX_GPIO_Init+0x168>)
 8000786:	f002 fca5 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800078a:	2320      	movs	r3, #32
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4818      	ldr	r0, [pc, #96]	; (8000804 <MX_GPIO_Init+0x15c>)
 80007a2:	f002 fc97 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80007a6:	f244 0301 	movw	r3, #16385	; 0x4001
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_GPIO_Init+0x160>)
 80007c0:	f002 fc88 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007c4:	2340      	movs	r3, #64	; 0x40
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_GPIO_Init+0x164>)
 80007dc:	f002 fc7a 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_GPIO_Init+0x164>)
 80007f4:	f002 fc6e 	bl	80030d4 <HAL_GPIO_Init>

}
 80007f8:	bf00      	nop
 80007fa:	3730      	adds	r7, #48	; 0x30
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000
 8000808:	40020400 	.word	0x40020400
 800080c:	40021800 	.word	0x40021800
 8000810:	40020800 	.word	0x40020800

08000814 <_write>:
//PCD_HandleTypeDef hpcd_USB_OTG_FS;
extern UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	b29a      	uxth	r2, r3
 8000824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000828:	68b9      	ldr	r1, [r7, #8]
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <_write+0x28>)
 800082c:	f004 fbcc 	bl	8004fc8 <HAL_UART_Transmit>
    return len;
 8000830:	687b      	ldr	r3, [r7, #4]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000804 	.word	0x20000804

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f001 f8ab 	bl	800199e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f814 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f7ff ff2c 	bl	80006a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000850:	f000 fdfa 	bl	8001448 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000854:	f000 fecc 	bl	80015f0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 8000858:	f000 fdc6 	bl	80013e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("hello rtos\n");
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <main+0x30>)
 800085e:	f014 fbaf 	bl	8014fc0 <puts>
//  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000862:	f7ff fef1 	bl	8000648 <MX_FREERTOS_Init>
  USER_THREADS();
 8000866:	f000 fa15 	bl	8000c94 <USER_THREADS>


  /* Start scheduler */
  osKernelStart();
 800086a:	f006 fa02 	bl	8006c72 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800086e:	e7fe      	b.n	800086e <main+0x2e>
 8000870:	080169f4 	.word	0x080169f4

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b094      	sub	sp, #80	; 0x50
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	2234      	movs	r2, #52	; 0x34
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f014 fa2d 	bl	8014ce2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000898:	f002 ff36 	bl	8003708 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800089c:	4b29      	ldr	r3, [pc, #164]	; (8000944 <SystemClock_Config+0xd0>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	4a28      	ldr	r2, [pc, #160]	; (8000944 <SystemClock_Config+0xd0>)
 80008a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a6:	6413      	str	r3, [r2, #64]	; 0x40
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <SystemClock_Config+0xd0>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008b4:	4b24      	ldr	r3, [pc, #144]	; (8000948 <SystemClock_Config+0xd4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008bc:	4a22      	ldr	r2, [pc, #136]	; (8000948 <SystemClock_Config+0xd4>)
 80008be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b20      	ldr	r3, [pc, #128]	; (8000948 <SystemClock_Config+0xd4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008e8:	23a8      	movs	r3, #168	; 0xa8
 80008ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008f0:	2307      	movs	r3, #7
 80008f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 ff13 	bl	8003728 <HAL_RCC_OscConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000908:	f000 f832 	bl	8000970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090c:	230f      	movs	r3, #15
 800090e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000910:	2302      	movs	r3, #2
 8000912:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000918:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800091c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800091e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000922:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	2105      	movs	r1, #5
 800092a:	4618      	mov	r0, r3
 800092c:	f003 f9aa 	bl	8003c84 <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000936:	f000 f81b 	bl	8000970 <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	3750      	adds	r7, #80	; 0x50
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40007000 	.word	0x40007000

0800094c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d101      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095e:	f001 f82b 	bl	80019b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40001000 	.word	0x40001000

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	e7fe      	b.n	8000978 <Error_Handler+0x8>
	...

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <HAL_MspInit+0x4c>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	210f      	movs	r1, #15
 80009b6:	f06f 0001 	mvn.w	r0, #1
 80009ba:	f001 f8f9 	bl	8001bb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800

080009cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08e      	sub	sp, #56	; 0x38
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009dc:	4b33      	ldr	r3, [pc, #204]	; (8000aac <HAL_InitTick+0xe0>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a32      	ldr	r2, [pc, #200]	; (8000aac <HAL_InitTick+0xe0>)
 80009e2:	f043 0310 	orr.w	r3, r3, #16
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
 80009e8:	4b30      	ldr	r3, [pc, #192]	; (8000aac <HAL_InitTick+0xe0>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f003 0310 	and.w	r3, r3, #16
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f4:	f107 0210 	add.w	r2, r7, #16
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 fb66 	bl	80040d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d103      	bne.n	8000a16 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a0e:	f003 fb37 	bl	8004080 <HAL_RCC_GetPCLK1Freq>
 8000a12:	6378      	str	r0, [r7, #52]	; 0x34
 8000a14:	e004      	b.n	8000a20 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a16:	f003 fb33 	bl	8004080 <HAL_RCC_GetPCLK1Freq>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	4a23      	ldr	r2, [pc, #140]	; (8000ab0 <HAL_InitTick+0xe4>)
 8000a24:	fba2 2303 	umull	r2, r3, r2, r3
 8000a28:	0c9b      	lsrs	r3, r3, #18
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <HAL_InitTick+0xe8>)
 8000a30:	4a21      	ldr	r2, [pc, #132]	; (8000ab8 <HAL_InitTick+0xec>)
 8000a32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <HAL_InitTick+0xe8>)
 8000a36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a3a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <HAL_InitTick+0xe8>)
 8000a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a40:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <HAL_InitTick+0xe8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_InitTick+0xe8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <HAL_InitTick+0xe8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a54:	4817      	ldr	r0, [pc, #92]	; (8000ab4 <HAL_InitTick+0xe8>)
 8000a56:	f003 ff95 	bl	8004984 <HAL_TIM_Base_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d11b      	bne.n	8000aa0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a68:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <HAL_InitTick+0xe8>)
 8000a6a:	f003 ffed 	bl	8004a48 <HAL_TIM_Base_Start_IT>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d111      	bne.n	8000aa0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a7c:	2036      	movs	r0, #54	; 0x36
 8000a7e:	f001 f8b3 	bl	8001be8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d808      	bhi.n	8000a9a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2036      	movs	r0, #54	; 0x36
 8000a8e:	f001 f88f 	bl	8001bb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_InitTick+0xf0>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	e002      	b.n	8000aa0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000aa0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3738      	adds	r7, #56	; 0x38
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	431bde83 	.word	0x431bde83
 8000ab4:	200006a8 	.word	0x200006a8
 8000ab8:	40001000 	.word	0x40001000
 8000abc:	20000004 	.word	0x20000004

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <TIM6_DAC_IRQHandler+0x10>)
 8000af2:	f004 f821 	bl	8004b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200006a8 	.word	0x200006a8

08000b00 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <ETH_IRQHandler+0x10>)
 8000b06:	f001 fc0b 	bl	8002320 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20005750 	.word	0x20005750

08000b14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return 1;
 8000b18:	2301      	movs	r3, #1
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <_kill>:

int _kill(int pid, int sig)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <_kill+0x20>)
 8000b30:	2216      	movs	r2, #22
 8000b32:	601a      	str	r2, [r3, #0]
  return -1;
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	20017c34 	.word	0x20017c34

08000b48 <_exit>:

void _exit (int status)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ffe5 	bl	8000b24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b5a:	e7fe      	b.n	8000b5a <_exit+0x12>

08000b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e00a      	b.n	8000b84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b6e:	f3af 8000 	nop.w
 8000b72:	4601      	mov	r1, r0
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	60ba      	str	r2, [r7, #8]
 8000b7a:	b2ca      	uxtb	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf0      	blt.n	8000b6e <_read+0x12>
  }

  return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bbe:	605a      	str	r2, [r3, #4]
  return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_isatty>:

int _isatty(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b087      	sub	sp, #28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d205      	bcs.n	8000c3c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <_sbrk+0x6c>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	371c      	adds	r7, #28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	20080000 	.word	0x20080000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	200006f4 	.word	0x200006f4
 8000c68:	20017c38 	.word	0x20017c38
 8000c6c:	20017c34 	.word	0x20017c34

08000c70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <SystemInit+0x20>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <SystemInit+0x20>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <USER_THREADS>:
QueueHandle_t 	   sdata_qid;

/*-----------------------------------------------------------*/

void USER_THREADS( void )
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af02      	add	r7, sp, #8
#ifdef CMSIS_OS
	osThreadDef(defaultTask, TaskMain, osPriorityNormal, 0, 256);
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
#else
	/* Create one of the two tasks. */
	xTaskCreate(	(TaskFunction_t)mainTask,		/* Pointer to the function that implements the task. */
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <USER_THREADS+0x24>)
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	2314      	movs	r3, #20
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca8:	4904      	ldr	r1, [pc, #16]	; (8000cbc <USER_THREADS+0x28>)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <USER_THREADS+0x2c>)
 8000cac:	f007 fcab 	bl	8008606 <xTaskCreate>
					256,		/* Stack depth - most small microcontrollers will use much less stack than this. */
					NULL,		/* We are not using the task parameter. */
					MAIN_PRIO,	/* This task will run at this priority */
					&xHandleMain );		/* We are not using the task handle. */
#endif
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200006f8 	.word	0x200006f8
 8000cbc:	08016a00 	.word	0x08016a00
 8000cc0:	08000cc5 	.word	0x08000cc5

08000cc4 <mainTask>:
/*-----------------------------------------------------------*/

void mainTask( void *pvParameters )
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	6078      	str	r0, [r7, #4]
	/* TODO #1:
		create a event flag
	    use group_id */
	srand(time(NULL));
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f014 fb8d 	bl	80153ec <time>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f014 f979 	bl	8014fd0 <srand>
#if 1
	sync_id= xEventGroupCreate();
 8000cde:	f006 fa3b 	bl	8007158 <xEventGroupCreate>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4a26      	ldr	r2, [pc, #152]	; (8000d80 <mainTask+0xbc>)
 8000ce6:	6013      	str	r3, [r2, #0]
	if (sync_id == NULL) {
 8000ce8:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <mainTask+0xbc>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <mainTask+0x32>
		printf("xEventGroupCreate error found\n");
 8000cf0:	4824      	ldr	r0, [pc, #144]	; (8000d84 <mainTask+0xc0>)
 8000cf2:	f014 f965 	bl	8014fc0 <puts>
	}
	sdata_qid = xQueueCreate( QUEUE_LENGTH, QUEUE_ITEM_SIZE );
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	210c      	movs	r1, #12
 8000cfa:	2005      	movs	r0, #5
 8000cfc:	f006 fd6e 	bl	80077dc <xQueueGenericCreate>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <mainTask+0xc4>)
 8000d04:	6013      	str	r3, [r2, #0]
	if (sdata_qid == NULL) printf("xQueueCreate error found\n");
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <mainTask+0xc4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <mainTask+0x50>
 8000d0e:	481f      	ldr	r0, [pc, #124]	; (8000d8c <mainTask+0xc8>)
 8000d10:	f014 f956 	bl	8014fc0 <puts>
#endif // TODO #1

	/* Create the other task in exactly the same way. */
	xTaskCreate(	(TaskFunction_t)syncTask,		/* Pointer to the function that implements the task. */
 8000d14:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <mainTask+0xcc>)
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	2305      	movs	r3, #5
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d22:	491c      	ldr	r1, [pc, #112]	; (8000d94 <mainTask+0xd0>)
 8000d24:	481c      	ldr	r0, [pc, #112]	; (8000d98 <mainTask+0xd4>)
 8000d26:	f007 fc6e 	bl	8008606 <xTaskCreate>
					"syncTask",	/* Text name for the task.  This is to facilitate debugging only. */
					256,		/* Stack depth - most small microcontrollers will use much less stack than this. */
					NULL,		/* We are not using the task parameter. */
					SYNC_PRIO,	/* This task will run at this priority */
					&xHandleSync );		/* We are not using the task handle. */
	xTaskCreate(	(TaskFunction_t)gen1Task,		/* Pointer to the function that implements the task. */
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <mainTask+0xd8>)
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	2308      	movs	r3, #8
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2300      	movs	r3, #0
 8000d34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d38:	4919      	ldr	r1, [pc, #100]	; (8000da0 <mainTask+0xdc>)
 8000d3a:	481a      	ldr	r0, [pc, #104]	; (8000da4 <mainTask+0xe0>)
 8000d3c:	f007 fc63 	bl	8008606 <xTaskCreate>
					"gen1Task",	/* Text name for the task.  This is to facilitate debugging only. */
					256,		/* Stack depth - most small microcontrollers will use much less stack than this. */
					NULL,		/* We are not using the task parameter. */
					GEN1_PRIO,	/* This task will run at this priority */
					&xHandleGen1 );		/* We are not using the task handle. */
	xTaskCreate(	(TaskFunction_t)gen2Task,		/* Pointer to the function that implements the task. */
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <mainTask+0xe4>)
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	2308      	movs	r3, #8
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4e:	4917      	ldr	r1, [pc, #92]	; (8000dac <mainTask+0xe8>)
 8000d50:	4817      	ldr	r0, [pc, #92]	; (8000db0 <mainTask+0xec>)
 8000d52:	f007 fc58 	bl	8008606 <xTaskCreate>
					256,		/* Stack depth - most small microcontrollers will use much less stack than this. */
					NULL,		/* We are not using the task parameter. */
					GEN2_PRIO,	/* This task will run at this priority */
					&xHandleGen2 );		/* We are not using the task handle. */

	xTaskCreate(	(TaskFunction_t)rxTask,		/* Pointer to the function that implements the task. */
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <mainTask+0xf0>)
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	2309      	movs	r3, #9
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d64:	4914      	ldr	r1, [pc, #80]	; (8000db8 <mainTask+0xf4>)
 8000d66:	4815      	ldr	r0, [pc, #84]	; (8000dbc <mainTask+0xf8>)
 8000d68:	f007 fc4d 	bl	8008606 <xTaskCreate>
					256,		/* Stack depth - most small microcontrollers will use much less stack than this. */
					NULL,		/* We are not using the task parameter. */
					RX_PRIO,	/* This task will run at this priority */
					&xHandleRx );		/* We are not using the task handle. */

	vTaskDelete (xHandleMain);
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <mainTask+0xfc>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f007 fd9f 	bl	80088b4 <vTaskDelete>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000070c 	.word	0x2000070c
 8000d84:	08016a0c 	.word	0x08016a0c
 8000d88:	20000714 	.word	0x20000714
 8000d8c:	08016a2c 	.word	0x08016a2c
 8000d90:	200006fc 	.word	0x200006fc
 8000d94:	08016a48 	.word	0x08016a48
 8000d98:	08000dc5 	.word	0x08000dc5
 8000d9c:	20000700 	.word	0x20000700
 8000da0:	08016a54 	.word	0x08016a54
 8000da4:	08000e09 	.word	0x08000e09
 8000da8:	20000704 	.word	0x20000704
 8000dac:	08016a60 	.word	0x08016a60
 8000db0:	08000eb9 	.word	0x08000eb9
 8000db4:	20000708 	.word	0x20000708
 8000db8:	08016a6c 	.word	0x08016a6c
 8000dbc:	08000f69 	.word	0x08000f69
 8000dc0:	200006f8 	.word	0x200006f8

08000dc4 <syncTask>:
/*-----------------------------------------------------------*/


void syncTask( void *pvParameters )
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	for(;;) {
#if 1
	printf("S "); fflush(stdout);
 8000dcc:	480a      	ldr	r0, [pc, #40]	; (8000df8 <syncTask+0x34>)
 8000dce:	f014 f871 	bl	8014eb4 <iprintf>
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <syncTask+0x38>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f013 fe1b 	bl	8014a14 <fflush>
	uxBits = xEventGroupSetBits(
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <syncTask+0x3c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2101      	movs	r1, #1
 8000de4:	4618      	mov	r0, r3
 8000de6:	f006 faa7 	bl	8007338 <xEventGroupSetBits>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <syncTask+0x40>)
 8000dee:	6013      	str	r3, [r2, #0]
			sync_id, /* The event group being updated. */
			SYNC_SIGNAL_OK);/* The bits being set. */

#endif // TODO #2
	vTaskDelay (pdMS_TO_TICKS (100));
 8000df0:	2064      	movs	r0, #100	; 0x64
 8000df2:	f007 fdf1 	bl	80089d8 <vTaskDelay>
	printf("S "); fflush(stdout);
 8000df6:	e7e9      	b.n	8000dcc <syncTask+0x8>
 8000df8:	08016a74 	.word	0x08016a74
 8000dfc:	20000030 	.word	0x20000030
 8000e00:	2000070c 	.word	0x2000070c
 8000e04:	20000710 	.word	0x20000710

08000e08 <gen1Task>:
}



void gen1Task( void *pvParameters )
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af02      	add	r7, sp, #8
 8000e0e:	6078      	str	r0, [r7, #4]
	//EventBits_t uxBits;

	/* Print out the name of this task. */
	//TickType_t = uint32_t
	SensorData sensor1_data;
	sensor1_data.info = 1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]

	for(;;) {
#if 1
	uxBits = xEventGroupWaitBits(sync_id	  ,
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <gen1Task+0x94>)
 8000e16:	6818      	ldr	r0, [r3, #0]
 8000e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	2201      	movs	r2, #1
 8000e22:	2101      	movs	r1, #1
 8000e24:	f006 f9b2 	bl	800718c <xEventGroupWaitBits>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a1d      	ldr	r2, [pc, #116]	; (8000ea0 <gen1Task+0x98>)
 8000e2c:	6013      	str	r3, [r2, #0]
								SYNC_SIGNAL_OK,
								pdTRUE	      ,
								pdFALSE	      ,
								portMAX_DELAY);
	if((uxBits & SYNC_SIGNAL_OK) == SYNC_SIGNAL_OK) {
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <gen1Task+0x98>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0ec      	beq.n	8000e14 <gen1Task+0xc>
		printf("* ");fflush(stdout);
 8000e3a:	481a      	ldr	r0, [pc, #104]	; (8000ea4 <gen1Task+0x9c>)
 8000e3c:	f014 f83a 	bl	8014eb4 <iprintf>
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <gen1Task+0xa0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f013 fde4 	bl	8014a14 <fflush>
		//send Queue, info(1 or 2), time, distance
		sensor1_data.time = xTaskGetTickCount();
 8000e4c:	f007 ff14 	bl	8008c78 <xTaskGetTickCount>
 8000e50:	4603      	mov	r3, r0
 8000e52:	613b      	str	r3, [r7, #16]
		sensor1_data.data = rand()%101;
 8000e54:	f014 f8ea 	bl	801502c <rand>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <gen1Task+0xa4>)
 8000e5c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e60:	1119      	asrs	r1, r3, #4
 8000e62:	17d3      	asrs	r3, r2, #31
 8000e64:	1acb      	subs	r3, r1, r3
 8000e66:	2165      	movs	r1, #101	; 0x65
 8000e68:	fb01 f303 	mul.w	r3, r1, r3
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	617b      	str	r3, [r7, #20]
		if(xQueueSendToBack(sdata_qid, &sensor1_data,10) != pdPASS )
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <gen1Task+0xa8>)
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	f107 010c 	add.w	r1, r7, #12
 8000e78:	2300      	movs	r3, #0
 8000e7a:	220a      	movs	r2, #10
 8000e7c:	f006 fd5c 	bl	8007938 <xQueueGenericSend>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d0c6      	beq.n	8000e14 <gen1Task+0xc>
		{
			printf("1sF\n");fflush(stdout);
 8000e86:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <gen1Task+0xac>)
 8000e88:	f014 f89a 	bl	8014fc0 <puts>
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <gen1Task+0xa0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f013 fdbe 	bl	8014a14 <fflush>
	uxBits = xEventGroupWaitBits(sync_id	  ,
 8000e98:	e7bc      	b.n	8000e14 <gen1Task+0xc>
 8000e9a:	bf00      	nop
 8000e9c:	2000070c 	.word	0x2000070c
 8000ea0:	20000710 	.word	0x20000710
 8000ea4:	08016a78 	.word	0x08016a78
 8000ea8:	20000030 	.word	0x20000030
 8000eac:	288df0cb 	.word	0x288df0cb
 8000eb0:	20000714 	.word	0x20000714
 8000eb4:	08016a7c 	.word	0x08016a7c

08000eb8 <gen2Task>:
	}
}


void gen2Task( void *pvParameters )
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	6078      	str	r0, [r7, #4]
	SensorData sensor2_data;
	sensor2_data.info = 2;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	60fb      	str	r3, [r7, #12]
	for(;;) {
#if 1
	uxBits = xEventGroupWaitBits(sync_id	  ,
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <gen2Task+0x94>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	f006 f95a 	bl	800718c <xEventGroupWaitBits>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a1d      	ldr	r2, [pc, #116]	; (8000f50 <gen2Task+0x98>)
 8000edc:	6013      	str	r3, [r2, #0]
								SYNC_SIGNAL_OK,
								pdTRUE	      ,
								pdFALSE	      ,
								portMAX_DELAY);

		if((uxBits & SYNC_SIGNAL_OK) == SYNC_SIGNAL_OK) {
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <gen2Task+0x98>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0ec      	beq.n	8000ec4 <gen2Task+0xc>
			//			vTaskDelay(pdMS_TO_TICKS(500));
			// send Queue
			printf(". ");fflush(stdout);
 8000eea:	481a      	ldr	r0, [pc, #104]	; (8000f54 <gen2Task+0x9c>)
 8000eec:	f013 ffe2 	bl	8014eb4 <iprintf>
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <gen2Task+0xa0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f013 fd8c 	bl	8014a14 <fflush>
			sensor2_data.time = xTaskGetTickCount();
 8000efc:	f007 febc 	bl	8008c78 <xTaskGetTickCount>
 8000f00:	4603      	mov	r3, r0
 8000f02:	613b      	str	r3, [r7, #16]
			sensor2_data.data = rand()%101;
 8000f04:	f014 f892 	bl	801502c <rand>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <gen2Task+0xa4>)
 8000f0c:	fb83 1302 	smull	r1, r3, r3, r2
 8000f10:	1119      	asrs	r1, r3, #4
 8000f12:	17d3      	asrs	r3, r2, #31
 8000f14:	1acb      	subs	r3, r1, r3
 8000f16:	2165      	movs	r1, #101	; 0x65
 8000f18:	fb01 f303 	mul.w	r3, r1, r3
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	617b      	str	r3, [r7, #20]
			if(xQueueSendToBack(sdata_qid, &sensor2_data,10) != pdPASS)
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <gen2Task+0xa8>)
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	f107 010c 	add.w	r1, r7, #12
 8000f28:	2300      	movs	r3, #0
 8000f2a:	220a      	movs	r2, #10
 8000f2c:	f006 fd04 	bl	8007938 <xQueueGenericSend>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d0c6      	beq.n	8000ec4 <gen2Task+0xc>
			{
				printf("2sF\n");fflush(stdout);
 8000f36:	480b      	ldr	r0, [pc, #44]	; (8000f64 <gen2Task+0xac>)
 8000f38:	f014 f842 	bl	8014fc0 <puts>
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <gen2Task+0xa0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f013 fd66 	bl	8014a14 <fflush>
	uxBits = xEventGroupWaitBits(sync_id	  ,
 8000f48:	e7bc      	b.n	8000ec4 <gen2Task+0xc>
 8000f4a:	bf00      	nop
 8000f4c:	2000070c 	.word	0x2000070c
 8000f50:	20000710 	.word	0x20000710
 8000f54:	08016a80 	.word	0x08016a80
 8000f58:	20000030 	.word	0x20000030
 8000f5c:	288df0cb 	.word	0x288df0cb
 8000f60:	20000714 	.word	0x20000714
 8000f64:	08016a84 	.word	0x08016a84

08000f68 <rxTask>:

#endif
	}
}

void rxTask(void *pvParameters){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b0a8      	sub	sp, #160	; 0xa0
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	6078      	str	r0, [r7, #4]
	char str[100];
	int		   time_diff;
	int 	   min_dis_info;

	for(;;){
		if(uxQueueMessagesWaiting(sdata_qid) >= 2){
 8000f70:	4b4c      	ldr	r3, [pc, #304]	; (80010a4 <rxTask+0x13c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f007 f99b 	bl	80082b0 <uxQueueMessagesWaiting>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	f240 808c 	bls.w	800109a <rxTask+0x132>
			if(xQueueReceive(sdata_qid, &s1, portMAX_DELAY)!=pdPASS){
 8000f82:	4b48      	ldr	r3, [pc, #288]	; (80010a4 <rxTask+0x13c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000f8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f006 ff0e 	bl	8007db0 <xQueueReceive>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d008      	beq.n	8000fac <rxTask+0x44>
				printf("frF\n");fflush(stdout);
 8000f9a:	4843      	ldr	r0, [pc, #268]	; (80010a8 <rxTask+0x140>)
 8000f9c:	f014 f810 	bl	8014fc0 <puts>
 8000fa0:	4b42      	ldr	r3, [pc, #264]	; (80010ac <rxTask+0x144>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f013 fd34 	bl	8014a14 <fflush>
			}
			if(xQueueReceive(sdata_qid, &s2, portMAX_DELAY)!=pdPASS){
 8000fac:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <rxTask+0x13c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 fef9 	bl	8007db0 <xQueueReceive>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d008      	beq.n	8000fd6 <rxTask+0x6e>
				printf("srF\n");fflush(stdout);
 8000fc4:	483a      	ldr	r0, [pc, #232]	; (80010b0 <rxTask+0x148>)
 8000fc6:	f013 fffb 	bl	8014fc0 <puts>
 8000fca:	4b38      	ldr	r3, [pc, #224]	; (80010ac <rxTask+0x144>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f013 fd1f 	bl	8014a14 <fflush>
			}
		// sensor matching
		if(s1.info == 1){
 8000fd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d108      	bne.n	8000fee <rxTask+0x86>
			ps1 = &s1;
 8000fdc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fe0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			ps2 = &s2;
 8000fe4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fe8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000fec:	e007      	b.n	8000ffe <rxTask+0x96>
		}else{
			ps1 = &s2;
 8000fee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ff2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			ps2 = &s1;
 8000ff6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		}
		// smaller distance value sensor info
		if(ps1->data - ps2->data >= 0){
 8000ffe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0f      	blt.n	8001030 <rxTask+0xc8>
			if(ps1->data == ps2->data) min_dis_info = 0;
 8001010:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	429a      	cmp	r2, r3
 800101e:	d103      	bne.n	8001028 <rxTask+0xc0>
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001026:	e006      	b.n	8001036 <rxTask+0xce>
			else 					   min_dis_info = 2;
 8001028:	2302      	movs	r3, #2
 800102a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800102e:	e002      	b.n	8001036 <rxTask+0xce>
		}else{
			min_dis_info = 1;
 8001030:	2301      	movs	r3, #1
 8001032:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		}
		// time diff calculate(tickcount)
		time_diff = (ps1->time >= ps2->time) ? (ps1->time - ps2->time) : (ps2->time - ps1->time);
 8001036:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	429a      	cmp	r2, r3
 8001044:	d307      	bcc.n	8001056 <rxTask+0xee>
 8001046:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	e006      	b.n	8001064 <rxTask+0xfc>
 8001056:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		sprintf(str,"%d / %d / %d -> %d\n\r",time_diff, ps1->data, ps2->data, min_dis_info);
 8001068:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800106c:	6899      	ldr	r1, [r3, #8]
 800106e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f107 000c 	add.w	r0, r7, #12
 8001078:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800107c:	9201      	str	r2, [sp, #4]
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	460b      	mov	r3, r1
 8001082:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001086:	490b      	ldr	r1, [pc, #44]	; (80010b4 <rxTask+0x14c>)
 8001088:	f014 f888 	bl	801519c <siprintf>
		printf("%s",str);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4619      	mov	r1, r3
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <rxTask+0x150>)
 8001094:	f013 ff0e 	bl	8014eb4 <iprintf>
 8001098:	e76a      	b.n	8000f70 <rxTask+0x8>
		}
		else{
			vTaskDelay(pdMS_TO_TICKS(100));
 800109a:	2064      	movs	r0, #100	; 0x64
 800109c:	f007 fc9c 	bl	80089d8 <vTaskDelay>
		if(uxQueueMessagesWaiting(sdata_qid) >= 2){
 80010a0:	e766      	b.n	8000f70 <rxTask+0x8>
 80010a2:	bf00      	nop
 80010a4:	20000714 	.word	0x20000714
 80010a8:	08016a88 	.word	0x08016a88
 80010ac:	20000030 	.word	0x20000030
 80010b0:	08016a8c 	.word	0x08016a8c
 80010b4:	08016a90 	.word	0x08016a90
 80010b8:	08016aa8 	.word	0x08016aa8

080010bc <parse_and_store_data>:
// ★ 추가: 센서 A/B 데이터 저장용
static int gen1data = 0, tm1data = 0;
static int gen2data = 0, tm2data = 0;

void parse_and_store_data(const char* data_str, const ip_addr_t* addr, u16_t port)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	4613      	mov	r3, r2
 80010c8:	80fb      	strh	r3, [r7, #6]
    int gen_val = 0, time_val = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
    sscanf(data_str, "%d(%d)", &gen_val, &time_val);
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	f107 0214 	add.w	r2, r7, #20
 80010da:	492b      	ldr	r1, [pc, #172]	; (8001188 <parse_and_store_data+0xcc>)
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f014 f87d 	bl	80151dc <siscanf>

    if (client_count >= 2) {
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <parse_and_store_data+0xd0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	dd45      	ble.n	8001176 <parse_and_store_data+0xba>
        client_info_t* a = &clients[client_count - 1];
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <parse_and_store_data+0xd0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	4a27      	ldr	r2, [pc, #156]	; (8001190 <parse_and_store_data+0xd4>)
 80010f4:	4413      	add	r3, r2
 80010f6:	61fb      	str	r3, [r7, #28]
        client_info_t* b = &clients[client_count - 2];
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <parse_and_store_data+0xd0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3b02      	subs	r3, #2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4a23      	ldr	r2, [pc, #140]	; (8001190 <parse_and_store_data+0xd4>)
 8001102:	4413      	add	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]

        if (ip_addr_cmp(addr, &a->ip) && port == a->port) {
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d113      	bne.n	800113a <parse_and_store_data+0x7e>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	889b      	ldrh	r3, [r3, #4]
 8001116:	88fa      	ldrh	r2, [r7, #6]
 8001118:	429a      	cmp	r2, r3
 800111a:	d10e      	bne.n	800113a <parse_and_store_data+0x7e>
            gen1data = gen_val;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <parse_and_store_data+0xd8>)
 8001120:	6013      	str	r3, [r2, #0]
            tm1data = time_val;
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <parse_and_store_data+0xdc>)
 8001126:	6013      	str	r3, [r2, #0]
            printf("[Sensor A] %d(%d)\n", gen1data, tm1data);
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <parse_and_store_data+0xd8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <parse_and_store_data+0xdc>)
 800112e:	6812      	ldr	r2, [r2, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	481a      	ldr	r0, [pc, #104]	; (800119c <parse_and_store_data+0xe0>)
 8001134:	f013 febe 	bl	8014eb4 <iprintf>
 8001138:	e021      	b.n	800117e <parse_and_store_data+0xc2>
        }
        else if (ip_addr_cmp(addr, &b->ip) && port == b->port) {
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	d113      	bne.n	800116e <parse_and_store_data+0xb2>
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	889b      	ldrh	r3, [r3, #4]
 800114a:	88fa      	ldrh	r2, [r7, #6]
 800114c:	429a      	cmp	r2, r3
 800114e:	d10e      	bne.n	800116e <parse_and_store_data+0xb2>
            gen2data = gen_val;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <parse_and_store_data+0xe4>)
 8001154:	6013      	str	r3, [r2, #0]
            tm2data = time_val;
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <parse_and_store_data+0xe8>)
 800115a:	6013      	str	r3, [r2, #0]
            printf("[Sensor B] %d(%d)\n", gen2data, tm2data);
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <parse_and_store_data+0xe4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <parse_and_store_data+0xe8>)
 8001162:	6812      	ldr	r2, [r2, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	4810      	ldr	r0, [pc, #64]	; (80011a8 <parse_and_store_data+0xec>)
 8001168:	f013 fea4 	bl	8014eb4 <iprintf>
 800116c:	e007      	b.n	800117e <parse_and_store_data+0xc2>
        } else {
            printf("[Ignored] Not recent A or B\n");
 800116e:	480f      	ldr	r0, [pc, #60]	; (80011ac <parse_and_store_data+0xf0>)
 8001170:	f013 ff26 	bl	8014fc0 <puts>
        }
    } else {
        printf("[Skipped] Not enough clients\n");
    }
}
 8001174:	e003      	b.n	800117e <parse_and_store_data+0xc2>
        printf("[Skipped] Not enough clients\n");
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <parse_and_store_data+0xf4>)
 8001178:	f013 ff22 	bl	8014fc0 <puts>
}
 800117c:	e7ff      	b.n	800117e <parse_and_store_data+0xc2>
 800117e:	bf00      	nop
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	08016abc 	.word	0x08016abc
 800118c:	20000768 	.word	0x20000768
 8001190:	20000718 	.word	0x20000718
 8001194:	2000076c 	.word	0x2000076c
 8001198:	20000770 	.word	0x20000770
 800119c:	08016ac4 	.word	0x08016ac4
 80011a0:	20000774 	.word	0x20000774
 80011a4:	20000778 	.word	0x20000778
 80011a8:	08016ad8 	.word	0x08016ad8
 80011ac:	08016aec 	.word	0x08016aec
 80011b0:	08016b08 	.word	0x08016b08

080011b4 <add_client>:


void add_client(const ip_addr_t *addr, u16_t port) {
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < client_count; i++) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e012      	b.n	80011ec <add_client+0x38>
        if (ip_addr_cmp(&clients[i].ip, addr) && clients[i].port == port) {
 80011c6:	4a1d      	ldr	r2, [pc, #116]	; (800123c <add_client+0x88>)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d107      	bne.n	80011e6 <add_client+0x32>
 80011d6:	4a19      	ldr	r2, [pc, #100]	; (800123c <add_client+0x88>)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4413      	add	r3, r2
 80011de:	889b      	ldrh	r3, [r3, #4]
 80011e0:	887a      	ldrh	r2, [r7, #2]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d024      	beq.n	8001230 <add_client+0x7c>
    for (int i = 0; i < client_count; i++) {
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	3301      	adds	r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <add_client+0x8c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	dbe7      	blt.n	80011c6 <add_client+0x12>
            return;  // 이미 존재함
        }
    }

    if (client_count < MAX_CLIENTS) {
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <add_client+0x8c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b09      	cmp	r3, #9
 80011fc:	dc19      	bgt.n	8001232 <add_client+0x7e>
        ip_addr_set(&clients[client_count].ip, addr);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <add_client+0x56>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	e000      	b.n	800120c <add_client+0x58>
 800120a:	2300      	movs	r3, #0
 800120c:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <add_client+0x8c>)
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	490a      	ldr	r1, [pc, #40]	; (800123c <add_client+0x88>)
 8001212:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
        clients[client_count].port = port;
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <add_client+0x8c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a08      	ldr	r2, [pc, #32]	; (800123c <add_client+0x88>)
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4413      	add	r3, r2
 8001220:	887a      	ldrh	r2, [r7, #2]
 8001222:	809a      	strh	r2, [r3, #4]
        client_count++;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <add_client+0x8c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <add_client+0x8c>)
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e000      	b.n	8001232 <add_client+0x7e>
            return;  // 이미 존재함
 8001230:	bf00      	nop
    }
}
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	20000718 	.word	0x20000718
 8001240:	20000768 	.word	0x20000768

08001244 <send_sync_to_all_clients>:

void send_sync_to_all_clients()
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
    for (int i = 0; i < client_count; i++) {
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	e032      	b.n	80012b6 <send_sync_to_all_clients+0x72>
        struct udp_pcb* upcb = udp_new();
 8001250:	f010 fefa 	bl	8012048 <udp_new>
 8001254:	60b8      	str	r0, [r7, #8]
        if (!upcb) continue;
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d028      	beq.n	80012ae <send_sync_to_all_clients+0x6a>

        struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, strlen("sync"), PBUF_RAM);
 800125c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001260:	2104      	movs	r1, #4
 8001262:	2036      	movs	r0, #54	; 0x36
 8001264:	f00a fa2a 	bl	800b6bc <pbuf_alloc>
 8001268:	6078      	str	r0, [r7, #4]
        if (!p) {
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d103      	bne.n	8001278 <send_sync_to_all_clients+0x34>
            udp_remove(upcb);
 8001270:	68b8      	ldr	r0, [r7, #8]
 8001272:	f010 fea7 	bl	8011fc4 <udp_remove>
            continue;
 8001276:	e01b      	b.n	80012b0 <send_sync_to_all_clients+0x6c>
        }

        memcpy(p->payload, "sync", strlen("sync"));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2204      	movs	r2, #4
 800127e:	4913      	ldr	r1, [pc, #76]	; (80012cc <send_sync_to_all_clients+0x88>)
 8001280:	4618      	mov	r0, r3
 8001282:	f013 fd06 	bl	8014c92 <memcpy>
        udp_sendto(upcb, p, &clients[i].ip, clients[i].port);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <send_sync_to_all_clients+0x8c>)
 800128c:	441a      	add	r2, r3
 800128e:	4910      	ldr	r1, [pc, #64]	; (80012d0 <send_sync_to_all_clients+0x8c>)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	440b      	add	r3, r1
 8001296:	889b      	ldrh	r3, [r3, #4]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	68b8      	ldr	r0, [r7, #8]
 800129c:	f010 fc34 	bl	8011b08 <udp_sendto>
        pbuf_free(p);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f00a fcef 	bl	800bc84 <pbuf_free>
        udp_remove(upcb);
 80012a6:	68b8      	ldr	r0, [r7, #8]
 80012a8:	f010 fe8c 	bl	8011fc4 <udp_remove>
 80012ac:	e000      	b.n	80012b0 <send_sync_to_all_clients+0x6c>
        if (!upcb) continue;
 80012ae:	bf00      	nop
    for (int i = 0; i < client_count; i++) {
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3301      	adds	r3, #1
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <send_sync_to_all_clients+0x90>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	dbc7      	blt.n	8001250 <send_sync_to_all_clients+0xc>
    }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	08016b28 	.word	0x08016b28
 80012d0:	20000718 	.word	0x20000718
 80012d4:	20000768 	.word	0x20000768

080012d8 <udp_echoserver_receive_callback>:

void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	; 0x30
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	603b      	str	r3, [r7, #0]
//    printf("udp_echoserver_receive_callback\n");

    if (p != NULL) {
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d039      	beq.n	8001360 <udp_echoserver_receive_callback+0x88>
//        printf("Received UDP packet from %s:%d\n", ipaddr_ntoa(addr), port);
        printf("Data (%d bytes): %.*s\n", p->len, p->len, (char *)p->payload);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	895b      	ldrh	r3, [r3, #10]
 80012f0:	4619      	mov	r1, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	895b      	ldrh	r3, [r3, #10]
 80012f6:	461a      	mov	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	481a      	ldr	r0, [pc, #104]	; (8001368 <udp_echoserver_receive_callback+0x90>)
 80012fe:	f013 fdd9 	bl	8014eb4 <iprintf>

        add_client(addr, port);  // ★ 클라이언트 추가
 8001302:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001304:	4619      	mov	r1, r3
 8001306:	6838      	ldr	r0, [r7, #0]
 8001308:	f7ff ff54 	bl	80011b4 <add_client>

        // ★ 수신 문자열 복사 및 파싱 호출
		char data_buf[32] = {0};
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	619a      	str	r2, [r3, #24]
		strncpy(data_buf, (char *)p->payload, p->len < sizeof(data_buf)-1 ? p->len : sizeof(data_buf)-1);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6859      	ldr	r1, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	895b      	ldrh	r3, [r3, #10]
 800132c:	2b1f      	cmp	r3, #31
 800132e:	bf28      	it	cs
 8001330:	231f      	movcs	r3, #31
 8001332:	b29b      	uxth	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4618      	mov	r0, r3
 800133c:	f013 ffbf 	bl	80152be <strncpy>
		parse_and_store_data(data_buf, addr, port);
 8001340:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	6839      	ldr	r1, [r7, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff feb7 	bl	80010bc <parse_and_store_data>

        udp_sendto(upcb, p, addr, port);
 800134e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	68b8      	ldr	r0, [r7, #8]
 8001356:	f010 fbd7 	bl	8011b08 <udp_sendto>
        pbuf_free(p);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f00a fc92 	bl	800bc84 <pbuf_free>
    }
}
 8001360:	bf00      	nop
 8001362:	3730      	adds	r7, #48	; 0x30
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	08016b30 	.word	0x08016b30

0800136c <udp_sync_sender_task>:



void udp_sync_sender_task(void *arg)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
    while (1) {
        send_sync_to_all_clients();  // 모든 클라이언트에게 전송
 8001374:	f7ff ff66 	bl	8001244 <send_sync_to_all_clients>
        osDelay(3000);  // 3초 delay
 8001378:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800137c:	f005 fcdc 	bl	8006d38 <osDelay>
        send_sync_to_all_clients();  // 모든 클라이언트에게 전송
 8001380:	e7f8      	b.n	8001374 <udp_sync_sender_task+0x8>
	...

08001384 <udp_echoserver_init>:
    }
}

void udp_echoserver_init(void)
{
 8001384:	b5b0      	push	{r4, r5, r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb = udp_new();
 800138a:	f010 fe5d 	bl	8012048 <udp_new>
 800138e:	61f8      	str	r0, [r7, #28]
   if (upcb)
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d010      	beq.n	80013b8 <udp_echoserver_init+0x34>
   {
      if (udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT) == ERR_OK)
 8001396:	2207      	movs	r2, #7
 8001398:	4910      	ldr	r1, [pc, #64]	; (80013dc <udp_echoserver_init+0x58>)
 800139a:	69f8      	ldr	r0, [r7, #28]
 800139c:	f010 fd6a 	bl	8011e74 <udp_bind>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d105      	bne.n	80013b2 <udp_echoserver_init+0x2e>
      {
         udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 80013a6:	2200      	movs	r2, #0
 80013a8:	490d      	ldr	r1, [pc, #52]	; (80013e0 <udp_echoserver_init+0x5c>)
 80013aa:	69f8      	ldr	r0, [r7, #28]
 80013ac:	f010 fdea 	bl	8011f84 <udp_recv>
 80013b0:	e002      	b.n	80013b8 <udp_echoserver_init+0x34>
      }
      else
      {
         udp_remove(upcb);
 80013b2:	69f8      	ldr	r0, [r7, #28]
 80013b4:	f010 fe06 	bl	8011fc4 <udp_remove>
      }
   }

   // "sync"를 주기적으로 보내는 태스크 생성
   osThreadDef(udpSyncSender, udp_sync_sender_task, osPriorityLow, 0, 256);
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <udp_echoserver_init+0x60>)
 80013ba:	463c      	mov	r4, r7
 80013bc:	461d      	mov	r5, r3
 80013be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   osThreadCreate(osThread(udpSyncSender), NULL);
 80013ca:	463b      	mov	r3, r7
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f005 fc66 	bl	8006ca0 <osThreadCreate>
}
 80013d4:	bf00      	nop
 80013d6:	3720      	adds	r7, #32
 80013d8:	46bd      	mov	sp, r7
 80013da:	bdb0      	pop	{r4, r5, r7, pc}
 80013dc:	080197d0 	.word	0x080197d0
 80013e0:	080012d9 	.word	0x080012d9
 80013e4:	08016b48 	.word	0x08016b48

080013e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_USART1_UART_Init+0x58>)
 80013ee:	4a15      	ldr	r2, [pc, #84]	; (8001444 <MX_USART1_UART_Init+0x5c>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <MX_USART1_UART_Init+0x58>)
 80013f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_USART1_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_USART1_UART_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USART1_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_USART1_UART_Init+0x58>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USART1_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USART1_UART_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_USART1_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_USART1_UART_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_USART1_UART_Init+0x58>)
 800142c:	f003 fd7e 	bl	8004f2c <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001436:	f7ff fa9b 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000077c 	.word	0x2000077c
 8001444:	40011000 	.word	0x40011000

08001448 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_USART3_UART_Init+0x58>)
 800144e:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <MX_USART3_UART_Init+0x5c>)
 8001450:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <MX_USART3_UART_Init+0x58>)
 8001454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001458:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_USART3_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_USART3_UART_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_USART3_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_USART3_UART_Init+0x58>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_USART3_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_USART3_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MX_USART3_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_USART3_UART_Init+0x58>)
 8001486:	2200      	movs	r2, #0
 8001488:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_USART3_UART_Init+0x58>)
 800148c:	f003 fd4e 	bl	8004f2c <HAL_UART_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001496:	f7ff fa6b 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000804 	.word	0x20000804
 80014a4:	40004800 	.word	0x40004800

080014a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0b0      	sub	sp, #192	; 0xc0
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	2290      	movs	r2, #144	; 0x90
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f013 fc0a 	bl	8014ce2 <memset>
  if(uartHandle->Instance==USART1)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a42      	ldr	r2, [pc, #264]	; (80015dc <HAL_UART_MspInit+0x134>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d13b      	bne.n	8001550 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014d8:	2340      	movs	r3, #64	; 0x40
 80014da:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014dc:	2300      	movs	r3, #0
 80014de:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 fe25 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014f0:	f7ff fa3e 	bl	8000970 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014f4:	4b3a      	ldr	r3, [pc, #232]	; (80015e0 <HAL_UART_MspInit+0x138>)
 80014f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f8:	4a39      	ldr	r2, [pc, #228]	; (80015e0 <HAL_UART_MspInit+0x138>)
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001500:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <HAL_UART_MspInit+0x138>)
 8001502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150c:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <HAL_UART_MspInit+0x138>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4a33      	ldr	r2, [pc, #204]	; (80015e0 <HAL_UART_MspInit+0x138>)
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	6313      	str	r3, [r2, #48]	; 0x30
 8001518:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <HAL_UART_MspInit+0x138>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001524:	23c0      	movs	r3, #192	; 0xc0
 8001526:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800153c:	2307      	movs	r3, #7
 800153e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001546:	4619      	mov	r1, r3
 8001548:	4826      	ldr	r0, [pc, #152]	; (80015e4 <HAL_UART_MspInit+0x13c>)
 800154a:	f001 fdc3 	bl	80030d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800154e:	e041      	b.n	80015d4 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART3)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a24      	ldr	r2, [pc, #144]	; (80015e8 <HAL_UART_MspInit+0x140>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d13c      	bne.n	80015d4 <HAL_UART_MspInit+0x12c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800155a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001560:	2300      	movs	r3, #0
 8001562:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	4618      	mov	r0, r3
 800156a:	f002 fde3 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001574:	f7ff f9fc 	bl	8000970 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_UART_MspInit+0x138>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <HAL_UART_MspInit+0x138>)
 800157e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001582:	6413      	str	r3, [r2, #64]	; 0x40
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <HAL_UART_MspInit+0x138>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <HAL_UART_MspInit+0x138>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <HAL_UART_MspInit+0x138>)
 8001596:	f043 0308 	orr.w	r3, r3, #8
 800159a:	6313      	str	r3, [r2, #48]	; 0x30
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_UART_MspInit+0x138>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015c2:	2307      	movs	r3, #7
 80015c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015cc:	4619      	mov	r1, r3
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <HAL_UART_MspInit+0x144>)
 80015d0:	f001 fd80 	bl	80030d4 <HAL_GPIO_Init>
}
 80015d4:	bf00      	nop
 80015d6:	37c0      	adds	r7, #192	; 0xc0
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40011000 	.word	0x40011000
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020400 	.word	0x40020400
 80015e8:	40004800 	.word	0x40004800
 80015ec:	40020c00 	.word	0x40020c00

080015f0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015fe:	2206      	movs	r2, #6
 8001600:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001604:	2202      	movs	r2, #2
 8001606:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800160a:	2200      	movs	r2, #0
 800160c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001610:	2202      	movs	r2, #2
 8001612:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001616:	2201      	movs	r2, #1
 8001618:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800161c:	2200      	movs	r2, #0
 800161e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001622:	2200      	movs	r2, #0
 8001624:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001628:	2201      	movs	r2, #1
 800162a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800162e:	2200      	movs	r2, #0
 8001630:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001634:	f001 ff2d 	bl	8003492 <HAL_PCD_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800163e:	f7ff f997 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000088c 	.word	0x2000088c

0800164c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b0ae      	sub	sp, #184	; 0xb8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2290      	movs	r2, #144	; 0x90
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f013 fb38 	bl	8014ce2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800167a:	d159      	bne.n	8001730 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800167c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001680:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4618      	mov	r0, r3
 800168e:	f002 fd51 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001698:	f7ff f96a 	bl	8000970 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b26      	ldr	r3, [pc, #152]	; (8001738 <HAL_PCD_MspInit+0xec>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	4a25      	ldr	r2, [pc, #148]	; (8001738 <HAL_PCD_MspInit+0xec>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6313      	str	r3, [r2, #48]	; 0x30
 80016a8:	4b23      	ldr	r3, [pc, #140]	; (8001738 <HAL_PCD_MspInit+0xec>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016b4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016ce:	230a      	movs	r3, #10
 80016d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016d8:	4619      	mov	r1, r3
 80016da:	4818      	ldr	r0, [pc, #96]	; (800173c <HAL_PCD_MspInit+0xf0>)
 80016dc:	f001 fcfa 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016f8:	4619      	mov	r1, r3
 80016fa:	4810      	ldr	r0, [pc, #64]	; (800173c <HAL_PCD_MspInit+0xf0>)
 80016fc:	f001 fcea 	bl	80030d4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_PCD_MspInit+0xec>)
 8001702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001704:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <HAL_PCD_MspInit+0xec>)
 8001706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800170a:	6353      	str	r3, [r2, #52]	; 0x34
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_PCD_MspInit+0xec>)
 800170e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <HAL_PCD_MspInit+0xec>)
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	4a06      	ldr	r2, [pc, #24]	; (8001738 <HAL_PCD_MspInit+0xec>)
 800171e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001722:	6453      	str	r3, [r2, #68]	; 0x44
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <HAL_PCD_MspInit+0xec>)
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001730:	bf00      	nop
 8001732:	37b8      	adds	r7, #184	; 0xb8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40023800 	.word	0x40023800
 800173c:	40020000 	.word	0x40020000

08001740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001778 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001744:	f7ff fa94 	bl	8000c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001760:	4c0a      	ldr	r4, [pc, #40]	; (800178c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800176e:	f013 fa59 	bl	8014c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001772:	f7ff f865 	bl	8000840 <main>
  bx  lr    
 8001776:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001778:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001780:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001784:	08019a60 	.word	0x08019a60
  ldr r2, =_sbss
 8001788:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800178c:	20017c38 	.word	0x20017c38

08001790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC_IRQHandler>

08001792 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <LAN8742_RegisterBusIO+0x28>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <LAN8742_RegisterBusIO+0x28>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <LAN8742_RegisterBusIO+0x28>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017be:	e014      	b.n	80017ea <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d139      	bne.n	8001886 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2220      	movs	r2, #32
 8001824:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e01c      	b.n	8001866 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	f107 020c 	add.w	r2, r7, #12
 8001834:	2112      	movs	r1, #18
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	4798      	blx	r3
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	da03      	bge.n	8001848 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001840:	f06f 0304 	mvn.w	r3, #4
 8001844:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001846:	e00b      	b.n	8001860 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	429a      	cmp	r2, r3
 8001852:	d105      	bne.n	8001860 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
         break;
 800185e:	e005      	b.n	800186c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2b1f      	cmp	r3, #31
 800186a:	d9df      	bls.n	800182c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b1f      	cmp	r3, #31
 8001872:	d902      	bls.n	800187a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001874:	f06f 0302 	mvn.w	r3, #2
 8001878:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001886:	693b      	ldr	r3, [r7, #16]
 }
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6810      	ldr	r0, [r2, #0]
 80018a4:	f107 020c 	add.w	r2, r7, #12
 80018a8:	2101      	movs	r1, #1
 80018aa:	4798      	blx	r3
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	da02      	bge.n	80018b8 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018b2:	f06f 0304 	mvn.w	r3, #4
 80018b6:	e06e      	b.n	8001996 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6810      	ldr	r0, [r2, #0]
 80018c0:	f107 020c 	add.w	r2, r7, #12
 80018c4:	2101      	movs	r1, #1
 80018c6:	4798      	blx	r3
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	da02      	bge.n	80018d4 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018ce:	f06f 0304 	mvn.w	r3, #4
 80018d2:	e060      	b.n	8001996 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80018de:	2301      	movs	r3, #1
 80018e0:	e059      	b.n	8001996 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6810      	ldr	r0, [r2, #0]
 80018ea:	f107 020c 	add.w	r2, r7, #12
 80018ee:	2100      	movs	r1, #0
 80018f0:	4798      	blx	r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	da02      	bge.n	80018fe <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018f8:	f06f 0304 	mvn.w	r3, #4
 80018fc:	e04b      	b.n	8001996 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d11b      	bne.n	8001940 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d006      	beq.n	8001920 <LAN8742_GetLinkState+0x90>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800191c:	2302      	movs	r3, #2
 800191e:	e03a      	b.n	8001996 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800192a:	2303      	movs	r3, #3
 800192c:	e033      	b.n	8001996 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001938:	2304      	movs	r3, #4
 800193a:	e02c      	b.n	8001996 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800193c:	2305      	movs	r3, #5
 800193e:	e02a      	b.n	8001996 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6810      	ldr	r0, [r2, #0]
 8001948:	f107 020c 	add.w	r2, r7, #12
 800194c:	211f      	movs	r1, #31
 800194e:	4798      	blx	r3
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	da02      	bge.n	800195c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001956:	f06f 0304 	mvn.w	r3, #4
 800195a:	e01c      	b.n	8001996 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001966:	2306      	movs	r3, #6
 8001968:	e015      	b.n	8001996 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f003 031c 	and.w	r3, r3, #28
 8001970:	2b18      	cmp	r3, #24
 8001972:	d101      	bne.n	8001978 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001974:	2302      	movs	r3, #2
 8001976:	e00e      	b.n	8001996 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 031c 	and.w	r3, r3, #28
 800197e:	2b08      	cmp	r3, #8
 8001980:	d101      	bne.n	8001986 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001982:	2303      	movs	r3, #3
 8001984:	e007      	b.n	8001996 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f003 031c 	and.w	r3, r3, #28
 800198c:	2b14      	cmp	r3, #20
 800198e:	d101      	bne.n	8001994 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001990:	2304      	movs	r3, #4
 8001992:	e000      	b.n	8001996 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001994:	2305      	movs	r3, #5
    }
  }
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a2:	2003      	movs	r0, #3
 80019a4:	f000 f8f9 	bl	8001b9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a8:	200f      	movs	r0, #15
 80019aa:	f7ff f80f 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ae:	f7fe ffe5 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x24>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_IncTick+0x24>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000d6c 	.word	0x20000d6c

080019e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000d6c 	.word	0x20000d6c

080019f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff ffee 	bl	80019e0 <HAL_GetTick>
 8001a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a10:	d005      	beq.n	8001a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_Delay+0x44>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a1e:	bf00      	nop
 8001a20:	f7ff ffde 	bl	80019e0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8f7      	bhi.n	8001a20 <HAL_Delay+0x28>
  {
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008

08001a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <__NVIC_SetPriorityGrouping+0x40>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <__NVIC_SetPriorityGrouping+0x40>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60d3      	str	r3, [r2, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00
 8001a84:	05fa0000 	.word	0x05fa0000

08001a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0307 	and.w	r3, r3, #7
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	db0b      	blt.n	8001ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	f003 021f 	and.w	r2, r3, #31
 8001abc:	4907      	ldr	r1, [pc, #28]	; (8001adc <__NVIC_EnableIRQ+0x38>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000e100 	.word	0xe000e100

08001ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db0a      	blt.n	8001b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	490c      	ldr	r1, [pc, #48]	; (8001b2c <__NVIC_SetPriority+0x4c>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	440b      	add	r3, r1
 8001b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b08:	e00a      	b.n	8001b20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4908      	ldr	r1, [pc, #32]	; (8001b30 <__NVIC_SetPriority+0x50>)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	3b04      	subs	r3, #4
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	761a      	strb	r2, [r3, #24]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e100 	.word	0xe000e100
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f1c3 0307 	rsb	r3, r3, #7
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	bf28      	it	cs
 8001b52:	2304      	movcs	r3, #4
 8001b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d902      	bls.n	8001b64 <NVIC_EncodePriority+0x30>
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3b03      	subs	r3, #3
 8001b62:	e000      	b.n	8001b66 <NVIC_EncodePriority+0x32>
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	401a      	ands	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	43d9      	mvns	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	4313      	orrs	r3, r2
         );
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3724      	adds	r7, #36	; 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ff4c 	bl	8001a40 <__NVIC_SetPriorityGrouping>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc2:	f7ff ff61 	bl	8001a88 <__NVIC_GetPriorityGrouping>
 8001bc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	68b9      	ldr	r1, [r7, #8]
 8001bcc:	6978      	ldr	r0, [r7, #20]
 8001bce:	f7ff ffb1 	bl	8001b34 <NVIC_EncodePriority>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd8:	4611      	mov	r1, r2
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff80 	bl	8001ae0 <__NVIC_SetPriority>
}
 8001be0:	bf00      	nop
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff54 	bl	8001aa4 <__NVIC_EnableIRQ>
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e086      	b.n	8001d24 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d106      	bne.n	8001c2e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2223      	movs	r2, #35	; 0x23
 8001c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f004 fddf 	bl	80067ec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <HAL_ETH_Init+0x128>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a3e      	ldr	r2, [pc, #248]	; (8001d2c <HAL_ETH_Init+0x128>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b3c      	ldr	r3, [pc, #240]	; (8001d2c <HAL_ETH_Init+0x128>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c46:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <HAL_ETH_Init+0x12c>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4a39      	ldr	r2, [pc, #228]	; (8001d30 <HAL_ETH_Init+0x12c>)
 8001c4c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c50:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c52:	4b37      	ldr	r3, [pc, #220]	; (8001d30 <HAL_ETH_Init+0x12c>)
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	4935      	ldr	r1, [pc, #212]	; (8001d30 <HAL_ETH_Init+0x12c>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001c60:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <HAL_ETH_Init+0x12c>)
 8001c62:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c7c:	f7ff feb0 	bl	80019e0 <HAL_GetTick>
 8001c80:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c82:	e011      	b.n	8001ca8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c84:	f7ff feac 	bl	80019e0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c92:	d909      	bls.n	8001ca8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2204      	movs	r2, #4
 8001c98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	22e0      	movs	r2, #224	; 0xe0
 8001ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e03d      	b.n	8001d24 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1e4      	bne.n	8001c84 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 ff4e 	bl	8002b5c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fff9 	bl	8002cb8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f001 f84f 	bl	8002d6a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 ffb7 	bl	8002c48 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_ETH_Init+0x130>)
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001d0e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40013800 	.word	0x40013800
 8001d34:	00020060 	.word	0x00020060

08001d38 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d15f      	bne.n	8001e0a <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2223      	movs	r2, #35	; 0x23
 8001d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f9f6 	bl	8002150 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f7ff fe43 	bl	80019f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d90:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001da8:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fd73 	bl	8002896 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0208 	orr.w	r2, r2, #8
 8001dbe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f7ff fe15 	bl	80019f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f042 0204 	orr.w	r2, r2, #4
 8001de4:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dee:	69d9      	ldr	r1, [r3, #28]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <HAL_ETH_Start_IT+0xdc>)
 8001df6:	430b      	orrs	r3, r1
 8001df8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dfc:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2223      	movs	r2, #35	; 0x23
 8001e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
  }
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	0001a0c1 	.word	0x0001a0c1

08001e18 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e26:	2b23      	cmp	r3, #35	; 0x23
 8001e28:	d16e      	bne.n	8001f08 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2223      	movs	r2, #35	; 0x23
 8001e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3a:	69d9      	ldr	r1, [r3, #28]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <HAL_ETH_Stop_IT+0xfc>)
 8001e42:	400b      	ands	r3, r1
 8001e44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e48:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e60:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	f023 0302 	bic.w	r3, r3, #2
 8001e74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e78:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0204 	bic.w	r2, r2, #4
 8001e88:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7ff fdb0 	bl	80019f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fcf8 	bl	8002896 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0208 	bic.w	r2, r2, #8
 8001eb4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f7ff fd9a 	bl	80019f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	e00e      	b.n	8001ef0 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	3212      	adds	r2, #18
 8001ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001edc:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3301      	adds	r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d9ed      	bls.n	8001ed2 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2210      	movs	r2, #16
 8001f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e000      	b.n	8001f0a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
  }
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	fffe5f3e 	.word	0xfffe5f3e

08001f18 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d109      	bne.n	8001f3c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2e:	f043 0201 	orr.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e045      	b.n	8001fc8 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f42:	2b23      	cmp	r3, #35	; 0x23
 8001f44:	d13f      	bne.n	8001fc6 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	6839      	ldr	r1, [r7, #0]
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 ff78 	bl	8002e48 <ETH_Prepare_Tx_Descriptors>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d009      	beq.n	8001f72 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f64:	f043 0202 	orr.w	r2, r3, #2
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e02a      	b.n	8001fc8 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f72:	f3bf 8f4f 	dsb	sy
}
 8001f76:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d904      	bls.n	8001f94 <HAL_ETH_Transmit_IT+0x7c>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	1f1a      	subs	r2, r3, #4
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00d      	beq.n	8001fc2 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
  }
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d109      	bne.n	8001ffc <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	f043 0201 	orr.w	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0a4      	b.n	8002146 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002002:	2b23      	cmp	r3, #35	; 0x23
 8002004:	d001      	beq.n	800200a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e09d      	b.n	8002146 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	3212      	adds	r2, #18
 8002016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002020:	f1c3 0304 	rsb	r3, r3, #4
 8002024:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002026:	e066      	b.n	80020f6 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d007      	beq.n	8002044 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	69da      	ldr	r2, [r3, #28]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	699a      	ldr	r2, [r3, #24]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204c:	2b00      	cmp	r3, #0
 800204e:	d103      	bne.n	8002058 <HAL_ETH_ReadData+0x88>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002054:	2b00      	cmp	r3, #0
 8002056:	d03c      	beq.n	80020d2 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800207a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002090:	2301      	movs	r3, #1
 8002092:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80020ac:	461a      	mov	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	f004 fd67 	bl	8006b84 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	441a      	add	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2200      	movs	r2, #0
 80020d0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3301      	adds	r3, #1
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d902      	bls.n	80020e4 <HAL_ETH_ReadData+0x114>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b04      	subs	r3, #4
 80020e2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	3212      	adds	r2, #18
 80020ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ee:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	3301      	adds	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	db06      	blt.n	800210c <HAL_ETH_ReadData+0x13c>
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	429a      	cmp	r2, r3
 8002104:	d202      	bcs.n	800210c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002106:	7cfb      	ldrb	r3, [r7, #19]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d08d      	beq.n	8002028 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	441a      	add	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f815 	bl	8002150 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d108      	bne.n	8002144 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
}
 8002146:	4618      	mov	r0, r3
 8002148:	3720      	adds	r7, #32
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002158:	2300      	movs	r3, #0
 800215a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800215c:	2301      	movs	r3, #1
 800215e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002164:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	3212      	adds	r2, #18
 800216c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002170:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002176:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002178:	e042      	b.n	8002200 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d112      	bne.n	80021a8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002182:	f107 0308 	add.w	r3, r7, #8
 8002186:	4618      	mov	r0, r3
 8002188:	f004 fccc 	bl	8006b24 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d102      	bne.n	8002198 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	74fb      	strb	r3, [r7, #19]
 8002196:	e007      	b.n	80021a8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	461a      	mov	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	461a      	mov	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80021a8:	7cfb      	ldrb	r3, [r7, #19]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d028      	beq.n	8002200 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	4b26      	ldr	r3, [pc, #152]	; (8002254 <ETH_UpdateDescriptor+0x104>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	6053      	str	r3, [r2, #4]
 80021c2:	e005      	b.n	80021d0 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	3301      	adds	r3, #1
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d902      	bls.n	80021ee <ETH_UpdateDescriptor+0x9e>
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	3b04      	subs	r3, #4
 80021ec:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	3212      	adds	r2, #18
 80021f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f8:	617b      	str	r3, [r7, #20]
      desccount--;
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <ETH_UpdateDescriptor+0xbc>
 8002206:	7cfb      	ldrb	r3, [r7, #19]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1b6      	bne.n	800217a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	429a      	cmp	r2, r3
 8002214:	d01a      	beq.n	800224c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3301      	adds	r3, #1
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002220:	f3bf 8f5f 	dmb	sy
}
 8002224:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6919      	ldr	r1, [r3, #16]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	18ca      	adds	r2, r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800223e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800224c:	bf00      	nop
 800224e:	3720      	adds	r7, #32
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	80004000 	.word	0x80004000

08002258 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3318      	adds	r3, #24
 8002264:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002272:	2301      	movs	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002276:	e047      	b.n	8002308 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002278:	2301      	movs	r3, #1
 800227a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3b01      	subs	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	3304      	adds	r3, #4
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10a      	bne.n	80022a8 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	3301      	adds	r3, #1
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	2b03      	cmp	r3, #3
 800229c:	d902      	bls.n	80022a4 <HAL_ETH_ReleaseTxPacket+0x4c>
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	3b04      	subs	r3, #4
 80022a2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80022a8:	7bbb      	ldrb	r3, [r7, #14]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d02c      	beq.n	8002308 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68d9      	ldr	r1, [r3, #12]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db1f      	blt.n	8002304 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	3304      	adds	r3, #4
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f004 fc99 	bl	8006c08 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	3304      	adds	r3, #4
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	2200      	movs	r2, #0
 80022e2:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	3301      	adds	r3, #1
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d902      	bls.n	80022f6 <HAL_ETH_ReleaseTxPacket+0x9e>
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	3b04      	subs	r3, #4
 80022f4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	62da      	str	r2, [r3, #44]	; 0x2c
 8002302:	e001      	b.n	8002308 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_ETH_ReleaseTxPacket+0xbc>
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1b1      	bne.n	8002278 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002348:	4b4b      	ldr	r3, [pc, #300]	; (8002478 <HAL_ETH_IRQHandler+0x158>)
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00e      	beq.n	8002376 <HAL_ETH_IRQHandler+0x56>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236a:	461a      	mov	r2, r3
 800236c:	4b43      	ldr	r3, [pc, #268]	; (800247c <HAL_ETH_IRQHandler+0x15c>)
 800236e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f003 ff9f 	bl	80062b4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00f      	beq.n	80023a0 <HAL_ETH_IRQHandler+0x80>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002392:	461a      	mov	r2, r3
 8002394:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002398:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f003 ff9a 	bl	80062d4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d042      	beq.n	8002430 <HAL_ETH_IRQHandler+0x110>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d03d      	beq.n	8002430 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f043 0208 	orr.w	r2, r3, #8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01a      	beq.n	8002404 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	4b29      	ldr	r3, [pc, #164]	; (8002480 <HAL_ETH_IRQHandler+0x160>)
 80023da:	4013      	ands	r3, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80023f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023f8:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	22e0      	movs	r2, #224	; 0xe0
 80023fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002402:	e012      	b.n	800242a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800240c:	695a      	ldr	r2, [r3, #20]
 800240e:	f248 6380 	movw	r3, #34432	; 0x8680
 8002412:	4013      	ands	r3, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002422:	461a      	mov	r2, r3
 8002424:	f248 6380 	movw	r3, #34432	; 0x8680
 8002428:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f003 ff62 	bl	80062f4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00e      	beq.n	8002458 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f81a 	bl	8002484 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d006      	beq.n	8002470 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_ETH_IRQHandler+0x158>)
 8002464:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002468:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f814 	bl	8002498 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002470:	bf00      	nop
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40013c00 	.word	0x40013c00
 800247c:	00010040 	.word	0x00010040
 8002480:	007e2000 	.word	0x007e2000

08002484 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 031c 	and.w	r3, r3, #28
 80024c8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	02db      	lsls	r3, r3, #11
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	019b      	lsls	r3, r3, #6
 80024da:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f023 0302 	bic.w	r3, r3, #2
 80024ea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80024fc:	f7ff fa70 	bl	80019e0 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002502:	e00d      	b.n	8002520 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002504:	f7ff fa6c 	bl	80019e0 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002512:	d301      	bcc.n	8002518 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e010      	b.n	800253a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1ec      	bne.n	8002504 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	b29b      	uxth	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f003 031c 	and.w	r3, r3, #28
 800255e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	02db      	lsls	r3, r3, #11
 8002564:	b29b      	uxth	r3, r3
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	019b      	lsls	r3, r3, #6
 8002570:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	4313      	orrs	r3, r2
 8002578:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800259c:	f7ff fa20 	bl	80019e0 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025a2:	e00d      	b.n	80025c0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80025a4:	f7ff fa1c 	bl	80019e0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b2:	d301      	bcc.n	80025b8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e009      	b.n	80025cc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1ec      	bne.n	80025a4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0e6      	b.n	80027b6 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	bf14      	ite	ne
 80025f6:	2301      	movne	r3, #1
 80025f8:	2300      	moveq	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002652:	2b00      	cmp	r3, #0
 8002654:	bf0c      	ite	eq
 8002656:	2301      	moveq	r3, #1
 8002658:	2300      	movne	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf14      	ite	ne
 8002670:	2301      	movne	r3, #1
 8002672:	2300      	moveq	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf0c      	ite	eq
 80026a6:	2301      	moveq	r3, #1
 80026a8:	2300      	movne	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fe:	2b00      	cmp	r3, #0
 8002700:	bf14      	ite	ne
 8002702:	2301      	movne	r3, #1
 8002704:	2300      	moveq	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	bf14      	ite	ne
 800271c:	2301      	movne	r3, #1
 800271e:	2300      	moveq	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	bf14      	ite	ne
 8002736:	2301      	movne	r3, #1
 8002738:	2300      	moveq	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	0c1b      	lsrs	r3, r3, #16
 8002776:	b29a      	uxth	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	bf14      	ite	ne
 800278a:	2301      	movne	r3, #1
 800278c:	2300      	moveq	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf14      	ite	ne
 80027a6:	2301      	movne	r3, #1
 80027a8:	2300      	moveq	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00b      	b.n	80027ee <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027dc:	2b10      	cmp	r3, #16
 80027de:	d105      	bne.n	80027ec <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80027e0:	6839      	ldr	r1, [r7, #0]
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f87c 	bl	80028e0 <ETH_SetMACConfig>

    return HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e000      	b.n	80027ee <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 031c 	bic.w	r3, r3, #28
 800280e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002810:	f001 fc2a 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 8002814:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	4a14      	ldr	r2, [pc, #80]	; (800286c <HAL_ETH_SetMDIOClockRange+0x74>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d804      	bhi.n	8002828 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f043 0308 	orr.w	r3, r3, #8
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	e019      	b.n	800285c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4a11      	ldr	r2, [pc, #68]	; (8002870 <HAL_ETH_SetMDIOClockRange+0x78>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d204      	bcs.n	800283a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f043 030c 	orr.w	r3, r3, #12
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e010      	b.n	800285c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4a0d      	ldr	r2, [pc, #52]	; (8002874 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d90c      	bls.n	800285c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d804      	bhi.n	8002854 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	e003      	b.n	800285c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f043 0310 	orr.w	r3, r3, #16
 800285a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	611a      	str	r2, [r3, #16]
}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	02160ebf 	.word	0x02160ebf
 8002870:	03938700 	.word	0x03938700
 8002874:	05f5e0ff 	.word	0x05f5e0ff
 8002878:	08f0d17f 	.word	0x08f0d17f

0800287c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028b8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028c6:	2001      	movs	r0, #1
 80028c8:	f7ff f896 	bl	80019f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028d6:	6193      	str	r3, [r2, #24]
}
 80028d8:	bf00      	nop
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4b53      	ldr	r3, [pc, #332]	; (8002a44 <ETH_SetMACConfig+0x164>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	7b9b      	ldrb	r3, [r3, #14]
 80028fe:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	7c12      	ldrb	r2, [r2, #16]
 8002904:	2a00      	cmp	r2, #0
 8002906:	d102      	bne.n	800290e <ETH_SetMACConfig+0x2e>
 8002908:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800290c:	e000      	b.n	8002910 <ETH_SetMACConfig+0x30>
 800290e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002910:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	7c52      	ldrb	r2, [r2, #17]
 8002916:	2a00      	cmp	r2, #0
 8002918:	d102      	bne.n	8002920 <ETH_SetMACConfig+0x40>
 800291a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800291e:	e000      	b.n	8002922 <ETH_SetMACConfig+0x42>
 8002920:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002922:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002928:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	7fdb      	ldrb	r3, [r3, #31]
 800292e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002930:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002936:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	7f92      	ldrb	r2, [r2, #30]
 800293c:	2a00      	cmp	r2, #0
 800293e:	d102      	bne.n	8002946 <ETH_SetMACConfig+0x66>
 8002940:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002944:	e000      	b.n	8002948 <ETH_SetMACConfig+0x68>
 8002946:	2200      	movs	r2, #0
                        macconf->Speed |
 8002948:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	7f1b      	ldrb	r3, [r3, #28]
 800294e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002950:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002956:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	791b      	ldrb	r3, [r3, #4]
 800295c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800295e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002966:	2a00      	cmp	r2, #0
 8002968:	d102      	bne.n	8002970 <ETH_SetMACConfig+0x90>
 800296a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800296e:	e000      	b.n	8002972 <ETH_SetMACConfig+0x92>
 8002970:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002972:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	7bdb      	ldrb	r3, [r3, #15]
 8002978:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800297a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002980:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002988:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800298a:	4313      	orrs	r3, r2
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029a2:	2001      	movs	r0, #1
 80029a4:	f7ff f828 	bl	80019f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	f64f 7341 	movw	r3, #65345	; 0xff41
 80029be:	4013      	ands	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80029ce:	2a00      	cmp	r2, #0
 80029d0:	d101      	bne.n	80029d6 <ETH_SetMACConfig+0xf6>
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	e000      	b.n	80029d8 <ETH_SetMACConfig+0xf8>
 80029d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029d8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80029de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80029e6:	2a01      	cmp	r2, #1
 80029e8:	d101      	bne.n	80029ee <ETH_SetMACConfig+0x10e>
 80029ea:	2208      	movs	r2, #8
 80029ec:	e000      	b.n	80029f0 <ETH_SetMACConfig+0x110>
 80029ee:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80029f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80029f8:	2a01      	cmp	r2, #1
 80029fa:	d101      	bne.n	8002a00 <ETH_SetMACConfig+0x120>
 80029fc:	2204      	movs	r2, #4
 80029fe:	e000      	b.n	8002a02 <ETH_SetMACConfig+0x122>
 8002a00:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002a0a:	2a01      	cmp	r2, #1
 8002a0c:	d101      	bne.n	8002a12 <ETH_SetMACConfig+0x132>
 8002a0e:	2202      	movs	r2, #2
 8002a10:	e000      	b.n	8002a14 <ETH_SetMACConfig+0x134>
 8002a12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a14:	4313      	orrs	r3, r2
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	f7fe ffe3 	bl	80019f8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	619a      	str	r2, [r3, #24]
}
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	fd20810f 	.word	0xfd20810f

08002a48 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4b3d      	ldr	r3, [pc, #244]	; (8002b58 <ETH_SetDMAConfig+0x110>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	7b1b      	ldrb	r3, [r3, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <ETH_SetDMAConfig+0x2c>
 8002a6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a72:	e000      	b.n	8002a76 <ETH_SetDMAConfig+0x2e>
 8002a74:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	7b5b      	ldrb	r3, [r3, #13]
 8002a7a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a7c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	7f52      	ldrb	r2, [r2, #29]
 8002a82:	2a00      	cmp	r2, #0
 8002a84:	d102      	bne.n	8002a8c <ETH_SetDMAConfig+0x44>
 8002a86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a8a:	e000      	b.n	8002a8e <ETH_SetDMAConfig+0x46>
 8002a8c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a8e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	7b9b      	ldrb	r3, [r3, #14]
 8002a94:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a96:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a9c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	7f1b      	ldrb	r3, [r3, #28]
 8002aa2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002aa4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	7f9b      	ldrb	r3, [r3, #30]
 8002aaa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002aac:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002ab2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aba:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002abc:	4313      	orrs	r3, r2
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002acc:	461a      	mov	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ade:	2001      	movs	r0, #1
 8002ae0:	f7fe ff8a 	bl	80019f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aec:	461a      	mov	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	791b      	ldrb	r3, [r3, #4]
 8002af6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002afc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002b02:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b08:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b10:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002b12:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b1a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b20:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b2e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f7fe ff5b 	bl	80019f8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6013      	str	r3, [r2, #0]
}
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	f8de3f23 	.word	0xf8de3f23

08002b5c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b0a6      	sub	sp, #152	; 0x98
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002b64:	2301      	movs	r3, #1
 8002b66:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002b70:	2300      	movs	r3, #0
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002bc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bc8:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002bca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002bd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff fe7f 	bl	80028e0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002be6:	2301      	movs	r3, #1
 8002be8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c16:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c1c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c22:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002c24:	2301      	movs	r3, #1
 8002c26:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c32:	f107 0308 	add.w	r3, r7, #8
 8002c36:	4619      	mov	r1, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ff05 	bl	8002a48 <ETH_SetDMAConfig>
}
 8002c3e:	bf00      	nop
 8002c40:	3798      	adds	r7, #152	; 0x98
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3305      	adds	r3, #5
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	3204      	adds	r2, #4
 8002c60:	7812      	ldrb	r2, [r2, #0]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <ETH_MACAddressConfig+0x68>)
 8002c6a:	4413      	add	r3, r2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3303      	adds	r3, #3
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	061a      	lsls	r2, r3, #24
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	041b      	lsls	r3, r3, #16
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3301      	adds	r3, #1
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	7812      	ldrb	r2, [r2, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <ETH_MACAddressConfig+0x6c>)
 8002c9a:	4413      	add	r3, r2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	6013      	str	r3, [r2, #0]
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40028040 	.word	0x40028040
 8002cb4:	40028044 	.word	0x40028044

08002cb8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e03e      	b.n	8002d44 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68d9      	ldr	r1, [r3, #12]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2200      	movs	r2, #0
 8002cee:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	3206      	adds	r2, #6
 8002cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d80c      	bhi.n	8002d28 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68d9      	ldr	r1, [r3, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	461a      	mov	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	e004      	b.n	8002d32 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3301      	adds	r3, #1
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d9bd      	bls.n	8002cc6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d5c:	611a      	str	r2, [r3, #16]
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	e048      	b.n	8002e0a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6919      	ldr	r1, [r3, #16]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	440b      	add	r3, r1
 8002d88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2200      	movs	r2, #0
 8002d94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2200      	movs	r2, #0
 8002da6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2200      	movs	r2, #0
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002db4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	3212      	adds	r2, #18
 8002dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d80c      	bhi.n	8002dfa <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6919      	ldr	r1, [r3, #16]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	461a      	mov	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	60da      	str	r2, [r3, #12]
 8002df8:	e004      	b.n	8002e04 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3301      	adds	r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d9b3      	bls.n	8002d78 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e3a:	60da      	str	r2, [r3, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b091      	sub	sp, #68	; 0x44
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3318      	adds	r3, #24
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e72:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e8a:	d007      	beq.n	8002e9c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e90:	3304      	adds	r3, #4
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e111      	b.n	80030c4 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	4b86      	ldr	r3, [pc, #536]	; (80030d0 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eba:	6852      	ldr	r2, [r2, #4]
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002f22:	e082      	b.n	800302a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d006      	beq.n	8002f44 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e005      	b.n	8002f50 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f52:	3301      	adds	r3, #1
 8002f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d902      	bls.n	8002f62 <ETH_Prepare_Tx_Descriptors+0x11a>
 8002f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f5e:	3b04      	subs	r3, #4
 8002f60:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f6a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f78:	d007      	beq.n	8002f8a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7e:	3304      	adds	r3, #4
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d029      	beq.n	8002fde <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f9c:	e019      	b.n	8002fd2 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002f9e:	f3bf 8f5f 	dmb	sy
}
 8002fa2:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d902      	bls.n	8002fc2 <ETH_Prepare_Tx_Descriptors+0x17a>
 8002fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fbe:	3b04      	subs	r3, #4
 8002fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fca:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	3301      	adds	r3, #1
 8002fd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d3e1      	bcc.n	8002f9e <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e072      	b.n	80030c4 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fec:	3301      	adds	r3, #1
 8002fee:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	4b32      	ldr	r3, [pc, #200]	; (80030d0 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003006:	4013      	ands	r3, r2
 8003008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800300a:	6852      	ldr	r2, [r2, #4]
 800300c:	431a      	orrs	r2, r3
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003014:	3301      	adds	r3, #1
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003018:	f3bf 8f5f 	dmb	sy
}
 800301c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f47f af78 	bne.w	8002f24 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d006      	beq.n	8003048 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	e005      	b.n	8003054 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	6a3a      	ldr	r2, [r7, #32]
 8003064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003068:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800306a:	f3bf 8f5f 	dmb	sy
}
 800306e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003084:	3304      	adds	r3, #4
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003090:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003092:	f3ef 8310 	mrs	r3, PRIMASK
 8003096:	613b      	str	r3, [r7, #16]
  return(result);
 8003098:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	2301      	movs	r3, #1
 800309e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f383 8810 	msr	PRIMASK, r3
}
 80030a6:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ae:	4413      	add	r3, r2
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f383 8810 	msr	PRIMASK, r3
}
 80030c0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3744      	adds	r7, #68	; 0x44
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	ffffe000 	.word	0xffffe000

080030d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	; 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
 80030f2:	e175      	b.n	80033e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030f4:	2201      	movs	r2, #1
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4013      	ands	r3, r2
 8003106:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	429a      	cmp	r2, r3
 800310e:	f040 8164 	bne.w	80033da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d005      	beq.n	800312a <HAL_GPIO_Init+0x56>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d130      	bne.n	800318c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	2203      	movs	r2, #3
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003160:	2201      	movs	r2, #1
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f003 0201 	and.w	r2, r3, #1
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b03      	cmp	r3, #3
 8003196:	d017      	beq.n	80031c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	2203      	movs	r2, #3
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d123      	bne.n	800321c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	08da      	lsrs	r2, r3, #3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3208      	adds	r2, #8
 80031dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	220f      	movs	r2, #15
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	08da      	lsrs	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3208      	adds	r2, #8
 8003216:	69b9      	ldr	r1, [r7, #24]
 8003218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	2203      	movs	r2, #3
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0203 	and.w	r2, r3, #3
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 80be 	beq.w	80033da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325e:	4b66      	ldr	r3, [pc, #408]	; (80033f8 <HAL_GPIO_Init+0x324>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	4a65      	ldr	r2, [pc, #404]	; (80033f8 <HAL_GPIO_Init+0x324>)
 8003264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003268:	6453      	str	r3, [r2, #68]	; 0x44
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_GPIO_Init+0x324>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003276:	4a61      	ldr	r2, [pc, #388]	; (80033fc <HAL_GPIO_Init+0x328>)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	089b      	lsrs	r3, r3, #2
 800327c:	3302      	adds	r3, #2
 800327e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	220f      	movs	r2, #15
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a58      	ldr	r2, [pc, #352]	; (8003400 <HAL_GPIO_Init+0x32c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d037      	beq.n	8003312 <HAL_GPIO_Init+0x23e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a57      	ldr	r2, [pc, #348]	; (8003404 <HAL_GPIO_Init+0x330>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d031      	beq.n	800330e <HAL_GPIO_Init+0x23a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a56      	ldr	r2, [pc, #344]	; (8003408 <HAL_GPIO_Init+0x334>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d02b      	beq.n	800330a <HAL_GPIO_Init+0x236>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a55      	ldr	r2, [pc, #340]	; (800340c <HAL_GPIO_Init+0x338>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d025      	beq.n	8003306 <HAL_GPIO_Init+0x232>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a54      	ldr	r2, [pc, #336]	; (8003410 <HAL_GPIO_Init+0x33c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01f      	beq.n	8003302 <HAL_GPIO_Init+0x22e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a53      	ldr	r2, [pc, #332]	; (8003414 <HAL_GPIO_Init+0x340>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d019      	beq.n	80032fe <HAL_GPIO_Init+0x22a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_GPIO_Init+0x344>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <HAL_GPIO_Init+0x226>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a51      	ldr	r2, [pc, #324]	; (800341c <HAL_GPIO_Init+0x348>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00d      	beq.n	80032f6 <HAL_GPIO_Init+0x222>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a50      	ldr	r2, [pc, #320]	; (8003420 <HAL_GPIO_Init+0x34c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <HAL_GPIO_Init+0x21e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4f      	ldr	r2, [pc, #316]	; (8003424 <HAL_GPIO_Init+0x350>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <HAL_GPIO_Init+0x21a>
 80032ea:	2309      	movs	r3, #9
 80032ec:	e012      	b.n	8003314 <HAL_GPIO_Init+0x240>
 80032ee:	230a      	movs	r3, #10
 80032f0:	e010      	b.n	8003314 <HAL_GPIO_Init+0x240>
 80032f2:	2308      	movs	r3, #8
 80032f4:	e00e      	b.n	8003314 <HAL_GPIO_Init+0x240>
 80032f6:	2307      	movs	r3, #7
 80032f8:	e00c      	b.n	8003314 <HAL_GPIO_Init+0x240>
 80032fa:	2306      	movs	r3, #6
 80032fc:	e00a      	b.n	8003314 <HAL_GPIO_Init+0x240>
 80032fe:	2305      	movs	r3, #5
 8003300:	e008      	b.n	8003314 <HAL_GPIO_Init+0x240>
 8003302:	2304      	movs	r3, #4
 8003304:	e006      	b.n	8003314 <HAL_GPIO_Init+0x240>
 8003306:	2303      	movs	r3, #3
 8003308:	e004      	b.n	8003314 <HAL_GPIO_Init+0x240>
 800330a:	2302      	movs	r3, #2
 800330c:	e002      	b.n	8003314 <HAL_GPIO_Init+0x240>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_GPIO_Init+0x240>
 8003312:	2300      	movs	r3, #0
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	f002 0203 	and.w	r2, r2, #3
 800331a:	0092      	lsls	r2, r2, #2
 800331c:	4093      	lsls	r3, r2
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003324:	4935      	ldr	r1, [pc, #212]	; (80033fc <HAL_GPIO_Init+0x328>)
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	089b      	lsrs	r3, r3, #2
 800332a:	3302      	adds	r3, #2
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003332:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <HAL_GPIO_Init+0x354>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003356:	4a34      	ldr	r2, [pc, #208]	; (8003428 <HAL_GPIO_Init+0x354>)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800335c:	4b32      	ldr	r3, [pc, #200]	; (8003428 <HAL_GPIO_Init+0x354>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003380:	4a29      	ldr	r2, [pc, #164]	; (8003428 <HAL_GPIO_Init+0x354>)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003386:	4b28      	ldr	r3, [pc, #160]	; (8003428 <HAL_GPIO_Init+0x354>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	43db      	mvns	r3, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4013      	ands	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033aa:	4a1f      	ldr	r2, [pc, #124]	; (8003428 <HAL_GPIO_Init+0x354>)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033b0:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <HAL_GPIO_Init+0x354>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033d4:	4a14      	ldr	r2, [pc, #80]	; (8003428 <HAL_GPIO_Init+0x354>)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3301      	adds	r3, #1
 80033de:	61fb      	str	r3, [r7, #28]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	2b0f      	cmp	r3, #15
 80033e4:	f67f ae86 	bls.w	80030f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033e8:	bf00      	nop
 80033ea:	bf00      	nop
 80033ec:	3724      	adds	r7, #36	; 0x24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40013800 	.word	0x40013800
 8003400:	40020000 	.word	0x40020000
 8003404:	40020400 	.word	0x40020400
 8003408:	40020800 	.word	0x40020800
 800340c:	40020c00 	.word	0x40020c00
 8003410:	40021000 	.word	0x40021000
 8003414:	40021400 	.word	0x40021400
 8003418:	40021800 	.word	0x40021800
 800341c:	40021c00 	.word	0x40021c00
 8003420:	40022000 	.word	0x40022000
 8003424:	40022400 	.word	0x40022400
 8003428:	40013c00 	.word	0x40013c00

0800342c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	807b      	strh	r3, [r7, #2]
 8003438:	4613      	mov	r3, r2
 800343a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800343c:	787b      	ldrb	r3, [r7, #1]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003442:	887a      	ldrh	r2, [r7, #2]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003448:	e003      	b.n	8003452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800344a:	887b      	ldrh	r3, [r7, #2]
 800344c:	041a      	lsls	r2, r3, #16
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	619a      	str	r2, [r3, #24]
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003470:	887a      	ldrh	r2, [r7, #2]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4013      	ands	r3, r2
 8003476:	041a      	lsls	r2, r3, #16
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	43d9      	mvns	r1, r3
 800347c:	887b      	ldrh	r3, [r7, #2]
 800347e:	400b      	ands	r3, r1
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	619a      	str	r2, [r3, #24]
}
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b086      	sub	sp, #24
 8003496:	af02      	add	r7, sp, #8
 8003498:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e108      	b.n	80036b6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fe f8c4 	bl	800164c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2203      	movs	r2, #3
 80034c8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034d2:	d102      	bne.n	80034da <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f002 fad6 	bl	8005a90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7c1a      	ldrb	r2, [r3, #16]
 80034ec:	f88d 2000 	strb.w	r2, [sp]
 80034f0:	3304      	adds	r3, #4
 80034f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034f4:	f002 fa72 	bl	80059dc <USB_CoreInit>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0d5      	b.n	80036b6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f002 face 	bl	8005ab2 <USB_SetCurrentMode>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0c6      	b.n	80036b6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003528:	2300      	movs	r3, #0
 800352a:	73fb      	strb	r3, [r7, #15]
 800352c:	e04a      	b.n	80035c4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800352e:	7bfa      	ldrb	r2, [r7, #15]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	3315      	adds	r3, #21
 800353e:	2201      	movs	r2, #1
 8003540:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003542:	7bfa      	ldrb	r2, [r7, #15]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	3314      	adds	r3, #20
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003556:	7bfa      	ldrb	r2, [r7, #15]
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	b298      	uxth	r0, r3
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	332e      	adds	r3, #46	; 0x2e
 800356a:	4602      	mov	r2, r0
 800356c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	3318      	adds	r3, #24
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003582:	7bfa      	ldrb	r2, [r7, #15]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	331c      	adds	r3, #28
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	3320      	adds	r3, #32
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035aa:	7bfa      	ldrb	r2, [r7, #15]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	3324      	adds	r3, #36	; 0x24
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	3301      	adds	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	791b      	ldrb	r3, [r3, #4]
 80035c8:	7bfa      	ldrb	r2, [r7, #15]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d3af      	bcc.n	800352e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ce:	2300      	movs	r3, #0
 80035d0:	73fb      	strb	r3, [r7, #15]
 80035d2:	e044      	b.n	800365e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	f203 2355 	addw	r3, r3, #597	; 0x255
 80035e6:	2200      	movs	r2, #0
 80035e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	3301      	adds	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	791b      	ldrb	r3, [r3, #4]
 8003662:	7bfa      	ldrb	r2, [r7, #15]
 8003664:	429a      	cmp	r2, r3
 8003666:	d3b5      	bcc.n	80035d4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	7c1a      	ldrb	r2, [r3, #16]
 8003670:	f88d 2000 	strb.w	r2, [sp]
 8003674:	3304      	adds	r3, #4
 8003676:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003678:	f002 fa68 	bl	8005b4c <USB_DevInit>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e013      	b.n	80036b6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	7b1b      	ldrb	r3, [r3, #12]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d102      	bne.n	80036aa <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f80b 	bl	80036c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f002 fc23 	bl	8005efa <USB_DevDisconnect>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_PCDEx_ActivateLPM+0x44>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	10000003 	.word	0x10000003

08003708 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a04      	ldr	r2, [pc, #16]	; (8003724 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003716:	6013      	str	r3, [r2, #0]
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40007000 	.word	0x40007000

08003728 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003730:	2300      	movs	r3, #0
 8003732:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e29b      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8087 	beq.w	800385a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800374c:	4b96      	ldr	r3, [pc, #600]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b04      	cmp	r3, #4
 8003756:	d00c      	beq.n	8003772 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003758:	4b93      	ldr	r3, [pc, #588]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b08      	cmp	r3, #8
 8003762:	d112      	bne.n	800378a <HAL_RCC_OscConfig+0x62>
 8003764:	4b90      	ldr	r3, [pc, #576]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003770:	d10b      	bne.n	800378a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003772:	4b8d      	ldr	r3, [pc, #564]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d06c      	beq.n	8003858 <HAL_RCC_OscConfig+0x130>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d168      	bne.n	8003858 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e275      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003792:	d106      	bne.n	80037a2 <HAL_RCC_OscConfig+0x7a>
 8003794:	4b84      	ldr	r3, [pc, #528]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a83      	ldr	r2, [pc, #524]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 800379a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	e02e      	b.n	8003800 <HAL_RCC_OscConfig+0xd8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x9c>
 80037aa:	4b7f      	ldr	r3, [pc, #508]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a7e      	ldr	r2, [pc, #504]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b7c      	ldr	r3, [pc, #496]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a7b      	ldr	r2, [pc, #492]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e01d      	b.n	8003800 <HAL_RCC_OscConfig+0xd8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0xc0>
 80037ce:	4b76      	ldr	r3, [pc, #472]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a75      	ldr	r2, [pc, #468]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	4b73      	ldr	r3, [pc, #460]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a72      	ldr	r2, [pc, #456]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	e00b      	b.n	8003800 <HAL_RCC_OscConfig+0xd8>
 80037e8:	4b6f      	ldr	r3, [pc, #444]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a6e      	ldr	r2, [pc, #440]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	4b6c      	ldr	r3, [pc, #432]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a6b      	ldr	r2, [pc, #428]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d013      	beq.n	8003830 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fe f8ea 	bl	80019e0 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003810:	f7fe f8e6 	bl	80019e0 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	; 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e229      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003822:	4b61      	ldr	r3, [pc, #388]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0xe8>
 800382e:	e014      	b.n	800385a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fe f8d6 	bl	80019e0 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003838:	f7fe f8d2 	bl	80019e0 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	; 0x64
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e215      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384a:	4b57      	ldr	r3, [pc, #348]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x110>
 8003856:	e000      	b.n	800385a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d069      	beq.n	800393a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003866:	4b50      	ldr	r3, [pc, #320]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003872:	4b4d      	ldr	r3, [pc, #308]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b08      	cmp	r3, #8
 800387c:	d11c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x190>
 800387e:	4b4a      	ldr	r3, [pc, #296]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d116      	bne.n	80038b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388a:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <HAL_RCC_OscConfig+0x17a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e1e9      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a2:	4b41      	ldr	r3, [pc, #260]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	493d      	ldr	r1, [pc, #244]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b6:	e040      	b.n	800393a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d023      	beq.n	8003908 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038c0:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a38      	ldr	r2, [pc, #224]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fe f888 	bl	80019e0 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d4:	f7fe f884 	bl	80019e0 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e1c7      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e6:	4b30      	ldr	r3, [pc, #192]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f2:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4929      	ldr	r1, [pc, #164]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003902:	4313      	orrs	r3, r2
 8003904:	600b      	str	r3, [r1, #0]
 8003906:	e018      	b.n	800393a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003908:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a26      	ldr	r2, [pc, #152]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 800390e:	f023 0301 	bic.w	r3, r3, #1
 8003912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fe f864 	bl	80019e0 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800391c:	f7fe f860 	bl	80019e0 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e1a3      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392e:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d038      	beq.n	80039b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d019      	beq.n	8003982 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800394e:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003952:	4a15      	ldr	r2, [pc, #84]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395a:	f7fe f841 	bl	80019e0 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003962:	f7fe f83d 	bl	80019e0 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e180      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x23a>
 8003980:	e01a      	b.n	80039b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003986:	4a08      	ldr	r2, [pc, #32]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fe f827 	bl	80019e0 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003994:	e00a      	b.n	80039ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003996:	f7fe f823 	bl	80019e0 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d903      	bls.n	80039ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e166      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
 80039a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	4b92      	ldr	r3, [pc, #584]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 80039ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1ee      	bne.n	8003996 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80a4 	beq.w	8003b0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c6:	4b8c      	ldr	r3, [pc, #560]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10d      	bne.n	80039ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d2:	4b89      	ldr	r3, [pc, #548]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	4a88      	ldr	r2, [pc, #544]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 80039d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039dc:	6413      	str	r3, [r2, #64]	; 0x40
 80039de:	4b86      	ldr	r3, [pc, #536]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ea:	2301      	movs	r3, #1
 80039ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ee:	4b83      	ldr	r3, [pc, #524]	; (8003bfc <HAL_RCC_OscConfig+0x4d4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d118      	bne.n	8003a2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039fa:	4b80      	ldr	r3, [pc, #512]	; (8003bfc <HAL_RCC_OscConfig+0x4d4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a7f      	ldr	r2, [pc, #508]	; (8003bfc <HAL_RCC_OscConfig+0x4d4>)
 8003a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a06:	f7fd ffeb 	bl	80019e0 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0e:	f7fd ffe7 	bl	80019e0 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b64      	cmp	r3, #100	; 0x64
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e12a      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a20:	4b76      	ldr	r3, [pc, #472]	; (8003bfc <HAL_RCC_OscConfig+0x4d4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d106      	bne.n	8003a42 <HAL_RCC_OscConfig+0x31a>
 8003a34:	4b70      	ldr	r3, [pc, #448]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	4a6f      	ldr	r2, [pc, #444]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a40:	e02d      	b.n	8003a9e <HAL_RCC_OscConfig+0x376>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x33c>
 8003a4a:	4b6b      	ldr	r3, [pc, #428]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	4a6a      	ldr	r2, [pc, #424]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	6713      	str	r3, [r2, #112]	; 0x70
 8003a56:	4b68      	ldr	r3, [pc, #416]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	4a67      	ldr	r2, [pc, #412]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a5c:	f023 0304 	bic.w	r3, r3, #4
 8003a60:	6713      	str	r3, [r2, #112]	; 0x70
 8003a62:	e01c      	b.n	8003a9e <HAL_RCC_OscConfig+0x376>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b05      	cmp	r3, #5
 8003a6a:	d10c      	bne.n	8003a86 <HAL_RCC_OscConfig+0x35e>
 8003a6c:	4b62      	ldr	r3, [pc, #392]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	4a61      	ldr	r2, [pc, #388]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a72:	f043 0304 	orr.w	r3, r3, #4
 8003a76:	6713      	str	r3, [r2, #112]	; 0x70
 8003a78:	4b5f      	ldr	r3, [pc, #380]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	4a5e      	ldr	r2, [pc, #376]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	6713      	str	r3, [r2, #112]	; 0x70
 8003a84:	e00b      	b.n	8003a9e <HAL_RCC_OscConfig+0x376>
 8003a86:	4b5c      	ldr	r3, [pc, #368]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	4a5b      	ldr	r2, [pc, #364]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	6713      	str	r3, [r2, #112]	; 0x70
 8003a92:	4b59      	ldr	r3, [pc, #356]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	4a58      	ldr	r2, [pc, #352]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a98:	f023 0304 	bic.w	r3, r3, #4
 8003a9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d015      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa6:	f7fd ff9b 	bl	80019e0 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aac:	e00a      	b.n	8003ac4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f7fd ff97 	bl	80019e0 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e0d8      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac4:	4b4c      	ldr	r3, [pc, #304]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0ee      	beq.n	8003aae <HAL_RCC_OscConfig+0x386>
 8003ad0:	e014      	b.n	8003afc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad2:	f7fd ff85 	bl	80019e0 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ada:	f7fd ff81 	bl	80019e0 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e0c2      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af0:	4b41      	ldr	r3, [pc, #260]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1ee      	bne.n	8003ada <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d105      	bne.n	8003b0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b02:	4b3d      	ldr	r3, [pc, #244]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	4a3c      	ldr	r2, [pc, #240]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 80ae 	beq.w	8003c74 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b18:	4b37      	ldr	r3, [pc, #220]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d06d      	beq.n	8003c00 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d14b      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2c:	4b32      	ldr	r3, [pc, #200]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a31      	ldr	r2, [pc, #196]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fd ff52 	bl	80019e0 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fd ff4e 	bl	80019e0 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e091      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b52:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	019b      	lsls	r3, r3, #6
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	3b01      	subs	r3, #1
 8003b78:	041b      	lsls	r3, r3, #16
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	071b      	lsls	r3, r3, #28
 8003b8a:	491b      	ldr	r1, [pc, #108]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b90:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a18      	ldr	r2, [pc, #96]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fd ff20 	bl	80019e0 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7fd ff1c 	bl	80019e0 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e05f      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x47c>
 8003bc2:	e057      	b.n	8003c74 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a0b      	ldr	r2, [pc, #44]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fd ff06 	bl	80019e0 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7fd ff02 	bl	80019e0 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e045      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bea:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4b0>
 8003bf6:	e03d      	b.n	8003c74 <HAL_RCC_OscConfig+0x54c>
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c00:	4b1f      	ldr	r3, [pc, #124]	; (8003c80 <HAL_RCC_OscConfig+0x558>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d030      	beq.n	8003c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d129      	bne.n	8003c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d122      	bne.n	8003c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c30:	4013      	ands	r3, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d119      	bne.n	8003c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	085b      	lsrs	r3, r3, #1
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d10f      	bne.n	8003c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d107      	bne.n	8003c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800

08003c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0d0      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c9c:	4b6a      	ldr	r3, [pc, #424]	; (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d910      	bls.n	8003ccc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003caa:	4b67      	ldr	r3, [pc, #412]	; (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 020f 	bic.w	r2, r3, #15
 8003cb2:	4965      	ldr	r1, [pc, #404]	; (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	4b63      	ldr	r3, [pc, #396]	; (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0b8      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d020      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ce4:	4b59      	ldr	r3, [pc, #356]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4a58      	ldr	r2, [pc, #352]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cfc:	4b53      	ldr	r3, [pc, #332]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	4a52      	ldr	r2, [pc, #328]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d08:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	494d      	ldr	r1, [pc, #308]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d040      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2e:	4b47      	ldr	r3, [pc, #284]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d115      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e07f      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d107      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d46:	4b41      	ldr	r3, [pc, #260]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e073      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d56:	4b3d      	ldr	r3, [pc, #244]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e06b      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d66:	4b39      	ldr	r3, [pc, #228]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f023 0203 	bic.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4936      	ldr	r1, [pc, #216]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d78:	f7fd fe32 	bl	80019e0 <HAL_GetTick>
 8003d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7e:	e00a      	b.n	8003d96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d80:	f7fd fe2e 	bl	80019e0 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e053      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d96:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 020c 	and.w	r2, r3, #12
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d1eb      	bne.n	8003d80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da8:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d210      	bcs.n	8003dd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db6:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 020f 	bic.w	r2, r3, #15
 8003dbe:	4922      	ldr	r1, [pc, #136]	; (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e032      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de4:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4916      	ldr	r1, [pc, #88]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e02:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	490e      	ldr	r1, [pc, #56]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e16:	f000 f821 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	490a      	ldr	r1, [pc, #40]	; (8003e50 <HAL_RCC_ClockConfig+0x1cc>)
 8003e28:	5ccb      	ldrb	r3, [r1, r3]
 8003e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2e:	4a09      	ldr	r2, [pc, #36]	; (8003e54 <HAL_RCC_ClockConfig+0x1d0>)
 8003e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e32:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCC_ClockConfig+0x1d4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fc fdc8 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40023c00 	.word	0x40023c00
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	0801969c 	.word	0x0801969c
 8003e54:	20000000 	.word	0x20000000
 8003e58:	20000004 	.word	0x20000004

08003e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e60:	b094      	sub	sp, #80	; 0x50
 8003e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	647b      	str	r3, [r7, #68]	; 0x44
 8003e68:	2300      	movs	r3, #0
 8003e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e74:	4b79      	ldr	r3, [pc, #484]	; (800405c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 030c 	and.w	r3, r3, #12
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d00d      	beq.n	8003e9c <HAL_RCC_GetSysClockFreq+0x40>
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	f200 80e1 	bhi.w	8004048 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0x34>
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d003      	beq.n	8003e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e8e:	e0db      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e90:	4b73      	ldr	r3, [pc, #460]	; (8004060 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e94:	e0db      	b.n	800404e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e96:	4b73      	ldr	r3, [pc, #460]	; (8004064 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e9a:	e0d8      	b.n	800404e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e9c:	4b6f      	ldr	r3, [pc, #444]	; (800405c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ea6:	4b6d      	ldr	r3, [pc, #436]	; (800405c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d063      	beq.n	8003f7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb2:	4b6a      	ldr	r3, [pc, #424]	; (800405c <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	099b      	lsrs	r3, r3, #6
 8003eb8:	2200      	movs	r2, #0
 8003eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ece:	4622      	mov	r2, r4
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	f04f 0000 	mov.w	r0, #0
 8003ed6:	f04f 0100 	mov.w	r1, #0
 8003eda:	0159      	lsls	r1, r3, #5
 8003edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee0:	0150      	lsls	r0, r2, #5
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	1a51      	subs	r1, r2, r1
 8003eea:	6139      	str	r1, [r7, #16]
 8003eec:	4629      	mov	r1, r5
 8003eee:	eb63 0301 	sbc.w	r3, r3, r1
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f00:	4659      	mov	r1, fp
 8003f02:	018b      	lsls	r3, r1, #6
 8003f04:	4651      	mov	r1, sl
 8003f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f0a:	4651      	mov	r1, sl
 8003f0c:	018a      	lsls	r2, r1, #6
 8003f0e:	4651      	mov	r1, sl
 8003f10:	ebb2 0801 	subs.w	r8, r2, r1
 8003f14:	4659      	mov	r1, fp
 8003f16:	eb63 0901 	sbc.w	r9, r3, r1
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f2e:	4690      	mov	r8, r2
 8003f30:	4699      	mov	r9, r3
 8003f32:	4623      	mov	r3, r4
 8003f34:	eb18 0303 	adds.w	r3, r8, r3
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	462b      	mov	r3, r5
 8003f3c:	eb49 0303 	adc.w	r3, r9, r3
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f4e:	4629      	mov	r1, r5
 8003f50:	024b      	lsls	r3, r1, #9
 8003f52:	4621      	mov	r1, r4
 8003f54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f58:	4621      	mov	r1, r4
 8003f5a:	024a      	lsls	r2, r1, #9
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f62:	2200      	movs	r2, #0
 8003f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f6c:	f7fc f9c0 	bl	80002f0 <__aeabi_uldivmod>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4613      	mov	r3, r2
 8003f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f78:	e058      	b.n	800402c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f7a:	4b38      	ldr	r3, [pc, #224]	; (800405c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	099b      	lsrs	r3, r3, #6
 8003f80:	2200      	movs	r2, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	4611      	mov	r1, r2
 8003f86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f8a:	623b      	str	r3, [r7, #32]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	f04f 0000 	mov.w	r0, #0
 8003f9c:	f04f 0100 	mov.w	r1, #0
 8003fa0:	0159      	lsls	r1, r3, #5
 8003fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa6:	0150      	lsls	r0, r2, #5
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4641      	mov	r1, r8
 8003fae:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fcc:	ebb2 040a 	subs.w	r4, r2, sl
 8003fd0:	eb63 050b 	sbc.w	r5, r3, fp
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	00eb      	lsls	r3, r5, #3
 8003fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fe2:	00e2      	lsls	r2, r4, #3
 8003fe4:	4614      	mov	r4, r2
 8003fe6:	461d      	mov	r5, r3
 8003fe8:	4643      	mov	r3, r8
 8003fea:	18e3      	adds	r3, r4, r3
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	464b      	mov	r3, r9
 8003ff0:	eb45 0303 	adc.w	r3, r5, r3
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004002:	4629      	mov	r1, r5
 8004004:	028b      	lsls	r3, r1, #10
 8004006:	4621      	mov	r1, r4
 8004008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800400c:	4621      	mov	r1, r4
 800400e:	028a      	lsls	r2, r1, #10
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004016:	2200      	movs	r2, #0
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	61fa      	str	r2, [r7, #28]
 800401c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004020:	f7fc f966 	bl	80002f0 <__aeabi_uldivmod>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4613      	mov	r3, r2
 800402a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_RCC_GetSysClockFreq+0x200>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	3301      	adds	r3, #1
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800403c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800403e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004040:	fbb2 f3f3 	udiv	r3, r2, r3
 8004044:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004046:	e002      	b.n	800404e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <HAL_RCC_GetSysClockFreq+0x204>)
 800404a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800404c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800404e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004050:	4618      	mov	r0, r3
 8004052:	3750      	adds	r7, #80	; 0x50
 8004054:	46bd      	mov	sp, r7
 8004056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800
 8004060:	00f42400 	.word	0x00f42400
 8004064:	007a1200 	.word	0x007a1200

08004068 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800406c:	4b03      	ldr	r3, [pc, #12]	; (800407c <HAL_RCC_GetHCLKFreq+0x14>)
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20000000 	.word	0x20000000

08004080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004084:	f7ff fff0 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 8004088:	4602      	mov	r2, r0
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	0a9b      	lsrs	r3, r3, #10
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	4903      	ldr	r1, [pc, #12]	; (80040a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004096:	5ccb      	ldrb	r3, [r1, r3]
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800409c:	4618      	mov	r0, r3
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40023800 	.word	0x40023800
 80040a4:	080196ac 	.word	0x080196ac

080040a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040ac:	f7ff ffdc 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	0b5b      	lsrs	r3, r3, #13
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4903      	ldr	r1, [pc, #12]	; (80040cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40023800 	.word	0x40023800
 80040cc:	080196ac 	.word	0x080196ac

080040d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	220f      	movs	r2, #15
 80040de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040e0:	4b12      	ldr	r3, [pc, #72]	; (800412c <HAL_RCC_GetClockConfig+0x5c>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0203 	and.w	r2, r3, #3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <HAL_RCC_GetClockConfig+0x5c>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80040f8:	4b0c      	ldr	r3, [pc, #48]	; (800412c <HAL_RCC_GetClockConfig+0x5c>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_RCC_GetClockConfig+0x5c>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	08db      	lsrs	r3, r3, #3
 800410a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <HAL_RCC_GetClockConfig+0x60>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 020f 	and.w	r2, r3, #15
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	601a      	str	r2, [r3, #0]
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800
 8004130:	40023c00 	.word	0x40023c00

08004134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d012      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800415c:	4b69      	ldr	r3, [pc, #420]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a68      	ldr	r2, [pc, #416]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004162:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004166:	6093      	str	r3, [r2, #8]
 8004168:	4b66      	ldr	r3, [pc, #408]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004170:	4964      	ldr	r1, [pc, #400]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800417e:	2301      	movs	r3, #1
 8004180:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d017      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800418e:	4b5d      	ldr	r3, [pc, #372]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419c:	4959      	ldr	r1, [pc, #356]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ac:	d101      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80041ae:	2301      	movs	r3, #1
 80041b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80041ba:	2301      	movs	r3, #1
 80041bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d017      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041ca:	4b4e      	ldr	r3, [pc, #312]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	494a      	ldr	r1, [pc, #296]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e8:	d101      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80041ea:	2301      	movs	r3, #1
 80041ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80041f6:	2301      	movs	r3, #1
 80041f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004206:	2301      	movs	r3, #1
 8004208:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 808b 	beq.w	800432e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004218:	4b3a      	ldr	r3, [pc, #232]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	4a39      	ldr	r2, [pc, #228]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004222:	6413      	str	r3, [r2, #64]	; 0x40
 8004224:	4b37      	ldr	r3, [pc, #220]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004230:	4b35      	ldr	r3, [pc, #212]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a34      	ldr	r2, [pc, #208]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800423c:	f7fd fbd0 	bl	80019e0 <HAL_GetTick>
 8004240:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004244:	f7fd fbcc 	bl	80019e0 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e38f      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004256:	4b2c      	ldr	r3, [pc, #176]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004262:	4b28      	ldr	r3, [pc, #160]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d035      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	429a      	cmp	r2, r3
 800427e:	d02e      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004280:	4b20      	ldr	r3, [pc, #128]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004288:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800428a:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004296:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80042a2:	4a18      	ldr	r2, [pc, #96]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042a8:	4b16      	ldr	r3, [pc, #88]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d114      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fd fb94 	bl	80019e0 <HAL_GetTick>
 80042b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ba:	e00a      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042bc:	f7fd fb90 	bl	80019e0 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e351      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d2:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0ee      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ea:	d111      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042fa:	400b      	ands	r3, r1
 80042fc:	4901      	ldr	r1, [pc, #4]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
 8004302:	e00b      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004304:	40023800 	.word	0x40023800
 8004308:	40007000 	.word	0x40007000
 800430c:	0ffffcff 	.word	0x0ffffcff
 8004310:	4bac      	ldr	r3, [pc, #688]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	4aab      	ldr	r2, [pc, #684]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004316:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800431a:	6093      	str	r3, [r2, #8]
 800431c:	4ba9      	ldr	r3, [pc, #676]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800431e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004328:	49a6      	ldr	r1, [pc, #664]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800432a:	4313      	orrs	r3, r2
 800432c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b00      	cmp	r3, #0
 8004338:	d010      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800433a:	4ba2      	ldr	r3, [pc, #648]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800433c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004340:	4aa0      	ldr	r2, [pc, #640]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004346:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800434a:	4b9e      	ldr	r3, [pc, #632]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800434c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	499b      	ldr	r1, [pc, #620]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004368:	4b96      	ldr	r3, [pc, #600]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004376:	4993      	ldr	r1, [pc, #588]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800438a:	4b8e      	ldr	r3, [pc, #568]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004398:	498a      	ldr	r1, [pc, #552]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043ac:	4b85      	ldr	r3, [pc, #532]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ba:	4982      	ldr	r1, [pc, #520]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043ce:	4b7d      	ldr	r3, [pc, #500]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043dc:	4979      	ldr	r1, [pc, #484]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043f0:	4b74      	ldr	r3, [pc, #464]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f6:	f023 0203 	bic.w	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	4971      	ldr	r1, [pc, #452]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004412:	4b6c      	ldr	r3, [pc, #432]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004418:	f023 020c 	bic.w	r2, r3, #12
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004420:	4968      	ldr	r1, [pc, #416]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004434:	4b63      	ldr	r3, [pc, #396]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	4960      	ldr	r1, [pc, #384]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004456:	4b5b      	ldr	r3, [pc, #364]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004464:	4957      	ldr	r1, [pc, #348]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004478:	4b52      	ldr	r3, [pc, #328]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004486:	494f      	ldr	r1, [pc, #316]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800449a:	4b4a      	ldr	r3, [pc, #296]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	4946      	ldr	r1, [pc, #280]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80044bc:	4b41      	ldr	r3, [pc, #260]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ca:	493e      	ldr	r1, [pc, #248]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80044de:	4b39      	ldr	r3, [pc, #228]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ec:	4935      	ldr	r1, [pc, #212]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004500:	4b30      	ldr	r3, [pc, #192]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800450e:	492d      	ldr	r1, [pc, #180]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d011      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004522:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004528:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004530:	4924      	ldr	r1, [pc, #144]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800453c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004540:	d101      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004542:	2301      	movs	r3, #1
 8004544:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004552:	2301      	movs	r3, #1
 8004554:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004562:	4b18      	ldr	r3, [pc, #96]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004570:	4914      	ldr	r1, [pc, #80]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00b      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004584:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004594:	490b      	ldr	r1, [pc, #44]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00f      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b8:	4902      	ldr	r1, [pc, #8]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045c0:	e002      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00b      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045d4:	4b8a      	ldr	r3, [pc, #552]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e4:	4986      	ldr	r1, [pc, #536]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00b      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80045f8:	4b81      	ldr	r3, [pc, #516]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004608:	497d      	ldr	r1, [pc, #500]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d006      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80d6 	beq.w	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004624:	4b76      	ldr	r3, [pc, #472]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a75      	ldr	r2, [pc, #468]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800462a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800462e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004630:	f7fd f9d6 	bl	80019e0 <HAL_GetTick>
 8004634:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004636:	e008      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004638:	f7fd f9d2 	bl	80019e0 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b64      	cmp	r3, #100	; 0x64
 8004644:	d901      	bls.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e195      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800464a:	4b6d      	ldr	r3, [pc, #436]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d021      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004666:	2b00      	cmp	r3, #0
 8004668:	d11d      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800466a:	4b65      	ldr	r3, [pc, #404]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800466c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004678:	4b61      	ldr	r3, [pc, #388]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467e:	0e1b      	lsrs	r3, r3, #24
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	019a      	lsls	r2, r3, #6
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	041b      	lsls	r3, r3, #16
 8004690:	431a      	orrs	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	071b      	lsls	r3, r3, #28
 800469e:	4958      	ldr	r1, [pc, #352]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d004      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ba:	d00a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d02e      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d0:	d129      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046d2:	4b4b      	ldr	r3, [pc, #300]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d8:	0c1b      	lsrs	r3, r3, #16
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046e0:	4b47      	ldr	r3, [pc, #284]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e6:	0f1b      	lsrs	r3, r3, #28
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	019a      	lsls	r2, r3, #6
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	041b      	lsls	r3, r3, #16
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	061b      	lsls	r3, r3, #24
 8004700:	431a      	orrs	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	071b      	lsls	r3, r3, #28
 8004706:	493e      	ldr	r1, [pc, #248]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800470e:	4b3c      	ldr	r3, [pc, #240]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004714:	f023 021f 	bic.w	r2, r3, #31
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	3b01      	subs	r3, #1
 800471e:	4938      	ldr	r1, [pc, #224]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01d      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004732:	4b33      	ldr	r3, [pc, #204]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004738:	0e1b      	lsrs	r3, r3, #24
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004740:	4b2f      	ldr	r3, [pc, #188]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004746:	0f1b      	lsrs	r3, r3, #28
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	019a      	lsls	r2, r3, #6
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	431a      	orrs	r2, r3
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	061b      	lsls	r3, r3, #24
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	071b      	lsls	r3, r3, #28
 8004766:	4926      	ldr	r1, [pc, #152]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d011      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	019a      	lsls	r2, r3, #6
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	041b      	lsls	r3, r3, #16
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	061b      	lsls	r3, r3, #24
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	071b      	lsls	r3, r3, #28
 8004796:	491a      	ldr	r1, [pc, #104]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800479e:	4b18      	ldr	r3, [pc, #96]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a17      	ldr	r2, [pc, #92]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047aa:	f7fd f919 	bl	80019e0 <HAL_GetTick>
 80047ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047b2:	f7fd f915 	bl	80019e0 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b64      	cmp	r3, #100	; 0x64
 80047be:	d901      	bls.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e0d8      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047c4:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	f040 80ce 	bne.w	8004974 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047d8:	4b09      	ldr	r3, [pc, #36]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a08      	ldr	r2, [pc, #32]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e4:	f7fd f8fc 	bl	80019e0 <HAL_GetTick>
 80047e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047ea:	e00b      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047ec:	f7fd f8f8 	bl	80019e0 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b64      	cmp	r3, #100	; 0x64
 80047f8:	d904      	bls.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e0bb      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004804:	4b5e      	ldr	r3, [pc, #376]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800480c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004810:	d0ec      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800482e:	2b00      	cmp	r3, #0
 8004830:	d02e      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d12a      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800483a:	4b51      	ldr	r3, [pc, #324]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004848:	4b4d      	ldr	r3, [pc, #308]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	0f1b      	lsrs	r3, r3, #28
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	019a      	lsls	r2, r3, #6
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	061b      	lsls	r3, r3, #24
 8004868:	431a      	orrs	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	071b      	lsls	r3, r3, #28
 800486e:	4944      	ldr	r1, [pc, #272]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004876:	4b42      	ldr	r3, [pc, #264]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800487c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004884:	3b01      	subs	r3, #1
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	493d      	ldr	r1, [pc, #244]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d022      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048a4:	d11d      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048a6:	4b36      	ldr	r3, [pc, #216]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	0e1b      	lsrs	r3, r3, #24
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048b4:	4b32      	ldr	r3, [pc, #200]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ba:	0f1b      	lsrs	r3, r3, #28
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	019a      	lsls	r2, r3, #6
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	431a      	orrs	r2, r3
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	061b      	lsls	r3, r3, #24
 80048d4:	431a      	orrs	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	071b      	lsls	r3, r3, #28
 80048da:	4929      	ldr	r1, [pc, #164]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d028      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	0e1b      	lsrs	r3, r3, #24
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048fc:	4b20      	ldr	r3, [pc, #128]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004902:	0c1b      	lsrs	r3, r3, #16
 8004904:	f003 0303 	and.w	r3, r3, #3
 8004908:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	019a      	lsls	r2, r3, #6
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	041b      	lsls	r3, r3, #16
 8004914:	431a      	orrs	r2, r3
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	061b      	lsls	r3, r3, #24
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	071b      	lsls	r3, r3, #28
 8004922:	4917      	ldr	r1, [pc, #92]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800492a:	4b15      	ldr	r3, [pc, #84]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800492c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004930:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	4911      	ldr	r1, [pc, #68]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494c:	f7fd f848 	bl	80019e0 <HAL_GetTick>
 8004950:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004954:	f7fd f844 	bl	80019e0 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	; 0x64
 8004960:	d901      	bls.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e007      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004966:	4b06      	ldr	r3, [pc, #24]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800496e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004972:	d1ef      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3720      	adds	r7, #32
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40023800 	.word	0x40023800

08004984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e049      	b.n	8004a2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f841 	bl	8004a32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3304      	adds	r3, #4
 80049c0:	4619      	mov	r1, r3
 80049c2:	4610      	mov	r0, r2
 80049c4:	f000 f9e8 	bl	8004d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d001      	beq.n	8004a60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e054      	b.n	8004b0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a26      	ldr	r2, [pc, #152]	; (8004b18 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d022      	beq.n	8004ac8 <HAL_TIM_Base_Start_IT+0x80>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d01d      	beq.n	8004ac8 <HAL_TIM_Base_Start_IT+0x80>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a22      	ldr	r2, [pc, #136]	; (8004b1c <HAL_TIM_Base_Start_IT+0xd4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d018      	beq.n	8004ac8 <HAL_TIM_Base_Start_IT+0x80>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a21      	ldr	r2, [pc, #132]	; (8004b20 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d013      	beq.n	8004ac8 <HAL_TIM_Base_Start_IT+0x80>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1f      	ldr	r2, [pc, #124]	; (8004b24 <HAL_TIM_Base_Start_IT+0xdc>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00e      	beq.n	8004ac8 <HAL_TIM_Base_Start_IT+0x80>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1e      	ldr	r2, [pc, #120]	; (8004b28 <HAL_TIM_Base_Start_IT+0xe0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d009      	beq.n	8004ac8 <HAL_TIM_Base_Start_IT+0x80>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1c      	ldr	r2, [pc, #112]	; (8004b2c <HAL_TIM_Base_Start_IT+0xe4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <HAL_TIM_Base_Start_IT+0x80>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1b      	ldr	r2, [pc, #108]	; (8004b30 <HAL_TIM_Base_Start_IT+0xe8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d115      	bne.n	8004af4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	4b19      	ldr	r3, [pc, #100]	; (8004b34 <HAL_TIM_Base_Start_IT+0xec>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b06      	cmp	r3, #6
 8004ad8:	d015      	beq.n	8004b06 <HAL_TIM_Base_Start_IT+0xbe>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae0:	d011      	beq.n	8004b06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af2:	e008      	b.n	8004b06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e000      	b.n	8004b08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40010400 	.word	0x40010400
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	40001800 	.word	0x40001800
 8004b34:	00010007 	.word	0x00010007

08004b38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d020      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01b      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0202 	mvn.w	r2, #2
 8004b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f8e9 	bl	8004d5a <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f8db 	bl	8004d46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f8ec 	bl	8004d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d020      	beq.n	8004be8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01b      	beq.n	8004be8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0204 	mvn.w	r2, #4
 8004bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f8c3 	bl	8004d5a <HAL_TIM_IC_CaptureCallback>
 8004bd4:	e005      	b.n	8004be2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f8b5 	bl	8004d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f8c6 	bl	8004d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d020      	beq.n	8004c34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01b      	beq.n	8004c34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0208 	mvn.w	r2, #8
 8004c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2204      	movs	r2, #4
 8004c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f89d 	bl	8004d5a <HAL_TIM_IC_CaptureCallback>
 8004c20:	e005      	b.n	8004c2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f88f 	bl	8004d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f8a0 	bl	8004d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d020      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 0310 	and.w	r3, r3, #16
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01b      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f06f 0210 	mvn.w	r2, #16
 8004c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2208      	movs	r2, #8
 8004c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f877 	bl	8004d5a <HAL_TIM_IC_CaptureCallback>
 8004c6c:	e005      	b.n	8004c7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f869 	bl	8004d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f87a 	bl	8004d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00c      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0201 	mvn.w	r2, #1
 8004c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fb fe54 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d104      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00c      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f919 	bl	8004f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00c      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d007      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f911 	bl	8004f18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00c      	beq.n	8004d1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f834 	bl	8004d82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00c      	beq.n	8004d3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f06f 0220 	mvn.w	r2, #32
 8004d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f8d9 	bl	8004ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d3e:	bf00      	nop
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a46      	ldr	r2, [pc, #280]	; (8004ec4 <TIM_Base_SetConfig+0x12c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d013      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db6:	d00f      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a43      	ldr	r2, [pc, #268]	; (8004ec8 <TIM_Base_SetConfig+0x130>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00b      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a42      	ldr	r2, [pc, #264]	; (8004ecc <TIM_Base_SetConfig+0x134>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d007      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a41      	ldr	r2, [pc, #260]	; (8004ed0 <TIM_Base_SetConfig+0x138>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a40      	ldr	r2, [pc, #256]	; (8004ed4 <TIM_Base_SetConfig+0x13c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d108      	bne.n	8004dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a35      	ldr	r2, [pc, #212]	; (8004ec4 <TIM_Base_SetConfig+0x12c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d02b      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df8:	d027      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a32      	ldr	r2, [pc, #200]	; (8004ec8 <TIM_Base_SetConfig+0x130>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d023      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a31      	ldr	r2, [pc, #196]	; (8004ecc <TIM_Base_SetConfig+0x134>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d01f      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a30      	ldr	r2, [pc, #192]	; (8004ed0 <TIM_Base_SetConfig+0x138>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01b      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2f      	ldr	r2, [pc, #188]	; (8004ed4 <TIM_Base_SetConfig+0x13c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d017      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a2e      	ldr	r2, [pc, #184]	; (8004ed8 <TIM_Base_SetConfig+0x140>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d013      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a2d      	ldr	r2, [pc, #180]	; (8004edc <TIM_Base_SetConfig+0x144>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00f      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2c      	ldr	r2, [pc, #176]	; (8004ee0 <TIM_Base_SetConfig+0x148>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00b      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2b      	ldr	r2, [pc, #172]	; (8004ee4 <TIM_Base_SetConfig+0x14c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d007      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ee8 <TIM_Base_SetConfig+0x150>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d003      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a29      	ldr	r2, [pc, #164]	; (8004eec <TIM_Base_SetConfig+0x154>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d108      	bne.n	8004e5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a10      	ldr	r2, [pc, #64]	; (8004ec4 <TIM_Base_SetConfig+0x12c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_Base_SetConfig+0xf8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a12      	ldr	r2, [pc, #72]	; (8004ed4 <TIM_Base_SetConfig+0x13c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d103      	bne.n	8004e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d105      	bne.n	8004eb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f023 0201 	bic.w	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	611a      	str	r2, [r3, #16]
  }
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800
 8004ed0:	40000c00 	.word	0x40000c00
 8004ed4:	40010400 	.word	0x40010400
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40014400 	.word	0x40014400
 8004ee0:	40014800 	.word	0x40014800
 8004ee4:	40001800 	.word	0x40001800
 8004ee8:	40001c00 	.word	0x40001c00
 8004eec:	40002000 	.word	0x40002000

08004ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e040      	b.n	8004fc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fc faaa 	bl	80014a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2224      	movs	r2, #36	; 0x24
 8004f58:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0201 	bic.w	r2, r2, #1
 8004f68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fb16 	bl	80055a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f8af 	bl	80050dc <UART_SetConfig>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e01b      	b.n	8004fc0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fb95 	bl	80056e8 <UART_CheckIdleState>
 8004fbe:	4603      	mov	r3, r0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08a      	sub	sp, #40	; 0x28
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	d177      	bne.n	80050d0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <HAL_UART_Transmit+0x24>
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e070      	b.n	80050d2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2221      	movs	r2, #33	; 0x21
 8004ffc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ffe:	f7fc fcef 	bl	80019e0 <HAL_GetTick>
 8005002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	88fa      	ldrh	r2, [r7, #6]
 8005010:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501c:	d108      	bne.n	8005030 <HAL_UART_Transmit+0x68>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	e003      	b.n	8005038 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005034:	2300      	movs	r3, #0
 8005036:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005038:	e02f      	b.n	800509a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2200      	movs	r2, #0
 8005042:	2180      	movs	r1, #128	; 0x80
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 fbf7 	bl	8005838 <UART_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e03b      	b.n	80050d2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10b      	bne.n	8005078 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800506e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	3302      	adds	r3, #2
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	e007      	b.n	8005088 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	781a      	ldrb	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	3301      	adds	r3, #1
 8005086:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1c9      	bne.n	800503a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2200      	movs	r2, #0
 80050ae:	2140      	movs	r1, #64	; 0x40
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 fbc1 	bl	8005838 <UART_WaitOnFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d004      	beq.n	80050c6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e005      	b.n	80050d2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e000      	b.n	80050d2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
  }
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4ba6      	ldr	r3, [pc, #664]	; (80053a0 <UART_SetConfig+0x2c4>)
 8005108:	4013      	ands	r3, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	6979      	ldr	r1, [r7, #20]
 8005110:	430b      	orrs	r3, r1
 8005112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	430a      	orrs	r2, r1
 800514c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a94      	ldr	r2, [pc, #592]	; (80053a4 <UART_SetConfig+0x2c8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d120      	bne.n	800519a <UART_SetConfig+0xbe>
 8005158:	4b93      	ldr	r3, [pc, #588]	; (80053a8 <UART_SetConfig+0x2cc>)
 800515a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b03      	cmp	r3, #3
 8005164:	d816      	bhi.n	8005194 <UART_SetConfig+0xb8>
 8005166:	a201      	add	r2, pc, #4	; (adr r2, 800516c <UART_SetConfig+0x90>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	0800517d 	.word	0x0800517d
 8005170:	08005189 	.word	0x08005189
 8005174:	08005183 	.word	0x08005183
 8005178:	0800518f 	.word	0x0800518f
 800517c:	2301      	movs	r3, #1
 800517e:	77fb      	strb	r3, [r7, #31]
 8005180:	e150      	b.n	8005424 <UART_SetConfig+0x348>
 8005182:	2302      	movs	r3, #2
 8005184:	77fb      	strb	r3, [r7, #31]
 8005186:	e14d      	b.n	8005424 <UART_SetConfig+0x348>
 8005188:	2304      	movs	r3, #4
 800518a:	77fb      	strb	r3, [r7, #31]
 800518c:	e14a      	b.n	8005424 <UART_SetConfig+0x348>
 800518e:	2308      	movs	r3, #8
 8005190:	77fb      	strb	r3, [r7, #31]
 8005192:	e147      	b.n	8005424 <UART_SetConfig+0x348>
 8005194:	2310      	movs	r3, #16
 8005196:	77fb      	strb	r3, [r7, #31]
 8005198:	e144      	b.n	8005424 <UART_SetConfig+0x348>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a83      	ldr	r2, [pc, #524]	; (80053ac <UART_SetConfig+0x2d0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d132      	bne.n	800520a <UART_SetConfig+0x12e>
 80051a4:	4b80      	ldr	r3, [pc, #512]	; (80053a8 <UART_SetConfig+0x2cc>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	f003 030c 	and.w	r3, r3, #12
 80051ae:	2b0c      	cmp	r3, #12
 80051b0:	d828      	bhi.n	8005204 <UART_SetConfig+0x128>
 80051b2:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <UART_SetConfig+0xdc>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	080051ed 	.word	0x080051ed
 80051bc:	08005205 	.word	0x08005205
 80051c0:	08005205 	.word	0x08005205
 80051c4:	08005205 	.word	0x08005205
 80051c8:	080051f9 	.word	0x080051f9
 80051cc:	08005205 	.word	0x08005205
 80051d0:	08005205 	.word	0x08005205
 80051d4:	08005205 	.word	0x08005205
 80051d8:	080051f3 	.word	0x080051f3
 80051dc:	08005205 	.word	0x08005205
 80051e0:	08005205 	.word	0x08005205
 80051e4:	08005205 	.word	0x08005205
 80051e8:	080051ff 	.word	0x080051ff
 80051ec:	2300      	movs	r3, #0
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e118      	b.n	8005424 <UART_SetConfig+0x348>
 80051f2:	2302      	movs	r3, #2
 80051f4:	77fb      	strb	r3, [r7, #31]
 80051f6:	e115      	b.n	8005424 <UART_SetConfig+0x348>
 80051f8:	2304      	movs	r3, #4
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e112      	b.n	8005424 <UART_SetConfig+0x348>
 80051fe:	2308      	movs	r3, #8
 8005200:	77fb      	strb	r3, [r7, #31]
 8005202:	e10f      	b.n	8005424 <UART_SetConfig+0x348>
 8005204:	2310      	movs	r3, #16
 8005206:	77fb      	strb	r3, [r7, #31]
 8005208:	e10c      	b.n	8005424 <UART_SetConfig+0x348>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a68      	ldr	r2, [pc, #416]	; (80053b0 <UART_SetConfig+0x2d4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d120      	bne.n	8005256 <UART_SetConfig+0x17a>
 8005214:	4b64      	ldr	r3, [pc, #400]	; (80053a8 <UART_SetConfig+0x2cc>)
 8005216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800521e:	2b30      	cmp	r3, #48	; 0x30
 8005220:	d013      	beq.n	800524a <UART_SetConfig+0x16e>
 8005222:	2b30      	cmp	r3, #48	; 0x30
 8005224:	d814      	bhi.n	8005250 <UART_SetConfig+0x174>
 8005226:	2b20      	cmp	r3, #32
 8005228:	d009      	beq.n	800523e <UART_SetConfig+0x162>
 800522a:	2b20      	cmp	r3, #32
 800522c:	d810      	bhi.n	8005250 <UART_SetConfig+0x174>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <UART_SetConfig+0x15c>
 8005232:	2b10      	cmp	r3, #16
 8005234:	d006      	beq.n	8005244 <UART_SetConfig+0x168>
 8005236:	e00b      	b.n	8005250 <UART_SetConfig+0x174>
 8005238:	2300      	movs	r3, #0
 800523a:	77fb      	strb	r3, [r7, #31]
 800523c:	e0f2      	b.n	8005424 <UART_SetConfig+0x348>
 800523e:	2302      	movs	r3, #2
 8005240:	77fb      	strb	r3, [r7, #31]
 8005242:	e0ef      	b.n	8005424 <UART_SetConfig+0x348>
 8005244:	2304      	movs	r3, #4
 8005246:	77fb      	strb	r3, [r7, #31]
 8005248:	e0ec      	b.n	8005424 <UART_SetConfig+0x348>
 800524a:	2308      	movs	r3, #8
 800524c:	77fb      	strb	r3, [r7, #31]
 800524e:	e0e9      	b.n	8005424 <UART_SetConfig+0x348>
 8005250:	2310      	movs	r3, #16
 8005252:	77fb      	strb	r3, [r7, #31]
 8005254:	e0e6      	b.n	8005424 <UART_SetConfig+0x348>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a56      	ldr	r2, [pc, #344]	; (80053b4 <UART_SetConfig+0x2d8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d120      	bne.n	80052a2 <UART_SetConfig+0x1c6>
 8005260:	4b51      	ldr	r3, [pc, #324]	; (80053a8 <UART_SetConfig+0x2cc>)
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005266:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800526a:	2bc0      	cmp	r3, #192	; 0xc0
 800526c:	d013      	beq.n	8005296 <UART_SetConfig+0x1ba>
 800526e:	2bc0      	cmp	r3, #192	; 0xc0
 8005270:	d814      	bhi.n	800529c <UART_SetConfig+0x1c0>
 8005272:	2b80      	cmp	r3, #128	; 0x80
 8005274:	d009      	beq.n	800528a <UART_SetConfig+0x1ae>
 8005276:	2b80      	cmp	r3, #128	; 0x80
 8005278:	d810      	bhi.n	800529c <UART_SetConfig+0x1c0>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <UART_SetConfig+0x1a8>
 800527e:	2b40      	cmp	r3, #64	; 0x40
 8005280:	d006      	beq.n	8005290 <UART_SetConfig+0x1b4>
 8005282:	e00b      	b.n	800529c <UART_SetConfig+0x1c0>
 8005284:	2300      	movs	r3, #0
 8005286:	77fb      	strb	r3, [r7, #31]
 8005288:	e0cc      	b.n	8005424 <UART_SetConfig+0x348>
 800528a:	2302      	movs	r3, #2
 800528c:	77fb      	strb	r3, [r7, #31]
 800528e:	e0c9      	b.n	8005424 <UART_SetConfig+0x348>
 8005290:	2304      	movs	r3, #4
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	e0c6      	b.n	8005424 <UART_SetConfig+0x348>
 8005296:	2308      	movs	r3, #8
 8005298:	77fb      	strb	r3, [r7, #31]
 800529a:	e0c3      	b.n	8005424 <UART_SetConfig+0x348>
 800529c:	2310      	movs	r3, #16
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e0c0      	b.n	8005424 <UART_SetConfig+0x348>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a44      	ldr	r2, [pc, #272]	; (80053b8 <UART_SetConfig+0x2dc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d125      	bne.n	80052f8 <UART_SetConfig+0x21c>
 80052ac:	4b3e      	ldr	r3, [pc, #248]	; (80053a8 <UART_SetConfig+0x2cc>)
 80052ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ba:	d017      	beq.n	80052ec <UART_SetConfig+0x210>
 80052bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052c0:	d817      	bhi.n	80052f2 <UART_SetConfig+0x216>
 80052c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052c6:	d00b      	beq.n	80052e0 <UART_SetConfig+0x204>
 80052c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052cc:	d811      	bhi.n	80052f2 <UART_SetConfig+0x216>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <UART_SetConfig+0x1fe>
 80052d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052d6:	d006      	beq.n	80052e6 <UART_SetConfig+0x20a>
 80052d8:	e00b      	b.n	80052f2 <UART_SetConfig+0x216>
 80052da:	2300      	movs	r3, #0
 80052dc:	77fb      	strb	r3, [r7, #31]
 80052de:	e0a1      	b.n	8005424 <UART_SetConfig+0x348>
 80052e0:	2302      	movs	r3, #2
 80052e2:	77fb      	strb	r3, [r7, #31]
 80052e4:	e09e      	b.n	8005424 <UART_SetConfig+0x348>
 80052e6:	2304      	movs	r3, #4
 80052e8:	77fb      	strb	r3, [r7, #31]
 80052ea:	e09b      	b.n	8005424 <UART_SetConfig+0x348>
 80052ec:	2308      	movs	r3, #8
 80052ee:	77fb      	strb	r3, [r7, #31]
 80052f0:	e098      	b.n	8005424 <UART_SetConfig+0x348>
 80052f2:	2310      	movs	r3, #16
 80052f4:	77fb      	strb	r3, [r7, #31]
 80052f6:	e095      	b.n	8005424 <UART_SetConfig+0x348>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2f      	ldr	r2, [pc, #188]	; (80053bc <UART_SetConfig+0x2e0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d125      	bne.n	800534e <UART_SetConfig+0x272>
 8005302:	4b29      	ldr	r3, [pc, #164]	; (80053a8 <UART_SetConfig+0x2cc>)
 8005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005308:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800530c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005310:	d017      	beq.n	8005342 <UART_SetConfig+0x266>
 8005312:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005316:	d817      	bhi.n	8005348 <UART_SetConfig+0x26c>
 8005318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800531c:	d00b      	beq.n	8005336 <UART_SetConfig+0x25a>
 800531e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005322:	d811      	bhi.n	8005348 <UART_SetConfig+0x26c>
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <UART_SetConfig+0x254>
 8005328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800532c:	d006      	beq.n	800533c <UART_SetConfig+0x260>
 800532e:	e00b      	b.n	8005348 <UART_SetConfig+0x26c>
 8005330:	2301      	movs	r3, #1
 8005332:	77fb      	strb	r3, [r7, #31]
 8005334:	e076      	b.n	8005424 <UART_SetConfig+0x348>
 8005336:	2302      	movs	r3, #2
 8005338:	77fb      	strb	r3, [r7, #31]
 800533a:	e073      	b.n	8005424 <UART_SetConfig+0x348>
 800533c:	2304      	movs	r3, #4
 800533e:	77fb      	strb	r3, [r7, #31]
 8005340:	e070      	b.n	8005424 <UART_SetConfig+0x348>
 8005342:	2308      	movs	r3, #8
 8005344:	77fb      	strb	r3, [r7, #31]
 8005346:	e06d      	b.n	8005424 <UART_SetConfig+0x348>
 8005348:	2310      	movs	r3, #16
 800534a:	77fb      	strb	r3, [r7, #31]
 800534c:	e06a      	b.n	8005424 <UART_SetConfig+0x348>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1b      	ldr	r2, [pc, #108]	; (80053c0 <UART_SetConfig+0x2e4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d138      	bne.n	80053ca <UART_SetConfig+0x2ee>
 8005358:	4b13      	ldr	r3, [pc, #76]	; (80053a8 <UART_SetConfig+0x2cc>)
 800535a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005362:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005366:	d017      	beq.n	8005398 <UART_SetConfig+0x2bc>
 8005368:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800536c:	d82a      	bhi.n	80053c4 <UART_SetConfig+0x2e8>
 800536e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005372:	d00b      	beq.n	800538c <UART_SetConfig+0x2b0>
 8005374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005378:	d824      	bhi.n	80053c4 <UART_SetConfig+0x2e8>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <UART_SetConfig+0x2aa>
 800537e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005382:	d006      	beq.n	8005392 <UART_SetConfig+0x2b6>
 8005384:	e01e      	b.n	80053c4 <UART_SetConfig+0x2e8>
 8005386:	2300      	movs	r3, #0
 8005388:	77fb      	strb	r3, [r7, #31]
 800538a:	e04b      	b.n	8005424 <UART_SetConfig+0x348>
 800538c:	2302      	movs	r3, #2
 800538e:	77fb      	strb	r3, [r7, #31]
 8005390:	e048      	b.n	8005424 <UART_SetConfig+0x348>
 8005392:	2304      	movs	r3, #4
 8005394:	77fb      	strb	r3, [r7, #31]
 8005396:	e045      	b.n	8005424 <UART_SetConfig+0x348>
 8005398:	2308      	movs	r3, #8
 800539a:	77fb      	strb	r3, [r7, #31]
 800539c:	e042      	b.n	8005424 <UART_SetConfig+0x348>
 800539e:	bf00      	nop
 80053a0:	efff69f3 	.word	0xefff69f3
 80053a4:	40011000 	.word	0x40011000
 80053a8:	40023800 	.word	0x40023800
 80053ac:	40004400 	.word	0x40004400
 80053b0:	40004800 	.word	0x40004800
 80053b4:	40004c00 	.word	0x40004c00
 80053b8:	40005000 	.word	0x40005000
 80053bc:	40011400 	.word	0x40011400
 80053c0:	40007800 	.word	0x40007800
 80053c4:	2310      	movs	r3, #16
 80053c6:	77fb      	strb	r3, [r7, #31]
 80053c8:	e02c      	b.n	8005424 <UART_SetConfig+0x348>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a72      	ldr	r2, [pc, #456]	; (8005598 <UART_SetConfig+0x4bc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d125      	bne.n	8005420 <UART_SetConfig+0x344>
 80053d4:	4b71      	ldr	r3, [pc, #452]	; (800559c <UART_SetConfig+0x4c0>)
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80053de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053e2:	d017      	beq.n	8005414 <UART_SetConfig+0x338>
 80053e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053e8:	d817      	bhi.n	800541a <UART_SetConfig+0x33e>
 80053ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ee:	d00b      	beq.n	8005408 <UART_SetConfig+0x32c>
 80053f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053f4:	d811      	bhi.n	800541a <UART_SetConfig+0x33e>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <UART_SetConfig+0x326>
 80053fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053fe:	d006      	beq.n	800540e <UART_SetConfig+0x332>
 8005400:	e00b      	b.n	800541a <UART_SetConfig+0x33e>
 8005402:	2300      	movs	r3, #0
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e00d      	b.n	8005424 <UART_SetConfig+0x348>
 8005408:	2302      	movs	r3, #2
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e00a      	b.n	8005424 <UART_SetConfig+0x348>
 800540e:	2304      	movs	r3, #4
 8005410:	77fb      	strb	r3, [r7, #31]
 8005412:	e007      	b.n	8005424 <UART_SetConfig+0x348>
 8005414:	2308      	movs	r3, #8
 8005416:	77fb      	strb	r3, [r7, #31]
 8005418:	e004      	b.n	8005424 <UART_SetConfig+0x348>
 800541a:	2310      	movs	r3, #16
 800541c:	77fb      	strb	r3, [r7, #31]
 800541e:	e001      	b.n	8005424 <UART_SetConfig+0x348>
 8005420:	2310      	movs	r3, #16
 8005422:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800542c:	d15b      	bne.n	80054e6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800542e:	7ffb      	ldrb	r3, [r7, #31]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d828      	bhi.n	8005486 <UART_SetConfig+0x3aa>
 8005434:	a201      	add	r2, pc, #4	; (adr r2, 800543c <UART_SetConfig+0x360>)
 8005436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543a:	bf00      	nop
 800543c:	08005461 	.word	0x08005461
 8005440:	08005469 	.word	0x08005469
 8005444:	08005471 	.word	0x08005471
 8005448:	08005487 	.word	0x08005487
 800544c:	08005477 	.word	0x08005477
 8005450:	08005487 	.word	0x08005487
 8005454:	08005487 	.word	0x08005487
 8005458:	08005487 	.word	0x08005487
 800545c:	0800547f 	.word	0x0800547f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005460:	f7fe fe0e 	bl	8004080 <HAL_RCC_GetPCLK1Freq>
 8005464:	61b8      	str	r0, [r7, #24]
        break;
 8005466:	e013      	b.n	8005490 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005468:	f7fe fe1e 	bl	80040a8 <HAL_RCC_GetPCLK2Freq>
 800546c:	61b8      	str	r0, [r7, #24]
        break;
 800546e:	e00f      	b.n	8005490 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005470:	4b4b      	ldr	r3, [pc, #300]	; (80055a0 <UART_SetConfig+0x4c4>)
 8005472:	61bb      	str	r3, [r7, #24]
        break;
 8005474:	e00c      	b.n	8005490 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005476:	f7fe fcf1 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 800547a:	61b8      	str	r0, [r7, #24]
        break;
 800547c:	e008      	b.n	8005490 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800547e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005482:	61bb      	str	r3, [r7, #24]
        break;
 8005484:	e004      	b.n	8005490 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	77bb      	strb	r3, [r7, #30]
        break;
 800548e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d074      	beq.n	8005580 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	005a      	lsls	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	085b      	lsrs	r3, r3, #1
 80054a0:	441a      	add	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	2b0f      	cmp	r3, #15
 80054b0:	d916      	bls.n	80054e0 <UART_SetConfig+0x404>
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b8:	d212      	bcs.n	80054e0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f023 030f 	bic.w	r3, r3, #15
 80054c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	085b      	lsrs	r3, r3, #1
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	89fb      	ldrh	r3, [r7, #14]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	89fa      	ldrh	r2, [r7, #14]
 80054dc:	60da      	str	r2, [r3, #12]
 80054de:	e04f      	b.n	8005580 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	77bb      	strb	r3, [r7, #30]
 80054e4:	e04c      	b.n	8005580 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054e6:	7ffb      	ldrb	r3, [r7, #31]
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d828      	bhi.n	800553e <UART_SetConfig+0x462>
 80054ec:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <UART_SetConfig+0x418>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005519 	.word	0x08005519
 80054f8:	08005521 	.word	0x08005521
 80054fc:	08005529 	.word	0x08005529
 8005500:	0800553f 	.word	0x0800553f
 8005504:	0800552f 	.word	0x0800552f
 8005508:	0800553f 	.word	0x0800553f
 800550c:	0800553f 	.word	0x0800553f
 8005510:	0800553f 	.word	0x0800553f
 8005514:	08005537 	.word	0x08005537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005518:	f7fe fdb2 	bl	8004080 <HAL_RCC_GetPCLK1Freq>
 800551c:	61b8      	str	r0, [r7, #24]
        break;
 800551e:	e013      	b.n	8005548 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005520:	f7fe fdc2 	bl	80040a8 <HAL_RCC_GetPCLK2Freq>
 8005524:	61b8      	str	r0, [r7, #24]
        break;
 8005526:	e00f      	b.n	8005548 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005528:	4b1d      	ldr	r3, [pc, #116]	; (80055a0 <UART_SetConfig+0x4c4>)
 800552a:	61bb      	str	r3, [r7, #24]
        break;
 800552c:	e00c      	b.n	8005548 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800552e:	f7fe fc95 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8005532:	61b8      	str	r0, [r7, #24]
        break;
 8005534:	e008      	b.n	8005548 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800553a:	61bb      	str	r3, [r7, #24]
        break;
 800553c:	e004      	b.n	8005548 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	77bb      	strb	r3, [r7, #30]
        break;
 8005546:	bf00      	nop
    }

    if (pclk != 0U)
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d018      	beq.n	8005580 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	085a      	lsrs	r2, r3, #1
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	441a      	add	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005560:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b0f      	cmp	r3, #15
 8005566:	d909      	bls.n	800557c <UART_SetConfig+0x4a0>
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800556e:	d205      	bcs.n	800557c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	b29a      	uxth	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60da      	str	r2, [r3, #12]
 800557a:	e001      	b.n	8005580 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800558c:	7fbb      	ldrb	r3, [r7, #30]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3720      	adds	r7, #32
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	40007c00 	.word	0x40007c00
 800559c:	40023800 	.word	0x40023800
 80055a0:	00f42400 	.word	0x00f42400

080055a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01a      	beq.n	80056ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a2:	d10a      	bne.n	80056ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	605a      	str	r2, [r3, #4]
  }
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b098      	sub	sp, #96	; 0x60
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056f8:	f7fc f972 	bl	80019e0 <HAL_GetTick>
 80056fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b08      	cmp	r3, #8
 800570a:	d12e      	bne.n	800576a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800570c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005714:	2200      	movs	r2, #0
 8005716:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f88c 	bl	8005838 <UART_WaitOnFlagUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d021      	beq.n	800576a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800573a:	653b      	str	r3, [r7, #80]	; 0x50
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	461a      	mov	r2, r3
 8005742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005744:	647b      	str	r3, [r7, #68]	; 0x44
 8005746:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800574a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e6      	bne.n	8005726 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e062      	b.n	8005830 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b04      	cmp	r3, #4
 8005776:	d149      	bne.n	800580c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005778:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005780:	2200      	movs	r2, #0
 8005782:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f856 	bl	8005838 <UART_WaitOnFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d03c      	beq.n	800580c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	623b      	str	r3, [r7, #32]
   return(result);
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b0:	633b      	str	r3, [r7, #48]	; 0x30
 80057b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057b8:	e841 2300 	strex	r3, r2, [r1]
 80057bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e6      	bne.n	8005792 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3308      	adds	r3, #8
 80057ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0301 	bic.w	r3, r3, #1
 80057da:	64bb      	str	r3, [r7, #72]	; 0x48
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3308      	adds	r3, #8
 80057e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057e4:	61fa      	str	r2, [r7, #28]
 80057e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	69b9      	ldr	r1, [r7, #24]
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	617b      	str	r3, [r7, #20]
   return(result);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e5      	bne.n	80057c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e011      	b.n	8005830 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2220      	movs	r2, #32
 8005816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3758      	adds	r7, #88	; 0x58
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	4613      	mov	r3, r2
 8005846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005848:	e04f      	b.n	80058ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005850:	d04b      	beq.n	80058ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005852:	f7fc f8c5 	bl	80019e0 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	429a      	cmp	r2, r3
 8005860:	d302      	bcc.n	8005868 <UART_WaitOnFlagUntilTimeout+0x30>
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e04e      	b.n	800590a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0304 	and.w	r3, r3, #4
 8005876:	2b00      	cmp	r3, #0
 8005878:	d037      	beq.n	80058ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b80      	cmp	r3, #128	; 0x80
 800587e:	d034      	beq.n	80058ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b40      	cmp	r3, #64	; 0x40
 8005884:	d031      	beq.n	80058ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b08      	cmp	r3, #8
 8005892:	d110      	bne.n	80058b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2208      	movs	r2, #8
 800589a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 f838 	bl	8005912 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2208      	movs	r2, #8
 80058a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e029      	b.n	800590a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058c4:	d111      	bne.n	80058ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 f81e 	bl	8005912 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2220      	movs	r2, #32
 80058da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e00f      	b.n	800590a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4013      	ands	r3, r2
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	bf0c      	ite	eq
 80058fa:	2301      	moveq	r3, #1
 80058fc:	2300      	movne	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	461a      	mov	r2, r3
 8005902:	79fb      	ldrb	r3, [r7, #7]
 8005904:	429a      	cmp	r2, r3
 8005906:	d0a0      	beq.n	800584a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005912:	b480      	push	{r7}
 8005914:	b095      	sub	sp, #84	; 0x54
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800592e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005938:	643b      	str	r3, [r7, #64]	; 0x40
 800593a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800593e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e6      	bne.n	800591a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	3308      	adds	r3, #8
 8005952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	e853 3f00 	ldrex	r3, [r3]
 800595a:	61fb      	str	r3, [r7, #28]
   return(result);
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f023 0301 	bic.w	r3, r3, #1
 8005962:	64bb      	str	r3, [r7, #72]	; 0x48
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3308      	adds	r3, #8
 800596a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800596c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800596e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e5      	bne.n	800594c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005984:	2b01      	cmp	r3, #1
 8005986:	d118      	bne.n	80059ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	60bb      	str	r3, [r7, #8]
   return(result);
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f023 0310 	bic.w	r3, r3, #16
 800599c:	647b      	str	r3, [r7, #68]	; 0x44
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a6:	61bb      	str	r3, [r7, #24]
 80059a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	6979      	ldr	r1, [r7, #20]
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	613b      	str	r3, [r7, #16]
   return(result);
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e6      	bne.n	8005988 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80059ce:	bf00      	nop
 80059d0:	3754      	adds	r7, #84	; 0x54
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059dc:	b084      	sub	sp, #16
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	f107 001c 	add.w	r0, r7, #28
 80059ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059ee:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d121      	bne.n	8005a3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	4b21      	ldr	r3, [pc, #132]	; (8005a8c <USB_CoreInit+0xb0>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d105      	bne.n	8005a2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fa92 	bl	8005f58 <USB_CoreReset>
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]
 8005a38:	e010      	b.n	8005a5c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fa86 	bl	8005f58 <USB_CoreReset>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005a5c:	7fbb      	ldrb	r3, [r7, #30]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d10b      	bne.n	8005a7a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f043 0206 	orr.w	r2, r3, #6
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f043 0220 	orr.w	r2, r3, #32
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a86:	b004      	add	sp, #16
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	ffbdffbf 	.word	0xffbdffbf

08005a90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f023 0201 	bic.w	r2, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	460b      	mov	r3, r1
 8005abc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d115      	bne.n	8005b00 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ae0:	200a      	movs	r0, #10
 8005ae2:	f7fb ff89 	bl	80019f8 <HAL_Delay>
      ms += 10U;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	330a      	adds	r3, #10
 8005aea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fa25 	bl	8005f3c <USB_GetMode>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d01e      	beq.n	8005b36 <USB_SetCurrentMode+0x84>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2bc7      	cmp	r3, #199	; 0xc7
 8005afc:	d9f0      	bls.n	8005ae0 <USB_SetCurrentMode+0x2e>
 8005afe:	e01a      	b.n	8005b36 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d115      	bne.n	8005b32 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b12:	200a      	movs	r0, #10
 8005b14:	f7fb ff70 	bl	80019f8 <HAL_Delay>
      ms += 10U;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	330a      	adds	r3, #10
 8005b1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa0c 	bl	8005f3c <USB_GetMode>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <USB_SetCurrentMode+0x84>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2bc7      	cmp	r3, #199	; 0xc7
 8005b2e:	d9f0      	bls.n	8005b12 <USB_SetCurrentMode+0x60>
 8005b30:	e001      	b.n	8005b36 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e005      	b.n	8005b42 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2bc8      	cmp	r3, #200	; 0xc8
 8005b3a:	d101      	bne.n	8005b40 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e000      	b.n	8005b42 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b086      	sub	sp, #24
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	e009      	b.n	8005b80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	3340      	adds	r3, #64	; 0x40
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	2200      	movs	r2, #0
 8005b78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b0e      	cmp	r3, #14
 8005b84:	d9f2      	bls.n	8005b6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d11c      	bne.n	8005bc8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b9c:	f043 0302 	orr.w	r3, r3, #2
 8005ba0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	e005      	b.n	8005bd4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bda:	461a      	mov	r2, r3
 8005bdc:	2300      	movs	r3, #0
 8005bde:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005be0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d10d      	bne.n	8005c04 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d104      	bne.n	8005bfa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f968 	bl	8005ec8 <USB_SetDevSpeed>
 8005bf8:	e008      	b.n	8005c0c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f963 	bl	8005ec8 <USB_SetDevSpeed>
 8005c02:	e003      	b.n	8005c0c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c04:	2103      	movs	r1, #3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f95e 	bl	8005ec8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c0c:	2110      	movs	r1, #16
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f8fa 	bl	8005e08 <USB_FlushTxFifo>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f924 	bl	8005e6c <USB_FlushRxFifo>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c34:	461a      	mov	r2, r3
 8005c36:	2300      	movs	r3, #0
 8005c38:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c40:	461a      	mov	r2, r3
 8005c42:	2300      	movs	r3, #0
 8005c44:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	2300      	movs	r3, #0
 8005c50:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c52:	2300      	movs	r3, #0
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	e043      	b.n	8005ce0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c6e:	d118      	bne.n	8005ca2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10a      	bne.n	8005c8c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	461a      	mov	r2, r3
 8005c84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	e013      	b.n	8005cb4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	e008      	b.n	8005cb4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	461a      	mov	r2, r3
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d3b5      	bcc.n	8005c58 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cec:	2300      	movs	r3, #0
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	e043      	b.n	8005d7a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d08:	d118      	bne.n	8005d3c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10a      	bne.n	8005d26 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	e013      	b.n	8005d4e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	461a      	mov	r2, r3
 8005d34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	e008      	b.n	8005d4e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d48:	461a      	mov	r2, r3
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	3301      	adds	r3, #1
 8005d78:	613b      	str	r3, [r7, #16]
 8005d7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d7e:	461a      	mov	r2, r3
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d3b5      	bcc.n	8005cf2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d98:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005da6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005da8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d105      	bne.n	8005dbc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	f043 0210 	orr.w	r2, r3, #16
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699a      	ldr	r2, [r3, #24]
 8005dc0:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <USB_DevInit+0x2b4>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005dc8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d005      	beq.n	8005ddc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	f043 0208 	orr.w	r2, r3, #8
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ddc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d105      	bne.n	8005df0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699a      	ldr	r2, [r3, #24]
 8005de8:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <USB_DevInit+0x2b8>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dfc:	b004      	add	sp, #16
 8005dfe:	4770      	bx	lr
 8005e00:	803c3800 	.word	0x803c3800
 8005e04:	40000004 	.word	0x40000004

08005e08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005e22:	d901      	bls.n	8005e28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e01b      	b.n	8005e60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	daf2      	bge.n	8005e16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	019b      	lsls	r3, r3, #6
 8005e38:	f043 0220 	orr.w	r2, r3, #32
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3301      	adds	r3, #1
 8005e44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005e4c:	d901      	bls.n	8005e52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e006      	b.n	8005e60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d0f0      	beq.n	8005e40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005e84:	d901      	bls.n	8005e8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e018      	b.n	8005ebc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	daf2      	bge.n	8005e78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2210      	movs	r2, #16
 8005e9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005ea8:	d901      	bls.n	8005eae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e006      	b.n	8005ebc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0310 	and.w	r3, r3, #16
 8005eb6:	2b10      	cmp	r3, #16
 8005eb8:	d0f0      	beq.n	8005e9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	68f9      	ldr	r1, [r7, #12]
 8005ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f14:	f023 0303 	bic.w	r3, r3, #3
 8005f18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f28:	f043 0302 	orr.w	r3, r3, #2
 8005f2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	f003 0301 	and.w	r3, r3, #1
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3301      	adds	r3, #1
 8005f68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005f70:	d901      	bls.n	8005f76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e01b      	b.n	8005fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	daf2      	bge.n	8005f64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f043 0201 	orr.w	r2, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3301      	adds	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005f9a:	d901      	bls.n	8005fa0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e006      	b.n	8005fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d0f0      	beq.n	8005f8e <USB_CoreReset+0x36>

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
	...

08005fbc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005fbc:	b5b0      	push	{r4, r5, r7, lr}
 8005fbe:	b08c      	sub	sp, #48	; 0x30
 8005fc0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005fc2:	4b96      	ldr	r3, [pc, #600]	; (800621c <MX_LWIP_Init+0x260>)
 8005fc4:	22c0      	movs	r2, #192	; 0xc0
 8005fc6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005fc8:	4b94      	ldr	r3, [pc, #592]	; (800621c <MX_LWIP_Init+0x260>)
 8005fca:	22a8      	movs	r2, #168	; 0xa8
 8005fcc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8005fce:	4b93      	ldr	r3, [pc, #588]	; (800621c <MX_LWIP_Init+0x260>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 3;
 8005fd4:	4b91      	ldr	r3, [pc, #580]	; (800621c <MX_LWIP_Init+0x260>)
 8005fd6:	2203      	movs	r2, #3
 8005fd8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005fda:	4b91      	ldr	r3, [pc, #580]	; (8006220 <MX_LWIP_Init+0x264>)
 8005fdc:	22ff      	movs	r2, #255	; 0xff
 8005fde:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005fe0:	4b8f      	ldr	r3, [pc, #572]	; (8006220 <MX_LWIP_Init+0x264>)
 8005fe2:	22ff      	movs	r2, #255	; 0xff
 8005fe4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005fe6:	4b8e      	ldr	r3, [pc, #568]	; (8006220 <MX_LWIP_Init+0x264>)
 8005fe8:	22ff      	movs	r2, #255	; 0xff
 8005fea:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005fec:	4b8c      	ldr	r3, [pc, #560]	; (8006220 <MX_LWIP_Init+0x264>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005ff2:	4b8c      	ldr	r3, [pc, #560]	; (8006224 <MX_LWIP_Init+0x268>)
 8005ff4:	22c0      	movs	r2, #192	; 0xc0
 8005ff6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005ff8:	4b8a      	ldr	r3, [pc, #552]	; (8006224 <MX_LWIP_Init+0x268>)
 8005ffa:	22a8      	movs	r2, #168	; 0xa8
 8005ffc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8005ffe:	4b89      	ldr	r3, [pc, #548]	; (8006224 <MX_LWIP_Init+0x268>)
 8006000:	2201      	movs	r2, #1
 8006002:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006004:	4b87      	ldr	r3, [pc, #540]	; (8006224 <MX_LWIP_Init+0x268>)
 8006006:	2201      	movs	r2, #1
 8006008:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800600a:	2100      	movs	r1, #0
 800600c:	2000      	movs	r0, #0
 800600e:	f004 f9fd 	bl	800a40c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006012:	4b82      	ldr	r3, [pc, #520]	; (800621c <MX_LWIP_Init+0x260>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	061a      	lsls	r2, r3, #24
 8006018:	4b80      	ldr	r3, [pc, #512]	; (800621c <MX_LWIP_Init+0x260>)
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	041b      	lsls	r3, r3, #16
 800601e:	431a      	orrs	r2, r3
 8006020:	4b7e      	ldr	r3, [pc, #504]	; (800621c <MX_LWIP_Init+0x260>)
 8006022:	789b      	ldrb	r3, [r3, #2]
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	4313      	orrs	r3, r2
 8006028:	4a7c      	ldr	r2, [pc, #496]	; (800621c <MX_LWIP_Init+0x260>)
 800602a:	78d2      	ldrb	r2, [r2, #3]
 800602c:	4313      	orrs	r3, r2
 800602e:	061a      	lsls	r2, r3, #24
 8006030:	4b7a      	ldr	r3, [pc, #488]	; (800621c <MX_LWIP_Init+0x260>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	0619      	lsls	r1, r3, #24
 8006036:	4b79      	ldr	r3, [pc, #484]	; (800621c <MX_LWIP_Init+0x260>)
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	041b      	lsls	r3, r3, #16
 800603c:	4319      	orrs	r1, r3
 800603e:	4b77      	ldr	r3, [pc, #476]	; (800621c <MX_LWIP_Init+0x260>)
 8006040:	789b      	ldrb	r3, [r3, #2]
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	430b      	orrs	r3, r1
 8006046:	4975      	ldr	r1, [pc, #468]	; (800621c <MX_LWIP_Init+0x260>)
 8006048:	78c9      	ldrb	r1, [r1, #3]
 800604a:	430b      	orrs	r3, r1
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006052:	431a      	orrs	r2, r3
 8006054:	4b71      	ldr	r3, [pc, #452]	; (800621c <MX_LWIP_Init+0x260>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	0619      	lsls	r1, r3, #24
 800605a:	4b70      	ldr	r3, [pc, #448]	; (800621c <MX_LWIP_Init+0x260>)
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	041b      	lsls	r3, r3, #16
 8006060:	4319      	orrs	r1, r3
 8006062:	4b6e      	ldr	r3, [pc, #440]	; (800621c <MX_LWIP_Init+0x260>)
 8006064:	789b      	ldrb	r3, [r3, #2]
 8006066:	021b      	lsls	r3, r3, #8
 8006068:	430b      	orrs	r3, r1
 800606a:	496c      	ldr	r1, [pc, #432]	; (800621c <MX_LWIP_Init+0x260>)
 800606c:	78c9      	ldrb	r1, [r1, #3]
 800606e:	430b      	orrs	r3, r1
 8006070:	0a1b      	lsrs	r3, r3, #8
 8006072:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006076:	431a      	orrs	r2, r3
 8006078:	4b68      	ldr	r3, [pc, #416]	; (800621c <MX_LWIP_Init+0x260>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	0619      	lsls	r1, r3, #24
 800607e:	4b67      	ldr	r3, [pc, #412]	; (800621c <MX_LWIP_Init+0x260>)
 8006080:	785b      	ldrb	r3, [r3, #1]
 8006082:	041b      	lsls	r3, r3, #16
 8006084:	4319      	orrs	r1, r3
 8006086:	4b65      	ldr	r3, [pc, #404]	; (800621c <MX_LWIP_Init+0x260>)
 8006088:	789b      	ldrb	r3, [r3, #2]
 800608a:	021b      	lsls	r3, r3, #8
 800608c:	430b      	orrs	r3, r1
 800608e:	4963      	ldr	r1, [pc, #396]	; (800621c <MX_LWIP_Init+0x260>)
 8006090:	78c9      	ldrb	r1, [r1, #3]
 8006092:	430b      	orrs	r3, r1
 8006094:	0e1b      	lsrs	r3, r3, #24
 8006096:	4313      	orrs	r3, r2
 8006098:	4a63      	ldr	r2, [pc, #396]	; (8006228 <MX_LWIP_Init+0x26c>)
 800609a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800609c:	4b60      	ldr	r3, [pc, #384]	; (8006220 <MX_LWIP_Init+0x264>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	061a      	lsls	r2, r3, #24
 80060a2:	4b5f      	ldr	r3, [pc, #380]	; (8006220 <MX_LWIP_Init+0x264>)
 80060a4:	785b      	ldrb	r3, [r3, #1]
 80060a6:	041b      	lsls	r3, r3, #16
 80060a8:	431a      	orrs	r2, r3
 80060aa:	4b5d      	ldr	r3, [pc, #372]	; (8006220 <MX_LWIP_Init+0x264>)
 80060ac:	789b      	ldrb	r3, [r3, #2]
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	4313      	orrs	r3, r2
 80060b2:	4a5b      	ldr	r2, [pc, #364]	; (8006220 <MX_LWIP_Init+0x264>)
 80060b4:	78d2      	ldrb	r2, [r2, #3]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	061a      	lsls	r2, r3, #24
 80060ba:	4b59      	ldr	r3, [pc, #356]	; (8006220 <MX_LWIP_Init+0x264>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	0619      	lsls	r1, r3, #24
 80060c0:	4b57      	ldr	r3, [pc, #348]	; (8006220 <MX_LWIP_Init+0x264>)
 80060c2:	785b      	ldrb	r3, [r3, #1]
 80060c4:	041b      	lsls	r3, r3, #16
 80060c6:	4319      	orrs	r1, r3
 80060c8:	4b55      	ldr	r3, [pc, #340]	; (8006220 <MX_LWIP_Init+0x264>)
 80060ca:	789b      	ldrb	r3, [r3, #2]
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	430b      	orrs	r3, r1
 80060d0:	4953      	ldr	r1, [pc, #332]	; (8006220 <MX_LWIP_Init+0x264>)
 80060d2:	78c9      	ldrb	r1, [r1, #3]
 80060d4:	430b      	orrs	r3, r1
 80060d6:	021b      	lsls	r3, r3, #8
 80060d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060dc:	431a      	orrs	r2, r3
 80060de:	4b50      	ldr	r3, [pc, #320]	; (8006220 <MX_LWIP_Init+0x264>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	0619      	lsls	r1, r3, #24
 80060e4:	4b4e      	ldr	r3, [pc, #312]	; (8006220 <MX_LWIP_Init+0x264>)
 80060e6:	785b      	ldrb	r3, [r3, #1]
 80060e8:	041b      	lsls	r3, r3, #16
 80060ea:	4319      	orrs	r1, r3
 80060ec:	4b4c      	ldr	r3, [pc, #304]	; (8006220 <MX_LWIP_Init+0x264>)
 80060ee:	789b      	ldrb	r3, [r3, #2]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	430b      	orrs	r3, r1
 80060f4:	494a      	ldr	r1, [pc, #296]	; (8006220 <MX_LWIP_Init+0x264>)
 80060f6:	78c9      	ldrb	r1, [r1, #3]
 80060f8:	430b      	orrs	r3, r1
 80060fa:	0a1b      	lsrs	r3, r3, #8
 80060fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006100:	431a      	orrs	r2, r3
 8006102:	4b47      	ldr	r3, [pc, #284]	; (8006220 <MX_LWIP_Init+0x264>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	0619      	lsls	r1, r3, #24
 8006108:	4b45      	ldr	r3, [pc, #276]	; (8006220 <MX_LWIP_Init+0x264>)
 800610a:	785b      	ldrb	r3, [r3, #1]
 800610c:	041b      	lsls	r3, r3, #16
 800610e:	4319      	orrs	r1, r3
 8006110:	4b43      	ldr	r3, [pc, #268]	; (8006220 <MX_LWIP_Init+0x264>)
 8006112:	789b      	ldrb	r3, [r3, #2]
 8006114:	021b      	lsls	r3, r3, #8
 8006116:	430b      	orrs	r3, r1
 8006118:	4941      	ldr	r1, [pc, #260]	; (8006220 <MX_LWIP_Init+0x264>)
 800611a:	78c9      	ldrb	r1, [r1, #3]
 800611c:	430b      	orrs	r3, r1
 800611e:	0e1b      	lsrs	r3, r3, #24
 8006120:	4313      	orrs	r3, r2
 8006122:	4a42      	ldr	r2, [pc, #264]	; (800622c <MX_LWIP_Init+0x270>)
 8006124:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006126:	4b3f      	ldr	r3, [pc, #252]	; (8006224 <MX_LWIP_Init+0x268>)
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	061a      	lsls	r2, r3, #24
 800612c:	4b3d      	ldr	r3, [pc, #244]	; (8006224 <MX_LWIP_Init+0x268>)
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	041b      	lsls	r3, r3, #16
 8006132:	431a      	orrs	r2, r3
 8006134:	4b3b      	ldr	r3, [pc, #236]	; (8006224 <MX_LWIP_Init+0x268>)
 8006136:	789b      	ldrb	r3, [r3, #2]
 8006138:	021b      	lsls	r3, r3, #8
 800613a:	4313      	orrs	r3, r2
 800613c:	4a39      	ldr	r2, [pc, #228]	; (8006224 <MX_LWIP_Init+0x268>)
 800613e:	78d2      	ldrb	r2, [r2, #3]
 8006140:	4313      	orrs	r3, r2
 8006142:	061a      	lsls	r2, r3, #24
 8006144:	4b37      	ldr	r3, [pc, #220]	; (8006224 <MX_LWIP_Init+0x268>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	0619      	lsls	r1, r3, #24
 800614a:	4b36      	ldr	r3, [pc, #216]	; (8006224 <MX_LWIP_Init+0x268>)
 800614c:	785b      	ldrb	r3, [r3, #1]
 800614e:	041b      	lsls	r3, r3, #16
 8006150:	4319      	orrs	r1, r3
 8006152:	4b34      	ldr	r3, [pc, #208]	; (8006224 <MX_LWIP_Init+0x268>)
 8006154:	789b      	ldrb	r3, [r3, #2]
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	430b      	orrs	r3, r1
 800615a:	4932      	ldr	r1, [pc, #200]	; (8006224 <MX_LWIP_Init+0x268>)
 800615c:	78c9      	ldrb	r1, [r1, #3]
 800615e:	430b      	orrs	r3, r1
 8006160:	021b      	lsls	r3, r3, #8
 8006162:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006166:	431a      	orrs	r2, r3
 8006168:	4b2e      	ldr	r3, [pc, #184]	; (8006224 <MX_LWIP_Init+0x268>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	0619      	lsls	r1, r3, #24
 800616e:	4b2d      	ldr	r3, [pc, #180]	; (8006224 <MX_LWIP_Init+0x268>)
 8006170:	785b      	ldrb	r3, [r3, #1]
 8006172:	041b      	lsls	r3, r3, #16
 8006174:	4319      	orrs	r1, r3
 8006176:	4b2b      	ldr	r3, [pc, #172]	; (8006224 <MX_LWIP_Init+0x268>)
 8006178:	789b      	ldrb	r3, [r3, #2]
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	430b      	orrs	r3, r1
 800617e:	4929      	ldr	r1, [pc, #164]	; (8006224 <MX_LWIP_Init+0x268>)
 8006180:	78c9      	ldrb	r1, [r1, #3]
 8006182:	430b      	orrs	r3, r1
 8006184:	0a1b      	lsrs	r3, r3, #8
 8006186:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800618a:	431a      	orrs	r2, r3
 800618c:	4b25      	ldr	r3, [pc, #148]	; (8006224 <MX_LWIP_Init+0x268>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	0619      	lsls	r1, r3, #24
 8006192:	4b24      	ldr	r3, [pc, #144]	; (8006224 <MX_LWIP_Init+0x268>)
 8006194:	785b      	ldrb	r3, [r3, #1]
 8006196:	041b      	lsls	r3, r3, #16
 8006198:	4319      	orrs	r1, r3
 800619a:	4b22      	ldr	r3, [pc, #136]	; (8006224 <MX_LWIP_Init+0x268>)
 800619c:	789b      	ldrb	r3, [r3, #2]
 800619e:	021b      	lsls	r3, r3, #8
 80061a0:	430b      	orrs	r3, r1
 80061a2:	4920      	ldr	r1, [pc, #128]	; (8006224 <MX_LWIP_Init+0x268>)
 80061a4:	78c9      	ldrb	r1, [r1, #3]
 80061a6:	430b      	orrs	r3, r1
 80061a8:	0e1b      	lsrs	r3, r3, #24
 80061aa:	4313      	orrs	r3, r2
 80061ac:	4a20      	ldr	r2, [pc, #128]	; (8006230 <MX_LWIP_Init+0x274>)
 80061ae:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80061b0:	4b20      	ldr	r3, [pc, #128]	; (8006234 <MX_LWIP_Init+0x278>)
 80061b2:	9302      	str	r3, [sp, #8]
 80061b4:	4b20      	ldr	r3, [pc, #128]	; (8006238 <MX_LWIP_Init+0x27c>)
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	2300      	movs	r3, #0
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	4b1c      	ldr	r3, [pc, #112]	; (8006230 <MX_LWIP_Init+0x274>)
 80061be:	4a1b      	ldr	r2, [pc, #108]	; (800622c <MX_LWIP_Init+0x270>)
 80061c0:	4919      	ldr	r1, [pc, #100]	; (8006228 <MX_LWIP_Init+0x26c>)
 80061c2:	481e      	ldr	r0, [pc, #120]	; (800623c <MX_LWIP_Init+0x280>)
 80061c4:	f004 feec 	bl	800afa0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80061c8:	481c      	ldr	r0, [pc, #112]	; (800623c <MX_LWIP_Init+0x280>)
 80061ca:	f005 f89b 	bl	800b304 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80061ce:	4b1b      	ldr	r3, [pc, #108]	; (800623c <MX_LWIP_Init+0x280>)
 80061d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061d4:	089b      	lsrs	r3, r3, #2
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80061e0:	4816      	ldr	r0, [pc, #88]	; (800623c <MX_LWIP_Init+0x280>)
 80061e2:	f005 f89f 	bl	800b324 <netif_set_up>
 80061e6:	e002      	b.n	80061ee <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80061e8:	4814      	ldr	r0, [pc, #80]	; (800623c <MX_LWIP_Init+0x280>)
 80061ea:	f005 f907 	bl	800b3fc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80061ee:	4914      	ldr	r1, [pc, #80]	; (8006240 <MX_LWIP_Init+0x284>)
 80061f0:	4812      	ldr	r0, [pc, #72]	; (800623c <MX_LWIP_Init+0x280>)
 80061f2:	f005 f999 	bl	800b528 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80061f6:	4b13      	ldr	r3, [pc, #76]	; (8006244 <MX_LWIP_Init+0x288>)
 80061f8:	1d3c      	adds	r4, r7, #4
 80061fa:	461d      	mov	r5, r3
 80061fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006200:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006204:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8006208:	1d3b      	adds	r3, r7, #4
 800620a:	490c      	ldr	r1, [pc, #48]	; (800623c <MX_LWIP_Init+0x280>)
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fd47 	bl	8006ca0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006212:	bf00      	nop
 8006214:	3720      	adds	r7, #32
 8006216:	46bd      	mov	sp, r7
 8006218:	bdb0      	pop	{r4, r5, r7, pc}
 800621a:	bf00      	nop
 800621c:	20000db0 	.word	0x20000db0
 8006220:	20000db4 	.word	0x20000db4
 8006224:	20000db8 	.word	0x20000db8
 8006228:	20000da4 	.word	0x20000da4
 800622c:	20000da8 	.word	0x20000da8
 8006230:	20000dac 	.word	0x20000dac
 8006234:	0800a349 	.word	0x0800a349
 8006238:	08006741 	.word	0x08006741
 800623c:	20000d70 	.word	0x20000d70
 8006240:	08006249 	.word	0x08006249
 8006244:	08016b6c 	.word	0x08016b6c

08006248 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800626e:	2320      	movs	r3, #32
 8006270:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006272:	f3bf 8f4f 	dsb	sy
}
 8006276:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8006278:	e00b      	b.n	8006292 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800627a:	4a0d      	ldr	r2, [pc, #52]	; (80062b0 <SCB_InvalidateDCache_by_Addr+0x54>)
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4413      	add	r3, r2
 8006288:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b00      	cmp	r3, #0
 8006296:	dcf0      	bgt.n	800627a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006298:	f3bf 8f4f 	dsb	sy
}
 800629c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800629e:	f3bf 8f6f 	isb	sy
}
 80062a2:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80062a4:	bf00      	nop
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	e000ed00 	.word	0xe000ed00

080062b4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80062bc:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <HAL_ETH_RxCpltCallback+0x1c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 fe37 	bl	8006f34 <osSemaphoreRelease>
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20005748 	.word	0x20005748

080062d4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80062dc:	4b04      	ldr	r3, [pc, #16]	; (80062f0 <HAL_ETH_TxCpltCallback+0x1c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fe27 	bl	8006f34 <osSemaphoreRelease>
}
 80062e6:	bf00      	nop
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	2000574c 	.word	0x2000574c

080062f4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7fc fabd 	bl	800287c <HAL_ETH_GetDMAError>
 8006302:	4603      	mov	r3, r0
 8006304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006308:	2b80      	cmp	r3, #128	; 0x80
 800630a:	d104      	bne.n	8006316 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800630c:	4b04      	ldr	r3, [pc, #16]	; (8006320 <HAL_ETH_ErrorCallback+0x2c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fe0f 	bl	8006f34 <osSemaphoreRelease>
  }
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20005748 	.word	0x20005748

08006324 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006324:	b5b0      	push	{r4, r5, r7, lr}
 8006326:	b0a8      	sub	sp, #160	; 0xa0
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8006338:	2300      	movs	r3, #0
 800633a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800633e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006342:	2264      	movs	r2, #100	; 0x64
 8006344:	2100      	movs	r1, #0
 8006346:	4618      	mov	r0, r3
 8006348:	f00e fccb 	bl	8014ce2 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800634c:	4b85      	ldr	r3, [pc, #532]	; (8006564 <low_level_init+0x240>)
 800634e:	4a86      	ldr	r2, [pc, #536]	; (8006568 <low_level_init+0x244>)
 8006350:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006352:	2300      	movs	r3, #0
 8006354:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8006358:	2380      	movs	r3, #128	; 0x80
 800635a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800635e:	23e1      	movs	r3, #225	; 0xe1
 8006360:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8006364:	2300      	movs	r3, #0
 8006366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800636a:	2300      	movs	r3, #0
 800636c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8006370:	2300      	movs	r3, #0
 8006372:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8006376:	4a7b      	ldr	r2, [pc, #492]	; (8006564 <low_level_init+0x240>)
 8006378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800637c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800637e:	4b79      	ldr	r3, [pc, #484]	; (8006564 <low_level_init+0x240>)
 8006380:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006384:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006386:	4b77      	ldr	r3, [pc, #476]	; (8006564 <low_level_init+0x240>)
 8006388:	4a78      	ldr	r2, [pc, #480]	; (800656c <low_level_init+0x248>)
 800638a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800638c:	4b75      	ldr	r3, [pc, #468]	; (8006564 <low_level_init+0x240>)
 800638e:	4a78      	ldr	r2, [pc, #480]	; (8006570 <low_level_init+0x24c>)
 8006390:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006392:	4b74      	ldr	r3, [pc, #464]	; (8006564 <low_level_init+0x240>)
 8006394:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006398:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800639a:	4872      	ldr	r0, [pc, #456]	; (8006564 <low_level_init+0x240>)
 800639c:	f7fb fc32 	bl	8001c04 <HAL_ETH_Init>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80063a6:	2238      	movs	r2, #56	; 0x38
 80063a8:	2100      	movs	r1, #0
 80063aa:	4872      	ldr	r0, [pc, #456]	; (8006574 <low_level_init+0x250>)
 80063ac:	f00e fc99 	bl	8014ce2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80063b0:	4b70      	ldr	r3, [pc, #448]	; (8006574 <low_level_init+0x250>)
 80063b2:	2221      	movs	r2, #33	; 0x21
 80063b4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80063b6:	4b6f      	ldr	r3, [pc, #444]	; (8006574 <low_level_init+0x250>)
 80063b8:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80063bc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80063be:	4b6d      	ldr	r3, [pc, #436]	; (8006574 <low_level_init+0x250>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80063c4:	486c      	ldr	r0, [pc, #432]	; (8006578 <low_level_init+0x254>)
 80063c6:	f004 fca5 	bl	800ad14 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2206      	movs	r2, #6
 80063ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80063d2:	4b64      	ldr	r3, [pc, #400]	; (8006564 <low_level_init+0x240>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	781a      	ldrb	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80063de:	4b61      	ldr	r3, [pc, #388]	; (8006564 <low_level_init+0x240>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	785a      	ldrb	r2, [r3, #1]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80063ea:	4b5e      	ldr	r3, [pc, #376]	; (8006564 <low_level_init+0x240>)
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	789a      	ldrb	r2, [r3, #2]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80063f6:	4b5b      	ldr	r3, [pc, #364]	; (8006564 <low_level_init+0x240>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	78da      	ldrb	r2, [r3, #3]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006402:	4b58      	ldr	r3, [pc, #352]	; (8006564 <low_level_init+0x240>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	791a      	ldrb	r2, [r3, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800640e:	4b55      	ldr	r3, [pc, #340]	; (8006564 <low_level_init+0x240>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	795a      	ldrb	r2, [r3, #5]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006420:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006428:	f043 030a 	orr.w	r3, r3, #10
 800642c:	b2da      	uxtb	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8006434:	2203      	movs	r2, #3
 8006436:	2100      	movs	r1, #0
 8006438:	2001      	movs	r0, #1
 800643a:	f001 f9cf 	bl	80077dc <xQueueGenericCreate>
 800643e:	4603      	mov	r3, r0
 8006440:	4a4e      	ldr	r2, [pc, #312]	; (800657c <low_level_init+0x258>)
 8006442:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8006444:	2203      	movs	r2, #3
 8006446:	2100      	movs	r1, #0
 8006448:	2001      	movs	r0, #1
 800644a:	f001 f9c7 	bl	80077dc <xQueueGenericCreate>
 800644e:	4603      	mov	r3, r0
 8006450:	4a4b      	ldr	r2, [pc, #300]	; (8006580 <low_level_init+0x25c>)
 8006452:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006454:	4b4b      	ldr	r3, [pc, #300]	; (8006584 <low_level_init+0x260>)
 8006456:	f107 0408 	add.w	r4, r7, #8
 800645a:	461d      	mov	r5, r3
 800645c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800645e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006460:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006464:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006468:	f107 0308 	add.w	r3, r7, #8
 800646c:	6879      	ldr	r1, [r7, #4]
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fc16 	bl	8006ca0 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006474:	4944      	ldr	r1, [pc, #272]	; (8006588 <low_level_init+0x264>)
 8006476:	4845      	ldr	r0, [pc, #276]	; (800658c <low_level_init+0x268>)
 8006478:	f7fb f98b 	bl	8001792 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800647c:	4843      	ldr	r0, [pc, #268]	; (800658c <low_level_init+0x268>)
 800647e:	f7fb f9ba 	bl	80017f6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006482:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006486:	2b00      	cmp	r3, #0
 8006488:	d165      	bne.n	8006556 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800648a:	4840      	ldr	r0, [pc, #256]	; (800658c <low_level_init+0x268>)
 800648c:	f7fb fa00 	bl	8001890 <LAN8742_GetLinkState>
 8006490:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006494:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006498:	2b01      	cmp	r3, #1
 800649a:	dc06      	bgt.n	80064aa <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f005 f813 	bl	800b4c8 <netif_set_link_down>
      netif_set_down(netif);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f004 ffaa 	bl	800b3fc <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80064a8:	e057      	b.n	800655a <low_level_init+0x236>
      switch (PHYLinkState)
 80064aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80064ae:	3b02      	subs	r3, #2
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d82b      	bhi.n	800650c <low_level_init+0x1e8>
 80064b4:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <low_level_init+0x198>)
 80064b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ba:	bf00      	nop
 80064bc:	080064cd 	.word	0x080064cd
 80064c0:	080064df 	.word	0x080064df
 80064c4:	080064ef 	.word	0x080064ef
 80064c8:	080064ff 	.word	0x080064ff
        duplex = ETH_FULLDUPLEX_MODE;
 80064cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80064d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80064dc:	e01f      	b.n	800651e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80064de:	2300      	movs	r3, #0
 80064e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80064e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80064ec:	e017      	b.n	800651e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80064ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80064f6:	2300      	movs	r3, #0
 80064f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80064fc:	e00f      	b.n	800651e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80064fe:	2300      	movs	r3, #0
 8006500:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8006504:	2300      	movs	r3, #0
 8006506:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800650a:	e008      	b.n	800651e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800650c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8006514:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800651c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800651e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006522:	4619      	mov	r1, r3
 8006524:	480f      	ldr	r0, [pc, #60]	; (8006564 <low_level_init+0x240>)
 8006526:	f7fc f855 	bl	80025d4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800652a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800652e:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8006530:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006534:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800653a:	4619      	mov	r1, r3
 800653c:	4809      	ldr	r0, [pc, #36]	; (8006564 <low_level_init+0x240>)
 800653e:	f7fc f940 	bl	80027c2 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8006542:	4808      	ldr	r0, [pc, #32]	; (8006564 <low_level_init+0x240>)
 8006544:	f7fb fbf8 	bl	8001d38 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f004 feeb 	bl	800b324 <netif_set_up>
    netif_set_link_up(netif);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f004 ff86 	bl	800b460 <netif_set_link_up>
}
 8006554:	e001      	b.n	800655a <low_level_init+0x236>
    Error_Handler();
 8006556:	f7fa fa0b 	bl	8000970 <Error_Handler>
}
 800655a:	bf00      	nop
 800655c:	37a0      	adds	r7, #160	; 0xa0
 800655e:	46bd      	mov	sp, r7
 8006560:	bdb0      	pop	{r4, r5, r7, pc}
 8006562:	bf00      	nop
 8006564:	20005750 	.word	0x20005750
 8006568:	40028000 	.word	0x40028000
 800656c:	20000134 	.word	0x20000134
 8006570:	20000094 	.word	0x20000094
 8006574:	20005800 	.word	0x20005800
 8006578:	080196b4 	.word	0x080196b4
 800657c:	20005748 	.word	0x20005748
 8006580:	2000574c 	.word	0x2000574c
 8006584:	08016b90 	.word	0x08016b90
 8006588:	2000000c 	.word	0x2000000c
 800658c:	20005838 	.word	0x20005838

08006590 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b092      	sub	sp, #72	; 0x48
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80065a8:	f107 030c 	add.w	r3, r7, #12
 80065ac:	2230      	movs	r2, #48	; 0x30
 80065ae:	2100      	movs	r1, #0
 80065b0:	4618      	mov	r0, r3
 80065b2:	f00e fb96 	bl	8014ce2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80065b6:	f107 030c 	add.w	r3, r7, #12
 80065ba:	2230      	movs	r2, #48	; 0x30
 80065bc:	2100      	movs	r1, #0
 80065be:	4618      	mov	r0, r3
 80065c0:	f00e fb8f 	bl	8014ce2 <memset>

  for(q = p; q != NULL; q = q->next)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	643b      	str	r3, [r7, #64]	; 0x40
 80065c8:	e045      	b.n	8006656 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80065ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d902      	bls.n	80065d6 <low_level_output+0x46>
      return ERR_IF;
 80065d0:	f06f 030b 	mvn.w	r3, #11
 80065d4:	e065      	b.n	80066a2 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80065d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d8:	6859      	ldr	r1, [r3, #4]
 80065da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065dc:	4613      	mov	r3, r2
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	3348      	adds	r3, #72	; 0x48
 80065e6:	443b      	add	r3, r7
 80065e8:	3b3c      	subs	r3, #60	; 0x3c
 80065ea:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80065ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ee:	895b      	ldrh	r3, [r3, #10]
 80065f0:	4619      	mov	r1, r3
 80065f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065f4:	4613      	mov	r3, r2
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	4413      	add	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	3348      	adds	r3, #72	; 0x48
 80065fe:	443b      	add	r3, r7
 8006600:	3b38      	subs	r3, #56	; 0x38
 8006602:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006606:	2b00      	cmp	r3, #0
 8006608:	d011      	beq.n	800662e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800660a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800660c:	1e5a      	subs	r2, r3, #1
 800660e:	f107 000c 	add.w	r0, r7, #12
 8006612:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006614:	460b      	mov	r3, r1
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	440b      	add	r3, r1
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	18c1      	adds	r1, r0, r3
 800661e:	4613      	mov	r3, r2
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	3348      	adds	r3, #72	; 0x48
 8006628:	443b      	add	r3, r7
 800662a:	3b34      	subs	r3, #52	; 0x34
 800662c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800662e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d109      	bne.n	800664a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006638:	4613      	mov	r3, r2
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	3348      	adds	r3, #72	; 0x48
 8006642:	443b      	add	r3, r7
 8006644:	3b34      	subs	r3, #52	; 0x34
 8006646:	2200      	movs	r2, #0
 8006648:	601a      	str	r2, [r3, #0]
    }

    i++;
 800664a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800664c:	3301      	adds	r3, #1
 800664e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	643b      	str	r3, [r7, #64]	; 0x40
 8006656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1b6      	bne.n	80065ca <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	891b      	ldrh	r3, [r3, #8]
 8006660:	461a      	mov	r2, r3
 8006662:	4b12      	ldr	r3, [pc, #72]	; (80066ac <low_level_output+0x11c>)
 8006664:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006666:	4a11      	ldr	r2, [pc, #68]	; (80066ac <low_level_output+0x11c>)
 8006668:	f107 030c 	add.w	r3, r7, #12
 800666c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800666e:	4a0f      	ldr	r2, [pc, #60]	; (80066ac <low_level_output+0x11c>)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8006674:	6838      	ldr	r0, [r7, #0]
 8006676:	f005 fbab 	bl	800bdd0 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800667a:	490c      	ldr	r1, [pc, #48]	; (80066ac <low_level_output+0x11c>)
 800667c:	480c      	ldr	r0, [pc, #48]	; (80066b0 <low_level_output+0x120>)
 800667e:	f7fb fc4b 	bl	8001f18 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8006682:	bf00      	nop
 8006684:	4b0b      	ldr	r3, [pc, #44]	; (80066b4 <low_level_output+0x124>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800668c:	4618      	mov	r0, r3
 800668e:	f000 fc03 	bl	8006e98 <osSemaphoreWait>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1f5      	bne.n	8006684 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8006698:	4805      	ldr	r0, [pc, #20]	; (80066b0 <low_level_output+0x120>)
 800669a:	f7fb fddd 	bl	8002258 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800669e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3748      	adds	r7, #72	; 0x48
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20005800 	.word	0x20005800
 80066b0:	20005750 	.word	0x20005750
 80066b4:	2000574c 	.word	0x2000574c

080066b8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80066c4:	4b07      	ldr	r3, [pc, #28]	; (80066e4 <low_level_input+0x2c>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d105      	bne.n	80066d8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80066cc:	f107 030c 	add.w	r3, r7, #12
 80066d0:	4619      	mov	r1, r3
 80066d2:	4805      	ldr	r0, [pc, #20]	; (80066e8 <low_level_input+0x30>)
 80066d4:	f7fb fc7c 	bl	8001fd0 <HAL_ETH_ReadData>
  }

  return p;
 80066d8:	68fb      	ldr	r3, [r7, #12]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20005744 	.word	0x20005744
 80066e8:	20005750 	.word	0x20005750

080066ec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80066fc:	4b0f      	ldr	r3, [pc, #60]	; (800673c <ethernetif_input+0x50>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fbc7 	bl	8006e98 <osSemaphoreWait>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1f5      	bne.n	80066fc <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006710:	68b8      	ldr	r0, [r7, #8]
 8006712:	f7ff ffd1 	bl	80066b8 <low_level_input>
 8006716:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	4798      	blx	r3
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f005 faa8 	bl	800bc84 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1ea      	bne.n	8006710 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800673a:	e7df      	b.n	80066fc <ethernetif_input+0x10>
 800673c:	20005748 	.word	0x20005748

08006740 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <ethernetif_init+0x1c>
 800674e:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <ethernetif_init+0x48>)
 8006750:	f240 12ef 	movw	r2, #495	; 0x1ef
 8006754:	490d      	ldr	r1, [pc, #52]	; (800678c <ethernetif_init+0x4c>)
 8006756:	480e      	ldr	r0, [pc, #56]	; (8006790 <ethernetif_init+0x50>)
 8006758:	f00e fbac 	bl	8014eb4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2273      	movs	r2, #115	; 0x73
 8006760:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2274      	movs	r2, #116	; 0x74
 8006768:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a09      	ldr	r2, [pc, #36]	; (8006794 <ethernetif_init+0x54>)
 8006770:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a08      	ldr	r2, [pc, #32]	; (8006798 <ethernetif_init+0x58>)
 8006776:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff fdd3 	bl	8006324 <low_level_init>

  return ERR_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	08016bac 	.word	0x08016bac
 800678c:	08016bc8 	.word	0x08016bc8
 8006790:	08016bd8 	.word	0x08016bd8
 8006794:	08012971 	.word	0x08012971
 8006798:	08006591 	.word	0x08006591

0800679c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80067a8:	68f9      	ldr	r1, [r7, #12]
 80067aa:	4809      	ldr	r0, [pc, #36]	; (80067d0 <pbuf_free_custom+0x34>)
 80067ac:	f004 fba2 	bl	800aef4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80067b0:	4b08      	ldr	r3, [pc, #32]	; (80067d4 <pbuf_free_custom+0x38>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d107      	bne.n	80067c8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80067b8:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <pbuf_free_custom+0x38>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80067be:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <pbuf_free_custom+0x3c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fbb6 	bl	8006f34 <osSemaphoreRelease>
  }
}
 80067c8:	bf00      	nop
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	080196b4 	.word	0x080196b4
 80067d4:	20005744 	.word	0x20005744
 80067d8:	20005748 	.word	0x20005748

080067dc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80067e0:	f7fb f8fe 	bl	80019e0 <HAL_GetTick>
 80067e4:	4603      	mov	r3, r0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08e      	sub	sp, #56	; 0x38
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	609a      	str	r2, [r3, #8]
 8006800:	60da      	str	r2, [r3, #12]
 8006802:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a52      	ldr	r2, [pc, #328]	; (8006954 <HAL_ETH_MspInit+0x168>)
 800680a:	4293      	cmp	r3, r2
 800680c:	f040 809e 	bne.w	800694c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006810:	4b51      	ldr	r3, [pc, #324]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 8006812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006814:	4a50      	ldr	r2, [pc, #320]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 8006816:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800681a:	6313      	str	r3, [r2, #48]	; 0x30
 800681c:	4b4e      	ldr	r3, [pc, #312]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 800681e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006824:	623b      	str	r3, [r7, #32]
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	4b4b      	ldr	r3, [pc, #300]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 800682a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682c:	4a4a      	ldr	r2, [pc, #296]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 800682e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006832:	6313      	str	r3, [r2, #48]	; 0x30
 8006834:	4b48      	ldr	r3, [pc, #288]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 8006836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006838:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800683c:	61fb      	str	r3, [r7, #28]
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	4b45      	ldr	r3, [pc, #276]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	4a44      	ldr	r2, [pc, #272]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 8006846:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800684a:	6313      	str	r3, [r2, #48]	; 0x30
 800684c:	4b42      	ldr	r3, [pc, #264]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006858:	4b3f      	ldr	r3, [pc, #252]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	4a3e      	ldr	r2, [pc, #248]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 800685e:	f043 0304 	orr.w	r3, r3, #4
 8006862:	6313      	str	r3, [r2, #48]	; 0x30
 8006864:	4b3c      	ldr	r3, [pc, #240]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	617b      	str	r3, [r7, #20]
 800686e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006870:	4b39      	ldr	r3, [pc, #228]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 8006872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006874:	4a38      	ldr	r2, [pc, #224]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 8006876:	f043 0301 	orr.w	r3, r3, #1
 800687a:	6313      	str	r3, [r2, #48]	; 0x30
 800687c:	4b36      	ldr	r3, [pc, #216]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 800687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	613b      	str	r3, [r7, #16]
 8006886:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006888:	4b33      	ldr	r3, [pc, #204]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 800688a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688c:	4a32      	ldr	r2, [pc, #200]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 800688e:	f043 0302 	orr.w	r3, r3, #2
 8006892:	6313      	str	r3, [r2, #48]	; 0x30
 8006894:	4b30      	ldr	r3, [pc, #192]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 8006896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80068a0:	4b2d      	ldr	r3, [pc, #180]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 80068a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a4:	4a2c      	ldr	r2, [pc, #176]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 80068a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068aa:	6313      	str	r3, [r2, #48]	; 0x30
 80068ac:	4b2a      	ldr	r3, [pc, #168]	; (8006958 <HAL_ETH_MspInit+0x16c>)
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b4:	60bb      	str	r3, [r7, #8]
 80068b6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80068b8:	2332      	movs	r3, #50	; 0x32
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068bc:	2302      	movs	r3, #2
 80068be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068c0:	2300      	movs	r3, #0
 80068c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068c4:	2303      	movs	r3, #3
 80068c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80068c8:	230b      	movs	r3, #11
 80068ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068d0:	4619      	mov	r1, r3
 80068d2:	4822      	ldr	r0, [pc, #136]	; (800695c <HAL_ETH_MspInit+0x170>)
 80068d4:	f7fc fbfe 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80068d8:	2386      	movs	r3, #134	; 0x86
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068dc:	2302      	movs	r3, #2
 80068de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068e4:	2303      	movs	r3, #3
 80068e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80068e8:	230b      	movs	r3, #11
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068f0:	4619      	mov	r1, r3
 80068f2:	481b      	ldr	r0, [pc, #108]	; (8006960 <HAL_ETH_MspInit+0x174>)
 80068f4:	f7fc fbee 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80068f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068fe:	2302      	movs	r3, #2
 8006900:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006902:	2300      	movs	r3, #0
 8006904:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006906:	2303      	movs	r3, #3
 8006908:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800690a:	230b      	movs	r3, #11
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800690e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006912:	4619      	mov	r1, r3
 8006914:	4813      	ldr	r0, [pc, #76]	; (8006964 <HAL_ETH_MspInit+0x178>)
 8006916:	f7fc fbdd 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800691a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006920:	2302      	movs	r3, #2
 8006922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006924:	2300      	movs	r3, #0
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006928:	2303      	movs	r3, #3
 800692a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800692c:	230b      	movs	r3, #11
 800692e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006934:	4619      	mov	r1, r3
 8006936:	480c      	ldr	r0, [pc, #48]	; (8006968 <HAL_ETH_MspInit+0x17c>)
 8006938:	f7fc fbcc 	bl	80030d4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800693c:	2200      	movs	r2, #0
 800693e:	2105      	movs	r1, #5
 8006940:	203d      	movs	r0, #61	; 0x3d
 8006942:	f7fb f935 	bl	8001bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006946:	203d      	movs	r0, #61	; 0x3d
 8006948:	f7fb f94e 	bl	8001be8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800694c:	bf00      	nop
 800694e:	3738      	adds	r7, #56	; 0x38
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	40028000 	.word	0x40028000
 8006958:	40023800 	.word	0x40023800
 800695c:	40020800 	.word	0x40020800
 8006960:	40020000 	.word	0x40020000
 8006964:	40020400 	.word	0x40020400
 8006968:	40021800 	.word	0x40021800

0800696c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006970:	4802      	ldr	r0, [pc, #8]	; (800697c <ETH_PHY_IO_Init+0x10>)
 8006972:	f7fb ff41 	bl	80027f8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	bd80      	pop	{r7, pc}
 800697c:	20005750 	.word	0x20005750

08006980 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  return 0;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	68f9      	ldr	r1, [r7, #12]
 80069a2:	4807      	ldr	r0, [pc, #28]	; (80069c0 <ETH_PHY_IO_ReadReg+0x30>)
 80069a4:	f7fb fd82 	bl	80024ac <HAL_ETH_ReadPHYRegister>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80069ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069b2:	e000      	b.n	80069b6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20005750 	.word	0x20005750

080069c4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	68f9      	ldr	r1, [r7, #12]
 80069d6:	4807      	ldr	r0, [pc, #28]	; (80069f4 <ETH_PHY_IO_WriteReg+0x30>)
 80069d8:	f7fb fdb3 	bl	8002542 <HAL_ETH_WritePHYRegister>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80069e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069e6:	e000      	b.n	80069ea <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20005750 	.word	0x20005750

080069f8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80069fc:	f7fa fff0 	bl	80019e0 <HAL_GetTick>
 8006a00:	4603      	mov	r3, r0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	bd80      	pop	{r7, pc}
	...

08006a08 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b0a0      	sub	sp, #128	; 0x80
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006a10:	f107 0308 	add.w	r3, r7, #8
 8006a14:	2264      	movs	r2, #100	; 0x64
 8006a16:	2100      	movs	r1, #0
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f00e f962 	bl	8014ce2 <memset>
  int32_t PHYLinkState = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a26:	2300      	movs	r3, #0
 8006a28:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006a32:	483a      	ldr	r0, [pc, #232]	; (8006b1c <ethernet_link_thread+0x114>)
 8006a34:	f7fa ff2c 	bl	8001890 <LAN8742_GetLinkState>
 8006a38:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a40:	089b      	lsrs	r3, r3, #2
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00c      	beq.n	8006a66 <ethernet_link_thread+0x5e>
 8006a4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	dc09      	bgt.n	8006a66 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8006a52:	4833      	ldr	r0, [pc, #204]	; (8006b20 <ethernet_link_thread+0x118>)
 8006a54:	f7fb f9e0 	bl	8001e18 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006a58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006a5a:	f004 fccf 	bl	800b3fc <netif_set_down>
    netif_set_link_down(netif);
 8006a5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006a60:	f004 fd32 	bl	800b4c8 <netif_set_link_down>
 8006a64:	e055      	b.n	8006b12 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d14e      	bne.n	8006b12 <ethernet_link_thread+0x10a>
 8006a74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	dd4b      	ble.n	8006b12 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a7c:	3b02      	subs	r3, #2
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d82a      	bhi.n	8006ad8 <ethernet_link_thread+0xd0>
 8006a82:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <ethernet_link_thread+0x80>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006a99 	.word	0x08006a99
 8006a8c:	08006aab 	.word	0x08006aab
 8006a90:	08006abb 	.word	0x08006abb
 8006a94:	08006acb 	.word	0x08006acb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006a98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a9c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006a9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006aa2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006aa8:	e017      	b.n	8006ada <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006aae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ab2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006ab8:	e00f      	b.n	8006ada <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006aba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006abe:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006ac8:	e007      	b.n	8006ada <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006ad6:	e000      	b.n	8006ada <ethernet_link_thread+0xd2>
    default:
      break;
 8006ad8:	bf00      	nop
    }

    if(linkchanged)
 8006ada:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d018      	beq.n	8006b12 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006ae0:	f107 0308 	add.w	r3, r7, #8
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	480e      	ldr	r0, [pc, #56]	; (8006b20 <ethernet_link_thread+0x118>)
 8006ae8:	f7fb fd74 	bl	80025d4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aee:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006af2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006af4:	f107 0308 	add.w	r3, r7, #8
 8006af8:	4619      	mov	r1, r3
 8006afa:	4809      	ldr	r0, [pc, #36]	; (8006b20 <ethernet_link_thread+0x118>)
 8006afc:	f7fb fe61 	bl	80027c2 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006b00:	4807      	ldr	r0, [pc, #28]	; (8006b20 <ethernet_link_thread+0x118>)
 8006b02:	f7fb f919 	bl	8001d38 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006b06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b08:	f004 fc0c 	bl	800b324 <netif_set_up>
      netif_set_link_up(netif);
 8006b0c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b0e:	f004 fca7 	bl	800b460 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006b12:	2064      	movs	r0, #100	; 0x64
 8006b14:	f000 f910 	bl	8006d38 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006b18:	e78b      	b.n	8006a32 <ethernet_link_thread+0x2a>
 8006b1a:	bf00      	nop
 8006b1c:	20005838 	.word	0x20005838
 8006b20:	20005750 	.word	0x20005750

08006b24 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006b2c:	4812      	ldr	r0, [pc, #72]	; (8006b78 <HAL_ETH_RxAllocateCallback+0x54>)
 8006b2e:	f004 f96d 	bl	800ae0c <memp_malloc_pool>
 8006b32:	60f8      	str	r0, [r7, #12]
  if (p)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d014      	beq.n	8006b64 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f103 0220 	add.w	r2, r3, #32
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4a0d      	ldr	r2, [pc, #52]	; (8006b7c <HAL_ETH_RxAllocateCallback+0x58>)
 8006b48:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006b52:	9201      	str	r2, [sp, #4]
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2241      	movs	r2, #65	; 0x41
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	f004 fed7 	bl	800b910 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006b62:	e005      	b.n	8006b70 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006b64:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006b66:	2201      	movs	r2, #1
 8006b68:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]
}
 8006b70:	bf00      	nop
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	080196b4 	.word	0x080196b4
 8006b7c:	0800679d 	.word	0x0800679d
 8006b80:	20005744 	.word	0x20005744

08006b84 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	3b20      	subs	r3, #32
 8006ba2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	2200      	movs	r2, #0
 8006bae:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	887a      	ldrh	r2, [r7, #2]
 8006bb4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d103      	bne.n	8006bc6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	e003      	b.n	8006bce <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69fa      	ldr	r2, [r7, #28]
 8006bcc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	69fa      	ldr	r2, [r7, #28]
 8006bd2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	61fb      	str	r3, [r7, #28]
 8006bda:	e009      	b.n	8006bf0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	891a      	ldrh	r2, [r3, #8]
 8006be0:	887b      	ldrh	r3, [r7, #2]
 8006be2:	4413      	add	r3, r2
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1f2      	bne.n	8006bdc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006bf6:	887b      	ldrh	r3, [r7, #2]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff fb2e 	bl	800625c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006c00:	bf00      	nop
 8006c02:	3720      	adds	r7, #32
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f005 f837 	bl	800bc84 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b085      	sub	sp, #20
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	4603      	mov	r3, r0
 8006c26:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006c2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c30:	2b84      	cmp	r3, #132	; 0x84
 8006c32:	d005      	beq.n	8006c40 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006c34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	3303      	adds	r3, #3
 8006c3e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006c40:	68fb      	ldr	r3, [r7, #12]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c54:	f3ef 8305 	mrs	r3, IPSR
 8006c58:	607b      	str	r3, [r7, #4]
  return(result);
 8006c5a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	bf14      	ite	ne
 8006c60:	2301      	movne	r3, #1
 8006c62:	2300      	moveq	r3, #0
 8006c64:	b2db      	uxtb	r3, r3
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006c76:	f001 fee5 	bl	8008a44 <vTaskStartScheduler>
  
  return osOK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006c84:	f7ff ffe3 	bl	8006c4e <inHandlerMode>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006c8e:	f002 f803 	bl	8008c98 <xTaskGetTickCountFromISR>
 8006c92:	4603      	mov	r3, r0
 8006c94:	e002      	b.n	8006c9c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006c96:	f001 ffef 	bl	8008c78 <xTaskGetTickCount>
 8006c9a:	4603      	mov	r3, r0
  }
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ca2:	b089      	sub	sp, #36	; 0x24
 8006ca4:	af04      	add	r7, sp, #16
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d020      	beq.n	8006cf4 <osThreadCreate+0x54>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d01c      	beq.n	8006cf4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685c      	ldr	r4, [r3, #4]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681d      	ldr	r5, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691e      	ldr	r6, [r3, #16]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff ffa6 	bl	8006c1e <makeFreeRtosPriority>
 8006cd2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cdc:	9202      	str	r2, [sp, #8]
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	9100      	str	r1, [sp, #0]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	4632      	mov	r2, r6
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f001 fc29 	bl	8008540 <xTaskCreateStatic>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	e01c      	b.n	8006d2e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685c      	ldr	r4, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d00:	b29e      	uxth	r6, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff ff88 	bl	8006c1e <makeFreeRtosPriority>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	f107 030c 	add.w	r3, r7, #12
 8006d14:	9301      	str	r3, [sp, #4]
 8006d16:	9200      	str	r2, [sp, #0]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	4632      	mov	r2, r6
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f001 fc71 	bl	8008606 <xTaskCreate>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d001      	beq.n	8006d2e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e000      	b.n	8006d30 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d38 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <osDelay+0x16>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	e000      	b.n	8006d50 <osDelay+0x18>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4618      	mov	r0, r3
 8006d52:	f001 fe41 	bl	80089d8 <vTaskDelay>
  
  return osOK;
 8006d56:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d007      	beq.n	8006d80 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	4619      	mov	r1, r3
 8006d76:	2001      	movs	r0, #1
 8006d78:	f000 fdc3 	bl	8007902 <xQueueCreateMutexStatic>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	e003      	b.n	8006d88 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006d80:	2001      	movs	r0, #1
 8006d82:	f000 fda6 	bl	80078d2 <xQueueCreateMutex>
 8006d86:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <osMutexWait+0x18>
    return osErrorParameter;
 8006da4:	2380      	movs	r3, #128	; 0x80
 8006da6:	e03a      	b.n	8006e1e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006db2:	d103      	bne.n	8006dbc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006db8:	60fb      	str	r3, [r7, #12]
 8006dba:	e009      	b.n	8006dd0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d006      	beq.n	8006dd0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <osMutexWait+0x40>
      ticks = 1;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006dd0:	f7ff ff3d 	bl	8006c4e <inHandlerMode>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d017      	beq.n	8006e0a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006dda:	f107 0308 	add.w	r3, r7, #8
 8006dde:	461a      	mov	r2, r3
 8006de0:	2100      	movs	r1, #0
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 f9de 	bl	80081a4 <xQueueReceiveFromISR>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d001      	beq.n	8006df2 <osMutexWait+0x62>
      return osErrorOS;
 8006dee:	23ff      	movs	r3, #255	; 0xff
 8006df0:	e015      	b.n	8006e1e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d011      	beq.n	8006e1c <osMutexWait+0x8c>
 8006df8:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <osMutexWait+0x98>)
 8006dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	e008      	b.n	8006e1c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006e0a:	68f9      	ldr	r1, [r7, #12]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 f8b5 	bl	8007f7c <xQueueSemaphoreTake>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d001      	beq.n	8006e1c <osMutexWait+0x8c>
    return osErrorOS;
 8006e18:	23ff      	movs	r3, #255	; 0xff
 8006e1a:	e000      	b.n	8006e1e <osMutexWait+0x8e>
  }
  
  return osOK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	e000ed04 	.word	0xe000ed04

08006e2c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006e3c:	f7ff ff07 	bl	8006c4e <inHandlerMode>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d016      	beq.n	8006e74 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006e46:	f107 0308 	add.w	r3, r7, #8
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 ff19 	bl	8007c84 <xQueueGiveFromISR>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d001      	beq.n	8006e5c <osMutexRelease+0x30>
      return osErrorOS;
 8006e58:	23ff      	movs	r3, #255	; 0xff
 8006e5a:	e017      	b.n	8006e8c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d013      	beq.n	8006e8a <osMutexRelease+0x5e>
 8006e62:	4b0c      	ldr	r3, [pc, #48]	; (8006e94 <osMutexRelease+0x68>)
 8006e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	e00a      	b.n	8006e8a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006e74:	2300      	movs	r3, #0
 8006e76:	2200      	movs	r2, #0
 8006e78:	2100      	movs	r1, #0
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fd5c 	bl	8007938 <xQueueGenericSend>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d001      	beq.n	8006e8a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006e86:	23ff      	movs	r3, #255	; 0xff
 8006e88:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	e000ed04 	.word	0xe000ed04

08006e98 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006eac:	2380      	movs	r3, #128	; 0x80
 8006eae:	e03a      	b.n	8006f26 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eba:	d103      	bne.n	8006ec4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	e009      	b.n	8006ed8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d006      	beq.n	8006ed8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <osSemaphoreWait+0x40>
      ticks = 1;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006ed8:	f7ff feb9 	bl	8006c4e <inHandlerMode>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d017      	beq.n	8006f12 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006ee2:	f107 0308 	add.w	r3, r7, #8
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	2100      	movs	r1, #0
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 f95a 	bl	80081a4 <xQueueReceiveFromISR>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d001      	beq.n	8006efa <osSemaphoreWait+0x62>
      return osErrorOS;
 8006ef6:	23ff      	movs	r3, #255	; 0xff
 8006ef8:	e015      	b.n	8006f26 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d011      	beq.n	8006f24 <osSemaphoreWait+0x8c>
 8006f00:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <osSemaphoreWait+0x98>)
 8006f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	e008      	b.n	8006f24 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006f12:	68f9      	ldr	r1, [r7, #12]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 f831 	bl	8007f7c <xQueueSemaphoreTake>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d001      	beq.n	8006f24 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006f20:	23ff      	movs	r3, #255	; 0xff
 8006f22:	e000      	b.n	8006f26 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	e000ed04 	.word	0xe000ed04

08006f34 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006f40:	2300      	movs	r3, #0
 8006f42:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006f44:	f7ff fe83 	bl	8006c4e <inHandlerMode>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d016      	beq.n	8006f7c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006f4e:	f107 0308 	add.w	r3, r7, #8
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fe95 	bl	8007c84 <xQueueGiveFromISR>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d001      	beq.n	8006f64 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006f60:	23ff      	movs	r3, #255	; 0xff
 8006f62:	e017      	b.n	8006f94 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d013      	beq.n	8006f92 <osSemaphoreRelease+0x5e>
 8006f6a:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <osSemaphoreRelease+0x68>)
 8006f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	e00a      	b.n	8006f92 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2100      	movs	r1, #0
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fcd8 	bl	8007938 <xQueueGenericSend>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d001      	beq.n	8006f92 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006f8e:	23ff      	movs	r3, #255	; 0xff
 8006f90:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006f92:	68fb      	ldr	r3, [r7, #12]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	e000ed04 	.word	0xe000ed04

08006fa0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006fa0:	b590      	push	{r4, r7, lr}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d011      	beq.n	8006fd6 <osMessageCreate+0x36>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00d      	beq.n	8006fd6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6818      	ldr	r0, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6859      	ldr	r1, [r3, #4]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689a      	ldr	r2, [r3, #8]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	2400      	movs	r4, #0
 8006fcc:	9400      	str	r4, [sp, #0]
 8006fce:	f000 fb83 	bl	80076d8 <xQueueGenericCreateStatic>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	e008      	b.n	8006fe8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	f000 fbfb 	bl	80077dc <xQueueGenericCreate>
 8006fe6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd90      	pop	{r4, r7, pc}

08006ff0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <osMessagePut+0x1e>
    ticks = 1;
 800700a:	2301      	movs	r3, #1
 800700c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800700e:	f7ff fe1e 	bl	8006c4e <inHandlerMode>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d018      	beq.n	800704a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007018:	f107 0210 	add.w	r2, r7, #16
 800701c:	f107 0108 	add.w	r1, r7, #8
 8007020:	2300      	movs	r3, #0
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 fd8e 	bl	8007b44 <xQueueGenericSendFromISR>
 8007028:	4603      	mov	r3, r0
 800702a:	2b01      	cmp	r3, #1
 800702c:	d001      	beq.n	8007032 <osMessagePut+0x42>
      return osErrorOS;
 800702e:	23ff      	movs	r3, #255	; 0xff
 8007030:	e018      	b.n	8007064 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d014      	beq.n	8007062 <osMessagePut+0x72>
 8007038:	4b0c      	ldr	r3, [pc, #48]	; (800706c <osMessagePut+0x7c>)
 800703a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	e00b      	b.n	8007062 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800704a:	f107 0108 	add.w	r1, r7, #8
 800704e:	2300      	movs	r3, #0
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 fc70 	bl	8007938 <xQueueGenericSend>
 8007058:	4603      	mov	r3, r0
 800705a:	2b01      	cmp	r3, #1
 800705c:	d001      	beq.n	8007062 <osMessagePut+0x72>
      return osErrorOS;
 800705e:	23ff      	movs	r3, #255	; 0xff
 8007060:	e000      	b.n	8007064 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	e000ed04 	.word	0xe000ed04

08007070 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007070:	b590      	push	{r4, r7, lr}
 8007072:	b08b      	sub	sp, #44	; 0x2c
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800708a:	2380      	movs	r3, #128	; 0x80
 800708c:	617b      	str	r3, [r7, #20]
    return event;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	461c      	mov	r4, r3
 8007092:	f107 0314 	add.w	r3, r7, #20
 8007096:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800709a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800709e:	e054      	b.n	800714a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80070a0:	2300      	movs	r3, #0
 80070a2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80070a4:	2300      	movs	r3, #0
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070ae:	d103      	bne.n	80070b8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80070b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
 80070b6:	e009      	b.n	80070cc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d006      	beq.n	80070cc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <osMessageGet+0x5c>
      ticks = 1;
 80070c8:	2301      	movs	r3, #1
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80070cc:	f7ff fdbf 	bl	8006c4e <inHandlerMode>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d01c      	beq.n	8007110 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80070d6:	f107 0220 	add.w	r2, r7, #32
 80070da:	f107 0314 	add.w	r3, r7, #20
 80070de:	3304      	adds	r3, #4
 80070e0:	4619      	mov	r1, r3
 80070e2:	68b8      	ldr	r0, [r7, #8]
 80070e4:	f001 f85e 	bl	80081a4 <xQueueReceiveFromISR>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d102      	bne.n	80070f4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80070ee:	2310      	movs	r3, #16
 80070f0:	617b      	str	r3, [r7, #20]
 80070f2:	e001      	b.n	80070f8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d01d      	beq.n	800713a <osMessageGet+0xca>
 80070fe:	4b15      	ldr	r3, [pc, #84]	; (8007154 <osMessageGet+0xe4>)
 8007100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	e014      	b.n	800713a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007110:	f107 0314 	add.w	r3, r7, #20
 8007114:	3304      	adds	r3, #4
 8007116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007118:	4619      	mov	r1, r3
 800711a:	68b8      	ldr	r0, [r7, #8]
 800711c:	f000 fe48 	bl	8007db0 <xQueueReceive>
 8007120:	4603      	mov	r3, r0
 8007122:	2b01      	cmp	r3, #1
 8007124:	d102      	bne.n	800712c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007126:	2310      	movs	r3, #16
 8007128:	617b      	str	r3, [r7, #20]
 800712a:	e006      	b.n	800713a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <osMessageGet+0xc6>
 8007132:	2300      	movs	r3, #0
 8007134:	e000      	b.n	8007138 <osMessageGet+0xc8>
 8007136:	2340      	movs	r3, #64	; 0x40
 8007138:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	461c      	mov	r4, r3
 800713e:	f107 0314 	add.w	r3, r7, #20
 8007142:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007146:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	372c      	adds	r7, #44	; 0x2c
 800714e:	46bd      	mov	sp, r7
 8007150:	bd90      	pop	{r4, r7, pc}
 8007152:	bf00      	nop
 8007154:	e000ed04 	.word	0xe000ed04

08007158 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800715e:	201c      	movs	r0, #28
 8007160:	f002 fe18 	bl	8009d94 <pvPortMalloc>
 8007164:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00a      	beq.n	8007182 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3304      	adds	r3, #4
 8007176:	4618      	mov	r0, r3
 8007178:	f000 f98f 	bl	800749a <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8007182:	687b      	ldr	r3, [r7, #4]
	}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b090      	sub	sp, #64	; 0x40
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800719e:	2300      	movs	r3, #0
 80071a0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80071a2:	2300      	movs	r3, #0
 80071a4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10c      	bne.n	80071c6 <xEventGroupWaitBits+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	b672      	cpsid	i
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	b662      	cpsie	i
 80071c0:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80071c2:	bf00      	nop
 80071c4:	e7fe      	b.n	80071c4 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00c      	beq.n	80071ea <xEventGroupWaitBits+0x5e>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	b672      	cpsid	i
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	b662      	cpsie	i
 80071e4:	61fb      	str	r3, [r7, #28]
}
 80071e6:	bf00      	nop
 80071e8:	e7fe      	b.n	80071e8 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10c      	bne.n	800720a <xEventGroupWaitBits+0x7e>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	b672      	cpsid	i
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	b662      	cpsie	i
 8007204:	61bb      	str	r3, [r7, #24]
}
 8007206:	bf00      	nop
 8007208:	e7fe      	b.n	8007208 <xEventGroupWaitBits+0x7c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800720a:	f002 f92f 	bl	800946c <xTaskGetSchedulerState>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d102      	bne.n	800721a <xEventGroupWaitBits+0x8e>
 8007214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <xEventGroupWaitBits+0x92>
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <xEventGroupWaitBits+0x94>
 800721e:	2300      	movs	r3, #0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10c      	bne.n	800723e <xEventGroupWaitBits+0xb2>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	b672      	cpsid	i
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	b662      	cpsie	i
 8007238:	617b      	str	r3, [r7, #20]
}
 800723a:	bf00      	nop
 800723c:	e7fe      	b.n	800723c <xEventGroupWaitBits+0xb0>
	}
	#endif

	vTaskSuspendAll();
 800723e:	f001 fc6f 	bl	8008b20 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8007242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800724e:	f000 f902 	bl	8007456 <prvTestWaitCondition>
 8007252:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00e      	beq.n	8007278 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800725e:	2300      	movs	r3, #0
 8007260:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d028      	beq.n	80072ba <xEventGroupWaitBits+0x12e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	43db      	mvns	r3, r3
 8007270:	401a      	ands	r2, r3
 8007272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	e020      	b.n	80072ba <xEventGroupWaitBits+0x12e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800727a:	2b00      	cmp	r3, #0
 800727c:	d104      	bne.n	8007288 <xEventGroupWaitBits+0xfc>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007280:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8007282:	2301      	movs	r3, #1
 8007284:	633b      	str	r3, [r7, #48]	; 0x30
 8007286:	e018      	b.n	80072ba <xEventGroupWaitBits+0x12e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <xEventGroupWaitBits+0x10a>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007294:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d003      	beq.n	80072a4 <xEventGroupWaitBits+0x118>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072a2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80072a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a6:	1d18      	adds	r0, r3, #4
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ac:	4313      	orrs	r3, r2
 80072ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072b0:	4619      	mov	r1, r3
 80072b2:	f001 fe6d 	bl	8008f90 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80072ba:	f001 fc3f 	bl	8008b3c <xTaskResumeAll>
 80072be:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80072c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d031      	beq.n	800732a <xEventGroupWaitBits+0x19e>
	{
		if( xAlreadyYielded == pdFALSE )
 80072c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d107      	bne.n	80072dc <xEventGroupWaitBits+0x150>
		{
			portYIELD_WITHIN_API();
 80072cc:	4b19      	ldr	r3, [pc, #100]	; (8007334 <xEventGroupWaitBits+0x1a8>)
 80072ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80072dc:	f002 fa8c 	bl	80097f8 <uxTaskResetEventItemValue>
 80072e0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80072e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d11a      	bne.n	8007322 <xEventGroupWaitBits+0x196>
		{
			taskENTER_CRITICAL();
 80072ec:	f002 fc26 	bl	8009b3c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80072f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	68b9      	ldr	r1, [r7, #8]
 80072fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80072fc:	f000 f8ab 	bl	8007456 <prvTestWaitCondition>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d009      	beq.n	800731a <xEventGroupWaitBits+0x18e>
				{
					if( xClearOnExit != pdFALSE )
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d006      	beq.n	800731a <xEventGroupWaitBits+0x18e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800730c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	43db      	mvns	r3, r3
 8007314:	401a      	ands	r2, r3
 8007316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007318:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800731a:	2301      	movs	r3, #1
 800731c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800731e:	f002 fc41 	bl	8009ba4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007324:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007328:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800732a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800732c:	4618      	mov	r0, r3
 800732e:	3740      	adds	r7, #64	; 0x40
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	e000ed04 	.word	0xe000ed04

08007338 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b08e      	sub	sp, #56	; 0x38
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007342:	2300      	movs	r3, #0
 8007344:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800734a:	2300      	movs	r3, #0
 800734c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10c      	bne.n	800736e <xEventGroupSetBits+0x36>
	__asm volatile
 8007354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007358:	b672      	cpsid	i
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	b662      	cpsie	i
 8007368:	613b      	str	r3, [r7, #16]
}
 800736a:	bf00      	nop
 800736c:	e7fe      	b.n	800736c <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00c      	beq.n	8007392 <xEventGroupSetBits+0x5a>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	b672      	cpsid	i
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	b662      	cpsie	i
 800738c:	60fb      	str	r3, [r7, #12]
}
 800738e:	bf00      	nop
 8007390:	e7fe      	b.n	8007390 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007394:	3304      	adds	r3, #4
 8007396:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	3308      	adds	r3, #8
 800739c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800739e:	f001 fbbf 	bl	8008b20 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	431a      	orrs	r2, r3
 80073b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80073b4:	e03c      	b.n	8007430 <xEventGroupSetBits+0xf8>
		{
			pxNext = listGET_NEXT( pxListItem );
 80073b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80073bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80073c2:	2300      	movs	r3, #0
 80073c4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80073cc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073d4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d108      	bne.n	80073f2 <xEventGroupSetBits+0xba>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00b      	beq.n	8007404 <xEventGroupSetBits+0xcc>
				{
					xMatchFound = pdTRUE;
 80073ec:	2301      	movs	r3, #1
 80073ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073f0:	e008      	b.n	8007404 <xEventGroupSetBits+0xcc>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	4013      	ands	r3, r2
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d101      	bne.n	8007404 <xEventGroupSetBits+0xcc>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007400:	2301      	movs	r3, #1
 8007402:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d010      	beq.n	800742c <xEventGroupSetBits+0xf4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d003      	beq.n	800741c <xEventGroupSetBits+0xe4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	4313      	orrs	r3, r2
 800741a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007424:	4619      	mov	r1, r3
 8007426:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007428:	f001 fe56 	bl	80090d8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	429a      	cmp	r2, r3
 8007436:	d1be      	bne.n	80073b6 <xEventGroupSetBits+0x7e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	43db      	mvns	r3, r3
 8007440:	401a      	ands	r2, r3
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007446:	f001 fb79 	bl	8008b3c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	681b      	ldr	r3, [r3, #0]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3738      	adds	r7, #56	; 0x38
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007456:	b480      	push	{r7}
 8007458:	b087      	sub	sp, #28
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007462:	2300      	movs	r3, #0
 8007464:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d107      	bne.n	800747c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	4013      	ands	r3, r2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007476:	2301      	movs	r3, #1
 8007478:	617b      	str	r3, [r7, #20]
 800747a:	e007      	b.n	800748c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	4013      	ands	r3, r2
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	429a      	cmp	r2, r3
 8007486:	d101      	bne.n	800748c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007488:	2301      	movs	r3, #1
 800748a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800748c:	697b      	ldr	r3, [r7, #20]
}
 800748e:	4618      	mov	r0, r3
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f103 0208 	add.w	r2, r3, #8
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074b2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f103 0208 	add.w	r2, r3, #8
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f103 0208 	add.w	r2, r3, #8
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	689a      	ldr	r2, [r3, #8]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	601a      	str	r2, [r3, #0]
}
 8007530:	bf00      	nop
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007552:	d103      	bne.n	800755c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	e00c      	b.n	8007576 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3308      	adds	r3, #8
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	e002      	b.n	800756a <vListInsert+0x2e>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	429a      	cmp	r2, r3
 8007574:	d2f6      	bcs.n	8007564 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	601a      	str	r2, [r3, #0]
}
 80075a2:	bf00      	nop
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80075ae:	b480      	push	{r7}
 80075b0:	b085      	sub	sp, #20
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	6892      	ldr	r2, [r2, #8]
 80075c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6852      	ldr	r2, [r2, #4]
 80075ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d103      	bne.n	80075e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	1e5a      	subs	r2, r3, #1
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
	...

08007604 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10c      	bne.n	8007632 <xQueueGenericReset+0x2e>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761c:	b672      	cpsid	i
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	b662      	cpsie	i
 800762c:	60bb      	str	r3, [r7, #8]
}
 800762e:	bf00      	nop
 8007630:	e7fe      	b.n	8007630 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007632:	f002 fa83 	bl	8009b3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800763e:	68f9      	ldr	r1, [r7, #12]
 8007640:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007642:	fb01 f303 	mul.w	r3, r1, r3
 8007646:	441a      	add	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007662:	3b01      	subs	r3, #1
 8007664:	68f9      	ldr	r1, [r7, #12]
 8007666:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007668:	fb01 f303 	mul.w	r3, r1, r3
 800766c:	441a      	add	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	22ff      	movs	r2, #255	; 0xff
 8007676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	22ff      	movs	r2, #255	; 0xff
 800767e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d114      	bne.n	80076b2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d01a      	beq.n	80076c6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3310      	adds	r3, #16
 8007694:	4618      	mov	r0, r3
 8007696:	f001 fcbb 	bl	8009010 <xTaskRemoveFromEventList>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d012      	beq.n	80076c6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80076a0:	4b0c      	ldr	r3, [pc, #48]	; (80076d4 <xQueueGenericReset+0xd0>)
 80076a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a6:	601a      	str	r2, [r3, #0]
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	e009      	b.n	80076c6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3310      	adds	r3, #16
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff feef 	bl	800749a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3324      	adds	r3, #36	; 0x24
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7ff feea 	bl	800749a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80076c6:	f002 fa6d 	bl	8009ba4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80076ca:	2301      	movs	r3, #1
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	e000ed04 	.word	0xe000ed04

080076d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08e      	sub	sp, #56	; 0x38
 80076dc:	af02      	add	r7, sp, #8
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
 80076e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10c      	bne.n	8007706 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	b672      	cpsid	i
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	b662      	cpsie	i
 8007700:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10c      	bne.n	8007726 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	b672      	cpsid	i
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	b662      	cpsie	i
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007722:	bf00      	nop
 8007724:	e7fe      	b.n	8007724 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <xQueueGenericCreateStatic+0x5a>
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <xQueueGenericCreateStatic+0x5e>
 8007732:	2301      	movs	r3, #1
 8007734:	e000      	b.n	8007738 <xQueueGenericCreateStatic+0x60>
 8007736:	2300      	movs	r3, #0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10c      	bne.n	8007756 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	b672      	cpsid	i
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	b662      	cpsie	i
 8007750:	623b      	str	r3, [r7, #32]
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d102      	bne.n	8007762 <xQueueGenericCreateStatic+0x8a>
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <xQueueGenericCreateStatic+0x8e>
 8007762:	2301      	movs	r3, #1
 8007764:	e000      	b.n	8007768 <xQueueGenericCreateStatic+0x90>
 8007766:	2300      	movs	r3, #0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10c      	bne.n	8007786 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	b672      	cpsid	i
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	b662      	cpsie	i
 8007780:	61fb      	str	r3, [r7, #28]
}
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007786:	2348      	movs	r3, #72	; 0x48
 8007788:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b48      	cmp	r3, #72	; 0x48
 800778e:	d00c      	beq.n	80077aa <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007794:	b672      	cpsid	i
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	b662      	cpsie	i
 80077a4:	61bb      	str	r3, [r7, #24]
}
 80077a6:	bf00      	nop
 80077a8:	e7fe      	b.n	80077a8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80077aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80077b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00d      	beq.n	80077d2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	4613      	mov	r3, r2
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	68b9      	ldr	r1, [r7, #8]
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f847 	bl	8007860 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3730      	adds	r7, #48	; 0x30
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08a      	sub	sp, #40	; 0x28
 80077e0:	af02      	add	r7, sp, #8
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10c      	bne.n	800780a <xQueueGenericCreate+0x2e>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	b672      	cpsid	i
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	b662      	cpsie	i
 8007804:	613b      	str	r3, [r7, #16]
}
 8007806:	bf00      	nop
 8007808:	e7fe      	b.n	8007808 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d102      	bne.n	8007816 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007810:	2300      	movs	r3, #0
 8007812:	61fb      	str	r3, [r7, #28]
 8007814:	e004      	b.n	8007820 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	fb02 f303 	mul.w	r3, r2, r3
 800781e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	3348      	adds	r3, #72	; 0x48
 8007824:	4618      	mov	r0, r3
 8007826:	f002 fab5 	bl	8009d94 <pvPortMalloc>
 800782a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d011      	beq.n	8007856 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	3348      	adds	r3, #72	; 0x48
 800783a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007844:	79fa      	ldrb	r2, [r7, #7]
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	4613      	mov	r3, r2
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	68b9      	ldr	r1, [r7, #8]
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f805 	bl	8007860 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007856:	69bb      	ldr	r3, [r7, #24]
	}
 8007858:	4618      	mov	r0, r3
 800785a:	3720      	adds	r7, #32
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
 800786c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d103      	bne.n	800787c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	69ba      	ldr	r2, [r7, #24]
 8007878:	601a      	str	r2, [r3, #0]
 800787a:	e002      	b.n	8007882 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800788e:	2101      	movs	r1, #1
 8007890:	69b8      	ldr	r0, [r7, #24]
 8007892:	f7ff feb7 	bl	8007604 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007896:	bf00      	nop
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b082      	sub	sp, #8
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00e      	beq.n	80078ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80078be:	2300      	movs	r3, #0
 80078c0:	2200      	movs	r2, #0
 80078c2:	2100      	movs	r1, #0
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f837 	bl	8007938 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b086      	sub	sp, #24
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	4603      	mov	r3, r0
 80078da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80078dc:	2301      	movs	r3, #1
 80078de:	617b      	str	r3, [r7, #20]
 80078e0:	2300      	movs	r3, #0
 80078e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80078e4:	79fb      	ldrb	r3, [r7, #7]
 80078e6:	461a      	mov	r2, r3
 80078e8:	6939      	ldr	r1, [r7, #16]
 80078ea:	6978      	ldr	r0, [r7, #20]
 80078ec:	f7ff ff76 	bl	80077dc <xQueueGenericCreate>
 80078f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f7ff ffd3 	bl	800789e <prvInitialiseMutex>

		return xNewQueue;
 80078f8:	68fb      	ldr	r3, [r7, #12]
	}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007902:	b580      	push	{r7, lr}
 8007904:	b088      	sub	sp, #32
 8007906:	af02      	add	r7, sp, #8
 8007908:	4603      	mov	r3, r0
 800790a:	6039      	str	r1, [r7, #0]
 800790c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800790e:	2301      	movs	r3, #1
 8007910:	617b      	str	r3, [r7, #20]
 8007912:	2300      	movs	r3, #0
 8007914:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007916:	79fb      	ldrb	r3, [r7, #7]
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2200      	movs	r2, #0
 800791e:	6939      	ldr	r1, [r7, #16]
 8007920:	6978      	ldr	r0, [r7, #20]
 8007922:	f7ff fed9 	bl	80076d8 <xQueueGenericCreateStatic>
 8007926:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f7ff ffb8 	bl	800789e <prvInitialiseMutex>

		return xNewQueue;
 800792e:	68fb      	ldr	r3, [r7, #12]
	}
 8007930:	4618      	mov	r0, r3
 8007932:	3718      	adds	r7, #24
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b08e      	sub	sp, #56	; 0x38
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
 8007944:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007946:	2300      	movs	r3, #0
 8007948:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10c      	bne.n	800796e <xQueueGenericSend+0x36>
	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	b672      	cpsid	i
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	b662      	cpsie	i
 8007968:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d103      	bne.n	800797c <xQueueGenericSend+0x44>
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <xQueueGenericSend+0x48>
 800797c:	2301      	movs	r3, #1
 800797e:	e000      	b.n	8007982 <xQueueGenericSend+0x4a>
 8007980:	2300      	movs	r3, #0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10c      	bne.n	80079a0 <xQueueGenericSend+0x68>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	b672      	cpsid	i
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	b662      	cpsie	i
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800799c:	bf00      	nop
 800799e:	e7fe      	b.n	800799e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d103      	bne.n	80079ae <xQueueGenericSend+0x76>
 80079a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d101      	bne.n	80079b2 <xQueueGenericSend+0x7a>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <xQueueGenericSend+0x7c>
 80079b2:	2300      	movs	r3, #0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10c      	bne.n	80079d2 <xQueueGenericSend+0x9a>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079bc:	b672      	cpsid	i
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	b662      	cpsie	i
 80079cc:	623b      	str	r3, [r7, #32]
}
 80079ce:	bf00      	nop
 80079d0:	e7fe      	b.n	80079d0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079d2:	f001 fd4b 	bl	800946c <xTaskGetSchedulerState>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d102      	bne.n	80079e2 <xQueueGenericSend+0xaa>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <xQueueGenericSend+0xae>
 80079e2:	2301      	movs	r3, #1
 80079e4:	e000      	b.n	80079e8 <xQueueGenericSend+0xb0>
 80079e6:	2300      	movs	r3, #0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10c      	bne.n	8007a06 <xQueueGenericSend+0xce>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	b672      	cpsid	i
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	b662      	cpsie	i
 8007a00:	61fb      	str	r3, [r7, #28]
}
 8007a02:	bf00      	nop
 8007a04:	e7fe      	b.n	8007a04 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a06:	f002 f899 	bl	8009b3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d302      	bcc.n	8007a1c <xQueueGenericSend+0xe4>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d129      	bne.n	8007a70 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	68b9      	ldr	r1, [r7, #8]
 8007a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a22:	f000 fc7d 	bl	8008320 <prvCopyDataToQueue>
 8007a26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d010      	beq.n	8007a52 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	3324      	adds	r3, #36	; 0x24
 8007a34:	4618      	mov	r0, r3
 8007a36:	f001 faeb 	bl	8009010 <xTaskRemoveFromEventList>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d013      	beq.n	8007a68 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a40:	4b3f      	ldr	r3, [pc, #252]	; (8007b40 <xQueueGenericSend+0x208>)
 8007a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a46:	601a      	str	r2, [r3, #0]
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	e00a      	b.n	8007a68 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d007      	beq.n	8007a68 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a58:	4b39      	ldr	r3, [pc, #228]	; (8007b40 <xQueueGenericSend+0x208>)
 8007a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a68:	f002 f89c 	bl	8009ba4 <vPortExitCritical>
				return pdPASS;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e063      	b.n	8007b38 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d103      	bne.n	8007a7e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a76:	f002 f895 	bl	8009ba4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e05c      	b.n	8007b38 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d106      	bne.n	8007a92 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a84:	f107 0314 	add.w	r3, r7, #20
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 fb8b 	bl	80091a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a92:	f002 f887 	bl	8009ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a96:	f001 f843 	bl	8008b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a9a:	f002 f84f 	bl	8009b3c <vPortEnterCritical>
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aa4:	b25b      	sxtb	r3, r3
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aaa:	d103      	bne.n	8007ab4 <xQueueGenericSend+0x17c>
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aba:	b25b      	sxtb	r3, r3
 8007abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ac0:	d103      	bne.n	8007aca <xQueueGenericSend+0x192>
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007aca:	f002 f86b 	bl	8009ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ace:	1d3a      	adds	r2, r7, #4
 8007ad0:	f107 0314 	add.w	r3, r7, #20
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f001 fb7a 	bl	80091d0 <xTaskCheckForTimeOut>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d124      	bne.n	8007b2c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ae2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ae4:	f000 fd14 	bl	8008510 <prvIsQueueFull>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d018      	beq.n	8007b20 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	3310      	adds	r3, #16
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	4611      	mov	r1, r2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f001 fa24 	bl	8008f44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007afe:	f000 fc9f 	bl	8008440 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b02:	f001 f81b 	bl	8008b3c <xTaskResumeAll>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f47f af7c 	bne.w	8007a06 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007b0e:	4b0c      	ldr	r3, [pc, #48]	; (8007b40 <xQueueGenericSend+0x208>)
 8007b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	e772      	b.n	8007a06 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b22:	f000 fc8d 	bl	8008440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b26:	f001 f809 	bl	8008b3c <xTaskResumeAll>
 8007b2a:	e76c      	b.n	8007a06 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b2e:	f000 fc87 	bl	8008440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b32:	f001 f803 	bl	8008b3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3738      	adds	r7, #56	; 0x38
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	e000ed04 	.word	0xe000ed04

08007b44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08e      	sub	sp, #56	; 0x38
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10c      	bne.n	8007b76 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	b672      	cpsid	i
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	b662      	cpsie	i
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b72:	bf00      	nop
 8007b74:	e7fe      	b.n	8007b74 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d103      	bne.n	8007b84 <xQueueGenericSendFromISR+0x40>
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <xQueueGenericSendFromISR+0x44>
 8007b84:	2301      	movs	r3, #1
 8007b86:	e000      	b.n	8007b8a <xQueueGenericSendFromISR+0x46>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10c      	bne.n	8007ba8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	b672      	cpsid	i
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	b662      	cpsie	i
 8007ba2:	623b      	str	r3, [r7, #32]
}
 8007ba4:	bf00      	nop
 8007ba6:	e7fe      	b.n	8007ba6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d103      	bne.n	8007bb6 <xQueueGenericSendFromISR+0x72>
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d101      	bne.n	8007bba <xQueueGenericSendFromISR+0x76>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e000      	b.n	8007bbc <xQueueGenericSendFromISR+0x78>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10c      	bne.n	8007bda <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	b672      	cpsid	i
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	b662      	cpsie	i
 8007bd4:	61fb      	str	r3, [r7, #28]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bda:	f002 f897 	bl	8009d0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007bde:	f3ef 8211 	mrs	r2, BASEPRI
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	b672      	cpsid	i
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	b662      	cpsie	i
 8007bf6:	61ba      	str	r2, [r7, #24]
 8007bf8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007bfa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d302      	bcc.n	8007c10 <xQueueGenericSendFromISR+0xcc>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d12c      	bne.n	8007c6a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c20:	f000 fb7e 	bl	8008320 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c24:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c2c:	d112      	bne.n	8007c54 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d016      	beq.n	8007c64 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	3324      	adds	r3, #36	; 0x24
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 f9e8 	bl	8009010 <xTaskRemoveFromEventList>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00e      	beq.n	8007c64 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00b      	beq.n	8007c64 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	e007      	b.n	8007c64 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c58:	3301      	adds	r3, #1
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	b25a      	sxtb	r2, r3
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c64:	2301      	movs	r3, #1
 8007c66:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007c68:	e001      	b.n	8007c6e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c70:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3738      	adds	r7, #56	; 0x38
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b08e      	sub	sp, #56	; 0x38
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10c      	bne.n	8007cb2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	b672      	cpsid	i
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	b662      	cpsie	i
 8007cac:	623b      	str	r3, [r7, #32]
}
 8007cae:	bf00      	nop
 8007cb0:	e7fe      	b.n	8007cb0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00c      	beq.n	8007cd4 <xQueueGiveFromISR+0x50>
	__asm volatile
 8007cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbe:	b672      	cpsid	i
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	b662      	cpsie	i
 8007cce:	61fb      	str	r3, [r7, #28]
}
 8007cd0:	bf00      	nop
 8007cd2:	e7fe      	b.n	8007cd2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d103      	bne.n	8007ce4 <xQueueGiveFromISR+0x60>
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <xQueueGiveFromISR+0x64>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e000      	b.n	8007cea <xQueueGiveFromISR+0x66>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10c      	bne.n	8007d08 <xQueueGiveFromISR+0x84>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	b672      	cpsid	i
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	b662      	cpsie	i
 8007d02:	61bb      	str	r3, [r7, #24]
}
 8007d04:	bf00      	nop
 8007d06:	e7fe      	b.n	8007d06 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d08:	f002 f800 	bl	8009d0c <vPortValidateInterruptPriority>
	__asm volatile
 8007d0c:	f3ef 8211 	mrs	r2, BASEPRI
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	b672      	cpsid	i
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	b662      	cpsie	i
 8007d24:	617a      	str	r2, [r7, #20]
 8007d26:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007d28:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d30:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d22b      	bcs.n	8007d94 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d56:	d112      	bne.n	8007d7e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d016      	beq.n	8007d8e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	3324      	adds	r3, #36	; 0x24
 8007d64:	4618      	mov	r0, r3
 8007d66:	f001 f953 	bl	8009010 <xTaskRemoveFromEventList>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00e      	beq.n	8007d8e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00b      	beq.n	8007d8e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	e007      	b.n	8007d8e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d82:	3301      	adds	r3, #1
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	b25a      	sxtb	r2, r3
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	637b      	str	r3, [r7, #52]	; 0x34
 8007d92:	e001      	b.n	8007d98 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d94:	2300      	movs	r3, #0
 8007d96:	637b      	str	r3, [r7, #52]	; 0x34
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f383 8811 	msr	BASEPRI, r3
}
 8007da2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3738      	adds	r7, #56	; 0x38
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08c      	sub	sp, #48	; 0x30
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10c      	bne.n	8007de4 <xQueueReceive+0x34>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	b672      	cpsid	i
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	b662      	cpsie	i
 8007dde:	623b      	str	r3, [r7, #32]
}
 8007de0:	bf00      	nop
 8007de2:	e7fe      	b.n	8007de2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d103      	bne.n	8007df2 <xQueueReceive+0x42>
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <xQueueReceive+0x46>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e000      	b.n	8007df8 <xQueueReceive+0x48>
 8007df6:	2300      	movs	r3, #0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10c      	bne.n	8007e16 <xQueueReceive+0x66>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	b672      	cpsid	i
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	b662      	cpsie	i
 8007e10:	61fb      	str	r3, [r7, #28]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e16:	f001 fb29 	bl	800946c <xTaskGetSchedulerState>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d102      	bne.n	8007e26 <xQueueReceive+0x76>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <xQueueReceive+0x7a>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <xQueueReceive+0x7c>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10c      	bne.n	8007e4a <xQueueReceive+0x9a>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	b672      	cpsid	i
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	b662      	cpsie	i
 8007e44:	61bb      	str	r3, [r7, #24]
}
 8007e46:	bf00      	nop
 8007e48:	e7fe      	b.n	8007e48 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e4a:	f001 fe77 	bl	8009b3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d01f      	beq.n	8007e9a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e5e:	f000 fac9 	bl	80083f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	1e5a      	subs	r2, r3, #1
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00f      	beq.n	8007e92 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	3310      	adds	r3, #16
 8007e76:	4618      	mov	r0, r3
 8007e78:	f001 f8ca 	bl	8009010 <xTaskRemoveFromEventList>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d007      	beq.n	8007e92 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e82:	4b3d      	ldr	r3, [pc, #244]	; (8007f78 <xQueueReceive+0x1c8>)
 8007e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e92:	f001 fe87 	bl	8009ba4 <vPortExitCritical>
				return pdPASS;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e069      	b.n	8007f6e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d103      	bne.n	8007ea8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ea0:	f001 fe80 	bl	8009ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e062      	b.n	8007f6e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d106      	bne.n	8007ebc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007eae:	f107 0310 	add.w	r3, r7, #16
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f001 f976 	bl	80091a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ebc:	f001 fe72 	bl	8009ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ec0:	f000 fe2e 	bl	8008b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ec4:	f001 fe3a 	bl	8009b3c <vPortEnterCritical>
 8007ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ece:	b25b      	sxtb	r3, r3
 8007ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ed4:	d103      	bne.n	8007ede <xQueueReceive+0x12e>
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ee4:	b25b      	sxtb	r3, r3
 8007ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eea:	d103      	bne.n	8007ef4 <xQueueReceive+0x144>
 8007eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ef4:	f001 fe56 	bl	8009ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ef8:	1d3a      	adds	r2, r7, #4
 8007efa:	f107 0310 	add.w	r3, r7, #16
 8007efe:	4611      	mov	r1, r2
 8007f00:	4618      	mov	r0, r3
 8007f02:	f001 f965 	bl	80091d0 <xTaskCheckForTimeOut>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d123      	bne.n	8007f54 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f0e:	f000 fae9 	bl	80084e4 <prvIsQueueEmpty>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d017      	beq.n	8007f48 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	3324      	adds	r3, #36	; 0x24
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	4611      	mov	r1, r2
 8007f20:	4618      	mov	r0, r3
 8007f22:	f001 f80f 	bl	8008f44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f28:	f000 fa8a 	bl	8008440 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f2c:	f000 fe06 	bl	8008b3c <xTaskResumeAll>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d189      	bne.n	8007e4a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007f36:	4b10      	ldr	r3, [pc, #64]	; (8007f78 <xQueueReceive+0x1c8>)
 8007f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	e780      	b.n	8007e4a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f4a:	f000 fa79 	bl	8008440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f4e:	f000 fdf5 	bl	8008b3c <xTaskResumeAll>
 8007f52:	e77a      	b.n	8007e4a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f56:	f000 fa73 	bl	8008440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f5a:	f000 fdef 	bl	8008b3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f60:	f000 fac0 	bl	80084e4 <prvIsQueueEmpty>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f43f af6f 	beq.w	8007e4a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3730      	adds	r7, #48	; 0x30
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08e      	sub	sp, #56	; 0x38
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f86:	2300      	movs	r3, #0
 8007f88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10c      	bne.n	8007fb2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9c:	b672      	cpsid	i
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	b662      	cpsie	i
 8007fac:	623b      	str	r3, [r7, #32]
}
 8007fae:	bf00      	nop
 8007fb0:	e7fe      	b.n	8007fb0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00c      	beq.n	8007fd4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	b672      	cpsid	i
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	b662      	cpsie	i
 8007fce:	61fb      	str	r3, [r7, #28]
}
 8007fd0:	bf00      	nop
 8007fd2:	e7fe      	b.n	8007fd2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fd4:	f001 fa4a 	bl	800946c <xTaskGetSchedulerState>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d102      	bne.n	8007fe4 <xQueueSemaphoreTake+0x68>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <xQueueSemaphoreTake+0x6c>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e000      	b.n	8007fea <xQueueSemaphoreTake+0x6e>
 8007fe8:	2300      	movs	r3, #0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10c      	bne.n	8008008 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	b672      	cpsid	i
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	b662      	cpsie	i
 8008002:	61bb      	str	r3, [r7, #24]
}
 8008004:	bf00      	nop
 8008006:	e7fe      	b.n	8008006 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008008:	f001 fd98 	bl	8009b3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800800c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008010:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	2b00      	cmp	r3, #0
 8008016:	d024      	beq.n	8008062 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	1e5a      	subs	r2, r3, #1
 800801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d104      	bne.n	8008032 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008028:	f001 fbfe 	bl	8009828 <pvTaskIncrementMutexHeldCount>
 800802c:	4602      	mov	r2, r0
 800802e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008030:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00f      	beq.n	800805a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800803a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803c:	3310      	adds	r3, #16
 800803e:	4618      	mov	r0, r3
 8008040:	f000 ffe6 	bl	8009010 <xTaskRemoveFromEventList>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d007      	beq.n	800805a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800804a:	4b55      	ldr	r3, [pc, #340]	; (80081a0 <xQueueSemaphoreTake+0x224>)
 800804c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800805a:	f001 fda3 	bl	8009ba4 <vPortExitCritical>
				return pdPASS;
 800805e:	2301      	movs	r3, #1
 8008060:	e099      	b.n	8008196 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d113      	bne.n	8008090 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00c      	beq.n	8008088 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008072:	b672      	cpsid	i
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	b662      	cpsie	i
 8008082:	617b      	str	r3, [r7, #20]
}
 8008084:	bf00      	nop
 8008086:	e7fe      	b.n	8008086 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008088:	f001 fd8c 	bl	8009ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800808c:	2300      	movs	r3, #0
 800808e:	e082      	b.n	8008196 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008096:	f107 030c 	add.w	r3, r7, #12
 800809a:	4618      	mov	r0, r3
 800809c:	f001 f882 	bl	80091a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080a0:	2301      	movs	r3, #1
 80080a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080a4:	f001 fd7e 	bl	8009ba4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080a8:	f000 fd3a 	bl	8008b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080ac:	f001 fd46 	bl	8009b3c <vPortEnterCritical>
 80080b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080b6:	b25b      	sxtb	r3, r3
 80080b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080bc:	d103      	bne.n	80080c6 <xQueueSemaphoreTake+0x14a>
 80080be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080cc:	b25b      	sxtb	r3, r3
 80080ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080d2:	d103      	bne.n	80080dc <xQueueSemaphoreTake+0x160>
 80080d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080dc:	f001 fd62 	bl	8009ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080e0:	463a      	mov	r2, r7
 80080e2:	f107 030c 	add.w	r3, r7, #12
 80080e6:	4611      	mov	r1, r2
 80080e8:	4618      	mov	r0, r3
 80080ea:	f001 f871 	bl	80091d0 <xTaskCheckForTimeOut>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d132      	bne.n	800815a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080f6:	f000 f9f5 	bl	80084e4 <prvIsQueueEmpty>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d026      	beq.n	800814e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d109      	bne.n	800811c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8008108:	f001 fd18 	bl	8009b3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	4618      	mov	r0, r3
 8008112:	f001 f9c9 	bl	80094a8 <xTaskPriorityInherit>
 8008116:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008118:	f001 fd44 	bl	8009ba4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800811c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811e:	3324      	adds	r3, #36	; 0x24
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	4611      	mov	r1, r2
 8008124:	4618      	mov	r0, r3
 8008126:	f000 ff0d 	bl	8008f44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800812a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800812c:	f000 f988 	bl	8008440 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008130:	f000 fd04 	bl	8008b3c <xTaskResumeAll>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	f47f af66 	bne.w	8008008 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800813c:	4b18      	ldr	r3, [pc, #96]	; (80081a0 <xQueueSemaphoreTake+0x224>)
 800813e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	e75c      	b.n	8008008 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800814e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008150:	f000 f976 	bl	8008440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008154:	f000 fcf2 	bl	8008b3c <xTaskResumeAll>
 8008158:	e756      	b.n	8008008 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800815a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800815c:	f000 f970 	bl	8008440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008160:	f000 fcec 	bl	8008b3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008164:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008166:	f000 f9bd 	bl	80084e4 <prvIsQueueEmpty>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	f43f af4b 	beq.w	8008008 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00d      	beq.n	8008194 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8008178:	f001 fce0 	bl	8009b3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800817c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800817e:	f000 f8b7 	bl	80082f0 <prvGetDisinheritPriorityAfterTimeout>
 8008182:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800818a:	4618      	mov	r0, r3
 800818c:	f001 fa96 	bl	80096bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008190:	f001 fd08 	bl	8009ba4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008194:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008196:	4618      	mov	r0, r3
 8008198:	3738      	adds	r7, #56	; 0x38
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	e000ed04 	.word	0xe000ed04

080081a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08e      	sub	sp, #56	; 0x38
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10c      	bne.n	80081d4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081be:	b672      	cpsid	i
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	b662      	cpsie	i
 80081ce:	623b      	str	r3, [r7, #32]
}
 80081d0:	bf00      	nop
 80081d2:	e7fe      	b.n	80081d2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d103      	bne.n	80081e2 <xQueueReceiveFromISR+0x3e>
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <xQueueReceiveFromISR+0x42>
 80081e2:	2301      	movs	r3, #1
 80081e4:	e000      	b.n	80081e8 <xQueueReceiveFromISR+0x44>
 80081e6:	2300      	movs	r3, #0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10c      	bne.n	8008206 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	b672      	cpsid	i
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	b662      	cpsie	i
 8008200:	61fb      	str	r3, [r7, #28]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008206:	f001 fd81 	bl	8009d0c <vPortValidateInterruptPriority>
	__asm volatile
 800820a:	f3ef 8211 	mrs	r2, BASEPRI
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	b672      	cpsid	i
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	b662      	cpsie	i
 8008222:	61ba      	str	r2, [r7, #24]
 8008224:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008226:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008228:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	2b00      	cmp	r3, #0
 8008234:	d02f      	beq.n	8008296 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800823c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008240:	68b9      	ldr	r1, [r7, #8]
 8008242:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008244:	f000 f8d6 	bl	80083f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	1e5a      	subs	r2, r3, #1
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008250:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008258:	d112      	bne.n	8008280 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d016      	beq.n	8008290 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	3310      	adds	r3, #16
 8008266:	4618      	mov	r0, r3
 8008268:	f000 fed2 	bl	8009010 <xTaskRemoveFromEventList>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00e      	beq.n	8008290 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00b      	beq.n	8008290 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	e007      	b.n	8008290 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008284:	3301      	adds	r3, #1
 8008286:	b2db      	uxtb	r3, r3
 8008288:	b25a      	sxtb	r2, r3
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008290:	2301      	movs	r3, #1
 8008292:	637b      	str	r3, [r7, #52]	; 0x34
 8008294:	e001      	b.n	800829a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8008296:	2300      	movs	r3, #0
 8008298:	637b      	str	r3, [r7, #52]	; 0x34
 800829a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f383 8811 	msr	BASEPRI, r3
}
 80082a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3738      	adds	r7, #56	; 0x38
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10c      	bne.n	80082d8 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	b672      	cpsid	i
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	b662      	cpsie	i
 80082d2:	60bb      	str	r3, [r7, #8]
}
 80082d4:	bf00      	nop
 80082d6:	e7fe      	b.n	80082d6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80082d8:	f001 fc30 	bl	8009b3c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80082e2:	f001 fc5f 	bl	8009ba4 <vPortExitCritical>

	return uxReturn;
 80082e6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d006      	beq.n	800830e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f1c3 0307 	rsb	r3, r3, #7
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	e001      	b.n	8008312 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008312:	68fb      	ldr	r3, [r7, #12]
	}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800832c:	2300      	movs	r3, #0
 800832e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10d      	bne.n	800835a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d14d      	bne.n	80083e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	4618      	mov	r0, r3
 800834c:	f001 f92c 	bl	80095a8 <xTaskPriorityDisinherit>
 8008350:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	609a      	str	r2, [r3, #8]
 8008358:	e043      	b.n	80083e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d119      	bne.n	8008394 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6858      	ldr	r0, [r3, #4]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008368:	461a      	mov	r2, r3
 800836a:	68b9      	ldr	r1, [r7, #8]
 800836c:	f00c fc91 	bl	8014c92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008378:	441a      	add	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	429a      	cmp	r2, r3
 8008388:	d32b      	bcc.n	80083e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	605a      	str	r2, [r3, #4]
 8008392:	e026      	b.n	80083e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	68d8      	ldr	r0, [r3, #12]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839c:	461a      	mov	r2, r3
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	f00c fc77 	bl	8014c92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ac:	425b      	negs	r3, r3
 80083ae:	441a      	add	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	68da      	ldr	r2, [r3, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d207      	bcs.n	80083d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c8:	425b      	negs	r3, r3
 80083ca:	441a      	add	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d105      	bne.n	80083e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	3b01      	subs	r3, #1
 80083e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	1c5a      	adds	r2, r3, #1
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80083ea:	697b      	ldr	r3, [r7, #20]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3718      	adds	r7, #24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	2b00      	cmp	r3, #0
 8008404:	d018      	beq.n	8008438 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68da      	ldr	r2, [r3, #12]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840e:	441a      	add	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68da      	ldr	r2, [r3, #12]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	429a      	cmp	r2, r3
 800841e:	d303      	bcc.n	8008428 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	68d9      	ldr	r1, [r3, #12]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008430:	461a      	mov	r2, r3
 8008432:	6838      	ldr	r0, [r7, #0]
 8008434:	f00c fc2d 	bl	8014c92 <memcpy>
	}
}
 8008438:	bf00      	nop
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008448:	f001 fb78 	bl	8009b3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008452:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008454:	e011      	b.n	800847a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	2b00      	cmp	r3, #0
 800845c:	d012      	beq.n	8008484 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	3324      	adds	r3, #36	; 0x24
 8008462:	4618      	mov	r0, r3
 8008464:	f000 fdd4 	bl	8009010 <xTaskRemoveFromEventList>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800846e:	f000 ff15 	bl	800929c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	3b01      	subs	r3, #1
 8008476:	b2db      	uxtb	r3, r3
 8008478:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800847a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800847e:	2b00      	cmp	r3, #0
 8008480:	dce9      	bgt.n	8008456 <prvUnlockQueue+0x16>
 8008482:	e000      	b.n	8008486 <prvUnlockQueue+0x46>
					break;
 8008484:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	22ff      	movs	r2, #255	; 0xff
 800848a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800848e:	f001 fb89 	bl	8009ba4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008492:	f001 fb53 	bl	8009b3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800849c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800849e:	e011      	b.n	80084c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d012      	beq.n	80084ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3310      	adds	r3, #16
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 fdaf 	bl	8009010 <xTaskRemoveFromEventList>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80084b8:	f000 fef0 	bl	800929c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
 80084be:	3b01      	subs	r3, #1
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	dce9      	bgt.n	80084a0 <prvUnlockQueue+0x60>
 80084cc:	e000      	b.n	80084d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80084ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	22ff      	movs	r2, #255	; 0xff
 80084d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80084d8:	f001 fb64 	bl	8009ba4 <vPortExitCritical>
}
 80084dc:	bf00      	nop
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084ec:	f001 fb26 	bl	8009b3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d102      	bne.n	80084fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80084f8:	2301      	movs	r3, #1
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	e001      	b.n	8008502 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80084fe:	2300      	movs	r3, #0
 8008500:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008502:	f001 fb4f 	bl	8009ba4 <vPortExitCritical>

	return xReturn;
 8008506:	68fb      	ldr	r3, [r7, #12]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008518:	f001 fb10 	bl	8009b3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008524:	429a      	cmp	r2, r3
 8008526:	d102      	bne.n	800852e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008528:	2301      	movs	r3, #1
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	e001      	b.n	8008532 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800852e:	2300      	movs	r3, #0
 8008530:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008532:	f001 fb37 	bl	8009ba4 <vPortExitCritical>

	return xReturn;
 8008536:	68fb      	ldr	r3, [r7, #12]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008540:	b580      	push	{r7, lr}
 8008542:	b08e      	sub	sp, #56	; 0x38
 8008544:	af04      	add	r7, sp, #16
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
 800854c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800854e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10c      	bne.n	800856e <xTaskCreateStatic+0x2e>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008558:	b672      	cpsid	i
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	b662      	cpsie	i
 8008568:	623b      	str	r3, [r7, #32]
}
 800856a:	bf00      	nop
 800856c:	e7fe      	b.n	800856c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800856e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10c      	bne.n	800858e <xTaskCreateStatic+0x4e>
	__asm volatile
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	b672      	cpsid	i
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	b662      	cpsie	i
 8008588:	61fb      	str	r3, [r7, #28]
}
 800858a:	bf00      	nop
 800858c:	e7fe      	b.n	800858c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800858e:	23b4      	movs	r3, #180	; 0xb4
 8008590:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	2bb4      	cmp	r3, #180	; 0xb4
 8008596:	d00c      	beq.n	80085b2 <xTaskCreateStatic+0x72>
	__asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859c:	b672      	cpsid	i
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	b662      	cpsie	i
 80085ac:	61bb      	str	r3, [r7, #24]
}
 80085ae:	bf00      	nop
 80085b0:	e7fe      	b.n	80085b0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80085b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80085b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d01e      	beq.n	80085f8 <xTaskCreateStatic+0xb8>
 80085ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01b      	beq.n	80085f8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	2202      	movs	r2, #2
 80085ce:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085d2:	2300      	movs	r3, #0
 80085d4:	9303      	str	r3, [sp, #12]
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	9302      	str	r3, [sp, #8]
 80085da:	f107 0314 	add.w	r3, r7, #20
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	68b9      	ldr	r1, [r7, #8]
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 f850 	bl	8008690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085f2:	f000 f8f5 	bl	80087e0 <prvAddNewTaskToReadyList>
 80085f6:	e001      	b.n	80085fc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80085f8:	2300      	movs	r3, #0
 80085fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80085fc:	697b      	ldr	r3, [r7, #20]
	}
 80085fe:	4618      	mov	r0, r3
 8008600:	3728      	adds	r7, #40	; 0x28
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008606:	b580      	push	{r7, lr}
 8008608:	b08c      	sub	sp, #48	; 0x30
 800860a:	af04      	add	r7, sp, #16
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	603b      	str	r3, [r7, #0]
 8008612:	4613      	mov	r3, r2
 8008614:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008616:	88fb      	ldrh	r3, [r7, #6]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4618      	mov	r0, r3
 800861c:	f001 fbba 	bl	8009d94 <pvPortMalloc>
 8008620:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00e      	beq.n	8008646 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008628:	20b4      	movs	r0, #180	; 0xb4
 800862a:	f001 fbb3 	bl	8009d94 <pvPortMalloc>
 800862e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	631a      	str	r2, [r3, #48]	; 0x30
 800863c:	e005      	b.n	800864a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800863e:	6978      	ldr	r0, [r7, #20]
 8008640:	f001 fc72 	bl	8009f28 <vPortFree>
 8008644:	e001      	b.n	800864a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008646:	2300      	movs	r3, #0
 8008648:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d017      	beq.n	8008680 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008658:	88fa      	ldrh	r2, [r7, #6]
 800865a:	2300      	movs	r3, #0
 800865c:	9303      	str	r3, [sp, #12]
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	9302      	str	r3, [sp, #8]
 8008662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008664:	9301      	str	r3, [sp, #4]
 8008666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	68b9      	ldr	r1, [r7, #8]
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f000 f80e 	bl	8008690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008674:	69f8      	ldr	r0, [r7, #28]
 8008676:	f000 f8b3 	bl	80087e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800867a:	2301      	movs	r3, #1
 800867c:	61bb      	str	r3, [r7, #24]
 800867e:	e002      	b.n	8008686 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008684:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008686:	69bb      	ldr	r3, [r7, #24]
	}
 8008688:	4618      	mov	r0, r3
 800868a:	3720      	adds	r7, #32
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800869e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	461a      	mov	r2, r3
 80086a8:	21a5      	movs	r1, #165	; 0xa5
 80086aa:	f00c fb1a 	bl	8014ce2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80086b8:	440b      	add	r3, r1
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	f023 0307 	bic.w	r3, r3, #7
 80086c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	f003 0307 	and.w	r3, r3, #7
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00c      	beq.n	80086ec <prvInitialiseNewTask+0x5c>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	b672      	cpsid	i
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	b662      	cpsie	i
 80086e6:	617b      	str	r3, [r7, #20]
}
 80086e8:	bf00      	nop
 80086ea:	e7fe      	b.n	80086ea <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d01f      	beq.n	8008732 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086f2:	2300      	movs	r3, #0
 80086f4:	61fb      	str	r3, [r7, #28]
 80086f6:	e012      	b.n	800871e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086f8:	68ba      	ldr	r2, [r7, #8]
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	4413      	add	r3, r2
 80086fe:	7819      	ldrb	r1, [r3, #0]
 8008700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	4413      	add	r3, r2
 8008706:	3334      	adds	r3, #52	; 0x34
 8008708:	460a      	mov	r2, r1
 800870a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	4413      	add	r3, r2
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d006      	beq.n	8008726 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	3301      	adds	r3, #1
 800871c:	61fb      	str	r3, [r7, #28]
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	2b0f      	cmp	r3, #15
 8008722:	d9e9      	bls.n	80086f8 <prvInitialiseNewTask+0x68>
 8008724:	e000      	b.n	8008728 <prvInitialiseNewTask+0x98>
			{
				break;
 8008726:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008730:	e003      	b.n	800873a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873c:	2b06      	cmp	r3, #6
 800873e:	d901      	bls.n	8008744 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008740:	2306      	movs	r3, #6
 8008742:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008748:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800874e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008752:	2200      	movs	r2, #0
 8008754:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	3304      	adds	r3, #4
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe febd 	bl	80074da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008762:	3318      	adds	r3, #24
 8008764:	4618      	mov	r0, r3
 8008766:	f7fe feb8 	bl	80074da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800876e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	f1c3 0207 	rsb	r2, r3, #7
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800877e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	2200      	movs	r2, #0
 8008784:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878a:	2200      	movs	r2, #0
 800878c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008792:	334c      	adds	r3, #76	; 0x4c
 8008794:	2260      	movs	r2, #96	; 0x60
 8008796:	2100      	movs	r1, #0
 8008798:	4618      	mov	r0, r3
 800879a:	f00c faa2 	bl	8014ce2 <memset>
 800879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a0:	4a0c      	ldr	r2, [pc, #48]	; (80087d4 <prvInitialiseNewTask+0x144>)
 80087a2:	651a      	str	r2, [r3, #80]	; 0x50
 80087a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a6:	4a0c      	ldr	r2, [pc, #48]	; (80087d8 <prvInitialiseNewTask+0x148>)
 80087a8:	655a      	str	r2, [r3, #84]	; 0x54
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	4a0b      	ldr	r2, [pc, #44]	; (80087dc <prvInitialiseNewTask+0x14c>)
 80087ae:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	68f9      	ldr	r1, [r7, #12]
 80087b4:	69b8      	ldr	r0, [r7, #24]
 80087b6:	f001 f8b1 	bl	800991c <pxPortInitialiseStack>
 80087ba:	4602      	mov	r2, r0
 80087bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80087c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d002      	beq.n	80087cc <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80087c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087cc:	bf00      	nop
 80087ce:	3720      	adds	r7, #32
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	08019910 	.word	0x08019910
 80087d8:	08019930 	.word	0x08019930
 80087dc:	080198f0 	.word	0x080198f0

080087e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80087e8:	f001 f9a8 	bl	8009b3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80087ec:	4b2a      	ldr	r3, [pc, #168]	; (8008898 <prvAddNewTaskToReadyList+0xb8>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	3301      	adds	r3, #1
 80087f2:	4a29      	ldr	r2, [pc, #164]	; (8008898 <prvAddNewTaskToReadyList+0xb8>)
 80087f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80087f6:	4b29      	ldr	r3, [pc, #164]	; (800889c <prvAddNewTaskToReadyList+0xbc>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d109      	bne.n	8008812 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087fe:	4a27      	ldr	r2, [pc, #156]	; (800889c <prvAddNewTaskToReadyList+0xbc>)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008804:	4b24      	ldr	r3, [pc, #144]	; (8008898 <prvAddNewTaskToReadyList+0xb8>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d110      	bne.n	800882e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800880c:	f000 fd6a 	bl	80092e4 <prvInitialiseTaskLists>
 8008810:	e00d      	b.n	800882e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008812:	4b23      	ldr	r3, [pc, #140]	; (80088a0 <prvAddNewTaskToReadyList+0xc0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d109      	bne.n	800882e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800881a:	4b20      	ldr	r3, [pc, #128]	; (800889c <prvAddNewTaskToReadyList+0xbc>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008824:	429a      	cmp	r2, r3
 8008826:	d802      	bhi.n	800882e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008828:	4a1c      	ldr	r2, [pc, #112]	; (800889c <prvAddNewTaskToReadyList+0xbc>)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800882e:	4b1d      	ldr	r3, [pc, #116]	; (80088a4 <prvAddNewTaskToReadyList+0xc4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	3301      	adds	r3, #1
 8008834:	4a1b      	ldr	r2, [pc, #108]	; (80088a4 <prvAddNewTaskToReadyList+0xc4>)
 8008836:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883c:	2201      	movs	r2, #1
 800883e:	409a      	lsls	r2, r3
 8008840:	4b19      	ldr	r3, [pc, #100]	; (80088a8 <prvAddNewTaskToReadyList+0xc8>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4313      	orrs	r3, r2
 8008846:	4a18      	ldr	r2, [pc, #96]	; (80088a8 <prvAddNewTaskToReadyList+0xc8>)
 8008848:	6013      	str	r3, [r2, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884e:	4613      	mov	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4a15      	ldr	r2, [pc, #84]	; (80088ac <prvAddNewTaskToReadyList+0xcc>)
 8008858:	441a      	add	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	3304      	adds	r3, #4
 800885e:	4619      	mov	r1, r3
 8008860:	4610      	mov	r0, r2
 8008862:	f7fe fe47 	bl	80074f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008866:	f001 f99d 	bl	8009ba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800886a:	4b0d      	ldr	r3, [pc, #52]	; (80088a0 <prvAddNewTaskToReadyList+0xc0>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00e      	beq.n	8008890 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008872:	4b0a      	ldr	r3, [pc, #40]	; (800889c <prvAddNewTaskToReadyList+0xbc>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887c:	429a      	cmp	r2, r3
 800887e:	d207      	bcs.n	8008890 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008880:	4b0b      	ldr	r3, [pc, #44]	; (80088b0 <prvAddNewTaskToReadyList+0xd0>)
 8008882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20005958 	.word	0x20005958
 800889c:	20005858 	.word	0x20005858
 80088a0:	20005964 	.word	0x20005964
 80088a4:	20005974 	.word	0x20005974
 80088a8:	20005960 	.word	0x20005960
 80088ac:	2000585c 	.word	0x2000585c
 80088b0:	e000ed04 	.word	0xe000ed04

080088b4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80088bc:	f001 f93e 	bl	8009b3c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d102      	bne.n	80088cc <vTaskDelete+0x18>
 80088c6:	4b3a      	ldr	r3, [pc, #232]	; (80089b0 <vTaskDelete+0xfc>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	e000      	b.n	80088ce <vTaskDelete+0x1a>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3304      	adds	r3, #4
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe fe6a 	bl	80075ae <uxListRemove>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d115      	bne.n	800890c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e4:	4933      	ldr	r1, [pc, #204]	; (80089b4 <vTaskDelete+0x100>)
 80088e6:	4613      	mov	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	440b      	add	r3, r1
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10a      	bne.n	800890c <vTaskDelete+0x58>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fa:	2201      	movs	r2, #1
 80088fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008900:	43da      	mvns	r2, r3
 8008902:	4b2d      	ldr	r3, [pc, #180]	; (80089b8 <vTaskDelete+0x104>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4013      	ands	r3, r2
 8008908:	4a2b      	ldr	r2, [pc, #172]	; (80089b8 <vTaskDelete+0x104>)
 800890a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008910:	2b00      	cmp	r3, #0
 8008912:	d004      	beq.n	800891e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	3318      	adds	r3, #24
 8008918:	4618      	mov	r0, r3
 800891a:	f7fe fe48 	bl	80075ae <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800891e:	4b27      	ldr	r3, [pc, #156]	; (80089bc <vTaskDelete+0x108>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3301      	adds	r3, #1
 8008924:	4a25      	ldr	r2, [pc, #148]	; (80089bc <vTaskDelete+0x108>)
 8008926:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008928:	4b21      	ldr	r3, [pc, #132]	; (80089b0 <vTaskDelete+0xfc>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	429a      	cmp	r2, r3
 8008930:	d10b      	bne.n	800894a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	3304      	adds	r3, #4
 8008936:	4619      	mov	r1, r3
 8008938:	4821      	ldr	r0, [pc, #132]	; (80089c0 <vTaskDelete+0x10c>)
 800893a:	f7fe fddb 	bl	80074f4 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800893e:	4b21      	ldr	r3, [pc, #132]	; (80089c4 <vTaskDelete+0x110>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3301      	adds	r3, #1
 8008944:	4a1f      	ldr	r2, [pc, #124]	; (80089c4 <vTaskDelete+0x110>)
 8008946:	6013      	str	r3, [r2, #0]
 8008948:	e009      	b.n	800895e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800894a:	4b1f      	ldr	r3, [pc, #124]	; (80089c8 <vTaskDelete+0x114>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3b01      	subs	r3, #1
 8008950:	4a1d      	ldr	r2, [pc, #116]	; (80089c8 <vTaskDelete+0x114>)
 8008952:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 fd33 	bl	80093c0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800895a:	f000 fd67 	bl	800942c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800895e:	f001 f921 	bl	8009ba4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008962:	4b1a      	ldr	r3, [pc, #104]	; (80089cc <vTaskDelete+0x118>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d01d      	beq.n	80089a6 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800896a:	4b11      	ldr	r3, [pc, #68]	; (80089b0 <vTaskDelete+0xfc>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	429a      	cmp	r2, r3
 8008972:	d118      	bne.n	80089a6 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008974:	4b16      	ldr	r3, [pc, #88]	; (80089d0 <vTaskDelete+0x11c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00c      	beq.n	8008996 <vTaskDelete+0xe2>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008980:	b672      	cpsid	i
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	b662      	cpsie	i
 8008990:	60bb      	str	r3, [r7, #8]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8008996:	4b0f      	ldr	r3, [pc, #60]	; (80089d4 <vTaskDelete+0x120>)
 8008998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899c:	601a      	str	r2, [r3, #0]
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089a6:	bf00      	nop
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20005858 	.word	0x20005858
 80089b4:	2000585c 	.word	0x2000585c
 80089b8:	20005960 	.word	0x20005960
 80089bc:	20005974 	.word	0x20005974
 80089c0:	2000592c 	.word	0x2000592c
 80089c4:	20005940 	.word	0x20005940
 80089c8:	20005958 	.word	0x20005958
 80089cc:	20005964 	.word	0x20005964
 80089d0:	20005980 	.word	0x20005980
 80089d4:	e000ed04 	.word	0xe000ed04

080089d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089e0:	2300      	movs	r3, #0
 80089e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d019      	beq.n	8008a1e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089ea:	4b14      	ldr	r3, [pc, #80]	; (8008a3c <vTaskDelay+0x64>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00c      	beq.n	8008a0c <vTaskDelay+0x34>
	__asm volatile
 80089f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f6:	b672      	cpsid	i
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	b662      	cpsie	i
 8008a06:	60bb      	str	r3, [r7, #8]
}
 8008a08:	bf00      	nop
 8008a0a:	e7fe      	b.n	8008a0a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008a0c:	f000 f888 	bl	8008b20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a10:	2100      	movs	r1, #0
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 ff1c 	bl	8009850 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a18:	f000 f890 	bl	8008b3c <xTaskResumeAll>
 8008a1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d107      	bne.n	8008a34 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008a24:	4b06      	ldr	r3, [pc, #24]	; (8008a40 <vTaskDelay+0x68>)
 8008a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a34:	bf00      	nop
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	20005980 	.word	0x20005980
 8008a40:	e000ed04 	.word	0xe000ed04

08008a44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08a      	sub	sp, #40	; 0x28
 8008a48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a52:	463a      	mov	r2, r7
 8008a54:	1d39      	adds	r1, r7, #4
 8008a56:	f107 0308 	add.w	r3, r7, #8
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7f7 fdda 	bl	8000614 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	9202      	str	r2, [sp, #8]
 8008a68:	9301      	str	r3, [sp, #4]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	460a      	mov	r2, r1
 8008a72:	4923      	ldr	r1, [pc, #140]	; (8008b00 <vTaskStartScheduler+0xbc>)
 8008a74:	4823      	ldr	r0, [pc, #140]	; (8008b04 <vTaskStartScheduler+0xc0>)
 8008a76:	f7ff fd63 	bl	8008540 <xTaskCreateStatic>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	4a22      	ldr	r2, [pc, #136]	; (8008b08 <vTaskStartScheduler+0xc4>)
 8008a7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a80:	4b21      	ldr	r3, [pc, #132]	; (8008b08 <vTaskStartScheduler+0xc4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d002      	beq.n	8008a8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	617b      	str	r3, [r7, #20]
 8008a8c:	e001      	b.n	8008a92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d11d      	bne.n	8008ad4 <vTaskStartScheduler+0x90>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	b672      	cpsid	i
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	b662      	cpsie	i
 8008aac:	613b      	str	r3, [r7, #16]
}
 8008aae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ab0:	4b16      	ldr	r3, [pc, #88]	; (8008b0c <vTaskStartScheduler+0xc8>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	334c      	adds	r3, #76	; 0x4c
 8008ab6:	4a16      	ldr	r2, [pc, #88]	; (8008b10 <vTaskStartScheduler+0xcc>)
 8008ab8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008aba:	4b16      	ldr	r3, [pc, #88]	; (8008b14 <vTaskStartScheduler+0xd0>)
 8008abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ac0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ac2:	4b15      	ldr	r3, [pc, #84]	; (8008b18 <vTaskStartScheduler+0xd4>)
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ac8:	4b14      	ldr	r3, [pc, #80]	; (8008b1c <vTaskStartScheduler+0xd8>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ace:	f000 ffb7 	bl	8009a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ad2:	e010      	b.n	8008af6 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ada:	d10c      	bne.n	8008af6 <vTaskStartScheduler+0xb2>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae0:	b672      	cpsid	i
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	b662      	cpsie	i
 8008af0:	60fb      	str	r3, [r7, #12]
}
 8008af2:	bf00      	nop
 8008af4:	e7fe      	b.n	8008af4 <vTaskStartScheduler+0xb0>
}
 8008af6:	bf00      	nop
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	08016c00 	.word	0x08016c00
 8008b04:	080092b5 	.word	0x080092b5
 8008b08:	2000597c 	.word	0x2000597c
 8008b0c:	20005858 	.word	0x20005858
 8008b10:	20000030 	.word	0x20000030
 8008b14:	20005978 	.word	0x20005978
 8008b18:	20005964 	.word	0x20005964
 8008b1c:	2000595c 	.word	0x2000595c

08008b20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b20:	b480      	push	{r7}
 8008b22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008b24:	4b04      	ldr	r3, [pc, #16]	; (8008b38 <vTaskSuspendAll+0x18>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	4a03      	ldr	r2, [pc, #12]	; (8008b38 <vTaskSuspendAll+0x18>)
 8008b2c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008b2e:	bf00      	nop
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	20005980 	.word	0x20005980

08008b3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b42:	2300      	movs	r3, #0
 8008b44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b46:	2300      	movs	r3, #0
 8008b48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b4a:	4b42      	ldr	r3, [pc, #264]	; (8008c54 <xTaskResumeAll+0x118>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10c      	bne.n	8008b6c <xTaskResumeAll+0x30>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	b672      	cpsid	i
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	b662      	cpsie	i
 8008b66:	603b      	str	r3, [r7, #0]
}
 8008b68:	bf00      	nop
 8008b6a:	e7fe      	b.n	8008b6a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b6c:	f000 ffe6 	bl	8009b3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b70:	4b38      	ldr	r3, [pc, #224]	; (8008c54 <xTaskResumeAll+0x118>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	4a37      	ldr	r2, [pc, #220]	; (8008c54 <xTaskResumeAll+0x118>)
 8008b78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b7a:	4b36      	ldr	r3, [pc, #216]	; (8008c54 <xTaskResumeAll+0x118>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d161      	bne.n	8008c46 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b82:	4b35      	ldr	r3, [pc, #212]	; (8008c58 <xTaskResumeAll+0x11c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d05d      	beq.n	8008c46 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b8a:	e02e      	b.n	8008bea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b8c:	4b33      	ldr	r3, [pc, #204]	; (8008c5c <xTaskResumeAll+0x120>)
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	3318      	adds	r3, #24
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fe fd08 	bl	80075ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fe fd03 	bl	80075ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	2201      	movs	r2, #1
 8008bae:	409a      	lsls	r2, r3
 8008bb0:	4b2b      	ldr	r3, [pc, #172]	; (8008c60 <xTaskResumeAll+0x124>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	4a2a      	ldr	r2, [pc, #168]	; (8008c60 <xTaskResumeAll+0x124>)
 8008bb8:	6013      	str	r3, [r2, #0]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4a27      	ldr	r2, [pc, #156]	; (8008c64 <xTaskResumeAll+0x128>)
 8008bc8:	441a      	add	r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3304      	adds	r3, #4
 8008bce:	4619      	mov	r1, r3
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	f7fe fc8f 	bl	80074f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bda:	4b23      	ldr	r3, [pc, #140]	; (8008c68 <xTaskResumeAll+0x12c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d302      	bcc.n	8008bea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008be4:	4b21      	ldr	r3, [pc, #132]	; (8008c6c <xTaskResumeAll+0x130>)
 8008be6:	2201      	movs	r2, #1
 8008be8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bea:	4b1c      	ldr	r3, [pc, #112]	; (8008c5c <xTaskResumeAll+0x120>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1cc      	bne.n	8008b8c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008bf8:	f000 fc18 	bl	800942c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008bfc:	4b1c      	ldr	r3, [pc, #112]	; (8008c70 <xTaskResumeAll+0x134>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d010      	beq.n	8008c2a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c08:	f000 f858 	bl	8008cbc <xTaskIncrementTick>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d002      	beq.n	8008c18 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008c12:	4b16      	ldr	r3, [pc, #88]	; (8008c6c <xTaskResumeAll+0x130>)
 8008c14:	2201      	movs	r2, #1
 8008c16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1f1      	bne.n	8008c08 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8008c24:	4b12      	ldr	r3, [pc, #72]	; (8008c70 <xTaskResumeAll+0x134>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c2a:	4b10      	ldr	r3, [pc, #64]	; (8008c6c <xTaskResumeAll+0x130>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d009      	beq.n	8008c46 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c32:	2301      	movs	r3, #1
 8008c34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c36:	4b0f      	ldr	r3, [pc, #60]	; (8008c74 <xTaskResumeAll+0x138>)
 8008c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c3c:	601a      	str	r2, [r3, #0]
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c46:	f000 ffad 	bl	8009ba4 <vPortExitCritical>

	return xAlreadyYielded;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	20005980 	.word	0x20005980
 8008c58:	20005958 	.word	0x20005958
 8008c5c:	20005918 	.word	0x20005918
 8008c60:	20005960 	.word	0x20005960
 8008c64:	2000585c 	.word	0x2000585c
 8008c68:	20005858 	.word	0x20005858
 8008c6c:	2000596c 	.word	0x2000596c
 8008c70:	20005968 	.word	0x20005968
 8008c74:	e000ed04 	.word	0xe000ed04

08008c78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c7e:	4b05      	ldr	r3, [pc, #20]	; (8008c94 <xTaskGetTickCount+0x1c>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c84:	687b      	ldr	r3, [r7, #4]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	2000595c 	.word	0x2000595c

08008c98 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c9e:	f001 f835 	bl	8009d0c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008ca6:	4b04      	ldr	r3, [pc, #16]	; (8008cb8 <xTaskGetTickCountFromISR+0x20>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cac:	683b      	ldr	r3, [r7, #0]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	2000595c 	.word	0x2000595c

08008cbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cc6:	4b4f      	ldr	r3, [pc, #316]	; (8008e04 <xTaskIncrementTick+0x148>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f040 808a 	bne.w	8008de4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cd0:	4b4d      	ldr	r3, [pc, #308]	; (8008e08 <xTaskIncrementTick+0x14c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cd8:	4a4b      	ldr	r2, [pc, #300]	; (8008e08 <xTaskIncrementTick+0x14c>)
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d122      	bne.n	8008d2a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ce4:	4b49      	ldr	r3, [pc, #292]	; (8008e0c <xTaskIncrementTick+0x150>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00c      	beq.n	8008d08 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	b672      	cpsid	i
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	b662      	cpsie	i
 8008d02:	603b      	str	r3, [r7, #0]
}
 8008d04:	bf00      	nop
 8008d06:	e7fe      	b.n	8008d06 <xTaskIncrementTick+0x4a>
 8008d08:	4b40      	ldr	r3, [pc, #256]	; (8008e0c <xTaskIncrementTick+0x150>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	60fb      	str	r3, [r7, #12]
 8008d0e:	4b40      	ldr	r3, [pc, #256]	; (8008e10 <xTaskIncrementTick+0x154>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a3e      	ldr	r2, [pc, #248]	; (8008e0c <xTaskIncrementTick+0x150>)
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	4a3e      	ldr	r2, [pc, #248]	; (8008e10 <xTaskIncrementTick+0x154>)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	4b3d      	ldr	r3, [pc, #244]	; (8008e14 <xTaskIncrementTick+0x158>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3301      	adds	r3, #1
 8008d22:	4a3c      	ldr	r2, [pc, #240]	; (8008e14 <xTaskIncrementTick+0x158>)
 8008d24:	6013      	str	r3, [r2, #0]
 8008d26:	f000 fb81 	bl	800942c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d2a:	4b3b      	ldr	r3, [pc, #236]	; (8008e18 <xTaskIncrementTick+0x15c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d348      	bcc.n	8008dc6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d34:	4b35      	ldr	r3, [pc, #212]	; (8008e0c <xTaskIncrementTick+0x150>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d104      	bne.n	8008d48 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d3e:	4b36      	ldr	r3, [pc, #216]	; (8008e18 <xTaskIncrementTick+0x15c>)
 8008d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d44:	601a      	str	r2, [r3, #0]
					break;
 8008d46:	e03e      	b.n	8008dc6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d48:	4b30      	ldr	r3, [pc, #192]	; (8008e0c <xTaskIncrementTick+0x150>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d203      	bcs.n	8008d68 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d60:	4a2d      	ldr	r2, [pc, #180]	; (8008e18 <xTaskIncrementTick+0x15c>)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d66:	e02e      	b.n	8008dc6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fe fc1e 	bl	80075ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d004      	beq.n	8008d84 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	3318      	adds	r3, #24
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fe fc15 	bl	80075ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d88:	2201      	movs	r2, #1
 8008d8a:	409a      	lsls	r2, r3
 8008d8c:	4b23      	ldr	r3, [pc, #140]	; (8008e1c <xTaskIncrementTick+0x160>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	4a22      	ldr	r2, [pc, #136]	; (8008e1c <xTaskIncrementTick+0x160>)
 8008d94:	6013      	str	r3, [r2, #0]
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4a1f      	ldr	r2, [pc, #124]	; (8008e20 <xTaskIncrementTick+0x164>)
 8008da4:	441a      	add	r2, r3
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	3304      	adds	r3, #4
 8008daa:	4619      	mov	r1, r3
 8008dac:	4610      	mov	r0, r2
 8008dae:	f7fe fba1 	bl	80074f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db6:	4b1b      	ldr	r3, [pc, #108]	; (8008e24 <xTaskIncrementTick+0x168>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d3b9      	bcc.n	8008d34 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dc4:	e7b6      	b.n	8008d34 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008dc6:	4b17      	ldr	r3, [pc, #92]	; (8008e24 <xTaskIncrementTick+0x168>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dcc:	4914      	ldr	r1, [pc, #80]	; (8008e20 <xTaskIncrementTick+0x164>)
 8008dce:	4613      	mov	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	440b      	add	r3, r1
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d907      	bls.n	8008dee <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8008dde:	2301      	movs	r3, #1
 8008de0:	617b      	str	r3, [r7, #20]
 8008de2:	e004      	b.n	8008dee <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008de4:	4b10      	ldr	r3, [pc, #64]	; (8008e28 <xTaskIncrementTick+0x16c>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3301      	adds	r3, #1
 8008dea:	4a0f      	ldr	r2, [pc, #60]	; (8008e28 <xTaskIncrementTick+0x16c>)
 8008dec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008dee:	4b0f      	ldr	r3, [pc, #60]	; (8008e2c <xTaskIncrementTick+0x170>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8008df6:	2301      	movs	r3, #1
 8008df8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008dfa:	697b      	ldr	r3, [r7, #20]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3718      	adds	r7, #24
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	20005980 	.word	0x20005980
 8008e08:	2000595c 	.word	0x2000595c
 8008e0c:	20005910 	.word	0x20005910
 8008e10:	20005914 	.word	0x20005914
 8008e14:	20005970 	.word	0x20005970
 8008e18:	20005978 	.word	0x20005978
 8008e1c:	20005960 	.word	0x20005960
 8008e20:	2000585c 	.word	0x2000585c
 8008e24:	20005858 	.word	0x20005858
 8008e28:	20005968 	.word	0x20005968
 8008e2c:	2000596c 	.word	0x2000596c

08008e30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b088      	sub	sp, #32
 8008e34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e36:	4b3d      	ldr	r3, [pc, #244]	; (8008f2c <vTaskSwitchContext+0xfc>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e3e:	4b3c      	ldr	r3, [pc, #240]	; (8008f30 <vTaskSwitchContext+0x100>)
 8008e40:	2201      	movs	r2, #1
 8008e42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e44:	e06d      	b.n	8008f22 <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 8008e46:	4b3a      	ldr	r3, [pc, #232]	; (8008f30 <vTaskSwitchContext+0x100>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008e4c:	4b39      	ldr	r3, [pc, #228]	; (8008f34 <vTaskSwitchContext+0x104>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e52:	61fb      	str	r3, [r7, #28]
 8008e54:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008e58:	61bb      	str	r3, [r7, #24]
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d111      	bne.n	8008e88 <vTaskSwitchContext+0x58>
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	3304      	adds	r3, #4
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	69ba      	ldr	r2, [r7, #24]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d10b      	bne.n	8008e88 <vTaskSwitchContext+0x58>
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	3308      	adds	r3, #8
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d105      	bne.n	8008e88 <vTaskSwitchContext+0x58>
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	330c      	adds	r3, #12
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d008      	beq.n	8008e9a <vTaskSwitchContext+0x6a>
 8008e88:	4b2a      	ldr	r3, [pc, #168]	; (8008f34 <vTaskSwitchContext+0x104>)
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	4b29      	ldr	r3, [pc, #164]	; (8008f34 <vTaskSwitchContext+0x104>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3334      	adds	r3, #52	; 0x34
 8008e92:	4619      	mov	r1, r3
 8008e94:	4610      	mov	r0, r2
 8008e96:	f7f7 fbad 	bl	80005f4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e9a:	4b27      	ldr	r3, [pc, #156]	; (8008f38 <vTaskSwitchContext+0x108>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	fab3 f383 	clz	r3, r3
 8008ea6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008ea8:	7afb      	ldrb	r3, [r7, #11]
 8008eaa:	f1c3 031f 	rsb	r3, r3, #31
 8008eae:	617b      	str	r3, [r7, #20]
 8008eb0:	4922      	ldr	r1, [pc, #136]	; (8008f3c <vTaskSwitchContext+0x10c>)
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	440b      	add	r3, r1
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10c      	bne.n	8008ede <vTaskSwitchContext+0xae>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec8:	b672      	cpsid	i
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	b662      	cpsie	i
 8008ed8:	607b      	str	r3, [r7, #4]
}
 8008eda:	bf00      	nop
 8008edc:	e7fe      	b.n	8008edc <vTaskSwitchContext+0xac>
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4a14      	ldr	r2, [pc, #80]	; (8008f3c <vTaskSwitchContext+0x10c>)
 8008eea:	4413      	add	r3, r2
 8008eec:	613b      	str	r3, [r7, #16]
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	605a      	str	r2, [r3, #4]
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	3308      	adds	r3, #8
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d104      	bne.n	8008f0e <vTaskSwitchContext+0xde>
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	685a      	ldr	r2, [r3, #4]
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	605a      	str	r2, [r3, #4]
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	4a07      	ldr	r2, [pc, #28]	; (8008f34 <vTaskSwitchContext+0x104>)
 8008f16:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f18:	4b06      	ldr	r3, [pc, #24]	; (8008f34 <vTaskSwitchContext+0x104>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	334c      	adds	r3, #76	; 0x4c
 8008f1e:	4a08      	ldr	r2, [pc, #32]	; (8008f40 <vTaskSwitchContext+0x110>)
 8008f20:	6013      	str	r3, [r2, #0]
}
 8008f22:	bf00      	nop
 8008f24:	3720      	adds	r7, #32
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20005980 	.word	0x20005980
 8008f30:	2000596c 	.word	0x2000596c
 8008f34:	20005858 	.word	0x20005858
 8008f38:	20005960 	.word	0x20005960
 8008f3c:	2000585c 	.word	0x2000585c
 8008f40:	20000030 	.word	0x20000030

08008f44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10c      	bne.n	8008f6e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f58:	b672      	cpsid	i
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	b662      	cpsie	i
 8008f68:	60fb      	str	r3, [r7, #12]
}
 8008f6a:	bf00      	nop
 8008f6c:	e7fe      	b.n	8008f6c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f6e:	4b07      	ldr	r3, [pc, #28]	; (8008f8c <vTaskPlaceOnEventList+0x48>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3318      	adds	r3, #24
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7fe fae0 	bl	800753c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	6838      	ldr	r0, [r7, #0]
 8008f80:	f000 fc66 	bl	8009850 <prvAddCurrentTaskToDelayedList>
}
 8008f84:	bf00      	nop
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20005858 	.word	0x20005858

08008f90 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10c      	bne.n	8008fbc <vTaskPlaceOnUnorderedEventList+0x2c>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	b672      	cpsid	i
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	b662      	cpsie	i
 8008fb6:	617b      	str	r3, [r7, #20]
}
 8008fb8:	bf00      	nop
 8008fba:	e7fe      	b.n	8008fba <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008fbc:	4b12      	ldr	r3, [pc, #72]	; (8009008 <vTaskPlaceOnUnorderedEventList+0x78>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10c      	bne.n	8008fde <vTaskPlaceOnUnorderedEventList+0x4e>
	__asm volatile
 8008fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc8:	b672      	cpsid	i
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	b662      	cpsie	i
 8008fd8:	613b      	str	r3, [r7, #16]
}
 8008fda:	bf00      	nop
 8008fdc:	e7fe      	b.n	8008fdc <vTaskPlaceOnUnorderedEventList+0x4c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008fde:	4b0b      	ldr	r3, [pc, #44]	; (800900c <vTaskPlaceOnUnorderedEventList+0x7c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008fe8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fea:	4b08      	ldr	r3, [pc, #32]	; (800900c <vTaskPlaceOnUnorderedEventList+0x7c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3318      	adds	r3, #24
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f7fe fa7e 	bl	80074f4 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fc28 	bl	8009850 <prvAddCurrentTaskToDelayedList>
}
 8009000:	bf00      	nop
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	20005980 	.word	0x20005980
 800900c:	20005858 	.word	0x20005858

08009010 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10c      	bne.n	8009040 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902a:	b672      	cpsid	i
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	b662      	cpsie	i
 800903a:	60fb      	str	r3, [r7, #12]
}
 800903c:	bf00      	nop
 800903e:	e7fe      	b.n	800903e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	3318      	adds	r3, #24
 8009044:	4618      	mov	r0, r3
 8009046:	f7fe fab2 	bl	80075ae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800904a:	4b1d      	ldr	r3, [pc, #116]	; (80090c0 <xTaskRemoveFromEventList+0xb0>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d11c      	bne.n	800908c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	3304      	adds	r3, #4
 8009056:	4618      	mov	r0, r3
 8009058:	f7fe faa9 	bl	80075ae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009060:	2201      	movs	r2, #1
 8009062:	409a      	lsls	r2, r3
 8009064:	4b17      	ldr	r3, [pc, #92]	; (80090c4 <xTaskRemoveFromEventList+0xb4>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4313      	orrs	r3, r2
 800906a:	4a16      	ldr	r2, [pc, #88]	; (80090c4 <xTaskRemoveFromEventList+0xb4>)
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009072:	4613      	mov	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4a13      	ldr	r2, [pc, #76]	; (80090c8 <xTaskRemoveFromEventList+0xb8>)
 800907c:	441a      	add	r2, r3
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	3304      	adds	r3, #4
 8009082:	4619      	mov	r1, r3
 8009084:	4610      	mov	r0, r2
 8009086:	f7fe fa35 	bl	80074f4 <vListInsertEnd>
 800908a:	e005      	b.n	8009098 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	3318      	adds	r3, #24
 8009090:	4619      	mov	r1, r3
 8009092:	480e      	ldr	r0, [pc, #56]	; (80090cc <xTaskRemoveFromEventList+0xbc>)
 8009094:	f7fe fa2e 	bl	80074f4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800909c:	4b0c      	ldr	r3, [pc, #48]	; (80090d0 <xTaskRemoveFromEventList+0xc0>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d905      	bls.n	80090b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80090a6:	2301      	movs	r3, #1
 80090a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80090aa:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <xTaskRemoveFromEventList+0xc4>)
 80090ac:	2201      	movs	r2, #1
 80090ae:	601a      	str	r2, [r3, #0]
 80090b0:	e001      	b.n	80090b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80090b2:	2300      	movs	r3, #0
 80090b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80090b6:	697b      	ldr	r3, [r7, #20]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3718      	adds	r7, #24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	20005980 	.word	0x20005980
 80090c4:	20005960 	.word	0x20005960
 80090c8:	2000585c 	.word	0x2000585c
 80090cc:	20005918 	.word	0x20005918
 80090d0:	20005858 	.word	0x20005858
 80090d4:	2000596c 	.word	0x2000596c

080090d8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80090e2:	4b2b      	ldr	r3, [pc, #172]	; (8009190 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10c      	bne.n	8009104 <vTaskRemoveFromUnorderedEventList+0x2c>
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	b672      	cpsid	i
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	b662      	cpsie	i
 80090fe:	613b      	str	r3, [r7, #16]
}
 8009100:	bf00      	nop
 8009102:	e7fe      	b.n	8009102 <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10c      	bne.n	8009134 <vTaskRemoveFromUnorderedEventList+0x5c>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911e:	b672      	cpsid	i
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	b662      	cpsie	i
 800912e:	60fb      	str	r3, [r7, #12]
}
 8009130:	bf00      	nop
 8009132:	e7fe      	b.n	8009132 <vTaskRemoveFromUnorderedEventList+0x5a>
	( void ) uxListRemove( pxEventListItem );
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7fe fa3a 	bl	80075ae <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	3304      	adds	r3, #4
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe fa35 	bl	80075ae <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009148:	2201      	movs	r2, #1
 800914a:	409a      	lsls	r2, r3
 800914c:	4b11      	ldr	r3, [pc, #68]	; (8009194 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4313      	orrs	r3, r2
 8009152:	4a10      	ldr	r2, [pc, #64]	; (8009194 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009154:	6013      	str	r3, [r2, #0]
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800915a:	4613      	mov	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4a0d      	ldr	r2, [pc, #52]	; (8009198 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009164:	441a      	add	r2, r3
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	3304      	adds	r3, #4
 800916a:	4619      	mov	r1, r3
 800916c:	4610      	mov	r0, r2
 800916e:	f7fe f9c1 	bl	80074f4 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009176:	4b09      	ldr	r3, [pc, #36]	; (800919c <vTaskRemoveFromUnorderedEventList+0xc4>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917c:	429a      	cmp	r2, r3
 800917e:	d902      	bls.n	8009186 <vTaskRemoveFromUnorderedEventList+0xae>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009180:	4b07      	ldr	r3, [pc, #28]	; (80091a0 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8009182:	2201      	movs	r2, #1
 8009184:	601a      	str	r2, [r3, #0]
	}
}
 8009186:	bf00      	nop
 8009188:	3718      	adds	r7, #24
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20005980 	.word	0x20005980
 8009194:	20005960 	.word	0x20005960
 8009198:	2000585c 	.word	0x2000585c
 800919c:	20005858 	.word	0x20005858
 80091a0:	2000596c 	.word	0x2000596c

080091a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80091ac:	4b06      	ldr	r3, [pc, #24]	; (80091c8 <vTaskInternalSetTimeOutState+0x24>)
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80091b4:	4b05      	ldr	r3, [pc, #20]	; (80091cc <vTaskInternalSetTimeOutState+0x28>)
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	605a      	str	r2, [r3, #4]
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr
 80091c8:	20005970 	.word	0x20005970
 80091cc:	2000595c 	.word	0x2000595c

080091d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b088      	sub	sp, #32
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10c      	bne.n	80091fa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e4:	b672      	cpsid	i
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	b662      	cpsie	i
 80091f4:	613b      	str	r3, [r7, #16]
}
 80091f6:	bf00      	nop
 80091f8:	e7fe      	b.n	80091f8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10c      	bne.n	800921a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009204:	b672      	cpsid	i
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	b662      	cpsie	i
 8009214:	60fb      	str	r3, [r7, #12]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800921a:	f000 fc8f 	bl	8009b3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800921e:	4b1d      	ldr	r3, [pc, #116]	; (8009294 <xTaskCheckForTimeOut+0xc4>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009236:	d102      	bne.n	800923e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009238:	2300      	movs	r3, #0
 800923a:	61fb      	str	r3, [r7, #28]
 800923c:	e023      	b.n	8009286 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	4b15      	ldr	r3, [pc, #84]	; (8009298 <xTaskCheckForTimeOut+0xc8>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	429a      	cmp	r2, r3
 8009248:	d007      	beq.n	800925a <xTaskCheckForTimeOut+0x8a>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	429a      	cmp	r2, r3
 8009252:	d302      	bcc.n	800925a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009254:	2301      	movs	r3, #1
 8009256:	61fb      	str	r3, [r7, #28]
 8009258:	e015      	b.n	8009286 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	429a      	cmp	r2, r3
 8009262:	d20b      	bcs.n	800927c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	1ad2      	subs	r2, r2, r3
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7ff ff97 	bl	80091a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009276:	2300      	movs	r3, #0
 8009278:	61fb      	str	r3, [r7, #28]
 800927a:	e004      	b.n	8009286 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	2200      	movs	r2, #0
 8009280:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009282:	2301      	movs	r3, #1
 8009284:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009286:	f000 fc8d 	bl	8009ba4 <vPortExitCritical>

	return xReturn;
 800928a:	69fb      	ldr	r3, [r7, #28]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3720      	adds	r7, #32
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	2000595c 	.word	0x2000595c
 8009298:	20005970 	.word	0x20005970

0800929c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800929c:	b480      	push	{r7}
 800929e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80092a0:	4b03      	ldr	r3, [pc, #12]	; (80092b0 <vTaskMissedYield+0x14>)
 80092a2:	2201      	movs	r2, #1
 80092a4:	601a      	str	r2, [r3, #0]
}
 80092a6:	bf00      	nop
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	2000596c 	.word	0x2000596c

080092b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80092bc:	f000 f852 	bl	8009364 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092c0:	4b06      	ldr	r3, [pc, #24]	; (80092dc <prvIdleTask+0x28>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d9f9      	bls.n	80092bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80092c8:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <prvIdleTask+0x2c>)
 80092ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ce:	601a      	str	r2, [r3, #0]
 80092d0:	f3bf 8f4f 	dsb	sy
 80092d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80092d8:	e7f0      	b.n	80092bc <prvIdleTask+0x8>
 80092da:	bf00      	nop
 80092dc:	2000585c 	.word	0x2000585c
 80092e0:	e000ed04 	.word	0xe000ed04

080092e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092ea:	2300      	movs	r3, #0
 80092ec:	607b      	str	r3, [r7, #4]
 80092ee:	e00c      	b.n	800930a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	4613      	mov	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4a12      	ldr	r2, [pc, #72]	; (8009344 <prvInitialiseTaskLists+0x60>)
 80092fc:	4413      	add	r3, r2
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fe f8cb 	bl	800749a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	3301      	adds	r3, #1
 8009308:	607b      	str	r3, [r7, #4]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b06      	cmp	r3, #6
 800930e:	d9ef      	bls.n	80092f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009310:	480d      	ldr	r0, [pc, #52]	; (8009348 <prvInitialiseTaskLists+0x64>)
 8009312:	f7fe f8c2 	bl	800749a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009316:	480d      	ldr	r0, [pc, #52]	; (800934c <prvInitialiseTaskLists+0x68>)
 8009318:	f7fe f8bf 	bl	800749a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800931c:	480c      	ldr	r0, [pc, #48]	; (8009350 <prvInitialiseTaskLists+0x6c>)
 800931e:	f7fe f8bc 	bl	800749a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009322:	480c      	ldr	r0, [pc, #48]	; (8009354 <prvInitialiseTaskLists+0x70>)
 8009324:	f7fe f8b9 	bl	800749a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009328:	480b      	ldr	r0, [pc, #44]	; (8009358 <prvInitialiseTaskLists+0x74>)
 800932a:	f7fe f8b6 	bl	800749a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800932e:	4b0b      	ldr	r3, [pc, #44]	; (800935c <prvInitialiseTaskLists+0x78>)
 8009330:	4a05      	ldr	r2, [pc, #20]	; (8009348 <prvInitialiseTaskLists+0x64>)
 8009332:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009334:	4b0a      	ldr	r3, [pc, #40]	; (8009360 <prvInitialiseTaskLists+0x7c>)
 8009336:	4a05      	ldr	r2, [pc, #20]	; (800934c <prvInitialiseTaskLists+0x68>)
 8009338:	601a      	str	r2, [r3, #0]
}
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	2000585c 	.word	0x2000585c
 8009348:	200058e8 	.word	0x200058e8
 800934c:	200058fc 	.word	0x200058fc
 8009350:	20005918 	.word	0x20005918
 8009354:	2000592c 	.word	0x2000592c
 8009358:	20005944 	.word	0x20005944
 800935c:	20005910 	.word	0x20005910
 8009360:	20005914 	.word	0x20005914

08009364 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800936a:	e019      	b.n	80093a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800936c:	f000 fbe6 	bl	8009b3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009370:	4b10      	ldr	r3, [pc, #64]	; (80093b4 <prvCheckTasksWaitingTermination+0x50>)
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3304      	adds	r3, #4
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe f916 	bl	80075ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009382:	4b0d      	ldr	r3, [pc, #52]	; (80093b8 <prvCheckTasksWaitingTermination+0x54>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3b01      	subs	r3, #1
 8009388:	4a0b      	ldr	r2, [pc, #44]	; (80093b8 <prvCheckTasksWaitingTermination+0x54>)
 800938a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800938c:	4b0b      	ldr	r3, [pc, #44]	; (80093bc <prvCheckTasksWaitingTermination+0x58>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3b01      	subs	r3, #1
 8009392:	4a0a      	ldr	r2, [pc, #40]	; (80093bc <prvCheckTasksWaitingTermination+0x58>)
 8009394:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009396:	f000 fc05 	bl	8009ba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f810 	bl	80093c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093a0:	4b06      	ldr	r3, [pc, #24]	; (80093bc <prvCheckTasksWaitingTermination+0x58>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e1      	bne.n	800936c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093a8:	bf00      	nop
 80093aa:	bf00      	nop
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	2000592c 	.word	0x2000592c
 80093b8:	20005958 	.word	0x20005958
 80093bc:	20005940 	.word	0x20005940

080093c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	334c      	adds	r3, #76	; 0x4c
 80093cc:	4618      	mov	r0, r3
 80093ce:	f00b fe79 	bl	80150c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d108      	bne.n	80093ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 fda1 	bl	8009f28 <vPortFree>
				vPortFree( pxTCB );
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fd9e 	bl	8009f28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093ec:	e01a      	b.n	8009424 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d103      	bne.n	8009400 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fd95 	bl	8009f28 <vPortFree>
	}
 80093fe:	e011      	b.n	8009424 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009406:	2b02      	cmp	r3, #2
 8009408:	d00c      	beq.n	8009424 <prvDeleteTCB+0x64>
	__asm volatile
 800940a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940e:	b672      	cpsid	i
 8009410:	f383 8811 	msr	BASEPRI, r3
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	b662      	cpsie	i
 800941e:	60fb      	str	r3, [r7, #12]
}
 8009420:	bf00      	nop
 8009422:	e7fe      	b.n	8009422 <prvDeleteTCB+0x62>
	}
 8009424:	bf00      	nop
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009432:	4b0c      	ldr	r3, [pc, #48]	; (8009464 <prvResetNextTaskUnblockTime+0x38>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d104      	bne.n	8009446 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800943c:	4b0a      	ldr	r3, [pc, #40]	; (8009468 <prvResetNextTaskUnblockTime+0x3c>)
 800943e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009442:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009444:	e008      	b.n	8009458 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009446:	4b07      	ldr	r3, [pc, #28]	; (8009464 <prvResetNextTaskUnblockTime+0x38>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	4a04      	ldr	r2, [pc, #16]	; (8009468 <prvResetNextTaskUnblockTime+0x3c>)
 8009456:	6013      	str	r3, [r2, #0]
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	20005910 	.word	0x20005910
 8009468:	20005978 	.word	0x20005978

0800946c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009472:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <xTaskGetSchedulerState+0x34>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d102      	bne.n	8009480 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800947a:	2301      	movs	r3, #1
 800947c:	607b      	str	r3, [r7, #4]
 800947e:	e008      	b.n	8009492 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009480:	4b08      	ldr	r3, [pc, #32]	; (80094a4 <xTaskGetSchedulerState+0x38>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d102      	bne.n	800948e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009488:	2302      	movs	r3, #2
 800948a:	607b      	str	r3, [r7, #4]
 800948c:	e001      	b.n	8009492 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800948e:	2300      	movs	r3, #0
 8009490:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009492:	687b      	ldr	r3, [r7, #4]
	}
 8009494:	4618      	mov	r0, r3
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	20005964 	.word	0x20005964
 80094a4:	20005980 	.word	0x20005980

080094a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80094b4:	2300      	movs	r3, #0
 80094b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d069      	beq.n	8009592 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c2:	4b36      	ldr	r3, [pc, #216]	; (800959c <xTaskPriorityInherit+0xf4>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d259      	bcs.n	8009580 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	db06      	blt.n	80094e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094d4:	4b31      	ldr	r3, [pc, #196]	; (800959c <xTaskPriorityInherit+0xf4>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094da:	f1c3 0207 	rsb	r2, r3, #7
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	6959      	ldr	r1, [r3, #20]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4a2b      	ldr	r2, [pc, #172]	; (80095a0 <xTaskPriorityInherit+0xf8>)
 80094f4:	4413      	add	r3, r2
 80094f6:	4299      	cmp	r1, r3
 80094f8:	d13a      	bne.n	8009570 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	3304      	adds	r3, #4
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fe f855 	bl	80075ae <uxListRemove>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d115      	bne.n	8009536 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800950e:	4924      	ldr	r1, [pc, #144]	; (80095a0 <xTaskPriorityInherit+0xf8>)
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	440b      	add	r3, r1
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10a      	bne.n	8009536 <xTaskPriorityInherit+0x8e>
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009524:	2201      	movs	r2, #1
 8009526:	fa02 f303 	lsl.w	r3, r2, r3
 800952a:	43da      	mvns	r2, r3
 800952c:	4b1d      	ldr	r3, [pc, #116]	; (80095a4 <xTaskPriorityInherit+0xfc>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4013      	ands	r3, r2
 8009532:	4a1c      	ldr	r2, [pc, #112]	; (80095a4 <xTaskPriorityInherit+0xfc>)
 8009534:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009536:	4b19      	ldr	r3, [pc, #100]	; (800959c <xTaskPriorityInherit+0xf4>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009544:	2201      	movs	r2, #1
 8009546:	409a      	lsls	r2, r3
 8009548:	4b16      	ldr	r3, [pc, #88]	; (80095a4 <xTaskPriorityInherit+0xfc>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4313      	orrs	r3, r2
 800954e:	4a15      	ldr	r2, [pc, #84]	; (80095a4 <xTaskPriorityInherit+0xfc>)
 8009550:	6013      	str	r3, [r2, #0]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009556:	4613      	mov	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4a10      	ldr	r2, [pc, #64]	; (80095a0 <xTaskPriorityInherit+0xf8>)
 8009560:	441a      	add	r2, r3
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	3304      	adds	r3, #4
 8009566:	4619      	mov	r1, r3
 8009568:	4610      	mov	r0, r2
 800956a:	f7fd ffc3 	bl	80074f4 <vListInsertEnd>
 800956e:	e004      	b.n	800957a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009570:	4b0a      	ldr	r3, [pc, #40]	; (800959c <xTaskPriorityInherit+0xf4>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800957a:	2301      	movs	r3, #1
 800957c:	60fb      	str	r3, [r7, #12]
 800957e:	e008      	b.n	8009592 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009584:	4b05      	ldr	r3, [pc, #20]	; (800959c <xTaskPriorityInherit+0xf4>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958a:	429a      	cmp	r2, r3
 800958c:	d201      	bcs.n	8009592 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800958e:	2301      	movs	r3, #1
 8009590:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009592:	68fb      	ldr	r3, [r7, #12]
	}
 8009594:	4618      	mov	r0, r3
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	20005858 	.word	0x20005858
 80095a0:	2000585c 	.word	0x2000585c
 80095a4:	20005960 	.word	0x20005960

080095a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095b4:	2300      	movs	r3, #0
 80095b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d072      	beq.n	80096a4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095be:	4b3c      	ldr	r3, [pc, #240]	; (80096b0 <xTaskPriorityDisinherit+0x108>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d00c      	beq.n	80095e2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	b672      	cpsid	i
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	b662      	cpsie	i
 80095dc:	60fb      	str	r3, [r7, #12]
}
 80095de:	bf00      	nop
 80095e0:	e7fe      	b.n	80095e0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10c      	bne.n	8009604 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	b672      	cpsid	i
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	b662      	cpsie	i
 80095fe:	60bb      	str	r3, [r7, #8]
}
 8009600:	bf00      	nop
 8009602:	e7fe      	b.n	8009602 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009608:	1e5a      	subs	r2, r3, #1
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009616:	429a      	cmp	r2, r3
 8009618:	d044      	beq.n	80096a4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800961e:	2b00      	cmp	r3, #0
 8009620:	d140      	bne.n	80096a4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	3304      	adds	r3, #4
 8009626:	4618      	mov	r0, r3
 8009628:	f7fd ffc1 	bl	80075ae <uxListRemove>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d115      	bne.n	800965e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009636:	491f      	ldr	r1, [pc, #124]	; (80096b4 <xTaskPriorityDisinherit+0x10c>)
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	440b      	add	r3, r1
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10a      	bne.n	800965e <xTaskPriorityDisinherit+0xb6>
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	2201      	movs	r2, #1
 800964e:	fa02 f303 	lsl.w	r3, r2, r3
 8009652:	43da      	mvns	r2, r3
 8009654:	4b18      	ldr	r3, [pc, #96]	; (80096b8 <xTaskPriorityDisinherit+0x110>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4013      	ands	r3, r2
 800965a:	4a17      	ldr	r2, [pc, #92]	; (80096b8 <xTaskPriorityDisinherit+0x110>)
 800965c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966a:	f1c3 0207 	rsb	r2, r3, #7
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009676:	2201      	movs	r2, #1
 8009678:	409a      	lsls	r2, r3
 800967a:	4b0f      	ldr	r3, [pc, #60]	; (80096b8 <xTaskPriorityDisinherit+0x110>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4313      	orrs	r3, r2
 8009680:	4a0d      	ldr	r2, [pc, #52]	; (80096b8 <xTaskPriorityDisinherit+0x110>)
 8009682:	6013      	str	r3, [r2, #0]
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009688:	4613      	mov	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4a08      	ldr	r2, [pc, #32]	; (80096b4 <xTaskPriorityDisinherit+0x10c>)
 8009692:	441a      	add	r2, r3
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	3304      	adds	r3, #4
 8009698:	4619      	mov	r1, r3
 800969a:	4610      	mov	r0, r2
 800969c:	f7fd ff2a 	bl	80074f4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80096a0:	2301      	movs	r3, #1
 80096a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096a4:	697b      	ldr	r3, [r7, #20]
	}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	20005858 	.word	0x20005858
 80096b4:	2000585c 	.word	0x2000585c
 80096b8:	20005960 	.word	0x20005960

080096bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b088      	sub	sp, #32
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80096ca:	2301      	movs	r3, #1
 80096cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f000 8087 	beq.w	80097e4 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10c      	bne.n	80096f8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	b672      	cpsid	i
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	b662      	cpsie	i
 80096f2:	60fb      	str	r3, [r7, #12]
}
 80096f4:	bf00      	nop
 80096f6:	e7fe      	b.n	80096f6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d902      	bls.n	8009708 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	61fb      	str	r3, [r7, #28]
 8009706:	e002      	b.n	800970e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800970c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009712:	69fa      	ldr	r2, [r7, #28]
 8009714:	429a      	cmp	r2, r3
 8009716:	d065      	beq.n	80097e4 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	429a      	cmp	r2, r3
 8009720:	d160      	bne.n	80097e4 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009722:	4b32      	ldr	r3, [pc, #200]	; (80097ec <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	69ba      	ldr	r2, [r7, #24]
 8009728:	429a      	cmp	r2, r3
 800972a:	d10c      	bne.n	8009746 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800972c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009730:	b672      	cpsid	i
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	b662      	cpsie	i
 8009740:	60bb      	str	r3, [r7, #8]
}
 8009742:	bf00      	nop
 8009744:	e7fe      	b.n	8009744 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	69fa      	ldr	r2, [r7, #28]
 8009750:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	2b00      	cmp	r3, #0
 8009758:	db04      	blt.n	8009764 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	f1c3 0207 	rsb	r2, r3, #7
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	6959      	ldr	r1, [r3, #20]
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	4613      	mov	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4a1f      	ldr	r2, [pc, #124]	; (80097f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009774:	4413      	add	r3, r2
 8009776:	4299      	cmp	r1, r3
 8009778:	d134      	bne.n	80097e4 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	3304      	adds	r3, #4
 800977e:	4618      	mov	r0, r3
 8009780:	f7fd ff15 	bl	80075ae <uxListRemove>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d115      	bne.n	80097b6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978e:	4918      	ldr	r1, [pc, #96]	; (80097f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009790:	4613      	mov	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4413      	add	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	440b      	add	r3, r1
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10a      	bne.n	80097b6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a4:	2201      	movs	r2, #1
 80097a6:	fa02 f303 	lsl.w	r3, r2, r3
 80097aa:	43da      	mvns	r2, r3
 80097ac:	4b11      	ldr	r3, [pc, #68]	; (80097f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4013      	ands	r3, r2
 80097b2:	4a10      	ldr	r2, [pc, #64]	; (80097f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80097b4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ba:	2201      	movs	r2, #1
 80097bc:	409a      	lsls	r2, r3
 80097be:	4b0d      	ldr	r3, [pc, #52]	; (80097f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	4a0b      	ldr	r2, [pc, #44]	; (80097f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80097c6:	6013      	str	r3, [r2, #0]
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097cc:	4613      	mov	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	4a06      	ldr	r2, [pc, #24]	; (80097f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80097d6:	441a      	add	r2, r3
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	3304      	adds	r3, #4
 80097dc:	4619      	mov	r1, r3
 80097de:	4610      	mov	r0, r2
 80097e0:	f7fd fe88 	bl	80074f4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80097e4:	bf00      	nop
 80097e6:	3720      	adds	r7, #32
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	20005858 	.word	0x20005858
 80097f0:	2000585c 	.word	0x2000585c
 80097f4:	20005960 	.word	0x20005960

080097f8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80097fe:	4b09      	ldr	r3, [pc, #36]	; (8009824 <uxTaskResetEventItemValue+0x2c>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009806:	4b07      	ldr	r3, [pc, #28]	; (8009824 <uxTaskResetEventItemValue+0x2c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980c:	4b05      	ldr	r3, [pc, #20]	; (8009824 <uxTaskResetEventItemValue+0x2c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f1c2 0207 	rsb	r2, r2, #7
 8009814:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8009816:	687b      	ldr	r3, [r7, #4]
}
 8009818:	4618      	mov	r0, r3
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	20005858 	.word	0x20005858

08009828 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009828:	b480      	push	{r7}
 800982a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800982c:	4b07      	ldr	r3, [pc, #28]	; (800984c <pvTaskIncrementMutexHeldCount+0x24>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d004      	beq.n	800983e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009834:	4b05      	ldr	r3, [pc, #20]	; (800984c <pvTaskIncrementMutexHeldCount+0x24>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800983a:	3201      	adds	r2, #1
 800983c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800983e:	4b03      	ldr	r3, [pc, #12]	; (800984c <pvTaskIncrementMutexHeldCount+0x24>)
 8009840:	681b      	ldr	r3, [r3, #0]
	}
 8009842:	4618      	mov	r0, r3
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	20005858 	.word	0x20005858

08009850 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800985a:	4b29      	ldr	r3, [pc, #164]	; (8009900 <prvAddCurrentTaskToDelayedList+0xb0>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009860:	4b28      	ldr	r3, [pc, #160]	; (8009904 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3304      	adds	r3, #4
 8009866:	4618      	mov	r0, r3
 8009868:	f7fd fea1 	bl	80075ae <uxListRemove>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10b      	bne.n	800988a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009872:	4b24      	ldr	r3, [pc, #144]	; (8009904 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009878:	2201      	movs	r2, #1
 800987a:	fa02 f303 	lsl.w	r3, r2, r3
 800987e:	43da      	mvns	r2, r3
 8009880:	4b21      	ldr	r3, [pc, #132]	; (8009908 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4013      	ands	r3, r2
 8009886:	4a20      	ldr	r2, [pc, #128]	; (8009908 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009888:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009890:	d10a      	bne.n	80098a8 <prvAddCurrentTaskToDelayedList+0x58>
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d007      	beq.n	80098a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009898:	4b1a      	ldr	r3, [pc, #104]	; (8009904 <prvAddCurrentTaskToDelayedList+0xb4>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3304      	adds	r3, #4
 800989e:	4619      	mov	r1, r3
 80098a0:	481a      	ldr	r0, [pc, #104]	; (800990c <prvAddCurrentTaskToDelayedList+0xbc>)
 80098a2:	f7fd fe27 	bl	80074f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098a6:	e026      	b.n	80098f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4413      	add	r3, r2
 80098ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098b0:	4b14      	ldr	r3, [pc, #80]	; (8009904 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d209      	bcs.n	80098d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098c0:	4b13      	ldr	r3, [pc, #76]	; (8009910 <prvAddCurrentTaskToDelayedList+0xc0>)
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	4b0f      	ldr	r3, [pc, #60]	; (8009904 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3304      	adds	r3, #4
 80098ca:	4619      	mov	r1, r3
 80098cc:	4610      	mov	r0, r2
 80098ce:	f7fd fe35 	bl	800753c <vListInsert>
}
 80098d2:	e010      	b.n	80098f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098d4:	4b0f      	ldr	r3, [pc, #60]	; (8009914 <prvAddCurrentTaskToDelayedList+0xc4>)
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	4b0a      	ldr	r3, [pc, #40]	; (8009904 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3304      	adds	r3, #4
 80098de:	4619      	mov	r1, r3
 80098e0:	4610      	mov	r0, r2
 80098e2:	f7fd fe2b 	bl	800753c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098e6:	4b0c      	ldr	r3, [pc, #48]	; (8009918 <prvAddCurrentTaskToDelayedList+0xc8>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d202      	bcs.n	80098f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80098f0:	4a09      	ldr	r2, [pc, #36]	; (8009918 <prvAddCurrentTaskToDelayedList+0xc8>)
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	6013      	str	r3, [r2, #0]
}
 80098f6:	bf00      	nop
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	2000595c 	.word	0x2000595c
 8009904:	20005858 	.word	0x20005858
 8009908:	20005960 	.word	0x20005960
 800990c:	20005944 	.word	0x20005944
 8009910:	20005914 	.word	0x20005914
 8009914:	20005910 	.word	0x20005910
 8009918:	20005978 	.word	0x20005978

0800991c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	3b04      	subs	r3, #4
 800992c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3b04      	subs	r3, #4
 800993a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f023 0201 	bic.w	r2, r3, #1
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3b04      	subs	r3, #4
 800994a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800994c:	4a0c      	ldr	r2, [pc, #48]	; (8009980 <pxPortInitialiseStack+0x64>)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3b14      	subs	r3, #20
 8009956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	3b04      	subs	r3, #4
 8009962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f06f 0202 	mvn.w	r2, #2
 800996a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	3b20      	subs	r3, #32
 8009970:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009972:	68fb      	ldr	r3, [r7, #12]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	08009985 	.word	0x08009985

08009984 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800998a:	2300      	movs	r3, #0
 800998c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800998e:	4b14      	ldr	r3, [pc, #80]	; (80099e0 <prvTaskExitError+0x5c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009996:	d00c      	beq.n	80099b2 <prvTaskExitError+0x2e>
	__asm volatile
 8009998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999c:	b672      	cpsid	i
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	b662      	cpsie	i
 80099ac:	60fb      	str	r3, [r7, #12]
}
 80099ae:	bf00      	nop
 80099b0:	e7fe      	b.n	80099b0 <prvTaskExitError+0x2c>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	b672      	cpsid	i
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	b662      	cpsie	i
 80099c6:	60bb      	str	r3, [r7, #8]
}
 80099c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099ca:	bf00      	nop
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0fc      	beq.n	80099cc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099d2:	bf00      	nop
 80099d4:	bf00      	nop
 80099d6:	3714      	adds	r7, #20
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr
 80099e0:	20000020 	.word	0x20000020
	...

080099f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099f0:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <pxCurrentTCBConst2>)
 80099f2:	6819      	ldr	r1, [r3, #0]
 80099f4:	6808      	ldr	r0, [r1, #0]
 80099f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fa:	f380 8809 	msr	PSP, r0
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f04f 0000 	mov.w	r0, #0
 8009a06:	f380 8811 	msr	BASEPRI, r0
 8009a0a:	4770      	bx	lr
 8009a0c:	f3af 8000 	nop.w

08009a10 <pxCurrentTCBConst2>:
 8009a10:	20005858 	.word	0x20005858
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop

08009a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a18:	4808      	ldr	r0, [pc, #32]	; (8009a3c <prvPortStartFirstTask+0x24>)
 8009a1a:	6800      	ldr	r0, [r0, #0]
 8009a1c:	6800      	ldr	r0, [r0, #0]
 8009a1e:	f380 8808 	msr	MSP, r0
 8009a22:	f04f 0000 	mov.w	r0, #0
 8009a26:	f380 8814 	msr	CONTROL, r0
 8009a2a:	b662      	cpsie	i
 8009a2c:	b661      	cpsie	f
 8009a2e:	f3bf 8f4f 	dsb	sy
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	df00      	svc	0
 8009a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a3a:	bf00      	nop
 8009a3c:	e000ed08 	.word	0xe000ed08

08009a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a46:	4b37      	ldr	r3, [pc, #220]	; (8009b24 <xPortStartScheduler+0xe4>)
 8009a48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	22ff      	movs	r2, #255	; 0xff
 8009a56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	4b2f      	ldr	r3, [pc, #188]	; (8009b28 <xPortStartScheduler+0xe8>)
 8009a6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a6e:	4b2f      	ldr	r3, [pc, #188]	; (8009b2c <xPortStartScheduler+0xec>)
 8009a70:	2207      	movs	r2, #7
 8009a72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a74:	e009      	b.n	8009a8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009a76:	4b2d      	ldr	r3, [pc, #180]	; (8009b2c <xPortStartScheduler+0xec>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	4a2b      	ldr	r2, [pc, #172]	; (8009b2c <xPortStartScheduler+0xec>)
 8009a7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a80:	78fb      	ldrb	r3, [r7, #3]
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a92:	2b80      	cmp	r3, #128	; 0x80
 8009a94:	d0ef      	beq.n	8009a76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a96:	4b25      	ldr	r3, [pc, #148]	; (8009b2c <xPortStartScheduler+0xec>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f1c3 0307 	rsb	r3, r3, #7
 8009a9e:	2b04      	cmp	r3, #4
 8009aa0:	d00c      	beq.n	8009abc <xPortStartScheduler+0x7c>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa6:	b672      	cpsid	i
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	b662      	cpsie	i
 8009ab6:	60bb      	str	r3, [r7, #8]
}
 8009ab8:	bf00      	nop
 8009aba:	e7fe      	b.n	8009aba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009abc:	4b1b      	ldr	r3, [pc, #108]	; (8009b2c <xPortStartScheduler+0xec>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	021b      	lsls	r3, r3, #8
 8009ac2:	4a1a      	ldr	r2, [pc, #104]	; (8009b2c <xPortStartScheduler+0xec>)
 8009ac4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ac6:	4b19      	ldr	r3, [pc, #100]	; (8009b2c <xPortStartScheduler+0xec>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ace:	4a17      	ldr	r2, [pc, #92]	; (8009b2c <xPortStartScheduler+0xec>)
 8009ad0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	b2da      	uxtb	r2, r3
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ada:	4b15      	ldr	r3, [pc, #84]	; (8009b30 <xPortStartScheduler+0xf0>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a14      	ldr	r2, [pc, #80]	; (8009b30 <xPortStartScheduler+0xf0>)
 8009ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ae4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ae6:	4b12      	ldr	r3, [pc, #72]	; (8009b30 <xPortStartScheduler+0xf0>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a11      	ldr	r2, [pc, #68]	; (8009b30 <xPortStartScheduler+0xf0>)
 8009aec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009af0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009af2:	f000 f8dd 	bl	8009cb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009af6:	4b0f      	ldr	r3, [pc, #60]	; (8009b34 <xPortStartScheduler+0xf4>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009afc:	f000 f8fc 	bl	8009cf8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b00:	4b0d      	ldr	r3, [pc, #52]	; (8009b38 <xPortStartScheduler+0xf8>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a0c      	ldr	r2, [pc, #48]	; (8009b38 <xPortStartScheduler+0xf8>)
 8009b06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b0a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b0c:	f7ff ff84 	bl	8009a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b10:	f7ff f98e 	bl	8008e30 <vTaskSwitchContext>
	prvTaskExitError();
 8009b14:	f7ff ff36 	bl	8009984 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	e000e400 	.word	0xe000e400
 8009b28:	20005984 	.word	0x20005984
 8009b2c:	20005988 	.word	0x20005988
 8009b30:	e000ed20 	.word	0xe000ed20
 8009b34:	20000020 	.word	0x20000020
 8009b38:	e000ef34 	.word	0xe000ef34

08009b3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b46:	b672      	cpsid	i
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	b662      	cpsie	i
 8009b56:	607b      	str	r3, [r7, #4]
}
 8009b58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b5a:	4b10      	ldr	r3, [pc, #64]	; (8009b9c <vPortEnterCritical+0x60>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	4a0e      	ldr	r2, [pc, #56]	; (8009b9c <vPortEnterCritical+0x60>)
 8009b62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b64:	4b0d      	ldr	r3, [pc, #52]	; (8009b9c <vPortEnterCritical+0x60>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d111      	bne.n	8009b90 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b6c:	4b0c      	ldr	r3, [pc, #48]	; (8009ba0 <vPortEnterCritical+0x64>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00c      	beq.n	8009b90 <vPortEnterCritical+0x54>
	__asm volatile
 8009b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7a:	b672      	cpsid	i
 8009b7c:	f383 8811 	msr	BASEPRI, r3
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	b662      	cpsie	i
 8009b8a:	603b      	str	r3, [r7, #0]
}
 8009b8c:	bf00      	nop
 8009b8e:	e7fe      	b.n	8009b8e <vPortEnterCritical+0x52>
	}
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	20000020 	.word	0x20000020
 8009ba0:	e000ed04 	.word	0xe000ed04

08009ba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009baa:	4b13      	ldr	r3, [pc, #76]	; (8009bf8 <vPortExitCritical+0x54>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10c      	bne.n	8009bcc <vPortExitCritical+0x28>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	b672      	cpsid	i
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	b662      	cpsie	i
 8009bc6:	607b      	str	r3, [r7, #4]
}
 8009bc8:	bf00      	nop
 8009bca:	e7fe      	b.n	8009bca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009bcc:	4b0a      	ldr	r3, [pc, #40]	; (8009bf8 <vPortExitCritical+0x54>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	4a09      	ldr	r2, [pc, #36]	; (8009bf8 <vPortExitCritical+0x54>)
 8009bd4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bd6:	4b08      	ldr	r3, [pc, #32]	; (8009bf8 <vPortExitCritical+0x54>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d105      	bne.n	8009bea <vPortExitCritical+0x46>
 8009bde:	2300      	movs	r3, #0
 8009be0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	f383 8811 	msr	BASEPRI, r3
}
 8009be8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bea:	bf00      	nop
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	20000020 	.word	0x20000020
 8009bfc:	00000000 	.word	0x00000000

08009c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c00:	f3ef 8009 	mrs	r0, PSP
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	4b15      	ldr	r3, [pc, #84]	; (8009c60 <pxCurrentTCBConst>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	f01e 0f10 	tst.w	lr, #16
 8009c10:	bf08      	it	eq
 8009c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1a:	6010      	str	r0, [r2, #0]
 8009c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c24:	b672      	cpsid	i
 8009c26:	f380 8811 	msr	BASEPRI, r0
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	b662      	cpsie	i
 8009c34:	f7ff f8fc 	bl	8008e30 <vTaskSwitchContext>
 8009c38:	f04f 0000 	mov.w	r0, #0
 8009c3c:	f380 8811 	msr	BASEPRI, r0
 8009c40:	bc09      	pop	{r0, r3}
 8009c42:	6819      	ldr	r1, [r3, #0]
 8009c44:	6808      	ldr	r0, [r1, #0]
 8009c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4a:	f01e 0f10 	tst.w	lr, #16
 8009c4e:	bf08      	it	eq
 8009c50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c54:	f380 8809 	msr	PSP, r0
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop

08009c60 <pxCurrentTCBConst>:
 8009c60:	20005858 	.word	0x20005858
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c64:	bf00      	nop
 8009c66:	bf00      	nop

08009c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	b672      	cpsid	i
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	b662      	cpsie	i
 8009c82:	607b      	str	r3, [r7, #4]
}
 8009c84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c86:	f7ff f819 	bl	8008cbc <xTaskIncrementTick>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d003      	beq.n	8009c98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c90:	4b06      	ldr	r3, [pc, #24]	; (8009cac <SysTick_Handler+0x44>)
 8009c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c96:	601a      	str	r2, [r3, #0]
 8009c98:	2300      	movs	r3, #0
 8009c9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	f383 8811 	msr	BASEPRI, r3
}
 8009ca2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ca4:	bf00      	nop
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	e000ed04 	.word	0xe000ed04

08009cb0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009cb4:	4b0b      	ldr	r3, [pc, #44]	; (8009ce4 <vPortSetupTimerInterrupt+0x34>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009cba:	4b0b      	ldr	r3, [pc, #44]	; (8009ce8 <vPortSetupTimerInterrupt+0x38>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009cc0:	4b0a      	ldr	r3, [pc, #40]	; (8009cec <vPortSetupTimerInterrupt+0x3c>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a0a      	ldr	r2, [pc, #40]	; (8009cf0 <vPortSetupTimerInterrupt+0x40>)
 8009cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cca:	099b      	lsrs	r3, r3, #6
 8009ccc:	4a09      	ldr	r2, [pc, #36]	; (8009cf4 <vPortSetupTimerInterrupt+0x44>)
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cd2:	4b04      	ldr	r3, [pc, #16]	; (8009ce4 <vPortSetupTimerInterrupt+0x34>)
 8009cd4:	2207      	movs	r2, #7
 8009cd6:	601a      	str	r2, [r3, #0]
}
 8009cd8:	bf00      	nop
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	e000e010 	.word	0xe000e010
 8009ce8:	e000e018 	.word	0xe000e018
 8009cec:	20000000 	.word	0x20000000
 8009cf0:	10624dd3 	.word	0x10624dd3
 8009cf4:	e000e014 	.word	0xe000e014

08009cf8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009cf8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d08 <vPortEnableVFP+0x10>
 8009cfc:	6801      	ldr	r1, [r0, #0]
 8009cfe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d02:	6001      	str	r1, [r0, #0]
 8009d04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d06:	bf00      	nop
 8009d08:	e000ed88 	.word	0xe000ed88

08009d0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d12:	f3ef 8305 	mrs	r3, IPSR
 8009d16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2b0f      	cmp	r3, #15
 8009d1c:	d916      	bls.n	8009d4c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d1e:	4a19      	ldr	r2, [pc, #100]	; (8009d84 <vPortValidateInterruptPriority+0x78>)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	4413      	add	r3, r2
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d28:	4b17      	ldr	r3, [pc, #92]	; (8009d88 <vPortValidateInterruptPriority+0x7c>)
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	7afa      	ldrb	r2, [r7, #11]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d20c      	bcs.n	8009d4c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d36:	b672      	cpsid	i
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	b662      	cpsie	i
 8009d46:	607b      	str	r3, [r7, #4]
}
 8009d48:	bf00      	nop
 8009d4a:	e7fe      	b.n	8009d4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d4c:	4b0f      	ldr	r3, [pc, #60]	; (8009d8c <vPortValidateInterruptPriority+0x80>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d54:	4b0e      	ldr	r3, [pc, #56]	; (8009d90 <vPortValidateInterruptPriority+0x84>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d90c      	bls.n	8009d76 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	b672      	cpsid	i
 8009d62:	f383 8811 	msr	BASEPRI, r3
 8009d66:	f3bf 8f6f 	isb	sy
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	b662      	cpsie	i
 8009d70:	603b      	str	r3, [r7, #0]
}
 8009d72:	bf00      	nop
 8009d74:	e7fe      	b.n	8009d74 <vPortValidateInterruptPriority+0x68>
	}
 8009d76:	bf00      	nop
 8009d78:	3714      	adds	r7, #20
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	e000e3f0 	.word	0xe000e3f0
 8009d88:	20005984 	.word	0x20005984
 8009d8c:	e000ed0c 	.word	0xe000ed0c
 8009d90:	20005988 	.word	0x20005988

08009d94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08a      	sub	sp, #40	; 0x28
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009da0:	f7fe febe 	bl	8008b20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009da4:	4b5b      	ldr	r3, [pc, #364]	; (8009f14 <pvPortMalloc+0x180>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009dac:	f000 f91a 	bl	8009fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009db0:	4b59      	ldr	r3, [pc, #356]	; (8009f18 <pvPortMalloc+0x184>)
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4013      	ands	r3, r2
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f040 8092 	bne.w	8009ee2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d01f      	beq.n	8009e04 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009dc4:	2208      	movs	r2, #8
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4413      	add	r3, r2
 8009dca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f003 0307 	and.w	r3, r3, #7
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d016      	beq.n	8009e04 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f023 0307 	bic.w	r3, r3, #7
 8009ddc:	3308      	adds	r3, #8
 8009dde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f003 0307 	and.w	r3, r3, #7
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00c      	beq.n	8009e04 <pvPortMalloc+0x70>
	__asm volatile
 8009dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dee:	b672      	cpsid	i
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	b662      	cpsie	i
 8009dfe:	617b      	str	r3, [r7, #20]
}
 8009e00:	bf00      	nop
 8009e02:	e7fe      	b.n	8009e02 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d06b      	beq.n	8009ee2 <pvPortMalloc+0x14e>
 8009e0a:	4b44      	ldr	r3, [pc, #272]	; (8009f1c <pvPortMalloc+0x188>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d866      	bhi.n	8009ee2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e14:	4b42      	ldr	r3, [pc, #264]	; (8009f20 <pvPortMalloc+0x18c>)
 8009e16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e18:	4b41      	ldr	r3, [pc, #260]	; (8009f20 <pvPortMalloc+0x18c>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e1e:	e004      	b.n	8009e2a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d903      	bls.n	8009e3c <pvPortMalloc+0xa8>
 8009e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1f1      	bne.n	8009e20 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e3c:	4b35      	ldr	r3, [pc, #212]	; (8009f14 <pvPortMalloc+0x180>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d04d      	beq.n	8009ee2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e46:	6a3b      	ldr	r3, [r7, #32]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2208      	movs	r2, #8
 8009e4c:	4413      	add	r3, r2
 8009e4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	1ad2      	subs	r2, r2, r3
 8009e60:	2308      	movs	r3, #8
 8009e62:	005b      	lsls	r3, r3, #1
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d921      	bls.n	8009eac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	f003 0307 	and.w	r3, r3, #7
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00c      	beq.n	8009e94 <pvPortMalloc+0x100>
	__asm volatile
 8009e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7e:	b672      	cpsid	i
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	b662      	cpsie	i
 8009e8e:	613b      	str	r3, [r7, #16]
}
 8009e90:	bf00      	nop
 8009e92:	e7fe      	b.n	8009e92 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	685a      	ldr	r2, [r3, #4]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	1ad2      	subs	r2, r2, r3
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ea6:	69b8      	ldr	r0, [r7, #24]
 8009ea8:	f000 f8fe 	bl	800a0a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009eac:	4b1b      	ldr	r3, [pc, #108]	; (8009f1c <pvPortMalloc+0x188>)
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	1ad3      	subs	r3, r2, r3
 8009eb6:	4a19      	ldr	r2, [pc, #100]	; (8009f1c <pvPortMalloc+0x188>)
 8009eb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009eba:	4b18      	ldr	r3, [pc, #96]	; (8009f1c <pvPortMalloc+0x188>)
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	4b19      	ldr	r3, [pc, #100]	; (8009f24 <pvPortMalloc+0x190>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d203      	bcs.n	8009ece <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ec6:	4b15      	ldr	r3, [pc, #84]	; (8009f1c <pvPortMalloc+0x188>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a16      	ldr	r2, [pc, #88]	; (8009f24 <pvPortMalloc+0x190>)
 8009ecc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	4b11      	ldr	r3, [pc, #68]	; (8009f18 <pvPortMalloc+0x184>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	431a      	orrs	r2, r3
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ede:	2200      	movs	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ee2:	f7fe fe2b 	bl	8008b3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	f003 0307 	and.w	r3, r3, #7
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00c      	beq.n	8009f0a <pvPortMalloc+0x176>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef4:	b672      	cpsid	i
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	b662      	cpsie	i
 8009f04:	60fb      	str	r3, [r7, #12]
}
 8009f06:	bf00      	nop
 8009f08:	e7fe      	b.n	8009f08 <pvPortMalloc+0x174>
	return pvReturn;
 8009f0a:	69fb      	ldr	r3, [r7, #28]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3728      	adds	r7, #40	; 0x28
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	20013994 	.word	0x20013994
 8009f18:	200139a0 	.word	0x200139a0
 8009f1c:	20013998 	.word	0x20013998
 8009f20:	2001398c 	.word	0x2001398c
 8009f24:	2001399c 	.word	0x2001399c

08009f28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d04c      	beq.n	8009fd4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f3a:	2308      	movs	r3, #8
 8009f3c:	425b      	negs	r3, r3
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	4413      	add	r3, r2
 8009f42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	4b23      	ldr	r3, [pc, #140]	; (8009fdc <vPortFree+0xb4>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4013      	ands	r3, r2
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10c      	bne.n	8009f70 <vPortFree+0x48>
	__asm volatile
 8009f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5a:	b672      	cpsid	i
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	b662      	cpsie	i
 8009f6a:	60fb      	str	r3, [r7, #12]
}
 8009f6c:	bf00      	nop
 8009f6e:	e7fe      	b.n	8009f6e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00c      	beq.n	8009f92 <vPortFree+0x6a>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	b672      	cpsid	i
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	b662      	cpsie	i
 8009f8c:	60bb      	str	r3, [r7, #8]
}
 8009f8e:	bf00      	nop
 8009f90:	e7fe      	b.n	8009f90 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	4b11      	ldr	r3, [pc, #68]	; (8009fdc <vPortFree+0xb4>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d019      	beq.n	8009fd4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d115      	bne.n	8009fd4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	4b0b      	ldr	r3, [pc, #44]	; (8009fdc <vPortFree+0xb4>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	43db      	mvns	r3, r3
 8009fb2:	401a      	ands	r2, r3
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009fb8:	f7fe fdb2 	bl	8008b20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	685a      	ldr	r2, [r3, #4]
 8009fc0:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <vPortFree+0xb8>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	4a06      	ldr	r2, [pc, #24]	; (8009fe0 <vPortFree+0xb8>)
 8009fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009fca:	6938      	ldr	r0, [r7, #16]
 8009fcc:	f000 f86c 	bl	800a0a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009fd0:	f7fe fdb4 	bl	8008b3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009fd4:	bf00      	nop
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	200139a0 	.word	0x200139a0
 8009fe0:	20013998 	.word	0x20013998

08009fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009fea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8009fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ff0:	4b27      	ldr	r3, [pc, #156]	; (800a090 <prvHeapInit+0xac>)
 8009ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f003 0307 	and.w	r3, r3, #7
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00c      	beq.n	800a018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	3307      	adds	r3, #7
 800a002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f023 0307 	bic.w	r3, r3, #7
 800a00a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	4a1f      	ldr	r2, [pc, #124]	; (800a090 <prvHeapInit+0xac>)
 800a014:	4413      	add	r3, r2
 800a016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a01c:	4a1d      	ldr	r2, [pc, #116]	; (800a094 <prvHeapInit+0xb0>)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a022:	4b1c      	ldr	r3, [pc, #112]	; (800a094 <prvHeapInit+0xb0>)
 800a024:	2200      	movs	r2, #0
 800a026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	4413      	add	r3, r2
 800a02e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a030:	2208      	movs	r2, #8
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	1a9b      	subs	r3, r3, r2
 800a036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f023 0307 	bic.w	r3, r3, #7
 800a03e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	4a15      	ldr	r2, [pc, #84]	; (800a098 <prvHeapInit+0xb4>)
 800a044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a046:	4b14      	ldr	r3, [pc, #80]	; (800a098 <prvHeapInit+0xb4>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2200      	movs	r2, #0
 800a04c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a04e:	4b12      	ldr	r3, [pc, #72]	; (800a098 <prvHeapInit+0xb4>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2200      	movs	r2, #0
 800a054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	1ad2      	subs	r2, r2, r3
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a064:	4b0c      	ldr	r3, [pc, #48]	; (800a098 <prvHeapInit+0xb4>)
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	4a0a      	ldr	r2, [pc, #40]	; (800a09c <prvHeapInit+0xb8>)
 800a072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	4a09      	ldr	r2, [pc, #36]	; (800a0a0 <prvHeapInit+0xbc>)
 800a07a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a07c:	4b09      	ldr	r3, [pc, #36]	; (800a0a4 <prvHeapInit+0xc0>)
 800a07e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a082:	601a      	str	r2, [r3, #0]
}
 800a084:	bf00      	nop
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	2000598c 	.word	0x2000598c
 800a094:	2001398c 	.word	0x2001398c
 800a098:	20013994 	.word	0x20013994
 800a09c:	2001399c 	.word	0x2001399c
 800a0a0:	20013998 	.word	0x20013998
 800a0a4:	200139a0 	.word	0x200139a0

0800a0a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0b0:	4b28      	ldr	r3, [pc, #160]	; (800a154 <prvInsertBlockIntoFreeList+0xac>)
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	e002      	b.n	800a0bc <prvInsertBlockIntoFreeList+0x14>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	60fb      	str	r3, [r7, #12]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d8f7      	bhi.n	800a0b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d108      	bne.n	800a0ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	685a      	ldr	r2, [r3, #4]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	441a      	add	r2, r3
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	441a      	add	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d118      	bne.n	800a130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	4b15      	ldr	r3, [pc, #84]	; (800a158 <prvInsertBlockIntoFreeList+0xb0>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	429a      	cmp	r2, r3
 800a108:	d00d      	beq.n	800a126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685a      	ldr	r2, [r3, #4]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	441a      	add	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	601a      	str	r2, [r3, #0]
 800a124:	e008      	b.n	800a138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a126:	4b0c      	ldr	r3, [pc, #48]	; (800a158 <prvInsertBlockIntoFreeList+0xb0>)
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	601a      	str	r2, [r3, #0]
 800a12e:	e003      	b.n	800a138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d002      	beq.n	800a146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a146:	bf00      	nop
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	2001398c 	.word	0x2001398c
 800a158:	20013994 	.word	0x20013994

0800a15c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a166:	f007 fad5 	bl	8011714 <sys_timeouts_sleeptime>
 800a16a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a172:	d10b      	bne.n	800a18c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a174:	4813      	ldr	r0, [pc, #76]	; (800a1c4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a176:	f00a fb3a 	bl	80147ee <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a17a:	2200      	movs	r2, #0
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f00a faac 	bl	80146dc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a184:	480f      	ldr	r0, [pc, #60]	; (800a1c4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a186:	f00a fb23 	bl	80147d0 <sys_mutex_lock>
    return;
 800a18a:	e018      	b.n	800a1be <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d102      	bne.n	800a198 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a192:	f007 fa85 	bl	80116a0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a196:	e7e6      	b.n	800a166 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a198:	480a      	ldr	r0, [pc, #40]	; (800a1c4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a19a:	f00a fb28 	bl	80147ee <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	6839      	ldr	r1, [r7, #0]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f00a fa9a 	bl	80146dc <sys_arch_mbox_fetch>
 800a1a8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a1aa:	4806      	ldr	r0, [pc, #24]	; (800a1c4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a1ac:	f00a fb10 	bl	80147d0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1b6:	d102      	bne.n	800a1be <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a1b8:	f007 fa72 	bl	80116a0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a1bc:	e7d3      	b.n	800a166 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	200139b0 	.word	0x200139b0

0800a1c8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a1d0:	4810      	ldr	r0, [pc, #64]	; (800a214 <tcpip_thread+0x4c>)
 800a1d2:	f00a fafd 	bl	80147d0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a1d6:	4b10      	ldr	r3, [pc, #64]	; (800a218 <tcpip_thread+0x50>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d005      	beq.n	800a1ea <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a1de:	4b0e      	ldr	r3, [pc, #56]	; (800a218 <tcpip_thread+0x50>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a0e      	ldr	r2, [pc, #56]	; (800a21c <tcpip_thread+0x54>)
 800a1e4:	6812      	ldr	r2, [r2, #0]
 800a1e6:	4610      	mov	r0, r2
 800a1e8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a1ea:	f107 030c 	add.w	r3, r7, #12
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	480b      	ldr	r0, [pc, #44]	; (800a220 <tcpip_thread+0x58>)
 800a1f2:	f7ff ffb3 	bl	800a15c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d106      	bne.n	800a20a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a1fc:	4b09      	ldr	r3, [pc, #36]	; (800a224 <tcpip_thread+0x5c>)
 800a1fe:	2291      	movs	r2, #145	; 0x91
 800a200:	4909      	ldr	r1, [pc, #36]	; (800a228 <tcpip_thread+0x60>)
 800a202:	480a      	ldr	r0, [pc, #40]	; (800a22c <tcpip_thread+0x64>)
 800a204:	f00a fe56 	bl	8014eb4 <iprintf>
      continue;
 800a208:	e003      	b.n	800a212 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 f80f 	bl	800a230 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a212:	e7ea      	b.n	800a1ea <tcpip_thread+0x22>
 800a214:	200139b0 	.word	0x200139b0
 800a218:	200139a4 	.word	0x200139a4
 800a21c:	200139a8 	.word	0x200139a8
 800a220:	200139ac 	.word	0x200139ac
 800a224:	08016c08 	.word	0x08016c08
 800a228:	08016c38 	.word	0x08016c38
 800a22c:	08016c58 	.word	0x08016c58

0800a230 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	d026      	beq.n	800a28e <tcpip_thread_handle_msg+0x5e>
 800a240:	2b02      	cmp	r3, #2
 800a242:	dc2b      	bgt.n	800a29c <tcpip_thread_handle_msg+0x6c>
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <tcpip_thread_handle_msg+0x1e>
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d015      	beq.n	800a278 <tcpip_thread_handle_msg+0x48>
 800a24c:	e026      	b.n	800a29c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	6850      	ldr	r0, [r2, #4]
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	6892      	ldr	r2, [r2, #8]
 800a25a:	4611      	mov	r1, r2
 800a25c:	4798      	blx	r3
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d004      	beq.n	800a26e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	4618      	mov	r0, r3
 800a26a:	f001 fd0b 	bl	800bc84 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a26e:	6879      	ldr	r1, [r7, #4]
 800a270:	2009      	movs	r0, #9
 800a272:	f000 fe63 	bl	800af3c <memp_free>
      break;
 800a276:	e018      	b.n	800a2aa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	6892      	ldr	r2, [r2, #8]
 800a280:	4610      	mov	r0, r2
 800a282:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a284:	6879      	ldr	r1, [r7, #4]
 800a286:	2008      	movs	r0, #8
 800a288:	f000 fe58 	bl	800af3c <memp_free>
      break;
 800a28c:	e00d      	b.n	800a2aa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	6892      	ldr	r2, [r2, #8]
 800a296:	4610      	mov	r0, r2
 800a298:	4798      	blx	r3
      break;
 800a29a:	e006      	b.n	800a2aa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a29c:	4b05      	ldr	r3, [pc, #20]	; (800a2b4 <tcpip_thread_handle_msg+0x84>)
 800a29e:	22cf      	movs	r2, #207	; 0xcf
 800a2a0:	4905      	ldr	r1, [pc, #20]	; (800a2b8 <tcpip_thread_handle_msg+0x88>)
 800a2a2:	4806      	ldr	r0, [pc, #24]	; (800a2bc <tcpip_thread_handle_msg+0x8c>)
 800a2a4:	f00a fe06 	bl	8014eb4 <iprintf>
      break;
 800a2a8:	bf00      	nop
  }
}
 800a2aa:	bf00      	nop
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	08016c08 	.word	0x08016c08
 800a2b8:	08016c38 	.word	0x08016c38
 800a2bc:	08016c58 	.word	0x08016c58

0800a2c0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a2cc:	481a      	ldr	r0, [pc, #104]	; (800a338 <tcpip_inpkt+0x78>)
 800a2ce:	f00a fa44 	bl	801475a <sys_mbox_valid>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d105      	bne.n	800a2e4 <tcpip_inpkt+0x24>
 800a2d8:	4b18      	ldr	r3, [pc, #96]	; (800a33c <tcpip_inpkt+0x7c>)
 800a2da:	22fc      	movs	r2, #252	; 0xfc
 800a2dc:	4918      	ldr	r1, [pc, #96]	; (800a340 <tcpip_inpkt+0x80>)
 800a2de:	4819      	ldr	r0, [pc, #100]	; (800a344 <tcpip_inpkt+0x84>)
 800a2e0:	f00a fde8 	bl	8014eb4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a2e4:	2009      	movs	r0, #9
 800a2e6:	f000 fdb3 	bl	800ae50 <memp_malloc>
 800a2ea:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d102      	bne.n	800a2f8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a2f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2f6:	e01a      	b.n	800a32e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a310:	6979      	ldr	r1, [r7, #20]
 800a312:	4809      	ldr	r0, [pc, #36]	; (800a338 <tcpip_inpkt+0x78>)
 800a314:	f00a f9c8 	bl	80146a8 <sys_mbox_trypost>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d006      	beq.n	800a32c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a31e:	6979      	ldr	r1, [r7, #20]
 800a320:	2009      	movs	r0, #9
 800a322:	f000 fe0b 	bl	800af3c <memp_free>
    return ERR_MEM;
 800a326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a32a:	e000      	b.n	800a32e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a32c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3718      	adds	r7, #24
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	200139ac 	.word	0x200139ac
 800a33c:	08016c08 	.word	0x08016c08
 800a340:	08016c80 	.word	0x08016c80
 800a344:	08016c58 	.word	0x08016c58

0800a348 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a358:	f003 0318 	and.w	r3, r3, #24
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d006      	beq.n	800a36e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a360:	4a08      	ldr	r2, [pc, #32]	; (800a384 <tcpip_input+0x3c>)
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff ffab 	bl	800a2c0 <tcpip_inpkt>
 800a36a:	4603      	mov	r3, r0
 800a36c:	e005      	b.n	800a37a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a36e:	4a06      	ldr	r2, [pc, #24]	; (800a388 <tcpip_input+0x40>)
 800a370:	6839      	ldr	r1, [r7, #0]
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f7ff ffa4 	bl	800a2c0 <tcpip_inpkt>
 800a378:	4603      	mov	r3, r0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	080144b9 	.word	0x080144b9
 800a388:	080133c1 	.word	0x080133c1

0800a38c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a396:	4819      	ldr	r0, [pc, #100]	; (800a3fc <tcpip_try_callback+0x70>)
 800a398:	f00a f9df 	bl	801475a <sys_mbox_valid>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d106      	bne.n	800a3b0 <tcpip_try_callback+0x24>
 800a3a2:	4b17      	ldr	r3, [pc, #92]	; (800a400 <tcpip_try_callback+0x74>)
 800a3a4:	f240 125d 	movw	r2, #349	; 0x15d
 800a3a8:	4916      	ldr	r1, [pc, #88]	; (800a404 <tcpip_try_callback+0x78>)
 800a3aa:	4817      	ldr	r0, [pc, #92]	; (800a408 <tcpip_try_callback+0x7c>)
 800a3ac:	f00a fd82 	bl	8014eb4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a3b0:	2008      	movs	r0, #8
 800a3b2:	f000 fd4d 	bl	800ae50 <memp_malloc>
 800a3b6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d102      	bne.n	800a3c4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a3be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3c2:	e017      	b.n	800a3f4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a3d6:	68f9      	ldr	r1, [r7, #12]
 800a3d8:	4808      	ldr	r0, [pc, #32]	; (800a3fc <tcpip_try_callback+0x70>)
 800a3da:	f00a f965 	bl	80146a8 <sys_mbox_trypost>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d006      	beq.n	800a3f2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a3e4:	68f9      	ldr	r1, [r7, #12]
 800a3e6:	2008      	movs	r0, #8
 800a3e8:	f000 fda8 	bl	800af3c <memp_free>
    return ERR_MEM;
 800a3ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3f0:	e000      	b.n	800a3f4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	200139ac 	.word	0x200139ac
 800a400:	08016c08 	.word	0x08016c08
 800a404:	08016c80 	.word	0x08016c80
 800a408:	08016c58 	.word	0x08016c58

0800a40c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af02      	add	r7, sp, #8
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a416:	f000 f871 	bl	800a4fc <lwip_init>

  tcpip_init_done = initfunc;
 800a41a:	4a17      	ldr	r2, [pc, #92]	; (800a478 <tcpip_init+0x6c>)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a420:	4a16      	ldr	r2, [pc, #88]	; (800a47c <tcpip_init+0x70>)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a426:	2106      	movs	r1, #6
 800a428:	4815      	ldr	r0, [pc, #84]	; (800a480 <tcpip_init+0x74>)
 800a42a:	f00a f91b 	bl	8014664 <sys_mbox_new>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d006      	beq.n	800a442 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a434:	4b13      	ldr	r3, [pc, #76]	; (800a484 <tcpip_init+0x78>)
 800a436:	f240 2261 	movw	r2, #609	; 0x261
 800a43a:	4913      	ldr	r1, [pc, #76]	; (800a488 <tcpip_init+0x7c>)
 800a43c:	4813      	ldr	r0, [pc, #76]	; (800a48c <tcpip_init+0x80>)
 800a43e:	f00a fd39 	bl	8014eb4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a442:	4813      	ldr	r0, [pc, #76]	; (800a490 <tcpip_init+0x84>)
 800a444:	f00a f9a8 	bl	8014798 <sys_mutex_new>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d006      	beq.n	800a45c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a44e:	4b0d      	ldr	r3, [pc, #52]	; (800a484 <tcpip_init+0x78>)
 800a450:	f240 2265 	movw	r2, #613	; 0x265
 800a454:	490f      	ldr	r1, [pc, #60]	; (800a494 <tcpip_init+0x88>)
 800a456:	480d      	ldr	r0, [pc, #52]	; (800a48c <tcpip_init+0x80>)
 800a458:	f00a fd2c 	bl	8014eb4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a45c:	2300      	movs	r3, #0
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a464:	2200      	movs	r2, #0
 800a466:	490c      	ldr	r1, [pc, #48]	; (800a498 <tcpip_init+0x8c>)
 800a468:	480c      	ldr	r0, [pc, #48]	; (800a49c <tcpip_init+0x90>)
 800a46a:	f00a f9cd 	bl	8014808 <sys_thread_new>
}
 800a46e:	bf00      	nop
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	200139a4 	.word	0x200139a4
 800a47c:	200139a8 	.word	0x200139a8
 800a480:	200139ac 	.word	0x200139ac
 800a484:	08016c08 	.word	0x08016c08
 800a488:	08016c90 	.word	0x08016c90
 800a48c:	08016c58 	.word	0x08016c58
 800a490:	200139b0 	.word	0x200139b0
 800a494:	08016cb4 	.word	0x08016cb4
 800a498:	0800a1c9 	.word	0x0800a1c9
 800a49c:	08016cd8 	.word	0x08016cd8

0800a4a0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a4aa:	88fb      	ldrh	r3, [r7, #6]
 800a4ac:	021b      	lsls	r3, r3, #8
 800a4ae:	b21a      	sxth	r2, r3
 800a4b0:	88fb      	ldrh	r3, [r7, #6]
 800a4b2:	0a1b      	lsrs	r3, r3, #8
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	b21b      	sxth	r3, r3
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	b21b      	sxth	r3, r3
 800a4bc:	b29b      	uxth	r3, r3
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b083      	sub	sp, #12
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	061a      	lsls	r2, r3, #24
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	021b      	lsls	r3, r3, #8
 800a4da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4de:	431a      	orrs	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	0a1b      	lsrs	r3, r3, #8
 800a4e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a4e8:	431a      	orrs	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	0e1b      	lsrs	r3, r3, #24
 800a4ee:	4313      	orrs	r3, r2
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a502:	2300      	movs	r3, #0
 800a504:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a506:	f00a f939 	bl	801477c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a50a:	f000 f8d5 	bl	800a6b8 <mem_init>
  memp_init();
 800a50e:	f000 fc31 	bl	800ad74 <memp_init>
  pbuf_init();
  netif_init();
 800a512:	f000 fd3d 	bl	800af90 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a516:	f007 f935 	bl	8011784 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a51a:	f001 fe5d 	bl	800c1d8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a51e:	f007 f877 	bl	8011610 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a522:	bf00      	nop
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
	...

0800a52c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	4603      	mov	r3, r0
 800a534:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a536:	4b05      	ldr	r3, [pc, #20]	; (800a54c <ptr_to_mem+0x20>)
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	88fb      	ldrh	r3, [r7, #6]
 800a53c:	4413      	add	r3, r2
}
 800a53e:	4618      	mov	r0, r3
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	200149e0 	.word	0x200149e0

0800a550 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a558:	4b05      	ldr	r3, [pc, #20]	; (800a570 <mem_to_ptr+0x20>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	b29b      	uxth	r3, r3
}
 800a562:	4618      	mov	r0, r3
 800a564:	370c      	adds	r7, #12
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	200149e0 	.word	0x200149e0

0800a574 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a574:	b590      	push	{r4, r7, lr}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a57c:	4b45      	ldr	r3, [pc, #276]	; (800a694 <plug_holes+0x120>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	429a      	cmp	r2, r3
 800a584:	d206      	bcs.n	800a594 <plug_holes+0x20>
 800a586:	4b44      	ldr	r3, [pc, #272]	; (800a698 <plug_holes+0x124>)
 800a588:	f240 12df 	movw	r2, #479	; 0x1df
 800a58c:	4943      	ldr	r1, [pc, #268]	; (800a69c <plug_holes+0x128>)
 800a58e:	4844      	ldr	r0, [pc, #272]	; (800a6a0 <plug_holes+0x12c>)
 800a590:	f00a fc90 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a594:	4b43      	ldr	r3, [pc, #268]	; (800a6a4 <plug_holes+0x130>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d306      	bcc.n	800a5ac <plug_holes+0x38>
 800a59e:	4b3e      	ldr	r3, [pc, #248]	; (800a698 <plug_holes+0x124>)
 800a5a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a5a4:	4940      	ldr	r1, [pc, #256]	; (800a6a8 <plug_holes+0x134>)
 800a5a6:	483e      	ldr	r0, [pc, #248]	; (800a6a0 <plug_holes+0x12c>)
 800a5a8:	f00a fc84 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	791b      	ldrb	r3, [r3, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d006      	beq.n	800a5c2 <plug_holes+0x4e>
 800a5b4:	4b38      	ldr	r3, [pc, #224]	; (800a698 <plug_holes+0x124>)
 800a5b6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a5ba:	493c      	ldr	r1, [pc, #240]	; (800a6ac <plug_holes+0x138>)
 800a5bc:	4838      	ldr	r0, [pc, #224]	; (800a6a0 <plug_holes+0x12c>)
 800a5be:	f00a fc79 	bl	8014eb4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ca:	d906      	bls.n	800a5da <plug_holes+0x66>
 800a5cc:	4b32      	ldr	r3, [pc, #200]	; (800a698 <plug_holes+0x124>)
 800a5ce:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a5d2:	4937      	ldr	r1, [pc, #220]	; (800a6b0 <plug_holes+0x13c>)
 800a5d4:	4832      	ldr	r0, [pc, #200]	; (800a6a0 <plug_holes+0x12c>)
 800a5d6:	f00a fc6d 	bl	8014eb4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	881b      	ldrh	r3, [r3, #0]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7ff ffa4 	bl	800a52c <ptr_to_mem>
 800a5e4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d024      	beq.n	800a638 <plug_holes+0xc4>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	791b      	ldrb	r3, [r3, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d120      	bne.n	800a638 <plug_holes+0xc4>
 800a5f6:	4b2b      	ldr	r3, [pc, #172]	; (800a6a4 <plug_holes+0x130>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d01b      	beq.n	800a638 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a600:	4b2c      	ldr	r3, [pc, #176]	; (800a6b4 <plug_holes+0x140>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	429a      	cmp	r2, r3
 800a608:	d102      	bne.n	800a610 <plug_holes+0x9c>
      lfree = mem;
 800a60a:	4a2a      	ldr	r2, [pc, #168]	; (800a6b4 <plug_holes+0x140>)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	881a      	ldrh	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	881b      	ldrh	r3, [r3, #0]
 800a61c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a620:	d00a      	beq.n	800a638 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	881b      	ldrh	r3, [r3, #0]
 800a626:	4618      	mov	r0, r3
 800a628:	f7ff ff80 	bl	800a52c <ptr_to_mem>
 800a62c:	4604      	mov	r4, r0
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f7ff ff8e 	bl	800a550 <mem_to_ptr>
 800a634:	4603      	mov	r3, r0
 800a636:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	885b      	ldrh	r3, [r3, #2]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7ff ff75 	bl	800a52c <ptr_to_mem>
 800a642:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d01f      	beq.n	800a68c <plug_holes+0x118>
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	791b      	ldrb	r3, [r3, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d11b      	bne.n	800a68c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a654:	4b17      	ldr	r3, [pc, #92]	; (800a6b4 <plug_holes+0x140>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d102      	bne.n	800a664 <plug_holes+0xf0>
      lfree = pmem;
 800a65e:	4a15      	ldr	r2, [pc, #84]	; (800a6b4 <plug_holes+0x140>)
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	881a      	ldrh	r2, [r3, #0]
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	881b      	ldrh	r3, [r3, #0]
 800a670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a674:	d00a      	beq.n	800a68c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	881b      	ldrh	r3, [r3, #0]
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7ff ff56 	bl	800a52c <ptr_to_mem>
 800a680:	4604      	mov	r4, r0
 800a682:	68b8      	ldr	r0, [r7, #8]
 800a684:	f7ff ff64 	bl	800a550 <mem_to_ptr>
 800a688:	4603      	mov	r3, r0
 800a68a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a68c:	bf00      	nop
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	bd90      	pop	{r4, r7, pc}
 800a694:	200149e0 	.word	0x200149e0
 800a698:	08016ce8 	.word	0x08016ce8
 800a69c:	08016d18 	.word	0x08016d18
 800a6a0:	08016d30 	.word	0x08016d30
 800a6a4:	200149e4 	.word	0x200149e4
 800a6a8:	08016d58 	.word	0x08016d58
 800a6ac:	08016d74 	.word	0x08016d74
 800a6b0:	08016d90 	.word	0x08016d90
 800a6b4:	200149ec 	.word	0x200149ec

0800a6b8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a6be:	4b1f      	ldr	r3, [pc, #124]	; (800a73c <mem_init+0x84>)
 800a6c0:	3303      	adds	r3, #3
 800a6c2:	f023 0303 	bic.w	r3, r3, #3
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	4b1d      	ldr	r3, [pc, #116]	; (800a740 <mem_init+0x88>)
 800a6ca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a6cc:	4b1c      	ldr	r3, [pc, #112]	; (800a740 <mem_init+0x88>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a6d8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a6e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a6ea:	f7ff ff1f 	bl	800a52c <ptr_to_mem>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	4a14      	ldr	r2, [pc, #80]	; (800a744 <mem_init+0x8c>)
 800a6f2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a6f4:	4b13      	ldr	r3, [pc, #76]	; (800a744 <mem_init+0x8c>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a6fc:	4b11      	ldr	r3, [pc, #68]	; (800a744 <mem_init+0x8c>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a704:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a706:	4b0f      	ldr	r3, [pc, #60]	; (800a744 <mem_init+0x8c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a70e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a710:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <mem_init+0x88>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a0c      	ldr	r2, [pc, #48]	; (800a748 <mem_init+0x90>)
 800a716:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a718:	480c      	ldr	r0, [pc, #48]	; (800a74c <mem_init+0x94>)
 800a71a:	f00a f83d 	bl	8014798 <sys_mutex_new>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d006      	beq.n	800a732 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a724:	4b0a      	ldr	r3, [pc, #40]	; (800a750 <mem_init+0x98>)
 800a726:	f240 221f 	movw	r2, #543	; 0x21f
 800a72a:	490a      	ldr	r1, [pc, #40]	; (800a754 <mem_init+0x9c>)
 800a72c:	480a      	ldr	r0, [pc, #40]	; (800a758 <mem_init+0xa0>)
 800a72e:	f00a fbc1 	bl	8014eb4 <iprintf>
  }
}
 800a732:	bf00      	nop
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	200139cc 	.word	0x200139cc
 800a740:	200149e0 	.word	0x200149e0
 800a744:	200149e4 	.word	0x200149e4
 800a748:	200149ec 	.word	0x200149ec
 800a74c:	200149e8 	.word	0x200149e8
 800a750:	08016ce8 	.word	0x08016ce8
 800a754:	08016dbc 	.word	0x08016dbc
 800a758:	08016d30 	.word	0x08016d30

0800a75c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b086      	sub	sp, #24
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7ff fef3 	bl	800a550 <mem_to_ptr>
 800a76a:	4603      	mov	r3, r0
 800a76c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	4618      	mov	r0, r3
 800a774:	f7ff feda 	bl	800a52c <ptr_to_mem>
 800a778:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	885b      	ldrh	r3, [r3, #2]
 800a77e:	4618      	mov	r0, r3
 800a780:	f7ff fed4 	bl	800a52c <ptr_to_mem>
 800a784:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	881b      	ldrh	r3, [r3, #0]
 800a78a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a78e:	d818      	bhi.n	800a7c2 <mem_link_valid+0x66>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	885b      	ldrh	r3, [r3, #2]
 800a794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a798:	d813      	bhi.n	800a7c2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a79e:	8afa      	ldrh	r2, [r7, #22]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d004      	beq.n	800a7ae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	881b      	ldrh	r3, [r3, #0]
 800a7a8:	8afa      	ldrh	r2, [r7, #22]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d109      	bne.n	800a7c2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a7ae:	4b08      	ldr	r3, [pc, #32]	; (800a7d0 <mem_link_valid+0x74>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a7b2:	693a      	ldr	r2, [r7, #16]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d006      	beq.n	800a7c6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	885b      	ldrh	r3, [r3, #2]
 800a7bc:	8afa      	ldrh	r2, [r7, #22]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d001      	beq.n	800a7c6 <mem_link_valid+0x6a>
    return 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e000      	b.n	800a7c8 <mem_link_valid+0x6c>
  }
  return 1;
 800a7c6:	2301      	movs	r3, #1
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3718      	adds	r7, #24
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	200149e4 	.word	0x200149e4

0800a7d4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d070      	beq.n	800a8c4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f003 0303 	and.w	r3, r3, #3
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00d      	beq.n	800a808 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a7ec:	4b37      	ldr	r3, [pc, #220]	; (800a8cc <mem_free+0xf8>)
 800a7ee:	f240 2273 	movw	r2, #627	; 0x273
 800a7f2:	4937      	ldr	r1, [pc, #220]	; (800a8d0 <mem_free+0xfc>)
 800a7f4:	4837      	ldr	r0, [pc, #220]	; (800a8d4 <mem_free+0x100>)
 800a7f6:	f00a fb5d 	bl	8014eb4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a7fa:	f00a f82b 	bl	8014854 <sys_arch_protect>
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f00a f835 	bl	8014870 <sys_arch_unprotect>
    return;
 800a806:	e05e      	b.n	800a8c6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	3b08      	subs	r3, #8
 800a80c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a80e:	4b32      	ldr	r3, [pc, #200]	; (800a8d8 <mem_free+0x104>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	69fa      	ldr	r2, [r7, #28]
 800a814:	429a      	cmp	r2, r3
 800a816:	d306      	bcc.n	800a826 <mem_free+0x52>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f103 020c 	add.w	r2, r3, #12
 800a81e:	4b2f      	ldr	r3, [pc, #188]	; (800a8dc <mem_free+0x108>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	429a      	cmp	r2, r3
 800a824:	d90d      	bls.n	800a842 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a826:	4b29      	ldr	r3, [pc, #164]	; (800a8cc <mem_free+0xf8>)
 800a828:	f240 227f 	movw	r2, #639	; 0x27f
 800a82c:	492c      	ldr	r1, [pc, #176]	; (800a8e0 <mem_free+0x10c>)
 800a82e:	4829      	ldr	r0, [pc, #164]	; (800a8d4 <mem_free+0x100>)
 800a830:	f00a fb40 	bl	8014eb4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a834:	f00a f80e 	bl	8014854 <sys_arch_protect>
 800a838:	6138      	str	r0, [r7, #16]
 800a83a:	6938      	ldr	r0, [r7, #16]
 800a83c:	f00a f818 	bl	8014870 <sys_arch_unprotect>
    return;
 800a840:	e041      	b.n	800a8c6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a842:	4828      	ldr	r0, [pc, #160]	; (800a8e4 <mem_free+0x110>)
 800a844:	f009 ffc4 	bl	80147d0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	791b      	ldrb	r3, [r3, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d110      	bne.n	800a872 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a850:	4b1e      	ldr	r3, [pc, #120]	; (800a8cc <mem_free+0xf8>)
 800a852:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a856:	4924      	ldr	r1, [pc, #144]	; (800a8e8 <mem_free+0x114>)
 800a858:	481e      	ldr	r0, [pc, #120]	; (800a8d4 <mem_free+0x100>)
 800a85a:	f00a fb2b 	bl	8014eb4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a85e:	4821      	ldr	r0, [pc, #132]	; (800a8e4 <mem_free+0x110>)
 800a860:	f009 ffc5 	bl	80147ee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a864:	f009 fff6 	bl	8014854 <sys_arch_protect>
 800a868:	6178      	str	r0, [r7, #20]
 800a86a:	6978      	ldr	r0, [r7, #20]
 800a86c:	f00a f800 	bl	8014870 <sys_arch_unprotect>
    return;
 800a870:	e029      	b.n	800a8c6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a872:	69f8      	ldr	r0, [r7, #28]
 800a874:	f7ff ff72 	bl	800a75c <mem_link_valid>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d110      	bne.n	800a8a0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a87e:	4b13      	ldr	r3, [pc, #76]	; (800a8cc <mem_free+0xf8>)
 800a880:	f240 2295 	movw	r2, #661	; 0x295
 800a884:	4919      	ldr	r1, [pc, #100]	; (800a8ec <mem_free+0x118>)
 800a886:	4813      	ldr	r0, [pc, #76]	; (800a8d4 <mem_free+0x100>)
 800a888:	f00a fb14 	bl	8014eb4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a88c:	4815      	ldr	r0, [pc, #84]	; (800a8e4 <mem_free+0x110>)
 800a88e:	f009 ffae 	bl	80147ee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a892:	f009 ffdf 	bl	8014854 <sys_arch_protect>
 800a896:	61b8      	str	r0, [r7, #24]
 800a898:	69b8      	ldr	r0, [r7, #24]
 800a89a:	f009 ffe9 	bl	8014870 <sys_arch_unprotect>
    return;
 800a89e:	e012      	b.n	800a8c6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a8a6:	4b12      	ldr	r3, [pc, #72]	; (800a8f0 <mem_free+0x11c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	69fa      	ldr	r2, [r7, #28]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d202      	bcs.n	800a8b6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a8b0:	4a0f      	ldr	r2, [pc, #60]	; (800a8f0 <mem_free+0x11c>)
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a8b6:	69f8      	ldr	r0, [r7, #28]
 800a8b8:	f7ff fe5c 	bl	800a574 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a8bc:	4809      	ldr	r0, [pc, #36]	; (800a8e4 <mem_free+0x110>)
 800a8be:	f009 ff96 	bl	80147ee <sys_mutex_unlock>
 800a8c2:	e000      	b.n	800a8c6 <mem_free+0xf2>
    return;
 800a8c4:	bf00      	nop
}
 800a8c6:	3720      	adds	r7, #32
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	08016ce8 	.word	0x08016ce8
 800a8d0:	08016dd8 	.word	0x08016dd8
 800a8d4:	08016d30 	.word	0x08016d30
 800a8d8:	200149e0 	.word	0x200149e0
 800a8dc:	200149e4 	.word	0x200149e4
 800a8e0:	08016dfc 	.word	0x08016dfc
 800a8e4:	200149e8 	.word	0x200149e8
 800a8e8:	08016e18 	.word	0x08016e18
 800a8ec:	08016e40 	.word	0x08016e40
 800a8f0:	200149ec 	.word	0x200149ec

0800a8f4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b088      	sub	sp, #32
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a900:	887b      	ldrh	r3, [r7, #2]
 800a902:	3303      	adds	r3, #3
 800a904:	b29b      	uxth	r3, r3
 800a906:	f023 0303 	bic.w	r3, r3, #3
 800a90a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a90c:	8bfb      	ldrh	r3, [r7, #30]
 800a90e:	2b0b      	cmp	r3, #11
 800a910:	d801      	bhi.n	800a916 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a912:	230c      	movs	r3, #12
 800a914:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a916:	8bfb      	ldrh	r3, [r7, #30]
 800a918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a91c:	d803      	bhi.n	800a926 <mem_trim+0x32>
 800a91e:	8bfa      	ldrh	r2, [r7, #30]
 800a920:	887b      	ldrh	r3, [r7, #2]
 800a922:	429a      	cmp	r2, r3
 800a924:	d201      	bcs.n	800a92a <mem_trim+0x36>
    return NULL;
 800a926:	2300      	movs	r3, #0
 800a928:	e0d8      	b.n	800aadc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a92a:	4b6e      	ldr	r3, [pc, #440]	; (800aae4 <mem_trim+0x1f0>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	429a      	cmp	r2, r3
 800a932:	d304      	bcc.n	800a93e <mem_trim+0x4a>
 800a934:	4b6c      	ldr	r3, [pc, #432]	; (800aae8 <mem_trim+0x1f4>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d306      	bcc.n	800a94c <mem_trim+0x58>
 800a93e:	4b6b      	ldr	r3, [pc, #428]	; (800aaec <mem_trim+0x1f8>)
 800a940:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a944:	496a      	ldr	r1, [pc, #424]	; (800aaf0 <mem_trim+0x1fc>)
 800a946:	486b      	ldr	r0, [pc, #428]	; (800aaf4 <mem_trim+0x200>)
 800a948:	f00a fab4 	bl	8014eb4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a94c:	4b65      	ldr	r3, [pc, #404]	; (800aae4 <mem_trim+0x1f0>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	429a      	cmp	r2, r3
 800a954:	d304      	bcc.n	800a960 <mem_trim+0x6c>
 800a956:	4b64      	ldr	r3, [pc, #400]	; (800aae8 <mem_trim+0x1f4>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d307      	bcc.n	800a970 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a960:	f009 ff78 	bl	8014854 <sys_arch_protect>
 800a964:	60b8      	str	r0, [r7, #8]
 800a966:	68b8      	ldr	r0, [r7, #8]
 800a968:	f009 ff82 	bl	8014870 <sys_arch_unprotect>
    return rmem;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	e0b5      	b.n	800aadc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	3b08      	subs	r3, #8
 800a974:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a976:	69b8      	ldr	r0, [r7, #24]
 800a978:	f7ff fdea 	bl	800a550 <mem_to_ptr>
 800a97c:	4603      	mov	r3, r0
 800a97e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	881a      	ldrh	r2, [r3, #0]
 800a984:	8afb      	ldrh	r3, [r7, #22]
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	b29b      	uxth	r3, r3
 800a98a:	3b08      	subs	r3, #8
 800a98c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a98e:	8bfa      	ldrh	r2, [r7, #30]
 800a990:	8abb      	ldrh	r3, [r7, #20]
 800a992:	429a      	cmp	r2, r3
 800a994:	d906      	bls.n	800a9a4 <mem_trim+0xb0>
 800a996:	4b55      	ldr	r3, [pc, #340]	; (800aaec <mem_trim+0x1f8>)
 800a998:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a99c:	4956      	ldr	r1, [pc, #344]	; (800aaf8 <mem_trim+0x204>)
 800a99e:	4855      	ldr	r0, [pc, #340]	; (800aaf4 <mem_trim+0x200>)
 800a9a0:	f00a fa88 	bl	8014eb4 <iprintf>
  if (newsize > size) {
 800a9a4:	8bfa      	ldrh	r2, [r7, #30]
 800a9a6:	8abb      	ldrh	r3, [r7, #20]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d901      	bls.n	800a9b0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	e095      	b.n	800aadc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a9b0:	8bfa      	ldrh	r2, [r7, #30]
 800a9b2:	8abb      	ldrh	r3, [r7, #20]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d101      	bne.n	800a9bc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	e08f      	b.n	800aadc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a9bc:	484f      	ldr	r0, [pc, #316]	; (800aafc <mem_trim+0x208>)
 800a9be:	f009 ff07 	bl	80147d0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	881b      	ldrh	r3, [r3, #0]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7ff fdb0 	bl	800a52c <ptr_to_mem>
 800a9cc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	791b      	ldrb	r3, [r3, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d13f      	bne.n	800aa56 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	881b      	ldrh	r3, [r3, #0]
 800a9da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9de:	d106      	bne.n	800a9ee <mem_trim+0xfa>
 800a9e0:	4b42      	ldr	r3, [pc, #264]	; (800aaec <mem_trim+0x1f8>)
 800a9e2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a9e6:	4946      	ldr	r1, [pc, #280]	; (800ab00 <mem_trim+0x20c>)
 800a9e8:	4842      	ldr	r0, [pc, #264]	; (800aaf4 <mem_trim+0x200>)
 800a9ea:	f00a fa63 	bl	8014eb4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	881b      	ldrh	r3, [r3, #0]
 800a9f2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a9f4:	8afa      	ldrh	r2, [r7, #22]
 800a9f6:	8bfb      	ldrh	r3, [r7, #30]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	3308      	adds	r3, #8
 800a9fe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800aa00:	4b40      	ldr	r3, [pc, #256]	; (800ab04 <mem_trim+0x210>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d106      	bne.n	800aa18 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800aa0a:	89fb      	ldrh	r3, [r7, #14]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7ff fd8d 	bl	800a52c <ptr_to_mem>
 800aa12:	4603      	mov	r3, r0
 800aa14:	4a3b      	ldr	r2, [pc, #236]	; (800ab04 <mem_trim+0x210>)
 800aa16:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800aa18:	89fb      	ldrh	r3, [r7, #14]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7ff fd86 	bl	800a52c <ptr_to_mem>
 800aa20:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	2200      	movs	r2, #0
 800aa26:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	89ba      	ldrh	r2, [r7, #12]
 800aa2c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	8afa      	ldrh	r2, [r7, #22]
 800aa32:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	89fa      	ldrh	r2, [r7, #14]
 800aa38:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa42:	d047      	beq.n	800aad4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	881b      	ldrh	r3, [r3, #0]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7ff fd6f 	bl	800a52c <ptr_to_mem>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	89fb      	ldrh	r3, [r7, #14]
 800aa52:	8053      	strh	r3, [r2, #2]
 800aa54:	e03e      	b.n	800aad4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800aa56:	8bfb      	ldrh	r3, [r7, #30]
 800aa58:	f103 0214 	add.w	r2, r3, #20
 800aa5c:	8abb      	ldrh	r3, [r7, #20]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d838      	bhi.n	800aad4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800aa62:	8afa      	ldrh	r2, [r7, #22]
 800aa64:	8bfb      	ldrh	r3, [r7, #30]
 800aa66:	4413      	add	r3, r2
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	3308      	adds	r3, #8
 800aa6c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa76:	d106      	bne.n	800aa86 <mem_trim+0x192>
 800aa78:	4b1c      	ldr	r3, [pc, #112]	; (800aaec <mem_trim+0x1f8>)
 800aa7a:	f240 3216 	movw	r2, #790	; 0x316
 800aa7e:	4920      	ldr	r1, [pc, #128]	; (800ab00 <mem_trim+0x20c>)
 800aa80:	481c      	ldr	r0, [pc, #112]	; (800aaf4 <mem_trim+0x200>)
 800aa82:	f00a fa17 	bl	8014eb4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800aa86:	89fb      	ldrh	r3, [r7, #14]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7ff fd4f 	bl	800a52c <ptr_to_mem>
 800aa8e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800aa90:	4b1c      	ldr	r3, [pc, #112]	; (800ab04 <mem_trim+0x210>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d202      	bcs.n	800aaa0 <mem_trim+0x1ac>
      lfree = mem2;
 800aa9a:	4a1a      	ldr	r2, [pc, #104]	; (800ab04 <mem_trim+0x210>)
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	881a      	ldrh	r2, [r3, #0]
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	8afa      	ldrh	r2, [r7, #22]
 800aab2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	89fa      	ldrh	r2, [r7, #14]
 800aab8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	881b      	ldrh	r3, [r3, #0]
 800aabe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aac2:	d007      	beq.n	800aad4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7ff fd2f 	bl	800a52c <ptr_to_mem>
 800aace:	4602      	mov	r2, r0
 800aad0:	89fb      	ldrh	r3, [r7, #14]
 800aad2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800aad4:	4809      	ldr	r0, [pc, #36]	; (800aafc <mem_trim+0x208>)
 800aad6:	f009 fe8a 	bl	80147ee <sys_mutex_unlock>
  return rmem;
 800aada:	687b      	ldr	r3, [r7, #4]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3720      	adds	r7, #32
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	200149e0 	.word	0x200149e0
 800aae8:	200149e4 	.word	0x200149e4
 800aaec:	08016ce8 	.word	0x08016ce8
 800aaf0:	08016e74 	.word	0x08016e74
 800aaf4:	08016d30 	.word	0x08016d30
 800aaf8:	08016e8c 	.word	0x08016e8c
 800aafc:	200149e8 	.word	0x200149e8
 800ab00:	08016eac 	.word	0x08016eac
 800ab04:	200149ec 	.word	0x200149ec

0800ab08 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	4603      	mov	r3, r0
 800ab10:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ab12:	88fb      	ldrh	r3, [r7, #6]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <mem_malloc+0x14>
    return NULL;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	e0e2      	b.n	800ace2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ab1c:	88fb      	ldrh	r3, [r7, #6]
 800ab1e:	3303      	adds	r3, #3
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	f023 0303 	bic.w	r3, r3, #3
 800ab26:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ab28:	8bbb      	ldrh	r3, [r7, #28]
 800ab2a:	2b0b      	cmp	r3, #11
 800ab2c:	d801      	bhi.n	800ab32 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ab2e:	230c      	movs	r3, #12
 800ab30:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ab32:	8bbb      	ldrh	r3, [r7, #28]
 800ab34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab38:	d803      	bhi.n	800ab42 <mem_malloc+0x3a>
 800ab3a:	8bba      	ldrh	r2, [r7, #28]
 800ab3c:	88fb      	ldrh	r3, [r7, #6]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d201      	bcs.n	800ab46 <mem_malloc+0x3e>
    return NULL;
 800ab42:	2300      	movs	r3, #0
 800ab44:	e0cd      	b.n	800ace2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ab46:	4869      	ldr	r0, [pc, #420]	; (800acec <mem_malloc+0x1e4>)
 800ab48:	f009 fe42 	bl	80147d0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ab4c:	4b68      	ldr	r3, [pc, #416]	; (800acf0 <mem_malloc+0x1e8>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7ff fcfd 	bl	800a550 <mem_to_ptr>
 800ab56:	4603      	mov	r3, r0
 800ab58:	83fb      	strh	r3, [r7, #30]
 800ab5a:	e0b7      	b.n	800accc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ab5c:	8bfb      	ldrh	r3, [r7, #30]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff fce4 	bl	800a52c <ptr_to_mem>
 800ab64:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	791b      	ldrb	r3, [r3, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f040 80a7 	bne.w	800acbe <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	881b      	ldrh	r3, [r3, #0]
 800ab74:	461a      	mov	r2, r3
 800ab76:	8bfb      	ldrh	r3, [r7, #30]
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	f1a3 0208 	sub.w	r2, r3, #8
 800ab7e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ab80:	429a      	cmp	r2, r3
 800ab82:	f0c0 809c 	bcc.w	800acbe <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	8bfb      	ldrh	r3, [r7, #30]
 800ab8e:	1ad3      	subs	r3, r2, r3
 800ab90:	f1a3 0208 	sub.w	r2, r3, #8
 800ab94:	8bbb      	ldrh	r3, [r7, #28]
 800ab96:	3314      	adds	r3, #20
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d333      	bcc.n	800ac04 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ab9c:	8bfa      	ldrh	r2, [r7, #30]
 800ab9e:	8bbb      	ldrh	r3, [r7, #28]
 800aba0:	4413      	add	r3, r2
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	3308      	adds	r3, #8
 800aba6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800aba8:	8a7b      	ldrh	r3, [r7, #18]
 800abaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abae:	d106      	bne.n	800abbe <mem_malloc+0xb6>
 800abb0:	4b50      	ldr	r3, [pc, #320]	; (800acf4 <mem_malloc+0x1ec>)
 800abb2:	f240 3287 	movw	r2, #903	; 0x387
 800abb6:	4950      	ldr	r1, [pc, #320]	; (800acf8 <mem_malloc+0x1f0>)
 800abb8:	4850      	ldr	r0, [pc, #320]	; (800acfc <mem_malloc+0x1f4>)
 800abba:	f00a f97b 	bl	8014eb4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800abbe:	8a7b      	ldrh	r3, [r7, #18]
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff fcb3 	bl	800a52c <ptr_to_mem>
 800abc6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	881a      	ldrh	r2, [r3, #0]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	8bfa      	ldrh	r2, [r7, #30]
 800abda:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	8a7a      	ldrh	r2, [r7, #18]
 800abe0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	2201      	movs	r2, #1
 800abe6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	881b      	ldrh	r3, [r3, #0]
 800abec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abf0:	d00b      	beq.n	800ac0a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	881b      	ldrh	r3, [r3, #0]
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7ff fc98 	bl	800a52c <ptr_to_mem>
 800abfc:	4602      	mov	r2, r0
 800abfe:	8a7b      	ldrh	r3, [r7, #18]
 800ac00:	8053      	strh	r3, [r2, #2]
 800ac02:	e002      	b.n	800ac0a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	2201      	movs	r2, #1
 800ac08:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ac0a:	4b39      	ldr	r3, [pc, #228]	; (800acf0 <mem_malloc+0x1e8>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d127      	bne.n	800ac64 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ac14:	4b36      	ldr	r3, [pc, #216]	; (800acf0 <mem_malloc+0x1e8>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ac1a:	e005      	b.n	800ac28 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	881b      	ldrh	r3, [r3, #0]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7ff fc83 	bl	800a52c <ptr_to_mem>
 800ac26:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	791b      	ldrb	r3, [r3, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d004      	beq.n	800ac3a <mem_malloc+0x132>
 800ac30:	4b33      	ldr	r3, [pc, #204]	; (800ad00 <mem_malloc+0x1f8>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	69ba      	ldr	r2, [r7, #24]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d1f0      	bne.n	800ac1c <mem_malloc+0x114>
          }
          lfree = cur;
 800ac3a:	4a2d      	ldr	r2, [pc, #180]	; (800acf0 <mem_malloc+0x1e8>)
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ac40:	4b2b      	ldr	r3, [pc, #172]	; (800acf0 <mem_malloc+0x1e8>)
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	4b2e      	ldr	r3, [pc, #184]	; (800ad00 <mem_malloc+0x1f8>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d00b      	beq.n	800ac64 <mem_malloc+0x15c>
 800ac4c:	4b28      	ldr	r3, [pc, #160]	; (800acf0 <mem_malloc+0x1e8>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	791b      	ldrb	r3, [r3, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d006      	beq.n	800ac64 <mem_malloc+0x15c>
 800ac56:	4b27      	ldr	r3, [pc, #156]	; (800acf4 <mem_malloc+0x1ec>)
 800ac58:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ac5c:	4929      	ldr	r1, [pc, #164]	; (800ad04 <mem_malloc+0x1fc>)
 800ac5e:	4827      	ldr	r0, [pc, #156]	; (800acfc <mem_malloc+0x1f4>)
 800ac60:	f00a f928 	bl	8014eb4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ac64:	4821      	ldr	r0, [pc, #132]	; (800acec <mem_malloc+0x1e4>)
 800ac66:	f009 fdc2 	bl	80147ee <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ac6a:	8bba      	ldrh	r2, [r7, #28]
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	4413      	add	r3, r2
 800ac70:	3308      	adds	r3, #8
 800ac72:	4a23      	ldr	r2, [pc, #140]	; (800ad00 <mem_malloc+0x1f8>)
 800ac74:	6812      	ldr	r2, [r2, #0]
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d906      	bls.n	800ac88 <mem_malloc+0x180>
 800ac7a:	4b1e      	ldr	r3, [pc, #120]	; (800acf4 <mem_malloc+0x1ec>)
 800ac7c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ac80:	4921      	ldr	r1, [pc, #132]	; (800ad08 <mem_malloc+0x200>)
 800ac82:	481e      	ldr	r0, [pc, #120]	; (800acfc <mem_malloc+0x1f4>)
 800ac84:	f00a f916 	bl	8014eb4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	f003 0303 	and.w	r3, r3, #3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d006      	beq.n	800aca0 <mem_malloc+0x198>
 800ac92:	4b18      	ldr	r3, [pc, #96]	; (800acf4 <mem_malloc+0x1ec>)
 800ac94:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ac98:	491c      	ldr	r1, [pc, #112]	; (800ad0c <mem_malloc+0x204>)
 800ac9a:	4818      	ldr	r0, [pc, #96]	; (800acfc <mem_malloc+0x1f4>)
 800ac9c:	f00a f90a 	bl	8014eb4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	f003 0303 	and.w	r3, r3, #3
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d006      	beq.n	800acb8 <mem_malloc+0x1b0>
 800acaa:	4b12      	ldr	r3, [pc, #72]	; (800acf4 <mem_malloc+0x1ec>)
 800acac:	f240 32bd 	movw	r2, #957	; 0x3bd
 800acb0:	4917      	ldr	r1, [pc, #92]	; (800ad10 <mem_malloc+0x208>)
 800acb2:	4812      	ldr	r0, [pc, #72]	; (800acfc <mem_malloc+0x1f4>)
 800acb4:	f00a f8fe 	bl	8014eb4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	3308      	adds	r3, #8
 800acbc:	e011      	b.n	800ace2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800acbe:	8bfb      	ldrh	r3, [r7, #30]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff fc33 	bl	800a52c <ptr_to_mem>
 800acc6:	4603      	mov	r3, r0
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800accc:	8bfa      	ldrh	r2, [r7, #30]
 800acce:	8bbb      	ldrh	r3, [r7, #28]
 800acd0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800acd4:	429a      	cmp	r2, r3
 800acd6:	f4ff af41 	bcc.w	800ab5c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800acda:	4804      	ldr	r0, [pc, #16]	; (800acec <mem_malloc+0x1e4>)
 800acdc:	f009 fd87 	bl	80147ee <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3720      	adds	r7, #32
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	200149e8 	.word	0x200149e8
 800acf0:	200149ec 	.word	0x200149ec
 800acf4:	08016ce8 	.word	0x08016ce8
 800acf8:	08016eac 	.word	0x08016eac
 800acfc:	08016d30 	.word	0x08016d30
 800ad00:	200149e4 	.word	0x200149e4
 800ad04:	08016ec0 	.word	0x08016ec0
 800ad08:	08016edc 	.word	0x08016edc
 800ad0c:	08016f0c 	.word	0x08016f0c
 800ad10:	08016f3c 	.word	0x08016f3c

0800ad14 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	2200      	movs	r2, #0
 800ad22:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	3303      	adds	r3, #3
 800ad2a:	f023 0303 	bic.w	r3, r3, #3
 800ad2e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ad30:	2300      	movs	r3, #0
 800ad32:	60fb      	str	r3, [r7, #12]
 800ad34:	e011      	b.n	800ad5a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	881b      	ldrh	r3, [r3, #0]
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	4413      	add	r3, r2
 800ad52:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	3301      	adds	r3, #1
 800ad58:	60fb      	str	r3, [r7, #12]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	885b      	ldrh	r3, [r3, #2]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	4293      	cmp	r3, r2
 800ad64:	dbe7      	blt.n	800ad36 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ad66:	bf00      	nop
 800ad68:	bf00      	nop
 800ad6a:	3714      	adds	r7, #20
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	80fb      	strh	r3, [r7, #6]
 800ad7e:	e009      	b.n	800ad94 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ad80:	88fb      	ldrh	r3, [r7, #6]
 800ad82:	4a08      	ldr	r2, [pc, #32]	; (800ada4 <memp_init+0x30>)
 800ad84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7ff ffc3 	bl	800ad14 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ad8e:	88fb      	ldrh	r3, [r7, #6]
 800ad90:	3301      	adds	r3, #1
 800ad92:	80fb      	strh	r3, [r7, #6]
 800ad94:	88fb      	ldrh	r3, [r7, #6]
 800ad96:	2b0c      	cmp	r3, #12
 800ad98:	d9f2      	bls.n	800ad80 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ad9a:	bf00      	nop
 800ad9c:	bf00      	nop
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	0801975c 	.word	0x0801975c

0800ada8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800adb0:	f009 fd50 	bl	8014854 <sys_arch_protect>
 800adb4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d015      	beq.n	800adf0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	68ba      	ldr	r2, [r7, #8]
 800adca:	6812      	ldr	r2, [r2, #0]
 800adcc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	f003 0303 	and.w	r3, r3, #3
 800add4:	2b00      	cmp	r3, #0
 800add6:	d006      	beq.n	800ade6 <do_memp_malloc_pool+0x3e>
 800add8:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <do_memp_malloc_pool+0x58>)
 800adda:	f44f 728c 	mov.w	r2, #280	; 0x118
 800adde:	4909      	ldr	r1, [pc, #36]	; (800ae04 <do_memp_malloc_pool+0x5c>)
 800ade0:	4809      	ldr	r0, [pc, #36]	; (800ae08 <do_memp_malloc_pool+0x60>)
 800ade2:	f00a f867 	bl	8014eb4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f009 fd42 	bl	8014870 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	e003      	b.n	800adf8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	f009 fd3d 	bl	8014870 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	08016f60 	.word	0x08016f60
 800ae04:	08016f90 	.word	0x08016f90
 800ae08:	08016fb4 	.word	0x08016fb4

0800ae0c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d106      	bne.n	800ae28 <memp_malloc_pool+0x1c>
 800ae1a:	4b0a      	ldr	r3, [pc, #40]	; (800ae44 <memp_malloc_pool+0x38>)
 800ae1c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800ae20:	4909      	ldr	r1, [pc, #36]	; (800ae48 <memp_malloc_pool+0x3c>)
 800ae22:	480a      	ldr	r0, [pc, #40]	; (800ae4c <memp_malloc_pool+0x40>)
 800ae24:	f00a f846 	bl	8014eb4 <iprintf>
  if (desc == NULL) {
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <memp_malloc_pool+0x26>
    return NULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	e003      	b.n	800ae3a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff ffb8 	bl	800ada8 <do_memp_malloc_pool>
 800ae38:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	08016f60 	.word	0x08016f60
 800ae48:	08016fdc 	.word	0x08016fdc
 800ae4c:	08016fb4 	.word	0x08016fb4

0800ae50 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	4603      	mov	r3, r0
 800ae58:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ae5a:	79fb      	ldrb	r3, [r7, #7]
 800ae5c:	2b0c      	cmp	r3, #12
 800ae5e:	d908      	bls.n	800ae72 <memp_malloc+0x22>
 800ae60:	4b0a      	ldr	r3, [pc, #40]	; (800ae8c <memp_malloc+0x3c>)
 800ae62:	f240 1257 	movw	r2, #343	; 0x157
 800ae66:	490a      	ldr	r1, [pc, #40]	; (800ae90 <memp_malloc+0x40>)
 800ae68:	480a      	ldr	r0, [pc, #40]	; (800ae94 <memp_malloc+0x44>)
 800ae6a:	f00a f823 	bl	8014eb4 <iprintf>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	e008      	b.n	800ae84 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ae72:	79fb      	ldrb	r3, [r7, #7]
 800ae74:	4a08      	ldr	r2, [pc, #32]	; (800ae98 <memp_malloc+0x48>)
 800ae76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7ff ff94 	bl	800ada8 <do_memp_malloc_pool>
 800ae80:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ae82:	68fb      	ldr	r3, [r7, #12]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	08016f60 	.word	0x08016f60
 800ae90:	08016ff0 	.word	0x08016ff0
 800ae94:	08016fb4 	.word	0x08016fb4
 800ae98:	0801975c 	.word	0x0801975c

0800ae9c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	f003 0303 	and.w	r3, r3, #3
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d006      	beq.n	800aebe <do_memp_free_pool+0x22>
 800aeb0:	4b0d      	ldr	r3, [pc, #52]	; (800aee8 <do_memp_free_pool+0x4c>)
 800aeb2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800aeb6:	490d      	ldr	r1, [pc, #52]	; (800aeec <do_memp_free_pool+0x50>)
 800aeb8:	480d      	ldr	r0, [pc, #52]	; (800aef0 <do_memp_free_pool+0x54>)
 800aeba:	f009 fffb 	bl	8014eb4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800aec2:	f009 fcc7 	bl	8014854 <sys_arch_protect>
 800aec6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800aeda:	68b8      	ldr	r0, [r7, #8]
 800aedc:	f009 fcc8 	bl	8014870 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800aee0:	bf00      	nop
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	08016f60 	.word	0x08016f60
 800aeec:	08017010 	.word	0x08017010
 800aef0:	08016fb4 	.word	0x08016fb4

0800aef4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d106      	bne.n	800af12 <memp_free_pool+0x1e>
 800af04:	4b0a      	ldr	r3, [pc, #40]	; (800af30 <memp_free_pool+0x3c>)
 800af06:	f240 1295 	movw	r2, #405	; 0x195
 800af0a:	490a      	ldr	r1, [pc, #40]	; (800af34 <memp_free_pool+0x40>)
 800af0c:	480a      	ldr	r0, [pc, #40]	; (800af38 <memp_free_pool+0x44>)
 800af0e:	f009 ffd1 	bl	8014eb4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d007      	beq.n	800af28 <memp_free_pool+0x34>
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d004      	beq.n	800af28 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800af1e:	6839      	ldr	r1, [r7, #0]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f7ff ffbb 	bl	800ae9c <do_memp_free_pool>
 800af26:	e000      	b.n	800af2a <memp_free_pool+0x36>
    return;
 800af28:	bf00      	nop
}
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	08016f60 	.word	0x08016f60
 800af34:	08016fdc 	.word	0x08016fdc
 800af38:	08016fb4 	.word	0x08016fb4

0800af3c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	4603      	mov	r3, r0
 800af44:	6039      	str	r1, [r7, #0]
 800af46:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800af48:	79fb      	ldrb	r3, [r7, #7]
 800af4a:	2b0c      	cmp	r3, #12
 800af4c:	d907      	bls.n	800af5e <memp_free+0x22>
 800af4e:	4b0c      	ldr	r3, [pc, #48]	; (800af80 <memp_free+0x44>)
 800af50:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800af54:	490b      	ldr	r1, [pc, #44]	; (800af84 <memp_free+0x48>)
 800af56:	480c      	ldr	r0, [pc, #48]	; (800af88 <memp_free+0x4c>)
 800af58:	f009 ffac 	bl	8014eb4 <iprintf>
 800af5c:	e00c      	b.n	800af78 <memp_free+0x3c>

  if (mem == NULL) {
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d008      	beq.n	800af76 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800af64:	79fb      	ldrb	r3, [r7, #7]
 800af66:	4a09      	ldr	r2, [pc, #36]	; (800af8c <memp_free+0x50>)
 800af68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff ff94 	bl	800ae9c <do_memp_free_pool>
 800af74:	e000      	b.n	800af78 <memp_free+0x3c>
    return;
 800af76:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	08016f60 	.word	0x08016f60
 800af84:	08017030 	.word	0x08017030
 800af88:	08016fb4 	.word	0x08016fb4
 800af8c:	0801975c 	.word	0x0801975c

0800af90 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800af90:	b480      	push	{r7}
 800af92:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800af94:	bf00      	nop
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
	...

0800afa0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
 800afac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d108      	bne.n	800afc6 <netif_add+0x26>
 800afb4:	4b57      	ldr	r3, [pc, #348]	; (800b114 <netif_add+0x174>)
 800afb6:	f240 1227 	movw	r2, #295	; 0x127
 800afba:	4957      	ldr	r1, [pc, #348]	; (800b118 <netif_add+0x178>)
 800afbc:	4857      	ldr	r0, [pc, #348]	; (800b11c <netif_add+0x17c>)
 800afbe:	f009 ff79 	bl	8014eb4 <iprintf>
 800afc2:	2300      	movs	r3, #0
 800afc4:	e0a2      	b.n	800b10c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d108      	bne.n	800afde <netif_add+0x3e>
 800afcc:	4b51      	ldr	r3, [pc, #324]	; (800b114 <netif_add+0x174>)
 800afce:	f44f 7294 	mov.w	r2, #296	; 0x128
 800afd2:	4953      	ldr	r1, [pc, #332]	; (800b120 <netif_add+0x180>)
 800afd4:	4851      	ldr	r0, [pc, #324]	; (800b11c <netif_add+0x17c>)
 800afd6:	f009 ff6d 	bl	8014eb4 <iprintf>
 800afda:	2300      	movs	r3, #0
 800afdc:	e096      	b.n	800b10c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d101      	bne.n	800afe8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800afe4:	4b4f      	ldr	r3, [pc, #316]	; (800b124 <netif_add+0x184>)
 800afe6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d101      	bne.n	800aff2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800afee:	4b4d      	ldr	r3, [pc, #308]	; (800b124 <netif_add+0x184>)
 800aff0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d101      	bne.n	800affc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800aff8:	4b4a      	ldr	r3, [pc, #296]	; (800b124 <netif_add+0x184>)
 800affa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	4a45      	ldr	r2, [pc, #276]	; (800b128 <netif_add+0x188>)
 800b012:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6a3a      	ldr	r2, [r7, #32]
 800b02c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b02e:	4b3f      	ldr	r3, [pc, #252]	; (800b12c <netif_add+0x18c>)
 800b030:	781a      	ldrb	r2, [r3, #0]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b03c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	68b9      	ldr	r1, [r7, #8]
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f000 f913 	bl	800b270 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	4798      	blx	r3
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d001      	beq.n	800b05a <netif_add+0xba>
    return NULL;
 800b056:	2300      	movs	r3, #0
 800b058:	e058      	b.n	800b10c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b060:	2bff      	cmp	r3, #255	; 0xff
 800b062:	d103      	bne.n	800b06c <netif_add+0xcc>
        netif->num = 0;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2200      	movs	r2, #0
 800b068:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b070:	4b2f      	ldr	r3, [pc, #188]	; (800b130 <netif_add+0x190>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	617b      	str	r3, [r7, #20]
 800b076:	e02b      	b.n	800b0d0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b078:	697a      	ldr	r2, [r7, #20]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d106      	bne.n	800b08e <netif_add+0xee>
 800b080:	4b24      	ldr	r3, [pc, #144]	; (800b114 <netif_add+0x174>)
 800b082:	f240 128b 	movw	r2, #395	; 0x18b
 800b086:	492b      	ldr	r1, [pc, #172]	; (800b134 <netif_add+0x194>)
 800b088:	4824      	ldr	r0, [pc, #144]	; (800b11c <netif_add+0x17c>)
 800b08a:	f009 ff13 	bl	8014eb4 <iprintf>
        num_netifs++;
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	3301      	adds	r3, #1
 800b092:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	2bff      	cmp	r3, #255	; 0xff
 800b098:	dd06      	ble.n	800b0a8 <netif_add+0x108>
 800b09a:	4b1e      	ldr	r3, [pc, #120]	; (800b114 <netif_add+0x174>)
 800b09c:	f240 128d 	movw	r2, #397	; 0x18d
 800b0a0:	4925      	ldr	r1, [pc, #148]	; (800b138 <netif_add+0x198>)
 800b0a2:	481e      	ldr	r0, [pc, #120]	; (800b11c <netif_add+0x17c>)
 800b0a4:	f009 ff06 	bl	8014eb4 <iprintf>
        if (netif2->num == netif->num) {
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d108      	bne.n	800b0ca <netif_add+0x12a>
          netif->num++;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b0be:	3301      	adds	r3, #1
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b0c8:	e005      	b.n	800b0d6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	617b      	str	r3, [r7, #20]
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1d0      	bne.n	800b078 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1be      	bne.n	800b05a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b0e2:	2bfe      	cmp	r3, #254	; 0xfe
 800b0e4:	d103      	bne.n	800b0ee <netif_add+0x14e>
    netif_num = 0;
 800b0e6:	4b11      	ldr	r3, [pc, #68]	; (800b12c <netif_add+0x18c>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	701a      	strb	r2, [r3, #0]
 800b0ec:	e006      	b.n	800b0fc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	b2da      	uxtb	r2, r3
 800b0f8:	4b0c      	ldr	r3, [pc, #48]	; (800b12c <netif_add+0x18c>)
 800b0fa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b0fc:	4b0c      	ldr	r3, [pc, #48]	; (800b130 <netif_add+0x190>)
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b104:	4a0a      	ldr	r2, [pc, #40]	; (800b130 <netif_add+0x190>)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b10a:	68fb      	ldr	r3, [r7, #12]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3718      	adds	r7, #24
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	0801704c 	.word	0x0801704c
 800b118:	080170e0 	.word	0x080170e0
 800b11c:	0801709c 	.word	0x0801709c
 800b120:	080170fc 	.word	0x080170fc
 800b124:	080197d0 	.word	0x080197d0
 800b128:	0800b54b 	.word	0x0800b54b
 800b12c:	20017ac4 	.word	0x20017ac4
 800b130:	20017abc 	.word	0x20017abc
 800b134:	08017120 	.word	0x08017120
 800b138:	08017134 	.word	0x08017134

0800b13c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b146:	6839      	ldr	r1, [r7, #0]
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f002 fb8d 	bl	800d868 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f006 ff91 	bl	8012078 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b156:	bf00      	nop
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
	...

0800b160 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b086      	sub	sp, #24
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d106      	bne.n	800b180 <netif_do_set_ipaddr+0x20>
 800b172:	4b1d      	ldr	r3, [pc, #116]	; (800b1e8 <netif_do_set_ipaddr+0x88>)
 800b174:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b178:	491c      	ldr	r1, [pc, #112]	; (800b1ec <netif_do_set_ipaddr+0x8c>)
 800b17a:	481d      	ldr	r0, [pc, #116]	; (800b1f0 <netif_do_set_ipaddr+0x90>)
 800b17c:	f009 fe9a 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d106      	bne.n	800b194 <netif_do_set_ipaddr+0x34>
 800b186:	4b18      	ldr	r3, [pc, #96]	; (800b1e8 <netif_do_set_ipaddr+0x88>)
 800b188:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b18c:	4917      	ldr	r1, [pc, #92]	; (800b1ec <netif_do_set_ipaddr+0x8c>)
 800b18e:	4818      	ldr	r0, [pc, #96]	; (800b1f0 <netif_do_set_ipaddr+0x90>)
 800b190:	f009 fe90 	bl	8014eb4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	3304      	adds	r3, #4
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d01c      	beq.n	800b1dc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b1b2:	f107 0314 	add.w	r3, r7, #20
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f7ff ffbf 	bl	800b13c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d002      	beq.n	800b1ca <netif_do_set_ipaddr+0x6a>
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	e000      	b.n	800b1cc <netif_do_set_ipaddr+0x6c>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f000 f8d2 	bl	800b37c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b1d8:	2301      	movs	r3, #1
 800b1da:	e000      	b.n	800b1de <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3718      	adds	r7, #24
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	0801704c 	.word	0x0801704c
 800b1ec:	08017164 	.word	0x08017164
 800b1f0:	0801709c 	.word	0x0801709c

0800b1f4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	3308      	adds	r3, #8
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d00a      	beq.n	800b224 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <netif_do_set_netmask+0x26>
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	e000      	b.n	800b21c <netif_do_set_netmask+0x28>
 800b21a:	2300      	movs	r3, #0
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b220:	2301      	movs	r3, #1
 800b222:	e000      	b.n	800b226 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3714      	adds	r7, #20
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b232:	b480      	push	{r7}
 800b234:	b085      	sub	sp, #20
 800b236:	af00      	add	r7, sp, #0
 800b238:	60f8      	str	r0, [r7, #12]
 800b23a:	60b9      	str	r1, [r7, #8]
 800b23c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	330c      	adds	r3, #12
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d00a      	beq.n	800b262 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d002      	beq.n	800b258 <netif_do_set_gw+0x26>
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	e000      	b.n	800b25a <netif_do_set_gw+0x28>
 800b258:	2300      	movs	r3, #0
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b25e:	2301      	movs	r3, #1
 800b260:	e000      	b.n	800b264 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b088      	sub	sp, #32
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
 800b27c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b27e:	2300      	movs	r3, #0
 800b280:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b282:	2300      	movs	r3, #0
 800b284:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d101      	bne.n	800b290 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b28c:	4b1c      	ldr	r3, [pc, #112]	; (800b300 <netif_set_addr+0x90>)
 800b28e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d101      	bne.n	800b29a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b296:	4b1a      	ldr	r3, [pc, #104]	; (800b300 <netif_set_addr+0x90>)
 800b298:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d101      	bne.n	800b2a4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b2a0:	4b17      	ldr	r3, [pc, #92]	; (800b300 <netif_set_addr+0x90>)
 800b2a2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d003      	beq.n	800b2b2 <netif_set_addr+0x42>
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d101      	bne.n	800b2b6 <netif_set_addr+0x46>
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e000      	b.n	800b2b8 <netif_set_addr+0x48>
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d006      	beq.n	800b2ce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b2c0:	f107 0310 	add.w	r3, r7, #16
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	68b9      	ldr	r1, [r7, #8]
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f7ff ff49 	bl	800b160 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b2ce:	69fa      	ldr	r2, [r7, #28]
 800b2d0:	6879      	ldr	r1, [r7, #4]
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f7ff ff8e 	bl	800b1f4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b2d8:	69ba      	ldr	r2, [r7, #24]
 800b2da:	6839      	ldr	r1, [r7, #0]
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f7ff ffa8 	bl	800b232 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d106      	bne.n	800b2f6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b2e8:	f107 0310 	add.w	r3, r7, #16
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	68b9      	ldr	r1, [r7, #8]
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	f7ff ff35 	bl	800b160 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b2f6:	bf00      	nop
 800b2f8:	3720      	adds	r7, #32
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	080197d0 	.word	0x080197d0

0800b304 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b30c:	4a04      	ldr	r2, [pc, #16]	; (800b320 <netif_set_default+0x1c>)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b312:	bf00      	nop
 800b314:	370c      	adds	r7, #12
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	20017ac0 	.word	0x20017ac0

0800b324 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d107      	bne.n	800b342 <netif_set_up+0x1e>
 800b332:	4b0f      	ldr	r3, [pc, #60]	; (800b370 <netif_set_up+0x4c>)
 800b334:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b338:	490e      	ldr	r1, [pc, #56]	; (800b374 <netif_set_up+0x50>)
 800b33a:	480f      	ldr	r0, [pc, #60]	; (800b378 <netif_set_up+0x54>)
 800b33c:	f009 fdba 	bl	8014eb4 <iprintf>
 800b340:	e013      	b.n	800b36a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b348:	f003 0301 	and.w	r3, r3, #1
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10c      	bne.n	800b36a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b356:	f043 0301 	orr.w	r3, r3, #1
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b362:	2103      	movs	r1, #3
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 f809 	bl	800b37c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	0801704c 	.word	0x0801704c
 800b374:	080171d4 	.word	0x080171d4
 800b378:	0801709c 	.word	0x0801709c

0800b37c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	460b      	mov	r3, r1
 800b386:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d106      	bne.n	800b39c <netif_issue_reports+0x20>
 800b38e:	4b18      	ldr	r3, [pc, #96]	; (800b3f0 <netif_issue_reports+0x74>)
 800b390:	f240 326d 	movw	r2, #877	; 0x36d
 800b394:	4917      	ldr	r1, [pc, #92]	; (800b3f4 <netif_issue_reports+0x78>)
 800b396:	4818      	ldr	r0, [pc, #96]	; (800b3f8 <netif_issue_reports+0x7c>)
 800b398:	f009 fd8c 	bl	8014eb4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3a2:	f003 0304 	and.w	r3, r3, #4
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d01e      	beq.n	800b3e8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3b0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d017      	beq.n	800b3e8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b3b8:	78fb      	ldrb	r3, [r7, #3]
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d013      	beq.n	800b3ea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	3304      	adds	r3, #4
 800b3c6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00e      	beq.n	800b3ea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3d2:	f003 0308 	and.w	r3, r3, #8
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d007      	beq.n	800b3ea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	3304      	adds	r3, #4
 800b3de:	4619      	mov	r1, r3
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f007 fdb3 	bl	8012f4c <etharp_request>
 800b3e6:	e000      	b.n	800b3ea <netif_issue_reports+0x6e>
    return;
 800b3e8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	0801704c 	.word	0x0801704c
 800b3f4:	080171f0 	.word	0x080171f0
 800b3f8:	0801709c 	.word	0x0801709c

0800b3fc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d107      	bne.n	800b41a <netif_set_down+0x1e>
 800b40a:	4b12      	ldr	r3, [pc, #72]	; (800b454 <netif_set_down+0x58>)
 800b40c:	f240 329b 	movw	r2, #923	; 0x39b
 800b410:	4911      	ldr	r1, [pc, #68]	; (800b458 <netif_set_down+0x5c>)
 800b412:	4812      	ldr	r0, [pc, #72]	; (800b45c <netif_set_down+0x60>)
 800b414:	f009 fd4e 	bl	8014eb4 <iprintf>
 800b418:	e019      	b.n	800b44e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b420:	f003 0301 	and.w	r3, r3, #1
 800b424:	2b00      	cmp	r3, #0
 800b426:	d012      	beq.n	800b44e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b42e:	f023 0301 	bic.w	r3, r3, #1
 800b432:	b2da      	uxtb	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b440:	f003 0308 	and.w	r3, r3, #8
 800b444:	2b00      	cmp	r3, #0
 800b446:	d002      	beq.n	800b44e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f007 f93d 	bl	80126c8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	0801704c 	.word	0x0801704c
 800b458:	08017214 	.word	0x08017214
 800b45c:	0801709c 	.word	0x0801709c

0800b460 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d107      	bne.n	800b47e <netif_set_link_up+0x1e>
 800b46e:	4b13      	ldr	r3, [pc, #76]	; (800b4bc <netif_set_link_up+0x5c>)
 800b470:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b474:	4912      	ldr	r1, [pc, #72]	; (800b4c0 <netif_set_link_up+0x60>)
 800b476:	4813      	ldr	r0, [pc, #76]	; (800b4c4 <netif_set_link_up+0x64>)
 800b478:	f009 fd1c 	bl	8014eb4 <iprintf>
 800b47c:	e01b      	b.n	800b4b6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b484:	f003 0304 	and.w	r3, r3, #4
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d114      	bne.n	800b4b6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b492:	f043 0304 	orr.w	r3, r3, #4
 800b496:	b2da      	uxtb	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b49e:	2103      	movs	r1, #3
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7ff ff6b 	bl	800b37c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	69db      	ldr	r3, [r3, #28]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d003      	beq.n	800b4b6 <netif_set_link_up+0x56>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	69db      	ldr	r3, [r3, #28]
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	0801704c 	.word	0x0801704c
 800b4c0:	08017234 	.word	0x08017234
 800b4c4:	0801709c 	.word	0x0801709c

0800b4c8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d107      	bne.n	800b4e6 <netif_set_link_down+0x1e>
 800b4d6:	4b11      	ldr	r3, [pc, #68]	; (800b51c <netif_set_link_down+0x54>)
 800b4d8:	f240 4206 	movw	r2, #1030	; 0x406
 800b4dc:	4910      	ldr	r1, [pc, #64]	; (800b520 <netif_set_link_down+0x58>)
 800b4de:	4811      	ldr	r0, [pc, #68]	; (800b524 <netif_set_link_down+0x5c>)
 800b4e0:	f009 fce8 	bl	8014eb4 <iprintf>
 800b4e4:	e017      	b.n	800b516 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b4ec:	f003 0304 	and.w	r3, r3, #4
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d010      	beq.n	800b516 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b4fa:	f023 0304 	bic.w	r3, r3, #4
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	69db      	ldr	r3, [r3, #28]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d003      	beq.n	800b516 <netif_set_link_down+0x4e>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	69db      	ldr	r3, [r3, #28]
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	0801704c 	.word	0x0801704c
 800b520:	08017258 	.word	0x08017258
 800b524:	0801709c 	.word	0x0801709c

0800b528 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d002      	beq.n	800b53e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	61da      	str	r2, [r3, #28]
  }
}
 800b53e:	bf00      	nop
 800b540:	370c      	adds	r7, #12
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b54a:	b480      	push	{r7}
 800b54c:	b085      	sub	sp, #20
 800b54e:	af00      	add	r7, sp, #0
 800b550:	60f8      	str	r0, [r7, #12]
 800b552:	60b9      	str	r1, [r7, #8]
 800b554:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b556:	f06f 030b 	mvn.w	r3, #11
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
	...

0800b568 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	4603      	mov	r3, r0
 800b570:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b572:	79fb      	ldrb	r3, [r7, #7]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d013      	beq.n	800b5a0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b578:	4b0d      	ldr	r3, [pc, #52]	; (800b5b0 <netif_get_by_index+0x48>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	60fb      	str	r3, [r7, #12]
 800b57e:	e00c      	b.n	800b59a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b586:	3301      	adds	r3, #1
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	79fa      	ldrb	r2, [r7, #7]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d101      	bne.n	800b594 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	e006      	b.n	800b5a2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	60fb      	str	r3, [r7, #12]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1ef      	bne.n	800b580 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3714      	adds	r7, #20
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	20017abc 	.word	0x20017abc

0800b5b4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b5ba:	f009 f94b 	bl	8014854 <sys_arch_protect>
 800b5be:	6038      	str	r0, [r7, #0]
 800b5c0:	4b0d      	ldr	r3, [pc, #52]	; (800b5f8 <pbuf_free_ooseq+0x44>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	701a      	strb	r2, [r3, #0]
 800b5c6:	6838      	ldr	r0, [r7, #0]
 800b5c8:	f009 f952 	bl	8014870 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b5cc:	4b0b      	ldr	r3, [pc, #44]	; (800b5fc <pbuf_free_ooseq+0x48>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	607b      	str	r3, [r7, #4]
 800b5d2:	e00a      	b.n	800b5ea <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f002 f981 	bl	800d8e4 <tcp_free_ooseq>
      return;
 800b5e2:	e005      	b.n	800b5f0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	607b      	str	r3, [r7, #4]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1f1      	bne.n	800b5d4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b5f0:	3708      	adds	r7, #8
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20017ac5 	.word	0x20017ac5
 800b5fc:	20017ad4 	.word	0x20017ad4

0800b600 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b608:	f7ff ffd4 	bl	800b5b4 <pbuf_free_ooseq>
}
 800b60c:	bf00      	nop
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b61a:	f009 f91b 	bl	8014854 <sys_arch_protect>
 800b61e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b620:	4b0f      	ldr	r3, [pc, #60]	; (800b660 <pbuf_pool_is_empty+0x4c>)
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b626:	4b0e      	ldr	r3, [pc, #56]	; (800b660 <pbuf_pool_is_empty+0x4c>)
 800b628:	2201      	movs	r2, #1
 800b62a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f009 f91f 	bl	8014870 <sys_arch_unprotect>

  if (!queued) {
 800b632:	78fb      	ldrb	r3, [r7, #3]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d10f      	bne.n	800b658 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b638:	2100      	movs	r1, #0
 800b63a:	480a      	ldr	r0, [pc, #40]	; (800b664 <pbuf_pool_is_empty+0x50>)
 800b63c:	f7fe fea6 	bl	800a38c <tcpip_try_callback>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d008      	beq.n	800b658 <pbuf_pool_is_empty+0x44>
 800b646:	f009 f905 	bl	8014854 <sys_arch_protect>
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	4b04      	ldr	r3, [pc, #16]	; (800b660 <pbuf_pool_is_empty+0x4c>)
 800b64e:	2200      	movs	r2, #0
 800b650:	701a      	strb	r2, [r3, #0]
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f009 f90c 	bl	8014870 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b658:	bf00      	nop
 800b65a:	3708      	adds	r7, #8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	20017ac5 	.word	0x20017ac5
 800b664:	0800b601 	.word	0x0800b601

0800b668 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	4611      	mov	r1, r2
 800b674:	461a      	mov	r2, r3
 800b676:	460b      	mov	r3, r1
 800b678:	80fb      	strh	r3, [r7, #6]
 800b67a:	4613      	mov	r3, r2
 800b67c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	68ba      	ldr	r2, [r7, #8]
 800b688:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	88fa      	ldrh	r2, [r7, #6]
 800b68e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	88ba      	ldrh	r2, [r7, #4]
 800b694:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b696:	8b3b      	ldrh	r3, [r7, #24]
 800b698:	b2da      	uxtb	r2, r3
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	7f3a      	ldrb	r2, [r7, #28]
 800b6a2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	73da      	strb	r2, [r3, #15]
}
 800b6b0:	bf00      	nop
 800b6b2:	3714      	adds	r7, #20
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b08c      	sub	sp, #48	; 0x30
 800b6c0:	af02      	add	r7, sp, #8
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	71fb      	strb	r3, [r7, #7]
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	80bb      	strh	r3, [r7, #4]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b6ce:	79fb      	ldrb	r3, [r7, #7]
 800b6d0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b6d2:	887b      	ldrh	r3, [r7, #2]
 800b6d4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b6d8:	d07f      	beq.n	800b7da <pbuf_alloc+0x11e>
 800b6da:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b6de:	f300 80c8 	bgt.w	800b872 <pbuf_alloc+0x1b6>
 800b6e2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b6e6:	d010      	beq.n	800b70a <pbuf_alloc+0x4e>
 800b6e8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b6ec:	f300 80c1 	bgt.w	800b872 <pbuf_alloc+0x1b6>
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d002      	beq.n	800b6fa <pbuf_alloc+0x3e>
 800b6f4:	2b41      	cmp	r3, #65	; 0x41
 800b6f6:	f040 80bc 	bne.w	800b872 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b6fa:	887a      	ldrh	r2, [r7, #2]
 800b6fc:	88bb      	ldrh	r3, [r7, #4]
 800b6fe:	4619      	mov	r1, r3
 800b700:	2000      	movs	r0, #0
 800b702:	f000 f8d1 	bl	800b8a8 <pbuf_alloc_reference>
 800b706:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b708:	e0bd      	b.n	800b886 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b70a:	2300      	movs	r3, #0
 800b70c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b70e:	2300      	movs	r3, #0
 800b710:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b712:	88bb      	ldrh	r3, [r7, #4]
 800b714:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b716:	200c      	movs	r0, #12
 800b718:	f7ff fb9a 	bl	800ae50 <memp_malloc>
 800b71c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d109      	bne.n	800b738 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b724:	f7ff ff76 	bl	800b614 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d002      	beq.n	800b734 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b72e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b730:	f000 faa8 	bl	800bc84 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b734:	2300      	movs	r3, #0
 800b736:	e0a7      	b.n	800b888 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b738:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b73a:	3303      	adds	r3, #3
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	f023 0303 	bic.w	r3, r3, #3
 800b742:	b29b      	uxth	r3, r3
 800b744:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b748:	b29b      	uxth	r3, r3
 800b74a:	8b7a      	ldrh	r2, [r7, #26]
 800b74c:	4293      	cmp	r3, r2
 800b74e:	bf28      	it	cs
 800b750:	4613      	movcs	r3, r2
 800b752:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b754:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b756:	3310      	adds	r3, #16
 800b758:	693a      	ldr	r2, [r7, #16]
 800b75a:	4413      	add	r3, r2
 800b75c:	3303      	adds	r3, #3
 800b75e:	f023 0303 	bic.w	r3, r3, #3
 800b762:	4618      	mov	r0, r3
 800b764:	89f9      	ldrh	r1, [r7, #14]
 800b766:	8b7a      	ldrh	r2, [r7, #26]
 800b768:	2300      	movs	r3, #0
 800b76a:	9301      	str	r3, [sp, #4]
 800b76c:	887b      	ldrh	r3, [r7, #2]
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	460b      	mov	r3, r1
 800b772:	4601      	mov	r1, r0
 800b774:	6938      	ldr	r0, [r7, #16]
 800b776:	f7ff ff77 	bl	800b668 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	f003 0303 	and.w	r3, r3, #3
 800b782:	2b00      	cmp	r3, #0
 800b784:	d006      	beq.n	800b794 <pbuf_alloc+0xd8>
 800b786:	4b42      	ldr	r3, [pc, #264]	; (800b890 <pbuf_alloc+0x1d4>)
 800b788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b78c:	4941      	ldr	r1, [pc, #260]	; (800b894 <pbuf_alloc+0x1d8>)
 800b78e:	4842      	ldr	r0, [pc, #264]	; (800b898 <pbuf_alloc+0x1dc>)
 800b790:	f009 fb90 	bl	8014eb4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b796:	3303      	adds	r3, #3
 800b798:	f023 0303 	bic.w	r3, r3, #3
 800b79c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b7a0:	d106      	bne.n	800b7b0 <pbuf_alloc+0xf4>
 800b7a2:	4b3b      	ldr	r3, [pc, #236]	; (800b890 <pbuf_alloc+0x1d4>)
 800b7a4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b7a8:	493c      	ldr	r1, [pc, #240]	; (800b89c <pbuf_alloc+0x1e0>)
 800b7aa:	483b      	ldr	r0, [pc, #236]	; (800b898 <pbuf_alloc+0x1dc>)
 800b7ac:	f009 fb82 	bl	8014eb4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d102      	bne.n	800b7bc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	627b      	str	r3, [r7, #36]	; 0x24
 800b7ba:	e002      	b.n	800b7c2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b7c6:	8b7a      	ldrh	r2, [r7, #26]
 800b7c8:	89fb      	ldrh	r3, [r7, #14]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b7d2:	8b7b      	ldrh	r3, [r7, #26]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d19e      	bne.n	800b716 <pbuf_alloc+0x5a>
      break;
 800b7d8:	e055      	b.n	800b886 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b7da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7dc:	3303      	adds	r3, #3
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	f023 0303 	bic.w	r3, r3, #3
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	88bb      	ldrh	r3, [r7, #4]
 800b7e8:	3303      	adds	r3, #3
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	f023 0303 	bic.w	r3, r3, #3
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	4413      	add	r3, r2
 800b7f4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b7f6:	8b3b      	ldrh	r3, [r7, #24]
 800b7f8:	3310      	adds	r3, #16
 800b7fa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b7fc:	8b3a      	ldrh	r2, [r7, #24]
 800b7fe:	88bb      	ldrh	r3, [r7, #4]
 800b800:	3303      	adds	r3, #3
 800b802:	f023 0303 	bic.w	r3, r3, #3
 800b806:	429a      	cmp	r2, r3
 800b808:	d306      	bcc.n	800b818 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b80a:	8afa      	ldrh	r2, [r7, #22]
 800b80c:	88bb      	ldrh	r3, [r7, #4]
 800b80e:	3303      	adds	r3, #3
 800b810:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b814:	429a      	cmp	r2, r3
 800b816:	d201      	bcs.n	800b81c <pbuf_alloc+0x160>
        return NULL;
 800b818:	2300      	movs	r3, #0
 800b81a:	e035      	b.n	800b888 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b81c:	8afb      	ldrh	r3, [r7, #22]
 800b81e:	4618      	mov	r0, r3
 800b820:	f7ff f972 	bl	800ab08 <mem_malloc>
 800b824:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <pbuf_alloc+0x174>
        return NULL;
 800b82c:	2300      	movs	r3, #0
 800b82e:	e02b      	b.n	800b888 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b830:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b832:	3310      	adds	r3, #16
 800b834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b836:	4413      	add	r3, r2
 800b838:	3303      	adds	r3, #3
 800b83a:	f023 0303 	bic.w	r3, r3, #3
 800b83e:	4618      	mov	r0, r3
 800b840:	88b9      	ldrh	r1, [r7, #4]
 800b842:	88ba      	ldrh	r2, [r7, #4]
 800b844:	2300      	movs	r3, #0
 800b846:	9301      	str	r3, [sp, #4]
 800b848:	887b      	ldrh	r3, [r7, #2]
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	460b      	mov	r3, r1
 800b84e:	4601      	mov	r1, r0
 800b850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b852:	f7ff ff09 	bl	800b668 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	f003 0303 	and.w	r3, r3, #3
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d010      	beq.n	800b884 <pbuf_alloc+0x1c8>
 800b862:	4b0b      	ldr	r3, [pc, #44]	; (800b890 <pbuf_alloc+0x1d4>)
 800b864:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b868:	490d      	ldr	r1, [pc, #52]	; (800b8a0 <pbuf_alloc+0x1e4>)
 800b86a:	480b      	ldr	r0, [pc, #44]	; (800b898 <pbuf_alloc+0x1dc>)
 800b86c:	f009 fb22 	bl	8014eb4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b870:	e008      	b.n	800b884 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b872:	4b07      	ldr	r3, [pc, #28]	; (800b890 <pbuf_alloc+0x1d4>)
 800b874:	f240 1227 	movw	r2, #295	; 0x127
 800b878:	490a      	ldr	r1, [pc, #40]	; (800b8a4 <pbuf_alloc+0x1e8>)
 800b87a:	4807      	ldr	r0, [pc, #28]	; (800b898 <pbuf_alloc+0x1dc>)
 800b87c:	f009 fb1a 	bl	8014eb4 <iprintf>
      return NULL;
 800b880:	2300      	movs	r3, #0
 800b882:	e001      	b.n	800b888 <pbuf_alloc+0x1cc>
      break;
 800b884:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3728      	adds	r7, #40	; 0x28
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	0801727c 	.word	0x0801727c
 800b894:	080172ac 	.word	0x080172ac
 800b898:	080172dc 	.word	0x080172dc
 800b89c:	08017304 	.word	0x08017304
 800b8a0:	08017338 	.word	0x08017338
 800b8a4:	08017364 	.word	0x08017364

0800b8a8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b086      	sub	sp, #24
 800b8ac:	af02      	add	r7, sp, #8
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	807b      	strh	r3, [r7, #2]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b8b8:	883b      	ldrh	r3, [r7, #0]
 800b8ba:	2b41      	cmp	r3, #65	; 0x41
 800b8bc:	d009      	beq.n	800b8d2 <pbuf_alloc_reference+0x2a>
 800b8be:	883b      	ldrh	r3, [r7, #0]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d006      	beq.n	800b8d2 <pbuf_alloc_reference+0x2a>
 800b8c4:	4b0f      	ldr	r3, [pc, #60]	; (800b904 <pbuf_alloc_reference+0x5c>)
 800b8c6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b8ca:	490f      	ldr	r1, [pc, #60]	; (800b908 <pbuf_alloc_reference+0x60>)
 800b8cc:	480f      	ldr	r0, [pc, #60]	; (800b90c <pbuf_alloc_reference+0x64>)
 800b8ce:	f009 faf1 	bl	8014eb4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b8d2:	200b      	movs	r0, #11
 800b8d4:	f7ff fabc 	bl	800ae50 <memp_malloc>
 800b8d8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d101      	bne.n	800b8e4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	e00b      	b.n	800b8fc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b8e4:	8879      	ldrh	r1, [r7, #2]
 800b8e6:	887a      	ldrh	r2, [r7, #2]
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	9301      	str	r3, [sp, #4]
 800b8ec:	883b      	ldrh	r3, [r7, #0]
 800b8ee:	9300      	str	r3, [sp, #0]
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	6879      	ldr	r1, [r7, #4]
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f7ff feb7 	bl	800b668 <pbuf_init_alloced_pbuf>
  return p;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3710      	adds	r7, #16
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	0801727c 	.word	0x0801727c
 800b908:	08017380 	.word	0x08017380
 800b90c:	080172dc 	.word	0x080172dc

0800b910 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b088      	sub	sp, #32
 800b914:	af02      	add	r7, sp, #8
 800b916:	607b      	str	r3, [r7, #4]
 800b918:	4603      	mov	r3, r0
 800b91a:	73fb      	strb	r3, [r7, #15]
 800b91c:	460b      	mov	r3, r1
 800b91e:	81bb      	strh	r3, [r7, #12]
 800b920:	4613      	mov	r3, r2
 800b922:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b924:	7bfb      	ldrb	r3, [r7, #15]
 800b926:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b928:	8a7b      	ldrh	r3, [r7, #18]
 800b92a:	3303      	adds	r3, #3
 800b92c:	f023 0203 	bic.w	r2, r3, #3
 800b930:	89bb      	ldrh	r3, [r7, #12]
 800b932:	441a      	add	r2, r3
 800b934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b936:	429a      	cmp	r2, r3
 800b938:	d901      	bls.n	800b93e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b93a:	2300      	movs	r3, #0
 800b93c:	e018      	b.n	800b970 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b93e:	6a3b      	ldr	r3, [r7, #32]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d007      	beq.n	800b954 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b944:	8a7b      	ldrh	r3, [r7, #18]
 800b946:	3303      	adds	r3, #3
 800b948:	f023 0303 	bic.w	r3, r3, #3
 800b94c:	6a3a      	ldr	r2, [r7, #32]
 800b94e:	4413      	add	r3, r2
 800b950:	617b      	str	r3, [r7, #20]
 800b952:	e001      	b.n	800b958 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b954:	2300      	movs	r3, #0
 800b956:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	89b9      	ldrh	r1, [r7, #12]
 800b95c:	89ba      	ldrh	r2, [r7, #12]
 800b95e:	2302      	movs	r3, #2
 800b960:	9301      	str	r3, [sp, #4]
 800b962:	897b      	ldrh	r3, [r7, #10]
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	460b      	mov	r3, r1
 800b968:	6979      	ldr	r1, [r7, #20]
 800b96a:	f7ff fe7d 	bl	800b668 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b96e:	687b      	ldr	r3, [r7, #4]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3718      	adds	r7, #24
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	460b      	mov	r3, r1
 800b982:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d106      	bne.n	800b998 <pbuf_realloc+0x20>
 800b98a:	4b3a      	ldr	r3, [pc, #232]	; (800ba74 <pbuf_realloc+0xfc>)
 800b98c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b990:	4939      	ldr	r1, [pc, #228]	; (800ba78 <pbuf_realloc+0x100>)
 800b992:	483a      	ldr	r0, [pc, #232]	; (800ba7c <pbuf_realloc+0x104>)
 800b994:	f009 fa8e 	bl	8014eb4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	891b      	ldrh	r3, [r3, #8]
 800b99c:	887a      	ldrh	r2, [r7, #2]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d263      	bcs.n	800ba6a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	891a      	ldrh	r2, [r3, #8]
 800b9a6:	887b      	ldrh	r3, [r7, #2]
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b9ac:	887b      	ldrh	r3, [r7, #2]
 800b9ae:	817b      	strh	r3, [r7, #10]
  q = p;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b9b4:	e018      	b.n	800b9e8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	895b      	ldrh	r3, [r3, #10]
 800b9ba:	897a      	ldrh	r2, [r7, #10]
 800b9bc:	1ad3      	subs	r3, r2, r3
 800b9be:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	891a      	ldrh	r2, [r3, #8]
 800b9c4:	893b      	ldrh	r3, [r7, #8]
 800b9c6:	1ad3      	subs	r3, r2, r3
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d106      	bne.n	800b9e8 <pbuf_realloc+0x70>
 800b9da:	4b26      	ldr	r3, [pc, #152]	; (800ba74 <pbuf_realloc+0xfc>)
 800b9dc:	f240 12af 	movw	r2, #431	; 0x1af
 800b9e0:	4927      	ldr	r1, [pc, #156]	; (800ba80 <pbuf_realloc+0x108>)
 800b9e2:	4826      	ldr	r0, [pc, #152]	; (800ba7c <pbuf_realloc+0x104>)
 800b9e4:	f009 fa66 	bl	8014eb4 <iprintf>
  while (rem_len > q->len) {
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	895b      	ldrh	r3, [r3, #10]
 800b9ec:	897a      	ldrh	r2, [r7, #10]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d8e1      	bhi.n	800b9b6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	7b1b      	ldrb	r3, [r3, #12]
 800b9f6:	f003 030f 	and.w	r3, r3, #15
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d121      	bne.n	800ba42 <pbuf_realloc+0xca>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	895b      	ldrh	r3, [r3, #10]
 800ba02:	897a      	ldrh	r2, [r7, #10]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d01c      	beq.n	800ba42 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	7b5b      	ldrb	r3, [r3, #13]
 800ba0c:	f003 0302 	and.w	r3, r3, #2
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d116      	bne.n	800ba42 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	685a      	ldr	r2, [r3, #4]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	897b      	ldrh	r3, [r7, #10]
 800ba20:	4413      	add	r3, r2
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	4619      	mov	r1, r3
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f7fe ff64 	bl	800a8f4 <mem_trim>
 800ba2c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d106      	bne.n	800ba42 <pbuf_realloc+0xca>
 800ba34:	4b0f      	ldr	r3, [pc, #60]	; (800ba74 <pbuf_realloc+0xfc>)
 800ba36:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ba3a:	4912      	ldr	r1, [pc, #72]	; (800ba84 <pbuf_realloc+0x10c>)
 800ba3c:	480f      	ldr	r0, [pc, #60]	; (800ba7c <pbuf_realloc+0x104>)
 800ba3e:	f009 fa39 	bl	8014eb4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	897a      	ldrh	r2, [r7, #10]
 800ba46:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	895a      	ldrh	r2, [r3, #10]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d004      	beq.n	800ba62 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f000 f911 	bl	800bc84 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2200      	movs	r2, #0
 800ba66:	601a      	str	r2, [r3, #0]
 800ba68:	e000      	b.n	800ba6c <pbuf_realloc+0xf4>
    return;
 800ba6a:	bf00      	nop

}
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	0801727c 	.word	0x0801727c
 800ba78:	08017394 	.word	0x08017394
 800ba7c:	080172dc 	.word	0x080172dc
 800ba80:	080173ac 	.word	0x080173ac
 800ba84:	080173c4 	.word	0x080173c4

0800ba88 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b086      	sub	sp, #24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	4613      	mov	r3, r2
 800ba94:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d106      	bne.n	800baaa <pbuf_add_header_impl+0x22>
 800ba9c:	4b2b      	ldr	r3, [pc, #172]	; (800bb4c <pbuf_add_header_impl+0xc4>)
 800ba9e:	f240 12df 	movw	r2, #479	; 0x1df
 800baa2:	492b      	ldr	r1, [pc, #172]	; (800bb50 <pbuf_add_header_impl+0xc8>)
 800baa4:	482b      	ldr	r0, [pc, #172]	; (800bb54 <pbuf_add_header_impl+0xcc>)
 800baa6:	f009 fa05 	bl	8014eb4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d003      	beq.n	800bab8 <pbuf_add_header_impl+0x30>
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bab6:	d301      	bcc.n	800babc <pbuf_add_header_impl+0x34>
    return 1;
 800bab8:	2301      	movs	r3, #1
 800baba:	e043      	b.n	800bb44 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d101      	bne.n	800bac6 <pbuf_add_header_impl+0x3e>
    return 0;
 800bac2:	2300      	movs	r3, #0
 800bac4:	e03e      	b.n	800bb44 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	891a      	ldrh	r2, [r3, #8]
 800bace:	8a7b      	ldrh	r3, [r7, #18]
 800bad0:	4413      	add	r3, r2
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	8a7a      	ldrh	r2, [r7, #18]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d901      	bls.n	800bade <pbuf_add_header_impl+0x56>
    return 1;
 800bada:	2301      	movs	r3, #1
 800badc:	e032      	b.n	800bb44 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	7b1b      	ldrb	r3, [r3, #12]
 800bae2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bae4:	8a3b      	ldrh	r3, [r7, #16]
 800bae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00c      	beq.n	800bb08 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	685a      	ldr	r2, [r3, #4]
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	425b      	negs	r3, r3
 800baf6:	4413      	add	r3, r2
 800baf8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	3310      	adds	r3, #16
 800bafe:	697a      	ldr	r2, [r7, #20]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d20d      	bcs.n	800bb20 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bb04:	2301      	movs	r3, #1
 800bb06:	e01d      	b.n	800bb44 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bb08:	79fb      	ldrb	r3, [r7, #7]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d006      	beq.n	800bb1c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	685a      	ldr	r2, [r3, #4]
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	425b      	negs	r3, r3
 800bb16:	4413      	add	r3, r2
 800bb18:	617b      	str	r3, [r7, #20]
 800bb1a:	e001      	b.n	800bb20 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e011      	b.n	800bb44 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	697a      	ldr	r2, [r7, #20]
 800bb24:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	895a      	ldrh	r2, [r3, #10]
 800bb2a:	8a7b      	ldrh	r3, [r7, #18]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	891a      	ldrh	r2, [r3, #8]
 800bb38:	8a7b      	ldrh	r3, [r7, #18]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	811a      	strh	r2, [r3, #8]


  return 0;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3718      	adds	r7, #24
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	0801727c 	.word	0x0801727c
 800bb50:	080173e0 	.word	0x080173e0
 800bb54:	080172dc 	.word	0x080172dc

0800bb58 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bb62:	2200      	movs	r2, #0
 800bb64:	6839      	ldr	r1, [r7, #0]
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7ff ff8e 	bl	800ba88 <pbuf_add_header_impl>
 800bb6c:	4603      	mov	r3, r0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
	...

0800bb78 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d106      	bne.n	800bb96 <pbuf_remove_header+0x1e>
 800bb88:	4b20      	ldr	r3, [pc, #128]	; (800bc0c <pbuf_remove_header+0x94>)
 800bb8a:	f240 224b 	movw	r2, #587	; 0x24b
 800bb8e:	4920      	ldr	r1, [pc, #128]	; (800bc10 <pbuf_remove_header+0x98>)
 800bb90:	4820      	ldr	r0, [pc, #128]	; (800bc14 <pbuf_remove_header+0x9c>)
 800bb92:	f009 f98f 	bl	8014eb4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d003      	beq.n	800bba4 <pbuf_remove_header+0x2c>
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bba2:	d301      	bcc.n	800bba8 <pbuf_remove_header+0x30>
    return 1;
 800bba4:	2301      	movs	r3, #1
 800bba6:	e02c      	b.n	800bc02 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d101      	bne.n	800bbb2 <pbuf_remove_header+0x3a>
    return 0;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	e027      	b.n	800bc02 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	895b      	ldrh	r3, [r3, #10]
 800bbba:	89fa      	ldrh	r2, [r7, #14]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d908      	bls.n	800bbd2 <pbuf_remove_header+0x5a>
 800bbc0:	4b12      	ldr	r3, [pc, #72]	; (800bc0c <pbuf_remove_header+0x94>)
 800bbc2:	f240 2255 	movw	r2, #597	; 0x255
 800bbc6:	4914      	ldr	r1, [pc, #80]	; (800bc18 <pbuf_remove_header+0xa0>)
 800bbc8:	4812      	ldr	r0, [pc, #72]	; (800bc14 <pbuf_remove_header+0x9c>)
 800bbca:	f009 f973 	bl	8014eb4 <iprintf>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e017      	b.n	800bc02 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	685a      	ldr	r2, [r3, #4]
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	441a      	add	r2, r3
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	895a      	ldrh	r2, [r3, #10]
 800bbe8:	89fb      	ldrh	r3, [r7, #14]
 800bbea:	1ad3      	subs	r3, r2, r3
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	891a      	ldrh	r2, [r3, #8]
 800bbf6:	89fb      	ldrh	r3, [r7, #14]
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bc00:	2300      	movs	r3, #0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	0801727c 	.word	0x0801727c
 800bc10:	080173e0 	.word	0x080173e0
 800bc14:	080172dc 	.word	0x080172dc
 800bc18:	080173ec 	.word	0x080173ec

0800bc1c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	460b      	mov	r3, r1
 800bc26:	807b      	strh	r3, [r7, #2]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bc2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	da08      	bge.n	800bc46 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bc34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bc38:	425b      	negs	r3, r3
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f7ff ff9b 	bl	800bb78 <pbuf_remove_header>
 800bc42:	4603      	mov	r3, r0
 800bc44:	e007      	b.n	800bc56 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bc46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bc4a:	787a      	ldrb	r2, [r7, #1]
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7ff ff1a 	bl	800ba88 <pbuf_add_header_impl>
 800bc54:	4603      	mov	r3, r0
  }
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b082      	sub	sp, #8
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
 800bc66:	460b      	mov	r3, r1
 800bc68:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bc6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	4619      	mov	r1, r3
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f7ff ffd2 	bl	800bc1c <pbuf_header_impl>
 800bc78:	4603      	mov	r3, r0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3708      	adds	r7, #8
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
	...

0800bc84 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b088      	sub	sp, #32
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10b      	bne.n	800bcaa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d106      	bne.n	800bca6 <pbuf_free+0x22>
 800bc98:	4b3b      	ldr	r3, [pc, #236]	; (800bd88 <pbuf_free+0x104>)
 800bc9a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800bc9e:	493b      	ldr	r1, [pc, #236]	; (800bd8c <pbuf_free+0x108>)
 800bca0:	483b      	ldr	r0, [pc, #236]	; (800bd90 <pbuf_free+0x10c>)
 800bca2:	f009 f907 	bl	8014eb4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bca6:	2300      	movs	r3, #0
 800bca8:	e069      	b.n	800bd7e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bcae:	e062      	b.n	800bd76 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bcb0:	f008 fdd0 	bl	8014854 <sys_arch_protect>
 800bcb4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	7b9b      	ldrb	r3, [r3, #14]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d106      	bne.n	800bccc <pbuf_free+0x48>
 800bcbe:	4b32      	ldr	r3, [pc, #200]	; (800bd88 <pbuf_free+0x104>)
 800bcc0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bcc4:	4933      	ldr	r1, [pc, #204]	; (800bd94 <pbuf_free+0x110>)
 800bcc6:	4832      	ldr	r0, [pc, #200]	; (800bd90 <pbuf_free+0x10c>)
 800bcc8:	f009 f8f4 	bl	8014eb4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	7b9b      	ldrb	r3, [r3, #14]
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	b2da      	uxtb	r2, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	739a      	strb	r2, [r3, #14]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	7b9b      	ldrb	r3, [r3, #14]
 800bcdc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bcde:	69b8      	ldr	r0, [r7, #24]
 800bce0:	f008 fdc6 	bl	8014870 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bce4:	7dfb      	ldrb	r3, [r7, #23]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d143      	bne.n	800bd72 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	7b1b      	ldrb	r3, [r3, #12]
 800bcf4:	f003 030f 	and.w	r3, r3, #15
 800bcf8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	7b5b      	ldrb	r3, [r3, #13]
 800bcfe:	f003 0302 	and.w	r3, r3, #2
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d011      	beq.n	800bd2a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	691b      	ldr	r3, [r3, #16]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d106      	bne.n	800bd20 <pbuf_free+0x9c>
 800bd12:	4b1d      	ldr	r3, [pc, #116]	; (800bd88 <pbuf_free+0x104>)
 800bd14:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bd18:	491f      	ldr	r1, [pc, #124]	; (800bd98 <pbuf_free+0x114>)
 800bd1a:	481d      	ldr	r0, [pc, #116]	; (800bd90 <pbuf_free+0x10c>)
 800bd1c:	f009 f8ca 	bl	8014eb4 <iprintf>
        pc->custom_free_function(p);
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	4798      	blx	r3
 800bd28:	e01d      	b.n	800bd66 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bd2a:	7bfb      	ldrb	r3, [r7, #15]
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d104      	bne.n	800bd3a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bd30:	6879      	ldr	r1, [r7, #4]
 800bd32:	200c      	movs	r0, #12
 800bd34:	f7ff f902 	bl	800af3c <memp_free>
 800bd38:	e015      	b.n	800bd66 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bd3a:	7bfb      	ldrb	r3, [r7, #15]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d104      	bne.n	800bd4a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bd40:	6879      	ldr	r1, [r7, #4]
 800bd42:	200b      	movs	r0, #11
 800bd44:	f7ff f8fa 	bl	800af3c <memp_free>
 800bd48:	e00d      	b.n	800bd66 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bd4a:	7bfb      	ldrb	r3, [r7, #15]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d103      	bne.n	800bd58 <pbuf_free+0xd4>
          mem_free(p);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7fe fd3f 	bl	800a7d4 <mem_free>
 800bd56:	e006      	b.n	800bd66 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bd58:	4b0b      	ldr	r3, [pc, #44]	; (800bd88 <pbuf_free+0x104>)
 800bd5a:	f240 320f 	movw	r2, #783	; 0x30f
 800bd5e:	490f      	ldr	r1, [pc, #60]	; (800bd9c <pbuf_free+0x118>)
 800bd60:	480b      	ldr	r0, [pc, #44]	; (800bd90 <pbuf_free+0x10c>)
 800bd62:	f009 f8a7 	bl	8014eb4 <iprintf>
        }
      }
      count++;
 800bd66:	7ffb      	ldrb	r3, [r7, #31]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	607b      	str	r3, [r7, #4]
 800bd70:	e001      	b.n	800bd76 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bd72:	2300      	movs	r3, #0
 800bd74:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d199      	bne.n	800bcb0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bd7c:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3720      	adds	r7, #32
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	0801727c 	.word	0x0801727c
 800bd8c:	080173e0 	.word	0x080173e0
 800bd90:	080172dc 	.word	0x080172dc
 800bd94:	0801740c 	.word	0x0801740c
 800bd98:	08017424 	.word	0x08017424
 800bd9c:	08017448 	.word	0x08017448

0800bda0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bdac:	e005      	b.n	800bdba <pbuf_clen+0x1a>
    ++len;
 800bdae:	89fb      	ldrh	r3, [r7, #14]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1f6      	bne.n	800bdae <pbuf_clen+0xe>
  }
  return len;
 800bdc0:	89fb      	ldrh	r3, [r7, #14]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3714      	adds	r7, #20
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
	...

0800bdd0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d016      	beq.n	800be0c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bdde:	f008 fd39 	bl	8014854 <sys_arch_protect>
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	7b9b      	ldrb	r3, [r3, #14]
 800bde8:	3301      	adds	r3, #1
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	739a      	strb	r2, [r3, #14]
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f008 fd3d 	bl	8014870 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	7b9b      	ldrb	r3, [r3, #14]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d106      	bne.n	800be0c <pbuf_ref+0x3c>
 800bdfe:	4b05      	ldr	r3, [pc, #20]	; (800be14 <pbuf_ref+0x44>)
 800be00:	f240 3242 	movw	r2, #834	; 0x342
 800be04:	4904      	ldr	r1, [pc, #16]	; (800be18 <pbuf_ref+0x48>)
 800be06:	4805      	ldr	r0, [pc, #20]	; (800be1c <pbuf_ref+0x4c>)
 800be08:	f009 f854 	bl	8014eb4 <iprintf>
  }
}
 800be0c:	bf00      	nop
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	0801727c 	.word	0x0801727c
 800be18:	0801745c 	.word	0x0801745c
 800be1c:	080172dc 	.word	0x080172dc

0800be20 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d002      	beq.n	800be36 <pbuf_cat+0x16>
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d107      	bne.n	800be46 <pbuf_cat+0x26>
 800be36:	4b20      	ldr	r3, [pc, #128]	; (800beb8 <pbuf_cat+0x98>)
 800be38:	f240 3259 	movw	r2, #857	; 0x359
 800be3c:	491f      	ldr	r1, [pc, #124]	; (800bebc <pbuf_cat+0x9c>)
 800be3e:	4820      	ldr	r0, [pc, #128]	; (800bec0 <pbuf_cat+0xa0>)
 800be40:	f009 f838 	bl	8014eb4 <iprintf>
 800be44:	e034      	b.n	800beb0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	60fb      	str	r3, [r7, #12]
 800be4a:	e00a      	b.n	800be62 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	891a      	ldrh	r2, [r3, #8]
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	891b      	ldrh	r3, [r3, #8]
 800be54:	4413      	add	r3, r2
 800be56:	b29a      	uxth	r2, r3
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	60fb      	str	r3, [r7, #12]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1f0      	bne.n	800be4c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	891a      	ldrh	r2, [r3, #8]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	895b      	ldrh	r3, [r3, #10]
 800be72:	429a      	cmp	r2, r3
 800be74:	d006      	beq.n	800be84 <pbuf_cat+0x64>
 800be76:	4b10      	ldr	r3, [pc, #64]	; (800beb8 <pbuf_cat+0x98>)
 800be78:	f240 3262 	movw	r2, #866	; 0x362
 800be7c:	4911      	ldr	r1, [pc, #68]	; (800bec4 <pbuf_cat+0xa4>)
 800be7e:	4810      	ldr	r0, [pc, #64]	; (800bec0 <pbuf_cat+0xa0>)
 800be80:	f009 f818 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d006      	beq.n	800be9a <pbuf_cat+0x7a>
 800be8c:	4b0a      	ldr	r3, [pc, #40]	; (800beb8 <pbuf_cat+0x98>)
 800be8e:	f240 3263 	movw	r2, #867	; 0x363
 800be92:	490d      	ldr	r1, [pc, #52]	; (800bec8 <pbuf_cat+0xa8>)
 800be94:	480a      	ldr	r0, [pc, #40]	; (800bec0 <pbuf_cat+0xa0>)
 800be96:	f009 f80d 	bl	8014eb4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	891a      	ldrh	r2, [r3, #8]
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	891b      	ldrh	r3, [r3, #8]
 800bea2:	4413      	add	r3, r2
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	683a      	ldr	r2, [r7, #0]
 800beae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	0801727c 	.word	0x0801727c
 800bebc:	08017470 	.word	0x08017470
 800bec0:	080172dc 	.word	0x080172dc
 800bec4:	080174a8 	.word	0x080174a8
 800bec8:	080174d8 	.word	0x080174d8

0800becc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bed6:	6839      	ldr	r1, [r7, #0]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7ff ffa1 	bl	800be20 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bede:	6838      	ldr	r0, [r7, #0]
 800bee0:	f7ff ff76 	bl	800bdd0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bee4:	bf00      	nop
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bef6:	2300      	movs	r3, #0
 800bef8:	617b      	str	r3, [r7, #20]
 800befa:	2300      	movs	r3, #0
 800befc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d008      	beq.n	800bf16 <pbuf_copy+0x2a>
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d005      	beq.n	800bf16 <pbuf_copy+0x2a>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	891a      	ldrh	r2, [r3, #8]
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	891b      	ldrh	r3, [r3, #8]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d209      	bcs.n	800bf2a <pbuf_copy+0x3e>
 800bf16:	4b57      	ldr	r3, [pc, #348]	; (800c074 <pbuf_copy+0x188>)
 800bf18:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bf1c:	4956      	ldr	r1, [pc, #344]	; (800c078 <pbuf_copy+0x18c>)
 800bf1e:	4857      	ldr	r0, [pc, #348]	; (800c07c <pbuf_copy+0x190>)
 800bf20:	f008 ffc8 	bl	8014eb4 <iprintf>
 800bf24:	f06f 030f 	mvn.w	r3, #15
 800bf28:	e09f      	b.n	800c06a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	895b      	ldrh	r3, [r3, #10]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	1ad2      	subs	r2, r2, r3
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	895b      	ldrh	r3, [r3, #10]
 800bf38:	4619      	mov	r1, r3
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	1acb      	subs	r3, r1, r3
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d306      	bcc.n	800bf50 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	895b      	ldrh	r3, [r3, #10]
 800bf46:	461a      	mov	r2, r3
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	60fb      	str	r3, [r7, #12]
 800bf4e:	e005      	b.n	800bf5c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	895b      	ldrh	r3, [r3, #10]
 800bf54:	461a      	mov	r2, r3
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685a      	ldr	r2, [r3, #4]
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	18d0      	adds	r0, r2, r3
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	685a      	ldr	r2, [r3, #4]
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	f008 fe8f 	bl	8014c92 <memcpy>
    offset_to += len;
 800bf74:	697a      	ldr	r2, [r7, #20]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	4413      	add	r3, r2
 800bf7a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bf7c:	693a      	ldr	r2, [r7, #16]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	4413      	add	r3, r2
 800bf82:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	895b      	ldrh	r3, [r3, #10]
 800bf88:	461a      	mov	r2, r3
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d906      	bls.n	800bf9e <pbuf_copy+0xb2>
 800bf90:	4b38      	ldr	r3, [pc, #224]	; (800c074 <pbuf_copy+0x188>)
 800bf92:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bf96:	493a      	ldr	r1, [pc, #232]	; (800c080 <pbuf_copy+0x194>)
 800bf98:	4838      	ldr	r0, [pc, #224]	; (800c07c <pbuf_copy+0x190>)
 800bf9a:	f008 ff8b 	bl	8014eb4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	895b      	ldrh	r3, [r3, #10]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d906      	bls.n	800bfb8 <pbuf_copy+0xcc>
 800bfaa:	4b32      	ldr	r3, [pc, #200]	; (800c074 <pbuf_copy+0x188>)
 800bfac:	f240 32da 	movw	r2, #986	; 0x3da
 800bfb0:	4934      	ldr	r1, [pc, #208]	; (800c084 <pbuf_copy+0x198>)
 800bfb2:	4832      	ldr	r0, [pc, #200]	; (800c07c <pbuf_copy+0x190>)
 800bfb4:	f008 ff7e 	bl	8014eb4 <iprintf>
    if (offset_from >= p_from->len) {
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	895b      	ldrh	r3, [r3, #10]
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d304      	bcc.n	800bfce <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	895b      	ldrh	r3, [r3, #10]
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d114      	bne.n	800c004 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d10c      	bne.n	800c004 <pbuf_copy+0x118>
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d009      	beq.n	800c004 <pbuf_copy+0x118>
 800bff0:	4b20      	ldr	r3, [pc, #128]	; (800c074 <pbuf_copy+0x188>)
 800bff2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bff6:	4924      	ldr	r1, [pc, #144]	; (800c088 <pbuf_copy+0x19c>)
 800bff8:	4820      	ldr	r0, [pc, #128]	; (800c07c <pbuf_copy+0x190>)
 800bffa:	f008 ff5b 	bl	8014eb4 <iprintf>
 800bffe:	f06f 030f 	mvn.w	r3, #15
 800c002:	e032      	b.n	800c06a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d013      	beq.n	800c032 <pbuf_copy+0x146>
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	895a      	ldrh	r2, [r3, #10]
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	891b      	ldrh	r3, [r3, #8]
 800c012:	429a      	cmp	r2, r3
 800c014:	d10d      	bne.n	800c032 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d009      	beq.n	800c032 <pbuf_copy+0x146>
 800c01e:	4b15      	ldr	r3, [pc, #84]	; (800c074 <pbuf_copy+0x188>)
 800c020:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c024:	4919      	ldr	r1, [pc, #100]	; (800c08c <pbuf_copy+0x1a0>)
 800c026:	4815      	ldr	r0, [pc, #84]	; (800c07c <pbuf_copy+0x190>)
 800c028:	f008 ff44 	bl	8014eb4 <iprintf>
 800c02c:	f06f 0305 	mvn.w	r3, #5
 800c030:	e01b      	b.n	800c06a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d013      	beq.n	800c060 <pbuf_copy+0x174>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	895a      	ldrh	r2, [r3, #10]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	891b      	ldrh	r3, [r3, #8]
 800c040:	429a      	cmp	r2, r3
 800c042:	d10d      	bne.n	800c060 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d009      	beq.n	800c060 <pbuf_copy+0x174>
 800c04c:	4b09      	ldr	r3, [pc, #36]	; (800c074 <pbuf_copy+0x188>)
 800c04e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c052:	490e      	ldr	r1, [pc, #56]	; (800c08c <pbuf_copy+0x1a0>)
 800c054:	4809      	ldr	r0, [pc, #36]	; (800c07c <pbuf_copy+0x190>)
 800c056:	f008 ff2d 	bl	8014eb4 <iprintf>
 800c05a:	f06f 0305 	mvn.w	r3, #5
 800c05e:	e004      	b.n	800c06a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	f47f af61 	bne.w	800bf2a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3718      	adds	r7, #24
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	0801727c 	.word	0x0801727c
 800c078:	08017524 	.word	0x08017524
 800c07c:	080172dc 	.word	0x080172dc
 800c080:	08017554 	.word	0x08017554
 800c084:	0801756c 	.word	0x0801756c
 800c088:	08017588 	.word	0x08017588
 800c08c:	08017598 	.word	0x08017598

0800c090 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b088      	sub	sp, #32
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	4611      	mov	r1, r2
 800c09c:	461a      	mov	r2, r3
 800c09e:	460b      	mov	r3, r1
 800c0a0:	80fb      	strh	r3, [r7, #6]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d108      	bne.n	800c0c6 <pbuf_copy_partial+0x36>
 800c0b4:	4b2b      	ldr	r3, [pc, #172]	; (800c164 <pbuf_copy_partial+0xd4>)
 800c0b6:	f240 420a 	movw	r2, #1034	; 0x40a
 800c0ba:	492b      	ldr	r1, [pc, #172]	; (800c168 <pbuf_copy_partial+0xd8>)
 800c0bc:	482b      	ldr	r0, [pc, #172]	; (800c16c <pbuf_copy_partial+0xdc>)
 800c0be:	f008 fef9 	bl	8014eb4 <iprintf>
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	e04a      	b.n	800c15c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d108      	bne.n	800c0de <pbuf_copy_partial+0x4e>
 800c0cc:	4b25      	ldr	r3, [pc, #148]	; (800c164 <pbuf_copy_partial+0xd4>)
 800c0ce:	f240 420b 	movw	r2, #1035	; 0x40b
 800c0d2:	4927      	ldr	r1, [pc, #156]	; (800c170 <pbuf_copy_partial+0xe0>)
 800c0d4:	4825      	ldr	r0, [pc, #148]	; (800c16c <pbuf_copy_partial+0xdc>)
 800c0d6:	f008 feed 	bl	8014eb4 <iprintf>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	e03e      	b.n	800c15c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	61fb      	str	r3, [r7, #28]
 800c0e2:	e034      	b.n	800c14e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c0e4:	88bb      	ldrh	r3, [r7, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00a      	beq.n	800c100 <pbuf_copy_partial+0x70>
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	895b      	ldrh	r3, [r3, #10]
 800c0ee:	88ba      	ldrh	r2, [r7, #4]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d305      	bcc.n	800c100 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	895b      	ldrh	r3, [r3, #10]
 800c0f8:	88ba      	ldrh	r2, [r7, #4]
 800c0fa:	1ad3      	subs	r3, r2, r3
 800c0fc:	80bb      	strh	r3, [r7, #4]
 800c0fe:	e023      	b.n	800c148 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	895a      	ldrh	r2, [r3, #10]
 800c104:	88bb      	ldrh	r3, [r7, #4]
 800c106:	1ad3      	subs	r3, r2, r3
 800c108:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c10a:	8b3a      	ldrh	r2, [r7, #24]
 800c10c:	88fb      	ldrh	r3, [r7, #6]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d901      	bls.n	800c116 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c112:	88fb      	ldrh	r3, [r7, #6]
 800c114:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c116:	8b7b      	ldrh	r3, [r7, #26]
 800c118:	68ba      	ldr	r2, [r7, #8]
 800c11a:	18d0      	adds	r0, r2, r3
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	685a      	ldr	r2, [r3, #4]
 800c120:	88bb      	ldrh	r3, [r7, #4]
 800c122:	4413      	add	r3, r2
 800c124:	8b3a      	ldrh	r2, [r7, #24]
 800c126:	4619      	mov	r1, r3
 800c128:	f008 fdb3 	bl	8014c92 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c12c:	8afa      	ldrh	r2, [r7, #22]
 800c12e:	8b3b      	ldrh	r3, [r7, #24]
 800c130:	4413      	add	r3, r2
 800c132:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c134:	8b7a      	ldrh	r2, [r7, #26]
 800c136:	8b3b      	ldrh	r3, [r7, #24]
 800c138:	4413      	add	r3, r2
 800c13a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c13c:	88fa      	ldrh	r2, [r7, #6]
 800c13e:	8b3b      	ldrh	r3, [r7, #24]
 800c140:	1ad3      	subs	r3, r2, r3
 800c142:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c144:	2300      	movs	r3, #0
 800c146:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	61fb      	str	r3, [r7, #28]
 800c14e:	88fb      	ldrh	r3, [r7, #6]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d002      	beq.n	800c15a <pbuf_copy_partial+0xca>
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1c4      	bne.n	800c0e4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c15a:	8afb      	ldrh	r3, [r7, #22]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3720      	adds	r7, #32
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	0801727c 	.word	0x0801727c
 800c168:	080175c4 	.word	0x080175c4
 800c16c:	080172dc 	.word	0x080172dc
 800c170:	080175e4 	.word	0x080175e4

0800c174 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	4603      	mov	r3, r0
 800c17c:	603a      	str	r2, [r7, #0]
 800c17e:	71fb      	strb	r3, [r7, #7]
 800c180:	460b      	mov	r3, r1
 800c182:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	8919      	ldrh	r1, [r3, #8]
 800c188:	88ba      	ldrh	r2, [r7, #4]
 800c18a:	79fb      	ldrb	r3, [r7, #7]
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7ff fa95 	bl	800b6bc <pbuf_alloc>
 800c192:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d101      	bne.n	800c19e <pbuf_clone+0x2a>
    return NULL;
 800c19a:	2300      	movs	r3, #0
 800c19c:	e011      	b.n	800c1c2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c19e:	6839      	ldr	r1, [r7, #0]
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f7ff fea3 	bl	800beec <pbuf_copy>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c1aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d006      	beq.n	800c1c0 <pbuf_clone+0x4c>
 800c1b2:	4b06      	ldr	r3, [pc, #24]	; (800c1cc <pbuf_clone+0x58>)
 800c1b4:	f240 5224 	movw	r2, #1316	; 0x524
 800c1b8:	4905      	ldr	r1, [pc, #20]	; (800c1d0 <pbuf_clone+0x5c>)
 800c1ba:	4806      	ldr	r0, [pc, #24]	; (800c1d4 <pbuf_clone+0x60>)
 800c1bc:	f008 fe7a 	bl	8014eb4 <iprintf>
  return q;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	0801727c 	.word	0x0801727c
 800c1d0:	080176f0 	.word	0x080176f0
 800c1d4:	080172dc 	.word	0x080172dc

0800c1d8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c1dc:	f008 ff26 	bl	801502c <rand>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	4b01      	ldr	r3, [pc, #4]	; (800c1f8 <tcp_init+0x20>)
 800c1f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c1f4:	bf00      	nop
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	20000024 	.word	0x20000024

0800c1fc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	7d1b      	ldrb	r3, [r3, #20]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d105      	bne.n	800c218 <tcp_free+0x1c>
 800c20c:	4b06      	ldr	r3, [pc, #24]	; (800c228 <tcp_free+0x2c>)
 800c20e:	22d4      	movs	r2, #212	; 0xd4
 800c210:	4906      	ldr	r1, [pc, #24]	; (800c22c <tcp_free+0x30>)
 800c212:	4807      	ldr	r0, [pc, #28]	; (800c230 <tcp_free+0x34>)
 800c214:	f008 fe4e 	bl	8014eb4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c218:	6879      	ldr	r1, [r7, #4]
 800c21a:	2001      	movs	r0, #1
 800c21c:	f7fe fe8e 	bl	800af3c <memp_free>
}
 800c220:	bf00      	nop
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	0801777c 	.word	0x0801777c
 800c22c:	080177ac 	.word	0x080177ac
 800c230:	080177c0 	.word	0x080177c0

0800c234 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	7d1b      	ldrb	r3, [r3, #20]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d105      	bne.n	800c250 <tcp_free_listen+0x1c>
 800c244:	4b06      	ldr	r3, [pc, #24]	; (800c260 <tcp_free_listen+0x2c>)
 800c246:	22df      	movs	r2, #223	; 0xdf
 800c248:	4906      	ldr	r1, [pc, #24]	; (800c264 <tcp_free_listen+0x30>)
 800c24a:	4807      	ldr	r0, [pc, #28]	; (800c268 <tcp_free_listen+0x34>)
 800c24c:	f008 fe32 	bl	8014eb4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c250:	6879      	ldr	r1, [r7, #4]
 800c252:	2002      	movs	r0, #2
 800c254:	f7fe fe72 	bl	800af3c <memp_free>
}
 800c258:	bf00      	nop
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	0801777c 	.word	0x0801777c
 800c264:	080177e8 	.word	0x080177e8
 800c268:	080177c0 	.word	0x080177c0

0800c26c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c270:	f000 fea2 	bl	800cfb8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c274:	4b07      	ldr	r3, [pc, #28]	; (800c294 <tcp_tmr+0x28>)
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	3301      	adds	r3, #1
 800c27a:	b2da      	uxtb	r2, r3
 800c27c:	4b05      	ldr	r3, [pc, #20]	; (800c294 <tcp_tmr+0x28>)
 800c27e:	701a      	strb	r2, [r3, #0]
 800c280:	4b04      	ldr	r3, [pc, #16]	; (800c294 <tcp_tmr+0x28>)
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	f003 0301 	and.w	r3, r3, #1
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d001      	beq.n	800c290 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c28c:	f000 fb54 	bl	800c938 <tcp_slowtmr>
  }
}
 800c290:	bf00      	nop
 800c292:	bd80      	pop	{r7, pc}
 800c294:	20017add 	.word	0x20017add

0800c298 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d105      	bne.n	800c2b4 <tcp_remove_listener+0x1c>
 800c2a8:	4b0d      	ldr	r3, [pc, #52]	; (800c2e0 <tcp_remove_listener+0x48>)
 800c2aa:	22ff      	movs	r2, #255	; 0xff
 800c2ac:	490d      	ldr	r1, [pc, #52]	; (800c2e4 <tcp_remove_listener+0x4c>)
 800c2ae:	480e      	ldr	r0, [pc, #56]	; (800c2e8 <tcp_remove_listener+0x50>)
 800c2b0:	f008 fe00 	bl	8014eb4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	60fb      	str	r3, [r7, #12]
 800c2b8:	e00a      	b.n	800c2d0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d102      	bne.n	800c2ca <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	60fb      	str	r3, [r7, #12]
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1f1      	bne.n	800c2ba <tcp_remove_listener+0x22>
    }
  }
}
 800c2d6:	bf00      	nop
 800c2d8:	bf00      	nop
 800c2da:	3710      	adds	r7, #16
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	0801777c 	.word	0x0801777c
 800c2e4:	08017804 	.word	0x08017804
 800c2e8:	080177c0 	.word	0x080177c0

0800c2ec <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d106      	bne.n	800c308 <tcp_listen_closed+0x1c>
 800c2fa:	4b14      	ldr	r3, [pc, #80]	; (800c34c <tcp_listen_closed+0x60>)
 800c2fc:	f240 1211 	movw	r2, #273	; 0x111
 800c300:	4913      	ldr	r1, [pc, #76]	; (800c350 <tcp_listen_closed+0x64>)
 800c302:	4814      	ldr	r0, [pc, #80]	; (800c354 <tcp_listen_closed+0x68>)
 800c304:	f008 fdd6 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	7d1b      	ldrb	r3, [r3, #20]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d006      	beq.n	800c31e <tcp_listen_closed+0x32>
 800c310:	4b0e      	ldr	r3, [pc, #56]	; (800c34c <tcp_listen_closed+0x60>)
 800c312:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c316:	4910      	ldr	r1, [pc, #64]	; (800c358 <tcp_listen_closed+0x6c>)
 800c318:	480e      	ldr	r0, [pc, #56]	; (800c354 <tcp_listen_closed+0x68>)
 800c31a:	f008 fdcb 	bl	8014eb4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c31e:	2301      	movs	r3, #1
 800c320:	60fb      	str	r3, [r7, #12]
 800c322:	e00b      	b.n	800c33c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c324:	4a0d      	ldr	r2, [pc, #52]	; (800c35c <tcp_listen_closed+0x70>)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	6879      	ldr	r1, [r7, #4]
 800c330:	4618      	mov	r0, r3
 800c332:	f7ff ffb1 	bl	800c298 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	3301      	adds	r3, #1
 800c33a:	60fb      	str	r3, [r7, #12]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2b03      	cmp	r3, #3
 800c340:	d9f0      	bls.n	800c324 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c342:	bf00      	nop
 800c344:	bf00      	nop
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	0801777c 	.word	0x0801777c
 800c350:	0801782c 	.word	0x0801782c
 800c354:	080177c0 	.word	0x080177c0
 800c358:	08017838 	.word	0x08017838
 800c35c:	080197a8 	.word	0x080197a8

0800c360 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c360:	b5b0      	push	{r4, r5, r7, lr}
 800c362:	b088      	sub	sp, #32
 800c364:	af04      	add	r7, sp, #16
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	460b      	mov	r3, r1
 800c36a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d106      	bne.n	800c380 <tcp_close_shutdown+0x20>
 800c372:	4b63      	ldr	r3, [pc, #396]	; (800c500 <tcp_close_shutdown+0x1a0>)
 800c374:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c378:	4962      	ldr	r1, [pc, #392]	; (800c504 <tcp_close_shutdown+0x1a4>)
 800c37a:	4863      	ldr	r0, [pc, #396]	; (800c508 <tcp_close_shutdown+0x1a8>)
 800c37c:	f008 fd9a 	bl	8014eb4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c380:	78fb      	ldrb	r3, [r7, #3]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d066      	beq.n	800c454 <tcp_close_shutdown+0xf4>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	7d1b      	ldrb	r3, [r3, #20]
 800c38a:	2b04      	cmp	r3, #4
 800c38c:	d003      	beq.n	800c396 <tcp_close_shutdown+0x36>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	7d1b      	ldrb	r3, [r3, #20]
 800c392:	2b07      	cmp	r3, #7
 800c394:	d15e      	bne.n	800c454 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d104      	bne.n	800c3a8 <tcp_close_shutdown+0x48>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c3a6:	d055      	beq.n	800c454 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	8b5b      	ldrh	r3, [r3, #26]
 800c3ac:	f003 0310 	and.w	r3, r3, #16
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d106      	bne.n	800c3c2 <tcp_close_shutdown+0x62>
 800c3b4:	4b52      	ldr	r3, [pc, #328]	; (800c500 <tcp_close_shutdown+0x1a0>)
 800c3b6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c3ba:	4954      	ldr	r1, [pc, #336]	; (800c50c <tcp_close_shutdown+0x1ac>)
 800c3bc:	4852      	ldr	r0, [pc, #328]	; (800c508 <tcp_close_shutdown+0x1a8>)
 800c3be:	f008 fd79 	bl	8014eb4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c3ca:	687d      	ldr	r5, [r7, #4]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	3304      	adds	r3, #4
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	8ad2      	ldrh	r2, [r2, #22]
 800c3d4:	6879      	ldr	r1, [r7, #4]
 800c3d6:	8b09      	ldrh	r1, [r1, #24]
 800c3d8:	9102      	str	r1, [sp, #8]
 800c3da:	9201      	str	r2, [sp, #4]
 800c3dc:	9300      	str	r3, [sp, #0]
 800c3de:	462b      	mov	r3, r5
 800c3e0:	4622      	mov	r2, r4
 800c3e2:	4601      	mov	r1, r0
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f004 fe91 	bl	801110c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f001 f8c6 	bl	800d57c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c3f0:	4b47      	ldr	r3, [pc, #284]	; (800c510 <tcp_close_shutdown+0x1b0>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d105      	bne.n	800c406 <tcp_close_shutdown+0xa6>
 800c3fa:	4b45      	ldr	r3, [pc, #276]	; (800c510 <tcp_close_shutdown+0x1b0>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	4a43      	ldr	r2, [pc, #268]	; (800c510 <tcp_close_shutdown+0x1b0>)
 800c402:	6013      	str	r3, [r2, #0]
 800c404:	e013      	b.n	800c42e <tcp_close_shutdown+0xce>
 800c406:	4b42      	ldr	r3, [pc, #264]	; (800c510 <tcp_close_shutdown+0x1b0>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	60fb      	str	r3, [r7, #12]
 800c40c:	e00c      	b.n	800c428 <tcp_close_shutdown+0xc8>
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	429a      	cmp	r2, r3
 800c416:	d104      	bne.n	800c422 <tcp_close_shutdown+0xc2>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	68da      	ldr	r2, [r3, #12]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	60da      	str	r2, [r3, #12]
 800c420:	e005      	b.n	800c42e <tcp_close_shutdown+0xce>
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	60fb      	str	r3, [r7, #12]
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d1ef      	bne.n	800c40e <tcp_close_shutdown+0xae>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	60da      	str	r2, [r3, #12]
 800c434:	4b37      	ldr	r3, [pc, #220]	; (800c514 <tcp_close_shutdown+0x1b4>)
 800c436:	2201      	movs	r2, #1
 800c438:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c43a:	4b37      	ldr	r3, [pc, #220]	; (800c518 <tcp_close_shutdown+0x1b8>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	429a      	cmp	r2, r3
 800c442:	d102      	bne.n	800c44a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c444:	f003 fd5e 	bl	800ff04 <tcp_trigger_input_pcb_close>
 800c448:	e002      	b.n	800c450 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f7ff fed6 	bl	800c1fc <tcp_free>
      }
      return ERR_OK;
 800c450:	2300      	movs	r3, #0
 800c452:	e050      	b.n	800c4f6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	7d1b      	ldrb	r3, [r3, #20]
 800c458:	2b02      	cmp	r3, #2
 800c45a:	d03b      	beq.n	800c4d4 <tcp_close_shutdown+0x174>
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	dc44      	bgt.n	800c4ea <tcp_close_shutdown+0x18a>
 800c460:	2b00      	cmp	r3, #0
 800c462:	d002      	beq.n	800c46a <tcp_close_shutdown+0x10a>
 800c464:	2b01      	cmp	r3, #1
 800c466:	d02a      	beq.n	800c4be <tcp_close_shutdown+0x15e>
 800c468:	e03f      	b.n	800c4ea <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	8adb      	ldrh	r3, [r3, #22]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d021      	beq.n	800c4b6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c472:	4b2a      	ldr	r3, [pc, #168]	; (800c51c <tcp_close_shutdown+0x1bc>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d105      	bne.n	800c488 <tcp_close_shutdown+0x128>
 800c47c:	4b27      	ldr	r3, [pc, #156]	; (800c51c <tcp_close_shutdown+0x1bc>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	4a26      	ldr	r2, [pc, #152]	; (800c51c <tcp_close_shutdown+0x1bc>)
 800c484:	6013      	str	r3, [r2, #0]
 800c486:	e013      	b.n	800c4b0 <tcp_close_shutdown+0x150>
 800c488:	4b24      	ldr	r3, [pc, #144]	; (800c51c <tcp_close_shutdown+0x1bc>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	60bb      	str	r3, [r7, #8]
 800c48e:	e00c      	b.n	800c4aa <tcp_close_shutdown+0x14a>
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	429a      	cmp	r2, r3
 800c498:	d104      	bne.n	800c4a4 <tcp_close_shutdown+0x144>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	68da      	ldr	r2, [r3, #12]
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	60da      	str	r2, [r3, #12]
 800c4a2:	e005      	b.n	800c4b0 <tcp_close_shutdown+0x150>
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	60bb      	str	r3, [r7, #8]
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1ef      	bne.n	800c490 <tcp_close_shutdown+0x130>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f7ff fea0 	bl	800c1fc <tcp_free>
      break;
 800c4bc:	e01a      	b.n	800c4f4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f7ff ff14 	bl	800c2ec <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c4c4:	6879      	ldr	r1, [r7, #4]
 800c4c6:	4816      	ldr	r0, [pc, #88]	; (800c520 <tcp_close_shutdown+0x1c0>)
 800c4c8:	f001 f8a8 	bl	800d61c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f7ff feb1 	bl	800c234 <tcp_free_listen>
      break;
 800c4d2:	e00f      	b.n	800c4f4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c4d4:	6879      	ldr	r1, [r7, #4]
 800c4d6:	480e      	ldr	r0, [pc, #56]	; (800c510 <tcp_close_shutdown+0x1b0>)
 800c4d8:	f001 f8a0 	bl	800d61c <tcp_pcb_remove>
 800c4dc:	4b0d      	ldr	r3, [pc, #52]	; (800c514 <tcp_close_shutdown+0x1b4>)
 800c4de:	2201      	movs	r2, #1
 800c4e0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7ff fe8a 	bl	800c1fc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c4e8:	e004      	b.n	800c4f4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f81a 	bl	800c524 <tcp_close_shutdown_fin>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	e000      	b.n	800c4f6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bdb0      	pop	{r4, r5, r7, pc}
 800c4fe:	bf00      	nop
 800c500:	0801777c 	.word	0x0801777c
 800c504:	08017850 	.word	0x08017850
 800c508:	080177c0 	.word	0x080177c0
 800c50c:	08017870 	.word	0x08017870
 800c510:	20017ad4 	.word	0x20017ad4
 800c514:	20017adc 	.word	0x20017adc
 800c518:	20017b14 	.word	0x20017b14
 800c51c:	20017acc 	.word	0x20017acc
 800c520:	20017ad0 	.word	0x20017ad0

0800c524 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d106      	bne.n	800c540 <tcp_close_shutdown_fin+0x1c>
 800c532:	4b2e      	ldr	r3, [pc, #184]	; (800c5ec <tcp_close_shutdown_fin+0xc8>)
 800c534:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c538:	492d      	ldr	r1, [pc, #180]	; (800c5f0 <tcp_close_shutdown_fin+0xcc>)
 800c53a:	482e      	ldr	r0, [pc, #184]	; (800c5f4 <tcp_close_shutdown_fin+0xd0>)
 800c53c:	f008 fcba 	bl	8014eb4 <iprintf>

  switch (pcb->state) {
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	7d1b      	ldrb	r3, [r3, #20]
 800c544:	2b07      	cmp	r3, #7
 800c546:	d020      	beq.n	800c58a <tcp_close_shutdown_fin+0x66>
 800c548:	2b07      	cmp	r3, #7
 800c54a:	dc2b      	bgt.n	800c5a4 <tcp_close_shutdown_fin+0x80>
 800c54c:	2b03      	cmp	r3, #3
 800c54e:	d002      	beq.n	800c556 <tcp_close_shutdown_fin+0x32>
 800c550:	2b04      	cmp	r3, #4
 800c552:	d00d      	beq.n	800c570 <tcp_close_shutdown_fin+0x4c>
 800c554:	e026      	b.n	800c5a4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f003 fee6 	bl	8010328 <tcp_send_fin>
 800c55c:	4603      	mov	r3, r0
 800c55e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d11f      	bne.n	800c5a8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2205      	movs	r2, #5
 800c56c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c56e:	e01b      	b.n	800c5a8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f003 fed9 	bl	8010328 <tcp_send_fin>
 800c576:	4603      	mov	r3, r0
 800c578:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c57a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d114      	bne.n	800c5ac <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2205      	movs	r2, #5
 800c586:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c588:	e010      	b.n	800c5ac <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f003 fecc 	bl	8010328 <tcp_send_fin>
 800c590:	4603      	mov	r3, r0
 800c592:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d109      	bne.n	800c5b0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2209      	movs	r2, #9
 800c5a0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c5a2:	e005      	b.n	800c5b0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	e01c      	b.n	800c5e2 <tcp_close_shutdown_fin+0xbe>
      break;
 800c5a8:	bf00      	nop
 800c5aa:	e002      	b.n	800c5b2 <tcp_close_shutdown_fin+0x8e>
      break;
 800c5ac:	bf00      	nop
 800c5ae:	e000      	b.n	800c5b2 <tcp_close_shutdown_fin+0x8e>
      break;
 800c5b0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c5b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d103      	bne.n	800c5c2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f003 fff2 	bl	80105a4 <tcp_output>
 800c5c0:	e00d      	b.n	800c5de <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5ca:	d108      	bne.n	800c5de <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	8b5b      	ldrh	r3, [r3, #26]
 800c5d0:	f043 0308 	orr.w	r3, r3, #8
 800c5d4:	b29a      	uxth	r2, r3
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	e001      	b.n	800c5e2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c5de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	0801777c 	.word	0x0801777c
 800c5f0:	0801782c 	.word	0x0801782c
 800c5f4:	080177c0 	.word	0x080177c0

0800c5f8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d109      	bne.n	800c61a <tcp_close+0x22>
 800c606:	4b0f      	ldr	r3, [pc, #60]	; (800c644 <tcp_close+0x4c>)
 800c608:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c60c:	490e      	ldr	r1, [pc, #56]	; (800c648 <tcp_close+0x50>)
 800c60e:	480f      	ldr	r0, [pc, #60]	; (800c64c <tcp_close+0x54>)
 800c610:	f008 fc50 	bl	8014eb4 <iprintf>
 800c614:	f06f 030f 	mvn.w	r3, #15
 800c618:	e00f      	b.n	800c63a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	7d1b      	ldrb	r3, [r3, #20]
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d006      	beq.n	800c630 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	8b5b      	ldrh	r3, [r3, #26]
 800c626:	f043 0310 	orr.w	r3, r3, #16
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c630:	2101      	movs	r1, #1
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7ff fe94 	bl	800c360 <tcp_close_shutdown>
 800c638:	4603      	mov	r3, r0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	0801777c 	.word	0x0801777c
 800c648:	0801788c 	.word	0x0801788c
 800c64c:	080177c0 	.word	0x080177c0

0800c650 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b08e      	sub	sp, #56	; 0x38
 800c654:	af04      	add	r7, sp, #16
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d107      	bne.n	800c670 <tcp_abandon+0x20>
 800c660:	4b52      	ldr	r3, [pc, #328]	; (800c7ac <tcp_abandon+0x15c>)
 800c662:	f240 223d 	movw	r2, #573	; 0x23d
 800c666:	4952      	ldr	r1, [pc, #328]	; (800c7b0 <tcp_abandon+0x160>)
 800c668:	4852      	ldr	r0, [pc, #328]	; (800c7b4 <tcp_abandon+0x164>)
 800c66a:	f008 fc23 	bl	8014eb4 <iprintf>
 800c66e:	e099      	b.n	800c7a4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	7d1b      	ldrb	r3, [r3, #20]
 800c674:	2b01      	cmp	r3, #1
 800c676:	d106      	bne.n	800c686 <tcp_abandon+0x36>
 800c678:	4b4c      	ldr	r3, [pc, #304]	; (800c7ac <tcp_abandon+0x15c>)
 800c67a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c67e:	494e      	ldr	r1, [pc, #312]	; (800c7b8 <tcp_abandon+0x168>)
 800c680:	484c      	ldr	r0, [pc, #304]	; (800c7b4 <tcp_abandon+0x164>)
 800c682:	f008 fc17 	bl	8014eb4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	7d1b      	ldrb	r3, [r3, #20]
 800c68a:	2b0a      	cmp	r3, #10
 800c68c:	d107      	bne.n	800c69e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c68e:	6879      	ldr	r1, [r7, #4]
 800c690:	484a      	ldr	r0, [pc, #296]	; (800c7bc <tcp_abandon+0x16c>)
 800c692:	f000 ffc3 	bl	800d61c <tcp_pcb_remove>
    tcp_free(pcb);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7ff fdb0 	bl	800c1fc <tcp_free>
 800c69c:	e082      	b.n	800c7a4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6aa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6b8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	691b      	ldr	r3, [r3, #16]
 800c6be:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	7d1b      	ldrb	r3, [r3, #20]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d126      	bne.n	800c716 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	8adb      	ldrh	r3, [r3, #22]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d02e      	beq.n	800c72e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c6d0:	4b3b      	ldr	r3, [pc, #236]	; (800c7c0 <tcp_abandon+0x170>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d105      	bne.n	800c6e6 <tcp_abandon+0x96>
 800c6da:	4b39      	ldr	r3, [pc, #228]	; (800c7c0 <tcp_abandon+0x170>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	4a37      	ldr	r2, [pc, #220]	; (800c7c0 <tcp_abandon+0x170>)
 800c6e2:	6013      	str	r3, [r2, #0]
 800c6e4:	e013      	b.n	800c70e <tcp_abandon+0xbe>
 800c6e6:	4b36      	ldr	r3, [pc, #216]	; (800c7c0 <tcp_abandon+0x170>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	61fb      	str	r3, [r7, #28]
 800c6ec:	e00c      	b.n	800c708 <tcp_abandon+0xb8>
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d104      	bne.n	800c702 <tcp_abandon+0xb2>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	68da      	ldr	r2, [r3, #12]
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	60da      	str	r2, [r3, #12]
 800c700:	e005      	b.n	800c70e <tcp_abandon+0xbe>
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	61fb      	str	r3, [r7, #28]
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d1ef      	bne.n	800c6ee <tcp_abandon+0x9e>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2200      	movs	r2, #0
 800c712:	60da      	str	r2, [r3, #12]
 800c714:	e00b      	b.n	800c72e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	8adb      	ldrh	r3, [r3, #22]
 800c71e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c720:	6879      	ldr	r1, [r7, #4]
 800c722:	4828      	ldr	r0, [pc, #160]	; (800c7c4 <tcp_abandon+0x174>)
 800c724:	f000 ff7a 	bl	800d61c <tcp_pcb_remove>
 800c728:	4b27      	ldr	r3, [pc, #156]	; (800c7c8 <tcp_abandon+0x178>)
 800c72a:	2201      	movs	r2, #1
 800c72c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c732:	2b00      	cmp	r3, #0
 800c734:	d004      	beq.n	800c740 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c73a:	4618      	mov	r0, r3
 800c73c:	f000 fd1c 	bl	800d178 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c744:	2b00      	cmp	r3, #0
 800c746:	d004      	beq.n	800c752 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c74c:	4618      	mov	r0, r3
 800c74e:	f000 fd13 	bl	800d178 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c756:	2b00      	cmp	r3, #0
 800c758:	d004      	beq.n	800c764 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c75e:	4618      	mov	r0, r3
 800c760:	f000 fd0a 	bl	800d178 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00e      	beq.n	800c788 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c76a:	6879      	ldr	r1, [r7, #4]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	3304      	adds	r3, #4
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	8b12      	ldrh	r2, [r2, #24]
 800c774:	9202      	str	r2, [sp, #8]
 800c776:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c778:	9201      	str	r2, [sp, #4]
 800c77a:	9300      	str	r3, [sp, #0]
 800c77c:	460b      	mov	r3, r1
 800c77e:	697a      	ldr	r2, [r7, #20]
 800c780:	69b9      	ldr	r1, [r7, #24]
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f004 fcc2 	bl	801110c <tcp_rst>
    }
    last_state = pcb->state;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	7d1b      	ldrb	r3, [r3, #20]
 800c78c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f7ff fd34 	bl	800c1fc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d004      	beq.n	800c7a4 <tcp_abandon+0x154>
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	f06f 010c 	mvn.w	r1, #12
 800c7a0:	68f8      	ldr	r0, [r7, #12]
 800c7a2:	4798      	blx	r3
  }
}
 800c7a4:	3728      	adds	r7, #40	; 0x28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	0801777c 	.word	0x0801777c
 800c7b0:	080178c0 	.word	0x080178c0
 800c7b4:	080177c0 	.word	0x080177c0
 800c7b8:	080178dc 	.word	0x080178dc
 800c7bc:	20017ad8 	.word	0x20017ad8
 800c7c0:	20017acc 	.word	0x20017acc
 800c7c4:	20017ad4 	.word	0x20017ad4
 800c7c8:	20017adc 	.word	0x20017adc

0800c7cc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c7d4:	2101      	movs	r1, #1
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f7ff ff3a 	bl	800c650 <tcp_abandon>
}
 800c7dc:	bf00      	nop
 800c7de:	3708      	adds	r7, #8
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d106      	bne.n	800c800 <tcp_update_rcv_ann_wnd+0x1c>
 800c7f2:	4b25      	ldr	r3, [pc, #148]	; (800c888 <tcp_update_rcv_ann_wnd+0xa4>)
 800c7f4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c7f8:	4924      	ldr	r1, [pc, #144]	; (800c88c <tcp_update_rcv_ann_wnd+0xa8>)
 800c7fa:	4825      	ldr	r0, [pc, #148]	; (800c890 <tcp_update_rcv_ann_wnd+0xac>)
 800c7fc:	f008 fb5a 	bl	8014eb4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c808:	4413      	add	r3, r2
 800c80a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c814:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c818:	bf28      	it	cs
 800c81a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c81e:	b292      	uxth	r2, r2
 800c820:	4413      	add	r3, r2
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	1ad3      	subs	r3, r2, r3
 800c826:	2b00      	cmp	r3, #0
 800c828:	db08      	blt.n	800c83c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c836:	68fa      	ldr	r2, [r7, #12]
 800c838:	1ad3      	subs	r3, r2, r3
 800c83a:	e020      	b.n	800c87e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	2b00      	cmp	r3, #0
 800c848:	dd03      	ble.n	800c852 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c850:	e014      	b.n	800c87c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c85a:	1ad3      	subs	r3, r2, r3
 800c85c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c864:	d306      	bcc.n	800c874 <tcp_update_rcv_ann_wnd+0x90>
 800c866:	4b08      	ldr	r3, [pc, #32]	; (800c888 <tcp_update_rcv_ann_wnd+0xa4>)
 800c868:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c86c:	4909      	ldr	r1, [pc, #36]	; (800c894 <tcp_update_rcv_ann_wnd+0xb0>)
 800c86e:	4808      	ldr	r0, [pc, #32]	; (800c890 <tcp_update_rcv_ann_wnd+0xac>)
 800c870:	f008 fb20 	bl	8014eb4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	b29a      	uxth	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c87c:	2300      	movs	r3, #0
  }
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	0801777c 	.word	0x0801777c
 800c88c:	080179d8 	.word	0x080179d8
 800c890:	080177c0 	.word	0x080177c0
 800c894:	080179fc 	.word	0x080179fc

0800c898 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d107      	bne.n	800c8ba <tcp_recved+0x22>
 800c8aa:	4b1f      	ldr	r3, [pc, #124]	; (800c928 <tcp_recved+0x90>)
 800c8ac:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c8b0:	491e      	ldr	r1, [pc, #120]	; (800c92c <tcp_recved+0x94>)
 800c8b2:	481f      	ldr	r0, [pc, #124]	; (800c930 <tcp_recved+0x98>)
 800c8b4:	f008 fafe 	bl	8014eb4 <iprintf>
 800c8b8:	e032      	b.n	800c920 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	7d1b      	ldrb	r3, [r3, #20]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d106      	bne.n	800c8d0 <tcp_recved+0x38>
 800c8c2:	4b19      	ldr	r3, [pc, #100]	; (800c928 <tcp_recved+0x90>)
 800c8c4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c8c8:	491a      	ldr	r1, [pc, #104]	; (800c934 <tcp_recved+0x9c>)
 800c8ca:	4819      	ldr	r0, [pc, #100]	; (800c930 <tcp_recved+0x98>)
 800c8cc:	f008 faf2 	bl	8014eb4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c8d4:	887b      	ldrh	r3, [r7, #2]
 800c8d6:	4413      	add	r3, r2
 800c8d8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c8da:	89fb      	ldrh	r3, [r7, #14]
 800c8dc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c8e0:	d804      	bhi.n	800c8ec <tcp_recved+0x54>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8e6:	89fa      	ldrh	r2, [r7, #14]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d204      	bcs.n	800c8f6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c8f2:	851a      	strh	r2, [r3, #40]	; 0x28
 800c8f4:	e002      	b.n	800c8fc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	89fa      	ldrh	r2, [r7, #14]
 800c8fa:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7ff ff71 	bl	800c7e4 <tcp_update_rcv_ann_wnd>
 800c902:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c90a:	d309      	bcc.n	800c920 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	8b5b      	ldrh	r3, [r3, #26]
 800c910:	f043 0302 	orr.w	r3, r3, #2
 800c914:	b29a      	uxth	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f003 fe42 	bl	80105a4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	0801777c 	.word	0x0801777c
 800c92c:	08017a18 	.word	0x08017a18
 800c930:	080177c0 	.word	0x080177c0
 800c934:	08017a30 	.word	0x08017a30

0800c938 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c938:	b5b0      	push	{r4, r5, r7, lr}
 800c93a:	b090      	sub	sp, #64	; 0x40
 800c93c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c93e:	2300      	movs	r3, #0
 800c940:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c944:	4b94      	ldr	r3, [pc, #592]	; (800cb98 <tcp_slowtmr+0x260>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	3301      	adds	r3, #1
 800c94a:	4a93      	ldr	r2, [pc, #588]	; (800cb98 <tcp_slowtmr+0x260>)
 800c94c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c94e:	4b93      	ldr	r3, [pc, #588]	; (800cb9c <tcp_slowtmr+0x264>)
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	3301      	adds	r3, #1
 800c954:	b2da      	uxtb	r2, r3
 800c956:	4b91      	ldr	r3, [pc, #580]	; (800cb9c <tcp_slowtmr+0x264>)
 800c958:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c95a:	2300      	movs	r3, #0
 800c95c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c95e:	4b90      	ldr	r3, [pc, #576]	; (800cba0 <tcp_slowtmr+0x268>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c964:	e29d      	b.n	800cea2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c968:	7d1b      	ldrb	r3, [r3, #20]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d106      	bne.n	800c97c <tcp_slowtmr+0x44>
 800c96e:	4b8d      	ldr	r3, [pc, #564]	; (800cba4 <tcp_slowtmr+0x26c>)
 800c970:	f240 42be 	movw	r2, #1214	; 0x4be
 800c974:	498c      	ldr	r1, [pc, #560]	; (800cba8 <tcp_slowtmr+0x270>)
 800c976:	488d      	ldr	r0, [pc, #564]	; (800cbac <tcp_slowtmr+0x274>)
 800c978:	f008 fa9c 	bl	8014eb4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97e:	7d1b      	ldrb	r3, [r3, #20]
 800c980:	2b01      	cmp	r3, #1
 800c982:	d106      	bne.n	800c992 <tcp_slowtmr+0x5a>
 800c984:	4b87      	ldr	r3, [pc, #540]	; (800cba4 <tcp_slowtmr+0x26c>)
 800c986:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c98a:	4989      	ldr	r1, [pc, #548]	; (800cbb0 <tcp_slowtmr+0x278>)
 800c98c:	4887      	ldr	r0, [pc, #540]	; (800cbac <tcp_slowtmr+0x274>)
 800c98e:	f008 fa91 	bl	8014eb4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c994:	7d1b      	ldrb	r3, [r3, #20]
 800c996:	2b0a      	cmp	r3, #10
 800c998:	d106      	bne.n	800c9a8 <tcp_slowtmr+0x70>
 800c99a:	4b82      	ldr	r3, [pc, #520]	; (800cba4 <tcp_slowtmr+0x26c>)
 800c99c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c9a0:	4984      	ldr	r1, [pc, #528]	; (800cbb4 <tcp_slowtmr+0x27c>)
 800c9a2:	4882      	ldr	r0, [pc, #520]	; (800cbac <tcp_slowtmr+0x274>)
 800c9a4:	f008 fa86 	bl	8014eb4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9aa:	7f9a      	ldrb	r2, [r3, #30]
 800c9ac:	4b7b      	ldr	r3, [pc, #492]	; (800cb9c <tcp_slowtmr+0x264>)
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d105      	bne.n	800c9c0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ba:	68db      	ldr	r3, [r3, #12]
 800c9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c9be:	e270      	b.n	800cea2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c9c0:	4b76      	ldr	r3, [pc, #472]	; (800cb9c <tcp_slowtmr+0x264>)
 800c9c2:	781a      	ldrb	r2, [r3, #0]
 800c9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d6:	7d1b      	ldrb	r3, [r3, #20]
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	d10a      	bne.n	800c9f2 <tcp_slowtmr+0xba>
 800c9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9e2:	2b05      	cmp	r3, #5
 800c9e4:	d905      	bls.n	800c9f2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c9e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9f0:	e11e      	b.n	800cc30 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9f8:	2b0b      	cmp	r3, #11
 800c9fa:	d905      	bls.n	800ca08 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca00:	3301      	adds	r3, #1
 800ca02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca06:	e113      	b.n	800cc30 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ca08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d075      	beq.n	800cafe <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ca12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d006      	beq.n	800ca28 <tcp_slowtmr+0xf0>
 800ca1a:	4b62      	ldr	r3, [pc, #392]	; (800cba4 <tcp_slowtmr+0x26c>)
 800ca1c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ca20:	4965      	ldr	r1, [pc, #404]	; (800cbb8 <tcp_slowtmr+0x280>)
 800ca22:	4862      	ldr	r0, [pc, #392]	; (800cbac <tcp_slowtmr+0x274>)
 800ca24:	f008 fa46 	bl	8014eb4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ca28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d106      	bne.n	800ca3e <tcp_slowtmr+0x106>
 800ca30:	4b5c      	ldr	r3, [pc, #368]	; (800cba4 <tcp_slowtmr+0x26c>)
 800ca32:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ca36:	4961      	ldr	r1, [pc, #388]	; (800cbbc <tcp_slowtmr+0x284>)
 800ca38:	485c      	ldr	r0, [pc, #368]	; (800cbac <tcp_slowtmr+0x274>)
 800ca3a:	f008 fa3b 	bl	8014eb4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ca3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ca44:	2b0b      	cmp	r3, #11
 800ca46:	d905      	bls.n	800ca54 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ca48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca52:	e0ed      	b.n	800cc30 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ca54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca56:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ca5a:	3b01      	subs	r3, #1
 800ca5c:	4a58      	ldr	r2, [pc, #352]	; (800cbc0 <tcp_slowtmr+0x288>)
 800ca5e:	5cd3      	ldrb	r3, [r2, r3]
 800ca60:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ca62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ca68:	7c7a      	ldrb	r2, [r7, #17]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d907      	bls.n	800ca7e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ca6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca70:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ca74:	3301      	adds	r3, #1
 800ca76:	b2da      	uxtb	r2, r3
 800ca78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ca7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca80:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ca84:	7c7a      	ldrb	r2, [r7, #17]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	f200 80d2 	bhi.w	800cc30 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ca90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d108      	bne.n	800caac <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ca9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca9c:	f004 fc2a 	bl	80112f4 <tcp_zero_window_probe>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d014      	beq.n	800cad0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800caa6:	2300      	movs	r3, #0
 800caa8:	623b      	str	r3, [r7, #32]
 800caaa:	e011      	b.n	800cad0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800caac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cab2:	4619      	mov	r1, r3
 800cab4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cab6:	f003 faef 	bl	8010098 <tcp_split_unsent_seg>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d107      	bne.n	800cad0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cac0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cac2:	f003 fd6f 	bl	80105a4 <tcp_output>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d101      	bne.n	800cad0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cacc:	2300      	movs	r3, #0
 800cace:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cad0:	6a3b      	ldr	r3, [r7, #32]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	f000 80ac 	beq.w	800cc30 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cada:	2200      	movs	r2, #0
 800cadc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cae6:	2b06      	cmp	r3, #6
 800cae8:	f200 80a2 	bhi.w	800cc30 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800caec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800caf2:	3301      	adds	r3, #1
 800caf4:	b2da      	uxtb	r2, r3
 800caf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cafc:	e098      	b.n	800cc30 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	db0f      	blt.n	800cb28 <tcp_slowtmr+0x1f0>
 800cb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb0e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d008      	beq.n	800cb28 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb18:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	3301      	adds	r3, #1
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	b21a      	sxth	r2, r3
 800cb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb26:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb30:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cb34:	429a      	cmp	r2, r3
 800cb36:	db7b      	blt.n	800cc30 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cb38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb3a:	f004 f825 	bl	8010b88 <tcp_rexmit_rto_prepare>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d007      	beq.n	800cb54 <tcp_slowtmr+0x21c>
 800cb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d171      	bne.n	800cc30 <tcp_slowtmr+0x2f8>
 800cb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d06d      	beq.n	800cc30 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb56:	7d1b      	ldrb	r3, [r3, #20]
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	d03a      	beq.n	800cbd2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb62:	2b0c      	cmp	r3, #12
 800cb64:	bf28      	it	cs
 800cb66:	230c      	movcs	r3, #12
 800cb68:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cb70:	10db      	asrs	r3, r3, #3
 800cb72:	b21b      	sxth	r3, r3
 800cb74:	461a      	mov	r2, r3
 800cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb78:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cb7c:	4413      	add	r3, r2
 800cb7e:	7efa      	ldrb	r2, [r7, #27]
 800cb80:	4910      	ldr	r1, [pc, #64]	; (800cbc4 <tcp_slowtmr+0x28c>)
 800cb82:	5c8a      	ldrb	r2, [r1, r2]
 800cb84:	4093      	lsls	r3, r2
 800cb86:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	dc1a      	bgt.n	800cbc8 <tcp_slowtmr+0x290>
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	b21a      	sxth	r2, r3
 800cb96:	e019      	b.n	800cbcc <tcp_slowtmr+0x294>
 800cb98:	20017ac8 	.word	0x20017ac8
 800cb9c:	20017ade 	.word	0x20017ade
 800cba0:	20017ad4 	.word	0x20017ad4
 800cba4:	0801777c 	.word	0x0801777c
 800cba8:	08017ac0 	.word	0x08017ac0
 800cbac:	080177c0 	.word	0x080177c0
 800cbb0:	08017aec 	.word	0x08017aec
 800cbb4:	08017b18 	.word	0x08017b18
 800cbb8:	08017b48 	.word	0x08017b48
 800cbbc:	08017b7c 	.word	0x08017b7c
 800cbc0:	080197a0 	.word	0x080197a0
 800cbc4:	08019790 	.word	0x08019790
 800cbc8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	bf28      	it	cs
 800cbe8:	4613      	movcs	r3, r2
 800cbea:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cbec:	8a7b      	ldrh	r3, [r7, #18]
 800cbee:	085b      	lsrs	r3, r3, #1
 800cbf0:	b29a      	uxth	r2, r3
 800cbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc02:	005b      	lsls	r3, r3, #1
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d206      	bcs.n	800cc18 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc0e:	005b      	lsls	r3, r3, #1
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800cc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800cc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc24:	2200      	movs	r2, #0
 800cc26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800cc2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc2c:	f004 f81c 	bl	8010c68 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800cc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc32:	7d1b      	ldrb	r3, [r3, #20]
 800cc34:	2b06      	cmp	r3, #6
 800cc36:	d111      	bne.n	800cc5c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800cc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3a:	8b5b      	ldrh	r3, [r3, #26]
 800cc3c:	f003 0310 	and.w	r3, r3, #16
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d00b      	beq.n	800cc5c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc44:	4b9c      	ldr	r3, [pc, #624]	; (800ceb8 <tcp_slowtmr+0x580>)
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4a:	6a1b      	ldr	r3, [r3, #32]
 800cc4c:	1ad3      	subs	r3, r2, r3
 800cc4e:	2b28      	cmp	r3, #40	; 0x28
 800cc50:	d904      	bls.n	800cc5c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cc52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc56:	3301      	adds	r3, #1
 800cc58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5e:	7a5b      	ldrb	r3, [r3, #9]
 800cc60:	f003 0308 	and.w	r3, r3, #8
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d04a      	beq.n	800ccfe <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800cc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cc6c:	2b04      	cmp	r3, #4
 800cc6e:	d003      	beq.n	800cc78 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800cc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc72:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cc74:	2b07      	cmp	r3, #7
 800cc76:	d142      	bne.n	800ccfe <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc78:	4b8f      	ldr	r3, [pc, #572]	; (800ceb8 <tcp_slowtmr+0x580>)
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7e:	6a1b      	ldr	r3, [r3, #32]
 800cc80:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc84:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cc88:	4b8c      	ldr	r3, [pc, #560]	; (800cebc <tcp_slowtmr+0x584>)
 800cc8a:	440b      	add	r3, r1
 800cc8c:	498c      	ldr	r1, [pc, #560]	; (800cec0 <tcp_slowtmr+0x588>)
 800cc8e:	fba1 1303 	umull	r1, r3, r1, r3
 800cc92:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d90a      	bls.n	800ccae <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cc98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cca2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cca6:	3301      	adds	r3, #1
 800cca8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ccac:	e027      	b.n	800ccfe <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ccae:	4b82      	ldr	r3, [pc, #520]	; (800ceb8 <tcp_slowtmr+0x580>)
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb4:	6a1b      	ldr	r3, [r3, #32]
 800ccb6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ccb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ccbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	4b7f      	ldr	r3, [pc, #508]	; (800cec4 <tcp_slowtmr+0x58c>)
 800ccc8:	fb00 f303 	mul.w	r3, r0, r3
 800cccc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ccce:	497c      	ldr	r1, [pc, #496]	; (800cec0 <tcp_slowtmr+0x588>)
 800ccd0:	fba1 1303 	umull	r1, r3, r1, r3
 800ccd4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d911      	bls.n	800ccfe <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800ccda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccdc:	f004 faca 	bl	8011274 <tcp_keepalive>
 800cce0:	4603      	mov	r3, r0
 800cce2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cce6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d107      	bne.n	800ccfe <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800ccee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	b2da      	uxtb	r2, r3
 800ccf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ccfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d011      	beq.n	800cd2a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cd06:	4b6c      	ldr	r3, [pc, #432]	; (800ceb8 <tcp_slowtmr+0x580>)
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0c:	6a1b      	ldr	r3, [r3, #32]
 800cd0e:	1ad2      	subs	r2, r2, r3
 800cd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd12:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cd16:	4619      	mov	r1, r3
 800cd18:	460b      	mov	r3, r1
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	440b      	add	r3, r1
 800cd1e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d302      	bcc.n	800cd2a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cd24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd26:	f000 fddd 	bl	800d8e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2c:	7d1b      	ldrb	r3, [r3, #20]
 800cd2e:	2b03      	cmp	r3, #3
 800cd30:	d10b      	bne.n	800cd4a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd32:	4b61      	ldr	r3, [pc, #388]	; (800ceb8 <tcp_slowtmr+0x580>)
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd38:	6a1b      	ldr	r3, [r3, #32]
 800cd3a:	1ad3      	subs	r3, r2, r3
 800cd3c:	2b28      	cmp	r3, #40	; 0x28
 800cd3e:	d904      	bls.n	800cd4a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cd40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd44:	3301      	adds	r3, #1
 800cd46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4c:	7d1b      	ldrb	r3, [r3, #20]
 800cd4e:	2b09      	cmp	r3, #9
 800cd50:	d10b      	bne.n	800cd6a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cd52:	4b59      	ldr	r3, [pc, #356]	; (800ceb8 <tcp_slowtmr+0x580>)
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd58:	6a1b      	ldr	r3, [r3, #32]
 800cd5a:	1ad3      	subs	r3, r2, r3
 800cd5c:	2bf0      	cmp	r3, #240	; 0xf0
 800cd5e:	d904      	bls.n	800cd6a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800cd60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd64:	3301      	adds	r3, #1
 800cd66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cd6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d060      	beq.n	800ce34 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd78:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cd7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd7c:	f000 fbfe 	bl	800d57c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d010      	beq.n	800cda8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cd86:	4b50      	ldr	r3, [pc, #320]	; (800cec8 <tcp_slowtmr+0x590>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d106      	bne.n	800cd9e <tcp_slowtmr+0x466>
 800cd90:	4b4e      	ldr	r3, [pc, #312]	; (800cecc <tcp_slowtmr+0x594>)
 800cd92:	f240 526d 	movw	r2, #1389	; 0x56d
 800cd96:	494e      	ldr	r1, [pc, #312]	; (800ced0 <tcp_slowtmr+0x598>)
 800cd98:	484e      	ldr	r0, [pc, #312]	; (800ced4 <tcp_slowtmr+0x59c>)
 800cd9a:	f008 f88b 	bl	8014eb4 <iprintf>
        prev->next = pcb->next;
 800cd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda0:	68da      	ldr	r2, [r3, #12]
 800cda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda4:	60da      	str	r2, [r3, #12]
 800cda6:	e00f      	b.n	800cdc8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cda8:	4b47      	ldr	r3, [pc, #284]	; (800cec8 <tcp_slowtmr+0x590>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d006      	beq.n	800cdc0 <tcp_slowtmr+0x488>
 800cdb2:	4b46      	ldr	r3, [pc, #280]	; (800cecc <tcp_slowtmr+0x594>)
 800cdb4:	f240 5271 	movw	r2, #1393	; 0x571
 800cdb8:	4947      	ldr	r1, [pc, #284]	; (800ced8 <tcp_slowtmr+0x5a0>)
 800cdba:	4846      	ldr	r0, [pc, #280]	; (800ced4 <tcp_slowtmr+0x59c>)
 800cdbc:	f008 f87a 	bl	8014eb4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	4a40      	ldr	r2, [pc, #256]	; (800cec8 <tcp_slowtmr+0x590>)
 800cdc6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cdc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d013      	beq.n	800cdf8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cdd8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cddc:	3304      	adds	r3, #4
 800cdde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cde0:	8ad2      	ldrh	r2, [r2, #22]
 800cde2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cde4:	8b09      	ldrh	r1, [r1, #24]
 800cde6:	9102      	str	r1, [sp, #8]
 800cde8:	9201      	str	r2, [sp, #4]
 800cdea:	9300      	str	r3, [sp, #0]
 800cdec:	462b      	mov	r3, r5
 800cdee:	4622      	mov	r2, r4
 800cdf0:	4601      	mov	r1, r0
 800cdf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdf4:	f004 f98a 	bl	801110c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfa:	691b      	ldr	r3, [r3, #16]
 800cdfc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce00:	7d1b      	ldrb	r3, [r3, #20]
 800ce02:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ce04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce06:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ce0e:	6838      	ldr	r0, [r7, #0]
 800ce10:	f7ff f9f4 	bl	800c1fc <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ce14:	4b31      	ldr	r3, [pc, #196]	; (800cedc <tcp_slowtmr+0x5a4>)
 800ce16:	2200      	movs	r2, #0
 800ce18:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d004      	beq.n	800ce2a <tcp_slowtmr+0x4f2>
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f06f 010c 	mvn.w	r1, #12
 800ce26:	68b8      	ldr	r0, [r7, #8]
 800ce28:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ce2a:	4b2c      	ldr	r3, [pc, #176]	; (800cedc <tcp_slowtmr+0x5a4>)
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d037      	beq.n	800cea2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ce32:	e592      	b.n	800c95a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ce34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce36:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ce38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ce3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce40:	7f1b      	ldrb	r3, [r3, #28]
 800ce42:	3301      	adds	r3, #1
 800ce44:	b2da      	uxtb	r2, r3
 800ce46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce48:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ce4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4c:	7f1a      	ldrb	r2, [r3, #28]
 800ce4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce50:	7f5b      	ldrb	r3, [r3, #29]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d325      	bcc.n	800cea2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ce56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce58:	2200      	movs	r2, #0
 800ce5a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ce5c:	4b1f      	ldr	r3, [pc, #124]	; (800cedc <tcp_slowtmr+0x5a4>)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ce62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d00b      	beq.n	800ce84 <tcp_slowtmr+0x54c>
 800ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce74:	6912      	ldr	r2, [r2, #16]
 800ce76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce78:	4610      	mov	r0, r2
 800ce7a:	4798      	blx	r3
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ce82:	e002      	b.n	800ce8a <tcp_slowtmr+0x552>
 800ce84:	2300      	movs	r3, #0
 800ce86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ce8a:	4b14      	ldr	r3, [pc, #80]	; (800cedc <tcp_slowtmr+0x5a4>)
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d000      	beq.n	800ce94 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ce92:	e562      	b.n	800c95a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ce94:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d102      	bne.n	800cea2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ce9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce9e:	f003 fb81 	bl	80105a4 <tcp_output>
  while (pcb != NULL) {
 800cea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f47f ad5e 	bne.w	800c966 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ceae:	4b0c      	ldr	r3, [pc, #48]	; (800cee0 <tcp_slowtmr+0x5a8>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ceb4:	e069      	b.n	800cf8a <tcp_slowtmr+0x652>
 800ceb6:	bf00      	nop
 800ceb8:	20017ac8 	.word	0x20017ac8
 800cebc:	000a4cb8 	.word	0x000a4cb8
 800cec0:	10624dd3 	.word	0x10624dd3
 800cec4:	000124f8 	.word	0x000124f8
 800cec8:	20017ad4 	.word	0x20017ad4
 800cecc:	0801777c 	.word	0x0801777c
 800ced0:	08017bb4 	.word	0x08017bb4
 800ced4:	080177c0 	.word	0x080177c0
 800ced8:	08017be0 	.word	0x08017be0
 800cedc:	20017adc 	.word	0x20017adc
 800cee0:	20017ad8 	.word	0x20017ad8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee6:	7d1b      	ldrb	r3, [r3, #20]
 800cee8:	2b0a      	cmp	r3, #10
 800ceea:	d006      	beq.n	800cefa <tcp_slowtmr+0x5c2>
 800ceec:	4b2b      	ldr	r3, [pc, #172]	; (800cf9c <tcp_slowtmr+0x664>)
 800ceee:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cef2:	492b      	ldr	r1, [pc, #172]	; (800cfa0 <tcp_slowtmr+0x668>)
 800cef4:	482b      	ldr	r0, [pc, #172]	; (800cfa4 <tcp_slowtmr+0x66c>)
 800cef6:	f007 ffdd 	bl	8014eb4 <iprintf>
    pcb_remove = 0;
 800cefa:	2300      	movs	r3, #0
 800cefc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cf00:	4b29      	ldr	r3, [pc, #164]	; (800cfa8 <tcp_slowtmr+0x670>)
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf06:	6a1b      	ldr	r3, [r3, #32]
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	2bf0      	cmp	r3, #240	; 0xf0
 800cf0c:	d904      	bls.n	800cf18 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cf0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf12:	3301      	adds	r3, #1
 800cf14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cf18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d02f      	beq.n	800cf80 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cf20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf22:	f000 fb2b 	bl	800d57c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d010      	beq.n	800cf4e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cf2c:	4b1f      	ldr	r3, [pc, #124]	; (800cfac <tcp_slowtmr+0x674>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d106      	bne.n	800cf44 <tcp_slowtmr+0x60c>
 800cf36:	4b19      	ldr	r3, [pc, #100]	; (800cf9c <tcp_slowtmr+0x664>)
 800cf38:	f240 52af 	movw	r2, #1455	; 0x5af
 800cf3c:	491c      	ldr	r1, [pc, #112]	; (800cfb0 <tcp_slowtmr+0x678>)
 800cf3e:	4819      	ldr	r0, [pc, #100]	; (800cfa4 <tcp_slowtmr+0x66c>)
 800cf40:	f007 ffb8 	bl	8014eb4 <iprintf>
        prev->next = pcb->next;
 800cf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf46:	68da      	ldr	r2, [r3, #12]
 800cf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4a:	60da      	str	r2, [r3, #12]
 800cf4c:	e00f      	b.n	800cf6e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cf4e:	4b17      	ldr	r3, [pc, #92]	; (800cfac <tcp_slowtmr+0x674>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d006      	beq.n	800cf66 <tcp_slowtmr+0x62e>
 800cf58:	4b10      	ldr	r3, [pc, #64]	; (800cf9c <tcp_slowtmr+0x664>)
 800cf5a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cf5e:	4915      	ldr	r1, [pc, #84]	; (800cfb4 <tcp_slowtmr+0x67c>)
 800cf60:	4810      	ldr	r0, [pc, #64]	; (800cfa4 <tcp_slowtmr+0x66c>)
 800cf62:	f007 ffa7 	bl	8014eb4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	4a10      	ldr	r2, [pc, #64]	; (800cfac <tcp_slowtmr+0x674>)
 800cf6c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf70:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cf78:	69f8      	ldr	r0, [r7, #28]
 800cf7a:	f7ff f93f 	bl	800c1fc <tcp_free>
 800cf7e:	e004      	b.n	800cf8a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf82:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d1a9      	bne.n	800cee4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800cf90:	bf00      	nop
 800cf92:	bf00      	nop
 800cf94:	3730      	adds	r7, #48	; 0x30
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bdb0      	pop	{r4, r5, r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	0801777c 	.word	0x0801777c
 800cfa0:	08017c0c 	.word	0x08017c0c
 800cfa4:	080177c0 	.word	0x080177c0
 800cfa8:	20017ac8 	.word	0x20017ac8
 800cfac:	20017ad8 	.word	0x20017ad8
 800cfb0:	08017c3c 	.word	0x08017c3c
 800cfb4:	08017c64 	.word	0x08017c64

0800cfb8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cfbe:	4b2d      	ldr	r3, [pc, #180]	; (800d074 <tcp_fasttmr+0xbc>)
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	b2da      	uxtb	r2, r3
 800cfc6:	4b2b      	ldr	r3, [pc, #172]	; (800d074 <tcp_fasttmr+0xbc>)
 800cfc8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cfca:	4b2b      	ldr	r3, [pc, #172]	; (800d078 <tcp_fasttmr+0xc0>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cfd0:	e048      	b.n	800d064 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	7f9a      	ldrb	r2, [r3, #30]
 800cfd6:	4b27      	ldr	r3, [pc, #156]	; (800d074 <tcp_fasttmr+0xbc>)
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d03f      	beq.n	800d05e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cfde:	4b25      	ldr	r3, [pc, #148]	; (800d074 <tcp_fasttmr+0xbc>)
 800cfe0:	781a      	ldrb	r2, [r3, #0]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	8b5b      	ldrh	r3, [r3, #26]
 800cfea:	f003 0301 	and.w	r3, r3, #1
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d010      	beq.n	800d014 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	8b5b      	ldrh	r3, [r3, #26]
 800cff6:	f043 0302 	orr.w	r3, r3, #2
 800cffa:	b29a      	uxth	r2, r3
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f003 facf 	bl	80105a4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	8b5b      	ldrh	r3, [r3, #26]
 800d00a:	f023 0303 	bic.w	r3, r3, #3
 800d00e:	b29a      	uxth	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	8b5b      	ldrh	r3, [r3, #26]
 800d018:	f003 0308 	and.w	r3, r3, #8
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d009      	beq.n	800d034 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	8b5b      	ldrh	r3, [r3, #26]
 800d024:	f023 0308 	bic.w	r3, r3, #8
 800d028:	b29a      	uxth	r2, r3
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f7ff fa78 	bl	800c524 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d00a      	beq.n	800d058 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d042:	4b0e      	ldr	r3, [pc, #56]	; (800d07c <tcp_fasttmr+0xc4>)
 800d044:	2200      	movs	r2, #0
 800d046:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 f819 	bl	800d080 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d04e:	4b0b      	ldr	r3, [pc, #44]	; (800d07c <tcp_fasttmr+0xc4>)
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d000      	beq.n	800d058 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d056:	e7b8      	b.n	800cfca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	607b      	str	r3, [r7, #4]
 800d05c:	e002      	b.n	800d064 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d1b3      	bne.n	800cfd2 <tcp_fasttmr+0x1a>
    }
  }
}
 800d06a:	bf00      	nop
 800d06c:	bf00      	nop
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	20017ade 	.word	0x20017ade
 800d078:	20017ad4 	.word	0x20017ad4
 800d07c:	20017adc 	.word	0x20017adc

0800d080 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d080:	b590      	push	{r4, r7, lr}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d109      	bne.n	800d0a2 <tcp_process_refused_data+0x22>
 800d08e:	4b37      	ldr	r3, [pc, #220]	; (800d16c <tcp_process_refused_data+0xec>)
 800d090:	f240 6209 	movw	r2, #1545	; 0x609
 800d094:	4936      	ldr	r1, [pc, #216]	; (800d170 <tcp_process_refused_data+0xf0>)
 800d096:	4837      	ldr	r0, [pc, #220]	; (800d174 <tcp_process_refused_data+0xf4>)
 800d098:	f007 ff0c 	bl	8014eb4 <iprintf>
 800d09c:	f06f 030f 	mvn.w	r3, #15
 800d0a0:	e060      	b.n	800d164 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0a6:	7b5b      	ldrb	r3, [r3, #13]
 800d0a8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0ae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d00b      	beq.n	800d0d8 <tcp_process_refused_data+0x58>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6918      	ldr	r0, [r3, #16]
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	68ba      	ldr	r2, [r7, #8]
 800d0ce:	6879      	ldr	r1, [r7, #4]
 800d0d0:	47a0      	blx	r4
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	73fb      	strb	r3, [r7, #15]
 800d0d6:	e007      	b.n	800d0e8 <tcp_process_refused_data+0x68>
 800d0d8:	2300      	movs	r3, #0
 800d0da:	68ba      	ldr	r2, [r7, #8]
 800d0dc:	6879      	ldr	r1, [r7, #4]
 800d0de:	2000      	movs	r0, #0
 800d0e0:	f000 f8a4 	bl	800d22c <tcp_recv_null>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d0e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d12a      	bne.n	800d146 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d0f0:	7bbb      	ldrb	r3, [r7, #14]
 800d0f2:	f003 0320 	and.w	r3, r3, #32
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d033      	beq.n	800d162 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d102:	d005      	beq.n	800d110 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d108:	3301      	adds	r3, #1
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00b      	beq.n	800d132 <tcp_process_refused_data+0xb2>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6918      	ldr	r0, [r3, #16]
 800d124:	2300      	movs	r3, #0
 800d126:	2200      	movs	r2, #0
 800d128:	6879      	ldr	r1, [r7, #4]
 800d12a:	47a0      	blx	r4
 800d12c:	4603      	mov	r3, r0
 800d12e:	73fb      	strb	r3, [r7, #15]
 800d130:	e001      	b.n	800d136 <tcp_process_refused_data+0xb6>
 800d132:	2300      	movs	r3, #0
 800d134:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d13a:	f113 0f0d 	cmn.w	r3, #13
 800d13e:	d110      	bne.n	800d162 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d140:	f06f 030c 	mvn.w	r3, #12
 800d144:	e00e      	b.n	800d164 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d14a:	f113 0f0d 	cmn.w	r3, #13
 800d14e:	d102      	bne.n	800d156 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d150:	f06f 030c 	mvn.w	r3, #12
 800d154:	e006      	b.n	800d164 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	68ba      	ldr	r2, [r7, #8]
 800d15a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d15c:	f06f 0304 	mvn.w	r3, #4
 800d160:	e000      	b.n	800d164 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d162:	2300      	movs	r3, #0
}
 800d164:	4618      	mov	r0, r3
 800d166:	3714      	adds	r7, #20
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd90      	pop	{r4, r7, pc}
 800d16c:	0801777c 	.word	0x0801777c
 800d170:	08017c8c 	.word	0x08017c8c
 800d174:	080177c0 	.word	0x080177c0

0800d178 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d180:	e007      	b.n	800d192 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f80a 	bl	800d1a2 <tcp_seg_free>
    seg = next;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d1f4      	bne.n	800d182 <tcp_segs_free+0xa>
  }
}
 800d198:	bf00      	nop
 800d19a:	bf00      	nop
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b082      	sub	sp, #8
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d00c      	beq.n	800d1ca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d004      	beq.n	800d1c2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7fe fd61 	bl	800bc84 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d1c2:	6879      	ldr	r1, [r7, #4]
 800d1c4:	2003      	movs	r0, #3
 800d1c6:	f7fd feb9 	bl	800af3c <memp_free>
  }
}
 800d1ca:	bf00      	nop
 800d1cc:	3708      	adds	r7, #8
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
	...

0800d1d4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d106      	bne.n	800d1f0 <tcp_seg_copy+0x1c>
 800d1e2:	4b0f      	ldr	r3, [pc, #60]	; (800d220 <tcp_seg_copy+0x4c>)
 800d1e4:	f240 6282 	movw	r2, #1666	; 0x682
 800d1e8:	490e      	ldr	r1, [pc, #56]	; (800d224 <tcp_seg_copy+0x50>)
 800d1ea:	480f      	ldr	r0, [pc, #60]	; (800d228 <tcp_seg_copy+0x54>)
 800d1ec:	f007 fe62 	bl	8014eb4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d1f0:	2003      	movs	r0, #3
 800d1f2:	f7fd fe2d 	bl	800ae50 <memp_malloc>
 800d1f6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d101      	bne.n	800d202 <tcp_seg_copy+0x2e>
    return NULL;
 800d1fe:	2300      	movs	r3, #0
 800d200:	e00a      	b.n	800d218 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d202:	2210      	movs	r2, #16
 800d204:	6879      	ldr	r1, [r7, #4]
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f007 fd43 	bl	8014c92 <memcpy>
  pbuf_ref(cseg->p);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	4618      	mov	r0, r3
 800d212:	f7fe fddd 	bl	800bdd0 <pbuf_ref>
  return cseg;
 800d216:	68fb      	ldr	r3, [r7, #12]
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3710      	adds	r7, #16
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	0801777c 	.word	0x0801777c
 800d224:	08017cd0 	.word	0x08017cd0
 800d228:	080177c0 	.word	0x080177c0

0800d22c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
 800d238:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d109      	bne.n	800d254 <tcp_recv_null+0x28>
 800d240:	4b12      	ldr	r3, [pc, #72]	; (800d28c <tcp_recv_null+0x60>)
 800d242:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d246:	4912      	ldr	r1, [pc, #72]	; (800d290 <tcp_recv_null+0x64>)
 800d248:	4812      	ldr	r0, [pc, #72]	; (800d294 <tcp_recv_null+0x68>)
 800d24a:	f007 fe33 	bl	8014eb4 <iprintf>
 800d24e:	f06f 030f 	mvn.w	r3, #15
 800d252:	e016      	b.n	800d282 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d009      	beq.n	800d26e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	891b      	ldrh	r3, [r3, #8]
 800d25e:	4619      	mov	r1, r3
 800d260:	68b8      	ldr	r0, [r7, #8]
 800d262:	f7ff fb19 	bl	800c898 <tcp_recved>
    pbuf_free(p);
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7fe fd0c 	bl	800bc84 <pbuf_free>
 800d26c:	e008      	b.n	800d280 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d26e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d104      	bne.n	800d280 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d276:	68b8      	ldr	r0, [r7, #8]
 800d278:	f7ff f9be 	bl	800c5f8 <tcp_close>
 800d27c:	4603      	mov	r3, r0
 800d27e:	e000      	b.n	800d282 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	0801777c 	.word	0x0801777c
 800d290:	08017cec 	.word	0x08017cec
 800d294:	080177c0 	.word	0x080177c0

0800d298 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b086      	sub	sp, #24
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	4603      	mov	r3, r0
 800d2a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d2a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	db01      	blt.n	800d2ae <tcp_kill_prio+0x16>
 800d2aa:	79fb      	ldrb	r3, [r7, #7]
 800d2ac:	e000      	b.n	800d2b0 <tcp_kill_prio+0x18>
 800d2ae:	237f      	movs	r3, #127	; 0x7f
 800d2b0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d2b2:	7afb      	ldrb	r3, [r7, #11]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d034      	beq.n	800d322 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d2b8:	7afb      	ldrb	r3, [r7, #11]
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2c6:	4b19      	ldr	r3, [pc, #100]	; (800d32c <tcp_kill_prio+0x94>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	617b      	str	r3, [r7, #20]
 800d2cc:	e01f      	b.n	800d30e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	7d5b      	ldrb	r3, [r3, #21]
 800d2d2:	7afa      	ldrb	r2, [r7, #11]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d80c      	bhi.n	800d2f2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d2dc:	7afa      	ldrb	r2, [r7, #11]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d112      	bne.n	800d308 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d2e2:	4b13      	ldr	r3, [pc, #76]	; (800d330 <tcp_kill_prio+0x98>)
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	6a1b      	ldr	r3, [r3, #32]
 800d2ea:	1ad3      	subs	r3, r2, r3
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d80a      	bhi.n	800d308 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d2f2:	4b0f      	ldr	r3, [pc, #60]	; (800d330 <tcp_kill_prio+0x98>)
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	6a1b      	ldr	r3, [r3, #32]
 800d2fa:	1ad3      	subs	r3, r2, r3
 800d2fc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	7d5b      	ldrb	r3, [r3, #21]
 800d306:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	617b      	str	r3, [r7, #20]
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d1dc      	bne.n	800d2ce <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d004      	beq.n	800d324 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d31a:	6938      	ldr	r0, [r7, #16]
 800d31c:	f7ff fa56 	bl	800c7cc <tcp_abort>
 800d320:	e000      	b.n	800d324 <tcp_kill_prio+0x8c>
    return;
 800d322:	bf00      	nop
  }
}
 800d324:	3718      	adds	r7, #24
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	20017ad4 	.word	0x20017ad4
 800d330:	20017ac8 	.word	0x20017ac8

0800d334 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	4603      	mov	r3, r0
 800d33c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d33e:	79fb      	ldrb	r3, [r7, #7]
 800d340:	2b08      	cmp	r3, #8
 800d342:	d009      	beq.n	800d358 <tcp_kill_state+0x24>
 800d344:	79fb      	ldrb	r3, [r7, #7]
 800d346:	2b09      	cmp	r3, #9
 800d348:	d006      	beq.n	800d358 <tcp_kill_state+0x24>
 800d34a:	4b1a      	ldr	r3, [pc, #104]	; (800d3b4 <tcp_kill_state+0x80>)
 800d34c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d350:	4919      	ldr	r1, [pc, #100]	; (800d3b8 <tcp_kill_state+0x84>)
 800d352:	481a      	ldr	r0, [pc, #104]	; (800d3bc <tcp_kill_state+0x88>)
 800d354:	f007 fdae 	bl	8014eb4 <iprintf>

  inactivity = 0;
 800d358:	2300      	movs	r3, #0
 800d35a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d35c:	2300      	movs	r3, #0
 800d35e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d360:	4b17      	ldr	r3, [pc, #92]	; (800d3c0 <tcp_kill_state+0x8c>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	617b      	str	r3, [r7, #20]
 800d366:	e017      	b.n	800d398 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	7d1b      	ldrb	r3, [r3, #20]
 800d36c:	79fa      	ldrb	r2, [r7, #7]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d10f      	bne.n	800d392 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d372:	4b14      	ldr	r3, [pc, #80]	; (800d3c4 <tcp_kill_state+0x90>)
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	6a1b      	ldr	r3, [r3, #32]
 800d37a:	1ad3      	subs	r3, r2, r3
 800d37c:	68fa      	ldr	r2, [r7, #12]
 800d37e:	429a      	cmp	r2, r3
 800d380:	d807      	bhi.n	800d392 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d382:	4b10      	ldr	r3, [pc, #64]	; (800d3c4 <tcp_kill_state+0x90>)
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	6a1b      	ldr	r3, [r3, #32]
 800d38a:	1ad3      	subs	r3, r2, r3
 800d38c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	617b      	str	r3, [r7, #20]
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1e4      	bne.n	800d368 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d003      	beq.n	800d3ac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	6938      	ldr	r0, [r7, #16]
 800d3a8:	f7ff f952 	bl	800c650 <tcp_abandon>
  }
}
 800d3ac:	bf00      	nop
 800d3ae:	3718      	adds	r7, #24
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	0801777c 	.word	0x0801777c
 800d3b8:	08017d08 	.word	0x08017d08
 800d3bc:	080177c0 	.word	0x080177c0
 800d3c0:	20017ad4 	.word	0x20017ad4
 800d3c4:	20017ac8 	.word	0x20017ac8

0800d3c8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3d6:	4b12      	ldr	r3, [pc, #72]	; (800d420 <tcp_kill_timewait+0x58>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	60fb      	str	r3, [r7, #12]
 800d3dc:	e012      	b.n	800d404 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d3de:	4b11      	ldr	r3, [pc, #68]	; (800d424 <tcp_kill_timewait+0x5c>)
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	6a1b      	ldr	r3, [r3, #32]
 800d3e6:	1ad3      	subs	r3, r2, r3
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d807      	bhi.n	800d3fe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d3ee:	4b0d      	ldr	r3, [pc, #52]	; (800d424 <tcp_kill_timewait+0x5c>)
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	6a1b      	ldr	r3, [r3, #32]
 800d3f6:	1ad3      	subs	r3, r2, r3
 800d3f8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	68db      	ldr	r3, [r3, #12]
 800d402:	60fb      	str	r3, [r7, #12]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d1e9      	bne.n	800d3de <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d002      	beq.n	800d416 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d410:	68b8      	ldr	r0, [r7, #8]
 800d412:	f7ff f9db 	bl	800c7cc <tcp_abort>
  }
}
 800d416:	bf00      	nop
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	20017ad8 	.word	0x20017ad8
 800d424:	20017ac8 	.word	0x20017ac8

0800d428 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d42e:	4b10      	ldr	r3, [pc, #64]	; (800d470 <tcp_handle_closepend+0x48>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d434:	e014      	b.n	800d460 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	68db      	ldr	r3, [r3, #12]
 800d43a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	8b5b      	ldrh	r3, [r3, #26]
 800d440:	f003 0308 	and.w	r3, r3, #8
 800d444:	2b00      	cmp	r3, #0
 800d446:	d009      	beq.n	800d45c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	8b5b      	ldrh	r3, [r3, #26]
 800d44c:	f023 0308 	bic.w	r3, r3, #8
 800d450:	b29a      	uxth	r2, r3
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f7ff f864 	bl	800c524 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d1e7      	bne.n	800d436 <tcp_handle_closepend+0xe>
  }
}
 800d466:	bf00      	nop
 800d468:	bf00      	nop
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	20017ad4 	.word	0x20017ad4

0800d474 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	4603      	mov	r3, r0
 800d47c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d47e:	2001      	movs	r0, #1
 800d480:	f7fd fce6 	bl	800ae50 <memp_malloc>
 800d484:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d126      	bne.n	800d4da <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d48c:	f7ff ffcc 	bl	800d428 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d490:	f7ff ff9a 	bl	800d3c8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d494:	2001      	movs	r0, #1
 800d496:	f7fd fcdb 	bl	800ae50 <memp_malloc>
 800d49a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d11b      	bne.n	800d4da <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d4a2:	2009      	movs	r0, #9
 800d4a4:	f7ff ff46 	bl	800d334 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d4a8:	2001      	movs	r0, #1
 800d4aa:	f7fd fcd1 	bl	800ae50 <memp_malloc>
 800d4ae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d111      	bne.n	800d4da <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d4b6:	2008      	movs	r0, #8
 800d4b8:	f7ff ff3c 	bl	800d334 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d4bc:	2001      	movs	r0, #1
 800d4be:	f7fd fcc7 	bl	800ae50 <memp_malloc>
 800d4c2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d107      	bne.n	800d4da <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d4ca:	79fb      	ldrb	r3, [r7, #7]
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff fee3 	bl	800d298 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d4d2:	2001      	movs	r0, #1
 800d4d4:	f7fd fcbc 	bl	800ae50 <memp_malloc>
 800d4d8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d03f      	beq.n	800d560 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d4e0:	229c      	movs	r2, #156	; 0x9c
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	68f8      	ldr	r0, [r7, #12]
 800d4e6:	f007 fbfc 	bl	8014ce2 <memset>
    pcb->prio = prio;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	79fa      	ldrb	r2, [r7, #7]
 800d4ee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d4f6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d500:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	22ff      	movs	r2, #255	; 0xff
 800d50e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d516:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2206      	movs	r2, #6
 800d51c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2206      	movs	r2, #6
 800d524:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d52c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2201      	movs	r2, #1
 800d532:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d536:	4b0d      	ldr	r3, [pc, #52]	; (800d56c <tcp_alloc+0xf8>)
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d53e:	4b0c      	ldr	r3, [pc, #48]	; (800d570 <tcp_alloc+0xfc>)
 800d540:	781a      	ldrb	r2, [r3, #0]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d54c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	4a08      	ldr	r2, [pc, #32]	; (800d574 <tcp_alloc+0x100>)
 800d554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	4a07      	ldr	r2, [pc, #28]	; (800d578 <tcp_alloc+0x104>)
 800d55c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d560:	68fb      	ldr	r3, [r7, #12]
}
 800d562:	4618      	mov	r0, r3
 800d564:	3710      	adds	r7, #16
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	20017ac8 	.word	0x20017ac8
 800d570:	20017ade 	.word	0x20017ade
 800d574:	0800d22d 	.word	0x0800d22d
 800d578:	006ddd00 	.word	0x006ddd00

0800d57c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d107      	bne.n	800d59a <tcp_pcb_purge+0x1e>
 800d58a:	4b21      	ldr	r3, [pc, #132]	; (800d610 <tcp_pcb_purge+0x94>)
 800d58c:	f640 0251 	movw	r2, #2129	; 0x851
 800d590:	4920      	ldr	r1, [pc, #128]	; (800d614 <tcp_pcb_purge+0x98>)
 800d592:	4821      	ldr	r0, [pc, #132]	; (800d618 <tcp_pcb_purge+0x9c>)
 800d594:	f007 fc8e 	bl	8014eb4 <iprintf>
 800d598:	e037      	b.n	800d60a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	7d1b      	ldrb	r3, [r3, #20]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d033      	beq.n	800d60a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d5a6:	2b0a      	cmp	r3, #10
 800d5a8:	d02f      	beq.n	800d60a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d02b      	beq.n	800d60a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d007      	beq.n	800d5ca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fe fb60 	bl	800bc84 <pbuf_free>
      pcb->refused_data = NULL;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d002      	beq.n	800d5d8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f000 f986 	bl	800d8e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5de:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7ff fdc7 	bl	800d178 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7ff fdc2 	bl	800d178 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	66da      	str	r2, [r3, #108]	; 0x6c
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2200      	movs	r2, #0
 800d606:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	0801777c 	.word	0x0801777c
 800d614:	08017dc8 	.word	0x08017dc8
 800d618:	080177c0 	.word	0x080177c0

0800d61c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d106      	bne.n	800d63a <tcp_pcb_remove+0x1e>
 800d62c:	4b3e      	ldr	r3, [pc, #248]	; (800d728 <tcp_pcb_remove+0x10c>)
 800d62e:	f640 0283 	movw	r2, #2179	; 0x883
 800d632:	493e      	ldr	r1, [pc, #248]	; (800d72c <tcp_pcb_remove+0x110>)
 800d634:	483e      	ldr	r0, [pc, #248]	; (800d730 <tcp_pcb_remove+0x114>)
 800d636:	f007 fc3d 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d106      	bne.n	800d64e <tcp_pcb_remove+0x32>
 800d640:	4b39      	ldr	r3, [pc, #228]	; (800d728 <tcp_pcb_remove+0x10c>)
 800d642:	f640 0284 	movw	r2, #2180	; 0x884
 800d646:	493b      	ldr	r1, [pc, #236]	; (800d734 <tcp_pcb_remove+0x118>)
 800d648:	4839      	ldr	r0, [pc, #228]	; (800d730 <tcp_pcb_remove+0x114>)
 800d64a:	f007 fc33 	bl	8014eb4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	683a      	ldr	r2, [r7, #0]
 800d654:	429a      	cmp	r2, r3
 800d656:	d105      	bne.n	800d664 <tcp_pcb_remove+0x48>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	68da      	ldr	r2, [r3, #12]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	601a      	str	r2, [r3, #0]
 800d662:	e013      	b.n	800d68c <tcp_pcb_remove+0x70>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	60fb      	str	r3, [r7, #12]
 800d66a:	e00c      	b.n	800d686 <tcp_pcb_remove+0x6a>
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	68db      	ldr	r3, [r3, #12]
 800d670:	683a      	ldr	r2, [r7, #0]
 800d672:	429a      	cmp	r2, r3
 800d674:	d104      	bne.n	800d680 <tcp_pcb_remove+0x64>
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	68da      	ldr	r2, [r3, #12]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	60da      	str	r2, [r3, #12]
 800d67e:	e005      	b.n	800d68c <tcp_pcb_remove+0x70>
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	68db      	ldr	r3, [r3, #12]
 800d684:	60fb      	str	r3, [r7, #12]
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d1ef      	bne.n	800d66c <tcp_pcb_remove+0x50>
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	2200      	movs	r2, #0
 800d690:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d692:	6838      	ldr	r0, [r7, #0]
 800d694:	f7ff ff72 	bl	800d57c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	7d1b      	ldrb	r3, [r3, #20]
 800d69c:	2b0a      	cmp	r3, #10
 800d69e:	d013      	beq.n	800d6c8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d00f      	beq.n	800d6c8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	8b5b      	ldrh	r3, [r3, #26]
 800d6ac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d009      	beq.n	800d6c8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	8b5b      	ldrh	r3, [r3, #26]
 800d6b8:	f043 0302 	orr.w	r3, r3, #2
 800d6bc:	b29a      	uxth	r2, r3
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d6c2:	6838      	ldr	r0, [r7, #0]
 800d6c4:	f002 ff6e 	bl	80105a4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	7d1b      	ldrb	r3, [r3, #20]
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d020      	beq.n	800d712 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d006      	beq.n	800d6e6 <tcp_pcb_remove+0xca>
 800d6d8:	4b13      	ldr	r3, [pc, #76]	; (800d728 <tcp_pcb_remove+0x10c>)
 800d6da:	f640 0293 	movw	r2, #2195	; 0x893
 800d6de:	4916      	ldr	r1, [pc, #88]	; (800d738 <tcp_pcb_remove+0x11c>)
 800d6e0:	4813      	ldr	r0, [pc, #76]	; (800d730 <tcp_pcb_remove+0x114>)
 800d6e2:	f007 fbe7 	bl	8014eb4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d006      	beq.n	800d6fc <tcp_pcb_remove+0xe0>
 800d6ee:	4b0e      	ldr	r3, [pc, #56]	; (800d728 <tcp_pcb_remove+0x10c>)
 800d6f0:	f640 0294 	movw	r2, #2196	; 0x894
 800d6f4:	4911      	ldr	r1, [pc, #68]	; (800d73c <tcp_pcb_remove+0x120>)
 800d6f6:	480e      	ldr	r0, [pc, #56]	; (800d730 <tcp_pcb_remove+0x114>)
 800d6f8:	f007 fbdc 	bl	8014eb4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d700:	2b00      	cmp	r3, #0
 800d702:	d006      	beq.n	800d712 <tcp_pcb_remove+0xf6>
 800d704:	4b08      	ldr	r3, [pc, #32]	; (800d728 <tcp_pcb_remove+0x10c>)
 800d706:	f640 0296 	movw	r2, #2198	; 0x896
 800d70a:	490d      	ldr	r1, [pc, #52]	; (800d740 <tcp_pcb_remove+0x124>)
 800d70c:	4808      	ldr	r0, [pc, #32]	; (800d730 <tcp_pcb_remove+0x114>)
 800d70e:	f007 fbd1 	bl	8014eb4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	2200      	movs	r2, #0
 800d716:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	2200      	movs	r2, #0
 800d71c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d71e:	bf00      	nop
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	0801777c 	.word	0x0801777c
 800d72c:	08017de4 	.word	0x08017de4
 800d730:	080177c0 	.word	0x080177c0
 800d734:	08017e00 	.word	0x08017e00
 800d738:	08017e20 	.word	0x08017e20
 800d73c:	08017e38 	.word	0x08017e38
 800d740:	08017e54 	.word	0x08017e54

0800d744 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d106      	bne.n	800d760 <tcp_next_iss+0x1c>
 800d752:	4b0a      	ldr	r3, [pc, #40]	; (800d77c <tcp_next_iss+0x38>)
 800d754:	f640 02af 	movw	r2, #2223	; 0x8af
 800d758:	4909      	ldr	r1, [pc, #36]	; (800d780 <tcp_next_iss+0x3c>)
 800d75a:	480a      	ldr	r0, [pc, #40]	; (800d784 <tcp_next_iss+0x40>)
 800d75c:	f007 fbaa 	bl	8014eb4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d760:	4b09      	ldr	r3, [pc, #36]	; (800d788 <tcp_next_iss+0x44>)
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	4b09      	ldr	r3, [pc, #36]	; (800d78c <tcp_next_iss+0x48>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4413      	add	r3, r2
 800d76a:	4a07      	ldr	r2, [pc, #28]	; (800d788 <tcp_next_iss+0x44>)
 800d76c:	6013      	str	r3, [r2, #0]
  return iss;
 800d76e:	4b06      	ldr	r3, [pc, #24]	; (800d788 <tcp_next_iss+0x44>)
 800d770:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d772:	4618      	mov	r0, r3
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	0801777c 	.word	0x0801777c
 800d780:	08017e6c 	.word	0x08017e6c
 800d784:	080177c0 	.word	0x080177c0
 800d788:	20000028 	.word	0x20000028
 800d78c:	20017ac8 	.word	0x20017ac8

0800d790 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b086      	sub	sp, #24
 800d794:	af00      	add	r7, sp, #0
 800d796:	4603      	mov	r3, r0
 800d798:	60b9      	str	r1, [r7, #8]
 800d79a:	607a      	str	r2, [r7, #4]
 800d79c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d106      	bne.n	800d7b2 <tcp_eff_send_mss_netif+0x22>
 800d7a4:	4b14      	ldr	r3, [pc, #80]	; (800d7f8 <tcp_eff_send_mss_netif+0x68>)
 800d7a6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d7aa:	4914      	ldr	r1, [pc, #80]	; (800d7fc <tcp_eff_send_mss_netif+0x6c>)
 800d7ac:	4814      	ldr	r0, [pc, #80]	; (800d800 <tcp_eff_send_mss_netif+0x70>)
 800d7ae:	f007 fb81 	bl	8014eb4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d101      	bne.n	800d7bc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d7b8:	89fb      	ldrh	r3, [r7, #14]
 800d7ba:	e019      	b.n	800d7f0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d7c0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d7c2:	8afb      	ldrh	r3, [r7, #22]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d012      	beq.n	800d7ee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d7c8:	2328      	movs	r3, #40	; 0x28
 800d7ca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d7cc:	8afa      	ldrh	r2, [r7, #22]
 800d7ce:	8abb      	ldrh	r3, [r7, #20]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d904      	bls.n	800d7de <tcp_eff_send_mss_netif+0x4e>
 800d7d4:	8afa      	ldrh	r2, [r7, #22]
 800d7d6:	8abb      	ldrh	r3, [r7, #20]
 800d7d8:	1ad3      	subs	r3, r2, r3
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	e000      	b.n	800d7e0 <tcp_eff_send_mss_netif+0x50>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d7e2:	8a7a      	ldrh	r2, [r7, #18]
 800d7e4:	89fb      	ldrh	r3, [r7, #14]
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	bf28      	it	cs
 800d7ea:	4613      	movcs	r3, r2
 800d7ec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d7ee:	89fb      	ldrh	r3, [r7, #14]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3718      	adds	r7, #24
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	0801777c 	.word	0x0801777c
 800d7fc:	08017e88 	.word	0x08017e88
 800d800:	080177c0 	.word	0x080177c0

0800d804 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b084      	sub	sp, #16
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d119      	bne.n	800d84c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d818:	4b10      	ldr	r3, [pc, #64]	; (800d85c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d81a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d81e:	4910      	ldr	r1, [pc, #64]	; (800d860 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d820:	4810      	ldr	r0, [pc, #64]	; (800d864 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d822:	f007 fb47 	bl	8014eb4 <iprintf>

  while (pcb != NULL) {
 800d826:	e011      	b.n	800d84c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	429a      	cmp	r2, r3
 800d832:	d108      	bne.n	800d846 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	68db      	ldr	r3, [r3, #12]
 800d838:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	f7fe ffc6 	bl	800c7cc <tcp_abort>
      pcb = next;
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	60fb      	str	r3, [r7, #12]
 800d844:	e002      	b.n	800d84c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d1ea      	bne.n	800d828 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d852:	bf00      	nop
 800d854:	bf00      	nop
 800d856:	3710      	adds	r7, #16
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	0801777c 	.word	0x0801777c
 800d860:	08017eb0 	.word	0x08017eb0
 800d864:	080177c0 	.word	0x080177c0

0800d868 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d02a      	beq.n	800d8ce <tcp_netif_ip_addr_changed+0x66>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d026      	beq.n	800d8ce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d880:	4b15      	ldr	r3, [pc, #84]	; (800d8d8 <tcp_netif_ip_addr_changed+0x70>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4619      	mov	r1, r3
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f7ff ffbc 	bl	800d804 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d88c:	4b13      	ldr	r3, [pc, #76]	; (800d8dc <tcp_netif_ip_addr_changed+0x74>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4619      	mov	r1, r3
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f7ff ffb6 	bl	800d804 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d017      	beq.n	800d8ce <tcp_netif_ip_addr_changed+0x66>
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d013      	beq.n	800d8ce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d8a6:	4b0e      	ldr	r3, [pc, #56]	; (800d8e0 <tcp_netif_ip_addr_changed+0x78>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	60fb      	str	r3, [r7, #12]
 800d8ac:	e00c      	b.n	800d8c8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681a      	ldr	r2, [r3, #0]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d103      	bne.n	800d8c2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	60fb      	str	r3, [r7, #12]
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d1ef      	bne.n	800d8ae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d8ce:	bf00      	nop
 800d8d0:	3710      	adds	r7, #16
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	20017ad4 	.word	0x20017ad4
 800d8dc:	20017acc 	.word	0x20017acc
 800d8e0:	20017ad0 	.word	0x20017ad0

0800d8e4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d007      	beq.n	800d904 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7ff fc3d 	bl	800d178 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2200      	movs	r2, #0
 800d902:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d904:	bf00      	nop
 800d906:	3708      	adds	r7, #8
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d90c:	b590      	push	{r4, r7, lr}
 800d90e:	b08d      	sub	sp, #52	; 0x34
 800d910:	af04      	add	r7, sp, #16
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d105      	bne.n	800d928 <tcp_input+0x1c>
 800d91c:	4b9b      	ldr	r3, [pc, #620]	; (800db8c <tcp_input+0x280>)
 800d91e:	2283      	movs	r2, #131	; 0x83
 800d920:	499b      	ldr	r1, [pc, #620]	; (800db90 <tcp_input+0x284>)
 800d922:	489c      	ldr	r0, [pc, #624]	; (800db94 <tcp_input+0x288>)
 800d924:	f007 fac6 	bl	8014eb4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	4a9a      	ldr	r2, [pc, #616]	; (800db98 <tcp_input+0x28c>)
 800d92e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	895b      	ldrh	r3, [r3, #10]
 800d934:	2b13      	cmp	r3, #19
 800d936:	f240 83d1 	bls.w	800e0dc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d93a:	4b98      	ldr	r3, [pc, #608]	; (800db9c <tcp_input+0x290>)
 800d93c:	695b      	ldr	r3, [r3, #20]
 800d93e:	4a97      	ldr	r2, [pc, #604]	; (800db9c <tcp_input+0x290>)
 800d940:	6812      	ldr	r2, [r2, #0]
 800d942:	4611      	mov	r1, r2
 800d944:	4618      	mov	r0, r3
 800d946:	f005 ff37 	bl	80137b8 <ip4_addr_isbroadcast_u32>
 800d94a:	4603      	mov	r3, r0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f040 83c7 	bne.w	800e0e0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d952:	4b92      	ldr	r3, [pc, #584]	; (800db9c <tcp_input+0x290>)
 800d954:	695b      	ldr	r3, [r3, #20]
 800d956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d95a:	2be0      	cmp	r3, #224	; 0xe0
 800d95c:	f000 83c0 	beq.w	800e0e0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d960:	4b8d      	ldr	r3, [pc, #564]	; (800db98 <tcp_input+0x28c>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	899b      	ldrh	r3, [r3, #12]
 800d966:	b29b      	uxth	r3, r3
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fc fd99 	bl	800a4a0 <lwip_htons>
 800d96e:	4603      	mov	r3, r0
 800d970:	0b1b      	lsrs	r3, r3, #12
 800d972:	b29b      	uxth	r3, r3
 800d974:	b2db      	uxtb	r3, r3
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d97a:	7cbb      	ldrb	r3, [r7, #18]
 800d97c:	2b13      	cmp	r3, #19
 800d97e:	f240 83b1 	bls.w	800e0e4 <tcp_input+0x7d8>
 800d982:	7cbb      	ldrb	r3, [r7, #18]
 800d984:	b29a      	uxth	r2, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	891b      	ldrh	r3, [r3, #8]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	f200 83aa 	bhi.w	800e0e4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d990:	7cbb      	ldrb	r3, [r7, #18]
 800d992:	b29b      	uxth	r3, r3
 800d994:	3b14      	subs	r3, #20
 800d996:	b29a      	uxth	r2, r3
 800d998:	4b81      	ldr	r3, [pc, #516]	; (800dba0 <tcp_input+0x294>)
 800d99a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d99c:	4b81      	ldr	r3, [pc, #516]	; (800dba4 <tcp_input+0x298>)
 800d99e:	2200      	movs	r2, #0
 800d9a0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	895a      	ldrh	r2, [r3, #10]
 800d9a6:	7cbb      	ldrb	r3, [r7, #18]
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d309      	bcc.n	800d9c2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d9ae:	4b7c      	ldr	r3, [pc, #496]	; (800dba0 <tcp_input+0x294>)
 800d9b0:	881a      	ldrh	r2, [r3, #0]
 800d9b2:	4b7d      	ldr	r3, [pc, #500]	; (800dba8 <tcp_input+0x29c>)
 800d9b4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d9b6:	7cbb      	ldrb	r3, [r7, #18]
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f7fe f8dc 	bl	800bb78 <pbuf_remove_header>
 800d9c0:	e04e      	b.n	800da60 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d105      	bne.n	800d9d6 <tcp_input+0xca>
 800d9ca:	4b70      	ldr	r3, [pc, #448]	; (800db8c <tcp_input+0x280>)
 800d9cc:	22c2      	movs	r2, #194	; 0xc2
 800d9ce:	4977      	ldr	r1, [pc, #476]	; (800dbac <tcp_input+0x2a0>)
 800d9d0:	4870      	ldr	r0, [pc, #448]	; (800db94 <tcp_input+0x288>)
 800d9d2:	f007 fa6f 	bl	8014eb4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d9d6:	2114      	movs	r1, #20
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f7fe f8cd 	bl	800bb78 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	895a      	ldrh	r2, [r3, #10]
 800d9e2:	4b71      	ldr	r3, [pc, #452]	; (800dba8 <tcp_input+0x29c>)
 800d9e4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d9e6:	4b6e      	ldr	r3, [pc, #440]	; (800dba0 <tcp_input+0x294>)
 800d9e8:	881a      	ldrh	r2, [r3, #0]
 800d9ea:	4b6f      	ldr	r3, [pc, #444]	; (800dba8 <tcp_input+0x29c>)
 800d9ec:	881b      	ldrh	r3, [r3, #0]
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d9f2:	4b6d      	ldr	r3, [pc, #436]	; (800dba8 <tcp_input+0x29c>)
 800d9f4:	881b      	ldrh	r3, [r3, #0]
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f7fe f8bd 	bl	800bb78 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	895b      	ldrh	r3, [r3, #10]
 800da04:	8a3a      	ldrh	r2, [r7, #16]
 800da06:	429a      	cmp	r2, r3
 800da08:	f200 836e 	bhi.w	800e0e8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	4a64      	ldr	r2, [pc, #400]	; (800dba4 <tcp_input+0x298>)
 800da14:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	8a3a      	ldrh	r2, [r7, #16]
 800da1c:	4611      	mov	r1, r2
 800da1e:	4618      	mov	r0, r3
 800da20:	f7fe f8aa 	bl	800bb78 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	891a      	ldrh	r2, [r3, #8]
 800da28:	8a3b      	ldrh	r3, [r7, #16]
 800da2a:	1ad3      	subs	r3, r2, r3
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	895b      	ldrh	r3, [r3, #10]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d005      	beq.n	800da46 <tcp_input+0x13a>
 800da3a:	4b54      	ldr	r3, [pc, #336]	; (800db8c <tcp_input+0x280>)
 800da3c:	22df      	movs	r2, #223	; 0xdf
 800da3e:	495c      	ldr	r1, [pc, #368]	; (800dbb0 <tcp_input+0x2a4>)
 800da40:	4854      	ldr	r0, [pc, #336]	; (800db94 <tcp_input+0x288>)
 800da42:	f007 fa37 	bl	8014eb4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	891a      	ldrh	r2, [r3, #8]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	891b      	ldrh	r3, [r3, #8]
 800da50:	429a      	cmp	r2, r3
 800da52:	d005      	beq.n	800da60 <tcp_input+0x154>
 800da54:	4b4d      	ldr	r3, [pc, #308]	; (800db8c <tcp_input+0x280>)
 800da56:	22e0      	movs	r2, #224	; 0xe0
 800da58:	4956      	ldr	r1, [pc, #344]	; (800dbb4 <tcp_input+0x2a8>)
 800da5a:	484e      	ldr	r0, [pc, #312]	; (800db94 <tcp_input+0x288>)
 800da5c:	f007 fa2a 	bl	8014eb4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800da60:	4b4d      	ldr	r3, [pc, #308]	; (800db98 <tcp_input+0x28c>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	881b      	ldrh	r3, [r3, #0]
 800da66:	b29b      	uxth	r3, r3
 800da68:	4a4b      	ldr	r2, [pc, #300]	; (800db98 <tcp_input+0x28c>)
 800da6a:	6814      	ldr	r4, [r2, #0]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fc fd17 	bl	800a4a0 <lwip_htons>
 800da72:	4603      	mov	r3, r0
 800da74:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800da76:	4b48      	ldr	r3, [pc, #288]	; (800db98 <tcp_input+0x28c>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	885b      	ldrh	r3, [r3, #2]
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	4a46      	ldr	r2, [pc, #280]	; (800db98 <tcp_input+0x28c>)
 800da80:	6814      	ldr	r4, [r2, #0]
 800da82:	4618      	mov	r0, r3
 800da84:	f7fc fd0c 	bl	800a4a0 <lwip_htons>
 800da88:	4603      	mov	r3, r0
 800da8a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800da8c:	4b42      	ldr	r3, [pc, #264]	; (800db98 <tcp_input+0x28c>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	4a41      	ldr	r2, [pc, #260]	; (800db98 <tcp_input+0x28c>)
 800da94:	6814      	ldr	r4, [r2, #0]
 800da96:	4618      	mov	r0, r3
 800da98:	f7fc fd17 	bl	800a4ca <lwip_htonl>
 800da9c:	4603      	mov	r3, r0
 800da9e:	6063      	str	r3, [r4, #4]
 800daa0:	6863      	ldr	r3, [r4, #4]
 800daa2:	4a45      	ldr	r2, [pc, #276]	; (800dbb8 <tcp_input+0x2ac>)
 800daa4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800daa6:	4b3c      	ldr	r3, [pc, #240]	; (800db98 <tcp_input+0x28c>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	689b      	ldr	r3, [r3, #8]
 800daac:	4a3a      	ldr	r2, [pc, #232]	; (800db98 <tcp_input+0x28c>)
 800daae:	6814      	ldr	r4, [r2, #0]
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7fc fd0a 	bl	800a4ca <lwip_htonl>
 800dab6:	4603      	mov	r3, r0
 800dab8:	60a3      	str	r3, [r4, #8]
 800daba:	68a3      	ldr	r3, [r4, #8]
 800dabc:	4a3f      	ldr	r2, [pc, #252]	; (800dbbc <tcp_input+0x2b0>)
 800dabe:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dac0:	4b35      	ldr	r3, [pc, #212]	; (800db98 <tcp_input+0x28c>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	89db      	ldrh	r3, [r3, #14]
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	4a33      	ldr	r2, [pc, #204]	; (800db98 <tcp_input+0x28c>)
 800daca:	6814      	ldr	r4, [r2, #0]
 800dacc:	4618      	mov	r0, r3
 800dace:	f7fc fce7 	bl	800a4a0 <lwip_htons>
 800dad2:	4603      	mov	r3, r0
 800dad4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dad6:	4b30      	ldr	r3, [pc, #192]	; (800db98 <tcp_input+0x28c>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	899b      	ldrh	r3, [r3, #12]
 800dadc:	b29b      	uxth	r3, r3
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fc fcde 	bl	800a4a0 <lwip_htons>
 800dae4:	4603      	mov	r3, r0
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800daec:	b2da      	uxtb	r2, r3
 800daee:	4b34      	ldr	r3, [pc, #208]	; (800dbc0 <tcp_input+0x2b4>)
 800daf0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	891a      	ldrh	r2, [r3, #8]
 800daf6:	4b33      	ldr	r3, [pc, #204]	; (800dbc4 <tcp_input+0x2b8>)
 800daf8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dafa:	4b31      	ldr	r3, [pc, #196]	; (800dbc0 <tcp_input+0x2b4>)
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	f003 0303 	and.w	r3, r3, #3
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00c      	beq.n	800db20 <tcp_input+0x214>
    tcplen++;
 800db06:	4b2f      	ldr	r3, [pc, #188]	; (800dbc4 <tcp_input+0x2b8>)
 800db08:	881b      	ldrh	r3, [r3, #0]
 800db0a:	3301      	adds	r3, #1
 800db0c:	b29a      	uxth	r2, r3
 800db0e:	4b2d      	ldr	r3, [pc, #180]	; (800dbc4 <tcp_input+0x2b8>)
 800db10:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	891a      	ldrh	r2, [r3, #8]
 800db16:	4b2b      	ldr	r3, [pc, #172]	; (800dbc4 <tcp_input+0x2b8>)
 800db18:	881b      	ldrh	r3, [r3, #0]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	f200 82e6 	bhi.w	800e0ec <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800db20:	2300      	movs	r3, #0
 800db22:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db24:	4b28      	ldr	r3, [pc, #160]	; (800dbc8 <tcp_input+0x2bc>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	61fb      	str	r3, [r7, #28]
 800db2a:	e09d      	b.n	800dc68 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	7d1b      	ldrb	r3, [r3, #20]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d105      	bne.n	800db40 <tcp_input+0x234>
 800db34:	4b15      	ldr	r3, [pc, #84]	; (800db8c <tcp_input+0x280>)
 800db36:	22fb      	movs	r2, #251	; 0xfb
 800db38:	4924      	ldr	r1, [pc, #144]	; (800dbcc <tcp_input+0x2c0>)
 800db3a:	4816      	ldr	r0, [pc, #88]	; (800db94 <tcp_input+0x288>)
 800db3c:	f007 f9ba 	bl	8014eb4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800db40:	69fb      	ldr	r3, [r7, #28]
 800db42:	7d1b      	ldrb	r3, [r3, #20]
 800db44:	2b0a      	cmp	r3, #10
 800db46:	d105      	bne.n	800db54 <tcp_input+0x248>
 800db48:	4b10      	ldr	r3, [pc, #64]	; (800db8c <tcp_input+0x280>)
 800db4a:	22fc      	movs	r2, #252	; 0xfc
 800db4c:	4920      	ldr	r1, [pc, #128]	; (800dbd0 <tcp_input+0x2c4>)
 800db4e:	4811      	ldr	r0, [pc, #68]	; (800db94 <tcp_input+0x288>)
 800db50:	f007 f9b0 	bl	8014eb4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	7d1b      	ldrb	r3, [r3, #20]
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d105      	bne.n	800db68 <tcp_input+0x25c>
 800db5c:	4b0b      	ldr	r3, [pc, #44]	; (800db8c <tcp_input+0x280>)
 800db5e:	22fd      	movs	r2, #253	; 0xfd
 800db60:	491c      	ldr	r1, [pc, #112]	; (800dbd4 <tcp_input+0x2c8>)
 800db62:	480c      	ldr	r0, [pc, #48]	; (800db94 <tcp_input+0x288>)
 800db64:	f007 f9a6 	bl	8014eb4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	7a1b      	ldrb	r3, [r3, #8]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d033      	beq.n	800dbd8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	7a1a      	ldrb	r2, [r3, #8]
 800db74:	4b09      	ldr	r3, [pc, #36]	; (800db9c <tcp_input+0x290>)
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db7c:	3301      	adds	r3, #1
 800db7e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db80:	429a      	cmp	r2, r3
 800db82:	d029      	beq.n	800dbd8 <tcp_input+0x2cc>
      prev = pcb;
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	61bb      	str	r3, [r7, #24]
      continue;
 800db88:	e06b      	b.n	800dc62 <tcp_input+0x356>
 800db8a:	bf00      	nop
 800db8c:	08017ee4 	.word	0x08017ee4
 800db90:	08017f18 	.word	0x08017f18
 800db94:	08017f30 	.word	0x08017f30
 800db98:	20017af0 	.word	0x20017af0
 800db9c:	200139b4 	.word	0x200139b4
 800dba0:	20017af4 	.word	0x20017af4
 800dba4:	20017af8 	.word	0x20017af8
 800dba8:	20017af6 	.word	0x20017af6
 800dbac:	08017f58 	.word	0x08017f58
 800dbb0:	08017f68 	.word	0x08017f68
 800dbb4:	08017f74 	.word	0x08017f74
 800dbb8:	20017b00 	.word	0x20017b00
 800dbbc:	20017b04 	.word	0x20017b04
 800dbc0:	20017b0c 	.word	0x20017b0c
 800dbc4:	20017b0a 	.word	0x20017b0a
 800dbc8:	20017ad4 	.word	0x20017ad4
 800dbcc:	08017f94 	.word	0x08017f94
 800dbd0:	08017fbc 	.word	0x08017fbc
 800dbd4:	08017fe8 	.word	0x08017fe8
    }

    if (pcb->remote_port == tcphdr->src &&
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	8b1a      	ldrh	r2, [r3, #24]
 800dbdc:	4b72      	ldr	r3, [pc, #456]	; (800dda8 <tcp_input+0x49c>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	881b      	ldrh	r3, [r3, #0]
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d13a      	bne.n	800dc5e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	8ada      	ldrh	r2, [r3, #22]
 800dbec:	4b6e      	ldr	r3, [pc, #440]	; (800dda8 <tcp_input+0x49c>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	885b      	ldrh	r3, [r3, #2]
 800dbf2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d132      	bne.n	800dc5e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	685a      	ldr	r2, [r3, #4]
 800dbfc:	4b6b      	ldr	r3, [pc, #428]	; (800ddac <tcp_input+0x4a0>)
 800dbfe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d12c      	bne.n	800dc5e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	4b68      	ldr	r3, [pc, #416]	; (800ddac <tcp_input+0x4a0>)
 800dc0a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d126      	bne.n	800dc5e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	68db      	ldr	r3, [r3, #12]
 800dc14:	69fa      	ldr	r2, [r7, #28]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d106      	bne.n	800dc28 <tcp_input+0x31c>
 800dc1a:	4b65      	ldr	r3, [pc, #404]	; (800ddb0 <tcp_input+0x4a4>)
 800dc1c:	f240 120d 	movw	r2, #269	; 0x10d
 800dc20:	4964      	ldr	r1, [pc, #400]	; (800ddb4 <tcp_input+0x4a8>)
 800dc22:	4865      	ldr	r0, [pc, #404]	; (800ddb8 <tcp_input+0x4ac>)
 800dc24:	f007 f946 	bl	8014eb4 <iprintf>
      if (prev != NULL) {
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d00a      	beq.n	800dc44 <tcp_input+0x338>
        prev->next = pcb->next;
 800dc2e:	69fb      	ldr	r3, [r7, #28]
 800dc30:	68da      	ldr	r2, [r3, #12]
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800dc36:	4b61      	ldr	r3, [pc, #388]	; (800ddbc <tcp_input+0x4b0>)
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dc3e:	4a5f      	ldr	r2, [pc, #380]	; (800ddbc <tcp_input+0x4b0>)
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	69fa      	ldr	r2, [r7, #28]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d111      	bne.n	800dc72 <tcp_input+0x366>
 800dc4e:	4b58      	ldr	r3, [pc, #352]	; (800ddb0 <tcp_input+0x4a4>)
 800dc50:	f240 1215 	movw	r2, #277	; 0x115
 800dc54:	495a      	ldr	r1, [pc, #360]	; (800ddc0 <tcp_input+0x4b4>)
 800dc56:	4858      	ldr	r0, [pc, #352]	; (800ddb8 <tcp_input+0x4ac>)
 800dc58:	f007 f92c 	bl	8014eb4 <iprintf>
      break;
 800dc5c:	e009      	b.n	800dc72 <tcp_input+0x366>
    }
    prev = pcb;
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	61fb      	str	r3, [r7, #28]
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f47f af5e 	bne.w	800db2c <tcp_input+0x220>
 800dc70:	e000      	b.n	800dc74 <tcp_input+0x368>
      break;
 800dc72:	bf00      	nop
  }

  if (pcb == NULL) {
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f040 80aa 	bne.w	800ddd0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc7c:	4b51      	ldr	r3, [pc, #324]	; (800ddc4 <tcp_input+0x4b8>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	61fb      	str	r3, [r7, #28]
 800dc82:	e03f      	b.n	800dd04 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	7d1b      	ldrb	r3, [r3, #20]
 800dc88:	2b0a      	cmp	r3, #10
 800dc8a:	d006      	beq.n	800dc9a <tcp_input+0x38e>
 800dc8c:	4b48      	ldr	r3, [pc, #288]	; (800ddb0 <tcp_input+0x4a4>)
 800dc8e:	f240 121f 	movw	r2, #287	; 0x11f
 800dc92:	494d      	ldr	r1, [pc, #308]	; (800ddc8 <tcp_input+0x4bc>)
 800dc94:	4848      	ldr	r0, [pc, #288]	; (800ddb8 <tcp_input+0x4ac>)
 800dc96:	f007 f90d 	bl	8014eb4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	7a1b      	ldrb	r3, [r3, #8]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d009      	beq.n	800dcb6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dca2:	69fb      	ldr	r3, [r7, #28]
 800dca4:	7a1a      	ldrb	r2, [r3, #8]
 800dca6:	4b41      	ldr	r3, [pc, #260]	; (800ddac <tcp_input+0x4a0>)
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dcae:	3301      	adds	r3, #1
 800dcb0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d122      	bne.n	800dcfc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	8b1a      	ldrh	r2, [r3, #24]
 800dcba:	4b3b      	ldr	r3, [pc, #236]	; (800dda8 <tcp_input+0x49c>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	881b      	ldrh	r3, [r3, #0]
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d11b      	bne.n	800dcfe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	8ada      	ldrh	r2, [r3, #22]
 800dcca:	4b37      	ldr	r3, [pc, #220]	; (800dda8 <tcp_input+0x49c>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	885b      	ldrh	r3, [r3, #2]
 800dcd0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d113      	bne.n	800dcfe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dcd6:	69fb      	ldr	r3, [r7, #28]
 800dcd8:	685a      	ldr	r2, [r3, #4]
 800dcda:	4b34      	ldr	r3, [pc, #208]	; (800ddac <tcp_input+0x4a0>)
 800dcdc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d10d      	bne.n	800dcfe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	4b31      	ldr	r3, [pc, #196]	; (800ddac <tcp_input+0x4a0>)
 800dce8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d107      	bne.n	800dcfe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800dcee:	69f8      	ldr	r0, [r7, #28]
 800dcf0:	f000 fb56 	bl	800e3a0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f7fd ffc5 	bl	800bc84 <pbuf_free>
        return;
 800dcfa:	e1fd      	b.n	800e0f8 <tcp_input+0x7ec>
        continue;
 800dcfc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	61fb      	str	r3, [r7, #28]
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d1bc      	bne.n	800dc84 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd0e:	4b2f      	ldr	r3, [pc, #188]	; (800ddcc <tcp_input+0x4c0>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	617b      	str	r3, [r7, #20]
 800dd14:	e02a      	b.n	800dd6c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	7a1b      	ldrb	r3, [r3, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00c      	beq.n	800dd38 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	7a1a      	ldrb	r2, [r3, #8]
 800dd22:	4b22      	ldr	r3, [pc, #136]	; (800ddac <tcp_input+0x4a0>)
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d002      	beq.n	800dd38 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	61bb      	str	r3, [r7, #24]
        continue;
 800dd36:	e016      	b.n	800dd66 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	8ada      	ldrh	r2, [r3, #22]
 800dd3c:	4b1a      	ldr	r3, [pc, #104]	; (800dda8 <tcp_input+0x49c>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	885b      	ldrh	r3, [r3, #2]
 800dd42:	b29b      	uxth	r3, r3
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d10c      	bne.n	800dd62 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	4b17      	ldr	r3, [pc, #92]	; (800ddac <tcp_input+0x4a0>)
 800dd4e:	695b      	ldr	r3, [r3, #20]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d00f      	beq.n	800dd74 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00d      	beq.n	800dd76 <tcp_input+0x46a>
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d009      	beq.n	800dd76 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	68db      	ldr	r3, [r3, #12]
 800dd6a:	617b      	str	r3, [r7, #20]
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d1d1      	bne.n	800dd16 <tcp_input+0x40a>
 800dd72:	e000      	b.n	800dd76 <tcp_input+0x46a>
            break;
 800dd74:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d029      	beq.n	800ddd0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dd7c:	69bb      	ldr	r3, [r7, #24]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00a      	beq.n	800dd98 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	68da      	ldr	r2, [r3, #12]
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dd8a:	4b10      	ldr	r3, [pc, #64]	; (800ddcc <tcp_input+0x4c0>)
 800dd8c:	681a      	ldr	r2, [r3, #0]
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dd92:	4a0e      	ldr	r2, [pc, #56]	; (800ddcc <tcp_input+0x4c0>)
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dd98:	6978      	ldr	r0, [r7, #20]
 800dd9a:	f000 fa03 	bl	800e1a4 <tcp_listen_input>
      }
      pbuf_free(p);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7fd ff70 	bl	800bc84 <pbuf_free>
      return;
 800dda4:	e1a8      	b.n	800e0f8 <tcp_input+0x7ec>
 800dda6:	bf00      	nop
 800dda8:	20017af0 	.word	0x20017af0
 800ddac:	200139b4 	.word	0x200139b4
 800ddb0:	08017ee4 	.word	0x08017ee4
 800ddb4:	08018010 	.word	0x08018010
 800ddb8:	08017f30 	.word	0x08017f30
 800ddbc:	20017ad4 	.word	0x20017ad4
 800ddc0:	0801803c 	.word	0x0801803c
 800ddc4:	20017ad8 	.word	0x20017ad8
 800ddc8:	08018068 	.word	0x08018068
 800ddcc:	20017ad0 	.word	0x20017ad0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	f000 8158 	beq.w	800e088 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ddd8:	4b95      	ldr	r3, [pc, #596]	; (800e030 <tcp_input+0x724>)
 800ddda:	2200      	movs	r2, #0
 800dddc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	891a      	ldrh	r2, [r3, #8]
 800dde2:	4b93      	ldr	r3, [pc, #588]	; (800e030 <tcp_input+0x724>)
 800dde4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dde6:	4a92      	ldr	r2, [pc, #584]	; (800e030 <tcp_input+0x724>)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ddec:	4b91      	ldr	r3, [pc, #580]	; (800e034 <tcp_input+0x728>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4a8f      	ldr	r2, [pc, #572]	; (800e030 <tcp_input+0x724>)
 800ddf2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ddf4:	4b90      	ldr	r3, [pc, #576]	; (800e038 <tcp_input+0x72c>)
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ddfa:	4b90      	ldr	r3, [pc, #576]	; (800e03c <tcp_input+0x730>)
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800de00:	4b8f      	ldr	r3, [pc, #572]	; (800e040 <tcp_input+0x734>)
 800de02:	2200      	movs	r2, #0
 800de04:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800de06:	4b8f      	ldr	r3, [pc, #572]	; (800e044 <tcp_input+0x738>)
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	f003 0308 	and.w	r3, r3, #8
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d006      	beq.n	800de20 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	7b5b      	ldrb	r3, [r3, #13]
 800de16:	f043 0301 	orr.w	r3, r3, #1
 800de1a:	b2da      	uxtb	r2, r3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de24:	2b00      	cmp	r3, #0
 800de26:	d017      	beq.n	800de58 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800de28:	69f8      	ldr	r0, [r7, #28]
 800de2a:	f7ff f929 	bl	800d080 <tcp_process_refused_data>
 800de2e:	4603      	mov	r3, r0
 800de30:	f113 0f0d 	cmn.w	r3, #13
 800de34:	d007      	beq.n	800de46 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800de36:	69fb      	ldr	r3, [r7, #28]
 800de38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d00c      	beq.n	800de58 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800de3e:	4b82      	ldr	r3, [pc, #520]	; (800e048 <tcp_input+0x73c>)
 800de40:	881b      	ldrh	r3, [r3, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d008      	beq.n	800de58 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800de46:	69fb      	ldr	r3, [r7, #28]
 800de48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	f040 80e3 	bne.w	800e016 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800de50:	69f8      	ldr	r0, [r7, #28]
 800de52:	f003 f9ad 	bl	80111b0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800de56:	e0de      	b.n	800e016 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800de58:	4a7c      	ldr	r2, [pc, #496]	; (800e04c <tcp_input+0x740>)
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800de5e:	69f8      	ldr	r0, [r7, #28]
 800de60:	f000 fb18 	bl	800e494 <tcp_process>
 800de64:	4603      	mov	r3, r0
 800de66:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800de68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de6c:	f113 0f0d 	cmn.w	r3, #13
 800de70:	f000 80d3 	beq.w	800e01a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800de74:	4b71      	ldr	r3, [pc, #452]	; (800e03c <tcp_input+0x730>)
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	f003 0308 	and.w	r3, r3, #8
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d015      	beq.n	800deac <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de86:	2b00      	cmp	r3, #0
 800de88:	d008      	beq.n	800de9c <tcp_input+0x590>
 800de8a:	69fb      	ldr	r3, [r7, #28]
 800de8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de90:	69fa      	ldr	r2, [r7, #28]
 800de92:	6912      	ldr	r2, [r2, #16]
 800de94:	f06f 010d 	mvn.w	r1, #13
 800de98:	4610      	mov	r0, r2
 800de9a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800de9c:	69f9      	ldr	r1, [r7, #28]
 800de9e:	486c      	ldr	r0, [pc, #432]	; (800e050 <tcp_input+0x744>)
 800dea0:	f7ff fbbc 	bl	800d61c <tcp_pcb_remove>
        tcp_free(pcb);
 800dea4:	69f8      	ldr	r0, [r7, #28]
 800dea6:	f7fe f9a9 	bl	800c1fc <tcp_free>
 800deaa:	e0da      	b.n	800e062 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800deac:	2300      	movs	r3, #0
 800deae:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800deb0:	4b63      	ldr	r3, [pc, #396]	; (800e040 <tcp_input+0x734>)
 800deb2:	881b      	ldrh	r3, [r3, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d01d      	beq.n	800def4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800deb8:	4b61      	ldr	r3, [pc, #388]	; (800e040 <tcp_input+0x734>)
 800deba:	881b      	ldrh	r3, [r3, #0]
 800debc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800debe:	69fb      	ldr	r3, [r7, #28]
 800dec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d00a      	beq.n	800dede <tcp_input+0x5d2>
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dece:	69fa      	ldr	r2, [r7, #28]
 800ded0:	6910      	ldr	r0, [r2, #16]
 800ded2:	89fa      	ldrh	r2, [r7, #14]
 800ded4:	69f9      	ldr	r1, [r7, #28]
 800ded6:	4798      	blx	r3
 800ded8:	4603      	mov	r3, r0
 800deda:	74fb      	strb	r3, [r7, #19]
 800dedc:	e001      	b.n	800dee2 <tcp_input+0x5d6>
 800dede:	2300      	movs	r3, #0
 800dee0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dee2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dee6:	f113 0f0d 	cmn.w	r3, #13
 800deea:	f000 8098 	beq.w	800e01e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800deee:	4b54      	ldr	r3, [pc, #336]	; (800e040 <tcp_input+0x734>)
 800def0:	2200      	movs	r2, #0
 800def2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800def4:	69f8      	ldr	r0, [r7, #28]
 800def6:	f000 f915 	bl	800e124 <tcp_input_delayed_close>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	f040 8090 	bne.w	800e022 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800df02:	4b4d      	ldr	r3, [pc, #308]	; (800e038 <tcp_input+0x72c>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d041      	beq.n	800df8e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d006      	beq.n	800df20 <tcp_input+0x614>
 800df12:	4b50      	ldr	r3, [pc, #320]	; (800e054 <tcp_input+0x748>)
 800df14:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800df18:	494f      	ldr	r1, [pc, #316]	; (800e058 <tcp_input+0x74c>)
 800df1a:	4850      	ldr	r0, [pc, #320]	; (800e05c <tcp_input+0x750>)
 800df1c:	f006 ffca 	bl	8014eb4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	8b5b      	ldrh	r3, [r3, #26]
 800df24:	f003 0310 	and.w	r3, r3, #16
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d008      	beq.n	800df3e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800df2c:	4b42      	ldr	r3, [pc, #264]	; (800e038 <tcp_input+0x72c>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4618      	mov	r0, r3
 800df32:	f7fd fea7 	bl	800bc84 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800df36:	69f8      	ldr	r0, [r7, #28]
 800df38:	f7fe fc48 	bl	800c7cc <tcp_abort>
            goto aborted;
 800df3c:	e091      	b.n	800e062 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df44:	2b00      	cmp	r3, #0
 800df46:	d00c      	beq.n	800df62 <tcp_input+0x656>
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	6918      	ldr	r0, [r3, #16]
 800df52:	4b39      	ldr	r3, [pc, #228]	; (800e038 <tcp_input+0x72c>)
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	2300      	movs	r3, #0
 800df58:	69f9      	ldr	r1, [r7, #28]
 800df5a:	47a0      	blx	r4
 800df5c:	4603      	mov	r3, r0
 800df5e:	74fb      	strb	r3, [r7, #19]
 800df60:	e008      	b.n	800df74 <tcp_input+0x668>
 800df62:	4b35      	ldr	r3, [pc, #212]	; (800e038 <tcp_input+0x72c>)
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	2300      	movs	r3, #0
 800df68:	69f9      	ldr	r1, [r7, #28]
 800df6a:	2000      	movs	r0, #0
 800df6c:	f7ff f95e 	bl	800d22c <tcp_recv_null>
 800df70:	4603      	mov	r3, r0
 800df72:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800df74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df78:	f113 0f0d 	cmn.w	r3, #13
 800df7c:	d053      	beq.n	800e026 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800df7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d003      	beq.n	800df8e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800df86:	4b2c      	ldr	r3, [pc, #176]	; (800e038 <tcp_input+0x72c>)
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800df8e:	4b2b      	ldr	r3, [pc, #172]	; (800e03c <tcp_input+0x730>)
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	f003 0320 	and.w	r3, r3, #32
 800df96:	2b00      	cmp	r3, #0
 800df98:	d030      	beq.n	800dffc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d009      	beq.n	800dfb6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfa6:	7b5a      	ldrb	r2, [r3, #13]
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfac:	f042 0220 	orr.w	r2, r2, #32
 800dfb0:	b2d2      	uxtb	r2, r2
 800dfb2:	735a      	strb	r2, [r3, #13]
 800dfb4:	e022      	b.n	800dffc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dfb6:	69fb      	ldr	r3, [r7, #28]
 800dfb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dfbe:	d005      	beq.n	800dfcc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	b29a      	uxth	r2, r3
 800dfc8:	69fb      	ldr	r3, [r7, #28]
 800dfca:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d00b      	beq.n	800dfee <tcp_input+0x6e2>
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	6918      	ldr	r0, [r3, #16]
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	69f9      	ldr	r1, [r7, #28]
 800dfe6:	47a0      	blx	r4
 800dfe8:	4603      	mov	r3, r0
 800dfea:	74fb      	strb	r3, [r7, #19]
 800dfec:	e001      	b.n	800dff2 <tcp_input+0x6e6>
 800dfee:	2300      	movs	r3, #0
 800dff0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dff2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dff6:	f113 0f0d 	cmn.w	r3, #13
 800dffa:	d016      	beq.n	800e02a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dffc:	4b13      	ldr	r3, [pc, #76]	; (800e04c <tcp_input+0x740>)
 800dffe:	2200      	movs	r2, #0
 800e000:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e002:	69f8      	ldr	r0, [r7, #28]
 800e004:	f000 f88e 	bl	800e124 <tcp_input_delayed_close>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d128      	bne.n	800e060 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e00e:	69f8      	ldr	r0, [r7, #28]
 800e010:	f002 fac8 	bl	80105a4 <tcp_output>
 800e014:	e025      	b.n	800e062 <tcp_input+0x756>
        goto aborted;
 800e016:	bf00      	nop
 800e018:	e023      	b.n	800e062 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e01a:	bf00      	nop
 800e01c:	e021      	b.n	800e062 <tcp_input+0x756>
              goto aborted;
 800e01e:	bf00      	nop
 800e020:	e01f      	b.n	800e062 <tcp_input+0x756>
          goto aborted;
 800e022:	bf00      	nop
 800e024:	e01d      	b.n	800e062 <tcp_input+0x756>
            goto aborted;
 800e026:	bf00      	nop
 800e028:	e01b      	b.n	800e062 <tcp_input+0x756>
              goto aborted;
 800e02a:	bf00      	nop
 800e02c:	e019      	b.n	800e062 <tcp_input+0x756>
 800e02e:	bf00      	nop
 800e030:	20017ae0 	.word	0x20017ae0
 800e034:	20017af0 	.word	0x20017af0
 800e038:	20017b10 	.word	0x20017b10
 800e03c:	20017b0d 	.word	0x20017b0d
 800e040:	20017b08 	.word	0x20017b08
 800e044:	20017b0c 	.word	0x20017b0c
 800e048:	20017b0a 	.word	0x20017b0a
 800e04c:	20017b14 	.word	0x20017b14
 800e050:	20017ad4 	.word	0x20017ad4
 800e054:	08017ee4 	.word	0x08017ee4
 800e058:	08018098 	.word	0x08018098
 800e05c:	08017f30 	.word	0x08017f30
          goto aborted;
 800e060:	bf00      	nop
    tcp_input_pcb = NULL;
 800e062:	4b27      	ldr	r3, [pc, #156]	; (800e100 <tcp_input+0x7f4>)
 800e064:	2200      	movs	r2, #0
 800e066:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e068:	4b26      	ldr	r3, [pc, #152]	; (800e104 <tcp_input+0x7f8>)
 800e06a:	2200      	movs	r2, #0
 800e06c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e06e:	4b26      	ldr	r3, [pc, #152]	; (800e108 <tcp_input+0x7fc>)
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d03f      	beq.n	800e0f6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e076:	4b24      	ldr	r3, [pc, #144]	; (800e108 <tcp_input+0x7fc>)
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fd fe02 	bl	800bc84 <pbuf_free>
      inseg.p = NULL;
 800e080:	4b21      	ldr	r3, [pc, #132]	; (800e108 <tcp_input+0x7fc>)
 800e082:	2200      	movs	r2, #0
 800e084:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e086:	e036      	b.n	800e0f6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e088:	4b20      	ldr	r3, [pc, #128]	; (800e10c <tcp_input+0x800>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	899b      	ldrh	r3, [r3, #12]
 800e08e:	b29b      	uxth	r3, r3
 800e090:	4618      	mov	r0, r3
 800e092:	f7fc fa05 	bl	800a4a0 <lwip_htons>
 800e096:	4603      	mov	r3, r0
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	f003 0304 	and.w	r3, r3, #4
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d118      	bne.n	800e0d4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0a2:	4b1b      	ldr	r3, [pc, #108]	; (800e110 <tcp_input+0x804>)
 800e0a4:	6819      	ldr	r1, [r3, #0]
 800e0a6:	4b1b      	ldr	r3, [pc, #108]	; (800e114 <tcp_input+0x808>)
 800e0a8:	881b      	ldrh	r3, [r3, #0]
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	4b1a      	ldr	r3, [pc, #104]	; (800e118 <tcp_input+0x80c>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e0b2:	4b16      	ldr	r3, [pc, #88]	; (800e10c <tcp_input+0x800>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0b6:	885b      	ldrh	r3, [r3, #2]
 800e0b8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e0ba:	4a14      	ldr	r2, [pc, #80]	; (800e10c <tcp_input+0x800>)
 800e0bc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0be:	8812      	ldrh	r2, [r2, #0]
 800e0c0:	b292      	uxth	r2, r2
 800e0c2:	9202      	str	r2, [sp, #8]
 800e0c4:	9301      	str	r3, [sp, #4]
 800e0c6:	4b15      	ldr	r3, [pc, #84]	; (800e11c <tcp_input+0x810>)
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	4b15      	ldr	r3, [pc, #84]	; (800e120 <tcp_input+0x814>)
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	2000      	movs	r0, #0
 800e0d0:	f003 f81c 	bl	801110c <tcp_rst>
    pbuf_free(p);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f7fd fdd5 	bl	800bc84 <pbuf_free>
  return;
 800e0da:	e00c      	b.n	800e0f6 <tcp_input+0x7ea>
    goto dropped;
 800e0dc:	bf00      	nop
 800e0de:	e006      	b.n	800e0ee <tcp_input+0x7e2>
    goto dropped;
 800e0e0:	bf00      	nop
 800e0e2:	e004      	b.n	800e0ee <tcp_input+0x7e2>
    goto dropped;
 800e0e4:	bf00      	nop
 800e0e6:	e002      	b.n	800e0ee <tcp_input+0x7e2>
      goto dropped;
 800e0e8:	bf00      	nop
 800e0ea:	e000      	b.n	800e0ee <tcp_input+0x7e2>
      goto dropped;
 800e0ec:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f7fd fdc8 	bl	800bc84 <pbuf_free>
 800e0f4:	e000      	b.n	800e0f8 <tcp_input+0x7ec>
  return;
 800e0f6:	bf00      	nop
}
 800e0f8:	3724      	adds	r7, #36	; 0x24
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd90      	pop	{r4, r7, pc}
 800e0fe:	bf00      	nop
 800e100:	20017b14 	.word	0x20017b14
 800e104:	20017b10 	.word	0x20017b10
 800e108:	20017ae0 	.word	0x20017ae0
 800e10c:	20017af0 	.word	0x20017af0
 800e110:	20017b04 	.word	0x20017b04
 800e114:	20017b0a 	.word	0x20017b0a
 800e118:	20017b00 	.word	0x20017b00
 800e11c:	200139c4 	.word	0x200139c4
 800e120:	200139c8 	.word	0x200139c8

0800e124 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d106      	bne.n	800e140 <tcp_input_delayed_close+0x1c>
 800e132:	4b17      	ldr	r3, [pc, #92]	; (800e190 <tcp_input_delayed_close+0x6c>)
 800e134:	f240 225a 	movw	r2, #602	; 0x25a
 800e138:	4916      	ldr	r1, [pc, #88]	; (800e194 <tcp_input_delayed_close+0x70>)
 800e13a:	4817      	ldr	r0, [pc, #92]	; (800e198 <tcp_input_delayed_close+0x74>)
 800e13c:	f006 feba 	bl	8014eb4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e140:	4b16      	ldr	r3, [pc, #88]	; (800e19c <tcp_input_delayed_close+0x78>)
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	f003 0310 	and.w	r3, r3, #16
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d01c      	beq.n	800e186 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	8b5b      	ldrh	r3, [r3, #26]
 800e150:	f003 0310 	and.w	r3, r3, #16
 800e154:	2b00      	cmp	r3, #0
 800e156:	d10d      	bne.n	800e174 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d008      	beq.n	800e174 <tcp_input_delayed_close+0x50>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	6912      	ldr	r2, [r2, #16]
 800e16c:	f06f 010e 	mvn.w	r1, #14
 800e170:	4610      	mov	r0, r2
 800e172:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e174:	6879      	ldr	r1, [r7, #4]
 800e176:	480a      	ldr	r0, [pc, #40]	; (800e1a0 <tcp_input_delayed_close+0x7c>)
 800e178:	f7ff fa50 	bl	800d61c <tcp_pcb_remove>
    tcp_free(pcb);
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7fe f83d 	bl	800c1fc <tcp_free>
    return 1;
 800e182:	2301      	movs	r3, #1
 800e184:	e000      	b.n	800e188 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e186:	2300      	movs	r3, #0
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3708      	adds	r7, #8
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	08017ee4 	.word	0x08017ee4
 800e194:	080180b4 	.word	0x080180b4
 800e198:	08017f30 	.word	0x08017f30
 800e19c:	20017b0d 	.word	0x20017b0d
 800e1a0:	20017ad4 	.word	0x20017ad4

0800e1a4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e1a4:	b590      	push	{r4, r7, lr}
 800e1a6:	b08b      	sub	sp, #44	; 0x2c
 800e1a8:	af04      	add	r7, sp, #16
 800e1aa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e1ac:	4b6f      	ldr	r3, [pc, #444]	; (800e36c <tcp_listen_input+0x1c8>)
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	f003 0304 	and.w	r3, r3, #4
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	f040 80d2 	bne.w	800e35e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d106      	bne.n	800e1ce <tcp_listen_input+0x2a>
 800e1c0:	4b6b      	ldr	r3, [pc, #428]	; (800e370 <tcp_listen_input+0x1cc>)
 800e1c2:	f240 2281 	movw	r2, #641	; 0x281
 800e1c6:	496b      	ldr	r1, [pc, #428]	; (800e374 <tcp_listen_input+0x1d0>)
 800e1c8:	486b      	ldr	r0, [pc, #428]	; (800e378 <tcp_listen_input+0x1d4>)
 800e1ca:	f006 fe73 	bl	8014eb4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e1ce:	4b67      	ldr	r3, [pc, #412]	; (800e36c <tcp_listen_input+0x1c8>)
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	f003 0310 	and.w	r3, r3, #16
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d019      	beq.n	800e20e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1da:	4b68      	ldr	r3, [pc, #416]	; (800e37c <tcp_listen_input+0x1d8>)
 800e1dc:	6819      	ldr	r1, [r3, #0]
 800e1de:	4b68      	ldr	r3, [pc, #416]	; (800e380 <tcp_listen_input+0x1dc>)
 800e1e0:	881b      	ldrh	r3, [r3, #0]
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	4b67      	ldr	r3, [pc, #412]	; (800e384 <tcp_listen_input+0x1e0>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1ea:	4b67      	ldr	r3, [pc, #412]	; (800e388 <tcp_listen_input+0x1e4>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1ee:	885b      	ldrh	r3, [r3, #2]
 800e1f0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1f2:	4a65      	ldr	r2, [pc, #404]	; (800e388 <tcp_listen_input+0x1e4>)
 800e1f4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1f6:	8812      	ldrh	r2, [r2, #0]
 800e1f8:	b292      	uxth	r2, r2
 800e1fa:	9202      	str	r2, [sp, #8]
 800e1fc:	9301      	str	r3, [sp, #4]
 800e1fe:	4b63      	ldr	r3, [pc, #396]	; (800e38c <tcp_listen_input+0x1e8>)
 800e200:	9300      	str	r3, [sp, #0]
 800e202:	4b63      	ldr	r3, [pc, #396]	; (800e390 <tcp_listen_input+0x1ec>)
 800e204:	4602      	mov	r2, r0
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f002 ff80 	bl	801110c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e20c:	e0a9      	b.n	800e362 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e20e:	4b57      	ldr	r3, [pc, #348]	; (800e36c <tcp_listen_input+0x1c8>)
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	f003 0302 	and.w	r3, r3, #2
 800e216:	2b00      	cmp	r3, #0
 800e218:	f000 80a3 	beq.w	800e362 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	7d5b      	ldrb	r3, [r3, #21]
 800e220:	4618      	mov	r0, r3
 800e222:	f7ff f927 	bl	800d474 <tcp_alloc>
 800e226:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d111      	bne.n	800e252 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	699b      	ldr	r3, [r3, #24]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d00a      	beq.n	800e24c <tcp_listen_input+0xa8>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	699b      	ldr	r3, [r3, #24]
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	6910      	ldr	r0, [r2, #16]
 800e23e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e242:	2100      	movs	r1, #0
 800e244:	4798      	blx	r3
 800e246:	4603      	mov	r3, r0
 800e248:	73bb      	strb	r3, [r7, #14]
      return;
 800e24a:	e08b      	b.n	800e364 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e24c:	23f0      	movs	r3, #240	; 0xf0
 800e24e:	73bb      	strb	r3, [r7, #14]
      return;
 800e250:	e088      	b.n	800e364 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e252:	4b50      	ldr	r3, [pc, #320]	; (800e394 <tcp_listen_input+0x1f0>)
 800e254:	695a      	ldr	r2, [r3, #20]
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e25a:	4b4e      	ldr	r3, [pc, #312]	; (800e394 <tcp_listen_input+0x1f0>)
 800e25c:	691a      	ldr	r2, [r3, #16]
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	8ada      	ldrh	r2, [r3, #22]
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e26a:	4b47      	ldr	r3, [pc, #284]	; (800e388 <tcp_listen_input+0x1e4>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	881b      	ldrh	r3, [r3, #0]
 800e270:	b29a      	uxth	r2, r3
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	2203      	movs	r2, #3
 800e27a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e27c:	4b41      	ldr	r3, [pc, #260]	; (800e384 <tcp_listen_input+0x1e0>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	1c5a      	adds	r2, r3, #1
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e28e:	6978      	ldr	r0, [r7, #20]
 800e290:	f7ff fa58 	bl	800d744 <tcp_next_iss>
 800e294:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	693a      	ldr	r2, [r7, #16]
 800e29a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	693a      	ldr	r2, [r7, #16]
 800e2a0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	693a      	ldr	r2, [r7, #16]
 800e2a6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	693a      	ldr	r2, [r7, #16]
 800e2ac:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e2ae:	4b35      	ldr	r3, [pc, #212]	; (800e384 <tcp_listen_input+0x1e0>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	1e5a      	subs	r2, r3, #1
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	691a      	ldr	r2, [r3, #16]
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	7a5b      	ldrb	r3, [r3, #9]
 800e2ca:	f003 030c 	and.w	r3, r3, #12
 800e2ce:	b2da      	uxtb	r2, r3
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	7a1a      	ldrb	r2, [r3, #8]
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e2dc:	4b2e      	ldr	r3, [pc, #184]	; (800e398 <tcp_listen_input+0x1f4>)
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	60da      	str	r2, [r3, #12]
 800e2e4:	4a2c      	ldr	r2, [pc, #176]	; (800e398 <tcp_listen_input+0x1f4>)
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	6013      	str	r3, [r2, #0]
 800e2ea:	f003 f8d1 	bl	8011490 <tcp_timer_needed>
 800e2ee:	4b2b      	ldr	r3, [pc, #172]	; (800e39c <tcp_listen_input+0x1f8>)
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e2f4:	6978      	ldr	r0, [r7, #20]
 800e2f6:	f001 fd8f 	bl	800fe18 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e2fa:	4b23      	ldr	r3, [pc, #140]	; (800e388 <tcp_listen_input+0x1e4>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	89db      	ldrh	r3, [r3, #14]
 800e300:	b29a      	uxth	r2, r3
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	3304      	adds	r3, #4
 800e31c:	4618      	mov	r0, r3
 800e31e:	f004 ffb5 	bl	801328c <ip4_route>
 800e322:	4601      	mov	r1, r0
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	3304      	adds	r3, #4
 800e328:	461a      	mov	r2, r3
 800e32a:	4620      	mov	r0, r4
 800e32c:	f7ff fa30 	bl	800d790 <tcp_eff_send_mss_netif>
 800e330:	4603      	mov	r3, r0
 800e332:	461a      	mov	r2, r3
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e338:	2112      	movs	r1, #18
 800e33a:	6978      	ldr	r0, [r7, #20]
 800e33c:	f002 f844 	bl	80103c8 <tcp_enqueue_flags>
 800e340:	4603      	mov	r3, r0
 800e342:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d004      	beq.n	800e356 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e34c:	2100      	movs	r1, #0
 800e34e:	6978      	ldr	r0, [r7, #20]
 800e350:	f7fe f97e 	bl	800c650 <tcp_abandon>
      return;
 800e354:	e006      	b.n	800e364 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e356:	6978      	ldr	r0, [r7, #20]
 800e358:	f002 f924 	bl	80105a4 <tcp_output>
  return;
 800e35c:	e001      	b.n	800e362 <tcp_listen_input+0x1be>
    return;
 800e35e:	bf00      	nop
 800e360:	e000      	b.n	800e364 <tcp_listen_input+0x1c0>
  return;
 800e362:	bf00      	nop
}
 800e364:	371c      	adds	r7, #28
 800e366:	46bd      	mov	sp, r7
 800e368:	bd90      	pop	{r4, r7, pc}
 800e36a:	bf00      	nop
 800e36c:	20017b0c 	.word	0x20017b0c
 800e370:	08017ee4 	.word	0x08017ee4
 800e374:	080180dc 	.word	0x080180dc
 800e378:	08017f30 	.word	0x08017f30
 800e37c:	20017b04 	.word	0x20017b04
 800e380:	20017b0a 	.word	0x20017b0a
 800e384:	20017b00 	.word	0x20017b00
 800e388:	20017af0 	.word	0x20017af0
 800e38c:	200139c4 	.word	0x200139c4
 800e390:	200139c8 	.word	0x200139c8
 800e394:	200139b4 	.word	0x200139b4
 800e398:	20017ad4 	.word	0x20017ad4
 800e39c:	20017adc 	.word	0x20017adc

0800e3a0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b086      	sub	sp, #24
 800e3a4:	af04      	add	r7, sp, #16
 800e3a6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e3a8:	4b2f      	ldr	r3, [pc, #188]	; (800e468 <tcp_timewait_input+0xc8>)
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	f003 0304 	and.w	r3, r3, #4
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d153      	bne.n	800e45c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d106      	bne.n	800e3c8 <tcp_timewait_input+0x28>
 800e3ba:	4b2c      	ldr	r3, [pc, #176]	; (800e46c <tcp_timewait_input+0xcc>)
 800e3bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e3c0:	492b      	ldr	r1, [pc, #172]	; (800e470 <tcp_timewait_input+0xd0>)
 800e3c2:	482c      	ldr	r0, [pc, #176]	; (800e474 <tcp_timewait_input+0xd4>)
 800e3c4:	f006 fd76 	bl	8014eb4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e3c8:	4b27      	ldr	r3, [pc, #156]	; (800e468 <tcp_timewait_input+0xc8>)
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	f003 0302 	and.w	r3, r3, #2
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d02a      	beq.n	800e42a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e3d4:	4b28      	ldr	r3, [pc, #160]	; (800e478 <tcp_timewait_input+0xd8>)
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3dc:	1ad3      	subs	r3, r2, r3
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	db2d      	blt.n	800e43e <tcp_timewait_input+0x9e>
 800e3e2:	4b25      	ldr	r3, [pc, #148]	; (800e478 <tcp_timewait_input+0xd8>)
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ea:	6879      	ldr	r1, [r7, #4]
 800e3ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e3ee:	440b      	add	r3, r1
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	dc23      	bgt.n	800e43e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3f6:	4b21      	ldr	r3, [pc, #132]	; (800e47c <tcp_timewait_input+0xdc>)
 800e3f8:	6819      	ldr	r1, [r3, #0]
 800e3fa:	4b21      	ldr	r3, [pc, #132]	; (800e480 <tcp_timewait_input+0xe0>)
 800e3fc:	881b      	ldrh	r3, [r3, #0]
 800e3fe:	461a      	mov	r2, r3
 800e400:	4b1d      	ldr	r3, [pc, #116]	; (800e478 <tcp_timewait_input+0xd8>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e406:	4b1f      	ldr	r3, [pc, #124]	; (800e484 <tcp_timewait_input+0xe4>)
 800e408:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e40a:	885b      	ldrh	r3, [r3, #2]
 800e40c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e40e:	4a1d      	ldr	r2, [pc, #116]	; (800e484 <tcp_timewait_input+0xe4>)
 800e410:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e412:	8812      	ldrh	r2, [r2, #0]
 800e414:	b292      	uxth	r2, r2
 800e416:	9202      	str	r2, [sp, #8]
 800e418:	9301      	str	r3, [sp, #4]
 800e41a:	4b1b      	ldr	r3, [pc, #108]	; (800e488 <tcp_timewait_input+0xe8>)
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	4b1b      	ldr	r3, [pc, #108]	; (800e48c <tcp_timewait_input+0xec>)
 800e420:	4602      	mov	r2, r0
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f002 fe72 	bl	801110c <tcp_rst>
      return;
 800e428:	e01b      	b.n	800e462 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e42a:	4b0f      	ldr	r3, [pc, #60]	; (800e468 <tcp_timewait_input+0xc8>)
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	f003 0301 	and.w	r3, r3, #1
 800e432:	2b00      	cmp	r3, #0
 800e434:	d003      	beq.n	800e43e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e436:	4b16      	ldr	r3, [pc, #88]	; (800e490 <tcp_timewait_input+0xf0>)
 800e438:	681a      	ldr	r2, [r3, #0]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e43e:	4b10      	ldr	r3, [pc, #64]	; (800e480 <tcp_timewait_input+0xe0>)
 800e440:	881b      	ldrh	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d00c      	beq.n	800e460 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	8b5b      	ldrh	r3, [r3, #26]
 800e44a:	f043 0302 	orr.w	r3, r3, #2
 800e44e:	b29a      	uxth	r2, r3
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f002 f8a5 	bl	80105a4 <tcp_output>
  }
  return;
 800e45a:	e001      	b.n	800e460 <tcp_timewait_input+0xc0>
    return;
 800e45c:	bf00      	nop
 800e45e:	e000      	b.n	800e462 <tcp_timewait_input+0xc2>
  return;
 800e460:	bf00      	nop
}
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	20017b0c 	.word	0x20017b0c
 800e46c:	08017ee4 	.word	0x08017ee4
 800e470:	080180fc 	.word	0x080180fc
 800e474:	08017f30 	.word	0x08017f30
 800e478:	20017b00 	.word	0x20017b00
 800e47c:	20017b04 	.word	0x20017b04
 800e480:	20017b0a 	.word	0x20017b0a
 800e484:	20017af0 	.word	0x20017af0
 800e488:	200139c4 	.word	0x200139c4
 800e48c:	200139c8 	.word	0x200139c8
 800e490:	20017ac8 	.word	0x20017ac8

0800e494 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e494:	b590      	push	{r4, r7, lr}
 800e496:	b08d      	sub	sp, #52	; 0x34
 800e498:	af04      	add	r7, sp, #16
 800e49a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e49c:	2300      	movs	r3, #0
 800e49e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d106      	bne.n	800e4b8 <tcp_process+0x24>
 800e4aa:	4b9d      	ldr	r3, [pc, #628]	; (800e720 <tcp_process+0x28c>)
 800e4ac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e4b0:	499c      	ldr	r1, [pc, #624]	; (800e724 <tcp_process+0x290>)
 800e4b2:	489d      	ldr	r0, [pc, #628]	; (800e728 <tcp_process+0x294>)
 800e4b4:	f006 fcfe 	bl	8014eb4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e4b8:	4b9c      	ldr	r3, [pc, #624]	; (800e72c <tcp_process+0x298>)
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	f003 0304 	and.w	r3, r3, #4
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d04e      	beq.n	800e562 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	7d1b      	ldrb	r3, [r3, #20]
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d108      	bne.n	800e4de <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e4d0:	4b97      	ldr	r3, [pc, #604]	; (800e730 <tcp_process+0x29c>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d123      	bne.n	800e520 <tcp_process+0x8c>
        acceptable = 1;
 800e4d8:	2301      	movs	r3, #1
 800e4da:	76fb      	strb	r3, [r7, #27]
 800e4dc:	e020      	b.n	800e520 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4e2:	4b94      	ldr	r3, [pc, #592]	; (800e734 <tcp_process+0x2a0>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d102      	bne.n	800e4f0 <tcp_process+0x5c>
        acceptable = 1;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	76fb      	strb	r3, [r7, #27]
 800e4ee:	e017      	b.n	800e520 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e4f0:	4b90      	ldr	r3, [pc, #576]	; (800e734 <tcp_process+0x2a0>)
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f8:	1ad3      	subs	r3, r2, r3
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	db10      	blt.n	800e520 <tcp_process+0x8c>
 800e4fe:	4b8d      	ldr	r3, [pc, #564]	; (800e734 <tcp_process+0x2a0>)
 800e500:	681a      	ldr	r2, [r3, #0]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e506:	6879      	ldr	r1, [r7, #4]
 800e508:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e50a:	440b      	add	r3, r1
 800e50c:	1ad3      	subs	r3, r2, r3
 800e50e:	2b00      	cmp	r3, #0
 800e510:	dc06      	bgt.n	800e520 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	8b5b      	ldrh	r3, [r3, #26]
 800e516:	f043 0302 	orr.w	r3, r3, #2
 800e51a:	b29a      	uxth	r2, r3
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e520:	7efb      	ldrb	r3, [r7, #27]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d01b      	beq.n	800e55e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	7d1b      	ldrb	r3, [r3, #20]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d106      	bne.n	800e53c <tcp_process+0xa8>
 800e52e:	4b7c      	ldr	r3, [pc, #496]	; (800e720 <tcp_process+0x28c>)
 800e530:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e534:	4980      	ldr	r1, [pc, #512]	; (800e738 <tcp_process+0x2a4>)
 800e536:	487c      	ldr	r0, [pc, #496]	; (800e728 <tcp_process+0x294>)
 800e538:	f006 fcbc 	bl	8014eb4 <iprintf>
      recv_flags |= TF_RESET;
 800e53c:	4b7f      	ldr	r3, [pc, #508]	; (800e73c <tcp_process+0x2a8>)
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	f043 0308 	orr.w	r3, r3, #8
 800e544:	b2da      	uxtb	r2, r3
 800e546:	4b7d      	ldr	r3, [pc, #500]	; (800e73c <tcp_process+0x2a8>)
 800e548:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	8b5b      	ldrh	r3, [r3, #26]
 800e54e:	f023 0301 	bic.w	r3, r3, #1
 800e552:	b29a      	uxth	r2, r3
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e558:	f06f 030d 	mvn.w	r3, #13
 800e55c:	e37a      	b.n	800ec54 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e55e:	2300      	movs	r3, #0
 800e560:	e378      	b.n	800ec54 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e562:	4b72      	ldr	r3, [pc, #456]	; (800e72c <tcp_process+0x298>)
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	f003 0302 	and.w	r3, r3, #2
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d010      	beq.n	800e590 <tcp_process+0xfc>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	7d1b      	ldrb	r3, [r3, #20]
 800e572:	2b02      	cmp	r3, #2
 800e574:	d00c      	beq.n	800e590 <tcp_process+0xfc>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	7d1b      	ldrb	r3, [r3, #20]
 800e57a:	2b03      	cmp	r3, #3
 800e57c:	d008      	beq.n	800e590 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	8b5b      	ldrh	r3, [r3, #26]
 800e582:	f043 0302 	orr.w	r3, r3, #2
 800e586:	b29a      	uxth	r2, r3
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e58c:	2300      	movs	r3, #0
 800e58e:	e361      	b.n	800ec54 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	8b5b      	ldrh	r3, [r3, #26]
 800e594:	f003 0310 	and.w	r3, r3, #16
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d103      	bne.n	800e5a4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e59c:	4b68      	ldr	r3, [pc, #416]	; (800e740 <tcp_process+0x2ac>)
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f001 fc2f 	bl	800fe18 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	7d1b      	ldrb	r3, [r3, #20]
 800e5be:	3b02      	subs	r3, #2
 800e5c0:	2b07      	cmp	r3, #7
 800e5c2:	f200 8337 	bhi.w	800ec34 <tcp_process+0x7a0>
 800e5c6:	a201      	add	r2, pc, #4	; (adr r2, 800e5cc <tcp_process+0x138>)
 800e5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5cc:	0800e5ed 	.word	0x0800e5ed
 800e5d0:	0800e81d 	.word	0x0800e81d
 800e5d4:	0800e995 	.word	0x0800e995
 800e5d8:	0800e9bf 	.word	0x0800e9bf
 800e5dc:	0800eae3 	.word	0x0800eae3
 800e5e0:	0800e995 	.word	0x0800e995
 800e5e4:	0800eb6f 	.word	0x0800eb6f
 800e5e8:	0800ebff 	.word	0x0800ebff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e5ec:	4b4f      	ldr	r3, [pc, #316]	; (800e72c <tcp_process+0x298>)
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	f003 0310 	and.w	r3, r3, #16
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	f000 80e4 	beq.w	800e7c2 <tcp_process+0x32e>
 800e5fa:	4b4c      	ldr	r3, [pc, #304]	; (800e72c <tcp_process+0x298>)
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	f003 0302 	and.w	r3, r3, #2
 800e602:	2b00      	cmp	r3, #0
 800e604:	f000 80dd 	beq.w	800e7c2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e60c:	1c5a      	adds	r2, r3, #1
 800e60e:	4b48      	ldr	r3, [pc, #288]	; (800e730 <tcp_process+0x29c>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	429a      	cmp	r2, r3
 800e614:	f040 80d5 	bne.w	800e7c2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e618:	4b46      	ldr	r3, [pc, #280]	; (800e734 <tcp_process+0x2a0>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	1c5a      	adds	r2, r3, #1
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e62a:	4b41      	ldr	r3, [pc, #260]	; (800e730 <tcp_process+0x29c>)
 800e62c:	681a      	ldr	r2, [r3, #0]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e632:	4b44      	ldr	r3, [pc, #272]	; (800e744 <tcp_process+0x2b0>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	89db      	ldrh	r3, [r3, #14]
 800e638:	b29a      	uxth	r2, r3
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e64c:	4b39      	ldr	r3, [pc, #228]	; (800e734 <tcp_process+0x2a0>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	1e5a      	subs	r2, r3, #1
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2204      	movs	r2, #4
 800e65a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	3304      	adds	r3, #4
 800e664:	4618      	mov	r0, r3
 800e666:	f004 fe11 	bl	801328c <ip4_route>
 800e66a:	4601      	mov	r1, r0
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	3304      	adds	r3, #4
 800e670:	461a      	mov	r2, r3
 800e672:	4620      	mov	r0, r4
 800e674:	f7ff f88c 	bl	800d790 <tcp_eff_send_mss_netif>
 800e678:	4603      	mov	r3, r0
 800e67a:	461a      	mov	r2, r3
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e684:	009a      	lsls	r2, r3, #2
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e68a:	005b      	lsls	r3, r3, #1
 800e68c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e690:	428b      	cmp	r3, r1
 800e692:	bf38      	it	cc
 800e694:	460b      	movcc	r3, r1
 800e696:	429a      	cmp	r2, r3
 800e698:	d204      	bcs.n	800e6a4 <tcp_process+0x210>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	e00d      	b.n	800e6c0 <tcp_process+0x22c>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6a8:	005b      	lsls	r3, r3, #1
 800e6aa:	f241 121c 	movw	r2, #4380	; 0x111c
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d904      	bls.n	800e6bc <tcp_process+0x228>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6b6:	005b      	lsls	r3, r3, #1
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	e001      	b.n	800e6c0 <tcp_process+0x22c>
 800e6bc:	f241 131c 	movw	r3, #4380	; 0x111c
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d106      	bne.n	800e6de <tcp_process+0x24a>
 800e6d0:	4b13      	ldr	r3, [pc, #76]	; (800e720 <tcp_process+0x28c>)
 800e6d2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e6d6:	491c      	ldr	r1, [pc, #112]	; (800e748 <tcp_process+0x2b4>)
 800e6d8:	4813      	ldr	r0, [pc, #76]	; (800e728 <tcp_process+0x294>)
 800e6da:	f006 fbeb 	bl	8014eb4 <iprintf>
        --pcb->snd_queuelen;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	b29a      	uxth	r2, r3
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6f2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e6f4:	69fb      	ldr	r3, [r7, #28]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d12a      	bne.n	800e750 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6fe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d106      	bne.n	800e714 <tcp_process+0x280>
 800e706:	4b06      	ldr	r3, [pc, #24]	; (800e720 <tcp_process+0x28c>)
 800e708:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e70c:	490f      	ldr	r1, [pc, #60]	; (800e74c <tcp_process+0x2b8>)
 800e70e:	4806      	ldr	r0, [pc, #24]	; (800e728 <tcp_process+0x294>)
 800e710:	f006 fbd0 	bl	8014eb4 <iprintf>
          pcb->unsent = rseg->next;
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	66da      	str	r2, [r3, #108]	; 0x6c
 800e71c:	e01c      	b.n	800e758 <tcp_process+0x2c4>
 800e71e:	bf00      	nop
 800e720:	08017ee4 	.word	0x08017ee4
 800e724:	0801811c 	.word	0x0801811c
 800e728:	08017f30 	.word	0x08017f30
 800e72c:	20017b0c 	.word	0x20017b0c
 800e730:	20017b04 	.word	0x20017b04
 800e734:	20017b00 	.word	0x20017b00
 800e738:	08018138 	.word	0x08018138
 800e73c:	20017b0d 	.word	0x20017b0d
 800e740:	20017ac8 	.word	0x20017ac8
 800e744:	20017af0 	.word	0x20017af0
 800e748:	08018158 	.word	0x08018158
 800e74c:	08018170 	.word	0x08018170
        } else {
          pcb->unacked = rseg->next;
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	681a      	ldr	r2, [r3, #0]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e758:	69f8      	ldr	r0, [r7, #28]
 800e75a:	f7fe fd22 	bl	800d1a2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e762:	2b00      	cmp	r3, #0
 800e764:	d104      	bne.n	800e770 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e76c:	861a      	strh	r2, [r3, #48]	; 0x30
 800e76e:	e006      	b.n	800e77e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2200      	movs	r2, #0
 800e774:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2200      	movs	r2, #0
 800e77a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e784:	2b00      	cmp	r3, #0
 800e786:	d00a      	beq.n	800e79e <tcp_process+0x30a>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	6910      	ldr	r0, [r2, #16]
 800e792:	2200      	movs	r2, #0
 800e794:	6879      	ldr	r1, [r7, #4]
 800e796:	4798      	blx	r3
 800e798:	4603      	mov	r3, r0
 800e79a:	76bb      	strb	r3, [r7, #26]
 800e79c:	e001      	b.n	800e7a2 <tcp_process+0x30e>
 800e79e:	2300      	movs	r3, #0
 800e7a0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e7a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e7a6:	f113 0f0d 	cmn.w	r3, #13
 800e7aa:	d102      	bne.n	800e7b2 <tcp_process+0x31e>
          return ERR_ABRT;
 800e7ac:	f06f 030c 	mvn.w	r3, #12
 800e7b0:	e250      	b.n	800ec54 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	8b5b      	ldrh	r3, [r3, #26]
 800e7b6:	f043 0302 	orr.w	r3, r3, #2
 800e7ba:	b29a      	uxth	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e7c0:	e23a      	b.n	800ec38 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e7c2:	4b98      	ldr	r3, [pc, #608]	; (800ea24 <tcp_process+0x590>)
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	f003 0310 	and.w	r3, r3, #16
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	f000 8234 	beq.w	800ec38 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7d0:	4b95      	ldr	r3, [pc, #596]	; (800ea28 <tcp_process+0x594>)
 800e7d2:	6819      	ldr	r1, [r3, #0]
 800e7d4:	4b95      	ldr	r3, [pc, #596]	; (800ea2c <tcp_process+0x598>)
 800e7d6:	881b      	ldrh	r3, [r3, #0]
 800e7d8:	461a      	mov	r2, r3
 800e7da:	4b95      	ldr	r3, [pc, #596]	; (800ea30 <tcp_process+0x59c>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7e0:	4b94      	ldr	r3, [pc, #592]	; (800ea34 <tcp_process+0x5a0>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7e4:	885b      	ldrh	r3, [r3, #2]
 800e7e6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7e8:	4a92      	ldr	r2, [pc, #584]	; (800ea34 <tcp_process+0x5a0>)
 800e7ea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7ec:	8812      	ldrh	r2, [r2, #0]
 800e7ee:	b292      	uxth	r2, r2
 800e7f0:	9202      	str	r2, [sp, #8]
 800e7f2:	9301      	str	r3, [sp, #4]
 800e7f4:	4b90      	ldr	r3, [pc, #576]	; (800ea38 <tcp_process+0x5a4>)
 800e7f6:	9300      	str	r3, [sp, #0]
 800e7f8:	4b90      	ldr	r3, [pc, #576]	; (800ea3c <tcp_process+0x5a8>)
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f002 fc85 	bl	801110c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e808:	2b05      	cmp	r3, #5
 800e80a:	f200 8215 	bhi.w	800ec38 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2200      	movs	r2, #0
 800e812:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f002 fa4f 	bl	8010cb8 <tcp_rexmit_rto>
      break;
 800e81a:	e20d      	b.n	800ec38 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e81c:	4b81      	ldr	r3, [pc, #516]	; (800ea24 <tcp_process+0x590>)
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	f003 0310 	and.w	r3, r3, #16
 800e824:	2b00      	cmp	r3, #0
 800e826:	f000 80a1 	beq.w	800e96c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e82a:	4b7f      	ldr	r3, [pc, #508]	; (800ea28 <tcp_process+0x594>)
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e832:	1ad3      	subs	r3, r2, r3
 800e834:	3b01      	subs	r3, #1
 800e836:	2b00      	cmp	r3, #0
 800e838:	db7e      	blt.n	800e938 <tcp_process+0x4a4>
 800e83a:	4b7b      	ldr	r3, [pc, #492]	; (800ea28 <tcp_process+0x594>)
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e842:	1ad3      	subs	r3, r2, r3
 800e844:	2b00      	cmp	r3, #0
 800e846:	dc77      	bgt.n	800e938 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2204      	movs	r2, #4
 800e84c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e852:	2b00      	cmp	r3, #0
 800e854:	d102      	bne.n	800e85c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e856:	23fa      	movs	r3, #250	; 0xfa
 800e858:	76bb      	strb	r3, [r7, #26]
 800e85a:	e01d      	b.n	800e898 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e860:	699b      	ldr	r3, [r3, #24]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d106      	bne.n	800e874 <tcp_process+0x3e0>
 800e866:	4b76      	ldr	r3, [pc, #472]	; (800ea40 <tcp_process+0x5ac>)
 800e868:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e86c:	4975      	ldr	r1, [pc, #468]	; (800ea44 <tcp_process+0x5b0>)
 800e86e:	4876      	ldr	r0, [pc, #472]	; (800ea48 <tcp_process+0x5b4>)
 800e870:	f006 fb20 	bl	8014eb4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e878:	699b      	ldr	r3, [r3, #24]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d00a      	beq.n	800e894 <tcp_process+0x400>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e882:	699b      	ldr	r3, [r3, #24]
 800e884:	687a      	ldr	r2, [r7, #4]
 800e886:	6910      	ldr	r0, [r2, #16]
 800e888:	2200      	movs	r2, #0
 800e88a:	6879      	ldr	r1, [r7, #4]
 800e88c:	4798      	blx	r3
 800e88e:	4603      	mov	r3, r0
 800e890:	76bb      	strb	r3, [r7, #26]
 800e892:	e001      	b.n	800e898 <tcp_process+0x404>
 800e894:	23f0      	movs	r3, #240	; 0xf0
 800e896:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e898:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00a      	beq.n	800e8b6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e8a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e8a4:	f113 0f0d 	cmn.w	r3, #13
 800e8a8:	d002      	beq.n	800e8b0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7fd ff8e 	bl	800c7cc <tcp_abort>
            }
            return ERR_ABRT;
 800e8b0:	f06f 030c 	mvn.w	r3, #12
 800e8b4:	e1ce      	b.n	800ec54 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f000 fae0 	bl	800ee7c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e8bc:	4b63      	ldr	r3, [pc, #396]	; (800ea4c <tcp_process+0x5b8>)
 800e8be:	881b      	ldrh	r3, [r3, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d005      	beq.n	800e8d0 <tcp_process+0x43c>
            recv_acked--;
 800e8c4:	4b61      	ldr	r3, [pc, #388]	; (800ea4c <tcp_process+0x5b8>)
 800e8c6:	881b      	ldrh	r3, [r3, #0]
 800e8c8:	3b01      	subs	r3, #1
 800e8ca:	b29a      	uxth	r2, r3
 800e8cc:	4b5f      	ldr	r3, [pc, #380]	; (800ea4c <tcp_process+0x5b8>)
 800e8ce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8d4:	009a      	lsls	r2, r3, #2
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8da:	005b      	lsls	r3, r3, #1
 800e8dc:	f241 111c 	movw	r1, #4380	; 0x111c
 800e8e0:	428b      	cmp	r3, r1
 800e8e2:	bf38      	it	cc
 800e8e4:	460b      	movcc	r3, r1
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d204      	bcs.n	800e8f4 <tcp_process+0x460>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8ee:	009b      	lsls	r3, r3, #2
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	e00d      	b.n	800e910 <tcp_process+0x47c>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8f8:	005b      	lsls	r3, r3, #1
 800e8fa:	f241 121c 	movw	r2, #4380	; 0x111c
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d904      	bls.n	800e90c <tcp_process+0x478>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e906:	005b      	lsls	r3, r3, #1
 800e908:	b29b      	uxth	r3, r3
 800e90a:	e001      	b.n	800e910 <tcp_process+0x47c>
 800e90c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e916:	4b4e      	ldr	r3, [pc, #312]	; (800ea50 <tcp_process+0x5bc>)
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	f003 0320 	and.w	r3, r3, #32
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d037      	beq.n	800e992 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	8b5b      	ldrh	r3, [r3, #26]
 800e926:	f043 0302 	orr.w	r3, r3, #2
 800e92a:	b29a      	uxth	r2, r3
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2207      	movs	r2, #7
 800e934:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e936:	e02c      	b.n	800e992 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e938:	4b3b      	ldr	r3, [pc, #236]	; (800ea28 <tcp_process+0x594>)
 800e93a:	6819      	ldr	r1, [r3, #0]
 800e93c:	4b3b      	ldr	r3, [pc, #236]	; (800ea2c <tcp_process+0x598>)
 800e93e:	881b      	ldrh	r3, [r3, #0]
 800e940:	461a      	mov	r2, r3
 800e942:	4b3b      	ldr	r3, [pc, #236]	; (800ea30 <tcp_process+0x59c>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e948:	4b3a      	ldr	r3, [pc, #232]	; (800ea34 <tcp_process+0x5a0>)
 800e94a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e94c:	885b      	ldrh	r3, [r3, #2]
 800e94e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e950:	4a38      	ldr	r2, [pc, #224]	; (800ea34 <tcp_process+0x5a0>)
 800e952:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e954:	8812      	ldrh	r2, [r2, #0]
 800e956:	b292      	uxth	r2, r2
 800e958:	9202      	str	r2, [sp, #8]
 800e95a:	9301      	str	r3, [sp, #4]
 800e95c:	4b36      	ldr	r3, [pc, #216]	; (800ea38 <tcp_process+0x5a4>)
 800e95e:	9300      	str	r3, [sp, #0]
 800e960:	4b36      	ldr	r3, [pc, #216]	; (800ea3c <tcp_process+0x5a8>)
 800e962:	4602      	mov	r2, r0
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f002 fbd1 	bl	801110c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e96a:	e167      	b.n	800ec3c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e96c:	4b2d      	ldr	r3, [pc, #180]	; (800ea24 <tcp_process+0x590>)
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	f003 0302 	and.w	r3, r3, #2
 800e974:	2b00      	cmp	r3, #0
 800e976:	f000 8161 	beq.w	800ec3c <tcp_process+0x7a8>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e97e:	1e5a      	subs	r2, r3, #1
 800e980:	4b2b      	ldr	r3, [pc, #172]	; (800ea30 <tcp_process+0x59c>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	429a      	cmp	r2, r3
 800e986:	f040 8159 	bne.w	800ec3c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f002 f9b6 	bl	8010cfc <tcp_rexmit>
      break;
 800e990:	e154      	b.n	800ec3c <tcp_process+0x7a8>
 800e992:	e153      	b.n	800ec3c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f000 fa71 	bl	800ee7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e99a:	4b2d      	ldr	r3, [pc, #180]	; (800ea50 <tcp_process+0x5bc>)
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	f003 0320 	and.w	r3, r3, #32
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	f000 814c 	beq.w	800ec40 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	8b5b      	ldrh	r3, [r3, #26]
 800e9ac:	f043 0302 	orr.w	r3, r3, #2
 800e9b0:	b29a      	uxth	r2, r3
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2207      	movs	r2, #7
 800e9ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e9bc:	e140      	b.n	800ec40 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 fa5c 	bl	800ee7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e9c4:	4b22      	ldr	r3, [pc, #136]	; (800ea50 <tcp_process+0x5bc>)
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	f003 0320 	and.w	r3, r3, #32
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d071      	beq.n	800eab4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e9d0:	4b14      	ldr	r3, [pc, #80]	; (800ea24 <tcp_process+0x590>)
 800e9d2:	781b      	ldrb	r3, [r3, #0]
 800e9d4:	f003 0310 	and.w	r3, r3, #16
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d060      	beq.n	800ea9e <tcp_process+0x60a>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9e0:	4b11      	ldr	r3, [pc, #68]	; (800ea28 <tcp_process+0x594>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d15a      	bne.n	800ea9e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d156      	bne.n	800ea9e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	8b5b      	ldrh	r3, [r3, #26]
 800e9f4:	f043 0302 	orr.w	r3, r3, #2
 800e9f8:	b29a      	uxth	r2, r3
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f7fe fdbc 	bl	800d57c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ea04:	4b13      	ldr	r3, [pc, #76]	; (800ea54 <tcp_process+0x5c0>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d105      	bne.n	800ea1a <tcp_process+0x586>
 800ea0e:	4b11      	ldr	r3, [pc, #68]	; (800ea54 <tcp_process+0x5c0>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	68db      	ldr	r3, [r3, #12]
 800ea14:	4a0f      	ldr	r2, [pc, #60]	; (800ea54 <tcp_process+0x5c0>)
 800ea16:	6013      	str	r3, [r2, #0]
 800ea18:	e02e      	b.n	800ea78 <tcp_process+0x5e4>
 800ea1a:	4b0e      	ldr	r3, [pc, #56]	; (800ea54 <tcp_process+0x5c0>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	617b      	str	r3, [r7, #20]
 800ea20:	e027      	b.n	800ea72 <tcp_process+0x5de>
 800ea22:	bf00      	nop
 800ea24:	20017b0c 	.word	0x20017b0c
 800ea28:	20017b04 	.word	0x20017b04
 800ea2c:	20017b0a 	.word	0x20017b0a
 800ea30:	20017b00 	.word	0x20017b00
 800ea34:	20017af0 	.word	0x20017af0
 800ea38:	200139c4 	.word	0x200139c4
 800ea3c:	200139c8 	.word	0x200139c8
 800ea40:	08017ee4 	.word	0x08017ee4
 800ea44:	08018184 	.word	0x08018184
 800ea48:	08017f30 	.word	0x08017f30
 800ea4c:	20017b08 	.word	0x20017b08
 800ea50:	20017b0d 	.word	0x20017b0d
 800ea54:	20017ad4 	.word	0x20017ad4
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	68db      	ldr	r3, [r3, #12]
 800ea5c:	687a      	ldr	r2, [r7, #4]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d104      	bne.n	800ea6c <tcp_process+0x5d8>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	68da      	ldr	r2, [r3, #12]
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	60da      	str	r2, [r3, #12]
 800ea6a:	e005      	b.n	800ea78 <tcp_process+0x5e4>
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	68db      	ldr	r3, [r3, #12]
 800ea70:	617b      	str	r3, [r7, #20]
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d1ef      	bne.n	800ea58 <tcp_process+0x5c4>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	60da      	str	r2, [r3, #12]
 800ea7e:	4b77      	ldr	r3, [pc, #476]	; (800ec5c <tcp_process+0x7c8>)
 800ea80:	2201      	movs	r2, #1
 800ea82:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	220a      	movs	r2, #10
 800ea88:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ea8a:	4b75      	ldr	r3, [pc, #468]	; (800ec60 <tcp_process+0x7cc>)
 800ea8c:	681a      	ldr	r2, [r3, #0]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	60da      	str	r2, [r3, #12]
 800ea92:	4a73      	ldr	r2, [pc, #460]	; (800ec60 <tcp_process+0x7cc>)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6013      	str	r3, [r2, #0]
 800ea98:	f002 fcfa 	bl	8011490 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ea9c:	e0d2      	b.n	800ec44 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	8b5b      	ldrh	r3, [r3, #26]
 800eaa2:	f043 0302 	orr.w	r3, r3, #2
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2208      	movs	r2, #8
 800eab0:	751a      	strb	r2, [r3, #20]
      break;
 800eab2:	e0c7      	b.n	800ec44 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eab4:	4b6b      	ldr	r3, [pc, #428]	; (800ec64 <tcp_process+0x7d0>)
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	f003 0310 	and.w	r3, r3, #16
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f000 80c1 	beq.w	800ec44 <tcp_process+0x7b0>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eac6:	4b68      	ldr	r3, [pc, #416]	; (800ec68 <tcp_process+0x7d4>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	f040 80ba 	bne.w	800ec44 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	f040 80b5 	bne.w	800ec44 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2206      	movs	r2, #6
 800eade:	751a      	strb	r2, [r3, #20]
      break;
 800eae0:	e0b0      	b.n	800ec44 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f000 f9ca 	bl	800ee7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eae8:	4b60      	ldr	r3, [pc, #384]	; (800ec6c <tcp_process+0x7d8>)
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	f003 0320 	and.w	r3, r3, #32
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	f000 80a9 	beq.w	800ec48 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	8b5b      	ldrh	r3, [r3, #26]
 800eafa:	f043 0302 	orr.w	r3, r3, #2
 800eafe:	b29a      	uxth	r2, r3
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f7fe fd39 	bl	800d57c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eb0a:	4b59      	ldr	r3, [pc, #356]	; (800ec70 <tcp_process+0x7dc>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d105      	bne.n	800eb20 <tcp_process+0x68c>
 800eb14:	4b56      	ldr	r3, [pc, #344]	; (800ec70 <tcp_process+0x7dc>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	68db      	ldr	r3, [r3, #12]
 800eb1a:	4a55      	ldr	r2, [pc, #340]	; (800ec70 <tcp_process+0x7dc>)
 800eb1c:	6013      	str	r3, [r2, #0]
 800eb1e:	e013      	b.n	800eb48 <tcp_process+0x6b4>
 800eb20:	4b53      	ldr	r3, [pc, #332]	; (800ec70 <tcp_process+0x7dc>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	613b      	str	r3, [r7, #16]
 800eb26:	e00c      	b.n	800eb42 <tcp_process+0x6ae>
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d104      	bne.n	800eb3c <tcp_process+0x6a8>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	68da      	ldr	r2, [r3, #12]
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	60da      	str	r2, [r3, #12]
 800eb3a:	e005      	b.n	800eb48 <tcp_process+0x6b4>
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	613b      	str	r3, [r7, #16]
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d1ef      	bne.n	800eb28 <tcp_process+0x694>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	60da      	str	r2, [r3, #12]
 800eb4e:	4b43      	ldr	r3, [pc, #268]	; (800ec5c <tcp_process+0x7c8>)
 800eb50:	2201      	movs	r2, #1
 800eb52:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	220a      	movs	r2, #10
 800eb58:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800eb5a:	4b41      	ldr	r3, [pc, #260]	; (800ec60 <tcp_process+0x7cc>)
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	60da      	str	r2, [r3, #12]
 800eb62:	4a3f      	ldr	r2, [pc, #252]	; (800ec60 <tcp_process+0x7cc>)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6013      	str	r3, [r2, #0]
 800eb68:	f002 fc92 	bl	8011490 <tcp_timer_needed>
      }
      break;
 800eb6c:	e06c      	b.n	800ec48 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f000 f984 	bl	800ee7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eb74:	4b3b      	ldr	r3, [pc, #236]	; (800ec64 <tcp_process+0x7d0>)
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	f003 0310 	and.w	r3, r3, #16
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d065      	beq.n	800ec4c <tcp_process+0x7b8>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb84:	4b38      	ldr	r3, [pc, #224]	; (800ec68 <tcp_process+0x7d4>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d15f      	bne.n	800ec4c <tcp_process+0x7b8>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d15b      	bne.n	800ec4c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f7fe fcf1 	bl	800d57c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eb9a:	4b35      	ldr	r3, [pc, #212]	; (800ec70 <tcp_process+0x7dc>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d105      	bne.n	800ebb0 <tcp_process+0x71c>
 800eba4:	4b32      	ldr	r3, [pc, #200]	; (800ec70 <tcp_process+0x7dc>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	68db      	ldr	r3, [r3, #12]
 800ebaa:	4a31      	ldr	r2, [pc, #196]	; (800ec70 <tcp_process+0x7dc>)
 800ebac:	6013      	str	r3, [r2, #0]
 800ebae:	e013      	b.n	800ebd8 <tcp_process+0x744>
 800ebb0:	4b2f      	ldr	r3, [pc, #188]	; (800ec70 <tcp_process+0x7dc>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	60fb      	str	r3, [r7, #12]
 800ebb6:	e00c      	b.n	800ebd2 <tcp_process+0x73e>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	68db      	ldr	r3, [r3, #12]
 800ebbc:	687a      	ldr	r2, [r7, #4]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d104      	bne.n	800ebcc <tcp_process+0x738>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	68da      	ldr	r2, [r3, #12]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	60da      	str	r2, [r3, #12]
 800ebca:	e005      	b.n	800ebd8 <tcp_process+0x744>
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	68db      	ldr	r3, [r3, #12]
 800ebd0:	60fb      	str	r3, [r7, #12]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d1ef      	bne.n	800ebb8 <tcp_process+0x724>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	60da      	str	r2, [r3, #12]
 800ebde:	4b1f      	ldr	r3, [pc, #124]	; (800ec5c <tcp_process+0x7c8>)
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	220a      	movs	r2, #10
 800ebe8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ebea:	4b1d      	ldr	r3, [pc, #116]	; (800ec60 <tcp_process+0x7cc>)
 800ebec:	681a      	ldr	r2, [r3, #0]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	60da      	str	r2, [r3, #12]
 800ebf2:	4a1b      	ldr	r2, [pc, #108]	; (800ec60 <tcp_process+0x7cc>)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6013      	str	r3, [r2, #0]
 800ebf8:	f002 fc4a 	bl	8011490 <tcp_timer_needed>
      }
      break;
 800ebfc:	e026      	b.n	800ec4c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 f93c 	bl	800ee7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ec04:	4b17      	ldr	r3, [pc, #92]	; (800ec64 <tcp_process+0x7d0>)
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	f003 0310 	and.w	r3, r3, #16
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d01f      	beq.n	800ec50 <tcp_process+0x7bc>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec14:	4b14      	ldr	r3, [pc, #80]	; (800ec68 <tcp_process+0x7d4>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d119      	bne.n	800ec50 <tcp_process+0x7bc>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d115      	bne.n	800ec50 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ec24:	4b11      	ldr	r3, [pc, #68]	; (800ec6c <tcp_process+0x7d8>)
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	f043 0310 	orr.w	r3, r3, #16
 800ec2c:	b2da      	uxtb	r2, r3
 800ec2e:	4b0f      	ldr	r3, [pc, #60]	; (800ec6c <tcp_process+0x7d8>)
 800ec30:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ec32:	e00d      	b.n	800ec50 <tcp_process+0x7bc>
    default:
      break;
 800ec34:	bf00      	nop
 800ec36:	e00c      	b.n	800ec52 <tcp_process+0x7be>
      break;
 800ec38:	bf00      	nop
 800ec3a:	e00a      	b.n	800ec52 <tcp_process+0x7be>
      break;
 800ec3c:	bf00      	nop
 800ec3e:	e008      	b.n	800ec52 <tcp_process+0x7be>
      break;
 800ec40:	bf00      	nop
 800ec42:	e006      	b.n	800ec52 <tcp_process+0x7be>
      break;
 800ec44:	bf00      	nop
 800ec46:	e004      	b.n	800ec52 <tcp_process+0x7be>
      break;
 800ec48:	bf00      	nop
 800ec4a:	e002      	b.n	800ec52 <tcp_process+0x7be>
      break;
 800ec4c:	bf00      	nop
 800ec4e:	e000      	b.n	800ec52 <tcp_process+0x7be>
      break;
 800ec50:	bf00      	nop
  }
  return ERR_OK;
 800ec52:	2300      	movs	r3, #0
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3724      	adds	r7, #36	; 0x24
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd90      	pop	{r4, r7, pc}
 800ec5c:	20017adc 	.word	0x20017adc
 800ec60:	20017ad8 	.word	0x20017ad8
 800ec64:	20017b0c 	.word	0x20017b0c
 800ec68:	20017b04 	.word	0x20017b04
 800ec6c:	20017b0d 	.word	0x20017b0d
 800ec70:	20017ad4 	.word	0x20017ad4

0800ec74 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ec74:	b590      	push	{r4, r7, lr}
 800ec76:	b085      	sub	sp, #20
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d106      	bne.n	800ec92 <tcp_oos_insert_segment+0x1e>
 800ec84:	4b3b      	ldr	r3, [pc, #236]	; (800ed74 <tcp_oos_insert_segment+0x100>)
 800ec86:	f240 421f 	movw	r2, #1055	; 0x41f
 800ec8a:	493b      	ldr	r1, [pc, #236]	; (800ed78 <tcp_oos_insert_segment+0x104>)
 800ec8c:	483b      	ldr	r0, [pc, #236]	; (800ed7c <tcp_oos_insert_segment+0x108>)
 800ec8e:	f006 f911 	bl	8014eb4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	899b      	ldrh	r3, [r3, #12]
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7fb fc00 	bl	800a4a0 <lwip_htons>
 800eca0:	4603      	mov	r3, r0
 800eca2:	b2db      	uxtb	r3, r3
 800eca4:	f003 0301 	and.w	r3, r3, #1
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d028      	beq.n	800ecfe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ecac:	6838      	ldr	r0, [r7, #0]
 800ecae:	f7fe fa63 	bl	800d178 <tcp_segs_free>
    next = NULL;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	603b      	str	r3, [r7, #0]
 800ecb6:	e056      	b.n	800ed66 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	899b      	ldrh	r3, [r3, #12]
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7fb fbed 	bl	800a4a0 <lwip_htons>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	f003 0301 	and.w	r3, r3, #1
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d00d      	beq.n	800ecee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	68db      	ldr	r3, [r3, #12]
 800ecd6:	899b      	ldrh	r3, [r3, #12]
 800ecd8:	b29c      	uxth	r4, r3
 800ecda:	2001      	movs	r0, #1
 800ecdc:	f7fb fbe0 	bl	800a4a0 <lwip_htons>
 800ece0:	4603      	mov	r3, r0
 800ece2:	461a      	mov	r2, r3
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	68db      	ldr	r3, [r3, #12]
 800ece8:	4322      	orrs	r2, r4
 800ecea:	b292      	uxth	r2, r2
 800ecec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ecf8:	68f8      	ldr	r0, [r7, #12]
 800ecfa:	f7fe fa52 	bl	800d1a2 <tcp_seg_free>
    while (next &&
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d00e      	beq.n	800ed22 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	891b      	ldrh	r3, [r3, #8]
 800ed08:	461a      	mov	r2, r3
 800ed0a:	4b1d      	ldr	r3, [pc, #116]	; (800ed80 <tcp_oos_insert_segment+0x10c>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	441a      	add	r2, r3
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	68db      	ldr	r3, [r3, #12]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	6839      	ldr	r1, [r7, #0]
 800ed18:	8909      	ldrh	r1, [r1, #8]
 800ed1a:	440b      	add	r3, r1
 800ed1c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	daca      	bge.n	800ecb8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d01e      	beq.n	800ed66 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	891b      	ldrh	r3, [r3, #8]
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	4b14      	ldr	r3, [pc, #80]	; (800ed80 <tcp_oos_insert_segment+0x10c>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	441a      	add	r2, r3
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	685b      	ldr	r3, [r3, #4]
 800ed3a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	dd12      	ble.n	800ed66 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	68db      	ldr	r3, [r3, #12]
 800ed44:	685b      	ldr	r3, [r3, #4]
 800ed46:	b29a      	uxth	r2, r3
 800ed48:	4b0d      	ldr	r3, [pc, #52]	; (800ed80 <tcp_oos_insert_segment+0x10c>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	b29a      	uxth	r2, r3
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	685a      	ldr	r2, [r3, #4]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	891b      	ldrh	r3, [r3, #8]
 800ed5e:	4619      	mov	r1, r3
 800ed60:	4610      	mov	r0, r2
 800ed62:	f7fc fe09 	bl	800b978 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	683a      	ldr	r2, [r7, #0]
 800ed6a:	601a      	str	r2, [r3, #0]
}
 800ed6c:	bf00      	nop
 800ed6e:	3714      	adds	r7, #20
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd90      	pop	{r4, r7, pc}
 800ed74:	08017ee4 	.word	0x08017ee4
 800ed78:	080181a4 	.word	0x080181a4
 800ed7c:	08017f30 	.word	0x08017f30
 800ed80:	20017b00 	.word	0x20017b00

0800ed84 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ed84:	b5b0      	push	{r4, r5, r7, lr}
 800ed86:	b086      	sub	sp, #24
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	60b9      	str	r1, [r7, #8]
 800ed8e:	607a      	str	r2, [r7, #4]
 800ed90:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ed92:	e03e      	b.n	800ee12 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	685b      	ldr	r3, [r3, #4]
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fc fffc 	bl	800bda0 <pbuf_clen>
 800eda8:	4603      	mov	r3, r0
 800edaa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800edb2:	8a7a      	ldrh	r2, [r7, #18]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d906      	bls.n	800edc6 <tcp_free_acked_segments+0x42>
 800edb8:	4b2a      	ldr	r3, [pc, #168]	; (800ee64 <tcp_free_acked_segments+0xe0>)
 800edba:	f240 4257 	movw	r2, #1111	; 0x457
 800edbe:	492a      	ldr	r1, [pc, #168]	; (800ee68 <tcp_free_acked_segments+0xe4>)
 800edc0:	482a      	ldr	r0, [pc, #168]	; (800ee6c <tcp_free_acked_segments+0xe8>)
 800edc2:	f006 f877 	bl	8014eb4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800edcc:	8a7b      	ldrh	r3, [r7, #18]
 800edce:	1ad3      	subs	r3, r2, r3
 800edd0:	b29a      	uxth	r2, r3
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	891a      	ldrh	r2, [r3, #8]
 800eddc:	4b24      	ldr	r3, [pc, #144]	; (800ee70 <tcp_free_acked_segments+0xec>)
 800edde:	881b      	ldrh	r3, [r3, #0]
 800ede0:	4413      	add	r3, r2
 800ede2:	b29a      	uxth	r2, r3
 800ede4:	4b22      	ldr	r3, [pc, #136]	; (800ee70 <tcp_free_acked_segments+0xec>)
 800ede6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ede8:	6978      	ldr	r0, [r7, #20]
 800edea:	f7fe f9da 	bl	800d1a2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d00c      	beq.n	800ee12 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d109      	bne.n	800ee12 <tcp_free_acked_segments+0x8e>
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d106      	bne.n	800ee12 <tcp_free_acked_segments+0x8e>
 800ee04:	4b17      	ldr	r3, [pc, #92]	; (800ee64 <tcp_free_acked_segments+0xe0>)
 800ee06:	f240 4261 	movw	r2, #1121	; 0x461
 800ee0a:	491a      	ldr	r1, [pc, #104]	; (800ee74 <tcp_free_acked_segments+0xf0>)
 800ee0c:	4817      	ldr	r0, [pc, #92]	; (800ee6c <tcp_free_acked_segments+0xe8>)
 800ee0e:	f006 f851 	bl	8014eb4 <iprintf>
  while (seg_list != NULL &&
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d020      	beq.n	800ee5a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	68db      	ldr	r3, [r3, #12]
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fb fb53 	bl	800a4ca <lwip_htonl>
 800ee24:	4604      	mov	r4, r0
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	891b      	ldrh	r3, [r3, #8]
 800ee2a:	461d      	mov	r5, r3
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	68db      	ldr	r3, [r3, #12]
 800ee30:	899b      	ldrh	r3, [r3, #12]
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7fb fb33 	bl	800a4a0 <lwip_htons>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	f003 0303 	and.w	r3, r3, #3
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d001      	beq.n	800ee4a <tcp_free_acked_segments+0xc6>
 800ee46:	2301      	movs	r3, #1
 800ee48:	e000      	b.n	800ee4c <tcp_free_acked_segments+0xc8>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	442b      	add	r3, r5
 800ee4e:	18e2      	adds	r2, r4, r3
 800ee50:	4b09      	ldr	r3, [pc, #36]	; (800ee78 <tcp_free_acked_segments+0xf4>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	dd9c      	ble.n	800ed94 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ee5a:	68bb      	ldr	r3, [r7, #8]
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3718      	adds	r7, #24
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bdb0      	pop	{r4, r5, r7, pc}
 800ee64:	08017ee4 	.word	0x08017ee4
 800ee68:	080181cc 	.word	0x080181cc
 800ee6c:	08017f30 	.word	0x08017f30
 800ee70:	20017b08 	.word	0x20017b08
 800ee74:	080181f4 	.word	0x080181f4
 800ee78:	20017b04 	.word	0x20017b04

0800ee7c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ee7c:	b5b0      	push	{r4, r5, r7, lr}
 800ee7e:	b094      	sub	sp, #80	; 0x50
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ee84:	2300      	movs	r3, #0
 800ee86:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d106      	bne.n	800ee9c <tcp_receive+0x20>
 800ee8e:	4b91      	ldr	r3, [pc, #580]	; (800f0d4 <tcp_receive+0x258>)
 800ee90:	f240 427b 	movw	r2, #1147	; 0x47b
 800ee94:	4990      	ldr	r1, [pc, #576]	; (800f0d8 <tcp_receive+0x25c>)
 800ee96:	4891      	ldr	r0, [pc, #580]	; (800f0dc <tcp_receive+0x260>)
 800ee98:	f006 f80c 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	7d1b      	ldrb	r3, [r3, #20]
 800eea0:	2b03      	cmp	r3, #3
 800eea2:	d806      	bhi.n	800eeb2 <tcp_receive+0x36>
 800eea4:	4b8b      	ldr	r3, [pc, #556]	; (800f0d4 <tcp_receive+0x258>)
 800eea6:	f240 427c 	movw	r2, #1148	; 0x47c
 800eeaa:	498d      	ldr	r1, [pc, #564]	; (800f0e0 <tcp_receive+0x264>)
 800eeac:	488b      	ldr	r0, [pc, #556]	; (800f0dc <tcp_receive+0x260>)
 800eeae:	f006 f801 	bl	8014eb4 <iprintf>

  if (flags & TCP_ACK) {
 800eeb2:	4b8c      	ldr	r3, [pc, #560]	; (800f0e4 <tcp_receive+0x268>)
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	f003 0310 	and.w	r3, r3, #16
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	f000 8264 	beq.w	800f388 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eec6:	461a      	mov	r2, r3
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eecc:	4413      	add	r3, r2
 800eece:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eed4:	4b84      	ldr	r3, [pc, #528]	; (800f0e8 <tcp_receive+0x26c>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	1ad3      	subs	r3, r2, r3
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	db1b      	blt.n	800ef16 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eee2:	4b81      	ldr	r3, [pc, #516]	; (800f0e8 <tcp_receive+0x26c>)
 800eee4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d106      	bne.n	800eef8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eeee:	4b7f      	ldr	r3, [pc, #508]	; (800f0ec <tcp_receive+0x270>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	1ad3      	subs	r3, r2, r3
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	db0e      	blt.n	800ef16 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eefc:	4b7b      	ldr	r3, [pc, #492]	; (800f0ec <tcp_receive+0x270>)
 800eefe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d125      	bne.n	800ef50 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ef04:	4b7a      	ldr	r3, [pc, #488]	; (800f0f0 <tcp_receive+0x274>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	89db      	ldrh	r3, [r3, #14]
 800ef0a:	b29a      	uxth	r2, r3
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d91c      	bls.n	800ef50 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ef16:	4b76      	ldr	r3, [pc, #472]	; (800f0f0 <tcp_receive+0x274>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	89db      	ldrh	r3, [r3, #14]
 800ef1c:	b29a      	uxth	r2, r3
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d205      	bcs.n	800ef40 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ef40:	4b69      	ldr	r3, [pc, #420]	; (800f0e8 <tcp_receive+0x26c>)
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ef48:	4b68      	ldr	r3, [pc, #416]	; (800f0ec <tcp_receive+0x270>)
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ef50:	4b66      	ldr	r3, [pc, #408]	; (800f0ec <tcp_receive+0x270>)
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef58:	1ad3      	subs	r3, r2, r3
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	dc58      	bgt.n	800f010 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ef5e:	4b65      	ldr	r3, [pc, #404]	; (800f0f4 <tcp_receive+0x278>)
 800ef60:	881b      	ldrh	r3, [r3, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d14b      	bne.n	800effe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ef70:	4413      	add	r3, r2
 800ef72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d142      	bne.n	800effe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	db3d      	blt.n	800effe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef86:	4b59      	ldr	r3, [pc, #356]	; (800f0ec <tcp_receive+0x270>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d137      	bne.n	800effe <tcp_receive+0x182>
              found_dupack = 1;
 800ef8e:	2301      	movs	r3, #1
 800ef90:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef98:	2bff      	cmp	r3, #255	; 0xff
 800ef9a:	d007      	beq.n	800efac <tcp_receive+0x130>
                ++pcb->dupacks;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800efa2:	3301      	adds	r3, #1
 800efa4:	b2da      	uxtb	r2, r3
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800efb2:	2b03      	cmp	r3, #3
 800efb4:	d91b      	bls.n	800efee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efc0:	4413      	add	r3, r2
 800efc2:	b29a      	uxth	r2, r3
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800efca:	429a      	cmp	r2, r3
 800efcc:	d30a      	bcc.n	800efe4 <tcp_receive+0x168>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efd8:	4413      	add	r3, r2
 800efda:	b29a      	uxth	r2, r3
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800efe2:	e004      	b.n	800efee <tcp_receive+0x172>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eff4:	2b02      	cmp	r3, #2
 800eff6:	d902      	bls.n	800effe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f001 feeb 	bl	8010dd4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800effe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f000:	2b00      	cmp	r3, #0
 800f002:	f040 8161 	bne.w	800f2c8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2200      	movs	r2, #0
 800f00a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f00e:	e15b      	b.n	800f2c8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f010:	4b36      	ldr	r3, [pc, #216]	; (800f0ec <tcp_receive+0x270>)
 800f012:	681a      	ldr	r2, [r3, #0]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f018:	1ad3      	subs	r3, r2, r3
 800f01a:	3b01      	subs	r3, #1
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	f2c0 814e 	blt.w	800f2be <tcp_receive+0x442>
 800f022:	4b32      	ldr	r3, [pc, #200]	; (800f0ec <tcp_receive+0x270>)
 800f024:	681a      	ldr	r2, [r3, #0]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f02a:	1ad3      	subs	r3, r2, r3
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	f300 8146 	bgt.w	800f2be <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	8b5b      	ldrh	r3, [r3, #26]
 800f036:	f003 0304 	and.w	r3, r3, #4
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d010      	beq.n	800f060 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	8b5b      	ldrh	r3, [r3, #26]
 800f042:	f023 0304 	bic.w	r3, r3, #4
 800f046:	b29a      	uxth	r2, r3
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2200      	movs	r2, #0
 800f064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f06e:	10db      	asrs	r3, r3, #3
 800f070:	b21b      	sxth	r3, r3
 800f072:	b29a      	uxth	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	4413      	add	r3, r2
 800f07e:	b29b      	uxth	r3, r3
 800f080:	b21a      	sxth	r2, r3
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f088:	4b18      	ldr	r3, [pc, #96]	; (800f0ec <tcp_receive+0x270>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	b29a      	uxth	r2, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f092:	b29b      	uxth	r3, r3
 800f094:	1ad3      	subs	r3, r2, r3
 800f096:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2200      	movs	r2, #0
 800f09c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f0a0:	4b12      	ldr	r3, [pc, #72]	; (800f0ec <tcp_receive+0x270>)
 800f0a2:	681a      	ldr	r2, [r3, #0]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	7d1b      	ldrb	r3, [r3, #20]
 800f0ac:	2b03      	cmp	r3, #3
 800f0ae:	f240 8097 	bls.w	800f1e0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d245      	bcs.n	800f14e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	8b5b      	ldrh	r3, [r3, #26]
 800f0c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d014      	beq.n	800f0f8 <tcp_receive+0x27c>
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e013      	b.n	800f0fa <tcp_receive+0x27e>
 800f0d2:	bf00      	nop
 800f0d4:	08017ee4 	.word	0x08017ee4
 800f0d8:	08018214 	.word	0x08018214
 800f0dc:	08017f30 	.word	0x08017f30
 800f0e0:	08018230 	.word	0x08018230
 800f0e4:	20017b0c 	.word	0x20017b0c
 800f0e8:	20017b00 	.word	0x20017b00
 800f0ec:	20017b04 	.word	0x20017b04
 800f0f0:	20017af0 	.word	0x20017af0
 800f0f4:	20017b0a 	.word	0x20017b0a
 800f0f8:	2302      	movs	r3, #2
 800f0fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f0fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f102:	b29a      	uxth	r2, r3
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f108:	fb12 f303 	smulbb	r3, r2, r3
 800f10c:	b29b      	uxth	r3, r3
 800f10e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f110:	4293      	cmp	r3, r2
 800f112:	bf28      	it	cs
 800f114:	4613      	movcs	r3, r2
 800f116:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f11e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f120:	4413      	add	r3, r2
 800f122:	b29a      	uxth	r2, r3
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d309      	bcc.n	800f142 <tcp_receive+0x2c6>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f134:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f136:	4413      	add	r3, r2
 800f138:	b29a      	uxth	r2, r3
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f140:	e04e      	b.n	800f1e0 <tcp_receive+0x364>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f148:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f14c:	e048      	b.n	800f1e0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f154:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f156:	4413      	add	r3, r2
 800f158:	b29a      	uxth	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f160:	429a      	cmp	r2, r3
 800f162:	d309      	bcc.n	800f178 <tcp_receive+0x2fc>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f16a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f16c:	4413      	add	r3, r2
 800f16e:	b29a      	uxth	r2, r3
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f176:	e004      	b.n	800f182 <tcp_receive+0x306>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f17e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f18e:	429a      	cmp	r2, r3
 800f190:	d326      	bcc.n	800f1e0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f19e:	1ad3      	subs	r3, r2, r3
 800f1a0:	b29a      	uxth	r2, r3
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1b2:	4413      	add	r3, r2
 800f1b4:	b29a      	uxth	r2, r3
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d30a      	bcc.n	800f1d6 <tcp_receive+0x35a>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1ca:	4413      	add	r3, r2
 800f1cc:	b29a      	uxth	r2, r3
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f1d4:	e004      	b.n	800f1e0 <tcp_receive+0x364>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1e8:	4a98      	ldr	r2, [pc, #608]	; (800f44c <tcp_receive+0x5d0>)
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f7ff fdca 	bl	800ed84 <tcp_free_acked_segments>
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1fe:	4a94      	ldr	r2, [pc, #592]	; (800f450 <tcp_receive+0x5d4>)
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f7ff fdbf 	bl	800ed84 <tcp_free_acked_segments>
 800f206:	4602      	mov	r2, r0
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f210:	2b00      	cmp	r3, #0
 800f212:	d104      	bne.n	800f21e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f21a:	861a      	strh	r2, [r3, #48]	; 0x30
 800f21c:	e002      	b.n	800f224 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2200      	movs	r2, #0
 800f222:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2200      	movs	r2, #0
 800f228:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d103      	bne.n	800f23a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2200      	movs	r2, #0
 800f236:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f240:	4b84      	ldr	r3, [pc, #528]	; (800f454 <tcp_receive+0x5d8>)
 800f242:	881b      	ldrh	r3, [r3, #0]
 800f244:	4413      	add	r3, r2
 800f246:	b29a      	uxth	r2, r3
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	8b5b      	ldrh	r3, [r3, #26]
 800f252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f256:	2b00      	cmp	r3, #0
 800f258:	d035      	beq.n	800f2c6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d118      	bne.n	800f294 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f266:	2b00      	cmp	r3, #0
 800f268:	d00c      	beq.n	800f284 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f272:	68db      	ldr	r3, [r3, #12]
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	4618      	mov	r0, r3
 800f278:	f7fb f927 	bl	800a4ca <lwip_htonl>
 800f27c:	4603      	mov	r3, r0
 800f27e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f280:	2b00      	cmp	r3, #0
 800f282:	dc20      	bgt.n	800f2c6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	8b5b      	ldrh	r3, [r3, #26]
 800f288:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f28c:	b29a      	uxth	r2, r3
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f292:	e018      	b.n	800f2c6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f29c:	68db      	ldr	r3, [r3, #12]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7fb f912 	bl	800a4ca <lwip_htonl>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	1ae3      	subs	r3, r4, r3
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	dc0b      	bgt.n	800f2c6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	8b5b      	ldrh	r3, [r3, #26]
 800f2b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2b6:	b29a      	uxth	r2, r3
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f2bc:	e003      	b.n	800f2c6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f001 ff76 	bl	80111b0 <tcp_send_empty_ack>
 800f2c4:	e000      	b.n	800f2c8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f2c6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d05b      	beq.n	800f388 <tcp_receive+0x50c>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2d4:	4b60      	ldr	r3, [pc, #384]	; (800f458 <tcp_receive+0x5dc>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	1ad3      	subs	r3, r2, r3
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	da54      	bge.n	800f388 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f2de:	4b5f      	ldr	r3, [pc, #380]	; (800f45c <tcp_receive+0x5e0>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	b29a      	uxth	r2, r3
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	1ad3      	subs	r3, r2, r3
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f2f2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f2fc:	10db      	asrs	r3, r3, #3
 800f2fe:	b21b      	sxth	r3, r3
 800f300:	b29b      	uxth	r3, r3
 800f302:	1ad3      	subs	r3, r2, r3
 800f304:	b29b      	uxth	r3, r3
 800f306:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f310:	b29a      	uxth	r2, r3
 800f312:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f316:	4413      	add	r3, r2
 800f318:	b29b      	uxth	r3, r3
 800f31a:	b21a      	sxth	r2, r3
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f320:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f324:	2b00      	cmp	r3, #0
 800f326:	da05      	bge.n	800f334 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f328:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f32c:	425b      	negs	r3, r3
 800f32e:	b29b      	uxth	r3, r3
 800f330:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f334:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f33e:	109b      	asrs	r3, r3, #2
 800f340:	b21b      	sxth	r3, r3
 800f342:	b29b      	uxth	r3, r3
 800f344:	1ad3      	subs	r3, r2, r3
 800f346:	b29b      	uxth	r3, r3
 800f348:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f352:	b29a      	uxth	r2, r3
 800f354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f358:	4413      	add	r3, r2
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	b21a      	sxth	r2, r3
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f368:	10db      	asrs	r3, r3, #3
 800f36a:	b21b      	sxth	r3, r3
 800f36c:	b29a      	uxth	r2, r3
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f374:	b29b      	uxth	r3, r3
 800f376:	4413      	add	r3, r2
 800f378:	b29b      	uxth	r3, r3
 800f37a:	b21a      	sxth	r2, r3
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2200      	movs	r2, #0
 800f386:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f388:	4b35      	ldr	r3, [pc, #212]	; (800f460 <tcp_receive+0x5e4>)
 800f38a:	881b      	ldrh	r3, [r3, #0]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f000 84e2 	beq.w	800fd56 <tcp_receive+0xeda>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	7d1b      	ldrb	r3, [r3, #20]
 800f396:	2b06      	cmp	r3, #6
 800f398:	f200 84dd 	bhi.w	800fd56 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3a0:	4b30      	ldr	r3, [pc, #192]	; (800f464 <tcp_receive+0x5e8>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	1ad3      	subs	r3, r2, r3
 800f3a6:	3b01      	subs	r3, #1
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	f2c0 808f 	blt.w	800f4cc <tcp_receive+0x650>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3b2:	4b2b      	ldr	r3, [pc, #172]	; (800f460 <tcp_receive+0x5e4>)
 800f3b4:	881b      	ldrh	r3, [r3, #0]
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	4b2a      	ldr	r3, [pc, #168]	; (800f464 <tcp_receive+0x5e8>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	440b      	add	r3, r1
 800f3be:	1ad3      	subs	r3, r2, r3
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	f300 8082 	bgt.w	800f4cc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f3c8:	4b27      	ldr	r3, [pc, #156]	; (800f468 <tcp_receive+0x5ec>)
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3d2:	4b24      	ldr	r3, [pc, #144]	; (800f464 <tcp_receive+0x5e8>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	1ad3      	subs	r3, r2, r3
 800f3d8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f3da:	4b23      	ldr	r3, [pc, #140]	; (800f468 <tcp_receive+0x5ec>)
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d106      	bne.n	800f3f0 <tcp_receive+0x574>
 800f3e2:	4b22      	ldr	r3, [pc, #136]	; (800f46c <tcp_receive+0x5f0>)
 800f3e4:	f240 5294 	movw	r2, #1428	; 0x594
 800f3e8:	4921      	ldr	r1, [pc, #132]	; (800f470 <tcp_receive+0x5f4>)
 800f3ea:	4822      	ldr	r0, [pc, #136]	; (800f474 <tcp_receive+0x5f8>)
 800f3ec:	f005 fd62 	bl	8014eb4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	d906      	bls.n	800f408 <tcp_receive+0x58c>
 800f3fa:	4b1c      	ldr	r3, [pc, #112]	; (800f46c <tcp_receive+0x5f0>)
 800f3fc:	f240 5295 	movw	r2, #1429	; 0x595
 800f400:	491d      	ldr	r1, [pc, #116]	; (800f478 <tcp_receive+0x5fc>)
 800f402:	481c      	ldr	r0, [pc, #112]	; (800f474 <tcp_receive+0x5f8>)
 800f404:	f005 fd56 	bl	8014eb4 <iprintf>
      off = (u16_t)off32;
 800f408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f40e:	4b16      	ldr	r3, [pc, #88]	; (800f468 <tcp_receive+0x5ec>)
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	891b      	ldrh	r3, [r3, #8]
 800f414:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f418:	429a      	cmp	r2, r3
 800f41a:	d906      	bls.n	800f42a <tcp_receive+0x5ae>
 800f41c:	4b13      	ldr	r3, [pc, #76]	; (800f46c <tcp_receive+0x5f0>)
 800f41e:	f240 5297 	movw	r2, #1431	; 0x597
 800f422:	4916      	ldr	r1, [pc, #88]	; (800f47c <tcp_receive+0x600>)
 800f424:	4813      	ldr	r0, [pc, #76]	; (800f474 <tcp_receive+0x5f8>)
 800f426:	f005 fd45 	bl	8014eb4 <iprintf>
      inseg.len -= off;
 800f42a:	4b0f      	ldr	r3, [pc, #60]	; (800f468 <tcp_receive+0x5ec>)
 800f42c:	891a      	ldrh	r2, [r3, #8]
 800f42e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f432:	1ad3      	subs	r3, r2, r3
 800f434:	b29a      	uxth	r2, r3
 800f436:	4b0c      	ldr	r3, [pc, #48]	; (800f468 <tcp_receive+0x5ec>)
 800f438:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f43a:	4b0b      	ldr	r3, [pc, #44]	; (800f468 <tcp_receive+0x5ec>)
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	891a      	ldrh	r2, [r3, #8]
 800f440:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f444:	1ad3      	subs	r3, r2, r3
 800f446:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f448:	e02a      	b.n	800f4a0 <tcp_receive+0x624>
 800f44a:	bf00      	nop
 800f44c:	0801824c 	.word	0x0801824c
 800f450:	08018254 	.word	0x08018254
 800f454:	20017b08 	.word	0x20017b08
 800f458:	20017b04 	.word	0x20017b04
 800f45c:	20017ac8 	.word	0x20017ac8
 800f460:	20017b0a 	.word	0x20017b0a
 800f464:	20017b00 	.word	0x20017b00
 800f468:	20017ae0 	.word	0x20017ae0
 800f46c:	08017ee4 	.word	0x08017ee4
 800f470:	0801825c 	.word	0x0801825c
 800f474:	08017f30 	.word	0x08017f30
 800f478:	0801826c 	.word	0x0801826c
 800f47c:	0801827c 	.word	0x0801827c
        off -= p->len;
 800f480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f482:	895b      	ldrh	r3, [r3, #10]
 800f484:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f488:	1ad3      	subs	r3, r2, r3
 800f48a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f48e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f490:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f492:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f496:	2200      	movs	r2, #0
 800f498:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f49a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f4a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4a2:	895b      	ldrh	r3, [r3, #10]
 800f4a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d8e9      	bhi.n	800f480 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f4ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f4b4:	f7fc fb60 	bl	800bb78 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4bc:	4a91      	ldr	r2, [pc, #580]	; (800f704 <tcp_receive+0x888>)
 800f4be:	6013      	str	r3, [r2, #0]
 800f4c0:	4b91      	ldr	r3, [pc, #580]	; (800f708 <tcp_receive+0x88c>)
 800f4c2:	68db      	ldr	r3, [r3, #12]
 800f4c4:	4a8f      	ldr	r2, [pc, #572]	; (800f704 <tcp_receive+0x888>)
 800f4c6:	6812      	ldr	r2, [r2, #0]
 800f4c8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f4ca:	e00d      	b.n	800f4e8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f4cc:	4b8d      	ldr	r3, [pc, #564]	; (800f704 <tcp_receive+0x888>)
 800f4ce:	681a      	ldr	r2, [r3, #0]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4d4:	1ad3      	subs	r3, r2, r3
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	da06      	bge.n	800f4e8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	8b5b      	ldrh	r3, [r3, #26]
 800f4de:	f043 0302 	orr.w	r3, r3, #2
 800f4e2:	b29a      	uxth	r2, r3
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f4e8:	4b86      	ldr	r3, [pc, #536]	; (800f704 <tcp_receive+0x888>)
 800f4ea:	681a      	ldr	r2, [r3, #0]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f0:	1ad3      	subs	r3, r2, r3
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	f2c0 842a 	blt.w	800fd4c <tcp_receive+0xed0>
 800f4f8:	4b82      	ldr	r3, [pc, #520]	; (800f704 <tcp_receive+0x888>)
 800f4fa:	681a      	ldr	r2, [r3, #0]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f500:	6879      	ldr	r1, [r7, #4]
 800f502:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f504:	440b      	add	r3, r1
 800f506:	1ad3      	subs	r3, r2, r3
 800f508:	3301      	adds	r3, #1
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	f300 841e 	bgt.w	800fd4c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f514:	4b7b      	ldr	r3, [pc, #492]	; (800f704 <tcp_receive+0x888>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	429a      	cmp	r2, r3
 800f51a:	f040 829a 	bne.w	800fa52 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f51e:	4b7a      	ldr	r3, [pc, #488]	; (800f708 <tcp_receive+0x88c>)
 800f520:	891c      	ldrh	r4, [r3, #8]
 800f522:	4b79      	ldr	r3, [pc, #484]	; (800f708 <tcp_receive+0x88c>)
 800f524:	68db      	ldr	r3, [r3, #12]
 800f526:	899b      	ldrh	r3, [r3, #12]
 800f528:	b29b      	uxth	r3, r3
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7fa ffb8 	bl	800a4a0 <lwip_htons>
 800f530:	4603      	mov	r3, r0
 800f532:	b2db      	uxtb	r3, r3
 800f534:	f003 0303 	and.w	r3, r3, #3
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d001      	beq.n	800f540 <tcp_receive+0x6c4>
 800f53c:	2301      	movs	r3, #1
 800f53e:	e000      	b.n	800f542 <tcp_receive+0x6c6>
 800f540:	2300      	movs	r3, #0
 800f542:	4423      	add	r3, r4
 800f544:	b29a      	uxth	r2, r3
 800f546:	4b71      	ldr	r3, [pc, #452]	; (800f70c <tcp_receive+0x890>)
 800f548:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f54e:	4b6f      	ldr	r3, [pc, #444]	; (800f70c <tcp_receive+0x890>)
 800f550:	881b      	ldrh	r3, [r3, #0]
 800f552:	429a      	cmp	r2, r3
 800f554:	d275      	bcs.n	800f642 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f556:	4b6c      	ldr	r3, [pc, #432]	; (800f708 <tcp_receive+0x88c>)
 800f558:	68db      	ldr	r3, [r3, #12]
 800f55a:	899b      	ldrh	r3, [r3, #12]
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fa ff9e 	bl	800a4a0 <lwip_htons>
 800f564:	4603      	mov	r3, r0
 800f566:	b2db      	uxtb	r3, r3
 800f568:	f003 0301 	and.w	r3, r3, #1
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d01f      	beq.n	800f5b0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f570:	4b65      	ldr	r3, [pc, #404]	; (800f708 <tcp_receive+0x88c>)
 800f572:	68db      	ldr	r3, [r3, #12]
 800f574:	899b      	ldrh	r3, [r3, #12]
 800f576:	b29b      	uxth	r3, r3
 800f578:	b21b      	sxth	r3, r3
 800f57a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f57e:	b21c      	sxth	r4, r3
 800f580:	4b61      	ldr	r3, [pc, #388]	; (800f708 <tcp_receive+0x88c>)
 800f582:	68db      	ldr	r3, [r3, #12]
 800f584:	899b      	ldrh	r3, [r3, #12]
 800f586:	b29b      	uxth	r3, r3
 800f588:	4618      	mov	r0, r3
 800f58a:	f7fa ff89 	bl	800a4a0 <lwip_htons>
 800f58e:	4603      	mov	r3, r0
 800f590:	b2db      	uxtb	r3, r3
 800f592:	b29b      	uxth	r3, r3
 800f594:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f598:	b29b      	uxth	r3, r3
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7fa ff80 	bl	800a4a0 <lwip_htons>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	b21b      	sxth	r3, r3
 800f5a4:	4323      	orrs	r3, r4
 800f5a6:	b21a      	sxth	r2, r3
 800f5a8:	4b57      	ldr	r3, [pc, #348]	; (800f708 <tcp_receive+0x88c>)
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	b292      	uxth	r2, r2
 800f5ae:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5b4:	4b54      	ldr	r3, [pc, #336]	; (800f708 <tcp_receive+0x88c>)
 800f5b6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f5b8:	4b53      	ldr	r3, [pc, #332]	; (800f708 <tcp_receive+0x88c>)
 800f5ba:	68db      	ldr	r3, [r3, #12]
 800f5bc:	899b      	ldrh	r3, [r3, #12]
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7fa ff6d 	bl	800a4a0 <lwip_htons>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	f003 0302 	and.w	r3, r3, #2
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d005      	beq.n	800f5de <tcp_receive+0x762>
            inseg.len -= 1;
 800f5d2:	4b4d      	ldr	r3, [pc, #308]	; (800f708 <tcp_receive+0x88c>)
 800f5d4:	891b      	ldrh	r3, [r3, #8]
 800f5d6:	3b01      	subs	r3, #1
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	4b4b      	ldr	r3, [pc, #300]	; (800f708 <tcp_receive+0x88c>)
 800f5dc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f5de:	4b4a      	ldr	r3, [pc, #296]	; (800f708 <tcp_receive+0x88c>)
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	4a49      	ldr	r2, [pc, #292]	; (800f708 <tcp_receive+0x88c>)
 800f5e4:	8912      	ldrh	r2, [r2, #8]
 800f5e6:	4611      	mov	r1, r2
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7fc f9c5 	bl	800b978 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f5ee:	4b46      	ldr	r3, [pc, #280]	; (800f708 <tcp_receive+0x88c>)
 800f5f0:	891c      	ldrh	r4, [r3, #8]
 800f5f2:	4b45      	ldr	r3, [pc, #276]	; (800f708 <tcp_receive+0x88c>)
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	899b      	ldrh	r3, [r3, #12]
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7fa ff50 	bl	800a4a0 <lwip_htons>
 800f600:	4603      	mov	r3, r0
 800f602:	b2db      	uxtb	r3, r3
 800f604:	f003 0303 	and.w	r3, r3, #3
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d001      	beq.n	800f610 <tcp_receive+0x794>
 800f60c:	2301      	movs	r3, #1
 800f60e:	e000      	b.n	800f612 <tcp_receive+0x796>
 800f610:	2300      	movs	r3, #0
 800f612:	4423      	add	r3, r4
 800f614:	b29a      	uxth	r2, r3
 800f616:	4b3d      	ldr	r3, [pc, #244]	; (800f70c <tcp_receive+0x890>)
 800f618:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f61a:	4b3c      	ldr	r3, [pc, #240]	; (800f70c <tcp_receive+0x890>)
 800f61c:	881b      	ldrh	r3, [r3, #0]
 800f61e:	461a      	mov	r2, r3
 800f620:	4b38      	ldr	r3, [pc, #224]	; (800f704 <tcp_receive+0x888>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	441a      	add	r2, r3
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f62a:	6879      	ldr	r1, [r7, #4]
 800f62c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f62e:	440b      	add	r3, r1
 800f630:	429a      	cmp	r2, r3
 800f632:	d006      	beq.n	800f642 <tcp_receive+0x7c6>
 800f634:	4b36      	ldr	r3, [pc, #216]	; (800f710 <tcp_receive+0x894>)
 800f636:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f63a:	4936      	ldr	r1, [pc, #216]	; (800f714 <tcp_receive+0x898>)
 800f63c:	4836      	ldr	r0, [pc, #216]	; (800f718 <tcp_receive+0x89c>)
 800f63e:	f005 fc39 	bl	8014eb4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f646:	2b00      	cmp	r3, #0
 800f648:	f000 80e7 	beq.w	800f81a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f64c:	4b2e      	ldr	r3, [pc, #184]	; (800f708 <tcp_receive+0x88c>)
 800f64e:	68db      	ldr	r3, [r3, #12]
 800f650:	899b      	ldrh	r3, [r3, #12]
 800f652:	b29b      	uxth	r3, r3
 800f654:	4618      	mov	r0, r3
 800f656:	f7fa ff23 	bl	800a4a0 <lwip_htons>
 800f65a:	4603      	mov	r3, r0
 800f65c:	b2db      	uxtb	r3, r3
 800f65e:	f003 0301 	and.w	r3, r3, #1
 800f662:	2b00      	cmp	r3, #0
 800f664:	d010      	beq.n	800f688 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f666:	e00a      	b.n	800f67e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f66c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f672:	681a      	ldr	r2, [r3, #0]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f678:	68f8      	ldr	r0, [r7, #12]
 800f67a:	f7fd fd92 	bl	800d1a2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f682:	2b00      	cmp	r3, #0
 800f684:	d1f0      	bne.n	800f668 <tcp_receive+0x7ec>
 800f686:	e0c8      	b.n	800f81a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f68c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f68e:	e052      	b.n	800f736 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f692:	68db      	ldr	r3, [r3, #12]
 800f694:	899b      	ldrh	r3, [r3, #12]
 800f696:	b29b      	uxth	r3, r3
 800f698:	4618      	mov	r0, r3
 800f69a:	f7fa ff01 	bl	800a4a0 <lwip_htons>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	f003 0301 	and.w	r3, r3, #1
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d03d      	beq.n	800f726 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f6aa:	4b17      	ldr	r3, [pc, #92]	; (800f708 <tcp_receive+0x88c>)
 800f6ac:	68db      	ldr	r3, [r3, #12]
 800f6ae:	899b      	ldrh	r3, [r3, #12]
 800f6b0:	b29b      	uxth	r3, r3
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7fa fef4 	bl	800a4a0 <lwip_htons>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d130      	bne.n	800f726 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f6c4:	4b10      	ldr	r3, [pc, #64]	; (800f708 <tcp_receive+0x88c>)
 800f6c6:	68db      	ldr	r3, [r3, #12]
 800f6c8:	899b      	ldrh	r3, [r3, #12]
 800f6ca:	b29c      	uxth	r4, r3
 800f6cc:	2001      	movs	r0, #1
 800f6ce:	f7fa fee7 	bl	800a4a0 <lwip_htons>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	4b0c      	ldr	r3, [pc, #48]	; (800f708 <tcp_receive+0x88c>)
 800f6d8:	68db      	ldr	r3, [r3, #12]
 800f6da:	4322      	orrs	r2, r4
 800f6dc:	b292      	uxth	r2, r2
 800f6de:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f6e0:	4b09      	ldr	r3, [pc, #36]	; (800f708 <tcp_receive+0x88c>)
 800f6e2:	891c      	ldrh	r4, [r3, #8]
 800f6e4:	4b08      	ldr	r3, [pc, #32]	; (800f708 <tcp_receive+0x88c>)
 800f6e6:	68db      	ldr	r3, [r3, #12]
 800f6e8:	899b      	ldrh	r3, [r3, #12]
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7fa fed7 	bl	800a4a0 <lwip_htons>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	f003 0303 	and.w	r3, r3, #3
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d00e      	beq.n	800f71c <tcp_receive+0x8a0>
 800f6fe:	2301      	movs	r3, #1
 800f700:	e00d      	b.n	800f71e <tcp_receive+0x8a2>
 800f702:	bf00      	nop
 800f704:	20017b00 	.word	0x20017b00
 800f708:	20017ae0 	.word	0x20017ae0
 800f70c:	20017b0a 	.word	0x20017b0a
 800f710:	08017ee4 	.word	0x08017ee4
 800f714:	0801828c 	.word	0x0801828c
 800f718:	08017f30 	.word	0x08017f30
 800f71c:	2300      	movs	r3, #0
 800f71e:	4423      	add	r3, r4
 800f720:	b29a      	uxth	r2, r3
 800f722:	4b98      	ldr	r3, [pc, #608]	; (800f984 <tcp_receive+0xb08>)
 800f724:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f728:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f730:	6938      	ldr	r0, [r7, #16]
 800f732:	f7fd fd36 	bl	800d1a2 <tcp_seg_free>
            while (next &&
 800f736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d00e      	beq.n	800f75a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f73c:	4b91      	ldr	r3, [pc, #580]	; (800f984 <tcp_receive+0xb08>)
 800f73e:	881b      	ldrh	r3, [r3, #0]
 800f740:	461a      	mov	r2, r3
 800f742:	4b91      	ldr	r3, [pc, #580]	; (800f988 <tcp_receive+0xb0c>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	441a      	add	r2, r3
 800f748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f74a:	68db      	ldr	r3, [r3, #12]
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f750:	8909      	ldrh	r1, [r1, #8]
 800f752:	440b      	add	r3, r1
 800f754:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f756:	2b00      	cmp	r3, #0
 800f758:	da9a      	bge.n	800f690 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d059      	beq.n	800f814 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800f760:	4b88      	ldr	r3, [pc, #544]	; (800f984 <tcp_receive+0xb08>)
 800f762:	881b      	ldrh	r3, [r3, #0]
 800f764:	461a      	mov	r2, r3
 800f766:	4b88      	ldr	r3, [pc, #544]	; (800f988 <tcp_receive+0xb0c>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	441a      	add	r2, r3
 800f76c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f76e:	68db      	ldr	r3, [r3, #12]
 800f770:	685b      	ldr	r3, [r3, #4]
 800f772:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f774:	2b00      	cmp	r3, #0
 800f776:	dd4d      	ble.n	800f814 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	b29a      	uxth	r2, r3
 800f780:	4b81      	ldr	r3, [pc, #516]	; (800f988 <tcp_receive+0xb0c>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	b29b      	uxth	r3, r3
 800f786:	1ad3      	subs	r3, r2, r3
 800f788:	b29a      	uxth	r2, r3
 800f78a:	4b80      	ldr	r3, [pc, #512]	; (800f98c <tcp_receive+0xb10>)
 800f78c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f78e:	4b7f      	ldr	r3, [pc, #508]	; (800f98c <tcp_receive+0xb10>)
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	899b      	ldrh	r3, [r3, #12]
 800f794:	b29b      	uxth	r3, r3
 800f796:	4618      	mov	r0, r3
 800f798:	f7fa fe82 	bl	800a4a0 <lwip_htons>
 800f79c:	4603      	mov	r3, r0
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	f003 0302 	and.w	r3, r3, #2
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d005      	beq.n	800f7b4 <tcp_receive+0x938>
                inseg.len -= 1;
 800f7a8:	4b78      	ldr	r3, [pc, #480]	; (800f98c <tcp_receive+0xb10>)
 800f7aa:	891b      	ldrh	r3, [r3, #8]
 800f7ac:	3b01      	subs	r3, #1
 800f7ae:	b29a      	uxth	r2, r3
 800f7b0:	4b76      	ldr	r3, [pc, #472]	; (800f98c <tcp_receive+0xb10>)
 800f7b2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f7b4:	4b75      	ldr	r3, [pc, #468]	; (800f98c <tcp_receive+0xb10>)
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	4a74      	ldr	r2, [pc, #464]	; (800f98c <tcp_receive+0xb10>)
 800f7ba:	8912      	ldrh	r2, [r2, #8]
 800f7bc:	4611      	mov	r1, r2
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7fc f8da 	bl	800b978 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f7c4:	4b71      	ldr	r3, [pc, #452]	; (800f98c <tcp_receive+0xb10>)
 800f7c6:	891c      	ldrh	r4, [r3, #8]
 800f7c8:	4b70      	ldr	r3, [pc, #448]	; (800f98c <tcp_receive+0xb10>)
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	899b      	ldrh	r3, [r3, #12]
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7fa fe65 	bl	800a4a0 <lwip_htons>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	f003 0303 	and.w	r3, r3, #3
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d001      	beq.n	800f7e6 <tcp_receive+0x96a>
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	e000      	b.n	800f7e8 <tcp_receive+0x96c>
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	4423      	add	r3, r4
 800f7ea:	b29a      	uxth	r2, r3
 800f7ec:	4b65      	ldr	r3, [pc, #404]	; (800f984 <tcp_receive+0xb08>)
 800f7ee:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f7f0:	4b64      	ldr	r3, [pc, #400]	; (800f984 <tcp_receive+0xb08>)
 800f7f2:	881b      	ldrh	r3, [r3, #0]
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	4b64      	ldr	r3, [pc, #400]	; (800f988 <tcp_receive+0xb0c>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	441a      	add	r2, r3
 800f7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7fe:	68db      	ldr	r3, [r3, #12]
 800f800:	685b      	ldr	r3, [r3, #4]
 800f802:	429a      	cmp	r2, r3
 800f804:	d006      	beq.n	800f814 <tcp_receive+0x998>
 800f806:	4b62      	ldr	r3, [pc, #392]	; (800f990 <tcp_receive+0xb14>)
 800f808:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f80c:	4961      	ldr	r1, [pc, #388]	; (800f994 <tcp_receive+0xb18>)
 800f80e:	4862      	ldr	r0, [pc, #392]	; (800f998 <tcp_receive+0xb1c>)
 800f810:	f005 fb50 	bl	8014eb4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f818:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f81a:	4b5a      	ldr	r3, [pc, #360]	; (800f984 <tcp_receive+0xb08>)
 800f81c:	881b      	ldrh	r3, [r3, #0]
 800f81e:	461a      	mov	r2, r3
 800f820:	4b59      	ldr	r3, [pc, #356]	; (800f988 <tcp_receive+0xb0c>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	441a      	add	r2, r3
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f82e:	4b55      	ldr	r3, [pc, #340]	; (800f984 <tcp_receive+0xb08>)
 800f830:	881b      	ldrh	r3, [r3, #0]
 800f832:	429a      	cmp	r2, r3
 800f834:	d206      	bcs.n	800f844 <tcp_receive+0x9c8>
 800f836:	4b56      	ldr	r3, [pc, #344]	; (800f990 <tcp_receive+0xb14>)
 800f838:	f240 6207 	movw	r2, #1543	; 0x607
 800f83c:	4957      	ldr	r1, [pc, #348]	; (800f99c <tcp_receive+0xb20>)
 800f83e:	4856      	ldr	r0, [pc, #344]	; (800f998 <tcp_receive+0xb1c>)
 800f840:	f005 fb38 	bl	8014eb4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f848:	4b4e      	ldr	r3, [pc, #312]	; (800f984 <tcp_receive+0xb08>)
 800f84a:	881b      	ldrh	r3, [r3, #0]
 800f84c:	1ad3      	subs	r3, r2, r3
 800f84e:	b29a      	uxth	r2, r3
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f7fc ffc5 	bl	800c7e4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f85a:	4b4c      	ldr	r3, [pc, #304]	; (800f98c <tcp_receive+0xb10>)
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	891b      	ldrh	r3, [r3, #8]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d006      	beq.n	800f872 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800f864:	4b49      	ldr	r3, [pc, #292]	; (800f98c <tcp_receive+0xb10>)
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	4a4d      	ldr	r2, [pc, #308]	; (800f9a0 <tcp_receive+0xb24>)
 800f86a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f86c:	4b47      	ldr	r3, [pc, #284]	; (800f98c <tcp_receive+0xb10>)
 800f86e:	2200      	movs	r2, #0
 800f870:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f872:	4b46      	ldr	r3, [pc, #280]	; (800f98c <tcp_receive+0xb10>)
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	899b      	ldrh	r3, [r3, #12]
 800f878:	b29b      	uxth	r3, r3
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7fa fe10 	bl	800a4a0 <lwip_htons>
 800f880:	4603      	mov	r3, r0
 800f882:	b2db      	uxtb	r3, r3
 800f884:	f003 0301 	and.w	r3, r3, #1
 800f888:	2b00      	cmp	r3, #0
 800f88a:	f000 80b8 	beq.w	800f9fe <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f88e:	4b45      	ldr	r3, [pc, #276]	; (800f9a4 <tcp_receive+0xb28>)
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	f043 0320 	orr.w	r3, r3, #32
 800f896:	b2da      	uxtb	r2, r3
 800f898:	4b42      	ldr	r3, [pc, #264]	; (800f9a4 <tcp_receive+0xb28>)
 800f89a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f89c:	e0af      	b.n	800f9fe <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8a2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8a8:	68db      	ldr	r3, [r3, #12]
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	4a36      	ldr	r2, [pc, #216]	; (800f988 <tcp_receive+0xb0c>)
 800f8ae:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	891b      	ldrh	r3, [r3, #8]
 800f8b4:	461c      	mov	r4, r3
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	899b      	ldrh	r3, [r3, #12]
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7fa fdee 	bl	800a4a0 <lwip_htons>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	f003 0303 	and.w	r3, r3, #3
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d001      	beq.n	800f8d4 <tcp_receive+0xa58>
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	e000      	b.n	800f8d6 <tcp_receive+0xa5a>
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	191a      	adds	r2, r3, r4
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8dc:	441a      	add	r2, r3
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8e6:	461c      	mov	r4, r3
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	891b      	ldrh	r3, [r3, #8]
 800f8ec:	461d      	mov	r5, r3
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	68db      	ldr	r3, [r3, #12]
 800f8f2:	899b      	ldrh	r3, [r3, #12]
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7fa fdd2 	bl	800a4a0 <lwip_htons>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	f003 0303 	and.w	r3, r3, #3
 800f904:	2b00      	cmp	r3, #0
 800f906:	d001      	beq.n	800f90c <tcp_receive+0xa90>
 800f908:	2301      	movs	r3, #1
 800f90a:	e000      	b.n	800f90e <tcp_receive+0xa92>
 800f90c:	2300      	movs	r3, #0
 800f90e:	442b      	add	r3, r5
 800f910:	429c      	cmp	r4, r3
 800f912:	d206      	bcs.n	800f922 <tcp_receive+0xaa6>
 800f914:	4b1e      	ldr	r3, [pc, #120]	; (800f990 <tcp_receive+0xb14>)
 800f916:	f240 622b 	movw	r2, #1579	; 0x62b
 800f91a:	4923      	ldr	r1, [pc, #140]	; (800f9a8 <tcp_receive+0xb2c>)
 800f91c:	481e      	ldr	r0, [pc, #120]	; (800f998 <tcp_receive+0xb1c>)
 800f91e:	f005 fac9 	bl	8014eb4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	891b      	ldrh	r3, [r3, #8]
 800f926:	461c      	mov	r4, r3
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	899b      	ldrh	r3, [r3, #12]
 800f92e:	b29b      	uxth	r3, r3
 800f930:	4618      	mov	r0, r3
 800f932:	f7fa fdb5 	bl	800a4a0 <lwip_htons>
 800f936:	4603      	mov	r3, r0
 800f938:	b2db      	uxtb	r3, r3
 800f93a:	f003 0303 	and.w	r3, r3, #3
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d001      	beq.n	800f946 <tcp_receive+0xaca>
 800f942:	2301      	movs	r3, #1
 800f944:	e000      	b.n	800f948 <tcp_receive+0xacc>
 800f946:	2300      	movs	r3, #0
 800f948:	1919      	adds	r1, r3, r4
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f94e:	b28b      	uxth	r3, r1
 800f950:	1ad3      	subs	r3, r2, r3
 800f952:	b29a      	uxth	r2, r3
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f7fc ff43 	bl	800c7e4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	685b      	ldr	r3, [r3, #4]
 800f962:	891b      	ldrh	r3, [r3, #8]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d028      	beq.n	800f9ba <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f968:	4b0d      	ldr	r3, [pc, #52]	; (800f9a0 <tcp_receive+0xb24>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d01d      	beq.n	800f9ac <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800f970:	4b0b      	ldr	r3, [pc, #44]	; (800f9a0 <tcp_receive+0xb24>)
 800f972:	681a      	ldr	r2, [r3, #0]
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	4619      	mov	r1, r3
 800f97a:	4610      	mov	r0, r2
 800f97c:	f7fc fa50 	bl	800be20 <pbuf_cat>
 800f980:	e018      	b.n	800f9b4 <tcp_receive+0xb38>
 800f982:	bf00      	nop
 800f984:	20017b0a 	.word	0x20017b0a
 800f988:	20017b00 	.word	0x20017b00
 800f98c:	20017ae0 	.word	0x20017ae0
 800f990:	08017ee4 	.word	0x08017ee4
 800f994:	080182c4 	.word	0x080182c4
 800f998:	08017f30 	.word	0x08017f30
 800f99c:	08018300 	.word	0x08018300
 800f9a0:	20017b10 	.word	0x20017b10
 800f9a4:	20017b0d 	.word	0x20017b0d
 800f9a8:	08018320 	.word	0x08018320
            } else {
              recv_data = cseg->p;
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	685b      	ldr	r3, [r3, #4]
 800f9b0:	4a70      	ldr	r2, [pc, #448]	; (800fb74 <tcp_receive+0xcf8>)
 800f9b2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	68db      	ldr	r3, [r3, #12]
 800f9be:	899b      	ldrh	r3, [r3, #12]
 800f9c0:	b29b      	uxth	r3, r3
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7fa fd6c 	bl	800a4a0 <lwip_htons>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	b2db      	uxtb	r3, r3
 800f9cc:	f003 0301 	and.w	r3, r3, #1
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d00d      	beq.n	800f9f0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f9d4:	4b68      	ldr	r3, [pc, #416]	; (800fb78 <tcp_receive+0xcfc>)
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	f043 0320 	orr.w	r3, r3, #32
 800f9dc:	b2da      	uxtb	r2, r3
 800f9de:	4b66      	ldr	r3, [pc, #408]	; (800fb78 <tcp_receive+0xcfc>)
 800f9e0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	7d1b      	ldrb	r3, [r3, #20]
 800f9e6:	2b04      	cmp	r3, #4
 800f9e8:	d102      	bne.n	800f9f0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2207      	movs	r2, #7
 800f9ee:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	681a      	ldr	r2, [r3, #0]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f9f8:	68b8      	ldr	r0, [r7, #8]
 800f9fa:	f7fd fbd2 	bl	800d1a2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d008      	beq.n	800fa18 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	685a      	ldr	r2, [r3, #4]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fa12:	429a      	cmp	r2, r3
 800fa14:	f43f af43 	beq.w	800f89e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	8b5b      	ldrh	r3, [r3, #26]
 800fa1c:	f003 0301 	and.w	r3, r3, #1
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d00e      	beq.n	800fa42 <tcp_receive+0xbc6>
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	8b5b      	ldrh	r3, [r3, #26]
 800fa28:	f023 0301 	bic.w	r3, r3, #1
 800fa2c:	b29a      	uxth	r2, r3
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	835a      	strh	r2, [r3, #26]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	8b5b      	ldrh	r3, [r3, #26]
 800fa36:	f043 0302 	orr.w	r3, r3, #2
 800fa3a:	b29a      	uxth	r2, r3
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fa40:	e188      	b.n	800fd54 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	8b5b      	ldrh	r3, [r3, #26]
 800fa46:	f043 0301 	orr.w	r3, r3, #1
 800fa4a:	b29a      	uxth	r2, r3
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fa50:	e180      	b.n	800fd54 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d106      	bne.n	800fa68 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fa5a:	4848      	ldr	r0, [pc, #288]	; (800fb7c <tcp_receive+0xd00>)
 800fa5c:	f7fd fbba 	bl	800d1d4 <tcp_seg_copy>
 800fa60:	4602      	mov	r2, r0
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	675a      	str	r2, [r3, #116]	; 0x74
 800fa66:	e16d      	b.n	800fd44 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa70:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa72:	e157      	b.n	800fd24 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800fa74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	685a      	ldr	r2, [r3, #4]
 800fa7a:	4b41      	ldr	r3, [pc, #260]	; (800fb80 <tcp_receive+0xd04>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d11d      	bne.n	800fabe <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fa82:	4b3e      	ldr	r3, [pc, #248]	; (800fb7c <tcp_receive+0xd00>)
 800fa84:	891a      	ldrh	r2, [r3, #8]
 800fa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa88:	891b      	ldrh	r3, [r3, #8]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	f240 814f 	bls.w	800fd2e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fa90:	483a      	ldr	r0, [pc, #232]	; (800fb7c <tcp_receive+0xd00>)
 800fa92:	f7fd fb9f 	bl	800d1d4 <tcp_seg_copy>
 800fa96:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	f000 8149 	beq.w	800fd32 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800faa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d003      	beq.n	800faae <tcp_receive+0xc32>
                    prev->next = cseg;
 800faa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faa8:	697a      	ldr	r2, [r7, #20]
 800faaa:	601a      	str	r2, [r3, #0]
 800faac:	e002      	b.n	800fab4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	697a      	ldr	r2, [r7, #20]
 800fab2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fab4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fab6:	6978      	ldr	r0, [r7, #20]
 800fab8:	f7ff f8dc 	bl	800ec74 <tcp_oos_insert_segment>
                }
                break;
 800fabc:	e139      	b.n	800fd32 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d117      	bne.n	800faf4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fac4:	4b2e      	ldr	r3, [pc, #184]	; (800fb80 <tcp_receive+0xd04>)
 800fac6:	681a      	ldr	r2, [r3, #0]
 800fac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faca:	68db      	ldr	r3, [r3, #12]
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	1ad3      	subs	r3, r2, r3
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	da57      	bge.n	800fb84 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fad4:	4829      	ldr	r0, [pc, #164]	; (800fb7c <tcp_receive+0xd00>)
 800fad6:	f7fd fb7d 	bl	800d1d4 <tcp_seg_copy>
 800fada:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fadc:	69bb      	ldr	r3, [r7, #24]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	f000 8129 	beq.w	800fd36 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	69ba      	ldr	r2, [r7, #24]
 800fae8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800faea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800faec:	69b8      	ldr	r0, [r7, #24]
 800faee:	f7ff f8c1 	bl	800ec74 <tcp_oos_insert_segment>
                  }
                  break;
 800faf2:	e120      	b.n	800fd36 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800faf4:	4b22      	ldr	r3, [pc, #136]	; (800fb80 <tcp_receive+0xd04>)
 800faf6:	681a      	ldr	r2, [r3, #0]
 800faf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fafa:	68db      	ldr	r3, [r3, #12]
 800fafc:	685b      	ldr	r3, [r3, #4]
 800fafe:	1ad3      	subs	r3, r2, r3
 800fb00:	3b01      	subs	r3, #1
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	db3e      	blt.n	800fb84 <tcp_receive+0xd08>
 800fb06:	4b1e      	ldr	r3, [pc, #120]	; (800fb80 <tcp_receive+0xd04>)
 800fb08:	681a      	ldr	r2, [r3, #0]
 800fb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0c:	68db      	ldr	r3, [r3, #12]
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	3301      	adds	r3, #1
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	dc35      	bgt.n	800fb84 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fb18:	4818      	ldr	r0, [pc, #96]	; (800fb7c <tcp_receive+0xd00>)
 800fb1a:	f7fd fb5b 	bl	800d1d4 <tcp_seg_copy>
 800fb1e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fb20:	69fb      	ldr	r3, [r7, #28]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	f000 8109 	beq.w	800fd3a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb2a:	68db      	ldr	r3, [r3, #12]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb30:	8912      	ldrh	r2, [r2, #8]
 800fb32:	441a      	add	r2, r3
 800fb34:	4b12      	ldr	r3, [pc, #72]	; (800fb80 <tcp_receive+0xd04>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	1ad3      	subs	r3, r2, r3
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	dd12      	ble.n	800fb64 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fb3e:	4b10      	ldr	r3, [pc, #64]	; (800fb80 <tcp_receive+0xd04>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	b29a      	uxth	r2, r3
 800fb44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb46:	68db      	ldr	r3, [r3, #12]
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	b29b      	uxth	r3, r3
 800fb4c:	1ad3      	subs	r3, r2, r3
 800fb4e:	b29a      	uxth	r2, r3
 800fb50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb52:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fb54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb56:	685a      	ldr	r2, [r3, #4]
 800fb58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb5a:	891b      	ldrh	r3, [r3, #8]
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	4610      	mov	r0, r2
 800fb60:	f7fb ff0a 	bl	800b978 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fb64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb66:	69fa      	ldr	r2, [r7, #28]
 800fb68:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fb6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb6c:	69f8      	ldr	r0, [r7, #28]
 800fb6e:	f7ff f881 	bl	800ec74 <tcp_oos_insert_segment>
                  }
                  break;
 800fb72:	e0e2      	b.n	800fd3a <tcp_receive+0xebe>
 800fb74:	20017b10 	.word	0x20017b10
 800fb78:	20017b0d 	.word	0x20017b0d
 800fb7c:	20017ae0 	.word	0x20017ae0
 800fb80:	20017b00 	.word	0x20017b00
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb86:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f040 80c6 	bne.w	800fd1e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fb92:	4b80      	ldr	r3, [pc, #512]	; (800fd94 <tcp_receive+0xf18>)
 800fb94:	681a      	ldr	r2, [r3, #0]
 800fb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb98:	68db      	ldr	r3, [r3, #12]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	f340 80bd 	ble.w	800fd1e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	899b      	ldrh	r3, [r3, #12]
 800fbaa:	b29b      	uxth	r3, r3
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7fa fc77 	bl	800a4a0 <lwip_htons>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	f003 0301 	and.w	r3, r3, #1
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f040 80bf 	bne.w	800fd3e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fbc0:	4875      	ldr	r0, [pc, #468]	; (800fd98 <tcp_receive+0xf1c>)
 800fbc2:	f7fd fb07 	bl	800d1d4 <tcp_seg_copy>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbca:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	f000 80b6 	beq.w	800fd42 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd8:	68db      	ldr	r3, [r3, #12]
 800fbda:	685b      	ldr	r3, [r3, #4]
 800fbdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbde:	8912      	ldrh	r2, [r2, #8]
 800fbe0:	441a      	add	r2, r3
 800fbe2:	4b6c      	ldr	r3, [pc, #432]	; (800fd94 <tcp_receive+0xf18>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	1ad3      	subs	r3, r2, r3
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	dd12      	ble.n	800fc12 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fbec:	4b69      	ldr	r3, [pc, #420]	; (800fd94 <tcp_receive+0xf18>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	b29a      	uxth	r2, r3
 800fbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf4:	68db      	ldr	r3, [r3, #12]
 800fbf6:	685b      	ldr	r3, [r3, #4]
 800fbf8:	b29b      	uxth	r3, r3
 800fbfa:	1ad3      	subs	r3, r2, r3
 800fbfc:	b29a      	uxth	r2, r3
 800fbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc00:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc04:	685a      	ldr	r2, [r3, #4]
 800fc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc08:	891b      	ldrh	r3, [r3, #8]
 800fc0a:	4619      	mov	r1, r3
 800fc0c:	4610      	mov	r0, r2
 800fc0e:	f7fb feb3 	bl	800b978 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fc12:	4b62      	ldr	r3, [pc, #392]	; (800fd9c <tcp_receive+0xf20>)
 800fc14:	881b      	ldrh	r3, [r3, #0]
 800fc16:	461a      	mov	r2, r3
 800fc18:	4b5e      	ldr	r3, [pc, #376]	; (800fd94 <tcp_receive+0xf18>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	441a      	add	r2, r3
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc22:	6879      	ldr	r1, [r7, #4]
 800fc24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fc26:	440b      	add	r3, r1
 800fc28:	1ad3      	subs	r3, r2, r3
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	f340 8089 	ble.w	800fd42 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	68db      	ldr	r3, [r3, #12]
 800fc36:	899b      	ldrh	r3, [r3, #12]
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7fa fc30 	bl	800a4a0 <lwip_htons>
 800fc40:	4603      	mov	r3, r0
 800fc42:	b2db      	uxtb	r3, r3
 800fc44:	f003 0301 	and.w	r3, r3, #1
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d022      	beq.n	800fc92 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	68db      	ldr	r3, [r3, #12]
 800fc52:	899b      	ldrh	r3, [r3, #12]
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	b21b      	sxth	r3, r3
 800fc58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fc5c:	b21c      	sxth	r4, r3
 800fc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	68db      	ldr	r3, [r3, #12]
 800fc64:	899b      	ldrh	r3, [r3, #12]
 800fc66:	b29b      	uxth	r3, r3
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f7fa fc19 	bl	800a4a0 <lwip_htons>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fc78:	b29b      	uxth	r3, r3
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7fa fc10 	bl	800a4a0 <lwip_htons>
 800fc80:	4603      	mov	r3, r0
 800fc82:	b21b      	sxth	r3, r3
 800fc84:	4323      	orrs	r3, r4
 800fc86:	b21a      	sxth	r2, r3
 800fc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	68db      	ldr	r3, [r3, #12]
 800fc8e:	b292      	uxth	r2, r2
 800fc90:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc96:	b29a      	uxth	r2, r3
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc9c:	4413      	add	r3, r2
 800fc9e:	b299      	uxth	r1, r3
 800fca0:	4b3c      	ldr	r3, [pc, #240]	; (800fd94 <tcp_receive+0xf18>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	b29a      	uxth	r2, r3
 800fca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	1a8a      	subs	r2, r1, r2
 800fcac:	b292      	uxth	r2, r2
 800fcae:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	685a      	ldr	r2, [r3, #4]
 800fcb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	891b      	ldrh	r3, [r3, #8]
 800fcbc:	4619      	mov	r1, r3
 800fcbe:	4610      	mov	r0, r2
 800fcc0:	f7fb fe5a 	bl	800b978 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	891c      	ldrh	r4, [r3, #8]
 800fcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	899b      	ldrh	r3, [r3, #12]
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7fa fbe3 	bl	800a4a0 <lwip_htons>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	b2db      	uxtb	r3, r3
 800fcde:	f003 0303 	and.w	r3, r3, #3
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d001      	beq.n	800fcea <tcp_receive+0xe6e>
 800fce6:	2301      	movs	r3, #1
 800fce8:	e000      	b.n	800fcec <tcp_receive+0xe70>
 800fcea:	2300      	movs	r3, #0
 800fcec:	4423      	add	r3, r4
 800fcee:	b29a      	uxth	r2, r3
 800fcf0:	4b2a      	ldr	r3, [pc, #168]	; (800fd9c <tcp_receive+0xf20>)
 800fcf2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fcf4:	4b29      	ldr	r3, [pc, #164]	; (800fd9c <tcp_receive+0xf20>)
 800fcf6:	881b      	ldrh	r3, [r3, #0]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	4b26      	ldr	r3, [pc, #152]	; (800fd94 <tcp_receive+0xf18>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	441a      	add	r2, r3
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd04:	6879      	ldr	r1, [r7, #4]
 800fd06:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd08:	440b      	add	r3, r1
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d019      	beq.n	800fd42 <tcp_receive+0xec6>
 800fd0e:	4b24      	ldr	r3, [pc, #144]	; (800fda0 <tcp_receive+0xf24>)
 800fd10:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fd14:	4923      	ldr	r1, [pc, #140]	; (800fda4 <tcp_receive+0xf28>)
 800fd16:	4824      	ldr	r0, [pc, #144]	; (800fda8 <tcp_receive+0xf2c>)
 800fd18:	f005 f8cc 	bl	8014eb4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fd1c:	e011      	b.n	800fd42 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	f47f aea4 	bne.w	800fa74 <tcp_receive+0xbf8>
 800fd2c:	e00a      	b.n	800fd44 <tcp_receive+0xec8>
                break;
 800fd2e:	bf00      	nop
 800fd30:	e008      	b.n	800fd44 <tcp_receive+0xec8>
                break;
 800fd32:	bf00      	nop
 800fd34:	e006      	b.n	800fd44 <tcp_receive+0xec8>
                  break;
 800fd36:	bf00      	nop
 800fd38:	e004      	b.n	800fd44 <tcp_receive+0xec8>
                  break;
 800fd3a:	bf00      	nop
 800fd3c:	e002      	b.n	800fd44 <tcp_receive+0xec8>
                  break;
 800fd3e:	bf00      	nop
 800fd40:	e000      	b.n	800fd44 <tcp_receive+0xec8>
                break;
 800fd42:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f001 fa33 	bl	80111b0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fd4a:	e003      	b.n	800fd54 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f001 fa2f 	bl	80111b0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fd52:	e01a      	b.n	800fd8a <tcp_receive+0xf0e>
 800fd54:	e019      	b.n	800fd8a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fd56:	4b0f      	ldr	r3, [pc, #60]	; (800fd94 <tcp_receive+0xf18>)
 800fd58:	681a      	ldr	r2, [r3, #0]
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd5e:	1ad3      	subs	r3, r2, r3
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	db0a      	blt.n	800fd7a <tcp_receive+0xefe>
 800fd64:	4b0b      	ldr	r3, [pc, #44]	; (800fd94 <tcp_receive+0xf18>)
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd6c:	6879      	ldr	r1, [r7, #4]
 800fd6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd70:	440b      	add	r3, r1
 800fd72:	1ad3      	subs	r3, r2, r3
 800fd74:	3301      	adds	r3, #1
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	dd07      	ble.n	800fd8a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	8b5b      	ldrh	r3, [r3, #26]
 800fd7e:	f043 0302 	orr.w	r3, r3, #2
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fd88:	e7ff      	b.n	800fd8a <tcp_receive+0xf0e>
 800fd8a:	bf00      	nop
 800fd8c:	3750      	adds	r7, #80	; 0x50
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bdb0      	pop	{r4, r5, r7, pc}
 800fd92:	bf00      	nop
 800fd94:	20017b00 	.word	0x20017b00
 800fd98:	20017ae0 	.word	0x20017ae0
 800fd9c:	20017b0a 	.word	0x20017b0a
 800fda0:	08017ee4 	.word	0x08017ee4
 800fda4:	0801828c 	.word	0x0801828c
 800fda8:	08017f30 	.word	0x08017f30

0800fdac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fdac:	b480      	push	{r7}
 800fdae:	b083      	sub	sp, #12
 800fdb0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fdb2:	4b15      	ldr	r3, [pc, #84]	; (800fe08 <tcp_get_next_optbyte+0x5c>)
 800fdb4:	881b      	ldrh	r3, [r3, #0]
 800fdb6:	1c5a      	adds	r2, r3, #1
 800fdb8:	b291      	uxth	r1, r2
 800fdba:	4a13      	ldr	r2, [pc, #76]	; (800fe08 <tcp_get_next_optbyte+0x5c>)
 800fdbc:	8011      	strh	r1, [r2, #0]
 800fdbe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fdc0:	4b12      	ldr	r3, [pc, #72]	; (800fe0c <tcp_get_next_optbyte+0x60>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d004      	beq.n	800fdd2 <tcp_get_next_optbyte+0x26>
 800fdc8:	4b11      	ldr	r3, [pc, #68]	; (800fe10 <tcp_get_next_optbyte+0x64>)
 800fdca:	881b      	ldrh	r3, [r3, #0]
 800fdcc:	88fa      	ldrh	r2, [r7, #6]
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d208      	bcs.n	800fde4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fdd2:	4b10      	ldr	r3, [pc, #64]	; (800fe14 <tcp_get_next_optbyte+0x68>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	3314      	adds	r3, #20
 800fdd8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fdda:	88fb      	ldrh	r3, [r7, #6]
 800fddc:	683a      	ldr	r2, [r7, #0]
 800fdde:	4413      	add	r3, r2
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	e00b      	b.n	800fdfc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fde4:	88fb      	ldrh	r3, [r7, #6]
 800fde6:	b2da      	uxtb	r2, r3
 800fde8:	4b09      	ldr	r3, [pc, #36]	; (800fe10 <tcp_get_next_optbyte+0x64>)
 800fdea:	881b      	ldrh	r3, [r3, #0]
 800fdec:	b2db      	uxtb	r3, r3
 800fdee:	1ad3      	subs	r3, r2, r3
 800fdf0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fdf2:	4b06      	ldr	r3, [pc, #24]	; (800fe0c <tcp_get_next_optbyte+0x60>)
 800fdf4:	681a      	ldr	r2, [r3, #0]
 800fdf6:	797b      	ldrb	r3, [r7, #5]
 800fdf8:	4413      	add	r3, r2
 800fdfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	370c      	adds	r7, #12
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr
 800fe08:	20017afc 	.word	0x20017afc
 800fe0c:	20017af8 	.word	0x20017af8
 800fe10:	20017af6 	.word	0x20017af6
 800fe14:	20017af0 	.word	0x20017af0

0800fe18 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b084      	sub	sp, #16
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d106      	bne.n	800fe34 <tcp_parseopt+0x1c>
 800fe26:	4b32      	ldr	r3, [pc, #200]	; (800fef0 <tcp_parseopt+0xd8>)
 800fe28:	f240 727d 	movw	r2, #1917	; 0x77d
 800fe2c:	4931      	ldr	r1, [pc, #196]	; (800fef4 <tcp_parseopt+0xdc>)
 800fe2e:	4832      	ldr	r0, [pc, #200]	; (800fef8 <tcp_parseopt+0xe0>)
 800fe30:	f005 f840 	bl	8014eb4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fe34:	4b31      	ldr	r3, [pc, #196]	; (800fefc <tcp_parseopt+0xe4>)
 800fe36:	881b      	ldrh	r3, [r3, #0]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d055      	beq.n	800fee8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fe3c:	4b30      	ldr	r3, [pc, #192]	; (800ff00 <tcp_parseopt+0xe8>)
 800fe3e:	2200      	movs	r2, #0
 800fe40:	801a      	strh	r2, [r3, #0]
 800fe42:	e045      	b.n	800fed0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fe44:	f7ff ffb2 	bl	800fdac <tcp_get_next_optbyte>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fe4c:	7bfb      	ldrb	r3, [r7, #15]
 800fe4e:	2b02      	cmp	r3, #2
 800fe50:	d006      	beq.n	800fe60 <tcp_parseopt+0x48>
 800fe52:	2b02      	cmp	r3, #2
 800fe54:	dc2b      	bgt.n	800feae <tcp_parseopt+0x96>
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d041      	beq.n	800fede <tcp_parseopt+0xc6>
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	d127      	bne.n	800feae <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fe5e:	e037      	b.n	800fed0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fe60:	f7ff ffa4 	bl	800fdac <tcp_get_next_optbyte>
 800fe64:	4603      	mov	r3, r0
 800fe66:	2b04      	cmp	r3, #4
 800fe68:	d13b      	bne.n	800fee2 <tcp_parseopt+0xca>
 800fe6a:	4b25      	ldr	r3, [pc, #148]	; (800ff00 <tcp_parseopt+0xe8>)
 800fe6c:	881b      	ldrh	r3, [r3, #0]
 800fe6e:	3301      	adds	r3, #1
 800fe70:	4a22      	ldr	r2, [pc, #136]	; (800fefc <tcp_parseopt+0xe4>)
 800fe72:	8812      	ldrh	r2, [r2, #0]
 800fe74:	4293      	cmp	r3, r2
 800fe76:	da34      	bge.n	800fee2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fe78:	f7ff ff98 	bl	800fdac <tcp_get_next_optbyte>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	021b      	lsls	r3, r3, #8
 800fe82:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fe84:	f7ff ff92 	bl	800fdac <tcp_get_next_optbyte>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	b29a      	uxth	r2, r3
 800fe8c:	89bb      	ldrh	r3, [r7, #12]
 800fe8e:	4313      	orrs	r3, r2
 800fe90:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fe92:	89bb      	ldrh	r3, [r7, #12]
 800fe94:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fe98:	d804      	bhi.n	800fea4 <tcp_parseopt+0x8c>
 800fe9a:	89bb      	ldrh	r3, [r7, #12]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d001      	beq.n	800fea4 <tcp_parseopt+0x8c>
 800fea0:	89ba      	ldrh	r2, [r7, #12]
 800fea2:	e001      	b.n	800fea8 <tcp_parseopt+0x90>
 800fea4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800feac:	e010      	b.n	800fed0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800feae:	f7ff ff7d 	bl	800fdac <tcp_get_next_optbyte>
 800feb2:	4603      	mov	r3, r0
 800feb4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800feb6:	7afb      	ldrb	r3, [r7, #11]
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d914      	bls.n	800fee6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800febc:	7afb      	ldrb	r3, [r7, #11]
 800febe:	b29a      	uxth	r2, r3
 800fec0:	4b0f      	ldr	r3, [pc, #60]	; (800ff00 <tcp_parseopt+0xe8>)
 800fec2:	881b      	ldrh	r3, [r3, #0]
 800fec4:	4413      	add	r3, r2
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	3b02      	subs	r3, #2
 800feca:	b29a      	uxth	r2, r3
 800fecc:	4b0c      	ldr	r3, [pc, #48]	; (800ff00 <tcp_parseopt+0xe8>)
 800fece:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fed0:	4b0b      	ldr	r3, [pc, #44]	; (800ff00 <tcp_parseopt+0xe8>)
 800fed2:	881a      	ldrh	r2, [r3, #0]
 800fed4:	4b09      	ldr	r3, [pc, #36]	; (800fefc <tcp_parseopt+0xe4>)
 800fed6:	881b      	ldrh	r3, [r3, #0]
 800fed8:	429a      	cmp	r2, r3
 800feda:	d3b3      	bcc.n	800fe44 <tcp_parseopt+0x2c>
 800fedc:	e004      	b.n	800fee8 <tcp_parseopt+0xd0>
          return;
 800fede:	bf00      	nop
 800fee0:	e002      	b.n	800fee8 <tcp_parseopt+0xd0>
            return;
 800fee2:	bf00      	nop
 800fee4:	e000      	b.n	800fee8 <tcp_parseopt+0xd0>
            return;
 800fee6:	bf00      	nop
      }
    }
  }
}
 800fee8:	3710      	adds	r7, #16
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
 800feee:	bf00      	nop
 800fef0:	08017ee4 	.word	0x08017ee4
 800fef4:	08018348 	.word	0x08018348
 800fef8:	08017f30 	.word	0x08017f30
 800fefc:	20017af4 	.word	0x20017af4
 800ff00:	20017afc 	.word	0x20017afc

0800ff04 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ff04:	b480      	push	{r7}
 800ff06:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ff08:	4b05      	ldr	r3, [pc, #20]	; (800ff20 <tcp_trigger_input_pcb_close+0x1c>)
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	f043 0310 	orr.w	r3, r3, #16
 800ff10:	b2da      	uxtb	r2, r3
 800ff12:	4b03      	ldr	r3, [pc, #12]	; (800ff20 <tcp_trigger_input_pcb_close+0x1c>)
 800ff14:	701a      	strb	r2, [r3, #0]
}
 800ff16:	bf00      	nop
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr
 800ff20:	20017b0d 	.word	0x20017b0d

0800ff24 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b084      	sub	sp, #16
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	60f8      	str	r0, [r7, #12]
 800ff2c:	60b9      	str	r1, [r7, #8]
 800ff2e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00a      	beq.n	800ff4c <tcp_route+0x28>
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	7a1b      	ldrb	r3, [r3, #8]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d006      	beq.n	800ff4c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	7a1b      	ldrb	r3, [r3, #8]
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7fb fb10 	bl	800b568 <netif_get_by_index>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	e003      	b.n	800ff54 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f003 f99d 	bl	801328c <ip4_route>
 800ff52:	4603      	mov	r3, r0
  }
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	3710      	adds	r7, #16
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}

0800ff5c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ff5c:	b590      	push	{r4, r7, lr}
 800ff5e:	b087      	sub	sp, #28
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	60f8      	str	r0, [r7, #12]
 800ff64:	60b9      	str	r1, [r7, #8]
 800ff66:	603b      	str	r3, [r7, #0]
 800ff68:	4613      	mov	r3, r2
 800ff6a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d105      	bne.n	800ff7e <tcp_create_segment+0x22>
 800ff72:	4b44      	ldr	r3, [pc, #272]	; (8010084 <tcp_create_segment+0x128>)
 800ff74:	22a3      	movs	r2, #163	; 0xa3
 800ff76:	4944      	ldr	r1, [pc, #272]	; (8010088 <tcp_create_segment+0x12c>)
 800ff78:	4844      	ldr	r0, [pc, #272]	; (801008c <tcp_create_segment+0x130>)
 800ff7a:	f004 ff9b 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d105      	bne.n	800ff90 <tcp_create_segment+0x34>
 800ff84:	4b3f      	ldr	r3, [pc, #252]	; (8010084 <tcp_create_segment+0x128>)
 800ff86:	22a4      	movs	r2, #164	; 0xa4
 800ff88:	4941      	ldr	r1, [pc, #260]	; (8010090 <tcp_create_segment+0x134>)
 800ff8a:	4840      	ldr	r0, [pc, #256]	; (801008c <tcp_create_segment+0x130>)
 800ff8c:	f004 ff92 	bl	8014eb4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ff90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ff94:	009b      	lsls	r3, r3, #2
 800ff96:	b2db      	uxtb	r3, r3
 800ff98:	f003 0304 	and.w	r3, r3, #4
 800ff9c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ff9e:	2003      	movs	r0, #3
 800ffa0:	f7fa ff56 	bl	800ae50 <memp_malloc>
 800ffa4:	6138      	str	r0, [r7, #16]
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d104      	bne.n	800ffb6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ffac:	68b8      	ldr	r0, [r7, #8]
 800ffae:	f7fb fe69 	bl	800bc84 <pbuf_free>
    return NULL;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	e061      	b.n	801007a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ffbc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	68ba      	ldr	r2, [r7, #8]
 800ffc8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	891a      	ldrh	r2, [r3, #8]
 800ffce:	7dfb      	ldrb	r3, [r7, #23]
 800ffd0:	b29b      	uxth	r3, r3
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d205      	bcs.n	800ffe2 <tcp_create_segment+0x86>
 800ffd6:	4b2b      	ldr	r3, [pc, #172]	; (8010084 <tcp_create_segment+0x128>)
 800ffd8:	22b0      	movs	r2, #176	; 0xb0
 800ffda:	492e      	ldr	r1, [pc, #184]	; (8010094 <tcp_create_segment+0x138>)
 800ffdc:	482b      	ldr	r0, [pc, #172]	; (801008c <tcp_create_segment+0x130>)
 800ffde:	f004 ff69 	bl	8014eb4 <iprintf>
  seg->len = p->tot_len - optlen;
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	891a      	ldrh	r2, [r3, #8]
 800ffe6:	7dfb      	ldrb	r3, [r7, #23]
 800ffe8:	b29b      	uxth	r3, r3
 800ffea:	1ad3      	subs	r3, r2, r3
 800ffec:	b29a      	uxth	r2, r3
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fff2:	2114      	movs	r1, #20
 800fff4:	68b8      	ldr	r0, [r7, #8]
 800fff6:	f7fb fdaf 	bl	800bb58 <pbuf_add_header>
 800fffa:	4603      	mov	r3, r0
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d004      	beq.n	801000a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010000:	6938      	ldr	r0, [r7, #16]
 8010002:	f7fd f8ce 	bl	800d1a2 <tcp_seg_free>
    return NULL;
 8010006:	2300      	movs	r3, #0
 8010008:	e037      	b.n	801007a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	685a      	ldr	r2, [r3, #4]
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	8ada      	ldrh	r2, [r3, #22]
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	68dc      	ldr	r4, [r3, #12]
 801001c:	4610      	mov	r0, r2
 801001e:	f7fa fa3f 	bl	800a4a0 <lwip_htons>
 8010022:	4603      	mov	r3, r0
 8010024:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	8b1a      	ldrh	r2, [r3, #24]
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	68dc      	ldr	r4, [r3, #12]
 801002e:	4610      	mov	r0, r2
 8010030:	f7fa fa36 	bl	800a4a0 <lwip_htons>
 8010034:	4603      	mov	r3, r0
 8010036:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	68dc      	ldr	r4, [r3, #12]
 801003c:	6838      	ldr	r0, [r7, #0]
 801003e:	f7fa fa44 	bl	800a4ca <lwip_htonl>
 8010042:	4603      	mov	r3, r0
 8010044:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010046:	7dfb      	ldrb	r3, [r7, #23]
 8010048:	089b      	lsrs	r3, r3, #2
 801004a:	b2db      	uxtb	r3, r3
 801004c:	b29b      	uxth	r3, r3
 801004e:	3305      	adds	r3, #5
 8010050:	b29b      	uxth	r3, r3
 8010052:	031b      	lsls	r3, r3, #12
 8010054:	b29a      	uxth	r2, r3
 8010056:	79fb      	ldrb	r3, [r7, #7]
 8010058:	b29b      	uxth	r3, r3
 801005a:	4313      	orrs	r3, r2
 801005c:	b29a      	uxth	r2, r3
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	68dc      	ldr	r4, [r3, #12]
 8010062:	4610      	mov	r0, r2
 8010064:	f7fa fa1c 	bl	800a4a0 <lwip_htons>
 8010068:	4603      	mov	r3, r0
 801006a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	68db      	ldr	r3, [r3, #12]
 8010070:	2200      	movs	r2, #0
 8010072:	749a      	strb	r2, [r3, #18]
 8010074:	2200      	movs	r2, #0
 8010076:	74da      	strb	r2, [r3, #19]
  return seg;
 8010078:	693b      	ldr	r3, [r7, #16]
}
 801007a:	4618      	mov	r0, r3
 801007c:	371c      	adds	r7, #28
 801007e:	46bd      	mov	sp, r7
 8010080:	bd90      	pop	{r4, r7, pc}
 8010082:	bf00      	nop
 8010084:	08018364 	.word	0x08018364
 8010088:	08018398 	.word	0x08018398
 801008c:	080183b8 	.word	0x080183b8
 8010090:	080183e0 	.word	0x080183e0
 8010094:	08018404 	.word	0x08018404

08010098 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010098:	b590      	push	{r4, r7, lr}
 801009a:	b08b      	sub	sp, #44	; 0x2c
 801009c:	af02      	add	r7, sp, #8
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	460b      	mov	r3, r1
 80100a2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80100a4:	2300      	movs	r3, #0
 80100a6:	61fb      	str	r3, [r7, #28]
 80100a8:	2300      	movs	r3, #0
 80100aa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80100ac:	2300      	movs	r3, #0
 80100ae:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d106      	bne.n	80100c4 <tcp_split_unsent_seg+0x2c>
 80100b6:	4b95      	ldr	r3, [pc, #596]	; (801030c <tcp_split_unsent_seg+0x274>)
 80100b8:	f240 324b 	movw	r2, #843	; 0x34b
 80100bc:	4994      	ldr	r1, [pc, #592]	; (8010310 <tcp_split_unsent_seg+0x278>)
 80100be:	4895      	ldr	r0, [pc, #596]	; (8010314 <tcp_split_unsent_seg+0x27c>)
 80100c0:	f004 fef8 	bl	8014eb4 <iprintf>

  useg = pcb->unsent;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100c8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d102      	bne.n	80100d6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80100d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100d4:	e116      	b.n	8010304 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80100d6:	887b      	ldrh	r3, [r7, #2]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d109      	bne.n	80100f0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80100dc:	4b8b      	ldr	r3, [pc, #556]	; (801030c <tcp_split_unsent_seg+0x274>)
 80100de:	f240 3253 	movw	r2, #851	; 0x353
 80100e2:	498d      	ldr	r1, [pc, #564]	; (8010318 <tcp_split_unsent_seg+0x280>)
 80100e4:	488b      	ldr	r0, [pc, #556]	; (8010314 <tcp_split_unsent_seg+0x27c>)
 80100e6:	f004 fee5 	bl	8014eb4 <iprintf>
    return ERR_VAL;
 80100ea:	f06f 0305 	mvn.w	r3, #5
 80100ee:	e109      	b.n	8010304 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	891b      	ldrh	r3, [r3, #8]
 80100f4:	887a      	ldrh	r2, [r7, #2]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d301      	bcc.n	80100fe <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80100fa:	2300      	movs	r3, #0
 80100fc:	e102      	b.n	8010304 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010102:	887a      	ldrh	r2, [r7, #2]
 8010104:	429a      	cmp	r2, r3
 8010106:	d906      	bls.n	8010116 <tcp_split_unsent_seg+0x7e>
 8010108:	4b80      	ldr	r3, [pc, #512]	; (801030c <tcp_split_unsent_seg+0x274>)
 801010a:	f240 325b 	movw	r2, #859	; 0x35b
 801010e:	4983      	ldr	r1, [pc, #524]	; (801031c <tcp_split_unsent_seg+0x284>)
 8010110:	4880      	ldr	r0, [pc, #512]	; (8010314 <tcp_split_unsent_seg+0x27c>)
 8010112:	f004 fecf 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	891b      	ldrh	r3, [r3, #8]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d106      	bne.n	801012c <tcp_split_unsent_seg+0x94>
 801011e:	4b7b      	ldr	r3, [pc, #492]	; (801030c <tcp_split_unsent_seg+0x274>)
 8010120:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010124:	497e      	ldr	r1, [pc, #504]	; (8010320 <tcp_split_unsent_seg+0x288>)
 8010126:	487b      	ldr	r0, [pc, #492]	; (8010314 <tcp_split_unsent_seg+0x27c>)
 8010128:	f004 fec4 	bl	8014eb4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	7a9b      	ldrb	r3, [r3, #10]
 8010130:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010132:	7bfb      	ldrb	r3, [r7, #15]
 8010134:	009b      	lsls	r3, r3, #2
 8010136:	b2db      	uxtb	r3, r3
 8010138:	f003 0304 	and.w	r3, r3, #4
 801013c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	891a      	ldrh	r2, [r3, #8]
 8010142:	887b      	ldrh	r3, [r7, #2]
 8010144:	1ad3      	subs	r3, r2, r3
 8010146:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010148:	7bbb      	ldrb	r3, [r7, #14]
 801014a:	b29a      	uxth	r2, r3
 801014c:	89bb      	ldrh	r3, [r7, #12]
 801014e:	4413      	add	r3, r2
 8010150:	b29b      	uxth	r3, r3
 8010152:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010156:	4619      	mov	r1, r3
 8010158:	2036      	movs	r0, #54	; 0x36
 801015a:	f7fb faaf 	bl	800b6bc <pbuf_alloc>
 801015e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	2b00      	cmp	r3, #0
 8010164:	f000 80b7 	beq.w	80102d6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	891a      	ldrh	r2, [r3, #8]
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	891b      	ldrh	r3, [r3, #8]
 8010172:	1ad3      	subs	r3, r2, r3
 8010174:	b29a      	uxth	r2, r3
 8010176:	887b      	ldrh	r3, [r7, #2]
 8010178:	4413      	add	r3, r2
 801017a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	6858      	ldr	r0, [r3, #4]
 8010180:	693b      	ldr	r3, [r7, #16]
 8010182:	685a      	ldr	r2, [r3, #4]
 8010184:	7bbb      	ldrb	r3, [r7, #14]
 8010186:	18d1      	adds	r1, r2, r3
 8010188:	897b      	ldrh	r3, [r7, #10]
 801018a:	89ba      	ldrh	r2, [r7, #12]
 801018c:	f7fb ff80 	bl	800c090 <pbuf_copy_partial>
 8010190:	4603      	mov	r3, r0
 8010192:	461a      	mov	r2, r3
 8010194:	89bb      	ldrh	r3, [r7, #12]
 8010196:	4293      	cmp	r3, r2
 8010198:	f040 809f 	bne.w	80102da <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	68db      	ldr	r3, [r3, #12]
 80101a0:	899b      	ldrh	r3, [r3, #12]
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7fa f97b 	bl	800a4a0 <lwip_htons>
 80101aa:	4603      	mov	r3, r0
 80101ac:	b2db      	uxtb	r3, r3
 80101ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80101b2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80101b4:	2300      	movs	r3, #0
 80101b6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80101b8:	7efb      	ldrb	r3, [r7, #27]
 80101ba:	f003 0308 	and.w	r3, r3, #8
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d007      	beq.n	80101d2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80101c2:	7efb      	ldrb	r3, [r7, #27]
 80101c4:	f023 0308 	bic.w	r3, r3, #8
 80101c8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80101ca:	7ebb      	ldrb	r3, [r7, #26]
 80101cc:	f043 0308 	orr.w	r3, r3, #8
 80101d0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80101d2:	7efb      	ldrb	r3, [r7, #27]
 80101d4:	f003 0301 	and.w	r3, r3, #1
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d007      	beq.n	80101ec <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80101dc:	7efb      	ldrb	r3, [r7, #27]
 80101de:	f023 0301 	bic.w	r3, r3, #1
 80101e2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80101e4:	7ebb      	ldrb	r3, [r7, #26]
 80101e6:	f043 0301 	orr.w	r3, r3, #1
 80101ea:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	68db      	ldr	r3, [r3, #12]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7fa f969 	bl	800a4ca <lwip_htonl>
 80101f8:	4602      	mov	r2, r0
 80101fa:	887b      	ldrh	r3, [r7, #2]
 80101fc:	18d1      	adds	r1, r2, r3
 80101fe:	7eba      	ldrb	r2, [r7, #26]
 8010200:	7bfb      	ldrb	r3, [r7, #15]
 8010202:	9300      	str	r3, [sp, #0]
 8010204:	460b      	mov	r3, r1
 8010206:	6939      	ldr	r1, [r7, #16]
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f7ff fea7 	bl	800ff5c <tcp_create_segment>
 801020e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d063      	beq.n	80102de <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	4618      	mov	r0, r3
 801021c:	f7fb fdc0 	bl	800bda0 <pbuf_clen>
 8010220:	4603      	mov	r3, r0
 8010222:	461a      	mov	r2, r3
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801022a:	1a9b      	subs	r3, r3, r2
 801022c:	b29a      	uxth	r2, r3
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	6858      	ldr	r0, [r3, #4]
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	891a      	ldrh	r2, [r3, #8]
 801023e:	89bb      	ldrh	r3, [r7, #12]
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	b29b      	uxth	r3, r3
 8010244:	4619      	mov	r1, r3
 8010246:	f7fb fb97 	bl	800b978 <pbuf_realloc>
  useg->len -= remainder;
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	891a      	ldrh	r2, [r3, #8]
 801024e:	89bb      	ldrh	r3, [r7, #12]
 8010250:	1ad3      	subs	r3, r2, r3
 8010252:	b29a      	uxth	r2, r3
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	68db      	ldr	r3, [r3, #12]
 801025c:	899b      	ldrh	r3, [r3, #12]
 801025e:	b29c      	uxth	r4, r3
 8010260:	7efb      	ldrb	r3, [r7, #27]
 8010262:	b29b      	uxth	r3, r3
 8010264:	4618      	mov	r0, r3
 8010266:	f7fa f91b 	bl	800a4a0 <lwip_htons>
 801026a:	4603      	mov	r3, r0
 801026c:	461a      	mov	r2, r3
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	68db      	ldr	r3, [r3, #12]
 8010272:	4322      	orrs	r2, r4
 8010274:	b292      	uxth	r2, r2
 8010276:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	685b      	ldr	r3, [r3, #4]
 801027c:	4618      	mov	r0, r3
 801027e:	f7fb fd8f 	bl	800bda0 <pbuf_clen>
 8010282:	4603      	mov	r3, r0
 8010284:	461a      	mov	r2, r3
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801028c:	4413      	add	r3, r2
 801028e:	b29a      	uxth	r2, r3
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010296:	69fb      	ldr	r3, [r7, #28]
 8010298:	685b      	ldr	r3, [r3, #4]
 801029a:	4618      	mov	r0, r3
 801029c:	f7fb fd80 	bl	800bda0 <pbuf_clen>
 80102a0:	4603      	mov	r3, r0
 80102a2:	461a      	mov	r2, r3
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102aa:	4413      	add	r3, r2
 80102ac:	b29a      	uxth	r2, r3
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	681a      	ldr	r2, [r3, #0]
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	69fa      	ldr	r2, [r7, #28]
 80102c0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80102c2:	69fb      	ldr	r3, [r7, #28]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d103      	bne.n	80102d2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2200      	movs	r2, #0
 80102ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80102d2:	2300      	movs	r3, #0
 80102d4:	e016      	b.n	8010304 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80102d6:	bf00      	nop
 80102d8:	e002      	b.n	80102e0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80102da:	bf00      	nop
 80102dc:	e000      	b.n	80102e0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80102de:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80102e0:	69fb      	ldr	r3, [r7, #28]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d006      	beq.n	80102f4 <tcp_split_unsent_seg+0x25c>
 80102e6:	4b09      	ldr	r3, [pc, #36]	; (801030c <tcp_split_unsent_seg+0x274>)
 80102e8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80102ec:	490d      	ldr	r1, [pc, #52]	; (8010324 <tcp_split_unsent_seg+0x28c>)
 80102ee:	4809      	ldr	r0, [pc, #36]	; (8010314 <tcp_split_unsent_seg+0x27c>)
 80102f0:	f004 fde0 	bl	8014eb4 <iprintf>
  if (p != NULL) {
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d002      	beq.n	8010300 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80102fa:	6938      	ldr	r0, [r7, #16]
 80102fc:	f7fb fcc2 	bl	800bc84 <pbuf_free>
  }

  return ERR_MEM;
 8010300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010304:	4618      	mov	r0, r3
 8010306:	3724      	adds	r7, #36	; 0x24
 8010308:	46bd      	mov	sp, r7
 801030a:	bd90      	pop	{r4, r7, pc}
 801030c:	08018364 	.word	0x08018364
 8010310:	080186f8 	.word	0x080186f8
 8010314:	080183b8 	.word	0x080183b8
 8010318:	0801871c 	.word	0x0801871c
 801031c:	08018740 	.word	0x08018740
 8010320:	08018750 	.word	0x08018750
 8010324:	08018760 	.word	0x08018760

08010328 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010328:	b590      	push	{r4, r7, lr}
 801032a:	b085      	sub	sp, #20
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d106      	bne.n	8010344 <tcp_send_fin+0x1c>
 8010336:	4b21      	ldr	r3, [pc, #132]	; (80103bc <tcp_send_fin+0x94>)
 8010338:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801033c:	4920      	ldr	r1, [pc, #128]	; (80103c0 <tcp_send_fin+0x98>)
 801033e:	4821      	ldr	r0, [pc, #132]	; (80103c4 <tcp_send_fin+0x9c>)
 8010340:	f004 fdb8 	bl	8014eb4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010348:	2b00      	cmp	r3, #0
 801034a:	d02e      	beq.n	80103aa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010350:	60fb      	str	r3, [r7, #12]
 8010352:	e002      	b.n	801035a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d1f8      	bne.n	8010354 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	68db      	ldr	r3, [r3, #12]
 8010366:	899b      	ldrh	r3, [r3, #12]
 8010368:	b29b      	uxth	r3, r3
 801036a:	4618      	mov	r0, r3
 801036c:	f7fa f898 	bl	800a4a0 <lwip_htons>
 8010370:	4603      	mov	r3, r0
 8010372:	b2db      	uxtb	r3, r3
 8010374:	f003 0307 	and.w	r3, r3, #7
 8010378:	2b00      	cmp	r3, #0
 801037a:	d116      	bne.n	80103aa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	899b      	ldrh	r3, [r3, #12]
 8010382:	b29c      	uxth	r4, r3
 8010384:	2001      	movs	r0, #1
 8010386:	f7fa f88b 	bl	800a4a0 <lwip_htons>
 801038a:	4603      	mov	r3, r0
 801038c:	461a      	mov	r2, r3
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	68db      	ldr	r3, [r3, #12]
 8010392:	4322      	orrs	r2, r4
 8010394:	b292      	uxth	r2, r2
 8010396:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	8b5b      	ldrh	r3, [r3, #26]
 801039c:	f043 0320 	orr.w	r3, r3, #32
 80103a0:	b29a      	uxth	r2, r3
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80103a6:	2300      	movs	r3, #0
 80103a8:	e004      	b.n	80103b4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80103aa:	2101      	movs	r1, #1
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f000 f80b 	bl	80103c8 <tcp_enqueue_flags>
 80103b2:	4603      	mov	r3, r0
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3714      	adds	r7, #20
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd90      	pop	{r4, r7, pc}
 80103bc:	08018364 	.word	0x08018364
 80103c0:	0801876c 	.word	0x0801876c
 80103c4:	080183b8 	.word	0x080183b8

080103c8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b08a      	sub	sp, #40	; 0x28
 80103cc:	af02      	add	r7, sp, #8
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	460b      	mov	r3, r1
 80103d2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80103d4:	2300      	movs	r3, #0
 80103d6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80103d8:	2300      	movs	r3, #0
 80103da:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80103dc:	78fb      	ldrb	r3, [r7, #3]
 80103de:	f003 0303 	and.w	r3, r3, #3
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d106      	bne.n	80103f4 <tcp_enqueue_flags+0x2c>
 80103e6:	4b67      	ldr	r3, [pc, #412]	; (8010584 <tcp_enqueue_flags+0x1bc>)
 80103e8:	f240 4211 	movw	r2, #1041	; 0x411
 80103ec:	4966      	ldr	r1, [pc, #408]	; (8010588 <tcp_enqueue_flags+0x1c0>)
 80103ee:	4867      	ldr	r0, [pc, #412]	; (801058c <tcp_enqueue_flags+0x1c4>)
 80103f0:	f004 fd60 	bl	8014eb4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d106      	bne.n	8010408 <tcp_enqueue_flags+0x40>
 80103fa:	4b62      	ldr	r3, [pc, #392]	; (8010584 <tcp_enqueue_flags+0x1bc>)
 80103fc:	f240 4213 	movw	r2, #1043	; 0x413
 8010400:	4963      	ldr	r1, [pc, #396]	; (8010590 <tcp_enqueue_flags+0x1c8>)
 8010402:	4862      	ldr	r0, [pc, #392]	; (801058c <tcp_enqueue_flags+0x1c4>)
 8010404:	f004 fd56 	bl	8014eb4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010408:	78fb      	ldrb	r3, [r7, #3]
 801040a:	f003 0302 	and.w	r3, r3, #2
 801040e:	2b00      	cmp	r3, #0
 8010410:	d001      	beq.n	8010416 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010412:	2301      	movs	r3, #1
 8010414:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010416:	7ffb      	ldrb	r3, [r7, #31]
 8010418:	009b      	lsls	r3, r3, #2
 801041a:	b2db      	uxtb	r3, r3
 801041c:	f003 0304 	and.w	r3, r3, #4
 8010420:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010422:	7dfb      	ldrb	r3, [r7, #23]
 8010424:	b29b      	uxth	r3, r3
 8010426:	f44f 7220 	mov.w	r2, #640	; 0x280
 801042a:	4619      	mov	r1, r3
 801042c:	2036      	movs	r0, #54	; 0x36
 801042e:	f7fb f945 	bl	800b6bc <pbuf_alloc>
 8010432:	6138      	str	r0, [r7, #16]
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d109      	bne.n	801044e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	8b5b      	ldrh	r3, [r3, #26]
 801043e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010442:	b29a      	uxth	r2, r3
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801044c:	e095      	b.n	801057a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	895a      	ldrh	r2, [r3, #10]
 8010452:	7dfb      	ldrb	r3, [r7, #23]
 8010454:	b29b      	uxth	r3, r3
 8010456:	429a      	cmp	r2, r3
 8010458:	d206      	bcs.n	8010468 <tcp_enqueue_flags+0xa0>
 801045a:	4b4a      	ldr	r3, [pc, #296]	; (8010584 <tcp_enqueue_flags+0x1bc>)
 801045c:	f240 4239 	movw	r2, #1081	; 0x439
 8010460:	494c      	ldr	r1, [pc, #304]	; (8010594 <tcp_enqueue_flags+0x1cc>)
 8010462:	484a      	ldr	r0, [pc, #296]	; (801058c <tcp_enqueue_flags+0x1c4>)
 8010464:	f004 fd26 	bl	8014eb4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801046c:	78fa      	ldrb	r2, [r7, #3]
 801046e:	7ffb      	ldrb	r3, [r7, #31]
 8010470:	9300      	str	r3, [sp, #0]
 8010472:	460b      	mov	r3, r1
 8010474:	6939      	ldr	r1, [r7, #16]
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f7ff fd70 	bl	800ff5c <tcp_create_segment>
 801047c:	60f8      	str	r0, [r7, #12]
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d109      	bne.n	8010498 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	8b5b      	ldrh	r3, [r3, #26]
 8010488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801048c:	b29a      	uxth	r2, r3
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010496:	e070      	b.n	801057a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	68db      	ldr	r3, [r3, #12]
 801049c:	f003 0303 	and.w	r3, r3, #3
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d006      	beq.n	80104b2 <tcp_enqueue_flags+0xea>
 80104a4:	4b37      	ldr	r3, [pc, #220]	; (8010584 <tcp_enqueue_flags+0x1bc>)
 80104a6:	f240 4242 	movw	r2, #1090	; 0x442
 80104aa:	493b      	ldr	r1, [pc, #236]	; (8010598 <tcp_enqueue_flags+0x1d0>)
 80104ac:	4837      	ldr	r0, [pc, #220]	; (801058c <tcp_enqueue_flags+0x1c4>)
 80104ae:	f004 fd01 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	891b      	ldrh	r3, [r3, #8]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d006      	beq.n	80104c8 <tcp_enqueue_flags+0x100>
 80104ba:	4b32      	ldr	r3, [pc, #200]	; (8010584 <tcp_enqueue_flags+0x1bc>)
 80104bc:	f240 4243 	movw	r2, #1091	; 0x443
 80104c0:	4936      	ldr	r1, [pc, #216]	; (801059c <tcp_enqueue_flags+0x1d4>)
 80104c2:	4832      	ldr	r0, [pc, #200]	; (801058c <tcp_enqueue_flags+0x1c4>)
 80104c4:	f004 fcf6 	bl	8014eb4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d103      	bne.n	80104d8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	68fa      	ldr	r2, [r7, #12]
 80104d4:	66da      	str	r2, [r3, #108]	; 0x6c
 80104d6:	e00d      	b.n	80104f4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104dc:	61bb      	str	r3, [r7, #24]
 80104de:	e002      	b.n	80104e6 <tcp_enqueue_flags+0x11e>
 80104e0:	69bb      	ldr	r3, [r7, #24]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	61bb      	str	r3, [r7, #24]
 80104e6:	69bb      	ldr	r3, [r7, #24]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d1f8      	bne.n	80104e0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	68fa      	ldr	r2, [r7, #12]
 80104f2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2200      	movs	r2, #0
 80104f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80104fc:	78fb      	ldrb	r3, [r7, #3]
 80104fe:	f003 0302 	and.w	r3, r3, #2
 8010502:	2b00      	cmp	r3, #0
 8010504:	d104      	bne.n	8010510 <tcp_enqueue_flags+0x148>
 8010506:	78fb      	ldrb	r3, [r7, #3]
 8010508:	f003 0301 	and.w	r3, r3, #1
 801050c:	2b00      	cmp	r3, #0
 801050e:	d004      	beq.n	801051a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010514:	1c5a      	adds	r2, r3, #1
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801051a:	78fb      	ldrb	r3, [r7, #3]
 801051c:	f003 0301 	and.w	r3, r3, #1
 8010520:	2b00      	cmp	r3, #0
 8010522:	d006      	beq.n	8010532 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	8b5b      	ldrh	r3, [r3, #26]
 8010528:	f043 0320 	orr.w	r3, r3, #32
 801052c:	b29a      	uxth	r2, r3
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	685b      	ldr	r3, [r3, #4]
 8010536:	4618      	mov	r0, r3
 8010538:	f7fb fc32 	bl	800bda0 <pbuf_clen>
 801053c:	4603      	mov	r3, r0
 801053e:	461a      	mov	r2, r3
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010546:	4413      	add	r3, r2
 8010548:	b29a      	uxth	r2, r3
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010556:	2b00      	cmp	r3, #0
 8010558:	d00e      	beq.n	8010578 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801055e:	2b00      	cmp	r3, #0
 8010560:	d10a      	bne.n	8010578 <tcp_enqueue_flags+0x1b0>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010566:	2b00      	cmp	r3, #0
 8010568:	d106      	bne.n	8010578 <tcp_enqueue_flags+0x1b0>
 801056a:	4b06      	ldr	r3, [pc, #24]	; (8010584 <tcp_enqueue_flags+0x1bc>)
 801056c:	f240 4265 	movw	r2, #1125	; 0x465
 8010570:	490b      	ldr	r1, [pc, #44]	; (80105a0 <tcp_enqueue_flags+0x1d8>)
 8010572:	4806      	ldr	r0, [pc, #24]	; (801058c <tcp_enqueue_flags+0x1c4>)
 8010574:	f004 fc9e 	bl	8014eb4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010578:	2300      	movs	r3, #0
}
 801057a:	4618      	mov	r0, r3
 801057c:	3720      	adds	r7, #32
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}
 8010582:	bf00      	nop
 8010584:	08018364 	.word	0x08018364
 8010588:	08018788 	.word	0x08018788
 801058c:	080183b8 	.word	0x080183b8
 8010590:	080187e0 	.word	0x080187e0
 8010594:	08018800 	.word	0x08018800
 8010598:	0801883c 	.word	0x0801883c
 801059c:	08018854 	.word	0x08018854
 80105a0:	08018880 	.word	0x08018880

080105a4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80105a4:	b5b0      	push	{r4, r5, r7, lr}
 80105a6:	b08a      	sub	sp, #40	; 0x28
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d106      	bne.n	80105c0 <tcp_output+0x1c>
 80105b2:	4b8a      	ldr	r3, [pc, #552]	; (80107dc <tcp_output+0x238>)
 80105b4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80105b8:	4989      	ldr	r1, [pc, #548]	; (80107e0 <tcp_output+0x23c>)
 80105ba:	488a      	ldr	r0, [pc, #552]	; (80107e4 <tcp_output+0x240>)
 80105bc:	f004 fc7a 	bl	8014eb4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	7d1b      	ldrb	r3, [r3, #20]
 80105c4:	2b01      	cmp	r3, #1
 80105c6:	d106      	bne.n	80105d6 <tcp_output+0x32>
 80105c8:	4b84      	ldr	r3, [pc, #528]	; (80107dc <tcp_output+0x238>)
 80105ca:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80105ce:	4986      	ldr	r1, [pc, #536]	; (80107e8 <tcp_output+0x244>)
 80105d0:	4884      	ldr	r0, [pc, #528]	; (80107e4 <tcp_output+0x240>)
 80105d2:	f004 fc6f 	bl	8014eb4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80105d6:	4b85      	ldr	r3, [pc, #532]	; (80107ec <tcp_output+0x248>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	687a      	ldr	r2, [r7, #4]
 80105dc:	429a      	cmp	r2, r3
 80105de:	d101      	bne.n	80105e4 <tcp_output+0x40>
    return ERR_OK;
 80105e0:	2300      	movs	r3, #0
 80105e2:	e1ce      	b.n	8010982 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80105f0:	4293      	cmp	r3, r2
 80105f2:	bf28      	it	cs
 80105f4:	4613      	movcs	r3, r2
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010602:	2b00      	cmp	r3, #0
 8010604:	d10b      	bne.n	801061e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	8b5b      	ldrh	r3, [r3, #26]
 801060a:	f003 0302 	and.w	r3, r3, #2
 801060e:	2b00      	cmp	r3, #0
 8010610:	f000 81aa 	beq.w	8010968 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f000 fdcb 	bl	80111b0 <tcp_send_empty_ack>
 801061a:	4603      	mov	r3, r0
 801061c:	e1b1      	b.n	8010982 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801061e:	6879      	ldr	r1, [r7, #4]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	3304      	adds	r3, #4
 8010624:	461a      	mov	r2, r3
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f7ff fc7c 	bl	800ff24 <tcp_route>
 801062c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d102      	bne.n	801063a <tcp_output+0x96>
    return ERR_RTE;
 8010634:	f06f 0303 	mvn.w	r3, #3
 8010638:	e1a3      	b.n	8010982 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d003      	beq.n	8010648 <tcp_output+0xa4>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d111      	bne.n	801066c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d002      	beq.n	8010654 <tcp_output+0xb0>
 801064e:	697b      	ldr	r3, [r7, #20]
 8010650:	3304      	adds	r3, #4
 8010652:	e000      	b.n	8010656 <tcp_output+0xb2>
 8010654:	2300      	movs	r3, #0
 8010656:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d102      	bne.n	8010664 <tcp_output+0xc0>
      return ERR_RTE;
 801065e:	f06f 0303 	mvn.w	r3, #3
 8010662:	e18e      	b.n	8010982 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	681a      	ldr	r2, [r3, #0]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066e:	68db      	ldr	r3, [r3, #12]
 8010670:	685b      	ldr	r3, [r3, #4]
 8010672:	4618      	mov	r0, r3
 8010674:	f7f9 ff29 	bl	800a4ca <lwip_htonl>
 8010678:	4602      	mov	r2, r0
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801067e:	1ad3      	subs	r3, r2, r3
 8010680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010682:	8912      	ldrh	r2, [r2, #8]
 8010684:	4413      	add	r3, r2
 8010686:	69ba      	ldr	r2, [r7, #24]
 8010688:	429a      	cmp	r2, r3
 801068a:	d227      	bcs.n	80106dc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010692:	461a      	mov	r2, r3
 8010694:	69bb      	ldr	r3, [r7, #24]
 8010696:	4293      	cmp	r3, r2
 8010698:	d114      	bne.n	80106c4 <tcp_output+0x120>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d110      	bne.n	80106c4 <tcp_output+0x120>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d10b      	bne.n	80106c4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2200      	movs	r2, #0
 80106b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2201      	movs	r2, #1
 80106b8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2200      	movs	r2, #0
 80106c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	8b5b      	ldrh	r3, [r3, #26]
 80106c8:	f003 0302 	and.w	r3, r3, #2
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	f000 814d 	beq.w	801096c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f000 fd6c 	bl	80111b0 <tcp_send_empty_ack>
 80106d8:	4603      	mov	r3, r0
 80106da:	e152      	b.n	8010982 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106e8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80106ea:	6a3b      	ldr	r3, [r7, #32]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	f000 811c 	beq.w	801092a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80106f2:	e002      	b.n	80106fa <tcp_output+0x156>
 80106f4:	6a3b      	ldr	r3, [r7, #32]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	623b      	str	r3, [r7, #32]
 80106fa:	6a3b      	ldr	r3, [r7, #32]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d1f8      	bne.n	80106f4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010702:	e112      	b.n	801092a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010706:	68db      	ldr	r3, [r3, #12]
 8010708:	899b      	ldrh	r3, [r3, #12]
 801070a:	b29b      	uxth	r3, r3
 801070c:	4618      	mov	r0, r3
 801070e:	f7f9 fec7 	bl	800a4a0 <lwip_htons>
 8010712:	4603      	mov	r3, r0
 8010714:	b2db      	uxtb	r3, r3
 8010716:	f003 0304 	and.w	r3, r3, #4
 801071a:	2b00      	cmp	r3, #0
 801071c:	d006      	beq.n	801072c <tcp_output+0x188>
 801071e:	4b2f      	ldr	r3, [pc, #188]	; (80107dc <tcp_output+0x238>)
 8010720:	f240 5236 	movw	r2, #1334	; 0x536
 8010724:	4932      	ldr	r1, [pc, #200]	; (80107f0 <tcp_output+0x24c>)
 8010726:	482f      	ldr	r0, [pc, #188]	; (80107e4 <tcp_output+0x240>)
 8010728:	f004 fbc4 	bl	8014eb4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010730:	2b00      	cmp	r3, #0
 8010732:	d01f      	beq.n	8010774 <tcp_output+0x1d0>
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	8b5b      	ldrh	r3, [r3, #26]
 8010738:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801073c:	2b00      	cmp	r3, #0
 801073e:	d119      	bne.n	8010774 <tcp_output+0x1d0>
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010744:	2b00      	cmp	r3, #0
 8010746:	d00b      	beq.n	8010760 <tcp_output+0x1bc>
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d110      	bne.n	8010774 <tcp_output+0x1d0>
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010756:	891a      	ldrh	r2, [r3, #8]
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801075c:	429a      	cmp	r2, r3
 801075e:	d209      	bcs.n	8010774 <tcp_output+0x1d0>
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010766:	2b00      	cmp	r3, #0
 8010768:	d004      	beq.n	8010774 <tcp_output+0x1d0>
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010770:	2b08      	cmp	r3, #8
 8010772:	d901      	bls.n	8010778 <tcp_output+0x1d4>
 8010774:	2301      	movs	r3, #1
 8010776:	e000      	b.n	801077a <tcp_output+0x1d6>
 8010778:	2300      	movs	r3, #0
 801077a:	2b00      	cmp	r3, #0
 801077c:	d106      	bne.n	801078c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	8b5b      	ldrh	r3, [r3, #26]
 8010782:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010786:	2b00      	cmp	r3, #0
 8010788:	f000 80e4 	beq.w	8010954 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	7d1b      	ldrb	r3, [r3, #20]
 8010790:	2b02      	cmp	r3, #2
 8010792:	d00d      	beq.n	80107b0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010796:	68db      	ldr	r3, [r3, #12]
 8010798:	899b      	ldrh	r3, [r3, #12]
 801079a:	b29c      	uxth	r4, r3
 801079c:	2010      	movs	r0, #16
 801079e:	f7f9 fe7f 	bl	800a4a0 <lwip_htons>
 80107a2:	4603      	mov	r3, r0
 80107a4:	461a      	mov	r2, r3
 80107a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a8:	68db      	ldr	r3, [r3, #12]
 80107aa:	4322      	orrs	r2, r4
 80107ac:	b292      	uxth	r2, r2
 80107ae:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80107b0:	697a      	ldr	r2, [r7, #20]
 80107b2:	6879      	ldr	r1, [r7, #4]
 80107b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107b6:	f000 f909 	bl	80109cc <tcp_output_segment>
 80107ba:	4603      	mov	r3, r0
 80107bc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80107be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d016      	beq.n	80107f4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	8b5b      	ldrh	r3, [r3, #26]
 80107ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107ce:	b29a      	uxth	r2, r3
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	835a      	strh	r2, [r3, #26]
      return err;
 80107d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80107d8:	e0d3      	b.n	8010982 <tcp_output+0x3de>
 80107da:	bf00      	nop
 80107dc:	08018364 	.word	0x08018364
 80107e0:	080188a8 	.word	0x080188a8
 80107e4:	080183b8 	.word	0x080183b8
 80107e8:	080188c0 	.word	0x080188c0
 80107ec:	20017b14 	.word	0x20017b14
 80107f0:	080188e8 	.word	0x080188e8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80107f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f6:	681a      	ldr	r2, [r3, #0]
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	7d1b      	ldrb	r3, [r3, #20]
 8010800:	2b02      	cmp	r3, #2
 8010802:	d006      	beq.n	8010812 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	8b5b      	ldrh	r3, [r3, #26]
 8010808:	f023 0303 	bic.w	r3, r3, #3
 801080c:	b29a      	uxth	r2, r3
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010814:	68db      	ldr	r3, [r3, #12]
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	4618      	mov	r0, r3
 801081a:	f7f9 fe56 	bl	800a4ca <lwip_htonl>
 801081e:	4604      	mov	r4, r0
 8010820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010822:	891b      	ldrh	r3, [r3, #8]
 8010824:	461d      	mov	r5, r3
 8010826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010828:	68db      	ldr	r3, [r3, #12]
 801082a:	899b      	ldrh	r3, [r3, #12]
 801082c:	b29b      	uxth	r3, r3
 801082e:	4618      	mov	r0, r3
 8010830:	f7f9 fe36 	bl	800a4a0 <lwip_htons>
 8010834:	4603      	mov	r3, r0
 8010836:	b2db      	uxtb	r3, r3
 8010838:	f003 0303 	and.w	r3, r3, #3
 801083c:	2b00      	cmp	r3, #0
 801083e:	d001      	beq.n	8010844 <tcp_output+0x2a0>
 8010840:	2301      	movs	r3, #1
 8010842:	e000      	b.n	8010846 <tcp_output+0x2a2>
 8010844:	2300      	movs	r3, #0
 8010846:	442b      	add	r3, r5
 8010848:	4423      	add	r3, r4
 801084a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	1ad3      	subs	r3, r2, r3
 8010854:	2b00      	cmp	r3, #0
 8010856:	da02      	bge.n	801085e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	68ba      	ldr	r2, [r7, #8]
 801085c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010860:	891b      	ldrh	r3, [r3, #8]
 8010862:	461c      	mov	r4, r3
 8010864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010866:	68db      	ldr	r3, [r3, #12]
 8010868:	899b      	ldrh	r3, [r3, #12]
 801086a:	b29b      	uxth	r3, r3
 801086c:	4618      	mov	r0, r3
 801086e:	f7f9 fe17 	bl	800a4a0 <lwip_htons>
 8010872:	4603      	mov	r3, r0
 8010874:	b2db      	uxtb	r3, r3
 8010876:	f003 0303 	and.w	r3, r3, #3
 801087a:	2b00      	cmp	r3, #0
 801087c:	d001      	beq.n	8010882 <tcp_output+0x2de>
 801087e:	2301      	movs	r3, #1
 8010880:	e000      	b.n	8010884 <tcp_output+0x2e0>
 8010882:	2300      	movs	r3, #0
 8010884:	4423      	add	r3, r4
 8010886:	2b00      	cmp	r3, #0
 8010888:	d049      	beq.n	801091e <tcp_output+0x37a>
      seg->next = NULL;
 801088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088c:	2200      	movs	r2, #0
 801088e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010894:	2b00      	cmp	r3, #0
 8010896:	d105      	bne.n	80108a4 <tcp_output+0x300>
        pcb->unacked = seg;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801089c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a0:	623b      	str	r3, [r7, #32]
 80108a2:	e03f      	b.n	8010924 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80108a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a6:	68db      	ldr	r3, [r3, #12]
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7f9 fe0d 	bl	800a4ca <lwip_htonl>
 80108b0:	4604      	mov	r4, r0
 80108b2:	6a3b      	ldr	r3, [r7, #32]
 80108b4:	68db      	ldr	r3, [r3, #12]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7f9 fe06 	bl	800a4ca <lwip_htonl>
 80108be:	4603      	mov	r3, r0
 80108c0:	1ae3      	subs	r3, r4, r3
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	da24      	bge.n	8010910 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	3370      	adds	r3, #112	; 0x70
 80108ca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80108cc:	e002      	b.n	80108d4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80108ce:	69fb      	ldr	r3, [r7, #28]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80108d4:	69fb      	ldr	r3, [r7, #28]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d011      	beq.n	8010900 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80108dc:	69fb      	ldr	r3, [r7, #28]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	68db      	ldr	r3, [r3, #12]
 80108e2:	685b      	ldr	r3, [r3, #4]
 80108e4:	4618      	mov	r0, r3
 80108e6:	f7f9 fdf0 	bl	800a4ca <lwip_htonl>
 80108ea:	4604      	mov	r4, r0
 80108ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ee:	68db      	ldr	r3, [r3, #12]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7f9 fde9 	bl	800a4ca <lwip_htonl>
 80108f8:	4603      	mov	r3, r0
 80108fa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	dbe6      	blt.n	80108ce <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010900:	69fb      	ldr	r3, [r7, #28]
 8010902:	681a      	ldr	r2, [r3, #0]
 8010904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010906:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010908:	69fb      	ldr	r3, [r7, #28]
 801090a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801090c:	601a      	str	r2, [r3, #0]
 801090e:	e009      	b.n	8010924 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010910:	6a3b      	ldr	r3, [r7, #32]
 8010912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010914:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010916:	6a3b      	ldr	r3, [r7, #32]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	623b      	str	r3, [r7, #32]
 801091c:	e002      	b.n	8010924 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801091e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010920:	f7fc fc3f 	bl	800d1a2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010928:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092c:	2b00      	cmp	r3, #0
 801092e:	d012      	beq.n	8010956 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010932:	68db      	ldr	r3, [r3, #12]
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	4618      	mov	r0, r3
 8010938:	f7f9 fdc7 	bl	800a4ca <lwip_htonl>
 801093c:	4602      	mov	r2, r0
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010942:	1ad3      	subs	r3, r2, r3
 8010944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010946:	8912      	ldrh	r2, [r2, #8]
 8010948:	4413      	add	r3, r2
  while (seg != NULL &&
 801094a:	69ba      	ldr	r2, [r7, #24]
 801094c:	429a      	cmp	r2, r3
 801094e:	f4bf aed9 	bcs.w	8010704 <tcp_output+0x160>
 8010952:	e000      	b.n	8010956 <tcp_output+0x3b2>
      break;
 8010954:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801095a:	2b00      	cmp	r3, #0
 801095c:	d108      	bne.n	8010970 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2200      	movs	r2, #0
 8010962:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010966:	e004      	b.n	8010972 <tcp_output+0x3ce>
    goto output_done;
 8010968:	bf00      	nop
 801096a:	e002      	b.n	8010972 <tcp_output+0x3ce>
    goto output_done;
 801096c:	bf00      	nop
 801096e:	e000      	b.n	8010972 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010970:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	8b5b      	ldrh	r3, [r3, #26]
 8010976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801097a:	b29a      	uxth	r2, r3
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010980:	2300      	movs	r3, #0
}
 8010982:	4618      	mov	r0, r3
 8010984:	3728      	adds	r7, #40	; 0x28
 8010986:	46bd      	mov	sp, r7
 8010988:	bdb0      	pop	{r4, r5, r7, pc}
 801098a:	bf00      	nop

0801098c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b082      	sub	sp, #8
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d106      	bne.n	80109a8 <tcp_output_segment_busy+0x1c>
 801099a:	4b09      	ldr	r3, [pc, #36]	; (80109c0 <tcp_output_segment_busy+0x34>)
 801099c:	f240 529a 	movw	r2, #1434	; 0x59a
 80109a0:	4908      	ldr	r1, [pc, #32]	; (80109c4 <tcp_output_segment_busy+0x38>)
 80109a2:	4809      	ldr	r0, [pc, #36]	; (80109c8 <tcp_output_segment_busy+0x3c>)
 80109a4:	f004 fa86 	bl	8014eb4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	7b9b      	ldrb	r3, [r3, #14]
 80109ae:	2b01      	cmp	r3, #1
 80109b0:	d001      	beq.n	80109b6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80109b2:	2301      	movs	r3, #1
 80109b4:	e000      	b.n	80109b8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80109b6:	2300      	movs	r3, #0
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3708      	adds	r7, #8
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	08018364 	.word	0x08018364
 80109c4:	08018900 	.word	0x08018900
 80109c8:	080183b8 	.word	0x080183b8

080109cc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80109cc:	b5b0      	push	{r4, r5, r7, lr}
 80109ce:	b08c      	sub	sp, #48	; 0x30
 80109d0:	af04      	add	r7, sp, #16
 80109d2:	60f8      	str	r0, [r7, #12]
 80109d4:	60b9      	str	r1, [r7, #8]
 80109d6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d106      	bne.n	80109ec <tcp_output_segment+0x20>
 80109de:	4b63      	ldr	r3, [pc, #396]	; (8010b6c <tcp_output_segment+0x1a0>)
 80109e0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80109e4:	4962      	ldr	r1, [pc, #392]	; (8010b70 <tcp_output_segment+0x1a4>)
 80109e6:	4863      	ldr	r0, [pc, #396]	; (8010b74 <tcp_output_segment+0x1a8>)
 80109e8:	f004 fa64 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d106      	bne.n	8010a00 <tcp_output_segment+0x34>
 80109f2:	4b5e      	ldr	r3, [pc, #376]	; (8010b6c <tcp_output_segment+0x1a0>)
 80109f4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80109f8:	495f      	ldr	r1, [pc, #380]	; (8010b78 <tcp_output_segment+0x1ac>)
 80109fa:	485e      	ldr	r0, [pc, #376]	; (8010b74 <tcp_output_segment+0x1a8>)
 80109fc:	f004 fa5a 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d106      	bne.n	8010a14 <tcp_output_segment+0x48>
 8010a06:	4b59      	ldr	r3, [pc, #356]	; (8010b6c <tcp_output_segment+0x1a0>)
 8010a08:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010a0c:	495b      	ldr	r1, [pc, #364]	; (8010b7c <tcp_output_segment+0x1b0>)
 8010a0e:	4859      	ldr	r0, [pc, #356]	; (8010b74 <tcp_output_segment+0x1a8>)
 8010a10:	f004 fa50 	bl	8014eb4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010a14:	68f8      	ldr	r0, [r7, #12]
 8010a16:	f7ff ffb9 	bl	801098c <tcp_output_segment_busy>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d001      	beq.n	8010a24 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010a20:	2300      	movs	r3, #0
 8010a22:	e09f      	b.n	8010b64 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	68dc      	ldr	r4, [r3, #12]
 8010a2c:	4610      	mov	r0, r2
 8010a2e:	f7f9 fd4c 	bl	800a4ca <lwip_htonl>
 8010a32:	4603      	mov	r3, r0
 8010a34:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	68dc      	ldr	r4, [r3, #12]
 8010a3e:	4610      	mov	r0, r2
 8010a40:	f7f9 fd2e 	bl	800a4a0 <lwip_htons>
 8010a44:	4603      	mov	r3, r0
 8010a46:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a4c:	68ba      	ldr	r2, [r7, #8]
 8010a4e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010a50:	441a      	add	r2, r3
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	68db      	ldr	r3, [r3, #12]
 8010a5a:	3314      	adds	r3, #20
 8010a5c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	7a9b      	ldrb	r3, [r3, #10]
 8010a62:	f003 0301 	and.w	r3, r3, #1
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d015      	beq.n	8010a96 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	3304      	adds	r3, #4
 8010a6e:	461a      	mov	r2, r3
 8010a70:	6879      	ldr	r1, [r7, #4]
 8010a72:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010a76:	f7fc fe8b 	bl	800d790 <tcp_eff_send_mss_netif>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010a7e:	8b7b      	ldrh	r3, [r7, #26]
 8010a80:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7f9 fd20 	bl	800a4ca <lwip_htonl>
 8010a8a:	4602      	mov	r2, r0
 8010a8c:	69fb      	ldr	r3, [r7, #28]
 8010a8e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	3304      	adds	r3, #4
 8010a94:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	da02      	bge.n	8010aa6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d10c      	bne.n	8010ac8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010aae:	4b34      	ldr	r3, [pc, #208]	; (8010b80 <tcp_output_segment+0x1b4>)
 8010ab0:	681a      	ldr	r2, [r3, #0]
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	685b      	ldr	r3, [r3, #4]
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7f9 fd04 	bl	800a4ca <lwip_htonl>
 8010ac2:	4602      	mov	r2, r0
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	68da      	ldr	r2, [r3, #12]
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	685b      	ldr	r3, [r3, #4]
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	1ad3      	subs	r3, r2, r3
 8010ad4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	685b      	ldr	r3, [r3, #4]
 8010ada:	8959      	ldrh	r1, [r3, #10]
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	8b3a      	ldrh	r2, [r7, #24]
 8010ae2:	1a8a      	subs	r2, r1, r2
 8010ae4:	b292      	uxth	r2, r2
 8010ae6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	685b      	ldr	r3, [r3, #4]
 8010aec:	8919      	ldrh	r1, [r3, #8]
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	8b3a      	ldrh	r2, [r7, #24]
 8010af4:	1a8a      	subs	r2, r1, r2
 8010af6:	b292      	uxth	r2, r2
 8010af8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	68fa      	ldr	r2, [r7, #12]
 8010b00:	68d2      	ldr	r2, [r2, #12]
 8010b02:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	68db      	ldr	r3, [r3, #12]
 8010b08:	2200      	movs	r2, #0
 8010b0a:	741a      	strb	r2, [r3, #16]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	68db      	ldr	r3, [r3, #12]
 8010b14:	f103 0214 	add.w	r2, r3, #20
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	7a9b      	ldrb	r3, [r3, #10]
 8010b1c:	009b      	lsls	r3, r3, #2
 8010b1e:	f003 0304 	and.w	r3, r3, #4
 8010b22:	4413      	add	r3, r2
 8010b24:	69fa      	ldr	r2, [r7, #28]
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d006      	beq.n	8010b38 <tcp_output_segment+0x16c>
 8010b2a:	4b10      	ldr	r3, [pc, #64]	; (8010b6c <tcp_output_segment+0x1a0>)
 8010b2c:	f240 621c 	movw	r2, #1564	; 0x61c
 8010b30:	4914      	ldr	r1, [pc, #80]	; (8010b84 <tcp_output_segment+0x1b8>)
 8010b32:	4810      	ldr	r0, [pc, #64]	; (8010b74 <tcp_output_segment+0x1a8>)
 8010b34:	f004 f9be 	bl	8014eb4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	6858      	ldr	r0, [r3, #4]
 8010b3c:	68b9      	ldr	r1, [r7, #8]
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	1d1c      	adds	r4, r3, #4
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	7add      	ldrb	r5, [r3, #11]
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	7a9b      	ldrb	r3, [r3, #10]
 8010b4a:	687a      	ldr	r2, [r7, #4]
 8010b4c:	9202      	str	r2, [sp, #8]
 8010b4e:	2206      	movs	r2, #6
 8010b50:	9201      	str	r2, [sp, #4]
 8010b52:	9300      	str	r3, [sp, #0]
 8010b54:	462b      	mov	r3, r5
 8010b56:	4622      	mov	r2, r4
 8010b58:	f002 fd56 	bl	8013608 <ip4_output_if>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010b60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3720      	adds	r7, #32
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8010b6c:	08018364 	.word	0x08018364
 8010b70:	08018928 	.word	0x08018928
 8010b74:	080183b8 	.word	0x080183b8
 8010b78:	08018948 	.word	0x08018948
 8010b7c:	08018968 	.word	0x08018968
 8010b80:	20017ac8 	.word	0x20017ac8
 8010b84:	0801898c 	.word	0x0801898c

08010b88 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010b88:	b5b0      	push	{r4, r5, r7, lr}
 8010b8a:	b084      	sub	sp, #16
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d106      	bne.n	8010ba4 <tcp_rexmit_rto_prepare+0x1c>
 8010b96:	4b31      	ldr	r3, [pc, #196]	; (8010c5c <tcp_rexmit_rto_prepare+0xd4>)
 8010b98:	f240 6263 	movw	r2, #1635	; 0x663
 8010b9c:	4930      	ldr	r1, [pc, #192]	; (8010c60 <tcp_rexmit_rto_prepare+0xd8>)
 8010b9e:	4831      	ldr	r0, [pc, #196]	; (8010c64 <tcp_rexmit_rto_prepare+0xdc>)
 8010ba0:	f004 f988 	bl	8014eb4 <iprintf>

  if (pcb->unacked == NULL) {
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d102      	bne.n	8010bb2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010bac:	f06f 0305 	mvn.w	r3, #5
 8010bb0:	e050      	b.n	8010c54 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bb6:	60fb      	str	r3, [r7, #12]
 8010bb8:	e00b      	b.n	8010bd2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010bba:	68f8      	ldr	r0, [r7, #12]
 8010bbc:	f7ff fee6 	bl	801098c <tcp_output_segment_busy>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d002      	beq.n	8010bcc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010bc6:	f06f 0305 	mvn.w	r3, #5
 8010bca:	e043      	b.n	8010c54 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	60fb      	str	r3, [r7, #12]
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d1ef      	bne.n	8010bba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010bda:	68f8      	ldr	r0, [r7, #12]
 8010bdc:	f7ff fed6 	bl	801098c <tcp_output_segment_busy>
 8010be0:	4603      	mov	r3, r0
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d002      	beq.n	8010bec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010be6:	f06f 0305 	mvn.w	r3, #5
 8010bea:	e033      	b.n	8010c54 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	8b5b      	ldrh	r3, [r3, #26]
 8010c06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010c0a:	b29a      	uxth	r2, r3
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	68db      	ldr	r3, [r3, #12]
 8010c14:	685b      	ldr	r3, [r3, #4]
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7f9 fc57 	bl	800a4ca <lwip_htonl>
 8010c1c:	4604      	mov	r4, r0
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	891b      	ldrh	r3, [r3, #8]
 8010c22:	461d      	mov	r5, r3
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	899b      	ldrh	r3, [r3, #12]
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7f9 fc37 	bl	800a4a0 <lwip_htons>
 8010c32:	4603      	mov	r3, r0
 8010c34:	b2db      	uxtb	r3, r3
 8010c36:	f003 0303 	and.w	r3, r3, #3
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d001      	beq.n	8010c42 <tcp_rexmit_rto_prepare+0xba>
 8010c3e:	2301      	movs	r3, #1
 8010c40:	e000      	b.n	8010c44 <tcp_rexmit_rto_prepare+0xbc>
 8010c42:	2300      	movs	r3, #0
 8010c44:	442b      	add	r3, r5
 8010c46:	18e2      	adds	r2, r4, r3
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010c52:	2300      	movs	r3, #0
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3710      	adds	r7, #16
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8010c5c:	08018364 	.word	0x08018364
 8010c60:	080189a0 	.word	0x080189a0
 8010c64:	080183b8 	.word	0x080183b8

08010c68 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d106      	bne.n	8010c84 <tcp_rexmit_rto_commit+0x1c>
 8010c76:	4b0d      	ldr	r3, [pc, #52]	; (8010cac <tcp_rexmit_rto_commit+0x44>)
 8010c78:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010c7c:	490c      	ldr	r1, [pc, #48]	; (8010cb0 <tcp_rexmit_rto_commit+0x48>)
 8010c7e:	480d      	ldr	r0, [pc, #52]	; (8010cb4 <tcp_rexmit_rto_commit+0x4c>)
 8010c80:	f004 f918 	bl	8014eb4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c8a:	2bff      	cmp	r3, #255	; 0xff
 8010c8c:	d007      	beq.n	8010c9e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c94:	3301      	adds	r3, #1
 8010c96:	b2da      	uxtb	r2, r3
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f7ff fc80 	bl	80105a4 <tcp_output>
}
 8010ca4:	bf00      	nop
 8010ca6:	3708      	adds	r7, #8
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}
 8010cac:	08018364 	.word	0x08018364
 8010cb0:	080189c4 	.word	0x080189c4
 8010cb4:	080183b8 	.word	0x080183b8

08010cb8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d106      	bne.n	8010cd4 <tcp_rexmit_rto+0x1c>
 8010cc6:	4b0a      	ldr	r3, [pc, #40]	; (8010cf0 <tcp_rexmit_rto+0x38>)
 8010cc8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010ccc:	4909      	ldr	r1, [pc, #36]	; (8010cf4 <tcp_rexmit_rto+0x3c>)
 8010cce:	480a      	ldr	r0, [pc, #40]	; (8010cf8 <tcp_rexmit_rto+0x40>)
 8010cd0:	f004 f8f0 	bl	8014eb4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f7ff ff57 	bl	8010b88 <tcp_rexmit_rto_prepare>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d102      	bne.n	8010ce6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f7ff ffc1 	bl	8010c68 <tcp_rexmit_rto_commit>
  }
}
 8010ce6:	bf00      	nop
 8010ce8:	3708      	adds	r7, #8
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}
 8010cee:	bf00      	nop
 8010cf0:	08018364 	.word	0x08018364
 8010cf4:	080189e8 	.word	0x080189e8
 8010cf8:	080183b8 	.word	0x080183b8

08010cfc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010cfc:	b590      	push	{r4, r7, lr}
 8010cfe:	b085      	sub	sp, #20
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d106      	bne.n	8010d18 <tcp_rexmit+0x1c>
 8010d0a:	4b2f      	ldr	r3, [pc, #188]	; (8010dc8 <tcp_rexmit+0xcc>)
 8010d0c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010d10:	492e      	ldr	r1, [pc, #184]	; (8010dcc <tcp_rexmit+0xd0>)
 8010d12:	482f      	ldr	r0, [pc, #188]	; (8010dd0 <tcp_rexmit+0xd4>)
 8010d14:	f004 f8ce 	bl	8014eb4 <iprintf>

  if (pcb->unacked == NULL) {
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d102      	bne.n	8010d26 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010d20:	f06f 0305 	mvn.w	r3, #5
 8010d24:	e04c      	b.n	8010dc0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d2a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010d2c:	68b8      	ldr	r0, [r7, #8]
 8010d2e:	f7ff fe2d 	bl	801098c <tcp_output_segment_busy>
 8010d32:	4603      	mov	r3, r0
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d002      	beq.n	8010d3e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010d38:	f06f 0305 	mvn.w	r3, #5
 8010d3c:	e040      	b.n	8010dc0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	681a      	ldr	r2, [r3, #0]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	336c      	adds	r3, #108	; 0x6c
 8010d4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010d4c:	e002      	b.n	8010d54 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d011      	beq.n	8010d80 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	68db      	ldr	r3, [r3, #12]
 8010d62:	685b      	ldr	r3, [r3, #4]
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7f9 fbb0 	bl	800a4ca <lwip_htonl>
 8010d6a:	4604      	mov	r4, r0
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	68db      	ldr	r3, [r3, #12]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7f9 fba9 	bl	800a4ca <lwip_htonl>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	dbe6      	blt.n	8010d4e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	681a      	ldr	r2, [r3, #0]
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	68ba      	ldr	r2, [r7, #8]
 8010d8c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d103      	bne.n	8010d9e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010da4:	2bff      	cmp	r3, #255	; 0xff
 8010da6:	d007      	beq.n	8010db8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010dae:	3301      	adds	r3, #1
 8010db0:	b2da      	uxtb	r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2200      	movs	r2, #0
 8010dbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010dbe:	2300      	movs	r3, #0
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3714      	adds	r7, #20
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd90      	pop	{r4, r7, pc}
 8010dc8:	08018364 	.word	0x08018364
 8010dcc:	08018a04 	.word	0x08018a04
 8010dd0:	080183b8 	.word	0x080183b8

08010dd4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b082      	sub	sp, #8
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d106      	bne.n	8010df0 <tcp_rexmit_fast+0x1c>
 8010de2:	4b2a      	ldr	r3, [pc, #168]	; (8010e8c <tcp_rexmit_fast+0xb8>)
 8010de4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010de8:	4929      	ldr	r1, [pc, #164]	; (8010e90 <tcp_rexmit_fast+0xbc>)
 8010dea:	482a      	ldr	r0, [pc, #168]	; (8010e94 <tcp_rexmit_fast+0xc0>)
 8010dec:	f004 f862 	bl	8014eb4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d045      	beq.n	8010e84 <tcp_rexmit_fast+0xb0>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	8b5b      	ldrh	r3, [r3, #26]
 8010dfc:	f003 0304 	and.w	r3, r3, #4
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d13f      	bne.n	8010e84 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f7ff ff79 	bl	8010cfc <tcp_rexmit>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d139      	bne.n	8010e84 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010e1c:	4293      	cmp	r3, r2
 8010e1e:	bf28      	it	cs
 8010e20:	4613      	movcs	r3, r2
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	da00      	bge.n	8010e2a <tcp_rexmit_fast+0x56>
 8010e28:	3301      	adds	r3, #1
 8010e2a:	105b      	asrs	r3, r3, #1
 8010e2c:	b29a      	uxth	r2, r3
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010e3a:	461a      	mov	r2, r3
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	429a      	cmp	r2, r3
 8010e44:	d206      	bcs.n	8010e54 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e4a:	005b      	lsls	r3, r3, #1
 8010e4c:	b29a      	uxth	r2, r3
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e5e:	4619      	mov	r1, r3
 8010e60:	0049      	lsls	r1, r1, #1
 8010e62:	440b      	add	r3, r1
 8010e64:	b29b      	uxth	r3, r3
 8010e66:	4413      	add	r3, r2
 8010e68:	b29a      	uxth	r2, r3
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	8b5b      	ldrh	r3, [r3, #26]
 8010e74:	f043 0304 	orr.w	r3, r3, #4
 8010e78:	b29a      	uxth	r2, r3
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2200      	movs	r2, #0
 8010e82:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010e84:	bf00      	nop
 8010e86:	3708      	adds	r7, #8
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}
 8010e8c:	08018364 	.word	0x08018364
 8010e90:	08018a1c 	.word	0x08018a1c
 8010e94:	080183b8 	.word	0x080183b8

08010e98 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b086      	sub	sp, #24
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	60f8      	str	r0, [r7, #12]
 8010ea0:	607b      	str	r3, [r7, #4]
 8010ea2:	460b      	mov	r3, r1
 8010ea4:	817b      	strh	r3, [r7, #10]
 8010ea6:	4613      	mov	r3, r2
 8010ea8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010eaa:	897a      	ldrh	r2, [r7, #10]
 8010eac:	893b      	ldrh	r3, [r7, #8]
 8010eae:	4413      	add	r3, r2
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	3314      	adds	r3, #20
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010eba:	4619      	mov	r1, r3
 8010ebc:	2022      	movs	r0, #34	; 0x22
 8010ebe:	f7fa fbfd 	bl	800b6bc <pbuf_alloc>
 8010ec2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d04d      	beq.n	8010f66 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010eca:	897b      	ldrh	r3, [r7, #10]
 8010ecc:	3313      	adds	r3, #19
 8010ece:	697a      	ldr	r2, [r7, #20]
 8010ed0:	8952      	ldrh	r2, [r2, #10]
 8010ed2:	4293      	cmp	r3, r2
 8010ed4:	db06      	blt.n	8010ee4 <tcp_output_alloc_header_common+0x4c>
 8010ed6:	4b26      	ldr	r3, [pc, #152]	; (8010f70 <tcp_output_alloc_header_common+0xd8>)
 8010ed8:	f240 7223 	movw	r2, #1827	; 0x723
 8010edc:	4925      	ldr	r1, [pc, #148]	; (8010f74 <tcp_output_alloc_header_common+0xdc>)
 8010ede:	4826      	ldr	r0, [pc, #152]	; (8010f78 <tcp_output_alloc_header_common+0xe0>)
 8010ee0:	f003 ffe8 	bl	8014eb4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	685b      	ldr	r3, [r3, #4]
 8010ee8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010eea:	8c3b      	ldrh	r3, [r7, #32]
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7f9 fad7 	bl	800a4a0 <lwip_htons>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	461a      	mov	r2, r3
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010efc:	4618      	mov	r0, r3
 8010efe:	f7f9 facf 	bl	800a4a0 <lwip_htons>
 8010f02:	4603      	mov	r3, r0
 8010f04:	461a      	mov	r2, r3
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	687a      	ldr	r2, [r7, #4]
 8010f0e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010f10:	68f8      	ldr	r0, [r7, #12]
 8010f12:	f7f9 fada 	bl	800a4ca <lwip_htonl>
 8010f16:	4602      	mov	r2, r0
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010f1c:	897b      	ldrh	r3, [r7, #10]
 8010f1e:	089b      	lsrs	r3, r3, #2
 8010f20:	b29b      	uxth	r3, r3
 8010f22:	3305      	adds	r3, #5
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	031b      	lsls	r3, r3, #12
 8010f28:	b29a      	uxth	r2, r3
 8010f2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	4313      	orrs	r3, r2
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7f9 fab3 	bl	800a4a0 <lwip_htons>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	461a      	mov	r2, r3
 8010f3e:	693b      	ldr	r3, [r7, #16]
 8010f40:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010f42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7f9 faab 	bl	800a4a0 <lwip_htons>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	461a      	mov	r2, r3
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010f52:	693b      	ldr	r3, [r7, #16]
 8010f54:	2200      	movs	r2, #0
 8010f56:	741a      	strb	r2, [r3, #16]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	2200      	movs	r2, #0
 8010f60:	749a      	strb	r2, [r3, #18]
 8010f62:	2200      	movs	r2, #0
 8010f64:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010f66:	697b      	ldr	r3, [r7, #20]
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	3718      	adds	r7, #24
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}
 8010f70:	08018364 	.word	0x08018364
 8010f74:	08018a3c 	.word	0x08018a3c
 8010f78:	080183b8 	.word	0x080183b8

08010f7c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010f7c:	b5b0      	push	{r4, r5, r7, lr}
 8010f7e:	b08a      	sub	sp, #40	; 0x28
 8010f80:	af04      	add	r7, sp, #16
 8010f82:	60f8      	str	r0, [r7, #12]
 8010f84:	607b      	str	r3, [r7, #4]
 8010f86:	460b      	mov	r3, r1
 8010f88:	817b      	strh	r3, [r7, #10]
 8010f8a:	4613      	mov	r3, r2
 8010f8c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d106      	bne.n	8010fa2 <tcp_output_alloc_header+0x26>
 8010f94:	4b15      	ldr	r3, [pc, #84]	; (8010fec <tcp_output_alloc_header+0x70>)
 8010f96:	f240 7242 	movw	r2, #1858	; 0x742
 8010f9a:	4915      	ldr	r1, [pc, #84]	; (8010ff0 <tcp_output_alloc_header+0x74>)
 8010f9c:	4815      	ldr	r0, [pc, #84]	; (8010ff4 <tcp_output_alloc_header+0x78>)
 8010f9e:	f003 ff89 	bl	8014eb4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	8adb      	ldrh	r3, [r3, #22]
 8010faa:	68fa      	ldr	r2, [r7, #12]
 8010fac:	8b12      	ldrh	r2, [r2, #24]
 8010fae:	68f9      	ldr	r1, [r7, #12]
 8010fb0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010fb2:	893d      	ldrh	r5, [r7, #8]
 8010fb4:	897c      	ldrh	r4, [r7, #10]
 8010fb6:	9103      	str	r1, [sp, #12]
 8010fb8:	2110      	movs	r1, #16
 8010fba:	9102      	str	r1, [sp, #8]
 8010fbc:	9201      	str	r2, [sp, #4]
 8010fbe:	9300      	str	r3, [sp, #0]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	462a      	mov	r2, r5
 8010fc4:	4621      	mov	r1, r4
 8010fc6:	f7ff ff67 	bl	8010e98 <tcp_output_alloc_header_common>
 8010fca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d006      	beq.n	8010fe0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fd6:	68fa      	ldr	r2, [r7, #12]
 8010fd8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010fda:	441a      	add	r2, r3
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010fe0:	697b      	ldr	r3, [r7, #20]
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	3718      	adds	r7, #24
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8010fea:	bf00      	nop
 8010fec:	08018364 	.word	0x08018364
 8010ff0:	08018a6c 	.word	0x08018a6c
 8010ff4:	080183b8 	.word	0x080183b8

08010ff8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b088      	sub	sp, #32
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	60f8      	str	r0, [r7, #12]
 8011000:	60b9      	str	r1, [r7, #8]
 8011002:	4611      	mov	r1, r2
 8011004:	461a      	mov	r2, r3
 8011006:	460b      	mov	r3, r1
 8011008:	71fb      	strb	r3, [r7, #7]
 801100a:	4613      	mov	r3, r2
 801100c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801100e:	2300      	movs	r3, #0
 8011010:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d106      	bne.n	8011026 <tcp_output_fill_options+0x2e>
 8011018:	4b13      	ldr	r3, [pc, #76]	; (8011068 <tcp_output_fill_options+0x70>)
 801101a:	f240 7256 	movw	r2, #1878	; 0x756
 801101e:	4913      	ldr	r1, [pc, #76]	; (801106c <tcp_output_fill_options+0x74>)
 8011020:	4813      	ldr	r0, [pc, #76]	; (8011070 <tcp_output_fill_options+0x78>)
 8011022:	f003 ff47 	bl	8014eb4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801102c:	69bb      	ldr	r3, [r7, #24]
 801102e:	3314      	adds	r3, #20
 8011030:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011032:	69bb      	ldr	r3, [r7, #24]
 8011034:	f103 0214 	add.w	r2, r3, #20
 8011038:	8bfb      	ldrh	r3, [r7, #30]
 801103a:	009b      	lsls	r3, r3, #2
 801103c:	4619      	mov	r1, r3
 801103e:	79fb      	ldrb	r3, [r7, #7]
 8011040:	009b      	lsls	r3, r3, #2
 8011042:	f003 0304 	and.w	r3, r3, #4
 8011046:	440b      	add	r3, r1
 8011048:	4413      	add	r3, r2
 801104a:	697a      	ldr	r2, [r7, #20]
 801104c:	429a      	cmp	r2, r3
 801104e:	d006      	beq.n	801105e <tcp_output_fill_options+0x66>
 8011050:	4b05      	ldr	r3, [pc, #20]	; (8011068 <tcp_output_fill_options+0x70>)
 8011052:	f240 7275 	movw	r2, #1909	; 0x775
 8011056:	4907      	ldr	r1, [pc, #28]	; (8011074 <tcp_output_fill_options+0x7c>)
 8011058:	4805      	ldr	r0, [pc, #20]	; (8011070 <tcp_output_fill_options+0x78>)
 801105a:	f003 ff2b 	bl	8014eb4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801105e:	bf00      	nop
 8011060:	3720      	adds	r7, #32
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
 8011066:	bf00      	nop
 8011068:	08018364 	.word	0x08018364
 801106c:	08018a94 	.word	0x08018a94
 8011070:	080183b8 	.word	0x080183b8
 8011074:	0801898c 	.word	0x0801898c

08011078 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b08a      	sub	sp, #40	; 0x28
 801107c:	af04      	add	r7, sp, #16
 801107e:	60f8      	str	r0, [r7, #12]
 8011080:	60b9      	str	r1, [r7, #8]
 8011082:	607a      	str	r2, [r7, #4]
 8011084:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d106      	bne.n	801109a <tcp_output_control_segment+0x22>
 801108c:	4b1c      	ldr	r3, [pc, #112]	; (8011100 <tcp_output_control_segment+0x88>)
 801108e:	f240 7287 	movw	r2, #1927	; 0x787
 8011092:	491c      	ldr	r1, [pc, #112]	; (8011104 <tcp_output_control_segment+0x8c>)
 8011094:	481c      	ldr	r0, [pc, #112]	; (8011108 <tcp_output_control_segment+0x90>)
 8011096:	f003 ff0d 	bl	8014eb4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801109a:	683a      	ldr	r2, [r7, #0]
 801109c:	6879      	ldr	r1, [r7, #4]
 801109e:	68f8      	ldr	r0, [r7, #12]
 80110a0:	f7fe ff40 	bl	800ff24 <tcp_route>
 80110a4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d102      	bne.n	80110b2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80110ac:	23fc      	movs	r3, #252	; 0xfc
 80110ae:	75fb      	strb	r3, [r7, #23]
 80110b0:	e01c      	b.n	80110ec <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d006      	beq.n	80110c6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	7adb      	ldrb	r3, [r3, #11]
 80110bc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	7a9b      	ldrb	r3, [r3, #10]
 80110c2:	757b      	strb	r3, [r7, #21]
 80110c4:	e003      	b.n	80110ce <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80110c6:	23ff      	movs	r3, #255	; 0xff
 80110c8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80110ca:	2300      	movs	r3, #0
 80110cc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80110ce:	7dba      	ldrb	r2, [r7, #22]
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	9302      	str	r3, [sp, #8]
 80110d4:	2306      	movs	r3, #6
 80110d6:	9301      	str	r3, [sp, #4]
 80110d8:	7d7b      	ldrb	r3, [r7, #21]
 80110da:	9300      	str	r3, [sp, #0]
 80110dc:	4613      	mov	r3, r2
 80110de:	683a      	ldr	r2, [r7, #0]
 80110e0:	6879      	ldr	r1, [r7, #4]
 80110e2:	68b8      	ldr	r0, [r7, #8]
 80110e4:	f002 fa90 	bl	8013608 <ip4_output_if>
 80110e8:	4603      	mov	r3, r0
 80110ea:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80110ec:	68b8      	ldr	r0, [r7, #8]
 80110ee:	f7fa fdc9 	bl	800bc84 <pbuf_free>
  return err;
 80110f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3718      	adds	r7, #24
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	08018364 	.word	0x08018364
 8011104:	08018abc 	.word	0x08018abc
 8011108:	080183b8 	.word	0x080183b8

0801110c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801110c:	b590      	push	{r4, r7, lr}
 801110e:	b08b      	sub	sp, #44	; 0x2c
 8011110:	af04      	add	r7, sp, #16
 8011112:	60f8      	str	r0, [r7, #12]
 8011114:	60b9      	str	r1, [r7, #8]
 8011116:	607a      	str	r2, [r7, #4]
 8011118:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801111a:	683b      	ldr	r3, [r7, #0]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d106      	bne.n	801112e <tcp_rst+0x22>
 8011120:	4b1f      	ldr	r3, [pc, #124]	; (80111a0 <tcp_rst+0x94>)
 8011122:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011126:	491f      	ldr	r1, [pc, #124]	; (80111a4 <tcp_rst+0x98>)
 8011128:	481f      	ldr	r0, [pc, #124]	; (80111a8 <tcp_rst+0x9c>)
 801112a:	f003 fec3 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801112e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011130:	2b00      	cmp	r3, #0
 8011132:	d106      	bne.n	8011142 <tcp_rst+0x36>
 8011134:	4b1a      	ldr	r3, [pc, #104]	; (80111a0 <tcp_rst+0x94>)
 8011136:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801113a:	491c      	ldr	r1, [pc, #112]	; (80111ac <tcp_rst+0xa0>)
 801113c:	481a      	ldr	r0, [pc, #104]	; (80111a8 <tcp_rst+0x9c>)
 801113e:	f003 feb9 	bl	8014eb4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011142:	2300      	movs	r3, #0
 8011144:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011146:	f246 0308 	movw	r3, #24584	; 0x6008
 801114a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801114c:	7dfb      	ldrb	r3, [r7, #23]
 801114e:	b29c      	uxth	r4, r3
 8011150:	68b8      	ldr	r0, [r7, #8]
 8011152:	f7f9 f9ba 	bl	800a4ca <lwip_htonl>
 8011156:	4602      	mov	r2, r0
 8011158:	8abb      	ldrh	r3, [r7, #20]
 801115a:	9303      	str	r3, [sp, #12]
 801115c:	2314      	movs	r3, #20
 801115e:	9302      	str	r3, [sp, #8]
 8011160:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011162:	9301      	str	r3, [sp, #4]
 8011164:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011166:	9300      	str	r3, [sp, #0]
 8011168:	4613      	mov	r3, r2
 801116a:	2200      	movs	r2, #0
 801116c:	4621      	mov	r1, r4
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	f7ff fe92 	bl	8010e98 <tcp_output_alloc_header_common>
 8011174:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011176:	693b      	ldr	r3, [r7, #16]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d00c      	beq.n	8011196 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801117c:	7dfb      	ldrb	r3, [r7, #23]
 801117e:	2200      	movs	r2, #0
 8011180:	6939      	ldr	r1, [r7, #16]
 8011182:	68f8      	ldr	r0, [r7, #12]
 8011184:	f7ff ff38 	bl	8010ff8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801118a:	683a      	ldr	r2, [r7, #0]
 801118c:	6939      	ldr	r1, [r7, #16]
 801118e:	68f8      	ldr	r0, [r7, #12]
 8011190:	f7ff ff72 	bl	8011078 <tcp_output_control_segment>
 8011194:	e000      	b.n	8011198 <tcp_rst+0x8c>
    return;
 8011196:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011198:	371c      	adds	r7, #28
 801119a:	46bd      	mov	sp, r7
 801119c:	bd90      	pop	{r4, r7, pc}
 801119e:	bf00      	nop
 80111a0:	08018364 	.word	0x08018364
 80111a4:	08018ae8 	.word	0x08018ae8
 80111a8:	080183b8 	.word	0x080183b8
 80111ac:	08018b04 	.word	0x08018b04

080111b0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80111b0:	b590      	push	{r4, r7, lr}
 80111b2:	b087      	sub	sp, #28
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80111b8:	2300      	movs	r3, #0
 80111ba:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80111bc:	2300      	movs	r3, #0
 80111be:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d106      	bne.n	80111d4 <tcp_send_empty_ack+0x24>
 80111c6:	4b28      	ldr	r3, [pc, #160]	; (8011268 <tcp_send_empty_ack+0xb8>)
 80111c8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80111cc:	4927      	ldr	r1, [pc, #156]	; (801126c <tcp_send_empty_ack+0xbc>)
 80111ce:	4828      	ldr	r0, [pc, #160]	; (8011270 <tcp_send_empty_ack+0xc0>)
 80111d0:	f003 fe70 	bl	8014eb4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80111d4:	7dfb      	ldrb	r3, [r7, #23]
 80111d6:	009b      	lsls	r3, r3, #2
 80111d8:	b2db      	uxtb	r3, r3
 80111da:	f003 0304 	and.w	r3, r3, #4
 80111de:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80111e0:	7d7b      	ldrb	r3, [r7, #21]
 80111e2:	b29c      	uxth	r4, r3
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7f9 f96e 	bl	800a4ca <lwip_htonl>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2200      	movs	r2, #0
 80111f2:	4621      	mov	r1, r4
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f7ff fec1 	bl	8010f7c <tcp_output_alloc_header>
 80111fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d109      	bne.n	8011216 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	8b5b      	ldrh	r3, [r3, #26]
 8011206:	f043 0303 	orr.w	r3, r3, #3
 801120a:	b29a      	uxth	r2, r3
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011210:	f06f 0301 	mvn.w	r3, #1
 8011214:	e023      	b.n	801125e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011216:	7dbb      	ldrb	r3, [r7, #22]
 8011218:	7dfa      	ldrb	r2, [r7, #23]
 801121a:	6939      	ldr	r1, [r7, #16]
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f7ff feeb 	bl	8010ff8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011222:	687a      	ldr	r2, [r7, #4]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	3304      	adds	r3, #4
 8011228:	6939      	ldr	r1, [r7, #16]
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f7ff ff24 	bl	8011078 <tcp_output_control_segment>
 8011230:	4603      	mov	r3, r0
 8011232:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d007      	beq.n	801124c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	8b5b      	ldrh	r3, [r3, #26]
 8011240:	f043 0303 	orr.w	r3, r3, #3
 8011244:	b29a      	uxth	r2, r3
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	835a      	strh	r2, [r3, #26]
 801124a:	e006      	b.n	801125a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	8b5b      	ldrh	r3, [r3, #26]
 8011250:	f023 0303 	bic.w	r3, r3, #3
 8011254:	b29a      	uxth	r2, r3
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801125e:	4618      	mov	r0, r3
 8011260:	371c      	adds	r7, #28
 8011262:	46bd      	mov	sp, r7
 8011264:	bd90      	pop	{r4, r7, pc}
 8011266:	bf00      	nop
 8011268:	08018364 	.word	0x08018364
 801126c:	08018b20 	.word	0x08018b20
 8011270:	080183b8 	.word	0x080183b8

08011274 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011274:	b590      	push	{r4, r7, lr}
 8011276:	b087      	sub	sp, #28
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801127c:	2300      	movs	r3, #0
 801127e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d106      	bne.n	8011294 <tcp_keepalive+0x20>
 8011286:	4b18      	ldr	r3, [pc, #96]	; (80112e8 <tcp_keepalive+0x74>)
 8011288:	f640 0224 	movw	r2, #2084	; 0x824
 801128c:	4917      	ldr	r1, [pc, #92]	; (80112ec <tcp_keepalive+0x78>)
 801128e:	4818      	ldr	r0, [pc, #96]	; (80112f0 <tcp_keepalive+0x7c>)
 8011290:	f003 fe10 	bl	8014eb4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011294:	7dfb      	ldrb	r3, [r7, #23]
 8011296:	b29c      	uxth	r4, r3
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801129c:	3b01      	subs	r3, #1
 801129e:	4618      	mov	r0, r3
 80112a0:	f7f9 f913 	bl	800a4ca <lwip_htonl>
 80112a4:	4603      	mov	r3, r0
 80112a6:	2200      	movs	r2, #0
 80112a8:	4621      	mov	r1, r4
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f7ff fe66 	bl	8010f7c <tcp_output_alloc_header>
 80112b0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d102      	bne.n	80112be <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80112b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80112bc:	e010      	b.n	80112e0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80112be:	7dfb      	ldrb	r3, [r7, #23]
 80112c0:	2200      	movs	r2, #0
 80112c2:	6939      	ldr	r1, [r7, #16]
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f7ff fe97 	bl	8010ff8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80112ca:	687a      	ldr	r2, [r7, #4]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	3304      	adds	r3, #4
 80112d0:	6939      	ldr	r1, [r7, #16]
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f7ff fed0 	bl	8011078 <tcp_output_control_segment>
 80112d8:	4603      	mov	r3, r0
 80112da:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80112dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	371c      	adds	r7, #28
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd90      	pop	{r4, r7, pc}
 80112e8:	08018364 	.word	0x08018364
 80112ec:	08018b40 	.word	0x08018b40
 80112f0:	080183b8 	.word	0x080183b8

080112f4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80112f4:	b590      	push	{r4, r7, lr}
 80112f6:	b08b      	sub	sp, #44	; 0x2c
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80112fc:	2300      	movs	r3, #0
 80112fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d106      	bne.n	8011316 <tcp_zero_window_probe+0x22>
 8011308:	4b4c      	ldr	r3, [pc, #304]	; (801143c <tcp_zero_window_probe+0x148>)
 801130a:	f640 024f 	movw	r2, #2127	; 0x84f
 801130e:	494c      	ldr	r1, [pc, #304]	; (8011440 <tcp_zero_window_probe+0x14c>)
 8011310:	484c      	ldr	r0, [pc, #304]	; (8011444 <tcp_zero_window_probe+0x150>)
 8011312:	f003 fdcf 	bl	8014eb4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801131a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801131c:	6a3b      	ldr	r3, [r7, #32]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d101      	bne.n	8011326 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011322:	2300      	movs	r3, #0
 8011324:	e086      	b.n	8011434 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801132c:	2bff      	cmp	r3, #255	; 0xff
 801132e:	d007      	beq.n	8011340 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011336:	3301      	adds	r3, #1
 8011338:	b2da      	uxtb	r2, r3
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011340:	6a3b      	ldr	r3, [r7, #32]
 8011342:	68db      	ldr	r3, [r3, #12]
 8011344:	899b      	ldrh	r3, [r3, #12]
 8011346:	b29b      	uxth	r3, r3
 8011348:	4618      	mov	r0, r3
 801134a:	f7f9 f8a9 	bl	800a4a0 <lwip_htons>
 801134e:	4603      	mov	r3, r0
 8011350:	b2db      	uxtb	r3, r3
 8011352:	f003 0301 	and.w	r3, r3, #1
 8011356:	2b00      	cmp	r3, #0
 8011358:	d005      	beq.n	8011366 <tcp_zero_window_probe+0x72>
 801135a:	6a3b      	ldr	r3, [r7, #32]
 801135c:	891b      	ldrh	r3, [r3, #8]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d101      	bne.n	8011366 <tcp_zero_window_probe+0x72>
 8011362:	2301      	movs	r3, #1
 8011364:	e000      	b.n	8011368 <tcp_zero_window_probe+0x74>
 8011366:	2300      	movs	r3, #0
 8011368:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801136a:	7ffb      	ldrb	r3, [r7, #31]
 801136c:	2b00      	cmp	r3, #0
 801136e:	bf0c      	ite	eq
 8011370:	2301      	moveq	r3, #1
 8011372:	2300      	movne	r3, #0
 8011374:	b2db      	uxtb	r3, r3
 8011376:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801137c:	b299      	uxth	r1, r3
 801137e:	6a3b      	ldr	r3, [r7, #32]
 8011380:	68db      	ldr	r3, [r3, #12]
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	8bba      	ldrh	r2, [r7, #28]
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f7ff fdf8 	bl	8010f7c <tcp_output_alloc_header>
 801138c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801138e:	69bb      	ldr	r3, [r7, #24]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d102      	bne.n	801139a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011398:	e04c      	b.n	8011434 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801139a:	69bb      	ldr	r3, [r7, #24]
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80113a0:	7ffb      	ldrb	r3, [r7, #31]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d011      	beq.n	80113ca <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80113a6:	697b      	ldr	r3, [r7, #20]
 80113a8:	899b      	ldrh	r3, [r3, #12]
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	b21b      	sxth	r3, r3
 80113ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80113b2:	b21c      	sxth	r4, r3
 80113b4:	2011      	movs	r0, #17
 80113b6:	f7f9 f873 	bl	800a4a0 <lwip_htons>
 80113ba:	4603      	mov	r3, r0
 80113bc:	b21b      	sxth	r3, r3
 80113be:	4323      	orrs	r3, r4
 80113c0:	b21b      	sxth	r3, r3
 80113c2:	b29a      	uxth	r2, r3
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	819a      	strh	r2, [r3, #12]
 80113c8:	e010      	b.n	80113ec <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80113ca:	69bb      	ldr	r3, [r7, #24]
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	3314      	adds	r3, #20
 80113d0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80113d2:	6a3b      	ldr	r3, [r7, #32]
 80113d4:	6858      	ldr	r0, [r3, #4]
 80113d6:	6a3b      	ldr	r3, [r7, #32]
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	891a      	ldrh	r2, [r3, #8]
 80113dc:	6a3b      	ldr	r3, [r7, #32]
 80113de:	891b      	ldrh	r3, [r3, #8]
 80113e0:	1ad3      	subs	r3, r2, r3
 80113e2:	b29b      	uxth	r3, r3
 80113e4:	2201      	movs	r2, #1
 80113e6:	6939      	ldr	r1, [r7, #16]
 80113e8:	f7fa fe52 	bl	800c090 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80113ec:	6a3b      	ldr	r3, [r7, #32]
 80113ee:	68db      	ldr	r3, [r3, #12]
 80113f0:	685b      	ldr	r3, [r3, #4]
 80113f2:	4618      	mov	r0, r3
 80113f4:	f7f9 f869 	bl	800a4ca <lwip_htonl>
 80113f8:	4603      	mov	r3, r0
 80113fa:	3301      	adds	r3, #1
 80113fc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	1ad3      	subs	r3, r2, r3
 8011406:	2b00      	cmp	r3, #0
 8011408:	da02      	bge.n	8011410 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	68fa      	ldr	r2, [r7, #12]
 801140e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011414:	2200      	movs	r2, #0
 8011416:	69b9      	ldr	r1, [r7, #24]
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f7ff fded 	bl	8010ff8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	3304      	adds	r3, #4
 8011424:	69b9      	ldr	r1, [r7, #24]
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f7ff fe26 	bl	8011078 <tcp_output_control_segment>
 801142c:	4603      	mov	r3, r0
 801142e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011430:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011434:	4618      	mov	r0, r3
 8011436:	372c      	adds	r7, #44	; 0x2c
 8011438:	46bd      	mov	sp, r7
 801143a:	bd90      	pop	{r4, r7, pc}
 801143c:	08018364 	.word	0x08018364
 8011440:	08018b5c 	.word	0x08018b5c
 8011444:	080183b8 	.word	0x080183b8

08011448 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011450:	f7fa ff0c 	bl	800c26c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011454:	4b0a      	ldr	r3, [pc, #40]	; (8011480 <tcpip_tcp_timer+0x38>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d103      	bne.n	8011464 <tcpip_tcp_timer+0x1c>
 801145c:	4b09      	ldr	r3, [pc, #36]	; (8011484 <tcpip_tcp_timer+0x3c>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d005      	beq.n	8011470 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011464:	2200      	movs	r2, #0
 8011466:	4908      	ldr	r1, [pc, #32]	; (8011488 <tcpip_tcp_timer+0x40>)
 8011468:	20fa      	movs	r0, #250	; 0xfa
 801146a:	f000 f8f3 	bl	8011654 <sys_timeout>
 801146e:	e003      	b.n	8011478 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011470:	4b06      	ldr	r3, [pc, #24]	; (801148c <tcpip_tcp_timer+0x44>)
 8011472:	2200      	movs	r2, #0
 8011474:	601a      	str	r2, [r3, #0]
  }
}
 8011476:	bf00      	nop
 8011478:	bf00      	nop
 801147a:	3708      	adds	r7, #8
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}
 8011480:	20017ad4 	.word	0x20017ad4
 8011484:	20017ad8 	.word	0x20017ad8
 8011488:	08011449 	.word	0x08011449
 801148c:	20017b20 	.word	0x20017b20

08011490 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011494:	4b0a      	ldr	r3, [pc, #40]	; (80114c0 <tcp_timer_needed+0x30>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d10f      	bne.n	80114bc <tcp_timer_needed+0x2c>
 801149c:	4b09      	ldr	r3, [pc, #36]	; (80114c4 <tcp_timer_needed+0x34>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d103      	bne.n	80114ac <tcp_timer_needed+0x1c>
 80114a4:	4b08      	ldr	r3, [pc, #32]	; (80114c8 <tcp_timer_needed+0x38>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d007      	beq.n	80114bc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80114ac:	4b04      	ldr	r3, [pc, #16]	; (80114c0 <tcp_timer_needed+0x30>)
 80114ae:	2201      	movs	r2, #1
 80114b0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80114b2:	2200      	movs	r2, #0
 80114b4:	4905      	ldr	r1, [pc, #20]	; (80114cc <tcp_timer_needed+0x3c>)
 80114b6:	20fa      	movs	r0, #250	; 0xfa
 80114b8:	f000 f8cc 	bl	8011654 <sys_timeout>
  }
}
 80114bc:	bf00      	nop
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	20017b20 	.word	0x20017b20
 80114c4:	20017ad4 	.word	0x20017ad4
 80114c8:	20017ad8 	.word	0x20017ad8
 80114cc:	08011449 	.word	0x08011449

080114d0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b086      	sub	sp, #24
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	60f8      	str	r0, [r7, #12]
 80114d8:	60b9      	str	r1, [r7, #8]
 80114da:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80114dc:	200a      	movs	r0, #10
 80114de:	f7f9 fcb7 	bl	800ae50 <memp_malloc>
 80114e2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d109      	bne.n	80114fe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d151      	bne.n	8011594 <sys_timeout_abs+0xc4>
 80114f0:	4b2a      	ldr	r3, [pc, #168]	; (801159c <sys_timeout_abs+0xcc>)
 80114f2:	22be      	movs	r2, #190	; 0xbe
 80114f4:	492a      	ldr	r1, [pc, #168]	; (80115a0 <sys_timeout_abs+0xd0>)
 80114f6:	482b      	ldr	r0, [pc, #172]	; (80115a4 <sys_timeout_abs+0xd4>)
 80114f8:	f003 fcdc 	bl	8014eb4 <iprintf>
    return;
 80114fc:	e04a      	b.n	8011594 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80114fe:	693b      	ldr	r3, [r7, #16]
 8011500:	2200      	movs	r2, #0
 8011502:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	68ba      	ldr	r2, [r7, #8]
 8011508:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011510:	693b      	ldr	r3, [r7, #16]
 8011512:	68fa      	ldr	r2, [r7, #12]
 8011514:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011516:	4b24      	ldr	r3, [pc, #144]	; (80115a8 <sys_timeout_abs+0xd8>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d103      	bne.n	8011526 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801151e:	4a22      	ldr	r2, [pc, #136]	; (80115a8 <sys_timeout_abs+0xd8>)
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	6013      	str	r3, [r2, #0]
    return;
 8011524:	e037      	b.n	8011596 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	685a      	ldr	r2, [r3, #4]
 801152a:	4b1f      	ldr	r3, [pc, #124]	; (80115a8 <sys_timeout_abs+0xd8>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	685b      	ldr	r3, [r3, #4]
 8011530:	1ad3      	subs	r3, r2, r3
 8011532:	0fdb      	lsrs	r3, r3, #31
 8011534:	f003 0301 	and.w	r3, r3, #1
 8011538:	b2db      	uxtb	r3, r3
 801153a:	2b00      	cmp	r3, #0
 801153c:	d007      	beq.n	801154e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801153e:	4b1a      	ldr	r3, [pc, #104]	; (80115a8 <sys_timeout_abs+0xd8>)
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	693b      	ldr	r3, [r7, #16]
 8011544:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011546:	4a18      	ldr	r2, [pc, #96]	; (80115a8 <sys_timeout_abs+0xd8>)
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	6013      	str	r3, [r2, #0]
 801154c:	e023      	b.n	8011596 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801154e:	4b16      	ldr	r3, [pc, #88]	; (80115a8 <sys_timeout_abs+0xd8>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	617b      	str	r3, [r7, #20]
 8011554:	e01a      	b.n	801158c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d00b      	beq.n	8011576 <sys_timeout_abs+0xa6>
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	685a      	ldr	r2, [r3, #4]
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	685b      	ldr	r3, [r3, #4]
 8011568:	1ad3      	subs	r3, r2, r3
 801156a:	0fdb      	lsrs	r3, r3, #31
 801156c:	f003 0301 	and.w	r3, r3, #1
 8011570:	b2db      	uxtb	r3, r3
 8011572:	2b00      	cmp	r3, #0
 8011574:	d007      	beq.n	8011586 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011576:	697b      	ldr	r3, [r7, #20]
 8011578:	681a      	ldr	r2, [r3, #0]
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801157e:	697b      	ldr	r3, [r7, #20]
 8011580:	693a      	ldr	r2, [r7, #16]
 8011582:	601a      	str	r2, [r3, #0]
        break;
 8011584:	e007      	b.n	8011596 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	617b      	str	r3, [r7, #20]
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d1e1      	bne.n	8011556 <sys_timeout_abs+0x86>
 8011592:	e000      	b.n	8011596 <sys_timeout_abs+0xc6>
    return;
 8011594:	bf00      	nop
      }
    }
  }
}
 8011596:	3718      	adds	r7, #24
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}
 801159c:	08018b80 	.word	0x08018b80
 80115a0:	08018bb4 	.word	0x08018bb4
 80115a4:	08018bf4 	.word	0x08018bf4
 80115a8:	20017b18 	.word	0x20017b18

080115ac <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b086      	sub	sp, #24
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	4798      	blx	r3

  now = sys_now();
 80115be:	f7f5 f90d 	bl	80067dc <sys_now>
 80115c2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	681a      	ldr	r2, [r3, #0]
 80115c8:	4b0f      	ldr	r3, [pc, #60]	; (8011608 <lwip_cyclic_timer+0x5c>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	4413      	add	r3, r2
 80115ce:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80115d0:	68fa      	ldr	r2, [r7, #12]
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	1ad3      	subs	r3, r2, r3
 80115d6:	0fdb      	lsrs	r3, r3, #31
 80115d8:	f003 0301 	and.w	r3, r3, #1
 80115dc:	b2db      	uxtb	r3, r3
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d009      	beq.n	80115f6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80115e2:	697b      	ldr	r3, [r7, #20]
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	693b      	ldr	r3, [r7, #16]
 80115e8:	4413      	add	r3, r2
 80115ea:	687a      	ldr	r2, [r7, #4]
 80115ec:	4907      	ldr	r1, [pc, #28]	; (801160c <lwip_cyclic_timer+0x60>)
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7ff ff6e 	bl	80114d0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80115f4:	e004      	b.n	8011600 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80115f6:	687a      	ldr	r2, [r7, #4]
 80115f8:	4904      	ldr	r1, [pc, #16]	; (801160c <lwip_cyclic_timer+0x60>)
 80115fa:	68f8      	ldr	r0, [r7, #12]
 80115fc:	f7ff ff68 	bl	80114d0 <sys_timeout_abs>
}
 8011600:	bf00      	nop
 8011602:	3718      	adds	r7, #24
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}
 8011608:	20017b1c 	.word	0x20017b1c
 801160c:	080115ad 	.word	0x080115ad

08011610 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b082      	sub	sp, #8
 8011614:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011616:	2301      	movs	r3, #1
 8011618:	607b      	str	r3, [r7, #4]
 801161a:	e00e      	b.n	801163a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801161c:	4a0b      	ldr	r2, [pc, #44]	; (801164c <sys_timeouts_init+0x3c>)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	00db      	lsls	r3, r3, #3
 8011628:	4a08      	ldr	r2, [pc, #32]	; (801164c <sys_timeouts_init+0x3c>)
 801162a:	4413      	add	r3, r2
 801162c:	461a      	mov	r2, r3
 801162e:	4908      	ldr	r1, [pc, #32]	; (8011650 <sys_timeouts_init+0x40>)
 8011630:	f000 f810 	bl	8011654 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	3301      	adds	r3, #1
 8011638:	607b      	str	r3, [r7, #4]
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2b02      	cmp	r3, #2
 801163e:	d9ed      	bls.n	801161c <sys_timeouts_init+0xc>
  }
}
 8011640:	bf00      	nop
 8011642:	bf00      	nop
 8011644:	3708      	adds	r7, #8
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}
 801164a:	bf00      	nop
 801164c:	080197b8 	.word	0x080197b8
 8011650:	080115ad 	.word	0x080115ad

08011654 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b086      	sub	sp, #24
 8011658:	af00      	add	r7, sp, #0
 801165a:	60f8      	str	r0, [r7, #12]
 801165c:	60b9      	str	r1, [r7, #8]
 801165e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011666:	d306      	bcc.n	8011676 <sys_timeout+0x22>
 8011668:	4b0a      	ldr	r3, [pc, #40]	; (8011694 <sys_timeout+0x40>)
 801166a:	f240 1229 	movw	r2, #297	; 0x129
 801166e:	490a      	ldr	r1, [pc, #40]	; (8011698 <sys_timeout+0x44>)
 8011670:	480a      	ldr	r0, [pc, #40]	; (801169c <sys_timeout+0x48>)
 8011672:	f003 fc1f 	bl	8014eb4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011676:	f7f5 f8b1 	bl	80067dc <sys_now>
 801167a:	4602      	mov	r2, r0
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	4413      	add	r3, r2
 8011680:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011682:	687a      	ldr	r2, [r7, #4]
 8011684:	68b9      	ldr	r1, [r7, #8]
 8011686:	6978      	ldr	r0, [r7, #20]
 8011688:	f7ff ff22 	bl	80114d0 <sys_timeout_abs>
#endif
}
 801168c:	bf00      	nop
 801168e:	3718      	adds	r7, #24
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}
 8011694:	08018b80 	.word	0x08018b80
 8011698:	08018c1c 	.word	0x08018c1c
 801169c:	08018bf4 	.word	0x08018bf4

080116a0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b084      	sub	sp, #16
 80116a4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80116a6:	f7f5 f899 	bl	80067dc <sys_now>
 80116aa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80116ac:	4b17      	ldr	r3, [pc, #92]	; (801170c <sys_check_timeouts+0x6c>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d022      	beq.n	80116fe <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	685b      	ldr	r3, [r3, #4]
 80116bc:	68fa      	ldr	r2, [r7, #12]
 80116be:	1ad3      	subs	r3, r2, r3
 80116c0:	0fdb      	lsrs	r3, r3, #31
 80116c2:	f003 0301 	and.w	r3, r3, #1
 80116c6:	b2db      	uxtb	r3, r3
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d11a      	bne.n	8011702 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	4a0e      	ldr	r2, [pc, #56]	; (801170c <sys_check_timeouts+0x6c>)
 80116d2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80116d4:	68bb      	ldr	r3, [r7, #8]
 80116d6:	689b      	ldr	r3, [r3, #8]
 80116d8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	68db      	ldr	r3, [r3, #12]
 80116de:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	4a0a      	ldr	r2, [pc, #40]	; (8011710 <sys_check_timeouts+0x70>)
 80116e6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80116e8:	68b9      	ldr	r1, [r7, #8]
 80116ea:	200a      	movs	r0, #10
 80116ec:	f7f9 fc26 	bl	800af3c <memp_free>
    if (handler != NULL) {
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d0da      	beq.n	80116ac <sys_check_timeouts+0xc>
      handler(arg);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6838      	ldr	r0, [r7, #0]
 80116fa:	4798      	blx	r3
  do {
 80116fc:	e7d6      	b.n	80116ac <sys_check_timeouts+0xc>
      return;
 80116fe:	bf00      	nop
 8011700:	e000      	b.n	8011704 <sys_check_timeouts+0x64>
      return;
 8011702:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011704:	3710      	adds	r7, #16
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}
 801170a:	bf00      	nop
 801170c:	20017b18 	.word	0x20017b18
 8011710:	20017b1c 	.word	0x20017b1c

08011714 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801171a:	4b16      	ldr	r3, [pc, #88]	; (8011774 <sys_timeouts_sleeptime+0x60>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d102      	bne.n	8011728 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011726:	e020      	b.n	801176a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011728:	f7f5 f858 	bl	80067dc <sys_now>
 801172c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801172e:	4b11      	ldr	r3, [pc, #68]	; (8011774 <sys_timeouts_sleeptime+0x60>)
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	685a      	ldr	r2, [r3, #4]
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	1ad3      	subs	r3, r2, r3
 8011738:	0fdb      	lsrs	r3, r3, #31
 801173a:	f003 0301 	and.w	r3, r3, #1
 801173e:	b2db      	uxtb	r3, r3
 8011740:	2b00      	cmp	r3, #0
 8011742:	d001      	beq.n	8011748 <sys_timeouts_sleeptime+0x34>
    return 0;
 8011744:	2300      	movs	r3, #0
 8011746:	e010      	b.n	801176a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011748:	4b0a      	ldr	r3, [pc, #40]	; (8011774 <sys_timeouts_sleeptime+0x60>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	685a      	ldr	r2, [r3, #4]
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	1ad3      	subs	r3, r2, r3
 8011752:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	2b00      	cmp	r3, #0
 8011758:	da06      	bge.n	8011768 <sys_timeouts_sleeptime+0x54>
 801175a:	4b07      	ldr	r3, [pc, #28]	; (8011778 <sys_timeouts_sleeptime+0x64>)
 801175c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011760:	4906      	ldr	r1, [pc, #24]	; (801177c <sys_timeouts_sleeptime+0x68>)
 8011762:	4807      	ldr	r0, [pc, #28]	; (8011780 <sys_timeouts_sleeptime+0x6c>)
 8011764:	f003 fba6 	bl	8014eb4 <iprintf>
    return ret;
 8011768:	683b      	ldr	r3, [r7, #0]
  }
}
 801176a:	4618      	mov	r0, r3
 801176c:	3708      	adds	r7, #8
 801176e:	46bd      	mov	sp, r7
 8011770:	bd80      	pop	{r7, pc}
 8011772:	bf00      	nop
 8011774:	20017b18 	.word	0x20017b18
 8011778:	08018b80 	.word	0x08018b80
 801177c:	08018c54 	.word	0x08018c54
 8011780:	08018bf4 	.word	0x08018bf4

08011784 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011788:	f003 fc50 	bl	801502c <rand>
 801178c:	4603      	mov	r3, r0
 801178e:	b29b      	uxth	r3, r3
 8011790:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011794:	b29b      	uxth	r3, r3
 8011796:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801179a:	b29a      	uxth	r2, r3
 801179c:	4b01      	ldr	r3, [pc, #4]	; (80117a4 <udp_init+0x20>)
 801179e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80117a0:	bf00      	nop
 80117a2:	bd80      	pop	{r7, pc}
 80117a4:	2000002c 	.word	0x2000002c

080117a8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80117a8:	b480      	push	{r7}
 80117aa:	b083      	sub	sp, #12
 80117ac:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80117ae:	2300      	movs	r3, #0
 80117b0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80117b2:	4b17      	ldr	r3, [pc, #92]	; (8011810 <udp_new_port+0x68>)
 80117b4:	881b      	ldrh	r3, [r3, #0]
 80117b6:	1c5a      	adds	r2, r3, #1
 80117b8:	b291      	uxth	r1, r2
 80117ba:	4a15      	ldr	r2, [pc, #84]	; (8011810 <udp_new_port+0x68>)
 80117bc:	8011      	strh	r1, [r2, #0]
 80117be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117c2:	4293      	cmp	r3, r2
 80117c4:	d103      	bne.n	80117ce <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80117c6:	4b12      	ldr	r3, [pc, #72]	; (8011810 <udp_new_port+0x68>)
 80117c8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80117cc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80117ce:	4b11      	ldr	r3, [pc, #68]	; (8011814 <udp_new_port+0x6c>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	603b      	str	r3, [r7, #0]
 80117d4:	e011      	b.n	80117fa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	8a5a      	ldrh	r2, [r3, #18]
 80117da:	4b0d      	ldr	r3, [pc, #52]	; (8011810 <udp_new_port+0x68>)
 80117dc:	881b      	ldrh	r3, [r3, #0]
 80117de:	429a      	cmp	r2, r3
 80117e0:	d108      	bne.n	80117f4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80117e2:	88fb      	ldrh	r3, [r7, #6]
 80117e4:	3301      	adds	r3, #1
 80117e6:	80fb      	strh	r3, [r7, #6]
 80117e8:	88fb      	ldrh	r3, [r7, #6]
 80117ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80117ee:	d3e0      	bcc.n	80117b2 <udp_new_port+0xa>
        return 0;
 80117f0:	2300      	movs	r3, #0
 80117f2:	e007      	b.n	8011804 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	68db      	ldr	r3, [r3, #12]
 80117f8:	603b      	str	r3, [r7, #0]
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d1ea      	bne.n	80117d6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011800:	4b03      	ldr	r3, [pc, #12]	; (8011810 <udp_new_port+0x68>)
 8011802:	881b      	ldrh	r3, [r3, #0]
}
 8011804:	4618      	mov	r0, r3
 8011806:	370c      	adds	r7, #12
 8011808:	46bd      	mov	sp, r7
 801180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180e:	4770      	bx	lr
 8011810:	2000002c 	.word	0x2000002c
 8011814:	20017b24 	.word	0x20017b24

08011818 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b084      	sub	sp, #16
 801181c:	af00      	add	r7, sp, #0
 801181e:	60f8      	str	r0, [r7, #12]
 8011820:	60b9      	str	r1, [r7, #8]
 8011822:	4613      	mov	r3, r2
 8011824:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d105      	bne.n	8011838 <udp_input_local_match+0x20>
 801182c:	4b27      	ldr	r3, [pc, #156]	; (80118cc <udp_input_local_match+0xb4>)
 801182e:	2287      	movs	r2, #135	; 0x87
 8011830:	4927      	ldr	r1, [pc, #156]	; (80118d0 <udp_input_local_match+0xb8>)
 8011832:	4828      	ldr	r0, [pc, #160]	; (80118d4 <udp_input_local_match+0xbc>)
 8011834:	f003 fb3e 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011838:	68bb      	ldr	r3, [r7, #8]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d105      	bne.n	801184a <udp_input_local_match+0x32>
 801183e:	4b23      	ldr	r3, [pc, #140]	; (80118cc <udp_input_local_match+0xb4>)
 8011840:	2288      	movs	r2, #136	; 0x88
 8011842:	4925      	ldr	r1, [pc, #148]	; (80118d8 <udp_input_local_match+0xc0>)
 8011844:	4823      	ldr	r0, [pc, #140]	; (80118d4 <udp_input_local_match+0xbc>)
 8011846:	f003 fb35 	bl	8014eb4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	7a1b      	ldrb	r3, [r3, #8]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d00b      	beq.n	801186a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	7a1a      	ldrb	r2, [r3, #8]
 8011856:	4b21      	ldr	r3, [pc, #132]	; (80118dc <udp_input_local_match+0xc4>)
 8011858:	685b      	ldr	r3, [r3, #4]
 801185a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801185e:	3301      	adds	r3, #1
 8011860:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011862:	429a      	cmp	r2, r3
 8011864:	d001      	beq.n	801186a <udp_input_local_match+0x52>
    return 0;
 8011866:	2300      	movs	r3, #0
 8011868:	e02b      	b.n	80118c2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801186a:	79fb      	ldrb	r3, [r7, #7]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d018      	beq.n	80118a2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d013      	beq.n	801189e <udp_input_local_match+0x86>
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d00f      	beq.n	801189e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801187e:	4b17      	ldr	r3, [pc, #92]	; (80118dc <udp_input_local_match+0xc4>)
 8011880:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011886:	d00a      	beq.n	801189e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	681a      	ldr	r2, [r3, #0]
 801188c:	4b13      	ldr	r3, [pc, #76]	; (80118dc <udp_input_local_match+0xc4>)
 801188e:	695b      	ldr	r3, [r3, #20]
 8011890:	405a      	eors	r2, r3
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	3308      	adds	r3, #8
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801189a:	2b00      	cmp	r3, #0
 801189c:	d110      	bne.n	80118c0 <udp_input_local_match+0xa8>
          return 1;
 801189e:	2301      	movs	r3, #1
 80118a0:	e00f      	b.n	80118c2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d009      	beq.n	80118bc <udp_input_local_match+0xa4>
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d005      	beq.n	80118bc <udp_input_local_match+0xa4>
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	681a      	ldr	r2, [r3, #0]
 80118b4:	4b09      	ldr	r3, [pc, #36]	; (80118dc <udp_input_local_match+0xc4>)
 80118b6:	695b      	ldr	r3, [r3, #20]
 80118b8:	429a      	cmp	r2, r3
 80118ba:	d101      	bne.n	80118c0 <udp_input_local_match+0xa8>
        return 1;
 80118bc:	2301      	movs	r3, #1
 80118be:	e000      	b.n	80118c2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80118c0:	2300      	movs	r3, #0
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3710      	adds	r7, #16
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}
 80118ca:	bf00      	nop
 80118cc:	08018c68 	.word	0x08018c68
 80118d0:	08018c98 	.word	0x08018c98
 80118d4:	08018cbc 	.word	0x08018cbc
 80118d8:	08018ce4 	.word	0x08018ce4
 80118dc:	200139b4 	.word	0x200139b4

080118e0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80118e0:	b590      	push	{r4, r7, lr}
 80118e2:	b08d      	sub	sp, #52	; 0x34
 80118e4:	af02      	add	r7, sp, #8
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80118ea:	2300      	movs	r3, #0
 80118ec:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d105      	bne.n	8011900 <udp_input+0x20>
 80118f4:	4b7c      	ldr	r3, [pc, #496]	; (8011ae8 <udp_input+0x208>)
 80118f6:	22cf      	movs	r2, #207	; 0xcf
 80118f8:	497c      	ldr	r1, [pc, #496]	; (8011aec <udp_input+0x20c>)
 80118fa:	487d      	ldr	r0, [pc, #500]	; (8011af0 <udp_input+0x210>)
 80118fc:	f003 fada 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d105      	bne.n	8011912 <udp_input+0x32>
 8011906:	4b78      	ldr	r3, [pc, #480]	; (8011ae8 <udp_input+0x208>)
 8011908:	22d0      	movs	r2, #208	; 0xd0
 801190a:	497a      	ldr	r1, [pc, #488]	; (8011af4 <udp_input+0x214>)
 801190c:	4878      	ldr	r0, [pc, #480]	; (8011af0 <udp_input+0x210>)
 801190e:	f003 fad1 	bl	8014eb4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	895b      	ldrh	r3, [r3, #10]
 8011916:	2b07      	cmp	r3, #7
 8011918:	d803      	bhi.n	8011922 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f7fa f9b2 	bl	800bc84 <pbuf_free>
    goto end;
 8011920:	e0de      	b.n	8011ae0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	685b      	ldr	r3, [r3, #4]
 8011926:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011928:	4b73      	ldr	r3, [pc, #460]	; (8011af8 <udp_input+0x218>)
 801192a:	695b      	ldr	r3, [r3, #20]
 801192c:	4a72      	ldr	r2, [pc, #456]	; (8011af8 <udp_input+0x218>)
 801192e:	6812      	ldr	r2, [r2, #0]
 8011930:	4611      	mov	r1, r2
 8011932:	4618      	mov	r0, r3
 8011934:	f001 ff40 	bl	80137b8 <ip4_addr_isbroadcast_u32>
 8011938:	4603      	mov	r3, r0
 801193a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801193c:	697b      	ldr	r3, [r7, #20]
 801193e:	881b      	ldrh	r3, [r3, #0]
 8011940:	b29b      	uxth	r3, r3
 8011942:	4618      	mov	r0, r3
 8011944:	f7f8 fdac 	bl	800a4a0 <lwip_htons>
 8011948:	4603      	mov	r3, r0
 801194a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801194c:	697b      	ldr	r3, [r7, #20]
 801194e:	885b      	ldrh	r3, [r3, #2]
 8011950:	b29b      	uxth	r3, r3
 8011952:	4618      	mov	r0, r3
 8011954:	f7f8 fda4 	bl	800a4a0 <lwip_htons>
 8011958:	4603      	mov	r3, r0
 801195a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801195c:	2300      	movs	r3, #0
 801195e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011960:	2300      	movs	r3, #0
 8011962:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011964:	2300      	movs	r3, #0
 8011966:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011968:	4b64      	ldr	r3, [pc, #400]	; (8011afc <udp_input+0x21c>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	627b      	str	r3, [r7, #36]	; 0x24
 801196e:	e054      	b.n	8011a1a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011972:	8a5b      	ldrh	r3, [r3, #18]
 8011974:	89fa      	ldrh	r2, [r7, #14]
 8011976:	429a      	cmp	r2, r3
 8011978:	d14a      	bne.n	8011a10 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801197a:	7cfb      	ldrb	r3, [r7, #19]
 801197c:	461a      	mov	r2, r3
 801197e:	6839      	ldr	r1, [r7, #0]
 8011980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011982:	f7ff ff49 	bl	8011818 <udp_input_local_match>
 8011986:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011988:	2b00      	cmp	r3, #0
 801198a:	d041      	beq.n	8011a10 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801198e:	7c1b      	ldrb	r3, [r3, #16]
 8011990:	f003 0304 	and.w	r3, r3, #4
 8011994:	2b00      	cmp	r3, #0
 8011996:	d11d      	bne.n	80119d4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011998:	69fb      	ldr	r3, [r7, #28]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d102      	bne.n	80119a4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a0:	61fb      	str	r3, [r7, #28]
 80119a2:	e017      	b.n	80119d4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80119a4:	7cfb      	ldrb	r3, [r7, #19]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d014      	beq.n	80119d4 <udp_input+0xf4>
 80119aa:	4b53      	ldr	r3, [pc, #332]	; (8011af8 <udp_input+0x218>)
 80119ac:	695b      	ldr	r3, [r3, #20]
 80119ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119b2:	d10f      	bne.n	80119d4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80119b4:	69fb      	ldr	r3, [r7, #28]
 80119b6:	681a      	ldr	r2, [r3, #0]
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	3304      	adds	r3, #4
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	429a      	cmp	r2, r3
 80119c0:	d008      	beq.n	80119d4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80119c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c4:	681a      	ldr	r2, [r3, #0]
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	3304      	adds	r3, #4
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d101      	bne.n	80119d4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80119d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80119d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d6:	8a9b      	ldrh	r3, [r3, #20]
 80119d8:	8a3a      	ldrh	r2, [r7, #16]
 80119da:	429a      	cmp	r2, r3
 80119dc:	d118      	bne.n	8011a10 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80119de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d005      	beq.n	80119f2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80119e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e8:	685a      	ldr	r2, [r3, #4]
 80119ea:	4b43      	ldr	r3, [pc, #268]	; (8011af8 <udp_input+0x218>)
 80119ec:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d10e      	bne.n	8011a10 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80119f2:	6a3b      	ldr	r3, [r7, #32]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d014      	beq.n	8011a22 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80119f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fa:	68da      	ldr	r2, [r3, #12]
 80119fc:	6a3b      	ldr	r3, [r7, #32]
 80119fe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011a00:	4b3e      	ldr	r3, [pc, #248]	; (8011afc <udp_input+0x21c>)
 8011a02:	681a      	ldr	r2, [r3, #0]
 8011a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a06:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011a08:	4a3c      	ldr	r2, [pc, #240]	; (8011afc <udp_input+0x21c>)
 8011a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011a0e:	e008      	b.n	8011a22 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a12:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	627b      	str	r3, [r7, #36]	; 0x24
 8011a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d1a7      	bne.n	8011970 <udp_input+0x90>
 8011a20:	e000      	b.n	8011a24 <udp_input+0x144>
        break;
 8011a22:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d101      	bne.n	8011a2e <udp_input+0x14e>
    pcb = uncon_pcb;
 8011a2a:	69fb      	ldr	r3, [r7, #28]
 8011a2c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d002      	beq.n	8011a3a <udp_input+0x15a>
    for_us = 1;
 8011a34:	2301      	movs	r3, #1
 8011a36:	76fb      	strb	r3, [r7, #27]
 8011a38:	e00a      	b.n	8011a50 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	3304      	adds	r3, #4
 8011a3e:	681a      	ldr	r2, [r3, #0]
 8011a40:	4b2d      	ldr	r3, [pc, #180]	; (8011af8 <udp_input+0x218>)
 8011a42:	695b      	ldr	r3, [r3, #20]
 8011a44:	429a      	cmp	r2, r3
 8011a46:	bf0c      	ite	eq
 8011a48:	2301      	moveq	r3, #1
 8011a4a:	2300      	movne	r3, #0
 8011a4c:	b2db      	uxtb	r3, r3
 8011a4e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011a50:	7efb      	ldrb	r3, [r7, #27]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d041      	beq.n	8011ada <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011a56:	2108      	movs	r1, #8
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f7fa f88d 	bl	800bb78 <pbuf_remove_header>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d00a      	beq.n	8011a7a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011a64:	4b20      	ldr	r3, [pc, #128]	; (8011ae8 <udp_input+0x208>)
 8011a66:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011a6a:	4925      	ldr	r1, [pc, #148]	; (8011b00 <udp_input+0x220>)
 8011a6c:	4820      	ldr	r0, [pc, #128]	; (8011af0 <udp_input+0x210>)
 8011a6e:	f003 fa21 	bl	8014eb4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f7fa f906 	bl	800bc84 <pbuf_free>
      goto end;
 8011a78:	e032      	b.n	8011ae0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d012      	beq.n	8011aa6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a82:	699b      	ldr	r3, [r3, #24]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d00a      	beq.n	8011a9e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8a:	699c      	ldr	r4, [r3, #24]
 8011a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8e:	69d8      	ldr	r0, [r3, #28]
 8011a90:	8a3b      	ldrh	r3, [r7, #16]
 8011a92:	9300      	str	r3, [sp, #0]
 8011a94:	4b1b      	ldr	r3, [pc, #108]	; (8011b04 <udp_input+0x224>)
 8011a96:	687a      	ldr	r2, [r7, #4]
 8011a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011a9a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011a9c:	e021      	b.n	8011ae2 <udp_input+0x202>
        pbuf_free(p);
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f7fa f8f0 	bl	800bc84 <pbuf_free>
        goto end;
 8011aa4:	e01c      	b.n	8011ae0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011aa6:	7cfb      	ldrb	r3, [r7, #19]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d112      	bne.n	8011ad2 <udp_input+0x1f2>
 8011aac:	4b12      	ldr	r3, [pc, #72]	; (8011af8 <udp_input+0x218>)
 8011aae:	695b      	ldr	r3, [r3, #20]
 8011ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ab4:	2be0      	cmp	r3, #224	; 0xe0
 8011ab6:	d00c      	beq.n	8011ad2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011ab8:	4b0f      	ldr	r3, [pc, #60]	; (8011af8 <udp_input+0x218>)
 8011aba:	899b      	ldrh	r3, [r3, #12]
 8011abc:	3308      	adds	r3, #8
 8011abe:	b29b      	uxth	r3, r3
 8011ac0:	b21b      	sxth	r3, r3
 8011ac2:	4619      	mov	r1, r3
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f7fa f8ca 	bl	800bc5e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011aca:	2103      	movs	r1, #3
 8011acc:	6878      	ldr	r0, [r7, #4]
 8011ace:	f001 fb53 	bl	8013178 <icmp_dest_unreach>
      pbuf_free(p);
 8011ad2:	6878      	ldr	r0, [r7, #4]
 8011ad4:	f7fa f8d6 	bl	800bc84 <pbuf_free>
  return;
 8011ad8:	e003      	b.n	8011ae2 <udp_input+0x202>
    pbuf_free(p);
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f7fa f8d2 	bl	800bc84 <pbuf_free>
  return;
 8011ae0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011ae2:	372c      	adds	r7, #44	; 0x2c
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd90      	pop	{r4, r7, pc}
 8011ae8:	08018c68 	.word	0x08018c68
 8011aec:	08018d0c 	.word	0x08018d0c
 8011af0:	08018cbc 	.word	0x08018cbc
 8011af4:	08018d24 	.word	0x08018d24
 8011af8:	200139b4 	.word	0x200139b4
 8011afc:	20017b24 	.word	0x20017b24
 8011b00:	08018d40 	.word	0x08018d40
 8011b04:	200139c4 	.word	0x200139c4

08011b08 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b088      	sub	sp, #32
 8011b0c:	af02      	add	r7, sp, #8
 8011b0e:	60f8      	str	r0, [r7, #12]
 8011b10:	60b9      	str	r1, [r7, #8]
 8011b12:	607a      	str	r2, [r7, #4]
 8011b14:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d109      	bne.n	8011b30 <udp_sendto+0x28>
 8011b1c:	4b23      	ldr	r3, [pc, #140]	; (8011bac <udp_sendto+0xa4>)
 8011b1e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011b22:	4923      	ldr	r1, [pc, #140]	; (8011bb0 <udp_sendto+0xa8>)
 8011b24:	4823      	ldr	r0, [pc, #140]	; (8011bb4 <udp_sendto+0xac>)
 8011b26:	f003 f9c5 	bl	8014eb4 <iprintf>
 8011b2a:	f06f 030f 	mvn.w	r3, #15
 8011b2e:	e038      	b.n	8011ba2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d109      	bne.n	8011b4a <udp_sendto+0x42>
 8011b36:	4b1d      	ldr	r3, [pc, #116]	; (8011bac <udp_sendto+0xa4>)
 8011b38:	f240 2219 	movw	r2, #537	; 0x219
 8011b3c:	491e      	ldr	r1, [pc, #120]	; (8011bb8 <udp_sendto+0xb0>)
 8011b3e:	481d      	ldr	r0, [pc, #116]	; (8011bb4 <udp_sendto+0xac>)
 8011b40:	f003 f9b8 	bl	8014eb4 <iprintf>
 8011b44:	f06f 030f 	mvn.w	r3, #15
 8011b48:	e02b      	b.n	8011ba2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d109      	bne.n	8011b64 <udp_sendto+0x5c>
 8011b50:	4b16      	ldr	r3, [pc, #88]	; (8011bac <udp_sendto+0xa4>)
 8011b52:	f240 221a 	movw	r2, #538	; 0x21a
 8011b56:	4919      	ldr	r1, [pc, #100]	; (8011bbc <udp_sendto+0xb4>)
 8011b58:	4816      	ldr	r0, [pc, #88]	; (8011bb4 <udp_sendto+0xac>)
 8011b5a:	f003 f9ab 	bl	8014eb4 <iprintf>
 8011b5e:	f06f 030f 	mvn.w	r3, #15
 8011b62:	e01e      	b.n	8011ba2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	7a1b      	ldrb	r3, [r3, #8]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d006      	beq.n	8011b7a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	7a1b      	ldrb	r3, [r3, #8]
 8011b70:	4618      	mov	r0, r3
 8011b72:	f7f9 fcf9 	bl	800b568 <netif_get_by_index>
 8011b76:	6178      	str	r0, [r7, #20]
 8011b78:	e003      	b.n	8011b82 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8011b7a:	6878      	ldr	r0, [r7, #4]
 8011b7c:	f001 fb86 	bl	801328c <ip4_route>
 8011b80:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8011b82:	697b      	ldr	r3, [r7, #20]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d102      	bne.n	8011b8e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8011b88:	f06f 0303 	mvn.w	r3, #3
 8011b8c:	e009      	b.n	8011ba2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8011b8e:	887a      	ldrh	r2, [r7, #2]
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	9300      	str	r3, [sp, #0]
 8011b94:	4613      	mov	r3, r2
 8011b96:	687a      	ldr	r2, [r7, #4]
 8011b98:	68b9      	ldr	r1, [r7, #8]
 8011b9a:	68f8      	ldr	r0, [r7, #12]
 8011b9c:	f000 f810 	bl	8011bc0 <udp_sendto_if>
 8011ba0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3718      	adds	r7, #24
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}
 8011baa:	bf00      	nop
 8011bac:	08018c68 	.word	0x08018c68
 8011bb0:	08018d8c 	.word	0x08018d8c
 8011bb4:	08018cbc 	.word	0x08018cbc
 8011bb8:	08018da4 	.word	0x08018da4
 8011bbc:	08018dc0 	.word	0x08018dc0

08011bc0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b088      	sub	sp, #32
 8011bc4:	af02      	add	r7, sp, #8
 8011bc6:	60f8      	str	r0, [r7, #12]
 8011bc8:	60b9      	str	r1, [r7, #8]
 8011bca:	607a      	str	r2, [r7, #4]
 8011bcc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d109      	bne.n	8011be8 <udp_sendto_if+0x28>
 8011bd4:	4b2e      	ldr	r3, [pc, #184]	; (8011c90 <udp_sendto_if+0xd0>)
 8011bd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bda:	492e      	ldr	r1, [pc, #184]	; (8011c94 <udp_sendto_if+0xd4>)
 8011bdc:	482e      	ldr	r0, [pc, #184]	; (8011c98 <udp_sendto_if+0xd8>)
 8011bde:	f003 f969 	bl	8014eb4 <iprintf>
 8011be2:	f06f 030f 	mvn.w	r3, #15
 8011be6:	e04f      	b.n	8011c88 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d109      	bne.n	8011c02 <udp_sendto_if+0x42>
 8011bee:	4b28      	ldr	r3, [pc, #160]	; (8011c90 <udp_sendto_if+0xd0>)
 8011bf0:	f240 2281 	movw	r2, #641	; 0x281
 8011bf4:	4929      	ldr	r1, [pc, #164]	; (8011c9c <udp_sendto_if+0xdc>)
 8011bf6:	4828      	ldr	r0, [pc, #160]	; (8011c98 <udp_sendto_if+0xd8>)
 8011bf8:	f003 f95c 	bl	8014eb4 <iprintf>
 8011bfc:	f06f 030f 	mvn.w	r3, #15
 8011c00:	e042      	b.n	8011c88 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d109      	bne.n	8011c1c <udp_sendto_if+0x5c>
 8011c08:	4b21      	ldr	r3, [pc, #132]	; (8011c90 <udp_sendto_if+0xd0>)
 8011c0a:	f240 2282 	movw	r2, #642	; 0x282
 8011c0e:	4924      	ldr	r1, [pc, #144]	; (8011ca0 <udp_sendto_if+0xe0>)
 8011c10:	4821      	ldr	r0, [pc, #132]	; (8011c98 <udp_sendto_if+0xd8>)
 8011c12:	f003 f94f 	bl	8014eb4 <iprintf>
 8011c16:	f06f 030f 	mvn.w	r3, #15
 8011c1a:	e035      	b.n	8011c88 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011c1c:	6a3b      	ldr	r3, [r7, #32]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d109      	bne.n	8011c36 <udp_sendto_if+0x76>
 8011c22:	4b1b      	ldr	r3, [pc, #108]	; (8011c90 <udp_sendto_if+0xd0>)
 8011c24:	f240 2283 	movw	r2, #643	; 0x283
 8011c28:	491e      	ldr	r1, [pc, #120]	; (8011ca4 <udp_sendto_if+0xe4>)
 8011c2a:	481b      	ldr	r0, [pc, #108]	; (8011c98 <udp_sendto_if+0xd8>)
 8011c2c:	f003 f942 	bl	8014eb4 <iprintf>
 8011c30:	f06f 030f 	mvn.w	r3, #15
 8011c34:	e028      	b.n	8011c88 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d009      	beq.n	8011c50 <udp_sendto_if+0x90>
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d005      	beq.n	8011c50 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011c4c:	2be0      	cmp	r3, #224	; 0xe0
 8011c4e:	d103      	bne.n	8011c58 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011c50:	6a3b      	ldr	r3, [r7, #32]
 8011c52:	3304      	adds	r3, #4
 8011c54:	617b      	str	r3, [r7, #20]
 8011c56:	e00b      	b.n	8011c70 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	6a3b      	ldr	r3, [r7, #32]
 8011c5e:	3304      	adds	r3, #4
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d002      	beq.n	8011c6c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011c66:	f06f 0303 	mvn.w	r3, #3
 8011c6a:	e00d      	b.n	8011c88 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011c70:	887a      	ldrh	r2, [r7, #2]
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	9301      	str	r3, [sp, #4]
 8011c76:	6a3b      	ldr	r3, [r7, #32]
 8011c78:	9300      	str	r3, [sp, #0]
 8011c7a:	4613      	mov	r3, r2
 8011c7c:	687a      	ldr	r2, [r7, #4]
 8011c7e:	68b9      	ldr	r1, [r7, #8]
 8011c80:	68f8      	ldr	r0, [r7, #12]
 8011c82:	f000 f811 	bl	8011ca8 <udp_sendto_if_src>
 8011c86:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3718      	adds	r7, #24
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}
 8011c90:	08018c68 	.word	0x08018c68
 8011c94:	08018ddc 	.word	0x08018ddc
 8011c98:	08018cbc 	.word	0x08018cbc
 8011c9c:	08018df8 	.word	0x08018df8
 8011ca0:	08018e14 	.word	0x08018e14
 8011ca4:	08018e34 	.word	0x08018e34

08011ca8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b08c      	sub	sp, #48	; 0x30
 8011cac:	af04      	add	r7, sp, #16
 8011cae:	60f8      	str	r0, [r7, #12]
 8011cb0:	60b9      	str	r1, [r7, #8]
 8011cb2:	607a      	str	r2, [r7, #4]
 8011cb4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d109      	bne.n	8011cd0 <udp_sendto_if_src+0x28>
 8011cbc:	4b65      	ldr	r3, [pc, #404]	; (8011e54 <udp_sendto_if_src+0x1ac>)
 8011cbe:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011cc2:	4965      	ldr	r1, [pc, #404]	; (8011e58 <udp_sendto_if_src+0x1b0>)
 8011cc4:	4865      	ldr	r0, [pc, #404]	; (8011e5c <udp_sendto_if_src+0x1b4>)
 8011cc6:	f003 f8f5 	bl	8014eb4 <iprintf>
 8011cca:	f06f 030f 	mvn.w	r3, #15
 8011cce:	e0bc      	b.n	8011e4a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d109      	bne.n	8011cea <udp_sendto_if_src+0x42>
 8011cd6:	4b5f      	ldr	r3, [pc, #380]	; (8011e54 <udp_sendto_if_src+0x1ac>)
 8011cd8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011cdc:	4960      	ldr	r1, [pc, #384]	; (8011e60 <udp_sendto_if_src+0x1b8>)
 8011cde:	485f      	ldr	r0, [pc, #380]	; (8011e5c <udp_sendto_if_src+0x1b4>)
 8011ce0:	f003 f8e8 	bl	8014eb4 <iprintf>
 8011ce4:	f06f 030f 	mvn.w	r3, #15
 8011ce8:	e0af      	b.n	8011e4a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d109      	bne.n	8011d04 <udp_sendto_if_src+0x5c>
 8011cf0:	4b58      	ldr	r3, [pc, #352]	; (8011e54 <udp_sendto_if_src+0x1ac>)
 8011cf2:	f240 22d3 	movw	r2, #723	; 0x2d3
 8011cf6:	495b      	ldr	r1, [pc, #364]	; (8011e64 <udp_sendto_if_src+0x1bc>)
 8011cf8:	4858      	ldr	r0, [pc, #352]	; (8011e5c <udp_sendto_if_src+0x1b4>)
 8011cfa:	f003 f8db 	bl	8014eb4 <iprintf>
 8011cfe:	f06f 030f 	mvn.w	r3, #15
 8011d02:	e0a2      	b.n	8011e4a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d109      	bne.n	8011d1e <udp_sendto_if_src+0x76>
 8011d0a:	4b52      	ldr	r3, [pc, #328]	; (8011e54 <udp_sendto_if_src+0x1ac>)
 8011d0c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011d10:	4955      	ldr	r1, [pc, #340]	; (8011e68 <udp_sendto_if_src+0x1c0>)
 8011d12:	4852      	ldr	r0, [pc, #328]	; (8011e5c <udp_sendto_if_src+0x1b4>)
 8011d14:	f003 f8ce 	bl	8014eb4 <iprintf>
 8011d18:	f06f 030f 	mvn.w	r3, #15
 8011d1c:	e095      	b.n	8011e4a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d109      	bne.n	8011d38 <udp_sendto_if_src+0x90>
 8011d24:	4b4b      	ldr	r3, [pc, #300]	; (8011e54 <udp_sendto_if_src+0x1ac>)
 8011d26:	f240 22d5 	movw	r2, #725	; 0x2d5
 8011d2a:	4950      	ldr	r1, [pc, #320]	; (8011e6c <udp_sendto_if_src+0x1c4>)
 8011d2c:	484b      	ldr	r0, [pc, #300]	; (8011e5c <udp_sendto_if_src+0x1b4>)
 8011d2e:	f003 f8c1 	bl	8014eb4 <iprintf>
 8011d32:	f06f 030f 	mvn.w	r3, #15
 8011d36:	e088      	b.n	8011e4a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	8a5b      	ldrh	r3, [r3, #18]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d10f      	bne.n	8011d60 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011d40:	68f9      	ldr	r1, [r7, #12]
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	8a5b      	ldrh	r3, [r3, #18]
 8011d46:	461a      	mov	r2, r3
 8011d48:	68f8      	ldr	r0, [r7, #12]
 8011d4a:	f000 f893 	bl	8011e74 <udp_bind>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011d52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d002      	beq.n	8011d60 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011d5a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011d5e:	e074      	b.n	8011e4a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011d60:	68bb      	ldr	r3, [r7, #8]
 8011d62:	891b      	ldrh	r3, [r3, #8]
 8011d64:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011d68:	4293      	cmp	r3, r2
 8011d6a:	d902      	bls.n	8011d72 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d70:	e06b      	b.n	8011e4a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011d72:	2108      	movs	r1, #8
 8011d74:	68b8      	ldr	r0, [r7, #8]
 8011d76:	f7f9 feef 	bl	800bb58 <pbuf_add_header>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d015      	beq.n	8011dac <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011d80:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d84:	2108      	movs	r1, #8
 8011d86:	2022      	movs	r0, #34	; 0x22
 8011d88:	f7f9 fc98 	bl	800b6bc <pbuf_alloc>
 8011d8c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011d8e:	69fb      	ldr	r3, [r7, #28]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d102      	bne.n	8011d9a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d98:	e057      	b.n	8011e4a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	891b      	ldrh	r3, [r3, #8]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d006      	beq.n	8011db0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011da2:	68b9      	ldr	r1, [r7, #8]
 8011da4:	69f8      	ldr	r0, [r7, #28]
 8011da6:	f7fa f891 	bl	800becc <pbuf_chain>
 8011daa:	e001      	b.n	8011db0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011db0:	69fb      	ldr	r3, [r7, #28]
 8011db2:	895b      	ldrh	r3, [r3, #10]
 8011db4:	2b07      	cmp	r3, #7
 8011db6:	d806      	bhi.n	8011dc6 <udp_sendto_if_src+0x11e>
 8011db8:	4b26      	ldr	r3, [pc, #152]	; (8011e54 <udp_sendto_if_src+0x1ac>)
 8011dba:	f240 320d 	movw	r2, #781	; 0x30d
 8011dbe:	492c      	ldr	r1, [pc, #176]	; (8011e70 <udp_sendto_if_src+0x1c8>)
 8011dc0:	4826      	ldr	r0, [pc, #152]	; (8011e5c <udp_sendto_if_src+0x1b4>)
 8011dc2:	f003 f877 	bl	8014eb4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011dc6:	69fb      	ldr	r3, [r7, #28]
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	8a5b      	ldrh	r3, [r3, #18]
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f7f8 fb65 	bl	800a4a0 <lwip_htons>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	461a      	mov	r2, r3
 8011dda:	697b      	ldr	r3, [r7, #20]
 8011ddc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011dde:	887b      	ldrh	r3, [r7, #2]
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7f8 fb5d 	bl	800a4a0 <lwip_htons>
 8011de6:	4603      	mov	r3, r0
 8011de8:	461a      	mov	r2, r3
 8011dea:	697b      	ldr	r3, [r7, #20]
 8011dec:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	2200      	movs	r2, #0
 8011df2:	719a      	strb	r2, [r3, #6]
 8011df4:	2200      	movs	r2, #0
 8011df6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011df8:	69fb      	ldr	r3, [r7, #28]
 8011dfa:	891b      	ldrh	r3, [r3, #8]
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f7f8 fb4f 	bl	800a4a0 <lwip_htons>
 8011e02:	4603      	mov	r3, r0
 8011e04:	461a      	mov	r2, r3
 8011e06:	697b      	ldr	r3, [r7, #20]
 8011e08:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011e0a:	2311      	movs	r3, #17
 8011e0c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	7adb      	ldrb	r3, [r3, #11]
 8011e12:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	7a9b      	ldrb	r3, [r3, #10]
 8011e18:	7cb9      	ldrb	r1, [r7, #18]
 8011e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e1c:	9202      	str	r2, [sp, #8]
 8011e1e:	7cfa      	ldrb	r2, [r7, #19]
 8011e20:	9201      	str	r2, [sp, #4]
 8011e22:	9300      	str	r3, [sp, #0]
 8011e24:	460b      	mov	r3, r1
 8011e26:	687a      	ldr	r2, [r7, #4]
 8011e28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e2a:	69f8      	ldr	r0, [r7, #28]
 8011e2c:	f001 fc16 	bl	801365c <ip4_output_if_src>
 8011e30:	4603      	mov	r3, r0
 8011e32:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011e34:	69fa      	ldr	r2, [r7, #28]
 8011e36:	68bb      	ldr	r3, [r7, #8]
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d004      	beq.n	8011e46 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011e3c:	69f8      	ldr	r0, [r7, #28]
 8011e3e:	f7f9 ff21 	bl	800bc84 <pbuf_free>
    q = NULL;
 8011e42:	2300      	movs	r3, #0
 8011e44:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011e46:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3720      	adds	r7, #32
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}
 8011e52:	bf00      	nop
 8011e54:	08018c68 	.word	0x08018c68
 8011e58:	08018e54 	.word	0x08018e54
 8011e5c:	08018cbc 	.word	0x08018cbc
 8011e60:	08018e74 	.word	0x08018e74
 8011e64:	08018e94 	.word	0x08018e94
 8011e68:	08018eb8 	.word	0x08018eb8
 8011e6c:	08018edc 	.word	0x08018edc
 8011e70:	08018f00 	.word	0x08018f00

08011e74 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b086      	sub	sp, #24
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	60f8      	str	r0, [r7, #12]
 8011e7c:	60b9      	str	r1, [r7, #8]
 8011e7e:	4613      	mov	r3, r2
 8011e80:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d101      	bne.n	8011e8c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011e88:	4b39      	ldr	r3, [pc, #228]	; (8011f70 <udp_bind+0xfc>)
 8011e8a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d109      	bne.n	8011ea6 <udp_bind+0x32>
 8011e92:	4b38      	ldr	r3, [pc, #224]	; (8011f74 <udp_bind+0x100>)
 8011e94:	f240 32b7 	movw	r2, #951	; 0x3b7
 8011e98:	4937      	ldr	r1, [pc, #220]	; (8011f78 <udp_bind+0x104>)
 8011e9a:	4838      	ldr	r0, [pc, #224]	; (8011f7c <udp_bind+0x108>)
 8011e9c:	f003 f80a 	bl	8014eb4 <iprintf>
 8011ea0:	f06f 030f 	mvn.w	r3, #15
 8011ea4:	e060      	b.n	8011f68 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011eaa:	4b35      	ldr	r3, [pc, #212]	; (8011f80 <udp_bind+0x10c>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	617b      	str	r3, [r7, #20]
 8011eb0:	e009      	b.n	8011ec6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011eb2:	68fa      	ldr	r2, [r7, #12]
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	d102      	bne.n	8011ec0 <udp_bind+0x4c>
      rebind = 1;
 8011eba:	2301      	movs	r3, #1
 8011ebc:	74fb      	strb	r3, [r7, #19]
      break;
 8011ebe:	e005      	b.n	8011ecc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	68db      	ldr	r3, [r3, #12]
 8011ec4:	617b      	str	r3, [r7, #20]
 8011ec6:	697b      	ldr	r3, [r7, #20]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d1f2      	bne.n	8011eb2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011ecc:	88fb      	ldrh	r3, [r7, #6]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d109      	bne.n	8011ee6 <udp_bind+0x72>
    port = udp_new_port();
 8011ed2:	f7ff fc69 	bl	80117a8 <udp_new_port>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011eda:	88fb      	ldrh	r3, [r7, #6]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d12c      	bne.n	8011f3a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011ee0:	f06f 0307 	mvn.w	r3, #7
 8011ee4:	e040      	b.n	8011f68 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011ee6:	4b26      	ldr	r3, [pc, #152]	; (8011f80 <udp_bind+0x10c>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	617b      	str	r3, [r7, #20]
 8011eec:	e022      	b.n	8011f34 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011eee:	68fa      	ldr	r2, [r7, #12]
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d01b      	beq.n	8011f2e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011ef6:	697b      	ldr	r3, [r7, #20]
 8011ef8:	8a5b      	ldrh	r3, [r3, #18]
 8011efa:	88fa      	ldrh	r2, [r7, #6]
 8011efc:	429a      	cmp	r2, r3
 8011efe:	d116      	bne.n	8011f2e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	681a      	ldr	r2, [r3, #0]
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d00d      	beq.n	8011f28 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d00a      	beq.n	8011f28 <udp_bind+0xb4>
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d006      	beq.n	8011f28 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011f1a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d003      	beq.n	8011f28 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d102      	bne.n	8011f2e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011f28:	f06f 0307 	mvn.w	r3, #7
 8011f2c:	e01c      	b.n	8011f68 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011f2e:	697b      	ldr	r3, [r7, #20]
 8011f30:	68db      	ldr	r3, [r3, #12]
 8011f32:	617b      	str	r3, [r7, #20]
 8011f34:	697b      	ldr	r3, [r7, #20]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d1d9      	bne.n	8011eee <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d002      	beq.n	8011f46 <udp_bind+0xd2>
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	e000      	b.n	8011f48 <udp_bind+0xd4>
 8011f46:	2300      	movs	r3, #0
 8011f48:	68fa      	ldr	r2, [r7, #12]
 8011f4a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	88fa      	ldrh	r2, [r7, #6]
 8011f50:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011f52:	7cfb      	ldrb	r3, [r7, #19]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d106      	bne.n	8011f66 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011f58:	4b09      	ldr	r3, [pc, #36]	; (8011f80 <udp_bind+0x10c>)
 8011f5a:	681a      	ldr	r2, [r3, #0]
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011f60:	4a07      	ldr	r2, [pc, #28]	; (8011f80 <udp_bind+0x10c>)
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011f66:	2300      	movs	r3, #0
}
 8011f68:	4618      	mov	r0, r3
 8011f6a:	3718      	adds	r7, #24
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}
 8011f70:	080197d0 	.word	0x080197d0
 8011f74:	08018c68 	.word	0x08018c68
 8011f78:	08018f30 	.word	0x08018f30
 8011f7c:	08018cbc 	.word	0x08018cbc
 8011f80:	20017b24 	.word	0x20017b24

08011f84 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b084      	sub	sp, #16
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	60f8      	str	r0, [r7, #12]
 8011f8c:	60b9      	str	r1, [r7, #8]
 8011f8e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d107      	bne.n	8011fa6 <udp_recv+0x22>
 8011f96:	4b08      	ldr	r3, [pc, #32]	; (8011fb8 <udp_recv+0x34>)
 8011f98:	f240 428a 	movw	r2, #1162	; 0x48a
 8011f9c:	4907      	ldr	r1, [pc, #28]	; (8011fbc <udp_recv+0x38>)
 8011f9e:	4808      	ldr	r0, [pc, #32]	; (8011fc0 <udp_recv+0x3c>)
 8011fa0:	f002 ff88 	bl	8014eb4 <iprintf>
 8011fa4:	e005      	b.n	8011fb2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	68ba      	ldr	r2, [r7, #8]
 8011faa:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	687a      	ldr	r2, [r7, #4]
 8011fb0:	61da      	str	r2, [r3, #28]
}
 8011fb2:	3710      	adds	r7, #16
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}
 8011fb8:	08018c68 	.word	0x08018c68
 8011fbc:	08018f9c 	.word	0x08018f9c
 8011fc0:	08018cbc 	.word	0x08018cbc

08011fc4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b084      	sub	sp, #16
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d107      	bne.n	8011fe2 <udp_remove+0x1e>
 8011fd2:	4b19      	ldr	r3, [pc, #100]	; (8012038 <udp_remove+0x74>)
 8011fd4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011fd8:	4918      	ldr	r1, [pc, #96]	; (801203c <udp_remove+0x78>)
 8011fda:	4819      	ldr	r0, [pc, #100]	; (8012040 <udp_remove+0x7c>)
 8011fdc:	f002 ff6a 	bl	8014eb4 <iprintf>
 8011fe0:	e026      	b.n	8012030 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011fe2:	4b18      	ldr	r3, [pc, #96]	; (8012044 <udp_remove+0x80>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d105      	bne.n	8011ff8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011fec:	4b15      	ldr	r3, [pc, #84]	; (8012044 <udp_remove+0x80>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	68db      	ldr	r3, [r3, #12]
 8011ff2:	4a14      	ldr	r2, [pc, #80]	; (8012044 <udp_remove+0x80>)
 8011ff4:	6013      	str	r3, [r2, #0]
 8011ff6:	e017      	b.n	8012028 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011ff8:	4b12      	ldr	r3, [pc, #72]	; (8012044 <udp_remove+0x80>)
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	60fb      	str	r3, [r7, #12]
 8011ffe:	e010      	b.n	8012022 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	68db      	ldr	r3, [r3, #12]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d009      	beq.n	801201c <udp_remove+0x58>
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	68db      	ldr	r3, [r3, #12]
 801200c:	687a      	ldr	r2, [r7, #4]
 801200e:	429a      	cmp	r2, r3
 8012010:	d104      	bne.n	801201c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	68da      	ldr	r2, [r3, #12]
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	60da      	str	r2, [r3, #12]
        break;
 801201a:	e005      	b.n	8012028 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	68db      	ldr	r3, [r3, #12]
 8012020:	60fb      	str	r3, [r7, #12]
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d1eb      	bne.n	8012000 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012028:	6879      	ldr	r1, [r7, #4]
 801202a:	2000      	movs	r0, #0
 801202c:	f7f8 ff86 	bl	800af3c <memp_free>
}
 8012030:	3710      	adds	r7, #16
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}
 8012036:	bf00      	nop
 8012038:	08018c68 	.word	0x08018c68
 801203c:	08018fb4 	.word	0x08018fb4
 8012040:	08018cbc 	.word	0x08018cbc
 8012044:	20017b24 	.word	0x20017b24

08012048 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801204e:	2000      	movs	r0, #0
 8012050:	f7f8 fefe 	bl	800ae50 <memp_malloc>
 8012054:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d007      	beq.n	801206c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801205c:	2220      	movs	r2, #32
 801205e:	2100      	movs	r1, #0
 8012060:	6878      	ldr	r0, [r7, #4]
 8012062:	f002 fe3e 	bl	8014ce2 <memset>
    pcb->ttl = UDP_TTL;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	22ff      	movs	r2, #255	; 0xff
 801206a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801206c:	687b      	ldr	r3, [r7, #4]
}
 801206e:	4618      	mov	r0, r3
 8012070:	3708      	adds	r7, #8
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
	...

08012078 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012078:	b480      	push	{r7}
 801207a:	b085      	sub	sp, #20
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d01e      	beq.n	80120c6 <udp_netif_ip_addr_changed+0x4e>
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d01a      	beq.n	80120c6 <udp_netif_ip_addr_changed+0x4e>
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d017      	beq.n	80120c6 <udp_netif_ip_addr_changed+0x4e>
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d013      	beq.n	80120c6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801209e:	4b0d      	ldr	r3, [pc, #52]	; (80120d4 <udp_netif_ip_addr_changed+0x5c>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	60fb      	str	r3, [r7, #12]
 80120a4:	e00c      	b.n	80120c0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	681a      	ldr	r2, [r3, #0]
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d103      	bne.n	80120ba <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	681a      	ldr	r2, [r3, #0]
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	68db      	ldr	r3, [r3, #12]
 80120be:	60fb      	str	r3, [r7, #12]
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d1ef      	bne.n	80120a6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80120c6:	bf00      	nop
 80120c8:	3714      	adds	r7, #20
 80120ca:	46bd      	mov	sp, r7
 80120cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d0:	4770      	bx	lr
 80120d2:	bf00      	nop
 80120d4:	20017b24 	.word	0x20017b24

080120d8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b082      	sub	sp, #8
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80120e0:	4915      	ldr	r1, [pc, #84]	; (8012138 <etharp_free_entry+0x60>)
 80120e2:	687a      	ldr	r2, [r7, #4]
 80120e4:	4613      	mov	r3, r2
 80120e6:	005b      	lsls	r3, r3, #1
 80120e8:	4413      	add	r3, r2
 80120ea:	00db      	lsls	r3, r3, #3
 80120ec:	440b      	add	r3, r1
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d013      	beq.n	801211c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80120f4:	4910      	ldr	r1, [pc, #64]	; (8012138 <etharp_free_entry+0x60>)
 80120f6:	687a      	ldr	r2, [r7, #4]
 80120f8:	4613      	mov	r3, r2
 80120fa:	005b      	lsls	r3, r3, #1
 80120fc:	4413      	add	r3, r2
 80120fe:	00db      	lsls	r3, r3, #3
 8012100:	440b      	add	r3, r1
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	4618      	mov	r0, r3
 8012106:	f7f9 fdbd 	bl	800bc84 <pbuf_free>
    arp_table[i].q = NULL;
 801210a:	490b      	ldr	r1, [pc, #44]	; (8012138 <etharp_free_entry+0x60>)
 801210c:	687a      	ldr	r2, [r7, #4]
 801210e:	4613      	mov	r3, r2
 8012110:	005b      	lsls	r3, r3, #1
 8012112:	4413      	add	r3, r2
 8012114:	00db      	lsls	r3, r3, #3
 8012116:	440b      	add	r3, r1
 8012118:	2200      	movs	r2, #0
 801211a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801211c:	4906      	ldr	r1, [pc, #24]	; (8012138 <etharp_free_entry+0x60>)
 801211e:	687a      	ldr	r2, [r7, #4]
 8012120:	4613      	mov	r3, r2
 8012122:	005b      	lsls	r3, r3, #1
 8012124:	4413      	add	r3, r2
 8012126:	00db      	lsls	r3, r3, #3
 8012128:	440b      	add	r3, r1
 801212a:	3314      	adds	r3, #20
 801212c:	2200      	movs	r2, #0
 801212e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012130:	bf00      	nop
 8012132:	3708      	adds	r7, #8
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}
 8012138:	20017b28 	.word	0x20017b28

0801213c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b082      	sub	sp, #8
 8012140:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012142:	2300      	movs	r3, #0
 8012144:	607b      	str	r3, [r7, #4]
 8012146:	e096      	b.n	8012276 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012148:	494f      	ldr	r1, [pc, #316]	; (8012288 <etharp_tmr+0x14c>)
 801214a:	687a      	ldr	r2, [r7, #4]
 801214c:	4613      	mov	r3, r2
 801214e:	005b      	lsls	r3, r3, #1
 8012150:	4413      	add	r3, r2
 8012152:	00db      	lsls	r3, r3, #3
 8012154:	440b      	add	r3, r1
 8012156:	3314      	adds	r3, #20
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801215c:	78fb      	ldrb	r3, [r7, #3]
 801215e:	2b00      	cmp	r3, #0
 8012160:	f000 8086 	beq.w	8012270 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012164:	4948      	ldr	r1, [pc, #288]	; (8012288 <etharp_tmr+0x14c>)
 8012166:	687a      	ldr	r2, [r7, #4]
 8012168:	4613      	mov	r3, r2
 801216a:	005b      	lsls	r3, r3, #1
 801216c:	4413      	add	r3, r2
 801216e:	00db      	lsls	r3, r3, #3
 8012170:	440b      	add	r3, r1
 8012172:	3312      	adds	r3, #18
 8012174:	881b      	ldrh	r3, [r3, #0]
 8012176:	3301      	adds	r3, #1
 8012178:	b298      	uxth	r0, r3
 801217a:	4943      	ldr	r1, [pc, #268]	; (8012288 <etharp_tmr+0x14c>)
 801217c:	687a      	ldr	r2, [r7, #4]
 801217e:	4613      	mov	r3, r2
 8012180:	005b      	lsls	r3, r3, #1
 8012182:	4413      	add	r3, r2
 8012184:	00db      	lsls	r3, r3, #3
 8012186:	440b      	add	r3, r1
 8012188:	3312      	adds	r3, #18
 801218a:	4602      	mov	r2, r0
 801218c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801218e:	493e      	ldr	r1, [pc, #248]	; (8012288 <etharp_tmr+0x14c>)
 8012190:	687a      	ldr	r2, [r7, #4]
 8012192:	4613      	mov	r3, r2
 8012194:	005b      	lsls	r3, r3, #1
 8012196:	4413      	add	r3, r2
 8012198:	00db      	lsls	r3, r3, #3
 801219a:	440b      	add	r3, r1
 801219c:	3312      	adds	r3, #18
 801219e:	881b      	ldrh	r3, [r3, #0]
 80121a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80121a4:	d215      	bcs.n	80121d2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80121a6:	4938      	ldr	r1, [pc, #224]	; (8012288 <etharp_tmr+0x14c>)
 80121a8:	687a      	ldr	r2, [r7, #4]
 80121aa:	4613      	mov	r3, r2
 80121ac:	005b      	lsls	r3, r3, #1
 80121ae:	4413      	add	r3, r2
 80121b0:	00db      	lsls	r3, r3, #3
 80121b2:	440b      	add	r3, r1
 80121b4:	3314      	adds	r3, #20
 80121b6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80121b8:	2b01      	cmp	r3, #1
 80121ba:	d10e      	bne.n	80121da <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80121bc:	4932      	ldr	r1, [pc, #200]	; (8012288 <etharp_tmr+0x14c>)
 80121be:	687a      	ldr	r2, [r7, #4]
 80121c0:	4613      	mov	r3, r2
 80121c2:	005b      	lsls	r3, r3, #1
 80121c4:	4413      	add	r3, r2
 80121c6:	00db      	lsls	r3, r3, #3
 80121c8:	440b      	add	r3, r1
 80121ca:	3312      	adds	r3, #18
 80121cc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80121ce:	2b04      	cmp	r3, #4
 80121d0:	d903      	bls.n	80121da <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f7ff ff80 	bl	80120d8 <etharp_free_entry>
 80121d8:	e04a      	b.n	8012270 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80121da:	492b      	ldr	r1, [pc, #172]	; (8012288 <etharp_tmr+0x14c>)
 80121dc:	687a      	ldr	r2, [r7, #4]
 80121de:	4613      	mov	r3, r2
 80121e0:	005b      	lsls	r3, r3, #1
 80121e2:	4413      	add	r3, r2
 80121e4:	00db      	lsls	r3, r3, #3
 80121e6:	440b      	add	r3, r1
 80121e8:	3314      	adds	r3, #20
 80121ea:	781b      	ldrb	r3, [r3, #0]
 80121ec:	2b03      	cmp	r3, #3
 80121ee:	d10a      	bne.n	8012206 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80121f0:	4925      	ldr	r1, [pc, #148]	; (8012288 <etharp_tmr+0x14c>)
 80121f2:	687a      	ldr	r2, [r7, #4]
 80121f4:	4613      	mov	r3, r2
 80121f6:	005b      	lsls	r3, r3, #1
 80121f8:	4413      	add	r3, r2
 80121fa:	00db      	lsls	r3, r3, #3
 80121fc:	440b      	add	r3, r1
 80121fe:	3314      	adds	r3, #20
 8012200:	2204      	movs	r2, #4
 8012202:	701a      	strb	r2, [r3, #0]
 8012204:	e034      	b.n	8012270 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012206:	4920      	ldr	r1, [pc, #128]	; (8012288 <etharp_tmr+0x14c>)
 8012208:	687a      	ldr	r2, [r7, #4]
 801220a:	4613      	mov	r3, r2
 801220c:	005b      	lsls	r3, r3, #1
 801220e:	4413      	add	r3, r2
 8012210:	00db      	lsls	r3, r3, #3
 8012212:	440b      	add	r3, r1
 8012214:	3314      	adds	r3, #20
 8012216:	781b      	ldrb	r3, [r3, #0]
 8012218:	2b04      	cmp	r3, #4
 801221a:	d10a      	bne.n	8012232 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801221c:	491a      	ldr	r1, [pc, #104]	; (8012288 <etharp_tmr+0x14c>)
 801221e:	687a      	ldr	r2, [r7, #4]
 8012220:	4613      	mov	r3, r2
 8012222:	005b      	lsls	r3, r3, #1
 8012224:	4413      	add	r3, r2
 8012226:	00db      	lsls	r3, r3, #3
 8012228:	440b      	add	r3, r1
 801222a:	3314      	adds	r3, #20
 801222c:	2202      	movs	r2, #2
 801222e:	701a      	strb	r2, [r3, #0]
 8012230:	e01e      	b.n	8012270 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012232:	4915      	ldr	r1, [pc, #84]	; (8012288 <etharp_tmr+0x14c>)
 8012234:	687a      	ldr	r2, [r7, #4]
 8012236:	4613      	mov	r3, r2
 8012238:	005b      	lsls	r3, r3, #1
 801223a:	4413      	add	r3, r2
 801223c:	00db      	lsls	r3, r3, #3
 801223e:	440b      	add	r3, r1
 8012240:	3314      	adds	r3, #20
 8012242:	781b      	ldrb	r3, [r3, #0]
 8012244:	2b01      	cmp	r3, #1
 8012246:	d113      	bne.n	8012270 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012248:	490f      	ldr	r1, [pc, #60]	; (8012288 <etharp_tmr+0x14c>)
 801224a:	687a      	ldr	r2, [r7, #4]
 801224c:	4613      	mov	r3, r2
 801224e:	005b      	lsls	r3, r3, #1
 8012250:	4413      	add	r3, r2
 8012252:	00db      	lsls	r3, r3, #3
 8012254:	440b      	add	r3, r1
 8012256:	3308      	adds	r3, #8
 8012258:	6818      	ldr	r0, [r3, #0]
 801225a:	687a      	ldr	r2, [r7, #4]
 801225c:	4613      	mov	r3, r2
 801225e:	005b      	lsls	r3, r3, #1
 8012260:	4413      	add	r3, r2
 8012262:	00db      	lsls	r3, r3, #3
 8012264:	4a08      	ldr	r2, [pc, #32]	; (8012288 <etharp_tmr+0x14c>)
 8012266:	4413      	add	r3, r2
 8012268:	3304      	adds	r3, #4
 801226a:	4619      	mov	r1, r3
 801226c:	f000 fe6e 	bl	8012f4c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	3301      	adds	r3, #1
 8012274:	607b      	str	r3, [r7, #4]
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	2b09      	cmp	r3, #9
 801227a:	f77f af65 	ble.w	8012148 <etharp_tmr+0xc>
      }
    }
  }
}
 801227e:	bf00      	nop
 8012280:	bf00      	nop
 8012282:	3708      	adds	r7, #8
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}
 8012288:	20017b28 	.word	0x20017b28

0801228c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b08a      	sub	sp, #40	; 0x28
 8012290:	af00      	add	r7, sp, #0
 8012292:	60f8      	str	r0, [r7, #12]
 8012294:	460b      	mov	r3, r1
 8012296:	607a      	str	r2, [r7, #4]
 8012298:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801229a:	230a      	movs	r3, #10
 801229c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801229e:	230a      	movs	r3, #10
 80122a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80122a2:	230a      	movs	r3, #10
 80122a4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80122a6:	2300      	movs	r3, #0
 80122a8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80122aa:	230a      	movs	r3, #10
 80122ac:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80122ae:	2300      	movs	r3, #0
 80122b0:	83bb      	strh	r3, [r7, #28]
 80122b2:	2300      	movs	r3, #0
 80122b4:	837b      	strh	r3, [r7, #26]
 80122b6:	2300      	movs	r3, #0
 80122b8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80122ba:	2300      	movs	r3, #0
 80122bc:	843b      	strh	r3, [r7, #32]
 80122be:	e0ae      	b.n	801241e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80122c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122c4:	49a6      	ldr	r1, [pc, #664]	; (8012560 <etharp_find_entry+0x2d4>)
 80122c6:	4613      	mov	r3, r2
 80122c8:	005b      	lsls	r3, r3, #1
 80122ca:	4413      	add	r3, r2
 80122cc:	00db      	lsls	r3, r3, #3
 80122ce:	440b      	add	r3, r1
 80122d0:	3314      	adds	r3, #20
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80122d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80122da:	2b0a      	cmp	r3, #10
 80122dc:	d105      	bne.n	80122ea <etharp_find_entry+0x5e>
 80122de:	7dfb      	ldrb	r3, [r7, #23]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d102      	bne.n	80122ea <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80122e4:	8c3b      	ldrh	r3, [r7, #32]
 80122e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80122e8:	e095      	b.n	8012416 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80122ea:	7dfb      	ldrb	r3, [r7, #23]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	f000 8092 	beq.w	8012416 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80122f2:	7dfb      	ldrb	r3, [r7, #23]
 80122f4:	2b01      	cmp	r3, #1
 80122f6:	d009      	beq.n	801230c <etharp_find_entry+0x80>
 80122f8:	7dfb      	ldrb	r3, [r7, #23]
 80122fa:	2b01      	cmp	r3, #1
 80122fc:	d806      	bhi.n	801230c <etharp_find_entry+0x80>
 80122fe:	4b99      	ldr	r3, [pc, #612]	; (8012564 <etharp_find_entry+0x2d8>)
 8012300:	f240 1223 	movw	r2, #291	; 0x123
 8012304:	4998      	ldr	r1, [pc, #608]	; (8012568 <etharp_find_entry+0x2dc>)
 8012306:	4899      	ldr	r0, [pc, #612]	; (801256c <etharp_find_entry+0x2e0>)
 8012308:	f002 fdd4 	bl	8014eb4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d020      	beq.n	8012354 <etharp_find_entry+0xc8>
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	6819      	ldr	r1, [r3, #0]
 8012316:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801231a:	4891      	ldr	r0, [pc, #580]	; (8012560 <etharp_find_entry+0x2d4>)
 801231c:	4613      	mov	r3, r2
 801231e:	005b      	lsls	r3, r3, #1
 8012320:	4413      	add	r3, r2
 8012322:	00db      	lsls	r3, r3, #3
 8012324:	4403      	add	r3, r0
 8012326:	3304      	adds	r3, #4
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	4299      	cmp	r1, r3
 801232c:	d112      	bne.n	8012354 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d00c      	beq.n	801234e <etharp_find_entry+0xc2>
 8012334:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012338:	4989      	ldr	r1, [pc, #548]	; (8012560 <etharp_find_entry+0x2d4>)
 801233a:	4613      	mov	r3, r2
 801233c:	005b      	lsls	r3, r3, #1
 801233e:	4413      	add	r3, r2
 8012340:	00db      	lsls	r3, r3, #3
 8012342:	440b      	add	r3, r1
 8012344:	3308      	adds	r3, #8
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	687a      	ldr	r2, [r7, #4]
 801234a:	429a      	cmp	r2, r3
 801234c:	d102      	bne.n	8012354 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801234e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012352:	e100      	b.n	8012556 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012354:	7dfb      	ldrb	r3, [r7, #23]
 8012356:	2b01      	cmp	r3, #1
 8012358:	d140      	bne.n	80123dc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801235a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801235e:	4980      	ldr	r1, [pc, #512]	; (8012560 <etharp_find_entry+0x2d4>)
 8012360:	4613      	mov	r3, r2
 8012362:	005b      	lsls	r3, r3, #1
 8012364:	4413      	add	r3, r2
 8012366:	00db      	lsls	r3, r3, #3
 8012368:	440b      	add	r3, r1
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d01a      	beq.n	80123a6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012370:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012374:	497a      	ldr	r1, [pc, #488]	; (8012560 <etharp_find_entry+0x2d4>)
 8012376:	4613      	mov	r3, r2
 8012378:	005b      	lsls	r3, r3, #1
 801237a:	4413      	add	r3, r2
 801237c:	00db      	lsls	r3, r3, #3
 801237e:	440b      	add	r3, r1
 8012380:	3312      	adds	r3, #18
 8012382:	881b      	ldrh	r3, [r3, #0]
 8012384:	8bba      	ldrh	r2, [r7, #28]
 8012386:	429a      	cmp	r2, r3
 8012388:	d845      	bhi.n	8012416 <etharp_find_entry+0x18a>
            old_queue = i;
 801238a:	8c3b      	ldrh	r3, [r7, #32]
 801238c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801238e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012392:	4973      	ldr	r1, [pc, #460]	; (8012560 <etharp_find_entry+0x2d4>)
 8012394:	4613      	mov	r3, r2
 8012396:	005b      	lsls	r3, r3, #1
 8012398:	4413      	add	r3, r2
 801239a:	00db      	lsls	r3, r3, #3
 801239c:	440b      	add	r3, r1
 801239e:	3312      	adds	r3, #18
 80123a0:	881b      	ldrh	r3, [r3, #0]
 80123a2:	83bb      	strh	r3, [r7, #28]
 80123a4:	e037      	b.n	8012416 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80123a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123aa:	496d      	ldr	r1, [pc, #436]	; (8012560 <etharp_find_entry+0x2d4>)
 80123ac:	4613      	mov	r3, r2
 80123ae:	005b      	lsls	r3, r3, #1
 80123b0:	4413      	add	r3, r2
 80123b2:	00db      	lsls	r3, r3, #3
 80123b4:	440b      	add	r3, r1
 80123b6:	3312      	adds	r3, #18
 80123b8:	881b      	ldrh	r3, [r3, #0]
 80123ba:	8b7a      	ldrh	r2, [r7, #26]
 80123bc:	429a      	cmp	r2, r3
 80123be:	d82a      	bhi.n	8012416 <etharp_find_entry+0x18a>
            old_pending = i;
 80123c0:	8c3b      	ldrh	r3, [r7, #32]
 80123c2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80123c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123c8:	4965      	ldr	r1, [pc, #404]	; (8012560 <etharp_find_entry+0x2d4>)
 80123ca:	4613      	mov	r3, r2
 80123cc:	005b      	lsls	r3, r3, #1
 80123ce:	4413      	add	r3, r2
 80123d0:	00db      	lsls	r3, r3, #3
 80123d2:	440b      	add	r3, r1
 80123d4:	3312      	adds	r3, #18
 80123d6:	881b      	ldrh	r3, [r3, #0]
 80123d8:	837b      	strh	r3, [r7, #26]
 80123da:	e01c      	b.n	8012416 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80123dc:	7dfb      	ldrb	r3, [r7, #23]
 80123de:	2b01      	cmp	r3, #1
 80123e0:	d919      	bls.n	8012416 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80123e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123e6:	495e      	ldr	r1, [pc, #376]	; (8012560 <etharp_find_entry+0x2d4>)
 80123e8:	4613      	mov	r3, r2
 80123ea:	005b      	lsls	r3, r3, #1
 80123ec:	4413      	add	r3, r2
 80123ee:	00db      	lsls	r3, r3, #3
 80123f0:	440b      	add	r3, r1
 80123f2:	3312      	adds	r3, #18
 80123f4:	881b      	ldrh	r3, [r3, #0]
 80123f6:	8b3a      	ldrh	r2, [r7, #24]
 80123f8:	429a      	cmp	r2, r3
 80123fa:	d80c      	bhi.n	8012416 <etharp_find_entry+0x18a>
            old_stable = i;
 80123fc:	8c3b      	ldrh	r3, [r7, #32]
 80123fe:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012400:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012404:	4956      	ldr	r1, [pc, #344]	; (8012560 <etharp_find_entry+0x2d4>)
 8012406:	4613      	mov	r3, r2
 8012408:	005b      	lsls	r3, r3, #1
 801240a:	4413      	add	r3, r2
 801240c:	00db      	lsls	r3, r3, #3
 801240e:	440b      	add	r3, r1
 8012410:	3312      	adds	r3, #18
 8012412:	881b      	ldrh	r3, [r3, #0]
 8012414:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012416:	8c3b      	ldrh	r3, [r7, #32]
 8012418:	3301      	adds	r3, #1
 801241a:	b29b      	uxth	r3, r3
 801241c:	843b      	strh	r3, [r7, #32]
 801241e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012422:	2b09      	cmp	r3, #9
 8012424:	f77f af4c 	ble.w	80122c0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012428:	7afb      	ldrb	r3, [r7, #11]
 801242a:	f003 0302 	and.w	r3, r3, #2
 801242e:	2b00      	cmp	r3, #0
 8012430:	d108      	bne.n	8012444 <etharp_find_entry+0x1b8>
 8012432:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012436:	2b0a      	cmp	r3, #10
 8012438:	d107      	bne.n	801244a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801243a:	7afb      	ldrb	r3, [r7, #11]
 801243c:	f003 0301 	and.w	r3, r3, #1
 8012440:	2b00      	cmp	r3, #0
 8012442:	d102      	bne.n	801244a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012448:	e085      	b.n	8012556 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801244a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801244e:	2b09      	cmp	r3, #9
 8012450:	dc02      	bgt.n	8012458 <etharp_find_entry+0x1cc>
    i = empty;
 8012452:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012454:	843b      	strh	r3, [r7, #32]
 8012456:	e039      	b.n	80124cc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012458:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801245c:	2b09      	cmp	r3, #9
 801245e:	dc14      	bgt.n	801248a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012462:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012464:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012468:	493d      	ldr	r1, [pc, #244]	; (8012560 <etharp_find_entry+0x2d4>)
 801246a:	4613      	mov	r3, r2
 801246c:	005b      	lsls	r3, r3, #1
 801246e:	4413      	add	r3, r2
 8012470:	00db      	lsls	r3, r3, #3
 8012472:	440b      	add	r3, r1
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d018      	beq.n	80124ac <etharp_find_entry+0x220>
 801247a:	4b3a      	ldr	r3, [pc, #232]	; (8012564 <etharp_find_entry+0x2d8>)
 801247c:	f240 126d 	movw	r2, #365	; 0x16d
 8012480:	493b      	ldr	r1, [pc, #236]	; (8012570 <etharp_find_entry+0x2e4>)
 8012482:	483a      	ldr	r0, [pc, #232]	; (801256c <etharp_find_entry+0x2e0>)
 8012484:	f002 fd16 	bl	8014eb4 <iprintf>
 8012488:	e010      	b.n	80124ac <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801248a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801248e:	2b09      	cmp	r3, #9
 8012490:	dc02      	bgt.n	8012498 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012492:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012494:	843b      	strh	r3, [r7, #32]
 8012496:	e009      	b.n	80124ac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012498:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801249c:	2b09      	cmp	r3, #9
 801249e:	dc02      	bgt.n	80124a6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80124a0:	8bfb      	ldrh	r3, [r7, #30]
 80124a2:	843b      	strh	r3, [r7, #32]
 80124a4:	e002      	b.n	80124ac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80124a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124aa:	e054      	b.n	8012556 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80124ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80124b0:	2b09      	cmp	r3, #9
 80124b2:	dd06      	ble.n	80124c2 <etharp_find_entry+0x236>
 80124b4:	4b2b      	ldr	r3, [pc, #172]	; (8012564 <etharp_find_entry+0x2d8>)
 80124b6:	f240 127f 	movw	r2, #383	; 0x17f
 80124ba:	492e      	ldr	r1, [pc, #184]	; (8012574 <etharp_find_entry+0x2e8>)
 80124bc:	482b      	ldr	r0, [pc, #172]	; (801256c <etharp_find_entry+0x2e0>)
 80124be:	f002 fcf9 	bl	8014eb4 <iprintf>
    etharp_free_entry(i);
 80124c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80124c6:	4618      	mov	r0, r3
 80124c8:	f7ff fe06 	bl	80120d8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80124cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80124d0:	2b09      	cmp	r3, #9
 80124d2:	dd06      	ble.n	80124e2 <etharp_find_entry+0x256>
 80124d4:	4b23      	ldr	r3, [pc, #140]	; (8012564 <etharp_find_entry+0x2d8>)
 80124d6:	f240 1283 	movw	r2, #387	; 0x183
 80124da:	4926      	ldr	r1, [pc, #152]	; (8012574 <etharp_find_entry+0x2e8>)
 80124dc:	4823      	ldr	r0, [pc, #140]	; (801256c <etharp_find_entry+0x2e0>)
 80124de:	f002 fce9 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80124e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80124e6:	491e      	ldr	r1, [pc, #120]	; (8012560 <etharp_find_entry+0x2d4>)
 80124e8:	4613      	mov	r3, r2
 80124ea:	005b      	lsls	r3, r3, #1
 80124ec:	4413      	add	r3, r2
 80124ee:	00db      	lsls	r3, r3, #3
 80124f0:	440b      	add	r3, r1
 80124f2:	3314      	adds	r3, #20
 80124f4:	781b      	ldrb	r3, [r3, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d006      	beq.n	8012508 <etharp_find_entry+0x27c>
 80124fa:	4b1a      	ldr	r3, [pc, #104]	; (8012564 <etharp_find_entry+0x2d8>)
 80124fc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012500:	491d      	ldr	r1, [pc, #116]	; (8012578 <etharp_find_entry+0x2ec>)
 8012502:	481a      	ldr	r0, [pc, #104]	; (801256c <etharp_find_entry+0x2e0>)
 8012504:	f002 fcd6 	bl	8014eb4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d00b      	beq.n	8012526 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801250e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	6819      	ldr	r1, [r3, #0]
 8012516:	4812      	ldr	r0, [pc, #72]	; (8012560 <etharp_find_entry+0x2d4>)
 8012518:	4613      	mov	r3, r2
 801251a:	005b      	lsls	r3, r3, #1
 801251c:	4413      	add	r3, r2
 801251e:	00db      	lsls	r3, r3, #3
 8012520:	4403      	add	r3, r0
 8012522:	3304      	adds	r3, #4
 8012524:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012526:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801252a:	490d      	ldr	r1, [pc, #52]	; (8012560 <etharp_find_entry+0x2d4>)
 801252c:	4613      	mov	r3, r2
 801252e:	005b      	lsls	r3, r3, #1
 8012530:	4413      	add	r3, r2
 8012532:	00db      	lsls	r3, r3, #3
 8012534:	440b      	add	r3, r1
 8012536:	3312      	adds	r3, #18
 8012538:	2200      	movs	r2, #0
 801253a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801253c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012540:	4907      	ldr	r1, [pc, #28]	; (8012560 <etharp_find_entry+0x2d4>)
 8012542:	4613      	mov	r3, r2
 8012544:	005b      	lsls	r3, r3, #1
 8012546:	4413      	add	r3, r2
 8012548:	00db      	lsls	r3, r3, #3
 801254a:	440b      	add	r3, r1
 801254c:	3308      	adds	r3, #8
 801254e:	687a      	ldr	r2, [r7, #4]
 8012550:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012552:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012556:	4618      	mov	r0, r3
 8012558:	3728      	adds	r7, #40	; 0x28
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}
 801255e:	bf00      	nop
 8012560:	20017b28 	.word	0x20017b28
 8012564:	08018fcc 	.word	0x08018fcc
 8012568:	08019004 	.word	0x08019004
 801256c:	08019044 	.word	0x08019044
 8012570:	0801906c 	.word	0x0801906c
 8012574:	08019084 	.word	0x08019084
 8012578:	08019098 	.word	0x08019098

0801257c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b088      	sub	sp, #32
 8012580:	af02      	add	r7, sp, #8
 8012582:	60f8      	str	r0, [r7, #12]
 8012584:	60b9      	str	r1, [r7, #8]
 8012586:	607a      	str	r2, [r7, #4]
 8012588:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012590:	2b06      	cmp	r3, #6
 8012592:	d006      	beq.n	80125a2 <etharp_update_arp_entry+0x26>
 8012594:	4b48      	ldr	r3, [pc, #288]	; (80126b8 <etharp_update_arp_entry+0x13c>)
 8012596:	f240 12a9 	movw	r2, #425	; 0x1a9
 801259a:	4948      	ldr	r1, [pc, #288]	; (80126bc <etharp_update_arp_entry+0x140>)
 801259c:	4848      	ldr	r0, [pc, #288]	; (80126c0 <etharp_update_arp_entry+0x144>)
 801259e:	f002 fc89 	bl	8014eb4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d012      	beq.n	80125ce <etharp_update_arp_entry+0x52>
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d00e      	beq.n	80125ce <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	68f9      	ldr	r1, [r7, #12]
 80125b6:	4618      	mov	r0, r3
 80125b8:	f001 f8fe 	bl	80137b8 <ip4_addr_isbroadcast_u32>
 80125bc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d105      	bne.n	80125ce <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80125c2:	68bb      	ldr	r3, [r7, #8]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80125ca:	2be0      	cmp	r3, #224	; 0xe0
 80125cc:	d102      	bne.n	80125d4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80125ce:	f06f 030f 	mvn.w	r3, #15
 80125d2:	e06c      	b.n	80126ae <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80125d4:	78fb      	ldrb	r3, [r7, #3]
 80125d6:	68fa      	ldr	r2, [r7, #12]
 80125d8:	4619      	mov	r1, r3
 80125da:	68b8      	ldr	r0, [r7, #8]
 80125dc:	f7ff fe56 	bl	801228c <etharp_find_entry>
 80125e0:	4603      	mov	r3, r0
 80125e2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80125e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	da02      	bge.n	80125f2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80125ec:	8afb      	ldrh	r3, [r7, #22]
 80125ee:	b25b      	sxtb	r3, r3
 80125f0:	e05d      	b.n	80126ae <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80125f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80125f6:	4933      	ldr	r1, [pc, #204]	; (80126c4 <etharp_update_arp_entry+0x148>)
 80125f8:	4613      	mov	r3, r2
 80125fa:	005b      	lsls	r3, r3, #1
 80125fc:	4413      	add	r3, r2
 80125fe:	00db      	lsls	r3, r3, #3
 8012600:	440b      	add	r3, r1
 8012602:	3314      	adds	r3, #20
 8012604:	2202      	movs	r2, #2
 8012606:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012608:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801260c:	492d      	ldr	r1, [pc, #180]	; (80126c4 <etharp_update_arp_entry+0x148>)
 801260e:	4613      	mov	r3, r2
 8012610:	005b      	lsls	r3, r3, #1
 8012612:	4413      	add	r3, r2
 8012614:	00db      	lsls	r3, r3, #3
 8012616:	440b      	add	r3, r1
 8012618:	3308      	adds	r3, #8
 801261a:	68fa      	ldr	r2, [r7, #12]
 801261c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801261e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012622:	4613      	mov	r3, r2
 8012624:	005b      	lsls	r3, r3, #1
 8012626:	4413      	add	r3, r2
 8012628:	00db      	lsls	r3, r3, #3
 801262a:	3308      	adds	r3, #8
 801262c:	4a25      	ldr	r2, [pc, #148]	; (80126c4 <etharp_update_arp_entry+0x148>)
 801262e:	4413      	add	r3, r2
 8012630:	3304      	adds	r3, #4
 8012632:	2206      	movs	r2, #6
 8012634:	6879      	ldr	r1, [r7, #4]
 8012636:	4618      	mov	r0, r3
 8012638:	f002 fb2b 	bl	8014c92 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801263c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012640:	4920      	ldr	r1, [pc, #128]	; (80126c4 <etharp_update_arp_entry+0x148>)
 8012642:	4613      	mov	r3, r2
 8012644:	005b      	lsls	r3, r3, #1
 8012646:	4413      	add	r3, r2
 8012648:	00db      	lsls	r3, r3, #3
 801264a:	440b      	add	r3, r1
 801264c:	3312      	adds	r3, #18
 801264e:	2200      	movs	r2, #0
 8012650:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012652:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012656:	491b      	ldr	r1, [pc, #108]	; (80126c4 <etharp_update_arp_entry+0x148>)
 8012658:	4613      	mov	r3, r2
 801265a:	005b      	lsls	r3, r3, #1
 801265c:	4413      	add	r3, r2
 801265e:	00db      	lsls	r3, r3, #3
 8012660:	440b      	add	r3, r1
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d021      	beq.n	80126ac <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012668:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801266c:	4915      	ldr	r1, [pc, #84]	; (80126c4 <etharp_update_arp_entry+0x148>)
 801266e:	4613      	mov	r3, r2
 8012670:	005b      	lsls	r3, r3, #1
 8012672:	4413      	add	r3, r2
 8012674:	00db      	lsls	r3, r3, #3
 8012676:	440b      	add	r3, r1
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801267c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012680:	4910      	ldr	r1, [pc, #64]	; (80126c4 <etharp_update_arp_entry+0x148>)
 8012682:	4613      	mov	r3, r2
 8012684:	005b      	lsls	r3, r3, #1
 8012686:	4413      	add	r3, r2
 8012688:	00db      	lsls	r3, r3, #3
 801268a:	440b      	add	r3, r1
 801268c:	2200      	movs	r2, #0
 801268e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012696:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801269a:	9300      	str	r3, [sp, #0]
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	6939      	ldr	r1, [r7, #16]
 80126a0:	68f8      	ldr	r0, [r7, #12]
 80126a2:	f001 ff97 	bl	80145d4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80126a6:	6938      	ldr	r0, [r7, #16]
 80126a8:	f7f9 faec 	bl	800bc84 <pbuf_free>
  }
  return ERR_OK;
 80126ac:	2300      	movs	r3, #0
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	3718      	adds	r7, #24
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}
 80126b6:	bf00      	nop
 80126b8:	08018fcc 	.word	0x08018fcc
 80126bc:	080190c4 	.word	0x080190c4
 80126c0:	08019044 	.word	0x08019044
 80126c4:	20017b28 	.word	0x20017b28

080126c8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b084      	sub	sp, #16
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80126d0:	2300      	movs	r3, #0
 80126d2:	60fb      	str	r3, [r7, #12]
 80126d4:	e01e      	b.n	8012714 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80126d6:	4913      	ldr	r1, [pc, #76]	; (8012724 <etharp_cleanup_netif+0x5c>)
 80126d8:	68fa      	ldr	r2, [r7, #12]
 80126da:	4613      	mov	r3, r2
 80126dc:	005b      	lsls	r3, r3, #1
 80126de:	4413      	add	r3, r2
 80126e0:	00db      	lsls	r3, r3, #3
 80126e2:	440b      	add	r3, r1
 80126e4:	3314      	adds	r3, #20
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80126ea:	7afb      	ldrb	r3, [r7, #11]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d00e      	beq.n	801270e <etharp_cleanup_netif+0x46>
 80126f0:	490c      	ldr	r1, [pc, #48]	; (8012724 <etharp_cleanup_netif+0x5c>)
 80126f2:	68fa      	ldr	r2, [r7, #12]
 80126f4:	4613      	mov	r3, r2
 80126f6:	005b      	lsls	r3, r3, #1
 80126f8:	4413      	add	r3, r2
 80126fa:	00db      	lsls	r3, r3, #3
 80126fc:	440b      	add	r3, r1
 80126fe:	3308      	adds	r3, #8
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	687a      	ldr	r2, [r7, #4]
 8012704:	429a      	cmp	r2, r3
 8012706:	d102      	bne.n	801270e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012708:	68f8      	ldr	r0, [r7, #12]
 801270a:	f7ff fce5 	bl	80120d8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	3301      	adds	r3, #1
 8012712:	60fb      	str	r3, [r7, #12]
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	2b09      	cmp	r3, #9
 8012718:	dddd      	ble.n	80126d6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801271a:	bf00      	nop
 801271c:	bf00      	nop
 801271e:	3710      	adds	r7, #16
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}
 8012724:	20017b28 	.word	0x20017b28

08012728 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012728:	b5b0      	push	{r4, r5, r7, lr}
 801272a:	b08a      	sub	sp, #40	; 0x28
 801272c:	af04      	add	r7, sp, #16
 801272e:	6078      	str	r0, [r7, #4]
 8012730:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d107      	bne.n	8012748 <etharp_input+0x20>
 8012738:	4b3d      	ldr	r3, [pc, #244]	; (8012830 <etharp_input+0x108>)
 801273a:	f240 228a 	movw	r2, #650	; 0x28a
 801273e:	493d      	ldr	r1, [pc, #244]	; (8012834 <etharp_input+0x10c>)
 8012740:	483d      	ldr	r0, [pc, #244]	; (8012838 <etharp_input+0x110>)
 8012742:	f002 fbb7 	bl	8014eb4 <iprintf>
 8012746:	e06f      	b.n	8012828 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	685b      	ldr	r3, [r3, #4]
 801274c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	881b      	ldrh	r3, [r3, #0]
 8012752:	b29b      	uxth	r3, r3
 8012754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012758:	d10c      	bne.n	8012774 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801275a:	693b      	ldr	r3, [r7, #16]
 801275c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801275e:	2b06      	cmp	r3, #6
 8012760:	d108      	bne.n	8012774 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012762:	693b      	ldr	r3, [r7, #16]
 8012764:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012766:	2b04      	cmp	r3, #4
 8012768:	d104      	bne.n	8012774 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	885b      	ldrh	r3, [r3, #2]
 801276e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012770:	2b08      	cmp	r3, #8
 8012772:	d003      	beq.n	801277c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f7f9 fa85 	bl	800bc84 <pbuf_free>
    return;
 801277a:	e055      	b.n	8012828 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801277c:	693b      	ldr	r3, [r7, #16]
 801277e:	330e      	adds	r3, #14
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	3318      	adds	r3, #24
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	3304      	adds	r3, #4
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d102      	bne.n	801279c <etharp_input+0x74>
    for_us = 0;
 8012796:	2300      	movs	r3, #0
 8012798:	75fb      	strb	r3, [r7, #23]
 801279a:	e009      	b.n	80127b0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801279c:	68ba      	ldr	r2, [r7, #8]
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	3304      	adds	r3, #4
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	429a      	cmp	r2, r3
 80127a6:	bf0c      	ite	eq
 80127a8:	2301      	moveq	r3, #1
 80127aa:	2300      	movne	r3, #0
 80127ac:	b2db      	uxtb	r3, r3
 80127ae:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	f103 0208 	add.w	r2, r3, #8
 80127b6:	7dfb      	ldrb	r3, [r7, #23]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d001      	beq.n	80127c0 <etharp_input+0x98>
 80127bc:	2301      	movs	r3, #1
 80127be:	e000      	b.n	80127c2 <etharp_input+0x9a>
 80127c0:	2302      	movs	r3, #2
 80127c2:	f107 010c 	add.w	r1, r7, #12
 80127c6:	6838      	ldr	r0, [r7, #0]
 80127c8:	f7ff fed8 	bl	801257c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	88db      	ldrh	r3, [r3, #6]
 80127d0:	b29b      	uxth	r3, r3
 80127d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127d6:	d003      	beq.n	80127e0 <etharp_input+0xb8>
 80127d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127dc:	d01e      	beq.n	801281c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80127de:	e020      	b.n	8012822 <etharp_input+0xfa>
      if (for_us) {
 80127e0:	7dfb      	ldrb	r3, [r7, #23]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d01c      	beq.n	8012820 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80127ec:	693b      	ldr	r3, [r7, #16]
 80127ee:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80127fc:	693a      	ldr	r2, [r7, #16]
 80127fe:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012800:	2102      	movs	r1, #2
 8012802:	9103      	str	r1, [sp, #12]
 8012804:	f107 010c 	add.w	r1, r7, #12
 8012808:	9102      	str	r1, [sp, #8]
 801280a:	9201      	str	r2, [sp, #4]
 801280c:	9300      	str	r3, [sp, #0]
 801280e:	462b      	mov	r3, r5
 8012810:	4622      	mov	r2, r4
 8012812:	4601      	mov	r1, r0
 8012814:	6838      	ldr	r0, [r7, #0]
 8012816:	f000 faeb 	bl	8012df0 <etharp_raw>
      break;
 801281a:	e001      	b.n	8012820 <etharp_input+0xf8>
      break;
 801281c:	bf00      	nop
 801281e:	e000      	b.n	8012822 <etharp_input+0xfa>
      break;
 8012820:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f7f9 fa2e 	bl	800bc84 <pbuf_free>
}
 8012828:	3718      	adds	r7, #24
 801282a:	46bd      	mov	sp, r7
 801282c:	bdb0      	pop	{r4, r5, r7, pc}
 801282e:	bf00      	nop
 8012830:	08018fcc 	.word	0x08018fcc
 8012834:	0801911c 	.word	0x0801911c
 8012838:	08019044 	.word	0x08019044

0801283c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b086      	sub	sp, #24
 8012840:	af02      	add	r7, sp, #8
 8012842:	60f8      	str	r0, [r7, #12]
 8012844:	60b9      	str	r1, [r7, #8]
 8012846:	4613      	mov	r3, r2
 8012848:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801284a:	79fa      	ldrb	r2, [r7, #7]
 801284c:	4944      	ldr	r1, [pc, #272]	; (8012960 <etharp_output_to_arp_index+0x124>)
 801284e:	4613      	mov	r3, r2
 8012850:	005b      	lsls	r3, r3, #1
 8012852:	4413      	add	r3, r2
 8012854:	00db      	lsls	r3, r3, #3
 8012856:	440b      	add	r3, r1
 8012858:	3314      	adds	r3, #20
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	2b01      	cmp	r3, #1
 801285e:	d806      	bhi.n	801286e <etharp_output_to_arp_index+0x32>
 8012860:	4b40      	ldr	r3, [pc, #256]	; (8012964 <etharp_output_to_arp_index+0x128>)
 8012862:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012866:	4940      	ldr	r1, [pc, #256]	; (8012968 <etharp_output_to_arp_index+0x12c>)
 8012868:	4840      	ldr	r0, [pc, #256]	; (801296c <etharp_output_to_arp_index+0x130>)
 801286a:	f002 fb23 	bl	8014eb4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801286e:	79fa      	ldrb	r2, [r7, #7]
 8012870:	493b      	ldr	r1, [pc, #236]	; (8012960 <etharp_output_to_arp_index+0x124>)
 8012872:	4613      	mov	r3, r2
 8012874:	005b      	lsls	r3, r3, #1
 8012876:	4413      	add	r3, r2
 8012878:	00db      	lsls	r3, r3, #3
 801287a:	440b      	add	r3, r1
 801287c:	3314      	adds	r3, #20
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	2b02      	cmp	r3, #2
 8012882:	d153      	bne.n	801292c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012884:	79fa      	ldrb	r2, [r7, #7]
 8012886:	4936      	ldr	r1, [pc, #216]	; (8012960 <etharp_output_to_arp_index+0x124>)
 8012888:	4613      	mov	r3, r2
 801288a:	005b      	lsls	r3, r3, #1
 801288c:	4413      	add	r3, r2
 801288e:	00db      	lsls	r3, r3, #3
 8012890:	440b      	add	r3, r1
 8012892:	3312      	adds	r3, #18
 8012894:	881b      	ldrh	r3, [r3, #0]
 8012896:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801289a:	d919      	bls.n	80128d0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801289c:	79fa      	ldrb	r2, [r7, #7]
 801289e:	4613      	mov	r3, r2
 80128a0:	005b      	lsls	r3, r3, #1
 80128a2:	4413      	add	r3, r2
 80128a4:	00db      	lsls	r3, r3, #3
 80128a6:	4a2e      	ldr	r2, [pc, #184]	; (8012960 <etharp_output_to_arp_index+0x124>)
 80128a8:	4413      	add	r3, r2
 80128aa:	3304      	adds	r3, #4
 80128ac:	4619      	mov	r1, r3
 80128ae:	68f8      	ldr	r0, [r7, #12]
 80128b0:	f000 fb4c 	bl	8012f4c <etharp_request>
 80128b4:	4603      	mov	r3, r0
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d138      	bne.n	801292c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80128ba:	79fa      	ldrb	r2, [r7, #7]
 80128bc:	4928      	ldr	r1, [pc, #160]	; (8012960 <etharp_output_to_arp_index+0x124>)
 80128be:	4613      	mov	r3, r2
 80128c0:	005b      	lsls	r3, r3, #1
 80128c2:	4413      	add	r3, r2
 80128c4:	00db      	lsls	r3, r3, #3
 80128c6:	440b      	add	r3, r1
 80128c8:	3314      	adds	r3, #20
 80128ca:	2203      	movs	r2, #3
 80128cc:	701a      	strb	r2, [r3, #0]
 80128ce:	e02d      	b.n	801292c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80128d0:	79fa      	ldrb	r2, [r7, #7]
 80128d2:	4923      	ldr	r1, [pc, #140]	; (8012960 <etharp_output_to_arp_index+0x124>)
 80128d4:	4613      	mov	r3, r2
 80128d6:	005b      	lsls	r3, r3, #1
 80128d8:	4413      	add	r3, r2
 80128da:	00db      	lsls	r3, r3, #3
 80128dc:	440b      	add	r3, r1
 80128de:	3312      	adds	r3, #18
 80128e0:	881b      	ldrh	r3, [r3, #0]
 80128e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80128e6:	d321      	bcc.n	801292c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80128e8:	79fa      	ldrb	r2, [r7, #7]
 80128ea:	4613      	mov	r3, r2
 80128ec:	005b      	lsls	r3, r3, #1
 80128ee:	4413      	add	r3, r2
 80128f0:	00db      	lsls	r3, r3, #3
 80128f2:	4a1b      	ldr	r2, [pc, #108]	; (8012960 <etharp_output_to_arp_index+0x124>)
 80128f4:	4413      	add	r3, r2
 80128f6:	1d19      	adds	r1, r3, #4
 80128f8:	79fa      	ldrb	r2, [r7, #7]
 80128fa:	4613      	mov	r3, r2
 80128fc:	005b      	lsls	r3, r3, #1
 80128fe:	4413      	add	r3, r2
 8012900:	00db      	lsls	r3, r3, #3
 8012902:	3308      	adds	r3, #8
 8012904:	4a16      	ldr	r2, [pc, #88]	; (8012960 <etharp_output_to_arp_index+0x124>)
 8012906:	4413      	add	r3, r2
 8012908:	3304      	adds	r3, #4
 801290a:	461a      	mov	r2, r3
 801290c:	68f8      	ldr	r0, [r7, #12]
 801290e:	f000 fafb 	bl	8012f08 <etharp_request_dst>
 8012912:	4603      	mov	r3, r0
 8012914:	2b00      	cmp	r3, #0
 8012916:	d109      	bne.n	801292c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012918:	79fa      	ldrb	r2, [r7, #7]
 801291a:	4911      	ldr	r1, [pc, #68]	; (8012960 <etharp_output_to_arp_index+0x124>)
 801291c:	4613      	mov	r3, r2
 801291e:	005b      	lsls	r3, r3, #1
 8012920:	4413      	add	r3, r2
 8012922:	00db      	lsls	r3, r3, #3
 8012924:	440b      	add	r3, r1
 8012926:	3314      	adds	r3, #20
 8012928:	2203      	movs	r2, #3
 801292a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8012932:	79fa      	ldrb	r2, [r7, #7]
 8012934:	4613      	mov	r3, r2
 8012936:	005b      	lsls	r3, r3, #1
 8012938:	4413      	add	r3, r2
 801293a:	00db      	lsls	r3, r3, #3
 801293c:	3308      	adds	r3, #8
 801293e:	4a08      	ldr	r2, [pc, #32]	; (8012960 <etharp_output_to_arp_index+0x124>)
 8012940:	4413      	add	r3, r2
 8012942:	3304      	adds	r3, #4
 8012944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012948:	9200      	str	r2, [sp, #0]
 801294a:	460a      	mov	r2, r1
 801294c:	68b9      	ldr	r1, [r7, #8]
 801294e:	68f8      	ldr	r0, [r7, #12]
 8012950:	f001 fe40 	bl	80145d4 <ethernet_output>
 8012954:	4603      	mov	r3, r0
}
 8012956:	4618      	mov	r0, r3
 8012958:	3710      	adds	r7, #16
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop
 8012960:	20017b28 	.word	0x20017b28
 8012964:	08018fcc 	.word	0x08018fcc
 8012968:	0801913c 	.word	0x0801913c
 801296c:	08019044 	.word	0x08019044

08012970 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b08a      	sub	sp, #40	; 0x28
 8012974:	af02      	add	r7, sp, #8
 8012976:	60f8      	str	r0, [r7, #12]
 8012978:	60b9      	str	r1, [r7, #8]
 801297a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d106      	bne.n	8012994 <etharp_output+0x24>
 8012986:	4b73      	ldr	r3, [pc, #460]	; (8012b54 <etharp_output+0x1e4>)
 8012988:	f240 321e 	movw	r2, #798	; 0x31e
 801298c:	4972      	ldr	r1, [pc, #456]	; (8012b58 <etharp_output+0x1e8>)
 801298e:	4873      	ldr	r0, [pc, #460]	; (8012b5c <etharp_output+0x1ec>)
 8012990:	f002 fa90 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d106      	bne.n	80129a8 <etharp_output+0x38>
 801299a:	4b6e      	ldr	r3, [pc, #440]	; (8012b54 <etharp_output+0x1e4>)
 801299c:	f240 321f 	movw	r2, #799	; 0x31f
 80129a0:	496f      	ldr	r1, [pc, #444]	; (8012b60 <etharp_output+0x1f0>)
 80129a2:	486e      	ldr	r0, [pc, #440]	; (8012b5c <etharp_output+0x1ec>)
 80129a4:	f002 fa86 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d106      	bne.n	80129bc <etharp_output+0x4c>
 80129ae:	4b69      	ldr	r3, [pc, #420]	; (8012b54 <etharp_output+0x1e4>)
 80129b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80129b4:	496b      	ldr	r1, [pc, #428]	; (8012b64 <etharp_output+0x1f4>)
 80129b6:	4869      	ldr	r0, [pc, #420]	; (8012b5c <etharp_output+0x1ec>)
 80129b8:	f002 fa7c 	bl	8014eb4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	68f9      	ldr	r1, [r7, #12]
 80129c2:	4618      	mov	r0, r3
 80129c4:	f000 fef8 	bl	80137b8 <ip4_addr_isbroadcast_u32>
 80129c8:	4603      	mov	r3, r0
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d002      	beq.n	80129d4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80129ce:	4b66      	ldr	r3, [pc, #408]	; (8012b68 <etharp_output+0x1f8>)
 80129d0:	61fb      	str	r3, [r7, #28]
 80129d2:	e0af      	b.n	8012b34 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80129dc:	2be0      	cmp	r3, #224	; 0xe0
 80129de:	d118      	bne.n	8012a12 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80129e0:	2301      	movs	r3, #1
 80129e2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80129e4:	2300      	movs	r3, #0
 80129e6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80129e8:	235e      	movs	r3, #94	; 0x5e
 80129ea:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	3301      	adds	r3, #1
 80129f0:	781b      	ldrb	r3, [r3, #0]
 80129f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80129f6:	b2db      	uxtb	r3, r3
 80129f8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	3302      	adds	r3, #2
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	3303      	adds	r3, #3
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012a0a:	f107 0310 	add.w	r3, r7, #16
 8012a0e:	61fb      	str	r3, [r7, #28]
 8012a10:	e090      	b.n	8012b34 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681a      	ldr	r2, [r3, #0]
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	3304      	adds	r3, #4
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	405a      	eors	r2, r3
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	3308      	adds	r3, #8
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	4013      	ands	r3, r2
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d012      	beq.n	8012a50 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012a30:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012a34:	4293      	cmp	r3, r2
 8012a36:	d00b      	beq.n	8012a50 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	330c      	adds	r3, #12
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d003      	beq.n	8012a4a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	330c      	adds	r3, #12
 8012a46:	61bb      	str	r3, [r7, #24]
 8012a48:	e002      	b.n	8012a50 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012a4a:	f06f 0303 	mvn.w	r3, #3
 8012a4e:	e07d      	b.n	8012b4c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012a50:	4b46      	ldr	r3, [pc, #280]	; (8012b6c <etharp_output+0x1fc>)
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	4619      	mov	r1, r3
 8012a56:	4a46      	ldr	r2, [pc, #280]	; (8012b70 <etharp_output+0x200>)
 8012a58:	460b      	mov	r3, r1
 8012a5a:	005b      	lsls	r3, r3, #1
 8012a5c:	440b      	add	r3, r1
 8012a5e:	00db      	lsls	r3, r3, #3
 8012a60:	4413      	add	r3, r2
 8012a62:	3314      	adds	r3, #20
 8012a64:	781b      	ldrb	r3, [r3, #0]
 8012a66:	2b01      	cmp	r3, #1
 8012a68:	d925      	bls.n	8012ab6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012a6a:	4b40      	ldr	r3, [pc, #256]	; (8012b6c <etharp_output+0x1fc>)
 8012a6c:	781b      	ldrb	r3, [r3, #0]
 8012a6e:	4619      	mov	r1, r3
 8012a70:	4a3f      	ldr	r2, [pc, #252]	; (8012b70 <etharp_output+0x200>)
 8012a72:	460b      	mov	r3, r1
 8012a74:	005b      	lsls	r3, r3, #1
 8012a76:	440b      	add	r3, r1
 8012a78:	00db      	lsls	r3, r3, #3
 8012a7a:	4413      	add	r3, r2
 8012a7c:	3308      	adds	r3, #8
 8012a7e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012a80:	68fa      	ldr	r2, [r7, #12]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d117      	bne.n	8012ab6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012a86:	69bb      	ldr	r3, [r7, #24]
 8012a88:	681a      	ldr	r2, [r3, #0]
 8012a8a:	4b38      	ldr	r3, [pc, #224]	; (8012b6c <etharp_output+0x1fc>)
 8012a8c:	781b      	ldrb	r3, [r3, #0]
 8012a8e:	4618      	mov	r0, r3
 8012a90:	4937      	ldr	r1, [pc, #220]	; (8012b70 <etharp_output+0x200>)
 8012a92:	4603      	mov	r3, r0
 8012a94:	005b      	lsls	r3, r3, #1
 8012a96:	4403      	add	r3, r0
 8012a98:	00db      	lsls	r3, r3, #3
 8012a9a:	440b      	add	r3, r1
 8012a9c:	3304      	adds	r3, #4
 8012a9e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012aa0:	429a      	cmp	r2, r3
 8012aa2:	d108      	bne.n	8012ab6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012aa4:	4b31      	ldr	r3, [pc, #196]	; (8012b6c <etharp_output+0x1fc>)
 8012aa6:	781b      	ldrb	r3, [r3, #0]
 8012aa8:	461a      	mov	r2, r3
 8012aaa:	68b9      	ldr	r1, [r7, #8]
 8012aac:	68f8      	ldr	r0, [r7, #12]
 8012aae:	f7ff fec5 	bl	801283c <etharp_output_to_arp_index>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	e04a      	b.n	8012b4c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	75fb      	strb	r3, [r7, #23]
 8012aba:	e031      	b.n	8012b20 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012abc:	7dfa      	ldrb	r2, [r7, #23]
 8012abe:	492c      	ldr	r1, [pc, #176]	; (8012b70 <etharp_output+0x200>)
 8012ac0:	4613      	mov	r3, r2
 8012ac2:	005b      	lsls	r3, r3, #1
 8012ac4:	4413      	add	r3, r2
 8012ac6:	00db      	lsls	r3, r3, #3
 8012ac8:	440b      	add	r3, r1
 8012aca:	3314      	adds	r3, #20
 8012acc:	781b      	ldrb	r3, [r3, #0]
 8012ace:	2b01      	cmp	r3, #1
 8012ad0:	d923      	bls.n	8012b1a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012ad2:	7dfa      	ldrb	r2, [r7, #23]
 8012ad4:	4926      	ldr	r1, [pc, #152]	; (8012b70 <etharp_output+0x200>)
 8012ad6:	4613      	mov	r3, r2
 8012ad8:	005b      	lsls	r3, r3, #1
 8012ada:	4413      	add	r3, r2
 8012adc:	00db      	lsls	r3, r3, #3
 8012ade:	440b      	add	r3, r1
 8012ae0:	3308      	adds	r3, #8
 8012ae2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012ae4:	68fa      	ldr	r2, [r7, #12]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d117      	bne.n	8012b1a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012aea:	69bb      	ldr	r3, [r7, #24]
 8012aec:	6819      	ldr	r1, [r3, #0]
 8012aee:	7dfa      	ldrb	r2, [r7, #23]
 8012af0:	481f      	ldr	r0, [pc, #124]	; (8012b70 <etharp_output+0x200>)
 8012af2:	4613      	mov	r3, r2
 8012af4:	005b      	lsls	r3, r3, #1
 8012af6:	4413      	add	r3, r2
 8012af8:	00db      	lsls	r3, r3, #3
 8012afa:	4403      	add	r3, r0
 8012afc:	3304      	adds	r3, #4
 8012afe:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012b00:	4299      	cmp	r1, r3
 8012b02:	d10a      	bne.n	8012b1a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012b04:	4a19      	ldr	r2, [pc, #100]	; (8012b6c <etharp_output+0x1fc>)
 8012b06:	7dfb      	ldrb	r3, [r7, #23]
 8012b08:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012b0a:	7dfb      	ldrb	r3, [r7, #23]
 8012b0c:	461a      	mov	r2, r3
 8012b0e:	68b9      	ldr	r1, [r7, #8]
 8012b10:	68f8      	ldr	r0, [r7, #12]
 8012b12:	f7ff fe93 	bl	801283c <etharp_output_to_arp_index>
 8012b16:	4603      	mov	r3, r0
 8012b18:	e018      	b.n	8012b4c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012b1a:	7dfb      	ldrb	r3, [r7, #23]
 8012b1c:	3301      	adds	r3, #1
 8012b1e:	75fb      	strb	r3, [r7, #23]
 8012b20:	7dfb      	ldrb	r3, [r7, #23]
 8012b22:	2b09      	cmp	r3, #9
 8012b24:	d9ca      	bls.n	8012abc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012b26:	68ba      	ldr	r2, [r7, #8]
 8012b28:	69b9      	ldr	r1, [r7, #24]
 8012b2a:	68f8      	ldr	r0, [r7, #12]
 8012b2c:	f000 f822 	bl	8012b74 <etharp_query>
 8012b30:	4603      	mov	r3, r0
 8012b32:	e00b      	b.n	8012b4c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012b3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012b3e:	9300      	str	r3, [sp, #0]
 8012b40:	69fb      	ldr	r3, [r7, #28]
 8012b42:	68b9      	ldr	r1, [r7, #8]
 8012b44:	68f8      	ldr	r0, [r7, #12]
 8012b46:	f001 fd45 	bl	80145d4 <ethernet_output>
 8012b4a:	4603      	mov	r3, r0
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	3720      	adds	r7, #32
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd80      	pop	{r7, pc}
 8012b54:	08018fcc 	.word	0x08018fcc
 8012b58:	0801911c 	.word	0x0801911c
 8012b5c:	08019044 	.word	0x08019044
 8012b60:	0801916c 	.word	0x0801916c
 8012b64:	0801910c 	.word	0x0801910c
 8012b68:	080197d4 	.word	0x080197d4
 8012b6c:	20017c18 	.word	0x20017c18
 8012b70:	20017b28 	.word	0x20017b28

08012b74 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b08c      	sub	sp, #48	; 0x30
 8012b78:	af02      	add	r7, sp, #8
 8012b7a:	60f8      	str	r0, [r7, #12]
 8012b7c:	60b9      	str	r1, [r7, #8]
 8012b7e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	3326      	adds	r3, #38	; 0x26
 8012b84:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012b86:	23ff      	movs	r3, #255	; 0xff
 8012b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	68f9      	ldr	r1, [r7, #12]
 8012b96:	4618      	mov	r0, r3
 8012b98:	f000 fe0e 	bl	80137b8 <ip4_addr_isbroadcast_u32>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d10c      	bne.n	8012bbc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012baa:	2be0      	cmp	r3, #224	; 0xe0
 8012bac:	d006      	beq.n	8012bbc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d003      	beq.n	8012bbc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012bb4:	68bb      	ldr	r3, [r7, #8]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d102      	bne.n	8012bc2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012bbc:	f06f 030f 	mvn.w	r3, #15
 8012bc0:	e101      	b.n	8012dc6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012bc2:	68fa      	ldr	r2, [r7, #12]
 8012bc4:	2101      	movs	r1, #1
 8012bc6:	68b8      	ldr	r0, [r7, #8]
 8012bc8:	f7ff fb60 	bl	801228c <etharp_find_entry>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012bd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	da02      	bge.n	8012bde <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012bd8:	8a7b      	ldrh	r3, [r7, #18]
 8012bda:	b25b      	sxtb	r3, r3
 8012bdc:	e0f3      	b.n	8012dc6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012bde:	8a7b      	ldrh	r3, [r7, #18]
 8012be0:	2b7e      	cmp	r3, #126	; 0x7e
 8012be2:	d906      	bls.n	8012bf2 <etharp_query+0x7e>
 8012be4:	4b7a      	ldr	r3, [pc, #488]	; (8012dd0 <etharp_query+0x25c>)
 8012be6:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012bea:	497a      	ldr	r1, [pc, #488]	; (8012dd4 <etharp_query+0x260>)
 8012bec:	487a      	ldr	r0, [pc, #488]	; (8012dd8 <etharp_query+0x264>)
 8012bee:	f002 f961 	bl	8014eb4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012bf2:	8a7b      	ldrh	r3, [r7, #18]
 8012bf4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012bf6:	7c7a      	ldrb	r2, [r7, #17]
 8012bf8:	4978      	ldr	r1, [pc, #480]	; (8012ddc <etharp_query+0x268>)
 8012bfa:	4613      	mov	r3, r2
 8012bfc:	005b      	lsls	r3, r3, #1
 8012bfe:	4413      	add	r3, r2
 8012c00:	00db      	lsls	r3, r3, #3
 8012c02:	440b      	add	r3, r1
 8012c04:	3314      	adds	r3, #20
 8012c06:	781b      	ldrb	r3, [r3, #0]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d115      	bne.n	8012c38 <etharp_query+0xc4>
    is_new_entry = 1;
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012c10:	7c7a      	ldrb	r2, [r7, #17]
 8012c12:	4972      	ldr	r1, [pc, #456]	; (8012ddc <etharp_query+0x268>)
 8012c14:	4613      	mov	r3, r2
 8012c16:	005b      	lsls	r3, r3, #1
 8012c18:	4413      	add	r3, r2
 8012c1a:	00db      	lsls	r3, r3, #3
 8012c1c:	440b      	add	r3, r1
 8012c1e:	3314      	adds	r3, #20
 8012c20:	2201      	movs	r2, #1
 8012c22:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012c24:	7c7a      	ldrb	r2, [r7, #17]
 8012c26:	496d      	ldr	r1, [pc, #436]	; (8012ddc <etharp_query+0x268>)
 8012c28:	4613      	mov	r3, r2
 8012c2a:	005b      	lsls	r3, r3, #1
 8012c2c:	4413      	add	r3, r2
 8012c2e:	00db      	lsls	r3, r3, #3
 8012c30:	440b      	add	r3, r1
 8012c32:	3308      	adds	r3, #8
 8012c34:	68fa      	ldr	r2, [r7, #12]
 8012c36:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012c38:	7c7a      	ldrb	r2, [r7, #17]
 8012c3a:	4968      	ldr	r1, [pc, #416]	; (8012ddc <etharp_query+0x268>)
 8012c3c:	4613      	mov	r3, r2
 8012c3e:	005b      	lsls	r3, r3, #1
 8012c40:	4413      	add	r3, r2
 8012c42:	00db      	lsls	r3, r3, #3
 8012c44:	440b      	add	r3, r1
 8012c46:	3314      	adds	r3, #20
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	2b01      	cmp	r3, #1
 8012c4c:	d011      	beq.n	8012c72 <etharp_query+0xfe>
 8012c4e:	7c7a      	ldrb	r2, [r7, #17]
 8012c50:	4962      	ldr	r1, [pc, #392]	; (8012ddc <etharp_query+0x268>)
 8012c52:	4613      	mov	r3, r2
 8012c54:	005b      	lsls	r3, r3, #1
 8012c56:	4413      	add	r3, r2
 8012c58:	00db      	lsls	r3, r3, #3
 8012c5a:	440b      	add	r3, r1
 8012c5c:	3314      	adds	r3, #20
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	2b01      	cmp	r3, #1
 8012c62:	d806      	bhi.n	8012c72 <etharp_query+0xfe>
 8012c64:	4b5a      	ldr	r3, [pc, #360]	; (8012dd0 <etharp_query+0x25c>)
 8012c66:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012c6a:	495d      	ldr	r1, [pc, #372]	; (8012de0 <etharp_query+0x26c>)
 8012c6c:	485a      	ldr	r0, [pc, #360]	; (8012dd8 <etharp_query+0x264>)
 8012c6e:	f002 f921 	bl	8014eb4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012c72:	6a3b      	ldr	r3, [r7, #32]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d102      	bne.n	8012c7e <etharp_query+0x10a>
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d10c      	bne.n	8012c98 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012c7e:	68b9      	ldr	r1, [r7, #8]
 8012c80:	68f8      	ldr	r0, [r7, #12]
 8012c82:	f000 f963 	bl	8012f4c <etharp_request>
 8012c86:	4603      	mov	r3, r0
 8012c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d102      	bne.n	8012c98 <etharp_query+0x124>
      return result;
 8012c92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012c96:	e096      	b.n	8012dc6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d106      	bne.n	8012cac <etharp_query+0x138>
 8012c9e:	4b4c      	ldr	r3, [pc, #304]	; (8012dd0 <etharp_query+0x25c>)
 8012ca0:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012ca4:	494f      	ldr	r1, [pc, #316]	; (8012de4 <etharp_query+0x270>)
 8012ca6:	484c      	ldr	r0, [pc, #304]	; (8012dd8 <etharp_query+0x264>)
 8012ca8:	f002 f904 	bl	8014eb4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012cac:	7c7a      	ldrb	r2, [r7, #17]
 8012cae:	494b      	ldr	r1, [pc, #300]	; (8012ddc <etharp_query+0x268>)
 8012cb0:	4613      	mov	r3, r2
 8012cb2:	005b      	lsls	r3, r3, #1
 8012cb4:	4413      	add	r3, r2
 8012cb6:	00db      	lsls	r3, r3, #3
 8012cb8:	440b      	add	r3, r1
 8012cba:	3314      	adds	r3, #20
 8012cbc:	781b      	ldrb	r3, [r3, #0]
 8012cbe:	2b01      	cmp	r3, #1
 8012cc0:	d917      	bls.n	8012cf2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012cc2:	4a49      	ldr	r2, [pc, #292]	; (8012de8 <etharp_query+0x274>)
 8012cc4:	7c7b      	ldrb	r3, [r7, #17]
 8012cc6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012cc8:	7c7a      	ldrb	r2, [r7, #17]
 8012cca:	4613      	mov	r3, r2
 8012ccc:	005b      	lsls	r3, r3, #1
 8012cce:	4413      	add	r3, r2
 8012cd0:	00db      	lsls	r3, r3, #3
 8012cd2:	3308      	adds	r3, #8
 8012cd4:	4a41      	ldr	r2, [pc, #260]	; (8012ddc <etharp_query+0x268>)
 8012cd6:	4413      	add	r3, r2
 8012cd8:	3304      	adds	r3, #4
 8012cda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012cde:	9200      	str	r2, [sp, #0]
 8012ce0:	697a      	ldr	r2, [r7, #20]
 8012ce2:	6879      	ldr	r1, [r7, #4]
 8012ce4:	68f8      	ldr	r0, [r7, #12]
 8012ce6:	f001 fc75 	bl	80145d4 <ethernet_output>
 8012cea:	4603      	mov	r3, r0
 8012cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012cf0:	e067      	b.n	8012dc2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012cf2:	7c7a      	ldrb	r2, [r7, #17]
 8012cf4:	4939      	ldr	r1, [pc, #228]	; (8012ddc <etharp_query+0x268>)
 8012cf6:	4613      	mov	r3, r2
 8012cf8:	005b      	lsls	r3, r3, #1
 8012cfa:	4413      	add	r3, r2
 8012cfc:	00db      	lsls	r3, r3, #3
 8012cfe:	440b      	add	r3, r1
 8012d00:	3314      	adds	r3, #20
 8012d02:	781b      	ldrb	r3, [r3, #0]
 8012d04:	2b01      	cmp	r3, #1
 8012d06:	d15c      	bne.n	8012dc2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012d10:	e01c      	b.n	8012d4c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012d12:	69fb      	ldr	r3, [r7, #28]
 8012d14:	895a      	ldrh	r2, [r3, #10]
 8012d16:	69fb      	ldr	r3, [r7, #28]
 8012d18:	891b      	ldrh	r3, [r3, #8]
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d10a      	bne.n	8012d34 <etharp_query+0x1c0>
 8012d1e:	69fb      	ldr	r3, [r7, #28]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d006      	beq.n	8012d34 <etharp_query+0x1c0>
 8012d26:	4b2a      	ldr	r3, [pc, #168]	; (8012dd0 <etharp_query+0x25c>)
 8012d28:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012d2c:	492f      	ldr	r1, [pc, #188]	; (8012dec <etharp_query+0x278>)
 8012d2e:	482a      	ldr	r0, [pc, #168]	; (8012dd8 <etharp_query+0x264>)
 8012d30:	f002 f8c0 	bl	8014eb4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012d34:	69fb      	ldr	r3, [r7, #28]
 8012d36:	7b1b      	ldrb	r3, [r3, #12]
 8012d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d002      	beq.n	8012d46 <etharp_query+0x1d2>
        copy_needed = 1;
 8012d40:	2301      	movs	r3, #1
 8012d42:	61bb      	str	r3, [r7, #24]
        break;
 8012d44:	e005      	b.n	8012d52 <etharp_query+0x1de>
      }
      p = p->next;
 8012d46:	69fb      	ldr	r3, [r7, #28]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012d4c:	69fb      	ldr	r3, [r7, #28]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d1df      	bne.n	8012d12 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012d52:	69bb      	ldr	r3, [r7, #24]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d007      	beq.n	8012d68 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012d58:	687a      	ldr	r2, [r7, #4]
 8012d5a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012d5e:	200e      	movs	r0, #14
 8012d60:	f7f9 fa08 	bl	800c174 <pbuf_clone>
 8012d64:	61f8      	str	r0, [r7, #28]
 8012d66:	e004      	b.n	8012d72 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012d6c:	69f8      	ldr	r0, [r7, #28]
 8012d6e:	f7f9 f82f 	bl	800bdd0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012d72:	69fb      	ldr	r3, [r7, #28]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d021      	beq.n	8012dbc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012d78:	7c7a      	ldrb	r2, [r7, #17]
 8012d7a:	4918      	ldr	r1, [pc, #96]	; (8012ddc <etharp_query+0x268>)
 8012d7c:	4613      	mov	r3, r2
 8012d7e:	005b      	lsls	r3, r3, #1
 8012d80:	4413      	add	r3, r2
 8012d82:	00db      	lsls	r3, r3, #3
 8012d84:	440b      	add	r3, r1
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d00a      	beq.n	8012da2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012d8c:	7c7a      	ldrb	r2, [r7, #17]
 8012d8e:	4913      	ldr	r1, [pc, #76]	; (8012ddc <etharp_query+0x268>)
 8012d90:	4613      	mov	r3, r2
 8012d92:	005b      	lsls	r3, r3, #1
 8012d94:	4413      	add	r3, r2
 8012d96:	00db      	lsls	r3, r3, #3
 8012d98:	440b      	add	r3, r1
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7f8 ff71 	bl	800bc84 <pbuf_free>
      }
      arp_table[i].q = p;
 8012da2:	7c7a      	ldrb	r2, [r7, #17]
 8012da4:	490d      	ldr	r1, [pc, #52]	; (8012ddc <etharp_query+0x268>)
 8012da6:	4613      	mov	r3, r2
 8012da8:	005b      	lsls	r3, r3, #1
 8012daa:	4413      	add	r3, r2
 8012dac:	00db      	lsls	r3, r3, #3
 8012dae:	440b      	add	r3, r1
 8012db0:	69fa      	ldr	r2, [r7, #28]
 8012db2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012db4:	2300      	movs	r3, #0
 8012db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012dba:	e002      	b.n	8012dc2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012dbc:	23ff      	movs	r3, #255	; 0xff
 8012dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012dc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3728      	adds	r7, #40	; 0x28
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	08018fcc 	.word	0x08018fcc
 8012dd4:	08019178 	.word	0x08019178
 8012dd8:	08019044 	.word	0x08019044
 8012ddc:	20017b28 	.word	0x20017b28
 8012de0:	08019188 	.word	0x08019188
 8012de4:	0801916c 	.word	0x0801916c
 8012de8:	20017c18 	.word	0x20017c18
 8012dec:	080191b0 	.word	0x080191b0

08012df0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b08a      	sub	sp, #40	; 0x28
 8012df4:	af02      	add	r7, sp, #8
 8012df6:	60f8      	str	r0, [r7, #12]
 8012df8:	60b9      	str	r1, [r7, #8]
 8012dfa:	607a      	str	r2, [r7, #4]
 8012dfc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d106      	bne.n	8012e16 <etharp_raw+0x26>
 8012e08:	4b3a      	ldr	r3, [pc, #232]	; (8012ef4 <etharp_raw+0x104>)
 8012e0a:	f240 4257 	movw	r2, #1111	; 0x457
 8012e0e:	493a      	ldr	r1, [pc, #232]	; (8012ef8 <etharp_raw+0x108>)
 8012e10:	483a      	ldr	r0, [pc, #232]	; (8012efc <etharp_raw+0x10c>)
 8012e12:	f002 f84f 	bl	8014eb4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012e16:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e1a:	211c      	movs	r1, #28
 8012e1c:	200e      	movs	r0, #14
 8012e1e:	f7f8 fc4d 	bl	800b6bc <pbuf_alloc>
 8012e22:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012e24:	69bb      	ldr	r3, [r7, #24]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d102      	bne.n	8012e30 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e2e:	e05d      	b.n	8012eec <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012e30:	69bb      	ldr	r3, [r7, #24]
 8012e32:	895b      	ldrh	r3, [r3, #10]
 8012e34:	2b1b      	cmp	r3, #27
 8012e36:	d806      	bhi.n	8012e46 <etharp_raw+0x56>
 8012e38:	4b2e      	ldr	r3, [pc, #184]	; (8012ef4 <etharp_raw+0x104>)
 8012e3a:	f240 4262 	movw	r2, #1122	; 0x462
 8012e3e:	4930      	ldr	r1, [pc, #192]	; (8012f00 <etharp_raw+0x110>)
 8012e40:	482e      	ldr	r0, [pc, #184]	; (8012efc <etharp_raw+0x10c>)
 8012e42:	f002 f837 	bl	8014eb4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012e46:	69bb      	ldr	r3, [r7, #24]
 8012e48:	685b      	ldr	r3, [r3, #4]
 8012e4a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012e4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7f7 fb26 	bl	800a4a0 <lwip_htons>
 8012e54:	4603      	mov	r3, r0
 8012e56:	461a      	mov	r2, r3
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012e62:	2b06      	cmp	r3, #6
 8012e64:	d006      	beq.n	8012e74 <etharp_raw+0x84>
 8012e66:	4b23      	ldr	r3, [pc, #140]	; (8012ef4 <etharp_raw+0x104>)
 8012e68:	f240 4269 	movw	r2, #1129	; 0x469
 8012e6c:	4925      	ldr	r1, [pc, #148]	; (8012f04 <etharp_raw+0x114>)
 8012e6e:	4823      	ldr	r0, [pc, #140]	; (8012efc <etharp_raw+0x10c>)
 8012e70:	f002 f820 	bl	8014eb4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	3308      	adds	r3, #8
 8012e78:	2206      	movs	r2, #6
 8012e7a:	6839      	ldr	r1, [r7, #0]
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f001 ff08 	bl	8014c92 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012e82:	697b      	ldr	r3, [r7, #20]
 8012e84:	3312      	adds	r3, #18
 8012e86:	2206      	movs	r2, #6
 8012e88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f001 ff01 	bl	8014c92 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	330e      	adds	r3, #14
 8012e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e96:	6812      	ldr	r2, [r2, #0]
 8012e98:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012e9a:	697b      	ldr	r3, [r7, #20]
 8012e9c:	3318      	adds	r3, #24
 8012e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ea0:	6812      	ldr	r2, [r2, #0]
 8012ea2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012ea4:	697b      	ldr	r3, [r7, #20]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	701a      	strb	r2, [r3, #0]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	f042 0201 	orr.w	r2, r2, #1
 8012eb0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012eb2:	697b      	ldr	r3, [r7, #20]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	f042 0208 	orr.w	r2, r2, #8
 8012eba:	709a      	strb	r2, [r3, #2]
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012ec0:	697b      	ldr	r3, [r7, #20]
 8012ec2:	2206      	movs	r2, #6
 8012ec4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	2204      	movs	r2, #4
 8012eca:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012ecc:	f640 0306 	movw	r3, #2054	; 0x806
 8012ed0:	9300      	str	r3, [sp, #0]
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	68ba      	ldr	r2, [r7, #8]
 8012ed6:	69b9      	ldr	r1, [r7, #24]
 8012ed8:	68f8      	ldr	r0, [r7, #12]
 8012eda:	f001 fb7b 	bl	80145d4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012ede:	69b8      	ldr	r0, [r7, #24]
 8012ee0:	f7f8 fed0 	bl	800bc84 <pbuf_free>
  p = NULL;
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012ee8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012eec:	4618      	mov	r0, r3
 8012eee:	3720      	adds	r7, #32
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}
 8012ef4:	08018fcc 	.word	0x08018fcc
 8012ef8:	0801911c 	.word	0x0801911c
 8012efc:	08019044 	.word	0x08019044
 8012f00:	080191cc 	.word	0x080191cc
 8012f04:	08019200 	.word	0x08019200

08012f08 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b088      	sub	sp, #32
 8012f0c:	af04      	add	r7, sp, #16
 8012f0e:	60f8      	str	r0, [r7, #12]
 8012f10:	60b9      	str	r1, [r7, #8]
 8012f12:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012f24:	2201      	movs	r2, #1
 8012f26:	9203      	str	r2, [sp, #12]
 8012f28:	68ba      	ldr	r2, [r7, #8]
 8012f2a:	9202      	str	r2, [sp, #8]
 8012f2c:	4a06      	ldr	r2, [pc, #24]	; (8012f48 <etharp_request_dst+0x40>)
 8012f2e:	9201      	str	r2, [sp, #4]
 8012f30:	9300      	str	r3, [sp, #0]
 8012f32:	4603      	mov	r3, r0
 8012f34:	687a      	ldr	r2, [r7, #4]
 8012f36:	68f8      	ldr	r0, [r7, #12]
 8012f38:	f7ff ff5a 	bl	8012df0 <etharp_raw>
 8012f3c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3710      	adds	r7, #16
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	080197dc 	.word	0x080197dc

08012f4c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b082      	sub	sp, #8
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012f56:	4a05      	ldr	r2, [pc, #20]	; (8012f6c <etharp_request+0x20>)
 8012f58:	6839      	ldr	r1, [r7, #0]
 8012f5a:	6878      	ldr	r0, [r7, #4]
 8012f5c:	f7ff ffd4 	bl	8012f08 <etharp_request_dst>
 8012f60:	4603      	mov	r3, r0
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3708      	adds	r7, #8
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	080197d4 	.word	0x080197d4

08012f70 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b08e      	sub	sp, #56	; 0x38
 8012f74:	af04      	add	r7, sp, #16
 8012f76:	6078      	str	r0, [r7, #4]
 8012f78:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012f7a:	4b79      	ldr	r3, [pc, #484]	; (8013160 <icmp_input+0x1f0>)
 8012f7c:	689b      	ldr	r3, [r3, #8]
 8012f7e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f82:	781b      	ldrb	r3, [r3, #0]
 8012f84:	f003 030f 	and.w	r3, r3, #15
 8012f88:	b2db      	uxtb	r3, r3
 8012f8a:	009b      	lsls	r3, r3, #2
 8012f8c:	b2db      	uxtb	r3, r3
 8012f8e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012f90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f92:	2b13      	cmp	r3, #19
 8012f94:	f240 80cd 	bls.w	8013132 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	895b      	ldrh	r3, [r3, #10]
 8012f9c:	2b03      	cmp	r3, #3
 8012f9e:	f240 80ca 	bls.w	8013136 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	685b      	ldr	r3, [r3, #4]
 8012fa6:	781b      	ldrb	r3, [r3, #0]
 8012fa8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012fac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	f000 80b7 	beq.w	8013124 <icmp_input+0x1b4>
 8012fb6:	2b08      	cmp	r3, #8
 8012fb8:	f040 80b7 	bne.w	801312a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012fbc:	4b69      	ldr	r3, [pc, #420]	; (8013164 <icmp_input+0x1f4>)
 8012fbe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012fc0:	4b67      	ldr	r3, [pc, #412]	; (8013160 <icmp_input+0x1f0>)
 8012fc2:	695b      	ldr	r3, [r3, #20]
 8012fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012fc8:	2be0      	cmp	r3, #224	; 0xe0
 8012fca:	f000 80bb 	beq.w	8013144 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012fce:	4b64      	ldr	r3, [pc, #400]	; (8013160 <icmp_input+0x1f0>)
 8012fd0:	695b      	ldr	r3, [r3, #20]
 8012fd2:	4a63      	ldr	r2, [pc, #396]	; (8013160 <icmp_input+0x1f0>)
 8012fd4:	6812      	ldr	r2, [r2, #0]
 8012fd6:	4611      	mov	r1, r2
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f000 fbed 	bl	80137b8 <ip4_addr_isbroadcast_u32>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	f040 80b1 	bne.w	8013148 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	891b      	ldrh	r3, [r3, #8]
 8012fea:	2b07      	cmp	r3, #7
 8012fec:	f240 80a5 	bls.w	801313a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012ff0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ff2:	330e      	adds	r3, #14
 8012ff4:	4619      	mov	r1, r3
 8012ff6:	6878      	ldr	r0, [r7, #4]
 8012ff8:	f7f8 fdae 	bl	800bb58 <pbuf_add_header>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d04b      	beq.n	801309a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	891a      	ldrh	r2, [r3, #8]
 8013006:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013008:	4413      	add	r3, r2
 801300a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	891b      	ldrh	r3, [r3, #8]
 8013010:	8b7a      	ldrh	r2, [r7, #26]
 8013012:	429a      	cmp	r2, r3
 8013014:	f0c0 809a 	bcc.w	801314c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013018:	8b7b      	ldrh	r3, [r7, #26]
 801301a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801301e:	4619      	mov	r1, r3
 8013020:	200e      	movs	r0, #14
 8013022:	f7f8 fb4b 	bl	800b6bc <pbuf_alloc>
 8013026:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	2b00      	cmp	r3, #0
 801302c:	f000 8090 	beq.w	8013150 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013030:	697b      	ldr	r3, [r7, #20]
 8013032:	895b      	ldrh	r3, [r3, #10]
 8013034:	461a      	mov	r2, r3
 8013036:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013038:	3308      	adds	r3, #8
 801303a:	429a      	cmp	r2, r3
 801303c:	d203      	bcs.n	8013046 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801303e:	6978      	ldr	r0, [r7, #20]
 8013040:	f7f8 fe20 	bl	800bc84 <pbuf_free>
          goto icmperr;
 8013044:	e085      	b.n	8013152 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	685b      	ldr	r3, [r3, #4]
 801304a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801304c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801304e:	4618      	mov	r0, r3
 8013050:	f001 fe1f 	bl	8014c92 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013054:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013056:	4619      	mov	r1, r3
 8013058:	6978      	ldr	r0, [r7, #20]
 801305a:	f7f8 fd8d 	bl	800bb78 <pbuf_remove_header>
 801305e:	4603      	mov	r3, r0
 8013060:	2b00      	cmp	r3, #0
 8013062:	d009      	beq.n	8013078 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013064:	4b40      	ldr	r3, [pc, #256]	; (8013168 <icmp_input+0x1f8>)
 8013066:	22b6      	movs	r2, #182	; 0xb6
 8013068:	4940      	ldr	r1, [pc, #256]	; (801316c <icmp_input+0x1fc>)
 801306a:	4841      	ldr	r0, [pc, #260]	; (8013170 <icmp_input+0x200>)
 801306c:	f001 ff22 	bl	8014eb4 <iprintf>
          pbuf_free(r);
 8013070:	6978      	ldr	r0, [r7, #20]
 8013072:	f7f8 fe07 	bl	800bc84 <pbuf_free>
          goto icmperr;
 8013076:	e06c      	b.n	8013152 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013078:	6879      	ldr	r1, [r7, #4]
 801307a:	6978      	ldr	r0, [r7, #20]
 801307c:	f7f8 ff36 	bl	800beec <pbuf_copy>
 8013080:	4603      	mov	r3, r0
 8013082:	2b00      	cmp	r3, #0
 8013084:	d003      	beq.n	801308e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013086:	6978      	ldr	r0, [r7, #20]
 8013088:	f7f8 fdfc 	bl	800bc84 <pbuf_free>
          goto icmperr;
 801308c:	e061      	b.n	8013152 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801308e:	6878      	ldr	r0, [r7, #4]
 8013090:	f7f8 fdf8 	bl	800bc84 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	607b      	str	r3, [r7, #4]
 8013098:	e00f      	b.n	80130ba <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801309a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801309c:	330e      	adds	r3, #14
 801309e:	4619      	mov	r1, r3
 80130a0:	6878      	ldr	r0, [r7, #4]
 80130a2:	f7f8 fd69 	bl	800bb78 <pbuf_remove_header>
 80130a6:	4603      	mov	r3, r0
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d006      	beq.n	80130ba <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80130ac:	4b2e      	ldr	r3, [pc, #184]	; (8013168 <icmp_input+0x1f8>)
 80130ae:	22c7      	movs	r2, #199	; 0xc7
 80130b0:	4930      	ldr	r1, [pc, #192]	; (8013174 <icmp_input+0x204>)
 80130b2:	482f      	ldr	r0, [pc, #188]	; (8013170 <icmp_input+0x200>)
 80130b4:	f001 fefe 	bl	8014eb4 <iprintf>
          goto icmperr;
 80130b8:	e04b      	b.n	8013152 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	685b      	ldr	r3, [r3, #4]
 80130be:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80130c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80130c2:	4619      	mov	r1, r3
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	f7f8 fd47 	bl	800bb58 <pbuf_add_header>
 80130ca:	4603      	mov	r3, r0
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d12b      	bne.n	8013128 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	685b      	ldr	r3, [r3, #4]
 80130d4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80130d6:	69fb      	ldr	r3, [r7, #28]
 80130d8:	681a      	ldr	r2, [r3, #0]
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80130de:	4b20      	ldr	r3, [pc, #128]	; (8013160 <icmp_input+0x1f0>)
 80130e0:	691a      	ldr	r2, [r3, #16]
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	2200      	movs	r2, #0
 80130ea:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80130ec:	693b      	ldr	r3, [r7, #16]
 80130ee:	2200      	movs	r2, #0
 80130f0:	709a      	strb	r2, [r3, #2]
 80130f2:	2200      	movs	r2, #0
 80130f4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	22ff      	movs	r2, #255	; 0xff
 80130fa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	2200      	movs	r2, #0
 8013100:	729a      	strb	r2, [r3, #10]
 8013102:	2200      	movs	r2, #0
 8013104:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013106:	683b      	ldr	r3, [r7, #0]
 8013108:	9302      	str	r3, [sp, #8]
 801310a:	2301      	movs	r3, #1
 801310c:	9301      	str	r3, [sp, #4]
 801310e:	2300      	movs	r3, #0
 8013110:	9300      	str	r3, [sp, #0]
 8013112:	23ff      	movs	r3, #255	; 0xff
 8013114:	2200      	movs	r2, #0
 8013116:	69f9      	ldr	r1, [r7, #28]
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f000 fa75 	bl	8013608 <ip4_output_if>
 801311e:	4603      	mov	r3, r0
 8013120:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013122:	e001      	b.n	8013128 <icmp_input+0x1b8>
      break;
 8013124:	bf00      	nop
 8013126:	e000      	b.n	801312a <icmp_input+0x1ba>
      break;
 8013128:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801312a:	6878      	ldr	r0, [r7, #4]
 801312c:	f7f8 fdaa 	bl	800bc84 <pbuf_free>
  return;
 8013130:	e013      	b.n	801315a <icmp_input+0x1ea>
    goto lenerr;
 8013132:	bf00      	nop
 8013134:	e002      	b.n	801313c <icmp_input+0x1cc>
    goto lenerr;
 8013136:	bf00      	nop
 8013138:	e000      	b.n	801313c <icmp_input+0x1cc>
        goto lenerr;
 801313a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801313c:	6878      	ldr	r0, [r7, #4]
 801313e:	f7f8 fda1 	bl	800bc84 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013142:	e00a      	b.n	801315a <icmp_input+0x1ea>
        goto icmperr;
 8013144:	bf00      	nop
 8013146:	e004      	b.n	8013152 <icmp_input+0x1e2>
        goto icmperr;
 8013148:	bf00      	nop
 801314a:	e002      	b.n	8013152 <icmp_input+0x1e2>
          goto icmperr;
 801314c:	bf00      	nop
 801314e:	e000      	b.n	8013152 <icmp_input+0x1e2>
          goto icmperr;
 8013150:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f7f8 fd96 	bl	800bc84 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013158:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801315a:	3728      	adds	r7, #40	; 0x28
 801315c:	46bd      	mov	sp, r7
 801315e:	bd80      	pop	{r7, pc}
 8013160:	200139b4 	.word	0x200139b4
 8013164:	200139c8 	.word	0x200139c8
 8013168:	08019244 	.word	0x08019244
 801316c:	0801927c 	.word	0x0801927c
 8013170:	080192b4 	.word	0x080192b4
 8013174:	080192dc 	.word	0x080192dc

08013178 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b082      	sub	sp, #8
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
 8013180:	460b      	mov	r3, r1
 8013182:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013184:	78fb      	ldrb	r3, [r7, #3]
 8013186:	461a      	mov	r2, r3
 8013188:	2103      	movs	r1, #3
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f000 f814 	bl	80131b8 <icmp_send_response>
}
 8013190:	bf00      	nop
 8013192:	3708      	adds	r7, #8
 8013194:	46bd      	mov	sp, r7
 8013196:	bd80      	pop	{r7, pc}

08013198 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b082      	sub	sp, #8
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
 80131a0:	460b      	mov	r3, r1
 80131a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80131a4:	78fb      	ldrb	r3, [r7, #3]
 80131a6:	461a      	mov	r2, r3
 80131a8:	210b      	movs	r1, #11
 80131aa:	6878      	ldr	r0, [r7, #4]
 80131ac:	f000 f804 	bl	80131b8 <icmp_send_response>
}
 80131b0:	bf00      	nop
 80131b2:	3708      	adds	r7, #8
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}

080131b8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b08c      	sub	sp, #48	; 0x30
 80131bc:	af04      	add	r7, sp, #16
 80131be:	6078      	str	r0, [r7, #4]
 80131c0:	460b      	mov	r3, r1
 80131c2:	70fb      	strb	r3, [r7, #3]
 80131c4:	4613      	mov	r3, r2
 80131c6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80131c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80131cc:	2124      	movs	r1, #36	; 0x24
 80131ce:	2022      	movs	r0, #34	; 0x22
 80131d0:	f7f8 fa74 	bl	800b6bc <pbuf_alloc>
 80131d4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80131d6:	69fb      	ldr	r3, [r7, #28]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d04c      	beq.n	8013276 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80131dc:	69fb      	ldr	r3, [r7, #28]
 80131de:	895b      	ldrh	r3, [r3, #10]
 80131e0:	2b23      	cmp	r3, #35	; 0x23
 80131e2:	d806      	bhi.n	80131f2 <icmp_send_response+0x3a>
 80131e4:	4b26      	ldr	r3, [pc, #152]	; (8013280 <icmp_send_response+0xc8>)
 80131e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80131ea:	4926      	ldr	r1, [pc, #152]	; (8013284 <icmp_send_response+0xcc>)
 80131ec:	4826      	ldr	r0, [pc, #152]	; (8013288 <icmp_send_response+0xd0>)
 80131ee:	f001 fe61 	bl	8014eb4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	685b      	ldr	r3, [r3, #4]
 80131f6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80131f8:	69fb      	ldr	r3, [r7, #28]
 80131fa:	685b      	ldr	r3, [r3, #4]
 80131fc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	78fa      	ldrb	r2, [r7, #3]
 8013202:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	78ba      	ldrb	r2, [r7, #2]
 8013208:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	2200      	movs	r2, #0
 801320e:	711a      	strb	r2, [r3, #4]
 8013210:	2200      	movs	r2, #0
 8013212:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	2200      	movs	r2, #0
 8013218:	719a      	strb	r2, [r3, #6]
 801321a:	2200      	movs	r2, #0
 801321c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801321e:	69fb      	ldr	r3, [r7, #28]
 8013220:	685b      	ldr	r3, [r3, #4]
 8013222:	f103 0008 	add.w	r0, r3, #8
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	685b      	ldr	r3, [r3, #4]
 801322a:	221c      	movs	r2, #28
 801322c:	4619      	mov	r1, r3
 801322e:	f001 fd30 	bl	8014c92 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013232:	69bb      	ldr	r3, [r7, #24]
 8013234:	68db      	ldr	r3, [r3, #12]
 8013236:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013238:	f107 030c 	add.w	r3, r7, #12
 801323c:	4618      	mov	r0, r3
 801323e:	f000 f825 	bl	801328c <ip4_route>
 8013242:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d011      	beq.n	801326e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801324a:	697b      	ldr	r3, [r7, #20]
 801324c:	2200      	movs	r2, #0
 801324e:	709a      	strb	r2, [r3, #2]
 8013250:	2200      	movs	r2, #0
 8013252:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013254:	f107 020c 	add.w	r2, r7, #12
 8013258:	693b      	ldr	r3, [r7, #16]
 801325a:	9302      	str	r3, [sp, #8]
 801325c:	2301      	movs	r3, #1
 801325e:	9301      	str	r3, [sp, #4]
 8013260:	2300      	movs	r3, #0
 8013262:	9300      	str	r3, [sp, #0]
 8013264:	23ff      	movs	r3, #255	; 0xff
 8013266:	2100      	movs	r1, #0
 8013268:	69f8      	ldr	r0, [r7, #28]
 801326a:	f000 f9cd 	bl	8013608 <ip4_output_if>
  }
  pbuf_free(q);
 801326e:	69f8      	ldr	r0, [r7, #28]
 8013270:	f7f8 fd08 	bl	800bc84 <pbuf_free>
 8013274:	e000      	b.n	8013278 <icmp_send_response+0xc0>
    return;
 8013276:	bf00      	nop
}
 8013278:	3720      	adds	r7, #32
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
 801327e:	bf00      	nop
 8013280:	08019244 	.word	0x08019244
 8013284:	08019310 	.word	0x08019310
 8013288:	080192b4 	.word	0x080192b4

0801328c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801328c:	b480      	push	{r7}
 801328e:	b085      	sub	sp, #20
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013294:	4b33      	ldr	r3, [pc, #204]	; (8013364 <ip4_route+0xd8>)
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	60fb      	str	r3, [r7, #12]
 801329a:	e036      	b.n	801330a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80132a2:	f003 0301 	and.w	r3, r3, #1
 80132a6:	b2db      	uxtb	r3, r3
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d02b      	beq.n	8013304 <ip4_route+0x78>
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80132b2:	089b      	lsrs	r3, r3, #2
 80132b4:	f003 0301 	and.w	r3, r3, #1
 80132b8:	b2db      	uxtb	r3, r3
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d022      	beq.n	8013304 <ip4_route+0x78>
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	3304      	adds	r3, #4
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d01d      	beq.n	8013304 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681a      	ldr	r2, [r3, #0]
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	3304      	adds	r3, #4
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	405a      	eors	r2, r3
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	3308      	adds	r3, #8
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	4013      	ands	r3, r2
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d101      	bne.n	80132e4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	e038      	b.n	8013356 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80132ea:	f003 0302 	and.w	r3, r3, #2
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d108      	bne.n	8013304 <ip4_route+0x78>
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681a      	ldr	r2, [r3, #0]
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	330c      	adds	r3, #12
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	429a      	cmp	r2, r3
 80132fe:	d101      	bne.n	8013304 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	e028      	b.n	8013356 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	60fb      	str	r3, [r7, #12]
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d1c5      	bne.n	801329c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013310:	4b15      	ldr	r3, [pc, #84]	; (8013368 <ip4_route+0xdc>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d01a      	beq.n	801334e <ip4_route+0xc2>
 8013318:	4b13      	ldr	r3, [pc, #76]	; (8013368 <ip4_route+0xdc>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013320:	f003 0301 	and.w	r3, r3, #1
 8013324:	2b00      	cmp	r3, #0
 8013326:	d012      	beq.n	801334e <ip4_route+0xc2>
 8013328:	4b0f      	ldr	r3, [pc, #60]	; (8013368 <ip4_route+0xdc>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013330:	f003 0304 	and.w	r3, r3, #4
 8013334:	2b00      	cmp	r3, #0
 8013336:	d00a      	beq.n	801334e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013338:	4b0b      	ldr	r3, [pc, #44]	; (8013368 <ip4_route+0xdc>)
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	3304      	adds	r3, #4
 801333e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013340:	2b00      	cmp	r3, #0
 8013342:	d004      	beq.n	801334e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	b2db      	uxtb	r3, r3
 801334a:	2b7f      	cmp	r3, #127	; 0x7f
 801334c:	d101      	bne.n	8013352 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801334e:	2300      	movs	r3, #0
 8013350:	e001      	b.n	8013356 <ip4_route+0xca>
  }

  return netif_default;
 8013352:	4b05      	ldr	r3, [pc, #20]	; (8013368 <ip4_route+0xdc>)
 8013354:	681b      	ldr	r3, [r3, #0]
}
 8013356:	4618      	mov	r0, r3
 8013358:	3714      	adds	r7, #20
 801335a:	46bd      	mov	sp, r7
 801335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013360:	4770      	bx	lr
 8013362:	bf00      	nop
 8013364:	20017abc 	.word	0x20017abc
 8013368:	20017ac0 	.word	0x20017ac0

0801336c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b082      	sub	sp, #8
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801337a:	f003 0301 	and.w	r3, r3, #1
 801337e:	b2db      	uxtb	r3, r3
 8013380:	2b00      	cmp	r3, #0
 8013382:	d016      	beq.n	80133b2 <ip4_input_accept+0x46>
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	3304      	adds	r3, #4
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d011      	beq.n	80133b2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801338e:	4b0b      	ldr	r3, [pc, #44]	; (80133bc <ip4_input_accept+0x50>)
 8013390:	695a      	ldr	r2, [r3, #20]
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	3304      	adds	r3, #4
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	429a      	cmp	r2, r3
 801339a:	d008      	beq.n	80133ae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801339c:	4b07      	ldr	r3, [pc, #28]	; (80133bc <ip4_input_accept+0x50>)
 801339e:	695b      	ldr	r3, [r3, #20]
 80133a0:	6879      	ldr	r1, [r7, #4]
 80133a2:	4618      	mov	r0, r3
 80133a4:	f000 fa08 	bl	80137b8 <ip4_addr_isbroadcast_u32>
 80133a8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d001      	beq.n	80133b2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80133ae:	2301      	movs	r3, #1
 80133b0:	e000      	b.n	80133b4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80133b2:	2300      	movs	r3, #0
}
 80133b4:	4618      	mov	r0, r3
 80133b6:	3708      	adds	r7, #8
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}
 80133bc:	200139b4 	.word	0x200139b4

080133c0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b086      	sub	sp, #24
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	685b      	ldr	r3, [r3, #4]
 80133ce:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	781b      	ldrb	r3, [r3, #0]
 80133d4:	091b      	lsrs	r3, r3, #4
 80133d6:	b2db      	uxtb	r3, r3
 80133d8:	2b04      	cmp	r3, #4
 80133da:	d004      	beq.n	80133e6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f7f8 fc51 	bl	800bc84 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80133e2:	2300      	movs	r3, #0
 80133e4:	e107      	b.n	80135f6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80133e6:	697b      	ldr	r3, [r7, #20]
 80133e8:	781b      	ldrb	r3, [r3, #0]
 80133ea:	f003 030f 	and.w	r3, r3, #15
 80133ee:	b2db      	uxtb	r3, r3
 80133f0:	009b      	lsls	r3, r3, #2
 80133f2:	b2db      	uxtb	r3, r3
 80133f4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	885b      	ldrh	r3, [r3, #2]
 80133fa:	b29b      	uxth	r3, r3
 80133fc:	4618      	mov	r0, r3
 80133fe:	f7f7 f84f 	bl	800a4a0 <lwip_htons>
 8013402:	4603      	mov	r3, r0
 8013404:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	891b      	ldrh	r3, [r3, #8]
 801340a:	89ba      	ldrh	r2, [r7, #12]
 801340c:	429a      	cmp	r2, r3
 801340e:	d204      	bcs.n	801341a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013410:	89bb      	ldrh	r3, [r7, #12]
 8013412:	4619      	mov	r1, r3
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f7f8 faaf 	bl	800b978 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	895b      	ldrh	r3, [r3, #10]
 801341e:	89fa      	ldrh	r2, [r7, #14]
 8013420:	429a      	cmp	r2, r3
 8013422:	d807      	bhi.n	8013434 <ip4_input+0x74>
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	891b      	ldrh	r3, [r3, #8]
 8013428:	89ba      	ldrh	r2, [r7, #12]
 801342a:	429a      	cmp	r2, r3
 801342c:	d802      	bhi.n	8013434 <ip4_input+0x74>
 801342e:	89fb      	ldrh	r3, [r7, #14]
 8013430:	2b13      	cmp	r3, #19
 8013432:	d804      	bhi.n	801343e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013434:	6878      	ldr	r0, [r7, #4]
 8013436:	f7f8 fc25 	bl	800bc84 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801343a:	2300      	movs	r3, #0
 801343c:	e0db      	b.n	80135f6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	691b      	ldr	r3, [r3, #16]
 8013442:	4a6f      	ldr	r2, [pc, #444]	; (8013600 <ip4_input+0x240>)
 8013444:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013446:	697b      	ldr	r3, [r7, #20]
 8013448:	68db      	ldr	r3, [r3, #12]
 801344a:	4a6d      	ldr	r2, [pc, #436]	; (8013600 <ip4_input+0x240>)
 801344c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801344e:	4b6c      	ldr	r3, [pc, #432]	; (8013600 <ip4_input+0x240>)
 8013450:	695b      	ldr	r3, [r3, #20]
 8013452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013456:	2be0      	cmp	r3, #224	; 0xe0
 8013458:	d112      	bne.n	8013480 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013460:	f003 0301 	and.w	r3, r3, #1
 8013464:	b2db      	uxtb	r3, r3
 8013466:	2b00      	cmp	r3, #0
 8013468:	d007      	beq.n	801347a <ip4_input+0xba>
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	3304      	adds	r3, #4
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d002      	beq.n	801347a <ip4_input+0xba>
      netif = inp;
 8013474:	683b      	ldr	r3, [r7, #0]
 8013476:	613b      	str	r3, [r7, #16]
 8013478:	e02a      	b.n	80134d0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801347a:	2300      	movs	r3, #0
 801347c:	613b      	str	r3, [r7, #16]
 801347e:	e027      	b.n	80134d0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013480:	6838      	ldr	r0, [r7, #0]
 8013482:	f7ff ff73 	bl	801336c <ip4_input_accept>
 8013486:	4603      	mov	r3, r0
 8013488:	2b00      	cmp	r3, #0
 801348a:	d002      	beq.n	8013492 <ip4_input+0xd2>
      netif = inp;
 801348c:	683b      	ldr	r3, [r7, #0]
 801348e:	613b      	str	r3, [r7, #16]
 8013490:	e01e      	b.n	80134d0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013492:	2300      	movs	r3, #0
 8013494:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013496:	4b5a      	ldr	r3, [pc, #360]	; (8013600 <ip4_input+0x240>)
 8013498:	695b      	ldr	r3, [r3, #20]
 801349a:	b2db      	uxtb	r3, r3
 801349c:	2b7f      	cmp	r3, #127	; 0x7f
 801349e:	d017      	beq.n	80134d0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80134a0:	4b58      	ldr	r3, [pc, #352]	; (8013604 <ip4_input+0x244>)
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	613b      	str	r3, [r7, #16]
 80134a6:	e00e      	b.n	80134c6 <ip4_input+0x106>
          if (netif == inp) {
 80134a8:	693a      	ldr	r2, [r7, #16]
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	429a      	cmp	r2, r3
 80134ae:	d006      	beq.n	80134be <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80134b0:	6938      	ldr	r0, [r7, #16]
 80134b2:	f7ff ff5b 	bl	801336c <ip4_input_accept>
 80134b6:	4603      	mov	r3, r0
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d108      	bne.n	80134ce <ip4_input+0x10e>
 80134bc:	e000      	b.n	80134c0 <ip4_input+0x100>
            continue;
 80134be:	bf00      	nop
        NETIF_FOREACH(netif) {
 80134c0:	693b      	ldr	r3, [r7, #16]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	613b      	str	r3, [r7, #16]
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d1ed      	bne.n	80134a8 <ip4_input+0xe8>
 80134cc:	e000      	b.n	80134d0 <ip4_input+0x110>
            break;
 80134ce:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80134d0:	4b4b      	ldr	r3, [pc, #300]	; (8013600 <ip4_input+0x240>)
 80134d2:	691b      	ldr	r3, [r3, #16]
 80134d4:	6839      	ldr	r1, [r7, #0]
 80134d6:	4618      	mov	r0, r3
 80134d8:	f000 f96e 	bl	80137b8 <ip4_addr_isbroadcast_u32>
 80134dc:	4603      	mov	r3, r0
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d105      	bne.n	80134ee <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80134e2:	4b47      	ldr	r3, [pc, #284]	; (8013600 <ip4_input+0x240>)
 80134e4:	691b      	ldr	r3, [r3, #16]
 80134e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80134ea:	2be0      	cmp	r3, #224	; 0xe0
 80134ec:	d104      	bne.n	80134f8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80134ee:	6878      	ldr	r0, [r7, #4]
 80134f0:	f7f8 fbc8 	bl	800bc84 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80134f4:	2300      	movs	r3, #0
 80134f6:	e07e      	b.n	80135f6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d104      	bne.n	8013508 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80134fe:	6878      	ldr	r0, [r7, #4]
 8013500:	f7f8 fbc0 	bl	800bc84 <pbuf_free>
    return ERR_OK;
 8013504:	2300      	movs	r3, #0
 8013506:	e076      	b.n	80135f6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013508:	697b      	ldr	r3, [r7, #20]
 801350a:	88db      	ldrh	r3, [r3, #6]
 801350c:	b29b      	uxth	r3, r3
 801350e:	461a      	mov	r2, r3
 8013510:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013514:	4013      	ands	r3, r2
 8013516:	2b00      	cmp	r3, #0
 8013518:	d00b      	beq.n	8013532 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801351a:	6878      	ldr	r0, [r7, #4]
 801351c:	f000 fc92 	bl	8013e44 <ip4_reass>
 8013520:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d101      	bne.n	801352c <ip4_input+0x16c>
      return ERR_OK;
 8013528:	2300      	movs	r3, #0
 801352a:	e064      	b.n	80135f6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	685b      	ldr	r3, [r3, #4]
 8013530:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013532:	4a33      	ldr	r2, [pc, #204]	; (8013600 <ip4_input+0x240>)
 8013534:	693b      	ldr	r3, [r7, #16]
 8013536:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013538:	4a31      	ldr	r2, [pc, #196]	; (8013600 <ip4_input+0x240>)
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801353e:	4a30      	ldr	r2, [pc, #192]	; (8013600 <ip4_input+0x240>)
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013544:	697b      	ldr	r3, [r7, #20]
 8013546:	781b      	ldrb	r3, [r3, #0]
 8013548:	f003 030f 	and.w	r3, r3, #15
 801354c:	b2db      	uxtb	r3, r3
 801354e:	009b      	lsls	r3, r3, #2
 8013550:	b2db      	uxtb	r3, r3
 8013552:	b29a      	uxth	r2, r3
 8013554:	4b2a      	ldr	r3, [pc, #168]	; (8013600 <ip4_input+0x240>)
 8013556:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013558:	89fb      	ldrh	r3, [r7, #14]
 801355a:	4619      	mov	r1, r3
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f7f8 fb0b 	bl	800bb78 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013562:	697b      	ldr	r3, [r7, #20]
 8013564:	7a5b      	ldrb	r3, [r3, #9]
 8013566:	2b11      	cmp	r3, #17
 8013568:	d006      	beq.n	8013578 <ip4_input+0x1b8>
 801356a:	2b11      	cmp	r3, #17
 801356c:	dc13      	bgt.n	8013596 <ip4_input+0x1d6>
 801356e:	2b01      	cmp	r3, #1
 8013570:	d00c      	beq.n	801358c <ip4_input+0x1cc>
 8013572:	2b06      	cmp	r3, #6
 8013574:	d005      	beq.n	8013582 <ip4_input+0x1c2>
 8013576:	e00e      	b.n	8013596 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013578:	6839      	ldr	r1, [r7, #0]
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f7fe f9b0 	bl	80118e0 <udp_input>
        break;
 8013580:	e026      	b.n	80135d0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013582:	6839      	ldr	r1, [r7, #0]
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f7fa f9c1 	bl	800d90c <tcp_input>
        break;
 801358a:	e021      	b.n	80135d0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801358c:	6839      	ldr	r1, [r7, #0]
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f7ff fcee 	bl	8012f70 <icmp_input>
        break;
 8013594:	e01c      	b.n	80135d0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013596:	4b1a      	ldr	r3, [pc, #104]	; (8013600 <ip4_input+0x240>)
 8013598:	695b      	ldr	r3, [r3, #20]
 801359a:	6939      	ldr	r1, [r7, #16]
 801359c:	4618      	mov	r0, r3
 801359e:	f000 f90b 	bl	80137b8 <ip4_addr_isbroadcast_u32>
 80135a2:	4603      	mov	r3, r0
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d10f      	bne.n	80135c8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80135a8:	4b15      	ldr	r3, [pc, #84]	; (8013600 <ip4_input+0x240>)
 80135aa:	695b      	ldr	r3, [r3, #20]
 80135ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80135b0:	2be0      	cmp	r3, #224	; 0xe0
 80135b2:	d009      	beq.n	80135c8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80135b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80135b8:	4619      	mov	r1, r3
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f7f8 fb4f 	bl	800bc5e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80135c0:	2102      	movs	r1, #2
 80135c2:	6878      	ldr	r0, [r7, #4]
 80135c4:	f7ff fdd8 	bl	8013178 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	f7f8 fb5b 	bl	800bc84 <pbuf_free>
        break;
 80135ce:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80135d0:	4b0b      	ldr	r3, [pc, #44]	; (8013600 <ip4_input+0x240>)
 80135d2:	2200      	movs	r2, #0
 80135d4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80135d6:	4b0a      	ldr	r3, [pc, #40]	; (8013600 <ip4_input+0x240>)
 80135d8:	2200      	movs	r2, #0
 80135da:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80135dc:	4b08      	ldr	r3, [pc, #32]	; (8013600 <ip4_input+0x240>)
 80135de:	2200      	movs	r2, #0
 80135e0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80135e2:	4b07      	ldr	r3, [pc, #28]	; (8013600 <ip4_input+0x240>)
 80135e4:	2200      	movs	r2, #0
 80135e6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80135e8:	4b05      	ldr	r3, [pc, #20]	; (8013600 <ip4_input+0x240>)
 80135ea:	2200      	movs	r2, #0
 80135ec:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80135ee:	4b04      	ldr	r3, [pc, #16]	; (8013600 <ip4_input+0x240>)
 80135f0:	2200      	movs	r2, #0
 80135f2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80135f4:	2300      	movs	r3, #0
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3718      	adds	r7, #24
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	200139b4 	.word	0x200139b4
 8013604:	20017abc 	.word	0x20017abc

08013608 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013608:	b580      	push	{r7, lr}
 801360a:	b08a      	sub	sp, #40	; 0x28
 801360c:	af04      	add	r7, sp, #16
 801360e:	60f8      	str	r0, [r7, #12]
 8013610:	60b9      	str	r1, [r7, #8]
 8013612:	607a      	str	r2, [r7, #4]
 8013614:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d009      	beq.n	8013634 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013620:	68bb      	ldr	r3, [r7, #8]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d003      	beq.n	801362e <ip4_output_if+0x26>
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d102      	bne.n	8013634 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013630:	3304      	adds	r3, #4
 8013632:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013634:	78fa      	ldrb	r2, [r7, #3]
 8013636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013638:	9302      	str	r3, [sp, #8]
 801363a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801363e:	9301      	str	r3, [sp, #4]
 8013640:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013644:	9300      	str	r3, [sp, #0]
 8013646:	4613      	mov	r3, r2
 8013648:	687a      	ldr	r2, [r7, #4]
 801364a:	6979      	ldr	r1, [r7, #20]
 801364c:	68f8      	ldr	r0, [r7, #12]
 801364e:	f000 f805 	bl	801365c <ip4_output_if_src>
 8013652:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013654:	4618      	mov	r0, r3
 8013656:	3718      	adds	r7, #24
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}

0801365c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b088      	sub	sp, #32
 8013660:	af00      	add	r7, sp, #0
 8013662:	60f8      	str	r0, [r7, #12]
 8013664:	60b9      	str	r1, [r7, #8]
 8013666:	607a      	str	r2, [r7, #4]
 8013668:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	7b9b      	ldrb	r3, [r3, #14]
 801366e:	2b01      	cmp	r3, #1
 8013670:	d006      	beq.n	8013680 <ip4_output_if_src+0x24>
 8013672:	4b4b      	ldr	r3, [pc, #300]	; (80137a0 <ip4_output_if_src+0x144>)
 8013674:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013678:	494a      	ldr	r1, [pc, #296]	; (80137a4 <ip4_output_if_src+0x148>)
 801367a:	484b      	ldr	r0, [pc, #300]	; (80137a8 <ip4_output_if_src+0x14c>)
 801367c:	f001 fc1a 	bl	8014eb4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d060      	beq.n	8013748 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013686:	2314      	movs	r3, #20
 8013688:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801368a:	2114      	movs	r1, #20
 801368c:	68f8      	ldr	r0, [r7, #12]
 801368e:	f7f8 fa63 	bl	800bb58 <pbuf_add_header>
 8013692:	4603      	mov	r3, r0
 8013694:	2b00      	cmp	r3, #0
 8013696:	d002      	beq.n	801369e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013698:	f06f 0301 	mvn.w	r3, #1
 801369c:	e07c      	b.n	8013798 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	685b      	ldr	r3, [r3, #4]
 80136a2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	895b      	ldrh	r3, [r3, #10]
 80136a8:	2b13      	cmp	r3, #19
 80136aa:	d806      	bhi.n	80136ba <ip4_output_if_src+0x5e>
 80136ac:	4b3c      	ldr	r3, [pc, #240]	; (80137a0 <ip4_output_if_src+0x144>)
 80136ae:	f44f 7262 	mov.w	r2, #904	; 0x388
 80136b2:	493e      	ldr	r1, [pc, #248]	; (80137ac <ip4_output_if_src+0x150>)
 80136b4:	483c      	ldr	r0, [pc, #240]	; (80137a8 <ip4_output_if_src+0x14c>)
 80136b6:	f001 fbfd 	bl	8014eb4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80136ba:	69fb      	ldr	r3, [r7, #28]
 80136bc:	78fa      	ldrb	r2, [r7, #3]
 80136be:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80136c0:	69fb      	ldr	r3, [r7, #28]
 80136c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80136c6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	681a      	ldr	r2, [r3, #0]
 80136cc:	69fb      	ldr	r3, [r7, #28]
 80136ce:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80136d0:	8b7b      	ldrh	r3, [r7, #26]
 80136d2:	089b      	lsrs	r3, r3, #2
 80136d4:	b29b      	uxth	r3, r3
 80136d6:	b2db      	uxtb	r3, r3
 80136d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136dc:	b2da      	uxtb	r2, r3
 80136de:	69fb      	ldr	r3, [r7, #28]
 80136e0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80136e2:	69fb      	ldr	r3, [r7, #28]
 80136e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80136e8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	891b      	ldrh	r3, [r3, #8]
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7f6 fed6 	bl	800a4a0 <lwip_htons>
 80136f4:	4603      	mov	r3, r0
 80136f6:	461a      	mov	r2, r3
 80136f8:	69fb      	ldr	r3, [r7, #28]
 80136fa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80136fc:	69fb      	ldr	r3, [r7, #28]
 80136fe:	2200      	movs	r2, #0
 8013700:	719a      	strb	r2, [r3, #6]
 8013702:	2200      	movs	r2, #0
 8013704:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013706:	4b2a      	ldr	r3, [pc, #168]	; (80137b0 <ip4_output_if_src+0x154>)
 8013708:	881b      	ldrh	r3, [r3, #0]
 801370a:	4618      	mov	r0, r3
 801370c:	f7f6 fec8 	bl	800a4a0 <lwip_htons>
 8013710:	4603      	mov	r3, r0
 8013712:	461a      	mov	r2, r3
 8013714:	69fb      	ldr	r3, [r7, #28]
 8013716:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013718:	4b25      	ldr	r3, [pc, #148]	; (80137b0 <ip4_output_if_src+0x154>)
 801371a:	881b      	ldrh	r3, [r3, #0]
 801371c:	3301      	adds	r3, #1
 801371e:	b29a      	uxth	r2, r3
 8013720:	4b23      	ldr	r3, [pc, #140]	; (80137b0 <ip4_output_if_src+0x154>)
 8013722:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013724:	68bb      	ldr	r3, [r7, #8]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d104      	bne.n	8013734 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801372a:	4b22      	ldr	r3, [pc, #136]	; (80137b4 <ip4_output_if_src+0x158>)
 801372c:	681a      	ldr	r2, [r3, #0]
 801372e:	69fb      	ldr	r3, [r7, #28]
 8013730:	60da      	str	r2, [r3, #12]
 8013732:	e003      	b.n	801373c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013734:	68bb      	ldr	r3, [r7, #8]
 8013736:	681a      	ldr	r2, [r3, #0]
 8013738:	69fb      	ldr	r3, [r7, #28]
 801373a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	2200      	movs	r2, #0
 8013740:	729a      	strb	r2, [r3, #10]
 8013742:	2200      	movs	r2, #0
 8013744:	72da      	strb	r2, [r3, #11]
 8013746:	e00f      	b.n	8013768 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	895b      	ldrh	r3, [r3, #10]
 801374c:	2b13      	cmp	r3, #19
 801374e:	d802      	bhi.n	8013756 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013750:	f06f 0301 	mvn.w	r3, #1
 8013754:	e020      	b.n	8013798 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	685b      	ldr	r3, [r3, #4]
 801375a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801375c:	69fb      	ldr	r3, [r7, #28]
 801375e:	691b      	ldr	r3, [r3, #16]
 8013760:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013762:	f107 0314 	add.w	r3, r7, #20
 8013766:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801376a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801376c:	2b00      	cmp	r3, #0
 801376e:	d00c      	beq.n	801378a <ip4_output_if_src+0x12e>
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	891a      	ldrh	r2, [r3, #8]
 8013774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013776:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013778:	429a      	cmp	r2, r3
 801377a:	d906      	bls.n	801378a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801377c:	687a      	ldr	r2, [r7, #4]
 801377e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013780:	68f8      	ldr	r0, [r7, #12]
 8013782:	f000 fd53 	bl	801422c <ip4_frag>
 8013786:	4603      	mov	r3, r0
 8013788:	e006      	b.n	8013798 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801378c:	695b      	ldr	r3, [r3, #20]
 801378e:	687a      	ldr	r2, [r7, #4]
 8013790:	68f9      	ldr	r1, [r7, #12]
 8013792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013794:	4798      	blx	r3
 8013796:	4603      	mov	r3, r0
}
 8013798:	4618      	mov	r0, r3
 801379a:	3720      	adds	r7, #32
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}
 80137a0:	0801933c 	.word	0x0801933c
 80137a4:	08019370 	.word	0x08019370
 80137a8:	0801937c 	.word	0x0801937c
 80137ac:	080193a4 	.word	0x080193a4
 80137b0:	20017c1a 	.word	0x20017c1a
 80137b4:	080197d0 	.word	0x080197d0

080137b8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80137b8:	b480      	push	{r7}
 80137ba:	b085      	sub	sp, #20
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
 80137c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80137cc:	d002      	beq.n	80137d4 <ip4_addr_isbroadcast_u32+0x1c>
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d101      	bne.n	80137d8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80137d4:	2301      	movs	r3, #1
 80137d6:	e02a      	b.n	801382e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80137de:	f003 0302 	and.w	r3, r3, #2
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d101      	bne.n	80137ea <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80137e6:	2300      	movs	r3, #0
 80137e8:	e021      	b.n	801382e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80137ea:	683b      	ldr	r3, [r7, #0]
 80137ec:	3304      	adds	r3, #4
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	687a      	ldr	r2, [r7, #4]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d101      	bne.n	80137fa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80137f6:	2300      	movs	r3, #0
 80137f8:	e019      	b.n	801382e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80137fa:	68fa      	ldr	r2, [r7, #12]
 80137fc:	683b      	ldr	r3, [r7, #0]
 80137fe:	3304      	adds	r3, #4
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	405a      	eors	r2, r3
 8013804:	683b      	ldr	r3, [r7, #0]
 8013806:	3308      	adds	r3, #8
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	4013      	ands	r3, r2
 801380c:	2b00      	cmp	r3, #0
 801380e:	d10d      	bne.n	801382c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	3308      	adds	r3, #8
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	43da      	mvns	r2, r3
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	3308      	adds	r3, #8
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013824:	429a      	cmp	r2, r3
 8013826:	d101      	bne.n	801382c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013828:	2301      	movs	r3, #1
 801382a:	e000      	b.n	801382e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801382c:	2300      	movs	r3, #0
  }
}
 801382e:	4618      	mov	r0, r3
 8013830:	3714      	adds	r7, #20
 8013832:	46bd      	mov	sp, r7
 8013834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013838:	4770      	bx	lr
	...

0801383c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b084      	sub	sp, #16
 8013840:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013842:	2300      	movs	r3, #0
 8013844:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013846:	4b12      	ldr	r3, [pc, #72]	; (8013890 <ip_reass_tmr+0x54>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801384c:	e018      	b.n	8013880 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	7fdb      	ldrb	r3, [r3, #31]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d00b      	beq.n	801386e <ip_reass_tmr+0x32>
      r->timer--;
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	7fdb      	ldrb	r3, [r3, #31]
 801385a:	3b01      	subs	r3, #1
 801385c:	b2da      	uxtb	r2, r3
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	60fb      	str	r3, [r7, #12]
 801386c:	e008      	b.n	8013880 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013878:	68b9      	ldr	r1, [r7, #8]
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f000 f80a 	bl	8013894 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d1e3      	bne.n	801384e <ip_reass_tmr+0x12>
    }
  }
}
 8013886:	bf00      	nop
 8013888:	bf00      	nop
 801388a:	3710      	adds	r7, #16
 801388c:	46bd      	mov	sp, r7
 801388e:	bd80      	pop	{r7, pc}
 8013890:	20017c1c 	.word	0x20017c1c

08013894 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b088      	sub	sp, #32
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
 801389c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801389e:	2300      	movs	r3, #0
 80138a0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80138a2:	683a      	ldr	r2, [r7, #0]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	429a      	cmp	r2, r3
 80138a8:	d105      	bne.n	80138b6 <ip_reass_free_complete_datagram+0x22>
 80138aa:	4b45      	ldr	r3, [pc, #276]	; (80139c0 <ip_reass_free_complete_datagram+0x12c>)
 80138ac:	22ab      	movs	r2, #171	; 0xab
 80138ae:	4945      	ldr	r1, [pc, #276]	; (80139c4 <ip_reass_free_complete_datagram+0x130>)
 80138b0:	4845      	ldr	r0, [pc, #276]	; (80139c8 <ip_reass_free_complete_datagram+0x134>)
 80138b2:	f001 faff 	bl	8014eb4 <iprintf>
  if (prev != NULL) {
 80138b6:	683b      	ldr	r3, [r7, #0]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d00a      	beq.n	80138d2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	687a      	ldr	r2, [r7, #4]
 80138c2:	429a      	cmp	r2, r3
 80138c4:	d005      	beq.n	80138d2 <ip_reass_free_complete_datagram+0x3e>
 80138c6:	4b3e      	ldr	r3, [pc, #248]	; (80139c0 <ip_reass_free_complete_datagram+0x12c>)
 80138c8:	22ad      	movs	r2, #173	; 0xad
 80138ca:	4940      	ldr	r1, [pc, #256]	; (80139cc <ip_reass_free_complete_datagram+0x138>)
 80138cc:	483e      	ldr	r0, [pc, #248]	; (80139c8 <ip_reass_free_complete_datagram+0x134>)
 80138ce:	f001 faf1 	bl	8014eb4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	685b      	ldr	r3, [r3, #4]
 80138d6:	685b      	ldr	r3, [r3, #4]
 80138d8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80138da:	697b      	ldr	r3, [r7, #20]
 80138dc:	889b      	ldrh	r3, [r3, #4]
 80138de:	b29b      	uxth	r3, r3
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d12a      	bne.n	801393a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	685b      	ldr	r3, [r3, #4]
 80138e8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80138ea:	697b      	ldr	r3, [r7, #20]
 80138ec:	681a      	ldr	r2, [r3, #0]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80138f2:	69bb      	ldr	r3, [r7, #24]
 80138f4:	6858      	ldr	r0, [r3, #4]
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	3308      	adds	r3, #8
 80138fa:	2214      	movs	r2, #20
 80138fc:	4619      	mov	r1, r3
 80138fe:	f001 f9c8 	bl	8014c92 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013902:	2101      	movs	r1, #1
 8013904:	69b8      	ldr	r0, [r7, #24]
 8013906:	f7ff fc47 	bl	8013198 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801390a:	69b8      	ldr	r0, [r7, #24]
 801390c:	f7f8 fa48 	bl	800bda0 <pbuf_clen>
 8013910:	4603      	mov	r3, r0
 8013912:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013914:	8bfa      	ldrh	r2, [r7, #30]
 8013916:	8a7b      	ldrh	r3, [r7, #18]
 8013918:	4413      	add	r3, r2
 801391a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801391e:	db05      	blt.n	801392c <ip_reass_free_complete_datagram+0x98>
 8013920:	4b27      	ldr	r3, [pc, #156]	; (80139c0 <ip_reass_free_complete_datagram+0x12c>)
 8013922:	22bc      	movs	r2, #188	; 0xbc
 8013924:	492a      	ldr	r1, [pc, #168]	; (80139d0 <ip_reass_free_complete_datagram+0x13c>)
 8013926:	4828      	ldr	r0, [pc, #160]	; (80139c8 <ip_reass_free_complete_datagram+0x134>)
 8013928:	f001 fac4 	bl	8014eb4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801392c:	8bfa      	ldrh	r2, [r7, #30]
 801392e:	8a7b      	ldrh	r3, [r7, #18]
 8013930:	4413      	add	r3, r2
 8013932:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013934:	69b8      	ldr	r0, [r7, #24]
 8013936:	f7f8 f9a5 	bl	800bc84 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	685b      	ldr	r3, [r3, #4]
 801393e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013940:	e01f      	b.n	8013982 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013942:	69bb      	ldr	r3, [r7, #24]
 8013944:	685b      	ldr	r3, [r3, #4]
 8013946:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013948:	69bb      	ldr	r3, [r7, #24]
 801394a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013952:	68f8      	ldr	r0, [r7, #12]
 8013954:	f7f8 fa24 	bl	800bda0 <pbuf_clen>
 8013958:	4603      	mov	r3, r0
 801395a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801395c:	8bfa      	ldrh	r2, [r7, #30]
 801395e:	8a7b      	ldrh	r3, [r7, #18]
 8013960:	4413      	add	r3, r2
 8013962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013966:	db05      	blt.n	8013974 <ip_reass_free_complete_datagram+0xe0>
 8013968:	4b15      	ldr	r3, [pc, #84]	; (80139c0 <ip_reass_free_complete_datagram+0x12c>)
 801396a:	22cc      	movs	r2, #204	; 0xcc
 801396c:	4918      	ldr	r1, [pc, #96]	; (80139d0 <ip_reass_free_complete_datagram+0x13c>)
 801396e:	4816      	ldr	r0, [pc, #88]	; (80139c8 <ip_reass_free_complete_datagram+0x134>)
 8013970:	f001 faa0 	bl	8014eb4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013974:	8bfa      	ldrh	r2, [r7, #30]
 8013976:	8a7b      	ldrh	r3, [r7, #18]
 8013978:	4413      	add	r3, r2
 801397a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801397c:	68f8      	ldr	r0, [r7, #12]
 801397e:	f7f8 f981 	bl	800bc84 <pbuf_free>
  while (p != NULL) {
 8013982:	69bb      	ldr	r3, [r7, #24]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d1dc      	bne.n	8013942 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013988:	6839      	ldr	r1, [r7, #0]
 801398a:	6878      	ldr	r0, [r7, #4]
 801398c:	f000 f8c2 	bl	8013b14 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013990:	4b10      	ldr	r3, [pc, #64]	; (80139d4 <ip_reass_free_complete_datagram+0x140>)
 8013992:	881b      	ldrh	r3, [r3, #0]
 8013994:	8bfa      	ldrh	r2, [r7, #30]
 8013996:	429a      	cmp	r2, r3
 8013998:	d905      	bls.n	80139a6 <ip_reass_free_complete_datagram+0x112>
 801399a:	4b09      	ldr	r3, [pc, #36]	; (80139c0 <ip_reass_free_complete_datagram+0x12c>)
 801399c:	22d2      	movs	r2, #210	; 0xd2
 801399e:	490e      	ldr	r1, [pc, #56]	; (80139d8 <ip_reass_free_complete_datagram+0x144>)
 80139a0:	4809      	ldr	r0, [pc, #36]	; (80139c8 <ip_reass_free_complete_datagram+0x134>)
 80139a2:	f001 fa87 	bl	8014eb4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80139a6:	4b0b      	ldr	r3, [pc, #44]	; (80139d4 <ip_reass_free_complete_datagram+0x140>)
 80139a8:	881a      	ldrh	r2, [r3, #0]
 80139aa:	8bfb      	ldrh	r3, [r7, #30]
 80139ac:	1ad3      	subs	r3, r2, r3
 80139ae:	b29a      	uxth	r2, r3
 80139b0:	4b08      	ldr	r3, [pc, #32]	; (80139d4 <ip_reass_free_complete_datagram+0x140>)
 80139b2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80139b4:	8bfb      	ldrh	r3, [r7, #30]
}
 80139b6:	4618      	mov	r0, r3
 80139b8:	3720      	adds	r7, #32
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}
 80139be:	bf00      	nop
 80139c0:	080193d4 	.word	0x080193d4
 80139c4:	08019410 	.word	0x08019410
 80139c8:	0801941c 	.word	0x0801941c
 80139cc:	08019444 	.word	0x08019444
 80139d0:	08019458 	.word	0x08019458
 80139d4:	20017c20 	.word	0x20017c20
 80139d8:	08019478 	.word	0x08019478

080139dc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b08a      	sub	sp, #40	; 0x28
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
 80139e4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80139e6:	2300      	movs	r3, #0
 80139e8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80139ea:	2300      	movs	r3, #0
 80139ec:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80139ee:	2300      	movs	r3, #0
 80139f0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80139f2:	2300      	movs	r3, #0
 80139f4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80139f6:	2300      	movs	r3, #0
 80139f8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80139fa:	4b28      	ldr	r3, [pc, #160]	; (8013a9c <ip_reass_remove_oldest_datagram+0xc0>)
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013a00:	e030      	b.n	8013a64 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a04:	695a      	ldr	r2, [r3, #20]
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	68db      	ldr	r3, [r3, #12]
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d10c      	bne.n	8013a28 <ip_reass_remove_oldest_datagram+0x4c>
 8013a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a10:	699a      	ldr	r2, [r3, #24]
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	691b      	ldr	r3, [r3, #16]
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d106      	bne.n	8013a28 <ip_reass_remove_oldest_datagram+0x4c>
 8013a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1c:	899a      	ldrh	r2, [r3, #12]
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	889b      	ldrh	r3, [r3, #4]
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	429a      	cmp	r2, r3
 8013a26:	d014      	beq.n	8013a52 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	3301      	adds	r3, #1
 8013a2c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013a2e:	6a3b      	ldr	r3, [r7, #32]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d104      	bne.n	8013a3e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a36:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013a38:	69fb      	ldr	r3, [r7, #28]
 8013a3a:	61bb      	str	r3, [r7, #24]
 8013a3c:	e009      	b.n	8013a52 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a40:	7fda      	ldrb	r2, [r3, #31]
 8013a42:	6a3b      	ldr	r3, [r7, #32]
 8013a44:	7fdb      	ldrb	r3, [r3, #31]
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d803      	bhi.n	8013a52 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a4c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013a4e:	69fb      	ldr	r3, [r7, #28]
 8013a50:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d001      	beq.n	8013a5e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a5c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d1cb      	bne.n	8013a02 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013a6a:	6a3b      	ldr	r3, [r7, #32]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d008      	beq.n	8013a82 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013a70:	69b9      	ldr	r1, [r7, #24]
 8013a72:	6a38      	ldr	r0, [r7, #32]
 8013a74:	f7ff ff0e 	bl	8013894 <ip_reass_free_complete_datagram>
 8013a78:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013a7a:	697a      	ldr	r2, [r7, #20]
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	4413      	add	r3, r2
 8013a80:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013a82:	697a      	ldr	r2, [r7, #20]
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	da02      	bge.n	8013a90 <ip_reass_remove_oldest_datagram+0xb4>
 8013a8a:	693b      	ldr	r3, [r7, #16]
 8013a8c:	2b01      	cmp	r3, #1
 8013a8e:	dcac      	bgt.n	80139ea <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013a90:	697b      	ldr	r3, [r7, #20]
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3728      	adds	r7, #40	; 0x28
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}
 8013a9a:	bf00      	nop
 8013a9c:	20017c1c 	.word	0x20017c1c

08013aa0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b084      	sub	sp, #16
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
 8013aa8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013aaa:	2004      	movs	r0, #4
 8013aac:	f7f7 f9d0 	bl	800ae50 <memp_malloc>
 8013ab0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d110      	bne.n	8013ada <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013ab8:	6839      	ldr	r1, [r7, #0]
 8013aba:	6878      	ldr	r0, [r7, #4]
 8013abc:	f7ff ff8e 	bl	80139dc <ip_reass_remove_oldest_datagram>
 8013ac0:	4602      	mov	r2, r0
 8013ac2:	683b      	ldr	r3, [r7, #0]
 8013ac4:	4293      	cmp	r3, r2
 8013ac6:	dc03      	bgt.n	8013ad0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013ac8:	2004      	movs	r0, #4
 8013aca:	f7f7 f9c1 	bl	800ae50 <memp_malloc>
 8013ace:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d101      	bne.n	8013ada <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	e016      	b.n	8013b08 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013ada:	2220      	movs	r2, #32
 8013adc:	2100      	movs	r1, #0
 8013ade:	68f8      	ldr	r0, [r7, #12]
 8013ae0:	f001 f8ff 	bl	8014ce2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	220f      	movs	r2, #15
 8013ae8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013aea:	4b09      	ldr	r3, [pc, #36]	; (8013b10 <ip_reass_enqueue_new_datagram+0x70>)
 8013aec:	681a      	ldr	r2, [r3, #0]
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013af2:	4a07      	ldr	r2, [pc, #28]	; (8013b10 <ip_reass_enqueue_new_datagram+0x70>)
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	3308      	adds	r3, #8
 8013afc:	2214      	movs	r2, #20
 8013afe:	6879      	ldr	r1, [r7, #4]
 8013b00:	4618      	mov	r0, r3
 8013b02:	f001 f8c6 	bl	8014c92 <memcpy>
  return ipr;
 8013b06:	68fb      	ldr	r3, [r7, #12]
}
 8013b08:	4618      	mov	r0, r3
 8013b0a:	3710      	adds	r7, #16
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}
 8013b10:	20017c1c 	.word	0x20017c1c

08013b14 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b082      	sub	sp, #8
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
 8013b1c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013b1e:	4b10      	ldr	r3, [pc, #64]	; (8013b60 <ip_reass_dequeue_datagram+0x4c>)
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	687a      	ldr	r2, [r7, #4]
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d104      	bne.n	8013b32 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	4a0c      	ldr	r2, [pc, #48]	; (8013b60 <ip_reass_dequeue_datagram+0x4c>)
 8013b2e:	6013      	str	r3, [r2, #0]
 8013b30:	e00d      	b.n	8013b4e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d106      	bne.n	8013b46 <ip_reass_dequeue_datagram+0x32>
 8013b38:	4b0a      	ldr	r3, [pc, #40]	; (8013b64 <ip_reass_dequeue_datagram+0x50>)
 8013b3a:	f240 1245 	movw	r2, #325	; 0x145
 8013b3e:	490a      	ldr	r1, [pc, #40]	; (8013b68 <ip_reass_dequeue_datagram+0x54>)
 8013b40:	480a      	ldr	r0, [pc, #40]	; (8013b6c <ip_reass_dequeue_datagram+0x58>)
 8013b42:	f001 f9b7 	bl	8014eb4 <iprintf>
    prev->next = ipr->next;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	681a      	ldr	r2, [r3, #0]
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013b4e:	6879      	ldr	r1, [r7, #4]
 8013b50:	2004      	movs	r0, #4
 8013b52:	f7f7 f9f3 	bl	800af3c <memp_free>
}
 8013b56:	bf00      	nop
 8013b58:	3708      	adds	r7, #8
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}
 8013b5e:	bf00      	nop
 8013b60:	20017c1c 	.word	0x20017c1c
 8013b64:	080193d4 	.word	0x080193d4
 8013b68:	0801949c 	.word	0x0801949c
 8013b6c:	0801941c 	.word	0x0801941c

08013b70 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b08c      	sub	sp, #48	; 0x30
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	60f8      	str	r0, [r7, #12]
 8013b78:	60b9      	str	r1, [r7, #8]
 8013b7a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013b80:	2301      	movs	r3, #1
 8013b82:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	685b      	ldr	r3, [r3, #4]
 8013b88:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013b8a:	69fb      	ldr	r3, [r7, #28]
 8013b8c:	885b      	ldrh	r3, [r3, #2]
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7f6 fc85 	bl	800a4a0 <lwip_htons>
 8013b96:	4603      	mov	r3, r0
 8013b98:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013b9a:	69fb      	ldr	r3, [r7, #28]
 8013b9c:	781b      	ldrb	r3, [r3, #0]
 8013b9e:	f003 030f 	and.w	r3, r3, #15
 8013ba2:	b2db      	uxtb	r3, r3
 8013ba4:	009b      	lsls	r3, r3, #2
 8013ba6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013ba8:	7e7b      	ldrb	r3, [r7, #25]
 8013baa:	b29b      	uxth	r3, r3
 8013bac:	8b7a      	ldrh	r2, [r7, #26]
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	d202      	bcs.n	8013bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bb6:	e135      	b.n	8013e24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013bb8:	7e7b      	ldrb	r3, [r7, #25]
 8013bba:	b29b      	uxth	r3, r3
 8013bbc:	8b7a      	ldrh	r2, [r7, #26]
 8013bbe:	1ad3      	subs	r3, r2, r3
 8013bc0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013bc2:	69fb      	ldr	r3, [r7, #28]
 8013bc4:	88db      	ldrh	r3, [r3, #6]
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7f6 fc69 	bl	800a4a0 <lwip_htons>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013bd4:	b29b      	uxth	r3, r3
 8013bd6:	00db      	lsls	r3, r3, #3
 8013bd8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	685b      	ldr	r3, [r3, #4]
 8013bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be2:	2200      	movs	r2, #0
 8013be4:	701a      	strb	r2, [r3, #0]
 8013be6:	2200      	movs	r2, #0
 8013be8:	705a      	strb	r2, [r3, #1]
 8013bea:	2200      	movs	r2, #0
 8013bec:	709a      	strb	r2, [r3, #2]
 8013bee:	2200      	movs	r2, #0
 8013bf0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bf4:	8afa      	ldrh	r2, [r7, #22]
 8013bf6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013bf8:	8afa      	ldrh	r2, [r7, #22]
 8013bfa:	8b7b      	ldrh	r3, [r7, #26]
 8013bfc:	4413      	add	r3, r2
 8013bfe:	b29a      	uxth	r2, r3
 8013c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c02:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c06:	88db      	ldrh	r3, [r3, #6]
 8013c08:	b29b      	uxth	r3, r3
 8013c0a:	8afa      	ldrh	r2, [r7, #22]
 8013c0c:	429a      	cmp	r2, r3
 8013c0e:	d902      	bls.n	8013c16 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c14:	e106      	b.n	8013e24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	685b      	ldr	r3, [r3, #4]
 8013c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8013c1c:	e068      	b.n	8013cf0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c20:	685b      	ldr	r3, [r3, #4]
 8013c22:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c26:	889b      	ldrh	r3, [r3, #4]
 8013c28:	b29a      	uxth	r2, r3
 8013c2a:	693b      	ldr	r3, [r7, #16]
 8013c2c:	889b      	ldrh	r3, [r3, #4]
 8013c2e:	b29b      	uxth	r3, r3
 8013c30:	429a      	cmp	r2, r3
 8013c32:	d235      	bcs.n	8013ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c38:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d020      	beq.n	8013c82 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c42:	889b      	ldrh	r3, [r3, #4]
 8013c44:	b29a      	uxth	r2, r3
 8013c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c48:	88db      	ldrh	r3, [r3, #6]
 8013c4a:	b29b      	uxth	r3, r3
 8013c4c:	429a      	cmp	r2, r3
 8013c4e:	d307      	bcc.n	8013c60 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c52:	88db      	ldrh	r3, [r3, #6]
 8013c54:	b29a      	uxth	r2, r3
 8013c56:	693b      	ldr	r3, [r7, #16]
 8013c58:	889b      	ldrh	r3, [r3, #4]
 8013c5a:	b29b      	uxth	r3, r3
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	d902      	bls.n	8013c66 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c64:	e0de      	b.n	8013e24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c68:	68ba      	ldr	r2, [r7, #8]
 8013c6a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c6e:	88db      	ldrh	r3, [r3, #6]
 8013c70:	b29a      	uxth	r2, r3
 8013c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c74:	889b      	ldrh	r3, [r3, #4]
 8013c76:	b29b      	uxth	r3, r3
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d03d      	beq.n	8013cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013c80:	e03a      	b.n	8013cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c84:	88db      	ldrh	r3, [r3, #6]
 8013c86:	b29a      	uxth	r2, r3
 8013c88:	693b      	ldr	r3, [r7, #16]
 8013c8a:	889b      	ldrh	r3, [r3, #4]
 8013c8c:	b29b      	uxth	r3, r3
 8013c8e:	429a      	cmp	r2, r3
 8013c90:	d902      	bls.n	8013c98 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c96:	e0c5      	b.n	8013e24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	68ba      	ldr	r2, [r7, #8]
 8013c9c:	605a      	str	r2, [r3, #4]
      break;
 8013c9e:	e02b      	b.n	8013cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ca2:	889b      	ldrh	r3, [r3, #4]
 8013ca4:	b29a      	uxth	r2, r3
 8013ca6:	693b      	ldr	r3, [r7, #16]
 8013ca8:	889b      	ldrh	r3, [r3, #4]
 8013caa:	b29b      	uxth	r3, r3
 8013cac:	429a      	cmp	r2, r3
 8013cae:	d102      	bne.n	8013cb6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013cb4:	e0b6      	b.n	8013e24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb8:	889b      	ldrh	r3, [r3, #4]
 8013cba:	b29a      	uxth	r2, r3
 8013cbc:	693b      	ldr	r3, [r7, #16]
 8013cbe:	88db      	ldrh	r3, [r3, #6]
 8013cc0:	b29b      	uxth	r3, r3
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d202      	bcs.n	8013ccc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013cca:	e0ab      	b.n	8013e24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d009      	beq.n	8013ce6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd4:	88db      	ldrh	r3, [r3, #6]
 8013cd6:	b29a      	uxth	r2, r3
 8013cd8:	693b      	ldr	r3, [r7, #16]
 8013cda:	889b      	ldrh	r3, [r3, #4]
 8013cdc:	b29b      	uxth	r3, r3
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	d001      	beq.n	8013ce6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013ce6:	693b      	ldr	r3, [r7, #16]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d193      	bne.n	8013c1e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013cf6:	e000      	b.n	8013cfa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013cf8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d12d      	bne.n	8013d5c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d01c      	beq.n	8013d40 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d08:	88db      	ldrh	r3, [r3, #6]
 8013d0a:	b29a      	uxth	r2, r3
 8013d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d0e:	889b      	ldrh	r3, [r3, #4]
 8013d10:	b29b      	uxth	r3, r3
 8013d12:	429a      	cmp	r2, r3
 8013d14:	d906      	bls.n	8013d24 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013d16:	4b45      	ldr	r3, [pc, #276]	; (8013e2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013d18:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013d1c:	4944      	ldr	r1, [pc, #272]	; (8013e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013d1e:	4845      	ldr	r0, [pc, #276]	; (8013e34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013d20:	f001 f8c8 	bl	8014eb4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d26:	68ba      	ldr	r2, [r7, #8]
 8013d28:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d2c:	88db      	ldrh	r3, [r3, #6]
 8013d2e:	b29a      	uxth	r2, r3
 8013d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d32:	889b      	ldrh	r3, [r3, #4]
 8013d34:	b29b      	uxth	r3, r3
 8013d36:	429a      	cmp	r2, r3
 8013d38:	d010      	beq.n	8013d5c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	623b      	str	r3, [r7, #32]
 8013d3e:	e00d      	b.n	8013d5c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	685b      	ldr	r3, [r3, #4]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d006      	beq.n	8013d56 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013d48:	4b38      	ldr	r3, [pc, #224]	; (8013e2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013d4a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013d4e:	493a      	ldr	r1, [pc, #232]	; (8013e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013d50:	4838      	ldr	r0, [pc, #224]	; (8013e34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013d52:	f001 f8af 	bl	8014eb4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	68ba      	ldr	r2, [r7, #8]
 8013d5a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d105      	bne.n	8013d6e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	7f9b      	ldrb	r3, [r3, #30]
 8013d66:	f003 0301 	and.w	r3, r3, #1
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d059      	beq.n	8013e22 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013d6e:	6a3b      	ldr	r3, [r7, #32]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d04f      	beq.n	8013e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	685b      	ldr	r3, [r3, #4]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d006      	beq.n	8013d8a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	685b      	ldr	r3, [r3, #4]
 8013d80:	685b      	ldr	r3, [r3, #4]
 8013d82:	889b      	ldrh	r3, [r3, #4]
 8013d84:	b29b      	uxth	r3, r3
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d002      	beq.n	8013d90 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	623b      	str	r3, [r7, #32]
 8013d8e:	e041      	b.n	8013e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d92:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013d9a:	e012      	b.n	8013dc2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9e:	685b      	ldr	r3, [r3, #4]
 8013da0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013da4:	88db      	ldrh	r3, [r3, #6]
 8013da6:	b29a      	uxth	r2, r3
 8013da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013daa:	889b      	ldrh	r3, [r3, #4]
 8013dac:	b29b      	uxth	r3, r3
 8013dae:	429a      	cmp	r2, r3
 8013db0:	d002      	beq.n	8013db8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013db2:	2300      	movs	r3, #0
 8013db4:	623b      	str	r3, [r7, #32]
            break;
 8013db6:	e007      	b.n	8013dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dba:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d1e9      	bne.n	8013d9c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013dc8:	6a3b      	ldr	r3, [r7, #32]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d022      	beq.n	8013e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	685b      	ldr	r3, [r3, #4]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d106      	bne.n	8013de4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013dd6:	4b15      	ldr	r3, [pc, #84]	; (8013e2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013dd8:	f240 12df 	movw	r2, #479	; 0x1df
 8013ddc:	4917      	ldr	r1, [pc, #92]	; (8013e3c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013dde:	4815      	ldr	r0, [pc, #84]	; (8013e34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013de0:	f001 f868 	bl	8014eb4 <iprintf>
          LWIP_ASSERT("sanity check",
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	685b      	ldr	r3, [r3, #4]
 8013de8:	685b      	ldr	r3, [r3, #4]
 8013dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d106      	bne.n	8013dfe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013df0:	4b0e      	ldr	r3, [pc, #56]	; (8013e2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013df2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013df6:	4911      	ldr	r1, [pc, #68]	; (8013e3c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013df8:	480e      	ldr	r0, [pc, #56]	; (8013e34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013dfa:	f001 f85b 	bl	8014eb4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d006      	beq.n	8013e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013e06:	4b09      	ldr	r3, [pc, #36]	; (8013e2c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013e08:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013e0c:	490c      	ldr	r1, [pc, #48]	; (8013e40 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013e0e:	4809      	ldr	r0, [pc, #36]	; (8013e34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013e10:	f001 f850 	bl	8014eb4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013e14:	6a3b      	ldr	r3, [r7, #32]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	bf14      	ite	ne
 8013e1a:	2301      	movne	r3, #1
 8013e1c:	2300      	moveq	r3, #0
 8013e1e:	b2db      	uxtb	r3, r3
 8013e20:	e000      	b.n	8013e24 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013e22:	2300      	movs	r3, #0
}
 8013e24:	4618      	mov	r0, r3
 8013e26:	3730      	adds	r7, #48	; 0x30
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}
 8013e2c:	080193d4 	.word	0x080193d4
 8013e30:	080194b8 	.word	0x080194b8
 8013e34:	0801941c 	.word	0x0801941c
 8013e38:	080194d8 	.word	0x080194d8
 8013e3c:	08019510 	.word	0x08019510
 8013e40:	08019520 	.word	0x08019520

08013e44 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b08e      	sub	sp, #56	; 0x38
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	685b      	ldr	r3, [r3, #4]
 8013e50:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	f003 030f 	and.w	r3, r3, #15
 8013e5a:	b2db      	uxtb	r3, r3
 8013e5c:	009b      	lsls	r3, r3, #2
 8013e5e:	b2db      	uxtb	r3, r3
 8013e60:	2b14      	cmp	r3, #20
 8013e62:	f040 8171 	bne.w	8014148 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e68:	88db      	ldrh	r3, [r3, #6]
 8013e6a:	b29b      	uxth	r3, r3
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f7f6 fb17 	bl	800a4a0 <lwip_htons>
 8013e72:	4603      	mov	r3, r0
 8013e74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e78:	b29b      	uxth	r3, r3
 8013e7a:	00db      	lsls	r3, r3, #3
 8013e7c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e80:	885b      	ldrh	r3, [r3, #2]
 8013e82:	b29b      	uxth	r3, r3
 8013e84:	4618      	mov	r0, r3
 8013e86:	f7f6 fb0b 	bl	800a4a0 <lwip_htons>
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e90:	781b      	ldrb	r3, [r3, #0]
 8013e92:	f003 030f 	and.w	r3, r3, #15
 8013e96:	b2db      	uxtb	r3, r3
 8013e98:	009b      	lsls	r3, r3, #2
 8013e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013ea2:	b29b      	uxth	r3, r3
 8013ea4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	f0c0 8150 	bcc.w	801414c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013eac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013eb0:	b29b      	uxth	r3, r3
 8013eb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013eb4:	1ad3      	subs	r3, r2, r3
 8013eb6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013eb8:	6878      	ldr	r0, [r7, #4]
 8013eba:	f7f7 ff71 	bl	800bda0 <pbuf_clen>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013ec2:	4b8c      	ldr	r3, [pc, #560]	; (80140f4 <ip4_reass+0x2b0>)
 8013ec4:	881b      	ldrh	r3, [r3, #0]
 8013ec6:	461a      	mov	r2, r3
 8013ec8:	8c3b      	ldrh	r3, [r7, #32]
 8013eca:	4413      	add	r3, r2
 8013ecc:	2b0a      	cmp	r3, #10
 8013ece:	dd10      	ble.n	8013ef2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013ed0:	8c3b      	ldrh	r3, [r7, #32]
 8013ed2:	4619      	mov	r1, r3
 8013ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ed6:	f7ff fd81 	bl	80139dc <ip_reass_remove_oldest_datagram>
 8013eda:	4603      	mov	r3, r0
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	f000 8137 	beq.w	8014150 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013ee2:	4b84      	ldr	r3, [pc, #528]	; (80140f4 <ip4_reass+0x2b0>)
 8013ee4:	881b      	ldrh	r3, [r3, #0]
 8013ee6:	461a      	mov	r2, r3
 8013ee8:	8c3b      	ldrh	r3, [r7, #32]
 8013eea:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013eec:	2b0a      	cmp	r3, #10
 8013eee:	f300 812f 	bgt.w	8014150 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013ef2:	4b81      	ldr	r3, [pc, #516]	; (80140f8 <ip4_reass+0x2b4>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	633b      	str	r3, [r7, #48]	; 0x30
 8013ef8:	e015      	b.n	8013f26 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013efc:	695a      	ldr	r2, [r3, #20]
 8013efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f00:	68db      	ldr	r3, [r3, #12]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d10c      	bne.n	8013f20 <ip4_reass+0xdc>
 8013f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f08:	699a      	ldr	r2, [r3, #24]
 8013f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f0c:	691b      	ldr	r3, [r3, #16]
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	d106      	bne.n	8013f20 <ip4_reass+0xdc>
 8013f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f14:	899a      	ldrh	r2, [r3, #12]
 8013f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f18:	889b      	ldrh	r3, [r3, #4]
 8013f1a:	b29b      	uxth	r3, r3
 8013f1c:	429a      	cmp	r2, r3
 8013f1e:	d006      	beq.n	8013f2e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	633b      	str	r3, [r7, #48]	; 0x30
 8013f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d1e6      	bne.n	8013efa <ip4_reass+0xb6>
 8013f2c:	e000      	b.n	8013f30 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013f2e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d109      	bne.n	8013f4a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013f36:	8c3b      	ldrh	r3, [r7, #32]
 8013f38:	4619      	mov	r1, r3
 8013f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f3c:	f7ff fdb0 	bl	8013aa0 <ip_reass_enqueue_new_datagram>
 8013f40:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d11c      	bne.n	8013f82 <ip4_reass+0x13e>
      goto nullreturn;
 8013f48:	e105      	b.n	8014156 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f4c:	88db      	ldrh	r3, [r3, #6]
 8013f4e:	b29b      	uxth	r3, r3
 8013f50:	4618      	mov	r0, r3
 8013f52:	f7f6 faa5 	bl	800a4a0 <lwip_htons>
 8013f56:	4603      	mov	r3, r0
 8013f58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d110      	bne.n	8013f82 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f62:	89db      	ldrh	r3, [r3, #14]
 8013f64:	4618      	mov	r0, r3
 8013f66:	f7f6 fa9b 	bl	800a4a0 <lwip_htons>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d006      	beq.n	8013f82 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f76:	3308      	adds	r3, #8
 8013f78:	2214      	movs	r2, #20
 8013f7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f000 fe88 	bl	8014c92 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f84:	88db      	ldrh	r3, [r3, #6]
 8013f86:	b29b      	uxth	r3, r3
 8013f88:	f003 0320 	and.w	r3, r3, #32
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	bf0c      	ite	eq
 8013f90:	2301      	moveq	r3, #1
 8013f92:	2300      	movne	r3, #0
 8013f94:	b2db      	uxtb	r3, r3
 8013f96:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013f98:	69fb      	ldr	r3, [r7, #28]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d00e      	beq.n	8013fbc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013f9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013fa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013fa2:	4413      	add	r3, r2
 8013fa4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013fa6:	8b7a      	ldrh	r2, [r7, #26]
 8013fa8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013faa:	429a      	cmp	r2, r3
 8013fac:	f0c0 80a0 	bcc.w	80140f0 <ip4_reass+0x2ac>
 8013fb0:	8b7b      	ldrh	r3, [r7, #26]
 8013fb2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013fb6:	4293      	cmp	r3, r2
 8013fb8:	f200 809a 	bhi.w	80140f0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013fbc:	69fa      	ldr	r2, [r7, #28]
 8013fbe:	6879      	ldr	r1, [r7, #4]
 8013fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fc2:	f7ff fdd5 	bl	8013b70 <ip_reass_chain_frag_into_datagram_and_validate>
 8013fc6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013fc8:	697b      	ldr	r3, [r7, #20]
 8013fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fce:	f000 809b 	beq.w	8014108 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013fd2:	4b48      	ldr	r3, [pc, #288]	; (80140f4 <ip4_reass+0x2b0>)
 8013fd4:	881a      	ldrh	r2, [r3, #0]
 8013fd6:	8c3b      	ldrh	r3, [r7, #32]
 8013fd8:	4413      	add	r3, r2
 8013fda:	b29a      	uxth	r2, r3
 8013fdc:	4b45      	ldr	r3, [pc, #276]	; (80140f4 <ip4_reass+0x2b0>)
 8013fde:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013fe0:	69fb      	ldr	r3, [r7, #28]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d00d      	beq.n	8014002 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013fe6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013fe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013fea:	4413      	add	r3, r2
 8013fec:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff0:	8a7a      	ldrh	r2, [r7, #18]
 8013ff2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff6:	7f9b      	ldrb	r3, [r3, #30]
 8013ff8:	f043 0301 	orr.w	r3, r3, #1
 8013ffc:	b2da      	uxtb	r2, r3
 8013ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014000:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014002:	697b      	ldr	r3, [r7, #20]
 8014004:	2b01      	cmp	r3, #1
 8014006:	d171      	bne.n	80140ec <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801400a:	8b9b      	ldrh	r3, [r3, #28]
 801400c:	3314      	adds	r3, #20
 801400e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014012:	685b      	ldr	r3, [r3, #4]
 8014014:	685b      	ldr	r3, [r3, #4]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801401a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801401c:	685b      	ldr	r3, [r3, #4]
 801401e:	685b      	ldr	r3, [r3, #4]
 8014020:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014024:	3308      	adds	r3, #8
 8014026:	2214      	movs	r2, #20
 8014028:	4619      	mov	r1, r3
 801402a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801402c:	f000 fe31 	bl	8014c92 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014030:	8a3b      	ldrh	r3, [r7, #16]
 8014032:	4618      	mov	r0, r3
 8014034:	f7f6 fa34 	bl	800a4a0 <lwip_htons>
 8014038:	4603      	mov	r3, r0
 801403a:	461a      	mov	r2, r3
 801403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801403e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014042:	2200      	movs	r2, #0
 8014044:	719a      	strb	r2, [r3, #6]
 8014046:	2200      	movs	r2, #0
 8014048:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801404c:	2200      	movs	r2, #0
 801404e:	729a      	strb	r2, [r3, #10]
 8014050:	2200      	movs	r2, #0
 8014052:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014056:	685b      	ldr	r3, [r3, #4]
 8014058:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801405a:	e00d      	b.n	8014078 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801405c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801405e:	685b      	ldr	r3, [r3, #4]
 8014060:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014062:	2114      	movs	r1, #20
 8014064:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014066:	f7f7 fd87 	bl	800bb78 <pbuf_remove_header>
      pbuf_cat(p, r);
 801406a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f7f7 fed7 	bl	800be20 <pbuf_cat>
      r = iprh->next_pbuf;
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801407a:	2b00      	cmp	r3, #0
 801407c:	d1ee      	bne.n	801405c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801407e:	4b1e      	ldr	r3, [pc, #120]	; (80140f8 <ip4_reass+0x2b4>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014084:	429a      	cmp	r2, r3
 8014086:	d102      	bne.n	801408e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014088:	2300      	movs	r3, #0
 801408a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801408c:	e010      	b.n	80140b0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801408e:	4b1a      	ldr	r3, [pc, #104]	; (80140f8 <ip4_reass+0x2b4>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014094:	e007      	b.n	80140a6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801409c:	429a      	cmp	r2, r3
 801409e:	d006      	beq.n	80140ae <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80140a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80140a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d1f4      	bne.n	8014096 <ip4_reass+0x252>
 80140ac:	e000      	b.n	80140b0 <ip4_reass+0x26c>
          break;
 80140ae:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80140b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80140b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140b4:	f7ff fd2e 	bl	8013b14 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	f7f7 fe71 	bl	800bda0 <pbuf_clen>
 80140be:	4603      	mov	r3, r0
 80140c0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80140c2:	4b0c      	ldr	r3, [pc, #48]	; (80140f4 <ip4_reass+0x2b0>)
 80140c4:	881b      	ldrh	r3, [r3, #0]
 80140c6:	8c3a      	ldrh	r2, [r7, #32]
 80140c8:	429a      	cmp	r2, r3
 80140ca:	d906      	bls.n	80140da <ip4_reass+0x296>
 80140cc:	4b0b      	ldr	r3, [pc, #44]	; (80140fc <ip4_reass+0x2b8>)
 80140ce:	f240 229b 	movw	r2, #667	; 0x29b
 80140d2:	490b      	ldr	r1, [pc, #44]	; (8014100 <ip4_reass+0x2bc>)
 80140d4:	480b      	ldr	r0, [pc, #44]	; (8014104 <ip4_reass+0x2c0>)
 80140d6:	f000 feed 	bl	8014eb4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80140da:	4b06      	ldr	r3, [pc, #24]	; (80140f4 <ip4_reass+0x2b0>)
 80140dc:	881a      	ldrh	r2, [r3, #0]
 80140de:	8c3b      	ldrh	r3, [r7, #32]
 80140e0:	1ad3      	subs	r3, r2, r3
 80140e2:	b29a      	uxth	r2, r3
 80140e4:	4b03      	ldr	r3, [pc, #12]	; (80140f4 <ip4_reass+0x2b0>)
 80140e6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	e038      	b.n	801415e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80140ec:	2300      	movs	r3, #0
 80140ee:	e036      	b.n	801415e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80140f0:	bf00      	nop
 80140f2:	e00a      	b.n	801410a <ip4_reass+0x2c6>
 80140f4:	20017c20 	.word	0x20017c20
 80140f8:	20017c1c 	.word	0x20017c1c
 80140fc:	080193d4 	.word	0x080193d4
 8014100:	08019544 	.word	0x08019544
 8014104:	0801941c 	.word	0x0801941c
    goto nullreturn_ipr;
 8014108:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801410c:	2b00      	cmp	r3, #0
 801410e:	d106      	bne.n	801411e <ip4_reass+0x2da>
 8014110:	4b15      	ldr	r3, [pc, #84]	; (8014168 <ip4_reass+0x324>)
 8014112:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014116:	4915      	ldr	r1, [pc, #84]	; (801416c <ip4_reass+0x328>)
 8014118:	4815      	ldr	r0, [pc, #84]	; (8014170 <ip4_reass+0x32c>)
 801411a:	f000 fecb 	bl	8014eb4 <iprintf>
  if (ipr->p == NULL) {
 801411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014120:	685b      	ldr	r3, [r3, #4]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d116      	bne.n	8014154 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014126:	4b13      	ldr	r3, [pc, #76]	; (8014174 <ip4_reass+0x330>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801412c:	429a      	cmp	r2, r3
 801412e:	d006      	beq.n	801413e <ip4_reass+0x2fa>
 8014130:	4b0d      	ldr	r3, [pc, #52]	; (8014168 <ip4_reass+0x324>)
 8014132:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014136:	4910      	ldr	r1, [pc, #64]	; (8014178 <ip4_reass+0x334>)
 8014138:	480d      	ldr	r0, [pc, #52]	; (8014170 <ip4_reass+0x32c>)
 801413a:	f000 febb 	bl	8014eb4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801413e:	2100      	movs	r1, #0
 8014140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014142:	f7ff fce7 	bl	8013b14 <ip_reass_dequeue_datagram>
 8014146:	e006      	b.n	8014156 <ip4_reass+0x312>
    goto nullreturn;
 8014148:	bf00      	nop
 801414a:	e004      	b.n	8014156 <ip4_reass+0x312>
    goto nullreturn;
 801414c:	bf00      	nop
 801414e:	e002      	b.n	8014156 <ip4_reass+0x312>
      goto nullreturn;
 8014150:	bf00      	nop
 8014152:	e000      	b.n	8014156 <ip4_reass+0x312>
  }

nullreturn:
 8014154:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f7f7 fd94 	bl	800bc84 <pbuf_free>
  return NULL;
 801415c:	2300      	movs	r3, #0
}
 801415e:	4618      	mov	r0, r3
 8014160:	3738      	adds	r7, #56	; 0x38
 8014162:	46bd      	mov	sp, r7
 8014164:	bd80      	pop	{r7, pc}
 8014166:	bf00      	nop
 8014168:	080193d4 	.word	0x080193d4
 801416c:	08019560 	.word	0x08019560
 8014170:	0801941c 	.word	0x0801941c
 8014174:	20017c1c 	.word	0x20017c1c
 8014178:	0801956c 	.word	0x0801956c

0801417c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014180:	2005      	movs	r0, #5
 8014182:	f7f6 fe65 	bl	800ae50 <memp_malloc>
 8014186:	4603      	mov	r3, r0
}
 8014188:	4618      	mov	r0, r3
 801418a:	bd80      	pop	{r7, pc}

0801418c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b082      	sub	sp, #8
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d106      	bne.n	80141a8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801419a:	4b07      	ldr	r3, [pc, #28]	; (80141b8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801419c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80141a0:	4906      	ldr	r1, [pc, #24]	; (80141bc <ip_frag_free_pbuf_custom_ref+0x30>)
 80141a2:	4807      	ldr	r0, [pc, #28]	; (80141c0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80141a4:	f000 fe86 	bl	8014eb4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80141a8:	6879      	ldr	r1, [r7, #4]
 80141aa:	2005      	movs	r0, #5
 80141ac:	f7f6 fec6 	bl	800af3c <memp_free>
}
 80141b0:	bf00      	nop
 80141b2:	3708      	adds	r7, #8
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}
 80141b8:	080193d4 	.word	0x080193d4
 80141bc:	0801958c 	.word	0x0801958c
 80141c0:	0801941c 	.word	0x0801941c

080141c4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b084      	sub	sp, #16
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d106      	bne.n	80141e4 <ipfrag_free_pbuf_custom+0x20>
 80141d6:	4b11      	ldr	r3, [pc, #68]	; (801421c <ipfrag_free_pbuf_custom+0x58>)
 80141d8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80141dc:	4910      	ldr	r1, [pc, #64]	; (8014220 <ipfrag_free_pbuf_custom+0x5c>)
 80141de:	4811      	ldr	r0, [pc, #68]	; (8014224 <ipfrag_free_pbuf_custom+0x60>)
 80141e0:	f000 fe68 	bl	8014eb4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80141e4:	68fa      	ldr	r2, [r7, #12]
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	429a      	cmp	r2, r3
 80141ea:	d006      	beq.n	80141fa <ipfrag_free_pbuf_custom+0x36>
 80141ec:	4b0b      	ldr	r3, [pc, #44]	; (801421c <ipfrag_free_pbuf_custom+0x58>)
 80141ee:	f240 22cf 	movw	r2, #719	; 0x2cf
 80141f2:	490d      	ldr	r1, [pc, #52]	; (8014228 <ipfrag_free_pbuf_custom+0x64>)
 80141f4:	480b      	ldr	r0, [pc, #44]	; (8014224 <ipfrag_free_pbuf_custom+0x60>)
 80141f6:	f000 fe5d 	bl	8014eb4 <iprintf>
  if (pcr->original != NULL) {
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	695b      	ldr	r3, [r3, #20]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d004      	beq.n	801420c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	695b      	ldr	r3, [r3, #20]
 8014206:	4618      	mov	r0, r3
 8014208:	f7f7 fd3c 	bl	800bc84 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801420c:	68f8      	ldr	r0, [r7, #12]
 801420e:	f7ff ffbd 	bl	801418c <ip_frag_free_pbuf_custom_ref>
}
 8014212:	bf00      	nop
 8014214:	3710      	adds	r7, #16
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}
 801421a:	bf00      	nop
 801421c:	080193d4 	.word	0x080193d4
 8014220:	08019598 	.word	0x08019598
 8014224:	0801941c 	.word	0x0801941c
 8014228:	080195a4 	.word	0x080195a4

0801422c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b094      	sub	sp, #80	; 0x50
 8014230:	af02      	add	r7, sp, #8
 8014232:	60f8      	str	r0, [r7, #12]
 8014234:	60b9      	str	r1, [r7, #8]
 8014236:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014238:	2300      	movs	r3, #0
 801423a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014242:	3b14      	subs	r3, #20
 8014244:	2b00      	cmp	r3, #0
 8014246:	da00      	bge.n	801424a <ip4_frag+0x1e>
 8014248:	3307      	adds	r3, #7
 801424a:	10db      	asrs	r3, r3, #3
 801424c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801424e:	2314      	movs	r3, #20
 8014250:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801425a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801425e:	781b      	ldrb	r3, [r3, #0]
 8014260:	f003 030f 	and.w	r3, r3, #15
 8014264:	b2db      	uxtb	r3, r3
 8014266:	009b      	lsls	r3, r3, #2
 8014268:	b2db      	uxtb	r3, r3
 801426a:	2b14      	cmp	r3, #20
 801426c:	d002      	beq.n	8014274 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801426e:	f06f 0305 	mvn.w	r3, #5
 8014272:	e110      	b.n	8014496 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	895b      	ldrh	r3, [r3, #10]
 8014278:	2b13      	cmp	r3, #19
 801427a:	d809      	bhi.n	8014290 <ip4_frag+0x64>
 801427c:	4b88      	ldr	r3, [pc, #544]	; (80144a0 <ip4_frag+0x274>)
 801427e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014282:	4988      	ldr	r1, [pc, #544]	; (80144a4 <ip4_frag+0x278>)
 8014284:	4888      	ldr	r0, [pc, #544]	; (80144a8 <ip4_frag+0x27c>)
 8014286:	f000 fe15 	bl	8014eb4 <iprintf>
 801428a:	f06f 0305 	mvn.w	r3, #5
 801428e:	e102      	b.n	8014496 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014292:	88db      	ldrh	r3, [r3, #6]
 8014294:	b29b      	uxth	r3, r3
 8014296:	4618      	mov	r0, r3
 8014298:	f7f6 f902 	bl	800a4a0 <lwip_htons>
 801429c:	4603      	mov	r3, r0
 801429e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80142a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80142a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80142a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80142aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80142ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80142b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	891b      	ldrh	r3, [r3, #8]
 80142b6:	3b14      	subs	r3, #20
 80142b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80142bc:	e0e1      	b.n	8014482 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80142be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80142c0:	00db      	lsls	r3, r3, #3
 80142c2:	b29b      	uxth	r3, r3
 80142c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80142c8:	4293      	cmp	r3, r2
 80142ca:	bf28      	it	cs
 80142cc:	4613      	movcs	r3, r2
 80142ce:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80142d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80142d4:	2114      	movs	r1, #20
 80142d6:	200e      	movs	r0, #14
 80142d8:	f7f7 f9f0 	bl	800b6bc <pbuf_alloc>
 80142dc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80142de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	f000 80d5 	beq.w	8014490 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80142e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e8:	895b      	ldrh	r3, [r3, #10]
 80142ea:	2b13      	cmp	r3, #19
 80142ec:	d806      	bhi.n	80142fc <ip4_frag+0xd0>
 80142ee:	4b6c      	ldr	r3, [pc, #432]	; (80144a0 <ip4_frag+0x274>)
 80142f0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80142f4:	496d      	ldr	r1, [pc, #436]	; (80144ac <ip4_frag+0x280>)
 80142f6:	486c      	ldr	r0, [pc, #432]	; (80144a8 <ip4_frag+0x27c>)
 80142f8:	f000 fddc 	bl	8014eb4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80142fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fe:	685b      	ldr	r3, [r3, #4]
 8014300:	2214      	movs	r2, #20
 8014302:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014304:	4618      	mov	r0, r3
 8014306:	f000 fcc4 	bl	8014c92 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801430c:	685b      	ldr	r3, [r3, #4]
 801430e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014310:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014312:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014316:	e064      	b.n	80143e2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	895a      	ldrh	r2, [r3, #10]
 801431c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801431e:	1ad3      	subs	r3, r2, r3
 8014320:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	895b      	ldrh	r3, [r3, #10]
 8014326:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014328:	429a      	cmp	r2, r3
 801432a:	d906      	bls.n	801433a <ip4_frag+0x10e>
 801432c:	4b5c      	ldr	r3, [pc, #368]	; (80144a0 <ip4_frag+0x274>)
 801432e:	f240 322d 	movw	r2, #813	; 0x32d
 8014332:	495f      	ldr	r1, [pc, #380]	; (80144b0 <ip4_frag+0x284>)
 8014334:	485c      	ldr	r0, [pc, #368]	; (80144a8 <ip4_frag+0x27c>)
 8014336:	f000 fdbd 	bl	8014eb4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801433a:	8bfa      	ldrh	r2, [r7, #30]
 801433c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014340:	4293      	cmp	r3, r2
 8014342:	bf28      	it	cs
 8014344:	4613      	movcs	r3, r2
 8014346:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801434a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801434e:	2b00      	cmp	r3, #0
 8014350:	d105      	bne.n	801435e <ip4_frag+0x132>
        poff = 0;
 8014352:	2300      	movs	r3, #0
 8014354:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	60fb      	str	r3, [r7, #12]
        continue;
 801435c:	e041      	b.n	80143e2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801435e:	f7ff ff0d 	bl	801417c <ip_frag_alloc_pbuf_custom_ref>
 8014362:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014364:	69bb      	ldr	r3, [r7, #24]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d103      	bne.n	8014372 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801436a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801436c:	f7f7 fc8a 	bl	800bc84 <pbuf_free>
        goto memerr;
 8014370:	e08f      	b.n	8014492 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014372:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014378:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801437a:	4413      	add	r3, r2
 801437c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014380:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014384:	9201      	str	r2, [sp, #4]
 8014386:	9300      	str	r3, [sp, #0]
 8014388:	4603      	mov	r3, r0
 801438a:	2241      	movs	r2, #65	; 0x41
 801438c:	2000      	movs	r0, #0
 801438e:	f7f7 fabf 	bl	800b910 <pbuf_alloced_custom>
 8014392:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014394:	697b      	ldr	r3, [r7, #20]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d106      	bne.n	80143a8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801439a:	69b8      	ldr	r0, [r7, #24]
 801439c:	f7ff fef6 	bl	801418c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80143a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80143a2:	f7f7 fc6f 	bl	800bc84 <pbuf_free>
        goto memerr;
 80143a6:	e074      	b.n	8014492 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80143a8:	68f8      	ldr	r0, [r7, #12]
 80143aa:	f7f7 fd11 	bl	800bdd0 <pbuf_ref>
      pcr->original = p;
 80143ae:	69bb      	ldr	r3, [r7, #24]
 80143b0:	68fa      	ldr	r2, [r7, #12]
 80143b2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80143b4:	69bb      	ldr	r3, [r7, #24]
 80143b6:	4a3f      	ldr	r2, [pc, #252]	; (80144b4 <ip4_frag+0x288>)
 80143b8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80143ba:	6979      	ldr	r1, [r7, #20]
 80143bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80143be:	f7f7 fd2f 	bl	800be20 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80143c2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80143c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80143ca:	1ad3      	subs	r3, r2, r3
 80143cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80143d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d004      	beq.n	80143e2 <ip4_frag+0x1b6>
        poff = 0;
 80143d8:	2300      	movs	r3, #0
 80143da:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80143e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d196      	bne.n	8014318 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80143ea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80143ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80143f0:	4413      	add	r3, r2
 80143f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80143f4:	68bb      	ldr	r3, [r7, #8]
 80143f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80143f8:	f1a3 0213 	sub.w	r2, r3, #19
 80143fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014400:	429a      	cmp	r2, r3
 8014402:	bfcc      	ite	gt
 8014404:	2301      	movgt	r3, #1
 8014406:	2300      	movle	r3, #0
 8014408:	b2db      	uxtb	r3, r3
 801440a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801440c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014414:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014416:	6a3b      	ldr	r3, [r7, #32]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d002      	beq.n	8014422 <ip4_frag+0x1f6>
 801441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801441e:	2b00      	cmp	r3, #0
 8014420:	d003      	beq.n	801442a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014422:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014424:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014428:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801442a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801442c:	4618      	mov	r0, r3
 801442e:	f7f6 f837 	bl	800a4a0 <lwip_htons>
 8014432:	4603      	mov	r3, r0
 8014434:	461a      	mov	r2, r3
 8014436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014438:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801443a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801443c:	3314      	adds	r3, #20
 801443e:	b29b      	uxth	r3, r3
 8014440:	4618      	mov	r0, r3
 8014442:	f7f6 f82d 	bl	800a4a0 <lwip_htons>
 8014446:	4603      	mov	r3, r0
 8014448:	461a      	mov	r2, r3
 801444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801444c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014450:	2200      	movs	r2, #0
 8014452:	729a      	strb	r2, [r3, #10]
 8014454:	2200      	movs	r2, #0
 8014456:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014458:	68bb      	ldr	r3, [r7, #8]
 801445a:	695b      	ldr	r3, [r3, #20]
 801445c:	687a      	ldr	r2, [r7, #4]
 801445e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014460:	68b8      	ldr	r0, [r7, #8]
 8014462:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014464:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014466:	f7f7 fc0d 	bl	800bc84 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801446a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801446e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014470:	1ad3      	subs	r3, r2, r3
 8014472:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014476:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801447a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801447c:	4413      	add	r3, r2
 801447e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014482:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014486:	2b00      	cmp	r3, #0
 8014488:	f47f af19 	bne.w	80142be <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801448c:	2300      	movs	r3, #0
 801448e:	e002      	b.n	8014496 <ip4_frag+0x26a>
      goto memerr;
 8014490:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014496:	4618      	mov	r0, r3
 8014498:	3748      	adds	r7, #72	; 0x48
 801449a:	46bd      	mov	sp, r7
 801449c:	bd80      	pop	{r7, pc}
 801449e:	bf00      	nop
 80144a0:	080193d4 	.word	0x080193d4
 80144a4:	080195b0 	.word	0x080195b0
 80144a8:	0801941c 	.word	0x0801941c
 80144ac:	080195cc 	.word	0x080195cc
 80144b0:	080195ec 	.word	0x080195ec
 80144b4:	080141c5 	.word	0x080141c5

080144b8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b086      	sub	sp, #24
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
 80144c0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80144c2:	230e      	movs	r3, #14
 80144c4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	895b      	ldrh	r3, [r3, #10]
 80144ca:	2b0e      	cmp	r3, #14
 80144cc:	d96e      	bls.n	80145ac <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	7bdb      	ldrb	r3, [r3, #15]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d106      	bne.n	80144e4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80144dc:	3301      	adds	r3, #1
 80144de:	b2da      	uxtb	r2, r3
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	685b      	ldr	r3, [r3, #4]
 80144e8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	7b1a      	ldrb	r2, [r3, #12]
 80144ee:	7b5b      	ldrb	r3, [r3, #13]
 80144f0:	021b      	lsls	r3, r3, #8
 80144f2:	4313      	orrs	r3, r2
 80144f4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	f003 0301 	and.w	r3, r3, #1
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d023      	beq.n	801454a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014502:	693b      	ldr	r3, [r7, #16]
 8014504:	781b      	ldrb	r3, [r3, #0]
 8014506:	2b01      	cmp	r3, #1
 8014508:	d10f      	bne.n	801452a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801450a:	693b      	ldr	r3, [r7, #16]
 801450c:	785b      	ldrb	r3, [r3, #1]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d11b      	bne.n	801454a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014516:	2b5e      	cmp	r3, #94	; 0x5e
 8014518:	d117      	bne.n	801454a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	7b5b      	ldrb	r3, [r3, #13]
 801451e:	f043 0310 	orr.w	r3, r3, #16
 8014522:	b2da      	uxtb	r2, r3
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	735a      	strb	r2, [r3, #13]
 8014528:	e00f      	b.n	801454a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801452a:	693b      	ldr	r3, [r7, #16]
 801452c:	2206      	movs	r2, #6
 801452e:	4928      	ldr	r1, [pc, #160]	; (80145d0 <ethernet_input+0x118>)
 8014530:	4618      	mov	r0, r3
 8014532:	f000 fb9e 	bl	8014c72 <memcmp>
 8014536:	4603      	mov	r3, r0
 8014538:	2b00      	cmp	r3, #0
 801453a:	d106      	bne.n	801454a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	7b5b      	ldrb	r3, [r3, #13]
 8014540:	f043 0308 	orr.w	r3, r3, #8
 8014544:	b2da      	uxtb	r2, r3
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801454a:	89fb      	ldrh	r3, [r7, #14]
 801454c:	2b08      	cmp	r3, #8
 801454e:	d003      	beq.n	8014558 <ethernet_input+0xa0>
 8014550:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014554:	d014      	beq.n	8014580 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014556:	e032      	b.n	80145be <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801455e:	f003 0308 	and.w	r3, r3, #8
 8014562:	2b00      	cmp	r3, #0
 8014564:	d024      	beq.n	80145b0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014566:	8afb      	ldrh	r3, [r7, #22]
 8014568:	4619      	mov	r1, r3
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f7f7 fb04 	bl	800bb78 <pbuf_remove_header>
 8014570:	4603      	mov	r3, r0
 8014572:	2b00      	cmp	r3, #0
 8014574:	d11e      	bne.n	80145b4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014576:	6839      	ldr	r1, [r7, #0]
 8014578:	6878      	ldr	r0, [r7, #4]
 801457a:	f7fe ff21 	bl	80133c0 <ip4_input>
      break;
 801457e:	e013      	b.n	80145a8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014586:	f003 0308 	and.w	r3, r3, #8
 801458a:	2b00      	cmp	r3, #0
 801458c:	d014      	beq.n	80145b8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801458e:	8afb      	ldrh	r3, [r7, #22]
 8014590:	4619      	mov	r1, r3
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	f7f7 faf0 	bl	800bb78 <pbuf_remove_header>
 8014598:	4603      	mov	r3, r0
 801459a:	2b00      	cmp	r3, #0
 801459c:	d10e      	bne.n	80145bc <ethernet_input+0x104>
        etharp_input(p, netif);
 801459e:	6839      	ldr	r1, [r7, #0]
 80145a0:	6878      	ldr	r0, [r7, #4]
 80145a2:	f7fe f8c1 	bl	8012728 <etharp_input>
      break;
 80145a6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80145a8:	2300      	movs	r3, #0
 80145aa:	e00c      	b.n	80145c6 <ethernet_input+0x10e>
    goto free_and_return;
 80145ac:	bf00      	nop
 80145ae:	e006      	b.n	80145be <ethernet_input+0x106>
        goto free_and_return;
 80145b0:	bf00      	nop
 80145b2:	e004      	b.n	80145be <ethernet_input+0x106>
        goto free_and_return;
 80145b4:	bf00      	nop
 80145b6:	e002      	b.n	80145be <ethernet_input+0x106>
        goto free_and_return;
 80145b8:	bf00      	nop
 80145ba:	e000      	b.n	80145be <ethernet_input+0x106>
        goto free_and_return;
 80145bc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f7f7 fb60 	bl	800bc84 <pbuf_free>
  return ERR_OK;
 80145c4:	2300      	movs	r3, #0
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	3718      	adds	r7, #24
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd80      	pop	{r7, pc}
 80145ce:	bf00      	nop
 80145d0:	080197d4 	.word	0x080197d4

080145d4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b086      	sub	sp, #24
 80145d8:	af00      	add	r7, sp, #0
 80145da:	60f8      	str	r0, [r7, #12]
 80145dc:	60b9      	str	r1, [r7, #8]
 80145de:	607a      	str	r2, [r7, #4]
 80145e0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80145e2:	8c3b      	ldrh	r3, [r7, #32]
 80145e4:	4618      	mov	r0, r3
 80145e6:	f7f5 ff5b 	bl	800a4a0 <lwip_htons>
 80145ea:	4603      	mov	r3, r0
 80145ec:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80145ee:	210e      	movs	r1, #14
 80145f0:	68b8      	ldr	r0, [r7, #8]
 80145f2:	f7f7 fab1 	bl	800bb58 <pbuf_add_header>
 80145f6:	4603      	mov	r3, r0
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d125      	bne.n	8014648 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	685b      	ldr	r3, [r3, #4]
 8014600:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014602:	693b      	ldr	r3, [r7, #16]
 8014604:	8afa      	ldrh	r2, [r7, #22]
 8014606:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014608:	693b      	ldr	r3, [r7, #16]
 801460a:	2206      	movs	r2, #6
 801460c:	6839      	ldr	r1, [r7, #0]
 801460e:	4618      	mov	r0, r3
 8014610:	f000 fb3f 	bl	8014c92 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014614:	693b      	ldr	r3, [r7, #16]
 8014616:	3306      	adds	r3, #6
 8014618:	2206      	movs	r2, #6
 801461a:	6879      	ldr	r1, [r7, #4]
 801461c:	4618      	mov	r0, r3
 801461e:	f000 fb38 	bl	8014c92 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014628:	2b06      	cmp	r3, #6
 801462a:	d006      	beq.n	801463a <ethernet_output+0x66>
 801462c:	4b0a      	ldr	r3, [pc, #40]	; (8014658 <ethernet_output+0x84>)
 801462e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014632:	490a      	ldr	r1, [pc, #40]	; (801465c <ethernet_output+0x88>)
 8014634:	480a      	ldr	r0, [pc, #40]	; (8014660 <ethernet_output+0x8c>)
 8014636:	f000 fc3d 	bl	8014eb4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	699b      	ldr	r3, [r3, #24]
 801463e:	68b9      	ldr	r1, [r7, #8]
 8014640:	68f8      	ldr	r0, [r7, #12]
 8014642:	4798      	blx	r3
 8014644:	4603      	mov	r3, r0
 8014646:	e002      	b.n	801464e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014648:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801464a:	f06f 0301 	mvn.w	r3, #1
}
 801464e:	4618      	mov	r0, r3
 8014650:	3718      	adds	r7, #24
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}
 8014656:	bf00      	nop
 8014658:	080195fc 	.word	0x080195fc
 801465c:	08019634 	.word	0x08019634
 8014660:	08019668 	.word	0x08019668

08014664 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b086      	sub	sp, #24
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
 801466c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801466e:	683b      	ldr	r3, [r7, #0]
 8014670:	60bb      	str	r3, [r7, #8]
 8014672:	2304      	movs	r3, #4
 8014674:	60fb      	str	r3, [r7, #12]
 8014676:	2300      	movs	r3, #0
 8014678:	613b      	str	r3, [r7, #16]
 801467a:	2300      	movs	r3, #0
 801467c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801467e:	f107 0308 	add.w	r3, r7, #8
 8014682:	2100      	movs	r1, #0
 8014684:	4618      	mov	r0, r3
 8014686:	f7f2 fc8b 	bl	8006fa0 <osMessageCreate>
 801468a:	4602      	mov	r2, r0
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d102      	bne.n	801469e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8014698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801469c:	e000      	b.n	80146a0 <sys_mbox_new+0x3c>

  return ERR_OK;
 801469e:	2300      	movs	r3, #0
}
 80146a0:	4618      	mov	r0, r3
 80146a2:	3718      	adds	r7, #24
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}

080146a8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b084      	sub	sp, #16
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	6839      	ldr	r1, [r7, #0]
 80146b8:	2200      	movs	r2, #0
 80146ba:	4618      	mov	r0, r3
 80146bc:	f7f2 fc98 	bl	8006ff0 <osMessagePut>
 80146c0:	4603      	mov	r3, r0
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d102      	bne.n	80146cc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80146c6:	2300      	movs	r3, #0
 80146c8:	73fb      	strb	r3, [r7, #15]
 80146ca:	e001      	b.n	80146d0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80146cc:	23ff      	movs	r3, #255	; 0xff
 80146ce:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80146d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80146d4:	4618      	mov	r0, r3
 80146d6:	3710      	adds	r7, #16
 80146d8:	46bd      	mov	sp, r7
 80146da:	bd80      	pop	{r7, pc}

080146dc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b08c      	sub	sp, #48	; 0x30
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	61f8      	str	r0, [r7, #28]
 80146e4:	61b9      	str	r1, [r7, #24]
 80146e6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80146e8:	f7f2 faca 	bl	8006c80 <osKernelSysTick>
 80146ec:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80146ee:	697b      	ldr	r3, [r7, #20]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d017      	beq.n	8014724 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80146f4:	69fb      	ldr	r3, [r7, #28]
 80146f6:	6819      	ldr	r1, [r3, #0]
 80146f8:	f107 0320 	add.w	r3, r7, #32
 80146fc:	697a      	ldr	r2, [r7, #20]
 80146fe:	4618      	mov	r0, r3
 8014700:	f7f2 fcb6 	bl	8007070 <osMessageGet>

    if(event.status == osEventMessage)
 8014704:	6a3b      	ldr	r3, [r7, #32]
 8014706:	2b10      	cmp	r3, #16
 8014708:	d109      	bne.n	801471e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801470c:	461a      	mov	r2, r3
 801470e:	69bb      	ldr	r3, [r7, #24]
 8014710:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8014712:	f7f2 fab5 	bl	8006c80 <osKernelSysTick>
 8014716:	4602      	mov	r2, r0
 8014718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801471a:	1ad3      	subs	r3, r2, r3
 801471c:	e019      	b.n	8014752 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801471e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014722:	e016      	b.n	8014752 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8014724:	69fb      	ldr	r3, [r7, #28]
 8014726:	6819      	ldr	r1, [r3, #0]
 8014728:	463b      	mov	r3, r7
 801472a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801472e:	4618      	mov	r0, r3
 8014730:	f7f2 fc9e 	bl	8007070 <osMessageGet>
 8014734:	f107 0320 	add.w	r3, r7, #32
 8014738:	463a      	mov	r2, r7
 801473a:	ca07      	ldmia	r2, {r0, r1, r2}
 801473c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014742:	461a      	mov	r2, r3
 8014744:	69bb      	ldr	r3, [r7, #24]
 8014746:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8014748:	f7f2 fa9a 	bl	8006c80 <osKernelSysTick>
 801474c:	4602      	mov	r2, r0
 801474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014750:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014752:	4618      	mov	r0, r3
 8014754:	3730      	adds	r7, #48	; 0x30
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}

0801475a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801475a:	b480      	push	{r7}
 801475c:	b083      	sub	sp, #12
 801475e:	af00      	add	r7, sp, #0
 8014760:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d101      	bne.n	801476e <sys_mbox_valid+0x14>
    return 0;
 801476a:	2300      	movs	r3, #0
 801476c:	e000      	b.n	8014770 <sys_mbox_valid+0x16>
  else
    return 1;
 801476e:	2301      	movs	r3, #1
}
 8014770:	4618      	mov	r0, r3
 8014772:	370c      	adds	r7, #12
 8014774:	46bd      	mov	sp, r7
 8014776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477a:	4770      	bx	lr

0801477c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8014780:	4803      	ldr	r0, [pc, #12]	; (8014790 <sys_init+0x14>)
 8014782:	f7f2 faed 	bl	8006d60 <osMutexCreate>
 8014786:	4603      	mov	r3, r0
 8014788:	4a02      	ldr	r2, [pc, #8]	; (8014794 <sys_init+0x18>)
 801478a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801478c:	bf00      	nop
 801478e:	bd80      	pop	{r7, pc}
 8014790:	080197e4 	.word	0x080197e4
 8014794:	20017c24 	.word	0x20017c24

08014798 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014798:	b580      	push	{r7, lr}
 801479a:	b084      	sub	sp, #16
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80147a0:	2300      	movs	r3, #0
 80147a2:	60bb      	str	r3, [r7, #8]
 80147a4:	2300      	movs	r3, #0
 80147a6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80147a8:	f107 0308 	add.w	r3, r7, #8
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7f2 fad7 	bl	8006d60 <osMutexCreate>
 80147b2:	4602      	mov	r2, r0
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d102      	bne.n	80147c6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80147c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80147c4:	e000      	b.n	80147c8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80147c6:	2300      	movs	r3, #0
}
 80147c8:	4618      	mov	r0, r3
 80147ca:	3710      	adds	r7, #16
 80147cc:	46bd      	mov	sp, r7
 80147ce:	bd80      	pop	{r7, pc}

080147d0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b082      	sub	sp, #8
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7f2 fad5 	bl	8006d90 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80147e6:	bf00      	nop
 80147e8:	3708      	adds	r7, #8
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bd80      	pop	{r7, pc}

080147ee <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80147ee:	b580      	push	{r7, lr}
 80147f0:	b082      	sub	sp, #8
 80147f2:	af00      	add	r7, sp, #0
 80147f4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	4618      	mov	r0, r3
 80147fc:	f7f2 fb16 	bl	8006e2c <osMutexRelease>
}
 8014800:	bf00      	nop
 8014802:	3708      	adds	r7, #8
 8014804:	46bd      	mov	sp, r7
 8014806:	bd80      	pop	{r7, pc}

08014808 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b08c      	sub	sp, #48	; 0x30
 801480c:	af00      	add	r7, sp, #0
 801480e:	60f8      	str	r0, [r7, #12]
 8014810:	60b9      	str	r1, [r7, #8]
 8014812:	607a      	str	r2, [r7, #4]
 8014814:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8014816:	f107 0314 	add.w	r3, r7, #20
 801481a:	2200      	movs	r2, #0
 801481c:	601a      	str	r2, [r3, #0]
 801481e:	605a      	str	r2, [r3, #4]
 8014820:	609a      	str	r2, [r3, #8]
 8014822:	60da      	str	r2, [r3, #12]
 8014824:	611a      	str	r2, [r3, #16]
 8014826:	615a      	str	r2, [r3, #20]
 8014828:	619a      	str	r2, [r3, #24]
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	617b      	str	r3, [r7, #20]
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	61bb      	str	r3, [r7, #24]
 8014832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014834:	b21b      	sxth	r3, r3
 8014836:	83bb      	strh	r3, [r7, #28]
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801483c:	f107 0314 	add.w	r3, r7, #20
 8014840:	6879      	ldr	r1, [r7, #4]
 8014842:	4618      	mov	r0, r3
 8014844:	f7f2 fa2c 	bl	8006ca0 <osThreadCreate>
 8014848:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801484a:	4618      	mov	r0, r3
 801484c:	3730      	adds	r7, #48	; 0x30
 801484e:	46bd      	mov	sp, r7
 8014850:	bd80      	pop	{r7, pc}
	...

08014854 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014858:	4b04      	ldr	r3, [pc, #16]	; (801486c <sys_arch_protect+0x18>)
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014860:	4618      	mov	r0, r3
 8014862:	f7f2 fa95 	bl	8006d90 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8014866:	2301      	movs	r3, #1
}
 8014868:	4618      	mov	r0, r3
 801486a:	bd80      	pop	{r7, pc}
 801486c:	20017c24 	.word	0x20017c24

08014870 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b082      	sub	sp, #8
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014878:	4b04      	ldr	r3, [pc, #16]	; (801488c <sys_arch_unprotect+0x1c>)
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	4618      	mov	r0, r3
 801487e:	f7f2 fad5 	bl	8006e2c <osMutexRelease>
}
 8014882:	bf00      	nop
 8014884:	3708      	adds	r7, #8
 8014886:	46bd      	mov	sp, r7
 8014888:	bd80      	pop	{r7, pc}
 801488a:	bf00      	nop
 801488c:	20017c24 	.word	0x20017c24

08014890 <__sflush_r>:
 8014890:	898a      	ldrh	r2, [r1, #12]
 8014892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014896:	4605      	mov	r5, r0
 8014898:	0710      	lsls	r0, r2, #28
 801489a:	460c      	mov	r4, r1
 801489c:	d458      	bmi.n	8014950 <__sflush_r+0xc0>
 801489e:	684b      	ldr	r3, [r1, #4]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	dc05      	bgt.n	80148b0 <__sflush_r+0x20>
 80148a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	dc02      	bgt.n	80148b0 <__sflush_r+0x20>
 80148aa:	2000      	movs	r0, #0
 80148ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80148b2:	2e00      	cmp	r6, #0
 80148b4:	d0f9      	beq.n	80148aa <__sflush_r+0x1a>
 80148b6:	2300      	movs	r3, #0
 80148b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80148bc:	682f      	ldr	r7, [r5, #0]
 80148be:	602b      	str	r3, [r5, #0]
 80148c0:	d032      	beq.n	8014928 <__sflush_r+0x98>
 80148c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80148c4:	89a3      	ldrh	r3, [r4, #12]
 80148c6:	075a      	lsls	r2, r3, #29
 80148c8:	d505      	bpl.n	80148d6 <__sflush_r+0x46>
 80148ca:	6863      	ldr	r3, [r4, #4]
 80148cc:	1ac0      	subs	r0, r0, r3
 80148ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80148d0:	b10b      	cbz	r3, 80148d6 <__sflush_r+0x46>
 80148d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80148d4:	1ac0      	subs	r0, r0, r3
 80148d6:	2300      	movs	r3, #0
 80148d8:	4602      	mov	r2, r0
 80148da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80148dc:	6a21      	ldr	r1, [r4, #32]
 80148de:	4628      	mov	r0, r5
 80148e0:	47b0      	blx	r6
 80148e2:	1c43      	adds	r3, r0, #1
 80148e4:	89a3      	ldrh	r3, [r4, #12]
 80148e6:	d106      	bne.n	80148f6 <__sflush_r+0x66>
 80148e8:	6829      	ldr	r1, [r5, #0]
 80148ea:	291d      	cmp	r1, #29
 80148ec:	d82c      	bhi.n	8014948 <__sflush_r+0xb8>
 80148ee:	4a2a      	ldr	r2, [pc, #168]	; (8014998 <__sflush_r+0x108>)
 80148f0:	40ca      	lsrs	r2, r1
 80148f2:	07d6      	lsls	r6, r2, #31
 80148f4:	d528      	bpl.n	8014948 <__sflush_r+0xb8>
 80148f6:	2200      	movs	r2, #0
 80148f8:	6062      	str	r2, [r4, #4]
 80148fa:	04d9      	lsls	r1, r3, #19
 80148fc:	6922      	ldr	r2, [r4, #16]
 80148fe:	6022      	str	r2, [r4, #0]
 8014900:	d504      	bpl.n	801490c <__sflush_r+0x7c>
 8014902:	1c42      	adds	r2, r0, #1
 8014904:	d101      	bne.n	801490a <__sflush_r+0x7a>
 8014906:	682b      	ldr	r3, [r5, #0]
 8014908:	b903      	cbnz	r3, 801490c <__sflush_r+0x7c>
 801490a:	6560      	str	r0, [r4, #84]	; 0x54
 801490c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801490e:	602f      	str	r7, [r5, #0]
 8014910:	2900      	cmp	r1, #0
 8014912:	d0ca      	beq.n	80148aa <__sflush_r+0x1a>
 8014914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014918:	4299      	cmp	r1, r3
 801491a:	d002      	beq.n	8014922 <__sflush_r+0x92>
 801491c:	4628      	mov	r0, r5
 801491e:	f000 f9e9 	bl	8014cf4 <_free_r>
 8014922:	2000      	movs	r0, #0
 8014924:	6360      	str	r0, [r4, #52]	; 0x34
 8014926:	e7c1      	b.n	80148ac <__sflush_r+0x1c>
 8014928:	6a21      	ldr	r1, [r4, #32]
 801492a:	2301      	movs	r3, #1
 801492c:	4628      	mov	r0, r5
 801492e:	47b0      	blx	r6
 8014930:	1c41      	adds	r1, r0, #1
 8014932:	d1c7      	bne.n	80148c4 <__sflush_r+0x34>
 8014934:	682b      	ldr	r3, [r5, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d0c4      	beq.n	80148c4 <__sflush_r+0x34>
 801493a:	2b1d      	cmp	r3, #29
 801493c:	d001      	beq.n	8014942 <__sflush_r+0xb2>
 801493e:	2b16      	cmp	r3, #22
 8014940:	d101      	bne.n	8014946 <__sflush_r+0xb6>
 8014942:	602f      	str	r7, [r5, #0]
 8014944:	e7b1      	b.n	80148aa <__sflush_r+0x1a>
 8014946:	89a3      	ldrh	r3, [r4, #12]
 8014948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801494c:	81a3      	strh	r3, [r4, #12]
 801494e:	e7ad      	b.n	80148ac <__sflush_r+0x1c>
 8014950:	690f      	ldr	r7, [r1, #16]
 8014952:	2f00      	cmp	r7, #0
 8014954:	d0a9      	beq.n	80148aa <__sflush_r+0x1a>
 8014956:	0793      	lsls	r3, r2, #30
 8014958:	680e      	ldr	r6, [r1, #0]
 801495a:	bf08      	it	eq
 801495c:	694b      	ldreq	r3, [r1, #20]
 801495e:	600f      	str	r7, [r1, #0]
 8014960:	bf18      	it	ne
 8014962:	2300      	movne	r3, #0
 8014964:	eba6 0807 	sub.w	r8, r6, r7
 8014968:	608b      	str	r3, [r1, #8]
 801496a:	f1b8 0f00 	cmp.w	r8, #0
 801496e:	dd9c      	ble.n	80148aa <__sflush_r+0x1a>
 8014970:	6a21      	ldr	r1, [r4, #32]
 8014972:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014974:	4643      	mov	r3, r8
 8014976:	463a      	mov	r2, r7
 8014978:	4628      	mov	r0, r5
 801497a:	47b0      	blx	r6
 801497c:	2800      	cmp	r0, #0
 801497e:	dc06      	bgt.n	801498e <__sflush_r+0xfe>
 8014980:	89a3      	ldrh	r3, [r4, #12]
 8014982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014986:	81a3      	strh	r3, [r4, #12]
 8014988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801498c:	e78e      	b.n	80148ac <__sflush_r+0x1c>
 801498e:	4407      	add	r7, r0
 8014990:	eba8 0800 	sub.w	r8, r8, r0
 8014994:	e7e9      	b.n	801496a <__sflush_r+0xda>
 8014996:	bf00      	nop
 8014998:	20400001 	.word	0x20400001

0801499c <_fflush_r>:
 801499c:	b538      	push	{r3, r4, r5, lr}
 801499e:	690b      	ldr	r3, [r1, #16]
 80149a0:	4605      	mov	r5, r0
 80149a2:	460c      	mov	r4, r1
 80149a4:	b913      	cbnz	r3, 80149ac <_fflush_r+0x10>
 80149a6:	2500      	movs	r5, #0
 80149a8:	4628      	mov	r0, r5
 80149aa:	bd38      	pop	{r3, r4, r5, pc}
 80149ac:	b118      	cbz	r0, 80149b6 <_fflush_r+0x1a>
 80149ae:	6983      	ldr	r3, [r0, #24]
 80149b0:	b90b      	cbnz	r3, 80149b6 <_fflush_r+0x1a>
 80149b2:	f000 f899 	bl	8014ae8 <__sinit>
 80149b6:	4b14      	ldr	r3, [pc, #80]	; (8014a08 <_fflush_r+0x6c>)
 80149b8:	429c      	cmp	r4, r3
 80149ba:	d11b      	bne.n	80149f4 <_fflush_r+0x58>
 80149bc:	686c      	ldr	r4, [r5, #4]
 80149be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d0ef      	beq.n	80149a6 <_fflush_r+0xa>
 80149c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80149c8:	07d0      	lsls	r0, r2, #31
 80149ca:	d404      	bmi.n	80149d6 <_fflush_r+0x3a>
 80149cc:	0599      	lsls	r1, r3, #22
 80149ce:	d402      	bmi.n	80149d6 <_fflush_r+0x3a>
 80149d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149d2:	f000 f94c 	bl	8014c6e <__retarget_lock_acquire_recursive>
 80149d6:	4628      	mov	r0, r5
 80149d8:	4621      	mov	r1, r4
 80149da:	f7ff ff59 	bl	8014890 <__sflush_r>
 80149de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80149e0:	07da      	lsls	r2, r3, #31
 80149e2:	4605      	mov	r5, r0
 80149e4:	d4e0      	bmi.n	80149a8 <_fflush_r+0xc>
 80149e6:	89a3      	ldrh	r3, [r4, #12]
 80149e8:	059b      	lsls	r3, r3, #22
 80149ea:	d4dd      	bmi.n	80149a8 <_fflush_r+0xc>
 80149ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149ee:	f000 f93f 	bl	8014c70 <__retarget_lock_release_recursive>
 80149f2:	e7d9      	b.n	80149a8 <_fflush_r+0xc>
 80149f4:	4b05      	ldr	r3, [pc, #20]	; (8014a0c <_fflush_r+0x70>)
 80149f6:	429c      	cmp	r4, r3
 80149f8:	d101      	bne.n	80149fe <_fflush_r+0x62>
 80149fa:	68ac      	ldr	r4, [r5, #8]
 80149fc:	e7df      	b.n	80149be <_fflush_r+0x22>
 80149fe:	4b04      	ldr	r3, [pc, #16]	; (8014a10 <_fflush_r+0x74>)
 8014a00:	429c      	cmp	r4, r3
 8014a02:	bf08      	it	eq
 8014a04:	68ec      	ldreq	r4, [r5, #12]
 8014a06:	e7da      	b.n	80149be <_fflush_r+0x22>
 8014a08:	08019910 	.word	0x08019910
 8014a0c:	08019930 	.word	0x08019930
 8014a10:	080198f0 	.word	0x080198f0

08014a14 <fflush>:
 8014a14:	4601      	mov	r1, r0
 8014a16:	b920      	cbnz	r0, 8014a22 <fflush+0xe>
 8014a18:	4b04      	ldr	r3, [pc, #16]	; (8014a2c <fflush+0x18>)
 8014a1a:	4905      	ldr	r1, [pc, #20]	; (8014a30 <fflush+0x1c>)
 8014a1c:	6818      	ldr	r0, [r3, #0]
 8014a1e:	f000 b8e1 	b.w	8014be4 <_fwalk_reent>
 8014a22:	4b04      	ldr	r3, [pc, #16]	; (8014a34 <fflush+0x20>)
 8014a24:	6818      	ldr	r0, [r3, #0]
 8014a26:	f7ff bfb9 	b.w	801499c <_fflush_r>
 8014a2a:	bf00      	nop
 8014a2c:	08019950 	.word	0x08019950
 8014a30:	0801499d 	.word	0x0801499d
 8014a34:	20000030 	.word	0x20000030

08014a38 <std>:
 8014a38:	2300      	movs	r3, #0
 8014a3a:	b510      	push	{r4, lr}
 8014a3c:	4604      	mov	r4, r0
 8014a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8014a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014a46:	6083      	str	r3, [r0, #8]
 8014a48:	8181      	strh	r1, [r0, #12]
 8014a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8014a4c:	81c2      	strh	r2, [r0, #14]
 8014a4e:	6183      	str	r3, [r0, #24]
 8014a50:	4619      	mov	r1, r3
 8014a52:	2208      	movs	r2, #8
 8014a54:	305c      	adds	r0, #92	; 0x5c
 8014a56:	f000 f944 	bl	8014ce2 <memset>
 8014a5a:	4b05      	ldr	r3, [pc, #20]	; (8014a70 <std+0x38>)
 8014a5c:	6263      	str	r3, [r4, #36]	; 0x24
 8014a5e:	4b05      	ldr	r3, [pc, #20]	; (8014a74 <std+0x3c>)
 8014a60:	62a3      	str	r3, [r4, #40]	; 0x28
 8014a62:	4b05      	ldr	r3, [pc, #20]	; (8014a78 <std+0x40>)
 8014a64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014a66:	4b05      	ldr	r3, [pc, #20]	; (8014a7c <std+0x44>)
 8014a68:	6224      	str	r4, [r4, #32]
 8014a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8014a6c:	bd10      	pop	{r4, pc}
 8014a6e:	bf00      	nop
 8014a70:	08015235 	.word	0x08015235
 8014a74:	0801525b 	.word	0x0801525b
 8014a78:	08015293 	.word	0x08015293
 8014a7c:	080152b7 	.word	0x080152b7

08014a80 <_cleanup_r>:
 8014a80:	4901      	ldr	r1, [pc, #4]	; (8014a88 <_cleanup_r+0x8>)
 8014a82:	f000 b8af 	b.w	8014be4 <_fwalk_reent>
 8014a86:	bf00      	nop
 8014a88:	0801499d 	.word	0x0801499d

08014a8c <__sfmoreglue>:
 8014a8c:	b570      	push	{r4, r5, r6, lr}
 8014a8e:	2268      	movs	r2, #104	; 0x68
 8014a90:	1e4d      	subs	r5, r1, #1
 8014a92:	4355      	muls	r5, r2
 8014a94:	460e      	mov	r6, r1
 8014a96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014a9a:	f000 f997 	bl	8014dcc <_malloc_r>
 8014a9e:	4604      	mov	r4, r0
 8014aa0:	b140      	cbz	r0, 8014ab4 <__sfmoreglue+0x28>
 8014aa2:	2100      	movs	r1, #0
 8014aa4:	e9c0 1600 	strd	r1, r6, [r0]
 8014aa8:	300c      	adds	r0, #12
 8014aaa:	60a0      	str	r0, [r4, #8]
 8014aac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014ab0:	f000 f917 	bl	8014ce2 <memset>
 8014ab4:	4620      	mov	r0, r4
 8014ab6:	bd70      	pop	{r4, r5, r6, pc}

08014ab8 <__sfp_lock_acquire>:
 8014ab8:	4801      	ldr	r0, [pc, #4]	; (8014ac0 <__sfp_lock_acquire+0x8>)
 8014aba:	f000 b8d8 	b.w	8014c6e <__retarget_lock_acquire_recursive>
 8014abe:	bf00      	nop
 8014ac0:	20017c29 	.word	0x20017c29

08014ac4 <__sfp_lock_release>:
 8014ac4:	4801      	ldr	r0, [pc, #4]	; (8014acc <__sfp_lock_release+0x8>)
 8014ac6:	f000 b8d3 	b.w	8014c70 <__retarget_lock_release_recursive>
 8014aca:	bf00      	nop
 8014acc:	20017c29 	.word	0x20017c29

08014ad0 <__sinit_lock_acquire>:
 8014ad0:	4801      	ldr	r0, [pc, #4]	; (8014ad8 <__sinit_lock_acquire+0x8>)
 8014ad2:	f000 b8cc 	b.w	8014c6e <__retarget_lock_acquire_recursive>
 8014ad6:	bf00      	nop
 8014ad8:	20017c2a 	.word	0x20017c2a

08014adc <__sinit_lock_release>:
 8014adc:	4801      	ldr	r0, [pc, #4]	; (8014ae4 <__sinit_lock_release+0x8>)
 8014ade:	f000 b8c7 	b.w	8014c70 <__retarget_lock_release_recursive>
 8014ae2:	bf00      	nop
 8014ae4:	20017c2a 	.word	0x20017c2a

08014ae8 <__sinit>:
 8014ae8:	b510      	push	{r4, lr}
 8014aea:	4604      	mov	r4, r0
 8014aec:	f7ff fff0 	bl	8014ad0 <__sinit_lock_acquire>
 8014af0:	69a3      	ldr	r3, [r4, #24]
 8014af2:	b11b      	cbz	r3, 8014afc <__sinit+0x14>
 8014af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014af8:	f7ff bff0 	b.w	8014adc <__sinit_lock_release>
 8014afc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014b00:	6523      	str	r3, [r4, #80]	; 0x50
 8014b02:	4b13      	ldr	r3, [pc, #76]	; (8014b50 <__sinit+0x68>)
 8014b04:	4a13      	ldr	r2, [pc, #76]	; (8014b54 <__sinit+0x6c>)
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	62a2      	str	r2, [r4, #40]	; 0x28
 8014b0a:	42a3      	cmp	r3, r4
 8014b0c:	bf04      	itt	eq
 8014b0e:	2301      	moveq	r3, #1
 8014b10:	61a3      	streq	r3, [r4, #24]
 8014b12:	4620      	mov	r0, r4
 8014b14:	f000 f820 	bl	8014b58 <__sfp>
 8014b18:	6060      	str	r0, [r4, #4]
 8014b1a:	4620      	mov	r0, r4
 8014b1c:	f000 f81c 	bl	8014b58 <__sfp>
 8014b20:	60a0      	str	r0, [r4, #8]
 8014b22:	4620      	mov	r0, r4
 8014b24:	f000 f818 	bl	8014b58 <__sfp>
 8014b28:	2200      	movs	r2, #0
 8014b2a:	60e0      	str	r0, [r4, #12]
 8014b2c:	2104      	movs	r1, #4
 8014b2e:	6860      	ldr	r0, [r4, #4]
 8014b30:	f7ff ff82 	bl	8014a38 <std>
 8014b34:	68a0      	ldr	r0, [r4, #8]
 8014b36:	2201      	movs	r2, #1
 8014b38:	2109      	movs	r1, #9
 8014b3a:	f7ff ff7d 	bl	8014a38 <std>
 8014b3e:	68e0      	ldr	r0, [r4, #12]
 8014b40:	2202      	movs	r2, #2
 8014b42:	2112      	movs	r1, #18
 8014b44:	f7ff ff78 	bl	8014a38 <std>
 8014b48:	2301      	movs	r3, #1
 8014b4a:	61a3      	str	r3, [r4, #24]
 8014b4c:	e7d2      	b.n	8014af4 <__sinit+0xc>
 8014b4e:	bf00      	nop
 8014b50:	08019950 	.word	0x08019950
 8014b54:	08014a81 	.word	0x08014a81

08014b58 <__sfp>:
 8014b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b5a:	4607      	mov	r7, r0
 8014b5c:	f7ff ffac 	bl	8014ab8 <__sfp_lock_acquire>
 8014b60:	4b1e      	ldr	r3, [pc, #120]	; (8014bdc <__sfp+0x84>)
 8014b62:	681e      	ldr	r6, [r3, #0]
 8014b64:	69b3      	ldr	r3, [r6, #24]
 8014b66:	b913      	cbnz	r3, 8014b6e <__sfp+0x16>
 8014b68:	4630      	mov	r0, r6
 8014b6a:	f7ff ffbd 	bl	8014ae8 <__sinit>
 8014b6e:	3648      	adds	r6, #72	; 0x48
 8014b70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014b74:	3b01      	subs	r3, #1
 8014b76:	d503      	bpl.n	8014b80 <__sfp+0x28>
 8014b78:	6833      	ldr	r3, [r6, #0]
 8014b7a:	b30b      	cbz	r3, 8014bc0 <__sfp+0x68>
 8014b7c:	6836      	ldr	r6, [r6, #0]
 8014b7e:	e7f7      	b.n	8014b70 <__sfp+0x18>
 8014b80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014b84:	b9d5      	cbnz	r5, 8014bbc <__sfp+0x64>
 8014b86:	4b16      	ldr	r3, [pc, #88]	; (8014be0 <__sfp+0x88>)
 8014b88:	60e3      	str	r3, [r4, #12]
 8014b8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014b8e:	6665      	str	r5, [r4, #100]	; 0x64
 8014b90:	f000 f86c 	bl	8014c6c <__retarget_lock_init_recursive>
 8014b94:	f7ff ff96 	bl	8014ac4 <__sfp_lock_release>
 8014b98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014b9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014ba0:	6025      	str	r5, [r4, #0]
 8014ba2:	61a5      	str	r5, [r4, #24]
 8014ba4:	2208      	movs	r2, #8
 8014ba6:	4629      	mov	r1, r5
 8014ba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014bac:	f000 f899 	bl	8014ce2 <memset>
 8014bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014bb8:	4620      	mov	r0, r4
 8014bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bbc:	3468      	adds	r4, #104	; 0x68
 8014bbe:	e7d9      	b.n	8014b74 <__sfp+0x1c>
 8014bc0:	2104      	movs	r1, #4
 8014bc2:	4638      	mov	r0, r7
 8014bc4:	f7ff ff62 	bl	8014a8c <__sfmoreglue>
 8014bc8:	4604      	mov	r4, r0
 8014bca:	6030      	str	r0, [r6, #0]
 8014bcc:	2800      	cmp	r0, #0
 8014bce:	d1d5      	bne.n	8014b7c <__sfp+0x24>
 8014bd0:	f7ff ff78 	bl	8014ac4 <__sfp_lock_release>
 8014bd4:	230c      	movs	r3, #12
 8014bd6:	603b      	str	r3, [r7, #0]
 8014bd8:	e7ee      	b.n	8014bb8 <__sfp+0x60>
 8014bda:	bf00      	nop
 8014bdc:	08019950 	.word	0x08019950
 8014be0:	ffff0001 	.word	0xffff0001

08014be4 <_fwalk_reent>:
 8014be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014be8:	4606      	mov	r6, r0
 8014bea:	4688      	mov	r8, r1
 8014bec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014bf0:	2700      	movs	r7, #0
 8014bf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014bf6:	f1b9 0901 	subs.w	r9, r9, #1
 8014bfa:	d505      	bpl.n	8014c08 <_fwalk_reent+0x24>
 8014bfc:	6824      	ldr	r4, [r4, #0]
 8014bfe:	2c00      	cmp	r4, #0
 8014c00:	d1f7      	bne.n	8014bf2 <_fwalk_reent+0xe>
 8014c02:	4638      	mov	r0, r7
 8014c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c08:	89ab      	ldrh	r3, [r5, #12]
 8014c0a:	2b01      	cmp	r3, #1
 8014c0c:	d907      	bls.n	8014c1e <_fwalk_reent+0x3a>
 8014c0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014c12:	3301      	adds	r3, #1
 8014c14:	d003      	beq.n	8014c1e <_fwalk_reent+0x3a>
 8014c16:	4629      	mov	r1, r5
 8014c18:	4630      	mov	r0, r6
 8014c1a:	47c0      	blx	r8
 8014c1c:	4307      	orrs	r7, r0
 8014c1e:	3568      	adds	r5, #104	; 0x68
 8014c20:	e7e9      	b.n	8014bf6 <_fwalk_reent+0x12>
	...

08014c24 <__libc_init_array>:
 8014c24:	b570      	push	{r4, r5, r6, lr}
 8014c26:	4d0d      	ldr	r5, [pc, #52]	; (8014c5c <__libc_init_array+0x38>)
 8014c28:	4c0d      	ldr	r4, [pc, #52]	; (8014c60 <__libc_init_array+0x3c>)
 8014c2a:	1b64      	subs	r4, r4, r5
 8014c2c:	10a4      	asrs	r4, r4, #2
 8014c2e:	2600      	movs	r6, #0
 8014c30:	42a6      	cmp	r6, r4
 8014c32:	d109      	bne.n	8014c48 <__libc_init_array+0x24>
 8014c34:	4d0b      	ldr	r5, [pc, #44]	; (8014c64 <__libc_init_array+0x40>)
 8014c36:	4c0c      	ldr	r4, [pc, #48]	; (8014c68 <__libc_init_array+0x44>)
 8014c38:	f001 febc 	bl	80169b4 <_init>
 8014c3c:	1b64      	subs	r4, r4, r5
 8014c3e:	10a4      	asrs	r4, r4, #2
 8014c40:	2600      	movs	r6, #0
 8014c42:	42a6      	cmp	r6, r4
 8014c44:	d105      	bne.n	8014c52 <__libc_init_array+0x2e>
 8014c46:	bd70      	pop	{r4, r5, r6, pc}
 8014c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c4c:	4798      	blx	r3
 8014c4e:	3601      	adds	r6, #1
 8014c50:	e7ee      	b.n	8014c30 <__libc_init_array+0xc>
 8014c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c56:	4798      	blx	r3
 8014c58:	3601      	adds	r6, #1
 8014c5a:	e7f2      	b.n	8014c42 <__libc_init_array+0x1e>
 8014c5c:	08019a58 	.word	0x08019a58
 8014c60:	08019a58 	.word	0x08019a58
 8014c64:	08019a58 	.word	0x08019a58
 8014c68:	08019a5c 	.word	0x08019a5c

08014c6c <__retarget_lock_init_recursive>:
 8014c6c:	4770      	bx	lr

08014c6e <__retarget_lock_acquire_recursive>:
 8014c6e:	4770      	bx	lr

08014c70 <__retarget_lock_release_recursive>:
 8014c70:	4770      	bx	lr

08014c72 <memcmp>:
 8014c72:	b510      	push	{r4, lr}
 8014c74:	3901      	subs	r1, #1
 8014c76:	4402      	add	r2, r0
 8014c78:	4290      	cmp	r0, r2
 8014c7a:	d101      	bne.n	8014c80 <memcmp+0xe>
 8014c7c:	2000      	movs	r0, #0
 8014c7e:	e005      	b.n	8014c8c <memcmp+0x1a>
 8014c80:	7803      	ldrb	r3, [r0, #0]
 8014c82:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014c86:	42a3      	cmp	r3, r4
 8014c88:	d001      	beq.n	8014c8e <memcmp+0x1c>
 8014c8a:	1b18      	subs	r0, r3, r4
 8014c8c:	bd10      	pop	{r4, pc}
 8014c8e:	3001      	adds	r0, #1
 8014c90:	e7f2      	b.n	8014c78 <memcmp+0x6>

08014c92 <memcpy>:
 8014c92:	440a      	add	r2, r1
 8014c94:	4291      	cmp	r1, r2
 8014c96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014c9a:	d100      	bne.n	8014c9e <memcpy+0xc>
 8014c9c:	4770      	bx	lr
 8014c9e:	b510      	push	{r4, lr}
 8014ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014ca8:	4291      	cmp	r1, r2
 8014caa:	d1f9      	bne.n	8014ca0 <memcpy+0xe>
 8014cac:	bd10      	pop	{r4, pc}

08014cae <memmove>:
 8014cae:	4288      	cmp	r0, r1
 8014cb0:	b510      	push	{r4, lr}
 8014cb2:	eb01 0402 	add.w	r4, r1, r2
 8014cb6:	d902      	bls.n	8014cbe <memmove+0x10>
 8014cb8:	4284      	cmp	r4, r0
 8014cba:	4623      	mov	r3, r4
 8014cbc:	d807      	bhi.n	8014cce <memmove+0x20>
 8014cbe:	1e43      	subs	r3, r0, #1
 8014cc0:	42a1      	cmp	r1, r4
 8014cc2:	d008      	beq.n	8014cd6 <memmove+0x28>
 8014cc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014cc8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014ccc:	e7f8      	b.n	8014cc0 <memmove+0x12>
 8014cce:	4402      	add	r2, r0
 8014cd0:	4601      	mov	r1, r0
 8014cd2:	428a      	cmp	r2, r1
 8014cd4:	d100      	bne.n	8014cd8 <memmove+0x2a>
 8014cd6:	bd10      	pop	{r4, pc}
 8014cd8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014cdc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ce0:	e7f7      	b.n	8014cd2 <memmove+0x24>

08014ce2 <memset>:
 8014ce2:	4402      	add	r2, r0
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	4293      	cmp	r3, r2
 8014ce8:	d100      	bne.n	8014cec <memset+0xa>
 8014cea:	4770      	bx	lr
 8014cec:	f803 1b01 	strb.w	r1, [r3], #1
 8014cf0:	e7f9      	b.n	8014ce6 <memset+0x4>
	...

08014cf4 <_free_r>:
 8014cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014cf6:	2900      	cmp	r1, #0
 8014cf8:	d044      	beq.n	8014d84 <_free_r+0x90>
 8014cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014cfe:	9001      	str	r0, [sp, #4]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	f1a1 0404 	sub.w	r4, r1, #4
 8014d06:	bfb8      	it	lt
 8014d08:	18e4      	addlt	r4, r4, r3
 8014d0a:	f000 fd33 	bl	8015774 <__malloc_lock>
 8014d0e:	4a1e      	ldr	r2, [pc, #120]	; (8014d88 <_free_r+0x94>)
 8014d10:	9801      	ldr	r0, [sp, #4]
 8014d12:	6813      	ldr	r3, [r2, #0]
 8014d14:	b933      	cbnz	r3, 8014d24 <_free_r+0x30>
 8014d16:	6063      	str	r3, [r4, #4]
 8014d18:	6014      	str	r4, [r2, #0]
 8014d1a:	b003      	add	sp, #12
 8014d1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d20:	f000 bd2e 	b.w	8015780 <__malloc_unlock>
 8014d24:	42a3      	cmp	r3, r4
 8014d26:	d908      	bls.n	8014d3a <_free_r+0x46>
 8014d28:	6825      	ldr	r5, [r4, #0]
 8014d2a:	1961      	adds	r1, r4, r5
 8014d2c:	428b      	cmp	r3, r1
 8014d2e:	bf01      	itttt	eq
 8014d30:	6819      	ldreq	r1, [r3, #0]
 8014d32:	685b      	ldreq	r3, [r3, #4]
 8014d34:	1949      	addeq	r1, r1, r5
 8014d36:	6021      	streq	r1, [r4, #0]
 8014d38:	e7ed      	b.n	8014d16 <_free_r+0x22>
 8014d3a:	461a      	mov	r2, r3
 8014d3c:	685b      	ldr	r3, [r3, #4]
 8014d3e:	b10b      	cbz	r3, 8014d44 <_free_r+0x50>
 8014d40:	42a3      	cmp	r3, r4
 8014d42:	d9fa      	bls.n	8014d3a <_free_r+0x46>
 8014d44:	6811      	ldr	r1, [r2, #0]
 8014d46:	1855      	adds	r5, r2, r1
 8014d48:	42a5      	cmp	r5, r4
 8014d4a:	d10b      	bne.n	8014d64 <_free_r+0x70>
 8014d4c:	6824      	ldr	r4, [r4, #0]
 8014d4e:	4421      	add	r1, r4
 8014d50:	1854      	adds	r4, r2, r1
 8014d52:	42a3      	cmp	r3, r4
 8014d54:	6011      	str	r1, [r2, #0]
 8014d56:	d1e0      	bne.n	8014d1a <_free_r+0x26>
 8014d58:	681c      	ldr	r4, [r3, #0]
 8014d5a:	685b      	ldr	r3, [r3, #4]
 8014d5c:	6053      	str	r3, [r2, #4]
 8014d5e:	4421      	add	r1, r4
 8014d60:	6011      	str	r1, [r2, #0]
 8014d62:	e7da      	b.n	8014d1a <_free_r+0x26>
 8014d64:	d902      	bls.n	8014d6c <_free_r+0x78>
 8014d66:	230c      	movs	r3, #12
 8014d68:	6003      	str	r3, [r0, #0]
 8014d6a:	e7d6      	b.n	8014d1a <_free_r+0x26>
 8014d6c:	6825      	ldr	r5, [r4, #0]
 8014d6e:	1961      	adds	r1, r4, r5
 8014d70:	428b      	cmp	r3, r1
 8014d72:	bf04      	itt	eq
 8014d74:	6819      	ldreq	r1, [r3, #0]
 8014d76:	685b      	ldreq	r3, [r3, #4]
 8014d78:	6063      	str	r3, [r4, #4]
 8014d7a:	bf04      	itt	eq
 8014d7c:	1949      	addeq	r1, r1, r5
 8014d7e:	6021      	streq	r1, [r4, #0]
 8014d80:	6054      	str	r4, [r2, #4]
 8014d82:	e7ca      	b.n	8014d1a <_free_r+0x26>
 8014d84:	b003      	add	sp, #12
 8014d86:	bd30      	pop	{r4, r5, pc}
 8014d88:	20017c2c 	.word	0x20017c2c

08014d8c <sbrk_aligned>:
 8014d8c:	b570      	push	{r4, r5, r6, lr}
 8014d8e:	4e0e      	ldr	r6, [pc, #56]	; (8014dc8 <sbrk_aligned+0x3c>)
 8014d90:	460c      	mov	r4, r1
 8014d92:	6831      	ldr	r1, [r6, #0]
 8014d94:	4605      	mov	r5, r0
 8014d96:	b911      	cbnz	r1, 8014d9e <sbrk_aligned+0x12>
 8014d98:	f000 f9f0 	bl	801517c <_sbrk_r>
 8014d9c:	6030      	str	r0, [r6, #0]
 8014d9e:	4621      	mov	r1, r4
 8014da0:	4628      	mov	r0, r5
 8014da2:	f000 f9eb 	bl	801517c <_sbrk_r>
 8014da6:	1c43      	adds	r3, r0, #1
 8014da8:	d00a      	beq.n	8014dc0 <sbrk_aligned+0x34>
 8014daa:	1cc4      	adds	r4, r0, #3
 8014dac:	f024 0403 	bic.w	r4, r4, #3
 8014db0:	42a0      	cmp	r0, r4
 8014db2:	d007      	beq.n	8014dc4 <sbrk_aligned+0x38>
 8014db4:	1a21      	subs	r1, r4, r0
 8014db6:	4628      	mov	r0, r5
 8014db8:	f000 f9e0 	bl	801517c <_sbrk_r>
 8014dbc:	3001      	adds	r0, #1
 8014dbe:	d101      	bne.n	8014dc4 <sbrk_aligned+0x38>
 8014dc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	bd70      	pop	{r4, r5, r6, pc}
 8014dc8:	20017c30 	.word	0x20017c30

08014dcc <_malloc_r>:
 8014dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dd0:	1ccd      	adds	r5, r1, #3
 8014dd2:	f025 0503 	bic.w	r5, r5, #3
 8014dd6:	3508      	adds	r5, #8
 8014dd8:	2d0c      	cmp	r5, #12
 8014dda:	bf38      	it	cc
 8014ddc:	250c      	movcc	r5, #12
 8014dde:	2d00      	cmp	r5, #0
 8014de0:	4607      	mov	r7, r0
 8014de2:	db01      	blt.n	8014de8 <_malloc_r+0x1c>
 8014de4:	42a9      	cmp	r1, r5
 8014de6:	d905      	bls.n	8014df4 <_malloc_r+0x28>
 8014de8:	230c      	movs	r3, #12
 8014dea:	603b      	str	r3, [r7, #0]
 8014dec:	2600      	movs	r6, #0
 8014dee:	4630      	mov	r0, r6
 8014df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014df4:	4e2e      	ldr	r6, [pc, #184]	; (8014eb0 <_malloc_r+0xe4>)
 8014df6:	f000 fcbd 	bl	8015774 <__malloc_lock>
 8014dfa:	6833      	ldr	r3, [r6, #0]
 8014dfc:	461c      	mov	r4, r3
 8014dfe:	bb34      	cbnz	r4, 8014e4e <_malloc_r+0x82>
 8014e00:	4629      	mov	r1, r5
 8014e02:	4638      	mov	r0, r7
 8014e04:	f7ff ffc2 	bl	8014d8c <sbrk_aligned>
 8014e08:	1c43      	adds	r3, r0, #1
 8014e0a:	4604      	mov	r4, r0
 8014e0c:	d14d      	bne.n	8014eaa <_malloc_r+0xde>
 8014e0e:	6834      	ldr	r4, [r6, #0]
 8014e10:	4626      	mov	r6, r4
 8014e12:	2e00      	cmp	r6, #0
 8014e14:	d140      	bne.n	8014e98 <_malloc_r+0xcc>
 8014e16:	6823      	ldr	r3, [r4, #0]
 8014e18:	4631      	mov	r1, r6
 8014e1a:	4638      	mov	r0, r7
 8014e1c:	eb04 0803 	add.w	r8, r4, r3
 8014e20:	f000 f9ac 	bl	801517c <_sbrk_r>
 8014e24:	4580      	cmp	r8, r0
 8014e26:	d13a      	bne.n	8014e9e <_malloc_r+0xd2>
 8014e28:	6821      	ldr	r1, [r4, #0]
 8014e2a:	3503      	adds	r5, #3
 8014e2c:	1a6d      	subs	r5, r5, r1
 8014e2e:	f025 0503 	bic.w	r5, r5, #3
 8014e32:	3508      	adds	r5, #8
 8014e34:	2d0c      	cmp	r5, #12
 8014e36:	bf38      	it	cc
 8014e38:	250c      	movcc	r5, #12
 8014e3a:	4629      	mov	r1, r5
 8014e3c:	4638      	mov	r0, r7
 8014e3e:	f7ff ffa5 	bl	8014d8c <sbrk_aligned>
 8014e42:	3001      	adds	r0, #1
 8014e44:	d02b      	beq.n	8014e9e <_malloc_r+0xd2>
 8014e46:	6823      	ldr	r3, [r4, #0]
 8014e48:	442b      	add	r3, r5
 8014e4a:	6023      	str	r3, [r4, #0]
 8014e4c:	e00e      	b.n	8014e6c <_malloc_r+0xa0>
 8014e4e:	6822      	ldr	r2, [r4, #0]
 8014e50:	1b52      	subs	r2, r2, r5
 8014e52:	d41e      	bmi.n	8014e92 <_malloc_r+0xc6>
 8014e54:	2a0b      	cmp	r2, #11
 8014e56:	d916      	bls.n	8014e86 <_malloc_r+0xba>
 8014e58:	1961      	adds	r1, r4, r5
 8014e5a:	42a3      	cmp	r3, r4
 8014e5c:	6025      	str	r5, [r4, #0]
 8014e5e:	bf18      	it	ne
 8014e60:	6059      	strne	r1, [r3, #4]
 8014e62:	6863      	ldr	r3, [r4, #4]
 8014e64:	bf08      	it	eq
 8014e66:	6031      	streq	r1, [r6, #0]
 8014e68:	5162      	str	r2, [r4, r5]
 8014e6a:	604b      	str	r3, [r1, #4]
 8014e6c:	4638      	mov	r0, r7
 8014e6e:	f104 060b 	add.w	r6, r4, #11
 8014e72:	f000 fc85 	bl	8015780 <__malloc_unlock>
 8014e76:	f026 0607 	bic.w	r6, r6, #7
 8014e7a:	1d23      	adds	r3, r4, #4
 8014e7c:	1af2      	subs	r2, r6, r3
 8014e7e:	d0b6      	beq.n	8014dee <_malloc_r+0x22>
 8014e80:	1b9b      	subs	r3, r3, r6
 8014e82:	50a3      	str	r3, [r4, r2]
 8014e84:	e7b3      	b.n	8014dee <_malloc_r+0x22>
 8014e86:	6862      	ldr	r2, [r4, #4]
 8014e88:	42a3      	cmp	r3, r4
 8014e8a:	bf0c      	ite	eq
 8014e8c:	6032      	streq	r2, [r6, #0]
 8014e8e:	605a      	strne	r2, [r3, #4]
 8014e90:	e7ec      	b.n	8014e6c <_malloc_r+0xa0>
 8014e92:	4623      	mov	r3, r4
 8014e94:	6864      	ldr	r4, [r4, #4]
 8014e96:	e7b2      	b.n	8014dfe <_malloc_r+0x32>
 8014e98:	4634      	mov	r4, r6
 8014e9a:	6876      	ldr	r6, [r6, #4]
 8014e9c:	e7b9      	b.n	8014e12 <_malloc_r+0x46>
 8014e9e:	230c      	movs	r3, #12
 8014ea0:	603b      	str	r3, [r7, #0]
 8014ea2:	4638      	mov	r0, r7
 8014ea4:	f000 fc6c 	bl	8015780 <__malloc_unlock>
 8014ea8:	e7a1      	b.n	8014dee <_malloc_r+0x22>
 8014eaa:	6025      	str	r5, [r4, #0]
 8014eac:	e7de      	b.n	8014e6c <_malloc_r+0xa0>
 8014eae:	bf00      	nop
 8014eb0:	20017c2c 	.word	0x20017c2c

08014eb4 <iprintf>:
 8014eb4:	b40f      	push	{r0, r1, r2, r3}
 8014eb6:	4b0a      	ldr	r3, [pc, #40]	; (8014ee0 <iprintf+0x2c>)
 8014eb8:	b513      	push	{r0, r1, r4, lr}
 8014eba:	681c      	ldr	r4, [r3, #0]
 8014ebc:	b124      	cbz	r4, 8014ec8 <iprintf+0x14>
 8014ebe:	69a3      	ldr	r3, [r4, #24]
 8014ec0:	b913      	cbnz	r3, 8014ec8 <iprintf+0x14>
 8014ec2:	4620      	mov	r0, r4
 8014ec4:	f7ff fe10 	bl	8014ae8 <__sinit>
 8014ec8:	ab05      	add	r3, sp, #20
 8014eca:	9a04      	ldr	r2, [sp, #16]
 8014ecc:	68a1      	ldr	r1, [r4, #8]
 8014ece:	9301      	str	r3, [sp, #4]
 8014ed0:	4620      	mov	r0, r4
 8014ed2:	f000 ffb3 	bl	8015e3c <_vfiprintf_r>
 8014ed6:	b002      	add	sp, #8
 8014ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014edc:	b004      	add	sp, #16
 8014ede:	4770      	bx	lr
 8014ee0:	20000030 	.word	0x20000030

08014ee4 <_puts_r>:
 8014ee4:	b570      	push	{r4, r5, r6, lr}
 8014ee6:	460e      	mov	r6, r1
 8014ee8:	4605      	mov	r5, r0
 8014eea:	b118      	cbz	r0, 8014ef4 <_puts_r+0x10>
 8014eec:	6983      	ldr	r3, [r0, #24]
 8014eee:	b90b      	cbnz	r3, 8014ef4 <_puts_r+0x10>
 8014ef0:	f7ff fdfa 	bl	8014ae8 <__sinit>
 8014ef4:	69ab      	ldr	r3, [r5, #24]
 8014ef6:	68ac      	ldr	r4, [r5, #8]
 8014ef8:	b913      	cbnz	r3, 8014f00 <_puts_r+0x1c>
 8014efa:	4628      	mov	r0, r5
 8014efc:	f7ff fdf4 	bl	8014ae8 <__sinit>
 8014f00:	4b2c      	ldr	r3, [pc, #176]	; (8014fb4 <_puts_r+0xd0>)
 8014f02:	429c      	cmp	r4, r3
 8014f04:	d120      	bne.n	8014f48 <_puts_r+0x64>
 8014f06:	686c      	ldr	r4, [r5, #4]
 8014f08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014f0a:	07db      	lsls	r3, r3, #31
 8014f0c:	d405      	bmi.n	8014f1a <_puts_r+0x36>
 8014f0e:	89a3      	ldrh	r3, [r4, #12]
 8014f10:	0598      	lsls	r0, r3, #22
 8014f12:	d402      	bmi.n	8014f1a <_puts_r+0x36>
 8014f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f16:	f7ff feaa 	bl	8014c6e <__retarget_lock_acquire_recursive>
 8014f1a:	89a3      	ldrh	r3, [r4, #12]
 8014f1c:	0719      	lsls	r1, r3, #28
 8014f1e:	d51d      	bpl.n	8014f5c <_puts_r+0x78>
 8014f20:	6923      	ldr	r3, [r4, #16]
 8014f22:	b1db      	cbz	r3, 8014f5c <_puts_r+0x78>
 8014f24:	3e01      	subs	r6, #1
 8014f26:	68a3      	ldr	r3, [r4, #8]
 8014f28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014f2c:	3b01      	subs	r3, #1
 8014f2e:	60a3      	str	r3, [r4, #8]
 8014f30:	bb39      	cbnz	r1, 8014f82 <_puts_r+0x9e>
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	da38      	bge.n	8014fa8 <_puts_r+0xc4>
 8014f36:	4622      	mov	r2, r4
 8014f38:	210a      	movs	r1, #10
 8014f3a:	4628      	mov	r0, r5
 8014f3c:	f000 fa70 	bl	8015420 <__swbuf_r>
 8014f40:	3001      	adds	r0, #1
 8014f42:	d011      	beq.n	8014f68 <_puts_r+0x84>
 8014f44:	250a      	movs	r5, #10
 8014f46:	e011      	b.n	8014f6c <_puts_r+0x88>
 8014f48:	4b1b      	ldr	r3, [pc, #108]	; (8014fb8 <_puts_r+0xd4>)
 8014f4a:	429c      	cmp	r4, r3
 8014f4c:	d101      	bne.n	8014f52 <_puts_r+0x6e>
 8014f4e:	68ac      	ldr	r4, [r5, #8]
 8014f50:	e7da      	b.n	8014f08 <_puts_r+0x24>
 8014f52:	4b1a      	ldr	r3, [pc, #104]	; (8014fbc <_puts_r+0xd8>)
 8014f54:	429c      	cmp	r4, r3
 8014f56:	bf08      	it	eq
 8014f58:	68ec      	ldreq	r4, [r5, #12]
 8014f5a:	e7d5      	b.n	8014f08 <_puts_r+0x24>
 8014f5c:	4621      	mov	r1, r4
 8014f5e:	4628      	mov	r0, r5
 8014f60:	f000 fac2 	bl	80154e8 <__swsetup_r>
 8014f64:	2800      	cmp	r0, #0
 8014f66:	d0dd      	beq.n	8014f24 <_puts_r+0x40>
 8014f68:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014f6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014f6e:	07da      	lsls	r2, r3, #31
 8014f70:	d405      	bmi.n	8014f7e <_puts_r+0x9a>
 8014f72:	89a3      	ldrh	r3, [r4, #12]
 8014f74:	059b      	lsls	r3, r3, #22
 8014f76:	d402      	bmi.n	8014f7e <_puts_r+0x9a>
 8014f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f7a:	f7ff fe79 	bl	8014c70 <__retarget_lock_release_recursive>
 8014f7e:	4628      	mov	r0, r5
 8014f80:	bd70      	pop	{r4, r5, r6, pc}
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	da04      	bge.n	8014f90 <_puts_r+0xac>
 8014f86:	69a2      	ldr	r2, [r4, #24]
 8014f88:	429a      	cmp	r2, r3
 8014f8a:	dc06      	bgt.n	8014f9a <_puts_r+0xb6>
 8014f8c:	290a      	cmp	r1, #10
 8014f8e:	d004      	beq.n	8014f9a <_puts_r+0xb6>
 8014f90:	6823      	ldr	r3, [r4, #0]
 8014f92:	1c5a      	adds	r2, r3, #1
 8014f94:	6022      	str	r2, [r4, #0]
 8014f96:	7019      	strb	r1, [r3, #0]
 8014f98:	e7c5      	b.n	8014f26 <_puts_r+0x42>
 8014f9a:	4622      	mov	r2, r4
 8014f9c:	4628      	mov	r0, r5
 8014f9e:	f000 fa3f 	bl	8015420 <__swbuf_r>
 8014fa2:	3001      	adds	r0, #1
 8014fa4:	d1bf      	bne.n	8014f26 <_puts_r+0x42>
 8014fa6:	e7df      	b.n	8014f68 <_puts_r+0x84>
 8014fa8:	6823      	ldr	r3, [r4, #0]
 8014faa:	250a      	movs	r5, #10
 8014fac:	1c5a      	adds	r2, r3, #1
 8014fae:	6022      	str	r2, [r4, #0]
 8014fb0:	701d      	strb	r5, [r3, #0]
 8014fb2:	e7db      	b.n	8014f6c <_puts_r+0x88>
 8014fb4:	08019910 	.word	0x08019910
 8014fb8:	08019930 	.word	0x08019930
 8014fbc:	080198f0 	.word	0x080198f0

08014fc0 <puts>:
 8014fc0:	4b02      	ldr	r3, [pc, #8]	; (8014fcc <puts+0xc>)
 8014fc2:	4601      	mov	r1, r0
 8014fc4:	6818      	ldr	r0, [r3, #0]
 8014fc6:	f7ff bf8d 	b.w	8014ee4 <_puts_r>
 8014fca:	bf00      	nop
 8014fcc:	20000030 	.word	0x20000030

08014fd0 <srand>:
 8014fd0:	b538      	push	{r3, r4, r5, lr}
 8014fd2:	4b10      	ldr	r3, [pc, #64]	; (8015014 <srand+0x44>)
 8014fd4:	681d      	ldr	r5, [r3, #0]
 8014fd6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8014fd8:	4604      	mov	r4, r0
 8014fda:	b9b3      	cbnz	r3, 801500a <srand+0x3a>
 8014fdc:	2018      	movs	r0, #24
 8014fde:	f000 fbc1 	bl	8015764 <malloc>
 8014fe2:	4602      	mov	r2, r0
 8014fe4:	63a8      	str	r0, [r5, #56]	; 0x38
 8014fe6:	b920      	cbnz	r0, 8014ff2 <srand+0x22>
 8014fe8:	4b0b      	ldr	r3, [pc, #44]	; (8015018 <srand+0x48>)
 8014fea:	480c      	ldr	r0, [pc, #48]	; (801501c <srand+0x4c>)
 8014fec:	2142      	movs	r1, #66	; 0x42
 8014fee:	f000 fae9 	bl	80155c4 <__assert_func>
 8014ff2:	490b      	ldr	r1, [pc, #44]	; (8015020 <srand+0x50>)
 8014ff4:	4b0b      	ldr	r3, [pc, #44]	; (8015024 <srand+0x54>)
 8014ff6:	e9c0 1300 	strd	r1, r3, [r0]
 8014ffa:	4b0b      	ldr	r3, [pc, #44]	; (8015028 <srand+0x58>)
 8014ffc:	6083      	str	r3, [r0, #8]
 8014ffe:	230b      	movs	r3, #11
 8015000:	8183      	strh	r3, [r0, #12]
 8015002:	2100      	movs	r1, #0
 8015004:	2001      	movs	r0, #1
 8015006:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801500a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801500c:	2200      	movs	r2, #0
 801500e:	611c      	str	r4, [r3, #16]
 8015010:	615a      	str	r2, [r3, #20]
 8015012:	bd38      	pop	{r3, r4, r5, pc}
 8015014:	20000030 	.word	0x20000030
 8015018:	08019954 	.word	0x08019954
 801501c:	0801996b 	.word	0x0801996b
 8015020:	abcd330e 	.word	0xabcd330e
 8015024:	e66d1234 	.word	0xe66d1234
 8015028:	0005deec 	.word	0x0005deec

0801502c <rand>:
 801502c:	4b16      	ldr	r3, [pc, #88]	; (8015088 <rand+0x5c>)
 801502e:	b510      	push	{r4, lr}
 8015030:	681c      	ldr	r4, [r3, #0]
 8015032:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015034:	b9b3      	cbnz	r3, 8015064 <rand+0x38>
 8015036:	2018      	movs	r0, #24
 8015038:	f000 fb94 	bl	8015764 <malloc>
 801503c:	63a0      	str	r0, [r4, #56]	; 0x38
 801503e:	b928      	cbnz	r0, 801504c <rand+0x20>
 8015040:	4602      	mov	r2, r0
 8015042:	4b12      	ldr	r3, [pc, #72]	; (801508c <rand+0x60>)
 8015044:	4812      	ldr	r0, [pc, #72]	; (8015090 <rand+0x64>)
 8015046:	214e      	movs	r1, #78	; 0x4e
 8015048:	f000 fabc 	bl	80155c4 <__assert_func>
 801504c:	4a11      	ldr	r2, [pc, #68]	; (8015094 <rand+0x68>)
 801504e:	4b12      	ldr	r3, [pc, #72]	; (8015098 <rand+0x6c>)
 8015050:	e9c0 2300 	strd	r2, r3, [r0]
 8015054:	4b11      	ldr	r3, [pc, #68]	; (801509c <rand+0x70>)
 8015056:	6083      	str	r3, [r0, #8]
 8015058:	230b      	movs	r3, #11
 801505a:	8183      	strh	r3, [r0, #12]
 801505c:	2201      	movs	r2, #1
 801505e:	2300      	movs	r3, #0
 8015060:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015064:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8015066:	4a0e      	ldr	r2, [pc, #56]	; (80150a0 <rand+0x74>)
 8015068:	6920      	ldr	r0, [r4, #16]
 801506a:	6963      	ldr	r3, [r4, #20]
 801506c:	490d      	ldr	r1, [pc, #52]	; (80150a4 <rand+0x78>)
 801506e:	4342      	muls	r2, r0
 8015070:	fb01 2203 	mla	r2, r1, r3, r2
 8015074:	fba0 0101 	umull	r0, r1, r0, r1
 8015078:	1c43      	adds	r3, r0, #1
 801507a:	eb42 0001 	adc.w	r0, r2, r1
 801507e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8015082:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015086:	bd10      	pop	{r4, pc}
 8015088:	20000030 	.word	0x20000030
 801508c:	08019954 	.word	0x08019954
 8015090:	0801996b 	.word	0x0801996b
 8015094:	abcd330e 	.word	0xabcd330e
 8015098:	e66d1234 	.word	0xe66d1234
 801509c:	0005deec 	.word	0x0005deec
 80150a0:	5851f42d 	.word	0x5851f42d
 80150a4:	4c957f2d 	.word	0x4c957f2d

080150a8 <cleanup_glue>:
 80150a8:	b538      	push	{r3, r4, r5, lr}
 80150aa:	460c      	mov	r4, r1
 80150ac:	6809      	ldr	r1, [r1, #0]
 80150ae:	4605      	mov	r5, r0
 80150b0:	b109      	cbz	r1, 80150b6 <cleanup_glue+0xe>
 80150b2:	f7ff fff9 	bl	80150a8 <cleanup_glue>
 80150b6:	4621      	mov	r1, r4
 80150b8:	4628      	mov	r0, r5
 80150ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80150be:	f7ff be19 	b.w	8014cf4 <_free_r>
	...

080150c4 <_reclaim_reent>:
 80150c4:	4b2c      	ldr	r3, [pc, #176]	; (8015178 <_reclaim_reent+0xb4>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	4283      	cmp	r3, r0
 80150ca:	b570      	push	{r4, r5, r6, lr}
 80150cc:	4604      	mov	r4, r0
 80150ce:	d051      	beq.n	8015174 <_reclaim_reent+0xb0>
 80150d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80150d2:	b143      	cbz	r3, 80150e6 <_reclaim_reent+0x22>
 80150d4:	68db      	ldr	r3, [r3, #12]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d14a      	bne.n	8015170 <_reclaim_reent+0xac>
 80150da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150dc:	6819      	ldr	r1, [r3, #0]
 80150de:	b111      	cbz	r1, 80150e6 <_reclaim_reent+0x22>
 80150e0:	4620      	mov	r0, r4
 80150e2:	f7ff fe07 	bl	8014cf4 <_free_r>
 80150e6:	6961      	ldr	r1, [r4, #20]
 80150e8:	b111      	cbz	r1, 80150f0 <_reclaim_reent+0x2c>
 80150ea:	4620      	mov	r0, r4
 80150ec:	f7ff fe02 	bl	8014cf4 <_free_r>
 80150f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80150f2:	b111      	cbz	r1, 80150fa <_reclaim_reent+0x36>
 80150f4:	4620      	mov	r0, r4
 80150f6:	f7ff fdfd 	bl	8014cf4 <_free_r>
 80150fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80150fc:	b111      	cbz	r1, 8015104 <_reclaim_reent+0x40>
 80150fe:	4620      	mov	r0, r4
 8015100:	f7ff fdf8 	bl	8014cf4 <_free_r>
 8015104:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015106:	b111      	cbz	r1, 801510e <_reclaim_reent+0x4a>
 8015108:	4620      	mov	r0, r4
 801510a:	f7ff fdf3 	bl	8014cf4 <_free_r>
 801510e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015110:	b111      	cbz	r1, 8015118 <_reclaim_reent+0x54>
 8015112:	4620      	mov	r0, r4
 8015114:	f7ff fdee 	bl	8014cf4 <_free_r>
 8015118:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801511a:	b111      	cbz	r1, 8015122 <_reclaim_reent+0x5e>
 801511c:	4620      	mov	r0, r4
 801511e:	f7ff fde9 	bl	8014cf4 <_free_r>
 8015122:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015124:	b111      	cbz	r1, 801512c <_reclaim_reent+0x68>
 8015126:	4620      	mov	r0, r4
 8015128:	f7ff fde4 	bl	8014cf4 <_free_r>
 801512c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801512e:	b111      	cbz	r1, 8015136 <_reclaim_reent+0x72>
 8015130:	4620      	mov	r0, r4
 8015132:	f7ff fddf 	bl	8014cf4 <_free_r>
 8015136:	69a3      	ldr	r3, [r4, #24]
 8015138:	b1e3      	cbz	r3, 8015174 <_reclaim_reent+0xb0>
 801513a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801513c:	4620      	mov	r0, r4
 801513e:	4798      	blx	r3
 8015140:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015142:	b1b9      	cbz	r1, 8015174 <_reclaim_reent+0xb0>
 8015144:	4620      	mov	r0, r4
 8015146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801514a:	f7ff bfad 	b.w	80150a8 <cleanup_glue>
 801514e:	5949      	ldr	r1, [r1, r5]
 8015150:	b941      	cbnz	r1, 8015164 <_reclaim_reent+0xa0>
 8015152:	3504      	adds	r5, #4
 8015154:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015156:	2d80      	cmp	r5, #128	; 0x80
 8015158:	68d9      	ldr	r1, [r3, #12]
 801515a:	d1f8      	bne.n	801514e <_reclaim_reent+0x8a>
 801515c:	4620      	mov	r0, r4
 801515e:	f7ff fdc9 	bl	8014cf4 <_free_r>
 8015162:	e7ba      	b.n	80150da <_reclaim_reent+0x16>
 8015164:	680e      	ldr	r6, [r1, #0]
 8015166:	4620      	mov	r0, r4
 8015168:	f7ff fdc4 	bl	8014cf4 <_free_r>
 801516c:	4631      	mov	r1, r6
 801516e:	e7ef      	b.n	8015150 <_reclaim_reent+0x8c>
 8015170:	2500      	movs	r5, #0
 8015172:	e7ef      	b.n	8015154 <_reclaim_reent+0x90>
 8015174:	bd70      	pop	{r4, r5, r6, pc}
 8015176:	bf00      	nop
 8015178:	20000030 	.word	0x20000030

0801517c <_sbrk_r>:
 801517c:	b538      	push	{r3, r4, r5, lr}
 801517e:	4d06      	ldr	r5, [pc, #24]	; (8015198 <_sbrk_r+0x1c>)
 8015180:	2300      	movs	r3, #0
 8015182:	4604      	mov	r4, r0
 8015184:	4608      	mov	r0, r1
 8015186:	602b      	str	r3, [r5, #0]
 8015188:	f7eb fd3a 	bl	8000c00 <_sbrk>
 801518c:	1c43      	adds	r3, r0, #1
 801518e:	d102      	bne.n	8015196 <_sbrk_r+0x1a>
 8015190:	682b      	ldr	r3, [r5, #0]
 8015192:	b103      	cbz	r3, 8015196 <_sbrk_r+0x1a>
 8015194:	6023      	str	r3, [r4, #0]
 8015196:	bd38      	pop	{r3, r4, r5, pc}
 8015198:	20017c34 	.word	0x20017c34

0801519c <siprintf>:
 801519c:	b40e      	push	{r1, r2, r3}
 801519e:	b500      	push	{lr}
 80151a0:	b09c      	sub	sp, #112	; 0x70
 80151a2:	ab1d      	add	r3, sp, #116	; 0x74
 80151a4:	9002      	str	r0, [sp, #8]
 80151a6:	9006      	str	r0, [sp, #24]
 80151a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80151ac:	4809      	ldr	r0, [pc, #36]	; (80151d4 <siprintf+0x38>)
 80151ae:	9107      	str	r1, [sp, #28]
 80151b0:	9104      	str	r1, [sp, #16]
 80151b2:	4909      	ldr	r1, [pc, #36]	; (80151d8 <siprintf+0x3c>)
 80151b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80151b8:	9105      	str	r1, [sp, #20]
 80151ba:	6800      	ldr	r0, [r0, #0]
 80151bc:	9301      	str	r3, [sp, #4]
 80151be:	a902      	add	r1, sp, #8
 80151c0:	f000 fb40 	bl	8015844 <_svfiprintf_r>
 80151c4:	9b02      	ldr	r3, [sp, #8]
 80151c6:	2200      	movs	r2, #0
 80151c8:	701a      	strb	r2, [r3, #0]
 80151ca:	b01c      	add	sp, #112	; 0x70
 80151cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80151d0:	b003      	add	sp, #12
 80151d2:	4770      	bx	lr
 80151d4:	20000030 	.word	0x20000030
 80151d8:	ffff0208 	.word	0xffff0208

080151dc <siscanf>:
 80151dc:	b40e      	push	{r1, r2, r3}
 80151de:	b510      	push	{r4, lr}
 80151e0:	b09f      	sub	sp, #124	; 0x7c
 80151e2:	ac21      	add	r4, sp, #132	; 0x84
 80151e4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80151e8:	f854 2b04 	ldr.w	r2, [r4], #4
 80151ec:	9201      	str	r2, [sp, #4]
 80151ee:	f8ad 101c 	strh.w	r1, [sp, #28]
 80151f2:	9004      	str	r0, [sp, #16]
 80151f4:	9008      	str	r0, [sp, #32]
 80151f6:	f7eb f823 	bl	8000240 <strlen>
 80151fa:	4b0c      	ldr	r3, [pc, #48]	; (801522c <siscanf+0x50>)
 80151fc:	9005      	str	r0, [sp, #20]
 80151fe:	9009      	str	r0, [sp, #36]	; 0x24
 8015200:	930d      	str	r3, [sp, #52]	; 0x34
 8015202:	480b      	ldr	r0, [pc, #44]	; (8015230 <siscanf+0x54>)
 8015204:	9a01      	ldr	r2, [sp, #4]
 8015206:	6800      	ldr	r0, [r0, #0]
 8015208:	9403      	str	r4, [sp, #12]
 801520a:	2300      	movs	r3, #0
 801520c:	9311      	str	r3, [sp, #68]	; 0x44
 801520e:	9316      	str	r3, [sp, #88]	; 0x58
 8015210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015214:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015218:	a904      	add	r1, sp, #16
 801521a:	4623      	mov	r3, r4
 801521c:	f000 fc6c 	bl	8015af8 <__ssvfiscanf_r>
 8015220:	b01f      	add	sp, #124	; 0x7c
 8015222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015226:	b003      	add	sp, #12
 8015228:	4770      	bx	lr
 801522a:	bf00      	nop
 801522c:	08015257 	.word	0x08015257
 8015230:	20000030 	.word	0x20000030

08015234 <__sread>:
 8015234:	b510      	push	{r4, lr}
 8015236:	460c      	mov	r4, r1
 8015238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801523c:	f001 fa14 	bl	8016668 <_read_r>
 8015240:	2800      	cmp	r0, #0
 8015242:	bfab      	itete	ge
 8015244:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015246:	89a3      	ldrhlt	r3, [r4, #12]
 8015248:	181b      	addge	r3, r3, r0
 801524a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801524e:	bfac      	ite	ge
 8015250:	6563      	strge	r3, [r4, #84]	; 0x54
 8015252:	81a3      	strhlt	r3, [r4, #12]
 8015254:	bd10      	pop	{r4, pc}

08015256 <__seofread>:
 8015256:	2000      	movs	r0, #0
 8015258:	4770      	bx	lr

0801525a <__swrite>:
 801525a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801525e:	461f      	mov	r7, r3
 8015260:	898b      	ldrh	r3, [r1, #12]
 8015262:	05db      	lsls	r3, r3, #23
 8015264:	4605      	mov	r5, r0
 8015266:	460c      	mov	r4, r1
 8015268:	4616      	mov	r6, r2
 801526a:	d505      	bpl.n	8015278 <__swrite+0x1e>
 801526c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015270:	2302      	movs	r3, #2
 8015272:	2200      	movs	r2, #0
 8015274:	f000 f9fe 	bl	8015674 <_lseek_r>
 8015278:	89a3      	ldrh	r3, [r4, #12]
 801527a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801527e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015282:	81a3      	strh	r3, [r4, #12]
 8015284:	4632      	mov	r2, r6
 8015286:	463b      	mov	r3, r7
 8015288:	4628      	mov	r0, r5
 801528a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801528e:	f000 b919 	b.w	80154c4 <_write_r>

08015292 <__sseek>:
 8015292:	b510      	push	{r4, lr}
 8015294:	460c      	mov	r4, r1
 8015296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801529a:	f000 f9eb 	bl	8015674 <_lseek_r>
 801529e:	1c43      	adds	r3, r0, #1
 80152a0:	89a3      	ldrh	r3, [r4, #12]
 80152a2:	bf15      	itete	ne
 80152a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80152a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80152aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80152ae:	81a3      	strheq	r3, [r4, #12]
 80152b0:	bf18      	it	ne
 80152b2:	81a3      	strhne	r3, [r4, #12]
 80152b4:	bd10      	pop	{r4, pc}

080152b6 <__sclose>:
 80152b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152ba:	f000 b9a1 	b.w	8015600 <_close_r>

080152be <strncpy>:
 80152be:	b510      	push	{r4, lr}
 80152c0:	3901      	subs	r1, #1
 80152c2:	4603      	mov	r3, r0
 80152c4:	b132      	cbz	r2, 80152d4 <strncpy+0x16>
 80152c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80152ca:	f803 4b01 	strb.w	r4, [r3], #1
 80152ce:	3a01      	subs	r2, #1
 80152d0:	2c00      	cmp	r4, #0
 80152d2:	d1f7      	bne.n	80152c4 <strncpy+0x6>
 80152d4:	441a      	add	r2, r3
 80152d6:	2100      	movs	r1, #0
 80152d8:	4293      	cmp	r3, r2
 80152da:	d100      	bne.n	80152de <strncpy+0x20>
 80152dc:	bd10      	pop	{r4, pc}
 80152de:	f803 1b01 	strb.w	r1, [r3], #1
 80152e2:	e7f9      	b.n	80152d8 <strncpy+0x1a>

080152e4 <_strtol_l.constprop.0>:
 80152e4:	2b01      	cmp	r3, #1
 80152e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152ea:	d001      	beq.n	80152f0 <_strtol_l.constprop.0+0xc>
 80152ec:	2b24      	cmp	r3, #36	; 0x24
 80152ee:	d906      	bls.n	80152fe <_strtol_l.constprop.0+0x1a>
 80152f0:	f000 f996 	bl	8015620 <__errno>
 80152f4:	2316      	movs	r3, #22
 80152f6:	6003      	str	r3, [r0, #0]
 80152f8:	2000      	movs	r0, #0
 80152fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80153e4 <_strtol_l.constprop.0+0x100>
 8015302:	460d      	mov	r5, r1
 8015304:	462e      	mov	r6, r5
 8015306:	f815 4b01 	ldrb.w	r4, [r5], #1
 801530a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801530e:	f017 0708 	ands.w	r7, r7, #8
 8015312:	d1f7      	bne.n	8015304 <_strtol_l.constprop.0+0x20>
 8015314:	2c2d      	cmp	r4, #45	; 0x2d
 8015316:	d132      	bne.n	801537e <_strtol_l.constprop.0+0x9a>
 8015318:	782c      	ldrb	r4, [r5, #0]
 801531a:	2701      	movs	r7, #1
 801531c:	1cb5      	adds	r5, r6, #2
 801531e:	2b00      	cmp	r3, #0
 8015320:	d05b      	beq.n	80153da <_strtol_l.constprop.0+0xf6>
 8015322:	2b10      	cmp	r3, #16
 8015324:	d109      	bne.n	801533a <_strtol_l.constprop.0+0x56>
 8015326:	2c30      	cmp	r4, #48	; 0x30
 8015328:	d107      	bne.n	801533a <_strtol_l.constprop.0+0x56>
 801532a:	782c      	ldrb	r4, [r5, #0]
 801532c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015330:	2c58      	cmp	r4, #88	; 0x58
 8015332:	d14d      	bne.n	80153d0 <_strtol_l.constprop.0+0xec>
 8015334:	786c      	ldrb	r4, [r5, #1]
 8015336:	2310      	movs	r3, #16
 8015338:	3502      	adds	r5, #2
 801533a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801533e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8015342:	f04f 0c00 	mov.w	ip, #0
 8015346:	fbb8 f9f3 	udiv	r9, r8, r3
 801534a:	4666      	mov	r6, ip
 801534c:	fb03 8a19 	mls	sl, r3, r9, r8
 8015350:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8015354:	f1be 0f09 	cmp.w	lr, #9
 8015358:	d816      	bhi.n	8015388 <_strtol_l.constprop.0+0xa4>
 801535a:	4674      	mov	r4, lr
 801535c:	42a3      	cmp	r3, r4
 801535e:	dd24      	ble.n	80153aa <_strtol_l.constprop.0+0xc6>
 8015360:	f1bc 0f00 	cmp.w	ip, #0
 8015364:	db1e      	blt.n	80153a4 <_strtol_l.constprop.0+0xc0>
 8015366:	45b1      	cmp	r9, r6
 8015368:	d31c      	bcc.n	80153a4 <_strtol_l.constprop.0+0xc0>
 801536a:	d101      	bne.n	8015370 <_strtol_l.constprop.0+0x8c>
 801536c:	45a2      	cmp	sl, r4
 801536e:	db19      	blt.n	80153a4 <_strtol_l.constprop.0+0xc0>
 8015370:	fb06 4603 	mla	r6, r6, r3, r4
 8015374:	f04f 0c01 	mov.w	ip, #1
 8015378:	f815 4b01 	ldrb.w	r4, [r5], #1
 801537c:	e7e8      	b.n	8015350 <_strtol_l.constprop.0+0x6c>
 801537e:	2c2b      	cmp	r4, #43	; 0x2b
 8015380:	bf04      	itt	eq
 8015382:	782c      	ldrbeq	r4, [r5, #0]
 8015384:	1cb5      	addeq	r5, r6, #2
 8015386:	e7ca      	b.n	801531e <_strtol_l.constprop.0+0x3a>
 8015388:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801538c:	f1be 0f19 	cmp.w	lr, #25
 8015390:	d801      	bhi.n	8015396 <_strtol_l.constprop.0+0xb2>
 8015392:	3c37      	subs	r4, #55	; 0x37
 8015394:	e7e2      	b.n	801535c <_strtol_l.constprop.0+0x78>
 8015396:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801539a:	f1be 0f19 	cmp.w	lr, #25
 801539e:	d804      	bhi.n	80153aa <_strtol_l.constprop.0+0xc6>
 80153a0:	3c57      	subs	r4, #87	; 0x57
 80153a2:	e7db      	b.n	801535c <_strtol_l.constprop.0+0x78>
 80153a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80153a8:	e7e6      	b.n	8015378 <_strtol_l.constprop.0+0x94>
 80153aa:	f1bc 0f00 	cmp.w	ip, #0
 80153ae:	da05      	bge.n	80153bc <_strtol_l.constprop.0+0xd8>
 80153b0:	2322      	movs	r3, #34	; 0x22
 80153b2:	6003      	str	r3, [r0, #0]
 80153b4:	4646      	mov	r6, r8
 80153b6:	b942      	cbnz	r2, 80153ca <_strtol_l.constprop.0+0xe6>
 80153b8:	4630      	mov	r0, r6
 80153ba:	e79e      	b.n	80152fa <_strtol_l.constprop.0+0x16>
 80153bc:	b107      	cbz	r7, 80153c0 <_strtol_l.constprop.0+0xdc>
 80153be:	4276      	negs	r6, r6
 80153c0:	2a00      	cmp	r2, #0
 80153c2:	d0f9      	beq.n	80153b8 <_strtol_l.constprop.0+0xd4>
 80153c4:	f1bc 0f00 	cmp.w	ip, #0
 80153c8:	d000      	beq.n	80153cc <_strtol_l.constprop.0+0xe8>
 80153ca:	1e69      	subs	r1, r5, #1
 80153cc:	6011      	str	r1, [r2, #0]
 80153ce:	e7f3      	b.n	80153b8 <_strtol_l.constprop.0+0xd4>
 80153d0:	2430      	movs	r4, #48	; 0x30
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d1b1      	bne.n	801533a <_strtol_l.constprop.0+0x56>
 80153d6:	2308      	movs	r3, #8
 80153d8:	e7af      	b.n	801533a <_strtol_l.constprop.0+0x56>
 80153da:	2c30      	cmp	r4, #48	; 0x30
 80153dc:	d0a5      	beq.n	801532a <_strtol_l.constprop.0+0x46>
 80153de:	230a      	movs	r3, #10
 80153e0:	e7ab      	b.n	801533a <_strtol_l.constprop.0+0x56>
 80153e2:	bf00      	nop
 80153e4:	080197ed 	.word	0x080197ed

080153e8 <_strtol_r>:
 80153e8:	f7ff bf7c 	b.w	80152e4 <_strtol_l.constprop.0>

080153ec <time>:
 80153ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80153ee:	4b0b      	ldr	r3, [pc, #44]	; (801541c <time+0x30>)
 80153f0:	2200      	movs	r2, #0
 80153f2:	4669      	mov	r1, sp
 80153f4:	4604      	mov	r4, r0
 80153f6:	6818      	ldr	r0, [r3, #0]
 80153f8:	f000 f92a 	bl	8015650 <_gettimeofday_r>
 80153fc:	2800      	cmp	r0, #0
 80153fe:	bfbe      	ittt	lt
 8015400:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8015404:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015408:	e9cd 2300 	strdlt	r2, r3, [sp]
 801540c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015410:	b10c      	cbz	r4, 8015416 <time+0x2a>
 8015412:	e9c4 0100 	strd	r0, r1, [r4]
 8015416:	b004      	add	sp, #16
 8015418:	bd10      	pop	{r4, pc}
 801541a:	bf00      	nop
 801541c:	20000030 	.word	0x20000030

08015420 <__swbuf_r>:
 8015420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015422:	460e      	mov	r6, r1
 8015424:	4614      	mov	r4, r2
 8015426:	4605      	mov	r5, r0
 8015428:	b118      	cbz	r0, 8015432 <__swbuf_r+0x12>
 801542a:	6983      	ldr	r3, [r0, #24]
 801542c:	b90b      	cbnz	r3, 8015432 <__swbuf_r+0x12>
 801542e:	f7ff fb5b 	bl	8014ae8 <__sinit>
 8015432:	4b21      	ldr	r3, [pc, #132]	; (80154b8 <__swbuf_r+0x98>)
 8015434:	429c      	cmp	r4, r3
 8015436:	d12b      	bne.n	8015490 <__swbuf_r+0x70>
 8015438:	686c      	ldr	r4, [r5, #4]
 801543a:	69a3      	ldr	r3, [r4, #24]
 801543c:	60a3      	str	r3, [r4, #8]
 801543e:	89a3      	ldrh	r3, [r4, #12]
 8015440:	071a      	lsls	r2, r3, #28
 8015442:	d52f      	bpl.n	80154a4 <__swbuf_r+0x84>
 8015444:	6923      	ldr	r3, [r4, #16]
 8015446:	b36b      	cbz	r3, 80154a4 <__swbuf_r+0x84>
 8015448:	6923      	ldr	r3, [r4, #16]
 801544a:	6820      	ldr	r0, [r4, #0]
 801544c:	1ac0      	subs	r0, r0, r3
 801544e:	6963      	ldr	r3, [r4, #20]
 8015450:	b2f6      	uxtb	r6, r6
 8015452:	4283      	cmp	r3, r0
 8015454:	4637      	mov	r7, r6
 8015456:	dc04      	bgt.n	8015462 <__swbuf_r+0x42>
 8015458:	4621      	mov	r1, r4
 801545a:	4628      	mov	r0, r5
 801545c:	f7ff fa9e 	bl	801499c <_fflush_r>
 8015460:	bb30      	cbnz	r0, 80154b0 <__swbuf_r+0x90>
 8015462:	68a3      	ldr	r3, [r4, #8]
 8015464:	3b01      	subs	r3, #1
 8015466:	60a3      	str	r3, [r4, #8]
 8015468:	6823      	ldr	r3, [r4, #0]
 801546a:	1c5a      	adds	r2, r3, #1
 801546c:	6022      	str	r2, [r4, #0]
 801546e:	701e      	strb	r6, [r3, #0]
 8015470:	6963      	ldr	r3, [r4, #20]
 8015472:	3001      	adds	r0, #1
 8015474:	4283      	cmp	r3, r0
 8015476:	d004      	beq.n	8015482 <__swbuf_r+0x62>
 8015478:	89a3      	ldrh	r3, [r4, #12]
 801547a:	07db      	lsls	r3, r3, #31
 801547c:	d506      	bpl.n	801548c <__swbuf_r+0x6c>
 801547e:	2e0a      	cmp	r6, #10
 8015480:	d104      	bne.n	801548c <__swbuf_r+0x6c>
 8015482:	4621      	mov	r1, r4
 8015484:	4628      	mov	r0, r5
 8015486:	f7ff fa89 	bl	801499c <_fflush_r>
 801548a:	b988      	cbnz	r0, 80154b0 <__swbuf_r+0x90>
 801548c:	4638      	mov	r0, r7
 801548e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015490:	4b0a      	ldr	r3, [pc, #40]	; (80154bc <__swbuf_r+0x9c>)
 8015492:	429c      	cmp	r4, r3
 8015494:	d101      	bne.n	801549a <__swbuf_r+0x7a>
 8015496:	68ac      	ldr	r4, [r5, #8]
 8015498:	e7cf      	b.n	801543a <__swbuf_r+0x1a>
 801549a:	4b09      	ldr	r3, [pc, #36]	; (80154c0 <__swbuf_r+0xa0>)
 801549c:	429c      	cmp	r4, r3
 801549e:	bf08      	it	eq
 80154a0:	68ec      	ldreq	r4, [r5, #12]
 80154a2:	e7ca      	b.n	801543a <__swbuf_r+0x1a>
 80154a4:	4621      	mov	r1, r4
 80154a6:	4628      	mov	r0, r5
 80154a8:	f000 f81e 	bl	80154e8 <__swsetup_r>
 80154ac:	2800      	cmp	r0, #0
 80154ae:	d0cb      	beq.n	8015448 <__swbuf_r+0x28>
 80154b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80154b4:	e7ea      	b.n	801548c <__swbuf_r+0x6c>
 80154b6:	bf00      	nop
 80154b8:	08019910 	.word	0x08019910
 80154bc:	08019930 	.word	0x08019930
 80154c0:	080198f0 	.word	0x080198f0

080154c4 <_write_r>:
 80154c4:	b538      	push	{r3, r4, r5, lr}
 80154c6:	4d07      	ldr	r5, [pc, #28]	; (80154e4 <_write_r+0x20>)
 80154c8:	4604      	mov	r4, r0
 80154ca:	4608      	mov	r0, r1
 80154cc:	4611      	mov	r1, r2
 80154ce:	2200      	movs	r2, #0
 80154d0:	602a      	str	r2, [r5, #0]
 80154d2:	461a      	mov	r2, r3
 80154d4:	f7eb f99e 	bl	8000814 <_write>
 80154d8:	1c43      	adds	r3, r0, #1
 80154da:	d102      	bne.n	80154e2 <_write_r+0x1e>
 80154dc:	682b      	ldr	r3, [r5, #0]
 80154de:	b103      	cbz	r3, 80154e2 <_write_r+0x1e>
 80154e0:	6023      	str	r3, [r4, #0]
 80154e2:	bd38      	pop	{r3, r4, r5, pc}
 80154e4:	20017c34 	.word	0x20017c34

080154e8 <__swsetup_r>:
 80154e8:	4b32      	ldr	r3, [pc, #200]	; (80155b4 <__swsetup_r+0xcc>)
 80154ea:	b570      	push	{r4, r5, r6, lr}
 80154ec:	681d      	ldr	r5, [r3, #0]
 80154ee:	4606      	mov	r6, r0
 80154f0:	460c      	mov	r4, r1
 80154f2:	b125      	cbz	r5, 80154fe <__swsetup_r+0x16>
 80154f4:	69ab      	ldr	r3, [r5, #24]
 80154f6:	b913      	cbnz	r3, 80154fe <__swsetup_r+0x16>
 80154f8:	4628      	mov	r0, r5
 80154fa:	f7ff faf5 	bl	8014ae8 <__sinit>
 80154fe:	4b2e      	ldr	r3, [pc, #184]	; (80155b8 <__swsetup_r+0xd0>)
 8015500:	429c      	cmp	r4, r3
 8015502:	d10f      	bne.n	8015524 <__swsetup_r+0x3c>
 8015504:	686c      	ldr	r4, [r5, #4]
 8015506:	89a3      	ldrh	r3, [r4, #12]
 8015508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801550c:	0719      	lsls	r1, r3, #28
 801550e:	d42c      	bmi.n	801556a <__swsetup_r+0x82>
 8015510:	06dd      	lsls	r5, r3, #27
 8015512:	d411      	bmi.n	8015538 <__swsetup_r+0x50>
 8015514:	2309      	movs	r3, #9
 8015516:	6033      	str	r3, [r6, #0]
 8015518:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801551c:	81a3      	strh	r3, [r4, #12]
 801551e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015522:	e03e      	b.n	80155a2 <__swsetup_r+0xba>
 8015524:	4b25      	ldr	r3, [pc, #148]	; (80155bc <__swsetup_r+0xd4>)
 8015526:	429c      	cmp	r4, r3
 8015528:	d101      	bne.n	801552e <__swsetup_r+0x46>
 801552a:	68ac      	ldr	r4, [r5, #8]
 801552c:	e7eb      	b.n	8015506 <__swsetup_r+0x1e>
 801552e:	4b24      	ldr	r3, [pc, #144]	; (80155c0 <__swsetup_r+0xd8>)
 8015530:	429c      	cmp	r4, r3
 8015532:	bf08      	it	eq
 8015534:	68ec      	ldreq	r4, [r5, #12]
 8015536:	e7e6      	b.n	8015506 <__swsetup_r+0x1e>
 8015538:	0758      	lsls	r0, r3, #29
 801553a:	d512      	bpl.n	8015562 <__swsetup_r+0x7a>
 801553c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801553e:	b141      	cbz	r1, 8015552 <__swsetup_r+0x6a>
 8015540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015544:	4299      	cmp	r1, r3
 8015546:	d002      	beq.n	801554e <__swsetup_r+0x66>
 8015548:	4630      	mov	r0, r6
 801554a:	f7ff fbd3 	bl	8014cf4 <_free_r>
 801554e:	2300      	movs	r3, #0
 8015550:	6363      	str	r3, [r4, #52]	; 0x34
 8015552:	89a3      	ldrh	r3, [r4, #12]
 8015554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015558:	81a3      	strh	r3, [r4, #12]
 801555a:	2300      	movs	r3, #0
 801555c:	6063      	str	r3, [r4, #4]
 801555e:	6923      	ldr	r3, [r4, #16]
 8015560:	6023      	str	r3, [r4, #0]
 8015562:	89a3      	ldrh	r3, [r4, #12]
 8015564:	f043 0308 	orr.w	r3, r3, #8
 8015568:	81a3      	strh	r3, [r4, #12]
 801556a:	6923      	ldr	r3, [r4, #16]
 801556c:	b94b      	cbnz	r3, 8015582 <__swsetup_r+0x9a>
 801556e:	89a3      	ldrh	r3, [r4, #12]
 8015570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015578:	d003      	beq.n	8015582 <__swsetup_r+0x9a>
 801557a:	4621      	mov	r1, r4
 801557c:	4630      	mov	r0, r6
 801557e:	f000 f8b1 	bl	80156e4 <__smakebuf_r>
 8015582:	89a0      	ldrh	r0, [r4, #12]
 8015584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015588:	f010 0301 	ands.w	r3, r0, #1
 801558c:	d00a      	beq.n	80155a4 <__swsetup_r+0xbc>
 801558e:	2300      	movs	r3, #0
 8015590:	60a3      	str	r3, [r4, #8]
 8015592:	6963      	ldr	r3, [r4, #20]
 8015594:	425b      	negs	r3, r3
 8015596:	61a3      	str	r3, [r4, #24]
 8015598:	6923      	ldr	r3, [r4, #16]
 801559a:	b943      	cbnz	r3, 80155ae <__swsetup_r+0xc6>
 801559c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80155a0:	d1ba      	bne.n	8015518 <__swsetup_r+0x30>
 80155a2:	bd70      	pop	{r4, r5, r6, pc}
 80155a4:	0781      	lsls	r1, r0, #30
 80155a6:	bf58      	it	pl
 80155a8:	6963      	ldrpl	r3, [r4, #20]
 80155aa:	60a3      	str	r3, [r4, #8]
 80155ac:	e7f4      	b.n	8015598 <__swsetup_r+0xb0>
 80155ae:	2000      	movs	r0, #0
 80155b0:	e7f7      	b.n	80155a2 <__swsetup_r+0xba>
 80155b2:	bf00      	nop
 80155b4:	20000030 	.word	0x20000030
 80155b8:	08019910 	.word	0x08019910
 80155bc:	08019930 	.word	0x08019930
 80155c0:	080198f0 	.word	0x080198f0

080155c4 <__assert_func>:
 80155c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80155c6:	4614      	mov	r4, r2
 80155c8:	461a      	mov	r2, r3
 80155ca:	4b09      	ldr	r3, [pc, #36]	; (80155f0 <__assert_func+0x2c>)
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	4605      	mov	r5, r0
 80155d0:	68d8      	ldr	r0, [r3, #12]
 80155d2:	b14c      	cbz	r4, 80155e8 <__assert_func+0x24>
 80155d4:	4b07      	ldr	r3, [pc, #28]	; (80155f4 <__assert_func+0x30>)
 80155d6:	9100      	str	r1, [sp, #0]
 80155d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80155dc:	4906      	ldr	r1, [pc, #24]	; (80155f8 <__assert_func+0x34>)
 80155de:	462b      	mov	r3, r5
 80155e0:	f000 f824 	bl	801562c <fiprintf>
 80155e4:	f001 f938 	bl	8016858 <abort>
 80155e8:	4b04      	ldr	r3, [pc, #16]	; (80155fc <__assert_func+0x38>)
 80155ea:	461c      	mov	r4, r3
 80155ec:	e7f3      	b.n	80155d6 <__assert_func+0x12>
 80155ee:	bf00      	nop
 80155f0:	20000030 	.word	0x20000030
 80155f4:	080199c6 	.word	0x080199c6
 80155f8:	080199d3 	.word	0x080199d3
 80155fc:	08019a01 	.word	0x08019a01

08015600 <_close_r>:
 8015600:	b538      	push	{r3, r4, r5, lr}
 8015602:	4d06      	ldr	r5, [pc, #24]	; (801561c <_close_r+0x1c>)
 8015604:	2300      	movs	r3, #0
 8015606:	4604      	mov	r4, r0
 8015608:	4608      	mov	r0, r1
 801560a:	602b      	str	r3, [r5, #0]
 801560c:	f7eb fac3 	bl	8000b96 <_close>
 8015610:	1c43      	adds	r3, r0, #1
 8015612:	d102      	bne.n	801561a <_close_r+0x1a>
 8015614:	682b      	ldr	r3, [r5, #0]
 8015616:	b103      	cbz	r3, 801561a <_close_r+0x1a>
 8015618:	6023      	str	r3, [r4, #0]
 801561a:	bd38      	pop	{r3, r4, r5, pc}
 801561c:	20017c34 	.word	0x20017c34

08015620 <__errno>:
 8015620:	4b01      	ldr	r3, [pc, #4]	; (8015628 <__errno+0x8>)
 8015622:	6818      	ldr	r0, [r3, #0]
 8015624:	4770      	bx	lr
 8015626:	bf00      	nop
 8015628:	20000030 	.word	0x20000030

0801562c <fiprintf>:
 801562c:	b40e      	push	{r1, r2, r3}
 801562e:	b503      	push	{r0, r1, lr}
 8015630:	4601      	mov	r1, r0
 8015632:	ab03      	add	r3, sp, #12
 8015634:	4805      	ldr	r0, [pc, #20]	; (801564c <fiprintf+0x20>)
 8015636:	f853 2b04 	ldr.w	r2, [r3], #4
 801563a:	6800      	ldr	r0, [r0, #0]
 801563c:	9301      	str	r3, [sp, #4]
 801563e:	f000 fbfd 	bl	8015e3c <_vfiprintf_r>
 8015642:	b002      	add	sp, #8
 8015644:	f85d eb04 	ldr.w	lr, [sp], #4
 8015648:	b003      	add	sp, #12
 801564a:	4770      	bx	lr
 801564c:	20000030 	.word	0x20000030

08015650 <_gettimeofday_r>:
 8015650:	b538      	push	{r3, r4, r5, lr}
 8015652:	4d07      	ldr	r5, [pc, #28]	; (8015670 <_gettimeofday_r+0x20>)
 8015654:	2300      	movs	r3, #0
 8015656:	4604      	mov	r4, r0
 8015658:	4608      	mov	r0, r1
 801565a:	4611      	mov	r1, r2
 801565c:	602b      	str	r3, [r5, #0]
 801565e:	f001 f9a1 	bl	80169a4 <_gettimeofday>
 8015662:	1c43      	adds	r3, r0, #1
 8015664:	d102      	bne.n	801566c <_gettimeofday_r+0x1c>
 8015666:	682b      	ldr	r3, [r5, #0]
 8015668:	b103      	cbz	r3, 801566c <_gettimeofday_r+0x1c>
 801566a:	6023      	str	r3, [r4, #0]
 801566c:	bd38      	pop	{r3, r4, r5, pc}
 801566e:	bf00      	nop
 8015670:	20017c34 	.word	0x20017c34

08015674 <_lseek_r>:
 8015674:	b538      	push	{r3, r4, r5, lr}
 8015676:	4d07      	ldr	r5, [pc, #28]	; (8015694 <_lseek_r+0x20>)
 8015678:	4604      	mov	r4, r0
 801567a:	4608      	mov	r0, r1
 801567c:	4611      	mov	r1, r2
 801567e:	2200      	movs	r2, #0
 8015680:	602a      	str	r2, [r5, #0]
 8015682:	461a      	mov	r2, r3
 8015684:	f7eb faae 	bl	8000be4 <_lseek>
 8015688:	1c43      	adds	r3, r0, #1
 801568a:	d102      	bne.n	8015692 <_lseek_r+0x1e>
 801568c:	682b      	ldr	r3, [r5, #0]
 801568e:	b103      	cbz	r3, 8015692 <_lseek_r+0x1e>
 8015690:	6023      	str	r3, [r4, #0]
 8015692:	bd38      	pop	{r3, r4, r5, pc}
 8015694:	20017c34 	.word	0x20017c34

08015698 <__swhatbuf_r>:
 8015698:	b570      	push	{r4, r5, r6, lr}
 801569a:	460e      	mov	r6, r1
 801569c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156a0:	2900      	cmp	r1, #0
 80156a2:	b096      	sub	sp, #88	; 0x58
 80156a4:	4614      	mov	r4, r2
 80156a6:	461d      	mov	r5, r3
 80156a8:	da08      	bge.n	80156bc <__swhatbuf_r+0x24>
 80156aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80156ae:	2200      	movs	r2, #0
 80156b0:	602a      	str	r2, [r5, #0]
 80156b2:	061a      	lsls	r2, r3, #24
 80156b4:	d410      	bmi.n	80156d8 <__swhatbuf_r+0x40>
 80156b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80156ba:	e00e      	b.n	80156da <__swhatbuf_r+0x42>
 80156bc:	466a      	mov	r2, sp
 80156be:	f001 f8d3 	bl	8016868 <_fstat_r>
 80156c2:	2800      	cmp	r0, #0
 80156c4:	dbf1      	blt.n	80156aa <__swhatbuf_r+0x12>
 80156c6:	9a01      	ldr	r2, [sp, #4]
 80156c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80156cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80156d0:	425a      	negs	r2, r3
 80156d2:	415a      	adcs	r2, r3
 80156d4:	602a      	str	r2, [r5, #0]
 80156d6:	e7ee      	b.n	80156b6 <__swhatbuf_r+0x1e>
 80156d8:	2340      	movs	r3, #64	; 0x40
 80156da:	2000      	movs	r0, #0
 80156dc:	6023      	str	r3, [r4, #0]
 80156de:	b016      	add	sp, #88	; 0x58
 80156e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080156e4 <__smakebuf_r>:
 80156e4:	898b      	ldrh	r3, [r1, #12]
 80156e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80156e8:	079d      	lsls	r5, r3, #30
 80156ea:	4606      	mov	r6, r0
 80156ec:	460c      	mov	r4, r1
 80156ee:	d507      	bpl.n	8015700 <__smakebuf_r+0x1c>
 80156f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80156f4:	6023      	str	r3, [r4, #0]
 80156f6:	6123      	str	r3, [r4, #16]
 80156f8:	2301      	movs	r3, #1
 80156fa:	6163      	str	r3, [r4, #20]
 80156fc:	b002      	add	sp, #8
 80156fe:	bd70      	pop	{r4, r5, r6, pc}
 8015700:	ab01      	add	r3, sp, #4
 8015702:	466a      	mov	r2, sp
 8015704:	f7ff ffc8 	bl	8015698 <__swhatbuf_r>
 8015708:	9900      	ldr	r1, [sp, #0]
 801570a:	4605      	mov	r5, r0
 801570c:	4630      	mov	r0, r6
 801570e:	f7ff fb5d 	bl	8014dcc <_malloc_r>
 8015712:	b948      	cbnz	r0, 8015728 <__smakebuf_r+0x44>
 8015714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015718:	059a      	lsls	r2, r3, #22
 801571a:	d4ef      	bmi.n	80156fc <__smakebuf_r+0x18>
 801571c:	f023 0303 	bic.w	r3, r3, #3
 8015720:	f043 0302 	orr.w	r3, r3, #2
 8015724:	81a3      	strh	r3, [r4, #12]
 8015726:	e7e3      	b.n	80156f0 <__smakebuf_r+0xc>
 8015728:	4b0d      	ldr	r3, [pc, #52]	; (8015760 <__smakebuf_r+0x7c>)
 801572a:	62b3      	str	r3, [r6, #40]	; 0x28
 801572c:	89a3      	ldrh	r3, [r4, #12]
 801572e:	6020      	str	r0, [r4, #0]
 8015730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015734:	81a3      	strh	r3, [r4, #12]
 8015736:	9b00      	ldr	r3, [sp, #0]
 8015738:	6163      	str	r3, [r4, #20]
 801573a:	9b01      	ldr	r3, [sp, #4]
 801573c:	6120      	str	r0, [r4, #16]
 801573e:	b15b      	cbz	r3, 8015758 <__smakebuf_r+0x74>
 8015740:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015744:	4630      	mov	r0, r6
 8015746:	f001 f8a1 	bl	801688c <_isatty_r>
 801574a:	b128      	cbz	r0, 8015758 <__smakebuf_r+0x74>
 801574c:	89a3      	ldrh	r3, [r4, #12]
 801574e:	f023 0303 	bic.w	r3, r3, #3
 8015752:	f043 0301 	orr.w	r3, r3, #1
 8015756:	81a3      	strh	r3, [r4, #12]
 8015758:	89a0      	ldrh	r0, [r4, #12]
 801575a:	4305      	orrs	r5, r0
 801575c:	81a5      	strh	r5, [r4, #12]
 801575e:	e7cd      	b.n	80156fc <__smakebuf_r+0x18>
 8015760:	08014a81 	.word	0x08014a81

08015764 <malloc>:
 8015764:	4b02      	ldr	r3, [pc, #8]	; (8015770 <malloc+0xc>)
 8015766:	4601      	mov	r1, r0
 8015768:	6818      	ldr	r0, [r3, #0]
 801576a:	f7ff bb2f 	b.w	8014dcc <_malloc_r>
 801576e:	bf00      	nop
 8015770:	20000030 	.word	0x20000030

08015774 <__malloc_lock>:
 8015774:	4801      	ldr	r0, [pc, #4]	; (801577c <__malloc_lock+0x8>)
 8015776:	f7ff ba7a 	b.w	8014c6e <__retarget_lock_acquire_recursive>
 801577a:	bf00      	nop
 801577c:	20017c28 	.word	0x20017c28

08015780 <__malloc_unlock>:
 8015780:	4801      	ldr	r0, [pc, #4]	; (8015788 <__malloc_unlock+0x8>)
 8015782:	f7ff ba75 	b.w	8014c70 <__retarget_lock_release_recursive>
 8015786:	bf00      	nop
 8015788:	20017c28 	.word	0x20017c28

0801578c <__ssputs_r>:
 801578c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015790:	688e      	ldr	r6, [r1, #8]
 8015792:	429e      	cmp	r6, r3
 8015794:	4682      	mov	sl, r0
 8015796:	460c      	mov	r4, r1
 8015798:	4690      	mov	r8, r2
 801579a:	461f      	mov	r7, r3
 801579c:	d838      	bhi.n	8015810 <__ssputs_r+0x84>
 801579e:	898a      	ldrh	r2, [r1, #12]
 80157a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80157a4:	d032      	beq.n	801580c <__ssputs_r+0x80>
 80157a6:	6825      	ldr	r5, [r4, #0]
 80157a8:	6909      	ldr	r1, [r1, #16]
 80157aa:	eba5 0901 	sub.w	r9, r5, r1
 80157ae:	6965      	ldr	r5, [r4, #20]
 80157b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80157b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80157b8:	3301      	adds	r3, #1
 80157ba:	444b      	add	r3, r9
 80157bc:	106d      	asrs	r5, r5, #1
 80157be:	429d      	cmp	r5, r3
 80157c0:	bf38      	it	cc
 80157c2:	461d      	movcc	r5, r3
 80157c4:	0553      	lsls	r3, r2, #21
 80157c6:	d531      	bpl.n	801582c <__ssputs_r+0xa0>
 80157c8:	4629      	mov	r1, r5
 80157ca:	f7ff faff 	bl	8014dcc <_malloc_r>
 80157ce:	4606      	mov	r6, r0
 80157d0:	b950      	cbnz	r0, 80157e8 <__ssputs_r+0x5c>
 80157d2:	230c      	movs	r3, #12
 80157d4:	f8ca 3000 	str.w	r3, [sl]
 80157d8:	89a3      	ldrh	r3, [r4, #12]
 80157da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157de:	81a3      	strh	r3, [r4, #12]
 80157e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80157e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157e8:	6921      	ldr	r1, [r4, #16]
 80157ea:	464a      	mov	r2, r9
 80157ec:	f7ff fa51 	bl	8014c92 <memcpy>
 80157f0:	89a3      	ldrh	r3, [r4, #12]
 80157f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80157f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80157fa:	81a3      	strh	r3, [r4, #12]
 80157fc:	6126      	str	r6, [r4, #16]
 80157fe:	6165      	str	r5, [r4, #20]
 8015800:	444e      	add	r6, r9
 8015802:	eba5 0509 	sub.w	r5, r5, r9
 8015806:	6026      	str	r6, [r4, #0]
 8015808:	60a5      	str	r5, [r4, #8]
 801580a:	463e      	mov	r6, r7
 801580c:	42be      	cmp	r6, r7
 801580e:	d900      	bls.n	8015812 <__ssputs_r+0x86>
 8015810:	463e      	mov	r6, r7
 8015812:	6820      	ldr	r0, [r4, #0]
 8015814:	4632      	mov	r2, r6
 8015816:	4641      	mov	r1, r8
 8015818:	f7ff fa49 	bl	8014cae <memmove>
 801581c:	68a3      	ldr	r3, [r4, #8]
 801581e:	1b9b      	subs	r3, r3, r6
 8015820:	60a3      	str	r3, [r4, #8]
 8015822:	6823      	ldr	r3, [r4, #0]
 8015824:	4433      	add	r3, r6
 8015826:	6023      	str	r3, [r4, #0]
 8015828:	2000      	movs	r0, #0
 801582a:	e7db      	b.n	80157e4 <__ssputs_r+0x58>
 801582c:	462a      	mov	r2, r5
 801582e:	f001 f83d 	bl	80168ac <_realloc_r>
 8015832:	4606      	mov	r6, r0
 8015834:	2800      	cmp	r0, #0
 8015836:	d1e1      	bne.n	80157fc <__ssputs_r+0x70>
 8015838:	6921      	ldr	r1, [r4, #16]
 801583a:	4650      	mov	r0, sl
 801583c:	f7ff fa5a 	bl	8014cf4 <_free_r>
 8015840:	e7c7      	b.n	80157d2 <__ssputs_r+0x46>
	...

08015844 <_svfiprintf_r>:
 8015844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015848:	4698      	mov	r8, r3
 801584a:	898b      	ldrh	r3, [r1, #12]
 801584c:	061b      	lsls	r3, r3, #24
 801584e:	b09d      	sub	sp, #116	; 0x74
 8015850:	4607      	mov	r7, r0
 8015852:	460d      	mov	r5, r1
 8015854:	4614      	mov	r4, r2
 8015856:	d50e      	bpl.n	8015876 <_svfiprintf_r+0x32>
 8015858:	690b      	ldr	r3, [r1, #16]
 801585a:	b963      	cbnz	r3, 8015876 <_svfiprintf_r+0x32>
 801585c:	2140      	movs	r1, #64	; 0x40
 801585e:	f7ff fab5 	bl	8014dcc <_malloc_r>
 8015862:	6028      	str	r0, [r5, #0]
 8015864:	6128      	str	r0, [r5, #16]
 8015866:	b920      	cbnz	r0, 8015872 <_svfiprintf_r+0x2e>
 8015868:	230c      	movs	r3, #12
 801586a:	603b      	str	r3, [r7, #0]
 801586c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015870:	e0d1      	b.n	8015a16 <_svfiprintf_r+0x1d2>
 8015872:	2340      	movs	r3, #64	; 0x40
 8015874:	616b      	str	r3, [r5, #20]
 8015876:	2300      	movs	r3, #0
 8015878:	9309      	str	r3, [sp, #36]	; 0x24
 801587a:	2320      	movs	r3, #32
 801587c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015880:	f8cd 800c 	str.w	r8, [sp, #12]
 8015884:	2330      	movs	r3, #48	; 0x30
 8015886:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015a30 <_svfiprintf_r+0x1ec>
 801588a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801588e:	f04f 0901 	mov.w	r9, #1
 8015892:	4623      	mov	r3, r4
 8015894:	469a      	mov	sl, r3
 8015896:	f813 2b01 	ldrb.w	r2, [r3], #1
 801589a:	b10a      	cbz	r2, 80158a0 <_svfiprintf_r+0x5c>
 801589c:	2a25      	cmp	r2, #37	; 0x25
 801589e:	d1f9      	bne.n	8015894 <_svfiprintf_r+0x50>
 80158a0:	ebba 0b04 	subs.w	fp, sl, r4
 80158a4:	d00b      	beq.n	80158be <_svfiprintf_r+0x7a>
 80158a6:	465b      	mov	r3, fp
 80158a8:	4622      	mov	r2, r4
 80158aa:	4629      	mov	r1, r5
 80158ac:	4638      	mov	r0, r7
 80158ae:	f7ff ff6d 	bl	801578c <__ssputs_r>
 80158b2:	3001      	adds	r0, #1
 80158b4:	f000 80aa 	beq.w	8015a0c <_svfiprintf_r+0x1c8>
 80158b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80158ba:	445a      	add	r2, fp
 80158bc:	9209      	str	r2, [sp, #36]	; 0x24
 80158be:	f89a 3000 	ldrb.w	r3, [sl]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	f000 80a2 	beq.w	8015a0c <_svfiprintf_r+0x1c8>
 80158c8:	2300      	movs	r3, #0
 80158ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80158ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80158d2:	f10a 0a01 	add.w	sl, sl, #1
 80158d6:	9304      	str	r3, [sp, #16]
 80158d8:	9307      	str	r3, [sp, #28]
 80158da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80158de:	931a      	str	r3, [sp, #104]	; 0x68
 80158e0:	4654      	mov	r4, sl
 80158e2:	2205      	movs	r2, #5
 80158e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158e8:	4851      	ldr	r0, [pc, #324]	; (8015a30 <_svfiprintf_r+0x1ec>)
 80158ea:	f7ea fcb1 	bl	8000250 <memchr>
 80158ee:	9a04      	ldr	r2, [sp, #16]
 80158f0:	b9d8      	cbnz	r0, 801592a <_svfiprintf_r+0xe6>
 80158f2:	06d0      	lsls	r0, r2, #27
 80158f4:	bf44      	itt	mi
 80158f6:	2320      	movmi	r3, #32
 80158f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80158fc:	0711      	lsls	r1, r2, #28
 80158fe:	bf44      	itt	mi
 8015900:	232b      	movmi	r3, #43	; 0x2b
 8015902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015906:	f89a 3000 	ldrb.w	r3, [sl]
 801590a:	2b2a      	cmp	r3, #42	; 0x2a
 801590c:	d015      	beq.n	801593a <_svfiprintf_r+0xf6>
 801590e:	9a07      	ldr	r2, [sp, #28]
 8015910:	4654      	mov	r4, sl
 8015912:	2000      	movs	r0, #0
 8015914:	f04f 0c0a 	mov.w	ip, #10
 8015918:	4621      	mov	r1, r4
 801591a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801591e:	3b30      	subs	r3, #48	; 0x30
 8015920:	2b09      	cmp	r3, #9
 8015922:	d94e      	bls.n	80159c2 <_svfiprintf_r+0x17e>
 8015924:	b1b0      	cbz	r0, 8015954 <_svfiprintf_r+0x110>
 8015926:	9207      	str	r2, [sp, #28]
 8015928:	e014      	b.n	8015954 <_svfiprintf_r+0x110>
 801592a:	eba0 0308 	sub.w	r3, r0, r8
 801592e:	fa09 f303 	lsl.w	r3, r9, r3
 8015932:	4313      	orrs	r3, r2
 8015934:	9304      	str	r3, [sp, #16]
 8015936:	46a2      	mov	sl, r4
 8015938:	e7d2      	b.n	80158e0 <_svfiprintf_r+0x9c>
 801593a:	9b03      	ldr	r3, [sp, #12]
 801593c:	1d19      	adds	r1, r3, #4
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	9103      	str	r1, [sp, #12]
 8015942:	2b00      	cmp	r3, #0
 8015944:	bfbb      	ittet	lt
 8015946:	425b      	neglt	r3, r3
 8015948:	f042 0202 	orrlt.w	r2, r2, #2
 801594c:	9307      	strge	r3, [sp, #28]
 801594e:	9307      	strlt	r3, [sp, #28]
 8015950:	bfb8      	it	lt
 8015952:	9204      	strlt	r2, [sp, #16]
 8015954:	7823      	ldrb	r3, [r4, #0]
 8015956:	2b2e      	cmp	r3, #46	; 0x2e
 8015958:	d10c      	bne.n	8015974 <_svfiprintf_r+0x130>
 801595a:	7863      	ldrb	r3, [r4, #1]
 801595c:	2b2a      	cmp	r3, #42	; 0x2a
 801595e:	d135      	bne.n	80159cc <_svfiprintf_r+0x188>
 8015960:	9b03      	ldr	r3, [sp, #12]
 8015962:	1d1a      	adds	r2, r3, #4
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	9203      	str	r2, [sp, #12]
 8015968:	2b00      	cmp	r3, #0
 801596a:	bfb8      	it	lt
 801596c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015970:	3402      	adds	r4, #2
 8015972:	9305      	str	r3, [sp, #20]
 8015974:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015a40 <_svfiprintf_r+0x1fc>
 8015978:	7821      	ldrb	r1, [r4, #0]
 801597a:	2203      	movs	r2, #3
 801597c:	4650      	mov	r0, sl
 801597e:	f7ea fc67 	bl	8000250 <memchr>
 8015982:	b140      	cbz	r0, 8015996 <_svfiprintf_r+0x152>
 8015984:	2340      	movs	r3, #64	; 0x40
 8015986:	eba0 000a 	sub.w	r0, r0, sl
 801598a:	fa03 f000 	lsl.w	r0, r3, r0
 801598e:	9b04      	ldr	r3, [sp, #16]
 8015990:	4303      	orrs	r3, r0
 8015992:	3401      	adds	r4, #1
 8015994:	9304      	str	r3, [sp, #16]
 8015996:	f814 1b01 	ldrb.w	r1, [r4], #1
 801599a:	4826      	ldr	r0, [pc, #152]	; (8015a34 <_svfiprintf_r+0x1f0>)
 801599c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80159a0:	2206      	movs	r2, #6
 80159a2:	f7ea fc55 	bl	8000250 <memchr>
 80159a6:	2800      	cmp	r0, #0
 80159a8:	d038      	beq.n	8015a1c <_svfiprintf_r+0x1d8>
 80159aa:	4b23      	ldr	r3, [pc, #140]	; (8015a38 <_svfiprintf_r+0x1f4>)
 80159ac:	bb1b      	cbnz	r3, 80159f6 <_svfiprintf_r+0x1b2>
 80159ae:	9b03      	ldr	r3, [sp, #12]
 80159b0:	3307      	adds	r3, #7
 80159b2:	f023 0307 	bic.w	r3, r3, #7
 80159b6:	3308      	adds	r3, #8
 80159b8:	9303      	str	r3, [sp, #12]
 80159ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159bc:	4433      	add	r3, r6
 80159be:	9309      	str	r3, [sp, #36]	; 0x24
 80159c0:	e767      	b.n	8015892 <_svfiprintf_r+0x4e>
 80159c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80159c6:	460c      	mov	r4, r1
 80159c8:	2001      	movs	r0, #1
 80159ca:	e7a5      	b.n	8015918 <_svfiprintf_r+0xd4>
 80159cc:	2300      	movs	r3, #0
 80159ce:	3401      	adds	r4, #1
 80159d0:	9305      	str	r3, [sp, #20]
 80159d2:	4619      	mov	r1, r3
 80159d4:	f04f 0c0a 	mov.w	ip, #10
 80159d8:	4620      	mov	r0, r4
 80159da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80159de:	3a30      	subs	r2, #48	; 0x30
 80159e0:	2a09      	cmp	r2, #9
 80159e2:	d903      	bls.n	80159ec <_svfiprintf_r+0x1a8>
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d0c5      	beq.n	8015974 <_svfiprintf_r+0x130>
 80159e8:	9105      	str	r1, [sp, #20]
 80159ea:	e7c3      	b.n	8015974 <_svfiprintf_r+0x130>
 80159ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80159f0:	4604      	mov	r4, r0
 80159f2:	2301      	movs	r3, #1
 80159f4:	e7f0      	b.n	80159d8 <_svfiprintf_r+0x194>
 80159f6:	ab03      	add	r3, sp, #12
 80159f8:	9300      	str	r3, [sp, #0]
 80159fa:	462a      	mov	r2, r5
 80159fc:	4b0f      	ldr	r3, [pc, #60]	; (8015a3c <_svfiprintf_r+0x1f8>)
 80159fe:	a904      	add	r1, sp, #16
 8015a00:	4638      	mov	r0, r7
 8015a02:	f3af 8000 	nop.w
 8015a06:	1c42      	adds	r2, r0, #1
 8015a08:	4606      	mov	r6, r0
 8015a0a:	d1d6      	bne.n	80159ba <_svfiprintf_r+0x176>
 8015a0c:	89ab      	ldrh	r3, [r5, #12]
 8015a0e:	065b      	lsls	r3, r3, #25
 8015a10:	f53f af2c 	bmi.w	801586c <_svfiprintf_r+0x28>
 8015a14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015a16:	b01d      	add	sp, #116	; 0x74
 8015a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a1c:	ab03      	add	r3, sp, #12
 8015a1e:	9300      	str	r3, [sp, #0]
 8015a20:	462a      	mov	r2, r5
 8015a22:	4b06      	ldr	r3, [pc, #24]	; (8015a3c <_svfiprintf_r+0x1f8>)
 8015a24:	a904      	add	r1, sp, #16
 8015a26:	4638      	mov	r0, r7
 8015a28:	f000 fba6 	bl	8016178 <_printf_i>
 8015a2c:	e7eb      	b.n	8015a06 <_svfiprintf_r+0x1c2>
 8015a2e:	bf00      	nop
 8015a30:	08019a02 	.word	0x08019a02
 8015a34:	08019a0c 	.word	0x08019a0c
 8015a38:	00000000 	.word	0x00000000
 8015a3c:	0801578d 	.word	0x0801578d
 8015a40:	08019a08 	.word	0x08019a08

08015a44 <_sungetc_r>:
 8015a44:	b538      	push	{r3, r4, r5, lr}
 8015a46:	1c4b      	adds	r3, r1, #1
 8015a48:	4614      	mov	r4, r2
 8015a4a:	d103      	bne.n	8015a54 <_sungetc_r+0x10>
 8015a4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8015a50:	4628      	mov	r0, r5
 8015a52:	bd38      	pop	{r3, r4, r5, pc}
 8015a54:	8993      	ldrh	r3, [r2, #12]
 8015a56:	f023 0320 	bic.w	r3, r3, #32
 8015a5a:	8193      	strh	r3, [r2, #12]
 8015a5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015a5e:	6852      	ldr	r2, [r2, #4]
 8015a60:	b2cd      	uxtb	r5, r1
 8015a62:	b18b      	cbz	r3, 8015a88 <_sungetc_r+0x44>
 8015a64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015a66:	4293      	cmp	r3, r2
 8015a68:	dd08      	ble.n	8015a7c <_sungetc_r+0x38>
 8015a6a:	6823      	ldr	r3, [r4, #0]
 8015a6c:	1e5a      	subs	r2, r3, #1
 8015a6e:	6022      	str	r2, [r4, #0]
 8015a70:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015a74:	6863      	ldr	r3, [r4, #4]
 8015a76:	3301      	adds	r3, #1
 8015a78:	6063      	str	r3, [r4, #4]
 8015a7a:	e7e9      	b.n	8015a50 <_sungetc_r+0xc>
 8015a7c:	4621      	mov	r1, r4
 8015a7e:	f000 feb1 	bl	80167e4 <__submore>
 8015a82:	2800      	cmp	r0, #0
 8015a84:	d0f1      	beq.n	8015a6a <_sungetc_r+0x26>
 8015a86:	e7e1      	b.n	8015a4c <_sungetc_r+0x8>
 8015a88:	6921      	ldr	r1, [r4, #16]
 8015a8a:	6823      	ldr	r3, [r4, #0]
 8015a8c:	b151      	cbz	r1, 8015aa4 <_sungetc_r+0x60>
 8015a8e:	4299      	cmp	r1, r3
 8015a90:	d208      	bcs.n	8015aa4 <_sungetc_r+0x60>
 8015a92:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015a96:	42a9      	cmp	r1, r5
 8015a98:	d104      	bne.n	8015aa4 <_sungetc_r+0x60>
 8015a9a:	3b01      	subs	r3, #1
 8015a9c:	3201      	adds	r2, #1
 8015a9e:	6023      	str	r3, [r4, #0]
 8015aa0:	6062      	str	r2, [r4, #4]
 8015aa2:	e7d5      	b.n	8015a50 <_sungetc_r+0xc>
 8015aa4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8015aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015aac:	6363      	str	r3, [r4, #52]	; 0x34
 8015aae:	2303      	movs	r3, #3
 8015ab0:	63a3      	str	r3, [r4, #56]	; 0x38
 8015ab2:	4623      	mov	r3, r4
 8015ab4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015ab8:	6023      	str	r3, [r4, #0]
 8015aba:	2301      	movs	r3, #1
 8015abc:	e7dc      	b.n	8015a78 <_sungetc_r+0x34>

08015abe <__ssrefill_r>:
 8015abe:	b510      	push	{r4, lr}
 8015ac0:	460c      	mov	r4, r1
 8015ac2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015ac4:	b169      	cbz	r1, 8015ae2 <__ssrefill_r+0x24>
 8015ac6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015aca:	4299      	cmp	r1, r3
 8015acc:	d001      	beq.n	8015ad2 <__ssrefill_r+0x14>
 8015ace:	f7ff f911 	bl	8014cf4 <_free_r>
 8015ad2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015ad4:	6063      	str	r3, [r4, #4]
 8015ad6:	2000      	movs	r0, #0
 8015ad8:	6360      	str	r0, [r4, #52]	; 0x34
 8015ada:	b113      	cbz	r3, 8015ae2 <__ssrefill_r+0x24>
 8015adc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015ade:	6023      	str	r3, [r4, #0]
 8015ae0:	bd10      	pop	{r4, pc}
 8015ae2:	6923      	ldr	r3, [r4, #16]
 8015ae4:	6023      	str	r3, [r4, #0]
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	6063      	str	r3, [r4, #4]
 8015aea:	89a3      	ldrh	r3, [r4, #12]
 8015aec:	f043 0320 	orr.w	r3, r3, #32
 8015af0:	81a3      	strh	r3, [r4, #12]
 8015af2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015af6:	e7f3      	b.n	8015ae0 <__ssrefill_r+0x22>

08015af8 <__ssvfiscanf_r>:
 8015af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015afc:	460c      	mov	r4, r1
 8015afe:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8015b02:	2100      	movs	r1, #0
 8015b04:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8015b08:	49a6      	ldr	r1, [pc, #664]	; (8015da4 <__ssvfiscanf_r+0x2ac>)
 8015b0a:	91a0      	str	r1, [sp, #640]	; 0x280
 8015b0c:	f10d 0804 	add.w	r8, sp, #4
 8015b10:	49a5      	ldr	r1, [pc, #660]	; (8015da8 <__ssvfiscanf_r+0x2b0>)
 8015b12:	4fa6      	ldr	r7, [pc, #664]	; (8015dac <__ssvfiscanf_r+0x2b4>)
 8015b14:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8015db0 <__ssvfiscanf_r+0x2b8>
 8015b18:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015b1c:	4606      	mov	r6, r0
 8015b1e:	91a1      	str	r1, [sp, #644]	; 0x284
 8015b20:	9300      	str	r3, [sp, #0]
 8015b22:	7813      	ldrb	r3, [r2, #0]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	f000 815a 	beq.w	8015dde <__ssvfiscanf_r+0x2e6>
 8015b2a:	5dd9      	ldrb	r1, [r3, r7]
 8015b2c:	f011 0108 	ands.w	r1, r1, #8
 8015b30:	f102 0501 	add.w	r5, r2, #1
 8015b34:	d019      	beq.n	8015b6a <__ssvfiscanf_r+0x72>
 8015b36:	6863      	ldr	r3, [r4, #4]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	dd0f      	ble.n	8015b5c <__ssvfiscanf_r+0x64>
 8015b3c:	6823      	ldr	r3, [r4, #0]
 8015b3e:	781a      	ldrb	r2, [r3, #0]
 8015b40:	5cba      	ldrb	r2, [r7, r2]
 8015b42:	0712      	lsls	r2, r2, #28
 8015b44:	d401      	bmi.n	8015b4a <__ssvfiscanf_r+0x52>
 8015b46:	462a      	mov	r2, r5
 8015b48:	e7eb      	b.n	8015b22 <__ssvfiscanf_r+0x2a>
 8015b4a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015b4c:	3201      	adds	r2, #1
 8015b4e:	9245      	str	r2, [sp, #276]	; 0x114
 8015b50:	6862      	ldr	r2, [r4, #4]
 8015b52:	3301      	adds	r3, #1
 8015b54:	3a01      	subs	r2, #1
 8015b56:	6062      	str	r2, [r4, #4]
 8015b58:	6023      	str	r3, [r4, #0]
 8015b5a:	e7ec      	b.n	8015b36 <__ssvfiscanf_r+0x3e>
 8015b5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015b5e:	4621      	mov	r1, r4
 8015b60:	4630      	mov	r0, r6
 8015b62:	4798      	blx	r3
 8015b64:	2800      	cmp	r0, #0
 8015b66:	d0e9      	beq.n	8015b3c <__ssvfiscanf_r+0x44>
 8015b68:	e7ed      	b.n	8015b46 <__ssvfiscanf_r+0x4e>
 8015b6a:	2b25      	cmp	r3, #37	; 0x25
 8015b6c:	d012      	beq.n	8015b94 <__ssvfiscanf_r+0x9c>
 8015b6e:	469a      	mov	sl, r3
 8015b70:	6863      	ldr	r3, [r4, #4]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	f340 8091 	ble.w	8015c9a <__ssvfiscanf_r+0x1a2>
 8015b78:	6822      	ldr	r2, [r4, #0]
 8015b7a:	7813      	ldrb	r3, [r2, #0]
 8015b7c:	4553      	cmp	r3, sl
 8015b7e:	f040 812e 	bne.w	8015dde <__ssvfiscanf_r+0x2e6>
 8015b82:	6863      	ldr	r3, [r4, #4]
 8015b84:	3b01      	subs	r3, #1
 8015b86:	6063      	str	r3, [r4, #4]
 8015b88:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8015b8a:	3201      	adds	r2, #1
 8015b8c:	3301      	adds	r3, #1
 8015b8e:	6022      	str	r2, [r4, #0]
 8015b90:	9345      	str	r3, [sp, #276]	; 0x114
 8015b92:	e7d8      	b.n	8015b46 <__ssvfiscanf_r+0x4e>
 8015b94:	9141      	str	r1, [sp, #260]	; 0x104
 8015b96:	9143      	str	r1, [sp, #268]	; 0x10c
 8015b98:	7853      	ldrb	r3, [r2, #1]
 8015b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8015b9c:	bf02      	ittt	eq
 8015b9e:	2310      	moveq	r3, #16
 8015ba0:	1c95      	addeq	r5, r2, #2
 8015ba2:	9341      	streq	r3, [sp, #260]	; 0x104
 8015ba4:	220a      	movs	r2, #10
 8015ba6:	46aa      	mov	sl, r5
 8015ba8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8015bac:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8015bb0:	2b09      	cmp	r3, #9
 8015bb2:	d91d      	bls.n	8015bf0 <__ssvfiscanf_r+0xf8>
 8015bb4:	487e      	ldr	r0, [pc, #504]	; (8015db0 <__ssvfiscanf_r+0x2b8>)
 8015bb6:	2203      	movs	r2, #3
 8015bb8:	f7ea fb4a 	bl	8000250 <memchr>
 8015bbc:	b140      	cbz	r0, 8015bd0 <__ssvfiscanf_r+0xd8>
 8015bbe:	2301      	movs	r3, #1
 8015bc0:	eba0 0009 	sub.w	r0, r0, r9
 8015bc4:	fa03 f000 	lsl.w	r0, r3, r0
 8015bc8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015bca:	4318      	orrs	r0, r3
 8015bcc:	9041      	str	r0, [sp, #260]	; 0x104
 8015bce:	4655      	mov	r5, sl
 8015bd0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015bd4:	2b78      	cmp	r3, #120	; 0x78
 8015bd6:	d806      	bhi.n	8015be6 <__ssvfiscanf_r+0xee>
 8015bd8:	2b57      	cmp	r3, #87	; 0x57
 8015bda:	d810      	bhi.n	8015bfe <__ssvfiscanf_r+0x106>
 8015bdc:	2b25      	cmp	r3, #37	; 0x25
 8015bde:	d0c6      	beq.n	8015b6e <__ssvfiscanf_r+0x76>
 8015be0:	d856      	bhi.n	8015c90 <__ssvfiscanf_r+0x198>
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d064      	beq.n	8015cb0 <__ssvfiscanf_r+0x1b8>
 8015be6:	2303      	movs	r3, #3
 8015be8:	9347      	str	r3, [sp, #284]	; 0x11c
 8015bea:	230a      	movs	r3, #10
 8015bec:	9342      	str	r3, [sp, #264]	; 0x108
 8015bee:	e071      	b.n	8015cd4 <__ssvfiscanf_r+0x1dc>
 8015bf0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015bf2:	fb02 1103 	mla	r1, r2, r3, r1
 8015bf6:	3930      	subs	r1, #48	; 0x30
 8015bf8:	9143      	str	r1, [sp, #268]	; 0x10c
 8015bfa:	4655      	mov	r5, sl
 8015bfc:	e7d3      	b.n	8015ba6 <__ssvfiscanf_r+0xae>
 8015bfe:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8015c02:	2a20      	cmp	r2, #32
 8015c04:	d8ef      	bhi.n	8015be6 <__ssvfiscanf_r+0xee>
 8015c06:	a101      	add	r1, pc, #4	; (adr r1, 8015c0c <__ssvfiscanf_r+0x114>)
 8015c08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015c0c:	08015cbf 	.word	0x08015cbf
 8015c10:	08015be7 	.word	0x08015be7
 8015c14:	08015be7 	.word	0x08015be7
 8015c18:	08015d1d 	.word	0x08015d1d
 8015c1c:	08015be7 	.word	0x08015be7
 8015c20:	08015be7 	.word	0x08015be7
 8015c24:	08015be7 	.word	0x08015be7
 8015c28:	08015be7 	.word	0x08015be7
 8015c2c:	08015be7 	.word	0x08015be7
 8015c30:	08015be7 	.word	0x08015be7
 8015c34:	08015be7 	.word	0x08015be7
 8015c38:	08015d33 	.word	0x08015d33
 8015c3c:	08015d09 	.word	0x08015d09
 8015c40:	08015c97 	.word	0x08015c97
 8015c44:	08015c97 	.word	0x08015c97
 8015c48:	08015c97 	.word	0x08015c97
 8015c4c:	08015be7 	.word	0x08015be7
 8015c50:	08015d0d 	.word	0x08015d0d
 8015c54:	08015be7 	.word	0x08015be7
 8015c58:	08015be7 	.word	0x08015be7
 8015c5c:	08015be7 	.word	0x08015be7
 8015c60:	08015be7 	.word	0x08015be7
 8015c64:	08015d43 	.word	0x08015d43
 8015c68:	08015d15 	.word	0x08015d15
 8015c6c:	08015cb7 	.word	0x08015cb7
 8015c70:	08015be7 	.word	0x08015be7
 8015c74:	08015be7 	.word	0x08015be7
 8015c78:	08015d3f 	.word	0x08015d3f
 8015c7c:	08015be7 	.word	0x08015be7
 8015c80:	08015d09 	.word	0x08015d09
 8015c84:	08015be7 	.word	0x08015be7
 8015c88:	08015be7 	.word	0x08015be7
 8015c8c:	08015cbf 	.word	0x08015cbf
 8015c90:	3b45      	subs	r3, #69	; 0x45
 8015c92:	2b02      	cmp	r3, #2
 8015c94:	d8a7      	bhi.n	8015be6 <__ssvfiscanf_r+0xee>
 8015c96:	2305      	movs	r3, #5
 8015c98:	e01b      	b.n	8015cd2 <__ssvfiscanf_r+0x1da>
 8015c9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015c9c:	4621      	mov	r1, r4
 8015c9e:	4630      	mov	r0, r6
 8015ca0:	4798      	blx	r3
 8015ca2:	2800      	cmp	r0, #0
 8015ca4:	f43f af68 	beq.w	8015b78 <__ssvfiscanf_r+0x80>
 8015ca8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015caa:	2800      	cmp	r0, #0
 8015cac:	f040 808d 	bne.w	8015dca <__ssvfiscanf_r+0x2d2>
 8015cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015cb4:	e08f      	b.n	8015dd6 <__ssvfiscanf_r+0x2de>
 8015cb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015cb8:	f042 0220 	orr.w	r2, r2, #32
 8015cbc:	9241      	str	r2, [sp, #260]	; 0x104
 8015cbe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015cc4:	9241      	str	r2, [sp, #260]	; 0x104
 8015cc6:	2210      	movs	r2, #16
 8015cc8:	2b6f      	cmp	r3, #111	; 0x6f
 8015cca:	9242      	str	r2, [sp, #264]	; 0x108
 8015ccc:	bf34      	ite	cc
 8015cce:	2303      	movcc	r3, #3
 8015cd0:	2304      	movcs	r3, #4
 8015cd2:	9347      	str	r3, [sp, #284]	; 0x11c
 8015cd4:	6863      	ldr	r3, [r4, #4]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	dd42      	ble.n	8015d60 <__ssvfiscanf_r+0x268>
 8015cda:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015cdc:	0659      	lsls	r1, r3, #25
 8015cde:	d404      	bmi.n	8015cea <__ssvfiscanf_r+0x1f2>
 8015ce0:	6823      	ldr	r3, [r4, #0]
 8015ce2:	781a      	ldrb	r2, [r3, #0]
 8015ce4:	5cba      	ldrb	r2, [r7, r2]
 8015ce6:	0712      	lsls	r2, r2, #28
 8015ce8:	d441      	bmi.n	8015d6e <__ssvfiscanf_r+0x276>
 8015cea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8015cec:	2b02      	cmp	r3, #2
 8015cee:	dc50      	bgt.n	8015d92 <__ssvfiscanf_r+0x29a>
 8015cf0:	466b      	mov	r3, sp
 8015cf2:	4622      	mov	r2, r4
 8015cf4:	a941      	add	r1, sp, #260	; 0x104
 8015cf6:	4630      	mov	r0, r6
 8015cf8:	f000 fb64 	bl	80163c4 <_scanf_chars>
 8015cfc:	2801      	cmp	r0, #1
 8015cfe:	d06e      	beq.n	8015dde <__ssvfiscanf_r+0x2e6>
 8015d00:	2802      	cmp	r0, #2
 8015d02:	f47f af20 	bne.w	8015b46 <__ssvfiscanf_r+0x4e>
 8015d06:	e7cf      	b.n	8015ca8 <__ssvfiscanf_r+0x1b0>
 8015d08:	220a      	movs	r2, #10
 8015d0a:	e7dd      	b.n	8015cc8 <__ssvfiscanf_r+0x1d0>
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	9342      	str	r3, [sp, #264]	; 0x108
 8015d10:	2303      	movs	r3, #3
 8015d12:	e7de      	b.n	8015cd2 <__ssvfiscanf_r+0x1da>
 8015d14:	2308      	movs	r3, #8
 8015d16:	9342      	str	r3, [sp, #264]	; 0x108
 8015d18:	2304      	movs	r3, #4
 8015d1a:	e7da      	b.n	8015cd2 <__ssvfiscanf_r+0x1da>
 8015d1c:	4629      	mov	r1, r5
 8015d1e:	4640      	mov	r0, r8
 8015d20:	f000 fcb4 	bl	801668c <__sccl>
 8015d24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d2a:	9341      	str	r3, [sp, #260]	; 0x104
 8015d2c:	4605      	mov	r5, r0
 8015d2e:	2301      	movs	r3, #1
 8015d30:	e7cf      	b.n	8015cd2 <__ssvfiscanf_r+0x1da>
 8015d32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d38:	9341      	str	r3, [sp, #260]	; 0x104
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	e7c9      	b.n	8015cd2 <__ssvfiscanf_r+0x1da>
 8015d3e:	2302      	movs	r3, #2
 8015d40:	e7c7      	b.n	8015cd2 <__ssvfiscanf_r+0x1da>
 8015d42:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015d44:	06c3      	lsls	r3, r0, #27
 8015d46:	f53f aefe 	bmi.w	8015b46 <__ssvfiscanf_r+0x4e>
 8015d4a:	9b00      	ldr	r3, [sp, #0]
 8015d4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015d4e:	1d19      	adds	r1, r3, #4
 8015d50:	9100      	str	r1, [sp, #0]
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	f010 0f01 	tst.w	r0, #1
 8015d58:	bf14      	ite	ne
 8015d5a:	801a      	strhne	r2, [r3, #0]
 8015d5c:	601a      	streq	r2, [r3, #0]
 8015d5e:	e6f2      	b.n	8015b46 <__ssvfiscanf_r+0x4e>
 8015d60:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015d62:	4621      	mov	r1, r4
 8015d64:	4630      	mov	r0, r6
 8015d66:	4798      	blx	r3
 8015d68:	2800      	cmp	r0, #0
 8015d6a:	d0b6      	beq.n	8015cda <__ssvfiscanf_r+0x1e2>
 8015d6c:	e79c      	b.n	8015ca8 <__ssvfiscanf_r+0x1b0>
 8015d6e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015d70:	3201      	adds	r2, #1
 8015d72:	9245      	str	r2, [sp, #276]	; 0x114
 8015d74:	6862      	ldr	r2, [r4, #4]
 8015d76:	3a01      	subs	r2, #1
 8015d78:	2a00      	cmp	r2, #0
 8015d7a:	6062      	str	r2, [r4, #4]
 8015d7c:	dd02      	ble.n	8015d84 <__ssvfiscanf_r+0x28c>
 8015d7e:	3301      	adds	r3, #1
 8015d80:	6023      	str	r3, [r4, #0]
 8015d82:	e7ad      	b.n	8015ce0 <__ssvfiscanf_r+0x1e8>
 8015d84:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015d86:	4621      	mov	r1, r4
 8015d88:	4630      	mov	r0, r6
 8015d8a:	4798      	blx	r3
 8015d8c:	2800      	cmp	r0, #0
 8015d8e:	d0a7      	beq.n	8015ce0 <__ssvfiscanf_r+0x1e8>
 8015d90:	e78a      	b.n	8015ca8 <__ssvfiscanf_r+0x1b0>
 8015d92:	2b04      	cmp	r3, #4
 8015d94:	dc0e      	bgt.n	8015db4 <__ssvfiscanf_r+0x2bc>
 8015d96:	466b      	mov	r3, sp
 8015d98:	4622      	mov	r2, r4
 8015d9a:	a941      	add	r1, sp, #260	; 0x104
 8015d9c:	4630      	mov	r0, r6
 8015d9e:	f000 fb6b 	bl	8016478 <_scanf_i>
 8015da2:	e7ab      	b.n	8015cfc <__ssvfiscanf_r+0x204>
 8015da4:	08015a45 	.word	0x08015a45
 8015da8:	08015abf 	.word	0x08015abf
 8015dac:	080197ed 	.word	0x080197ed
 8015db0:	08019a08 	.word	0x08019a08
 8015db4:	4b0b      	ldr	r3, [pc, #44]	; (8015de4 <__ssvfiscanf_r+0x2ec>)
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	f43f aec5 	beq.w	8015b46 <__ssvfiscanf_r+0x4e>
 8015dbc:	466b      	mov	r3, sp
 8015dbe:	4622      	mov	r2, r4
 8015dc0:	a941      	add	r1, sp, #260	; 0x104
 8015dc2:	4630      	mov	r0, r6
 8015dc4:	f3af 8000 	nop.w
 8015dc8:	e798      	b.n	8015cfc <__ssvfiscanf_r+0x204>
 8015dca:	89a3      	ldrh	r3, [r4, #12]
 8015dcc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8015dd0:	bf18      	it	ne
 8015dd2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8015dd6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8015dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dde:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015de0:	e7f9      	b.n	8015dd6 <__ssvfiscanf_r+0x2de>
 8015de2:	bf00      	nop
 8015de4:	00000000 	.word	0x00000000

08015de8 <__sfputc_r>:
 8015de8:	6893      	ldr	r3, [r2, #8]
 8015dea:	3b01      	subs	r3, #1
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	b410      	push	{r4}
 8015df0:	6093      	str	r3, [r2, #8]
 8015df2:	da08      	bge.n	8015e06 <__sfputc_r+0x1e>
 8015df4:	6994      	ldr	r4, [r2, #24]
 8015df6:	42a3      	cmp	r3, r4
 8015df8:	db01      	blt.n	8015dfe <__sfputc_r+0x16>
 8015dfa:	290a      	cmp	r1, #10
 8015dfc:	d103      	bne.n	8015e06 <__sfputc_r+0x1e>
 8015dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e02:	f7ff bb0d 	b.w	8015420 <__swbuf_r>
 8015e06:	6813      	ldr	r3, [r2, #0]
 8015e08:	1c58      	adds	r0, r3, #1
 8015e0a:	6010      	str	r0, [r2, #0]
 8015e0c:	7019      	strb	r1, [r3, #0]
 8015e0e:	4608      	mov	r0, r1
 8015e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e14:	4770      	bx	lr

08015e16 <__sfputs_r>:
 8015e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e18:	4606      	mov	r6, r0
 8015e1a:	460f      	mov	r7, r1
 8015e1c:	4614      	mov	r4, r2
 8015e1e:	18d5      	adds	r5, r2, r3
 8015e20:	42ac      	cmp	r4, r5
 8015e22:	d101      	bne.n	8015e28 <__sfputs_r+0x12>
 8015e24:	2000      	movs	r0, #0
 8015e26:	e007      	b.n	8015e38 <__sfputs_r+0x22>
 8015e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e2c:	463a      	mov	r2, r7
 8015e2e:	4630      	mov	r0, r6
 8015e30:	f7ff ffda 	bl	8015de8 <__sfputc_r>
 8015e34:	1c43      	adds	r3, r0, #1
 8015e36:	d1f3      	bne.n	8015e20 <__sfputs_r+0xa>
 8015e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015e3c <_vfiprintf_r>:
 8015e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e40:	460d      	mov	r5, r1
 8015e42:	b09d      	sub	sp, #116	; 0x74
 8015e44:	4614      	mov	r4, r2
 8015e46:	4698      	mov	r8, r3
 8015e48:	4606      	mov	r6, r0
 8015e4a:	b118      	cbz	r0, 8015e54 <_vfiprintf_r+0x18>
 8015e4c:	6983      	ldr	r3, [r0, #24]
 8015e4e:	b90b      	cbnz	r3, 8015e54 <_vfiprintf_r+0x18>
 8015e50:	f7fe fe4a 	bl	8014ae8 <__sinit>
 8015e54:	4b89      	ldr	r3, [pc, #548]	; (801607c <_vfiprintf_r+0x240>)
 8015e56:	429d      	cmp	r5, r3
 8015e58:	d11b      	bne.n	8015e92 <_vfiprintf_r+0x56>
 8015e5a:	6875      	ldr	r5, [r6, #4]
 8015e5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015e5e:	07d9      	lsls	r1, r3, #31
 8015e60:	d405      	bmi.n	8015e6e <_vfiprintf_r+0x32>
 8015e62:	89ab      	ldrh	r3, [r5, #12]
 8015e64:	059a      	lsls	r2, r3, #22
 8015e66:	d402      	bmi.n	8015e6e <_vfiprintf_r+0x32>
 8015e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015e6a:	f7fe ff00 	bl	8014c6e <__retarget_lock_acquire_recursive>
 8015e6e:	89ab      	ldrh	r3, [r5, #12]
 8015e70:	071b      	lsls	r3, r3, #28
 8015e72:	d501      	bpl.n	8015e78 <_vfiprintf_r+0x3c>
 8015e74:	692b      	ldr	r3, [r5, #16]
 8015e76:	b9eb      	cbnz	r3, 8015eb4 <_vfiprintf_r+0x78>
 8015e78:	4629      	mov	r1, r5
 8015e7a:	4630      	mov	r0, r6
 8015e7c:	f7ff fb34 	bl	80154e8 <__swsetup_r>
 8015e80:	b1c0      	cbz	r0, 8015eb4 <_vfiprintf_r+0x78>
 8015e82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015e84:	07dc      	lsls	r4, r3, #31
 8015e86:	d50e      	bpl.n	8015ea6 <_vfiprintf_r+0x6a>
 8015e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e8c:	b01d      	add	sp, #116	; 0x74
 8015e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e92:	4b7b      	ldr	r3, [pc, #492]	; (8016080 <_vfiprintf_r+0x244>)
 8015e94:	429d      	cmp	r5, r3
 8015e96:	d101      	bne.n	8015e9c <_vfiprintf_r+0x60>
 8015e98:	68b5      	ldr	r5, [r6, #8]
 8015e9a:	e7df      	b.n	8015e5c <_vfiprintf_r+0x20>
 8015e9c:	4b79      	ldr	r3, [pc, #484]	; (8016084 <_vfiprintf_r+0x248>)
 8015e9e:	429d      	cmp	r5, r3
 8015ea0:	bf08      	it	eq
 8015ea2:	68f5      	ldreq	r5, [r6, #12]
 8015ea4:	e7da      	b.n	8015e5c <_vfiprintf_r+0x20>
 8015ea6:	89ab      	ldrh	r3, [r5, #12]
 8015ea8:	0598      	lsls	r0, r3, #22
 8015eaa:	d4ed      	bmi.n	8015e88 <_vfiprintf_r+0x4c>
 8015eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015eae:	f7fe fedf 	bl	8014c70 <__retarget_lock_release_recursive>
 8015eb2:	e7e9      	b.n	8015e88 <_vfiprintf_r+0x4c>
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8015eb8:	2320      	movs	r3, #32
 8015eba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ebe:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ec2:	2330      	movs	r3, #48	; 0x30
 8015ec4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016088 <_vfiprintf_r+0x24c>
 8015ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015ecc:	f04f 0901 	mov.w	r9, #1
 8015ed0:	4623      	mov	r3, r4
 8015ed2:	469a      	mov	sl, r3
 8015ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ed8:	b10a      	cbz	r2, 8015ede <_vfiprintf_r+0xa2>
 8015eda:	2a25      	cmp	r2, #37	; 0x25
 8015edc:	d1f9      	bne.n	8015ed2 <_vfiprintf_r+0x96>
 8015ede:	ebba 0b04 	subs.w	fp, sl, r4
 8015ee2:	d00b      	beq.n	8015efc <_vfiprintf_r+0xc0>
 8015ee4:	465b      	mov	r3, fp
 8015ee6:	4622      	mov	r2, r4
 8015ee8:	4629      	mov	r1, r5
 8015eea:	4630      	mov	r0, r6
 8015eec:	f7ff ff93 	bl	8015e16 <__sfputs_r>
 8015ef0:	3001      	adds	r0, #1
 8015ef2:	f000 80aa 	beq.w	801604a <_vfiprintf_r+0x20e>
 8015ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ef8:	445a      	add	r2, fp
 8015efa:	9209      	str	r2, [sp, #36]	; 0x24
 8015efc:	f89a 3000 	ldrb.w	r3, [sl]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	f000 80a2 	beq.w	801604a <_vfiprintf_r+0x20e>
 8015f06:	2300      	movs	r3, #0
 8015f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015f0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f10:	f10a 0a01 	add.w	sl, sl, #1
 8015f14:	9304      	str	r3, [sp, #16]
 8015f16:	9307      	str	r3, [sp, #28]
 8015f18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015f1c:	931a      	str	r3, [sp, #104]	; 0x68
 8015f1e:	4654      	mov	r4, sl
 8015f20:	2205      	movs	r2, #5
 8015f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f26:	4858      	ldr	r0, [pc, #352]	; (8016088 <_vfiprintf_r+0x24c>)
 8015f28:	f7ea f992 	bl	8000250 <memchr>
 8015f2c:	9a04      	ldr	r2, [sp, #16]
 8015f2e:	b9d8      	cbnz	r0, 8015f68 <_vfiprintf_r+0x12c>
 8015f30:	06d1      	lsls	r1, r2, #27
 8015f32:	bf44      	itt	mi
 8015f34:	2320      	movmi	r3, #32
 8015f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f3a:	0713      	lsls	r3, r2, #28
 8015f3c:	bf44      	itt	mi
 8015f3e:	232b      	movmi	r3, #43	; 0x2b
 8015f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f44:	f89a 3000 	ldrb.w	r3, [sl]
 8015f48:	2b2a      	cmp	r3, #42	; 0x2a
 8015f4a:	d015      	beq.n	8015f78 <_vfiprintf_r+0x13c>
 8015f4c:	9a07      	ldr	r2, [sp, #28]
 8015f4e:	4654      	mov	r4, sl
 8015f50:	2000      	movs	r0, #0
 8015f52:	f04f 0c0a 	mov.w	ip, #10
 8015f56:	4621      	mov	r1, r4
 8015f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f5c:	3b30      	subs	r3, #48	; 0x30
 8015f5e:	2b09      	cmp	r3, #9
 8015f60:	d94e      	bls.n	8016000 <_vfiprintf_r+0x1c4>
 8015f62:	b1b0      	cbz	r0, 8015f92 <_vfiprintf_r+0x156>
 8015f64:	9207      	str	r2, [sp, #28]
 8015f66:	e014      	b.n	8015f92 <_vfiprintf_r+0x156>
 8015f68:	eba0 0308 	sub.w	r3, r0, r8
 8015f6c:	fa09 f303 	lsl.w	r3, r9, r3
 8015f70:	4313      	orrs	r3, r2
 8015f72:	9304      	str	r3, [sp, #16]
 8015f74:	46a2      	mov	sl, r4
 8015f76:	e7d2      	b.n	8015f1e <_vfiprintf_r+0xe2>
 8015f78:	9b03      	ldr	r3, [sp, #12]
 8015f7a:	1d19      	adds	r1, r3, #4
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	9103      	str	r1, [sp, #12]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	bfbb      	ittet	lt
 8015f84:	425b      	neglt	r3, r3
 8015f86:	f042 0202 	orrlt.w	r2, r2, #2
 8015f8a:	9307      	strge	r3, [sp, #28]
 8015f8c:	9307      	strlt	r3, [sp, #28]
 8015f8e:	bfb8      	it	lt
 8015f90:	9204      	strlt	r2, [sp, #16]
 8015f92:	7823      	ldrb	r3, [r4, #0]
 8015f94:	2b2e      	cmp	r3, #46	; 0x2e
 8015f96:	d10c      	bne.n	8015fb2 <_vfiprintf_r+0x176>
 8015f98:	7863      	ldrb	r3, [r4, #1]
 8015f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8015f9c:	d135      	bne.n	801600a <_vfiprintf_r+0x1ce>
 8015f9e:	9b03      	ldr	r3, [sp, #12]
 8015fa0:	1d1a      	adds	r2, r3, #4
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	9203      	str	r2, [sp, #12]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	bfb8      	it	lt
 8015faa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015fae:	3402      	adds	r4, #2
 8015fb0:	9305      	str	r3, [sp, #20]
 8015fb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016098 <_vfiprintf_r+0x25c>
 8015fb6:	7821      	ldrb	r1, [r4, #0]
 8015fb8:	2203      	movs	r2, #3
 8015fba:	4650      	mov	r0, sl
 8015fbc:	f7ea f948 	bl	8000250 <memchr>
 8015fc0:	b140      	cbz	r0, 8015fd4 <_vfiprintf_r+0x198>
 8015fc2:	2340      	movs	r3, #64	; 0x40
 8015fc4:	eba0 000a 	sub.w	r0, r0, sl
 8015fc8:	fa03 f000 	lsl.w	r0, r3, r0
 8015fcc:	9b04      	ldr	r3, [sp, #16]
 8015fce:	4303      	orrs	r3, r0
 8015fd0:	3401      	adds	r4, #1
 8015fd2:	9304      	str	r3, [sp, #16]
 8015fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fd8:	482c      	ldr	r0, [pc, #176]	; (801608c <_vfiprintf_r+0x250>)
 8015fda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015fde:	2206      	movs	r2, #6
 8015fe0:	f7ea f936 	bl	8000250 <memchr>
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	d03f      	beq.n	8016068 <_vfiprintf_r+0x22c>
 8015fe8:	4b29      	ldr	r3, [pc, #164]	; (8016090 <_vfiprintf_r+0x254>)
 8015fea:	bb1b      	cbnz	r3, 8016034 <_vfiprintf_r+0x1f8>
 8015fec:	9b03      	ldr	r3, [sp, #12]
 8015fee:	3307      	adds	r3, #7
 8015ff0:	f023 0307 	bic.w	r3, r3, #7
 8015ff4:	3308      	adds	r3, #8
 8015ff6:	9303      	str	r3, [sp, #12]
 8015ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ffa:	443b      	add	r3, r7
 8015ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8015ffe:	e767      	b.n	8015ed0 <_vfiprintf_r+0x94>
 8016000:	fb0c 3202 	mla	r2, ip, r2, r3
 8016004:	460c      	mov	r4, r1
 8016006:	2001      	movs	r0, #1
 8016008:	e7a5      	b.n	8015f56 <_vfiprintf_r+0x11a>
 801600a:	2300      	movs	r3, #0
 801600c:	3401      	adds	r4, #1
 801600e:	9305      	str	r3, [sp, #20]
 8016010:	4619      	mov	r1, r3
 8016012:	f04f 0c0a 	mov.w	ip, #10
 8016016:	4620      	mov	r0, r4
 8016018:	f810 2b01 	ldrb.w	r2, [r0], #1
 801601c:	3a30      	subs	r2, #48	; 0x30
 801601e:	2a09      	cmp	r2, #9
 8016020:	d903      	bls.n	801602a <_vfiprintf_r+0x1ee>
 8016022:	2b00      	cmp	r3, #0
 8016024:	d0c5      	beq.n	8015fb2 <_vfiprintf_r+0x176>
 8016026:	9105      	str	r1, [sp, #20]
 8016028:	e7c3      	b.n	8015fb2 <_vfiprintf_r+0x176>
 801602a:	fb0c 2101 	mla	r1, ip, r1, r2
 801602e:	4604      	mov	r4, r0
 8016030:	2301      	movs	r3, #1
 8016032:	e7f0      	b.n	8016016 <_vfiprintf_r+0x1da>
 8016034:	ab03      	add	r3, sp, #12
 8016036:	9300      	str	r3, [sp, #0]
 8016038:	462a      	mov	r2, r5
 801603a:	4b16      	ldr	r3, [pc, #88]	; (8016094 <_vfiprintf_r+0x258>)
 801603c:	a904      	add	r1, sp, #16
 801603e:	4630      	mov	r0, r6
 8016040:	f3af 8000 	nop.w
 8016044:	4607      	mov	r7, r0
 8016046:	1c78      	adds	r0, r7, #1
 8016048:	d1d6      	bne.n	8015ff8 <_vfiprintf_r+0x1bc>
 801604a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801604c:	07d9      	lsls	r1, r3, #31
 801604e:	d405      	bmi.n	801605c <_vfiprintf_r+0x220>
 8016050:	89ab      	ldrh	r3, [r5, #12]
 8016052:	059a      	lsls	r2, r3, #22
 8016054:	d402      	bmi.n	801605c <_vfiprintf_r+0x220>
 8016056:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016058:	f7fe fe0a 	bl	8014c70 <__retarget_lock_release_recursive>
 801605c:	89ab      	ldrh	r3, [r5, #12]
 801605e:	065b      	lsls	r3, r3, #25
 8016060:	f53f af12 	bmi.w	8015e88 <_vfiprintf_r+0x4c>
 8016064:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016066:	e711      	b.n	8015e8c <_vfiprintf_r+0x50>
 8016068:	ab03      	add	r3, sp, #12
 801606a:	9300      	str	r3, [sp, #0]
 801606c:	462a      	mov	r2, r5
 801606e:	4b09      	ldr	r3, [pc, #36]	; (8016094 <_vfiprintf_r+0x258>)
 8016070:	a904      	add	r1, sp, #16
 8016072:	4630      	mov	r0, r6
 8016074:	f000 f880 	bl	8016178 <_printf_i>
 8016078:	e7e4      	b.n	8016044 <_vfiprintf_r+0x208>
 801607a:	bf00      	nop
 801607c:	08019910 	.word	0x08019910
 8016080:	08019930 	.word	0x08019930
 8016084:	080198f0 	.word	0x080198f0
 8016088:	08019a02 	.word	0x08019a02
 801608c:	08019a0c 	.word	0x08019a0c
 8016090:	00000000 	.word	0x00000000
 8016094:	08015e17 	.word	0x08015e17
 8016098:	08019a08 	.word	0x08019a08

0801609c <_printf_common>:
 801609c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160a0:	4616      	mov	r6, r2
 80160a2:	4699      	mov	r9, r3
 80160a4:	688a      	ldr	r2, [r1, #8]
 80160a6:	690b      	ldr	r3, [r1, #16]
 80160a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80160ac:	4293      	cmp	r3, r2
 80160ae:	bfb8      	it	lt
 80160b0:	4613      	movlt	r3, r2
 80160b2:	6033      	str	r3, [r6, #0]
 80160b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80160b8:	4607      	mov	r7, r0
 80160ba:	460c      	mov	r4, r1
 80160bc:	b10a      	cbz	r2, 80160c2 <_printf_common+0x26>
 80160be:	3301      	adds	r3, #1
 80160c0:	6033      	str	r3, [r6, #0]
 80160c2:	6823      	ldr	r3, [r4, #0]
 80160c4:	0699      	lsls	r1, r3, #26
 80160c6:	bf42      	ittt	mi
 80160c8:	6833      	ldrmi	r3, [r6, #0]
 80160ca:	3302      	addmi	r3, #2
 80160cc:	6033      	strmi	r3, [r6, #0]
 80160ce:	6825      	ldr	r5, [r4, #0]
 80160d0:	f015 0506 	ands.w	r5, r5, #6
 80160d4:	d106      	bne.n	80160e4 <_printf_common+0x48>
 80160d6:	f104 0a19 	add.w	sl, r4, #25
 80160da:	68e3      	ldr	r3, [r4, #12]
 80160dc:	6832      	ldr	r2, [r6, #0]
 80160de:	1a9b      	subs	r3, r3, r2
 80160e0:	42ab      	cmp	r3, r5
 80160e2:	dc26      	bgt.n	8016132 <_printf_common+0x96>
 80160e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80160e8:	1e13      	subs	r3, r2, #0
 80160ea:	6822      	ldr	r2, [r4, #0]
 80160ec:	bf18      	it	ne
 80160ee:	2301      	movne	r3, #1
 80160f0:	0692      	lsls	r2, r2, #26
 80160f2:	d42b      	bmi.n	801614c <_printf_common+0xb0>
 80160f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80160f8:	4649      	mov	r1, r9
 80160fa:	4638      	mov	r0, r7
 80160fc:	47c0      	blx	r8
 80160fe:	3001      	adds	r0, #1
 8016100:	d01e      	beq.n	8016140 <_printf_common+0xa4>
 8016102:	6823      	ldr	r3, [r4, #0]
 8016104:	68e5      	ldr	r5, [r4, #12]
 8016106:	6832      	ldr	r2, [r6, #0]
 8016108:	f003 0306 	and.w	r3, r3, #6
 801610c:	2b04      	cmp	r3, #4
 801610e:	bf08      	it	eq
 8016110:	1aad      	subeq	r5, r5, r2
 8016112:	68a3      	ldr	r3, [r4, #8]
 8016114:	6922      	ldr	r2, [r4, #16]
 8016116:	bf0c      	ite	eq
 8016118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801611c:	2500      	movne	r5, #0
 801611e:	4293      	cmp	r3, r2
 8016120:	bfc4      	itt	gt
 8016122:	1a9b      	subgt	r3, r3, r2
 8016124:	18ed      	addgt	r5, r5, r3
 8016126:	2600      	movs	r6, #0
 8016128:	341a      	adds	r4, #26
 801612a:	42b5      	cmp	r5, r6
 801612c:	d11a      	bne.n	8016164 <_printf_common+0xc8>
 801612e:	2000      	movs	r0, #0
 8016130:	e008      	b.n	8016144 <_printf_common+0xa8>
 8016132:	2301      	movs	r3, #1
 8016134:	4652      	mov	r2, sl
 8016136:	4649      	mov	r1, r9
 8016138:	4638      	mov	r0, r7
 801613a:	47c0      	blx	r8
 801613c:	3001      	adds	r0, #1
 801613e:	d103      	bne.n	8016148 <_printf_common+0xac>
 8016140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016148:	3501      	adds	r5, #1
 801614a:	e7c6      	b.n	80160da <_printf_common+0x3e>
 801614c:	18e1      	adds	r1, r4, r3
 801614e:	1c5a      	adds	r2, r3, #1
 8016150:	2030      	movs	r0, #48	; 0x30
 8016152:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016156:	4422      	add	r2, r4
 8016158:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801615c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016160:	3302      	adds	r3, #2
 8016162:	e7c7      	b.n	80160f4 <_printf_common+0x58>
 8016164:	2301      	movs	r3, #1
 8016166:	4622      	mov	r2, r4
 8016168:	4649      	mov	r1, r9
 801616a:	4638      	mov	r0, r7
 801616c:	47c0      	blx	r8
 801616e:	3001      	adds	r0, #1
 8016170:	d0e6      	beq.n	8016140 <_printf_common+0xa4>
 8016172:	3601      	adds	r6, #1
 8016174:	e7d9      	b.n	801612a <_printf_common+0x8e>
	...

08016178 <_printf_i>:
 8016178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801617c:	7e0f      	ldrb	r7, [r1, #24]
 801617e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016180:	2f78      	cmp	r7, #120	; 0x78
 8016182:	4691      	mov	r9, r2
 8016184:	4680      	mov	r8, r0
 8016186:	460c      	mov	r4, r1
 8016188:	469a      	mov	sl, r3
 801618a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801618e:	d807      	bhi.n	80161a0 <_printf_i+0x28>
 8016190:	2f62      	cmp	r7, #98	; 0x62
 8016192:	d80a      	bhi.n	80161aa <_printf_i+0x32>
 8016194:	2f00      	cmp	r7, #0
 8016196:	f000 80d8 	beq.w	801634a <_printf_i+0x1d2>
 801619a:	2f58      	cmp	r7, #88	; 0x58
 801619c:	f000 80a3 	beq.w	80162e6 <_printf_i+0x16e>
 80161a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80161a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80161a8:	e03a      	b.n	8016220 <_printf_i+0xa8>
 80161aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80161ae:	2b15      	cmp	r3, #21
 80161b0:	d8f6      	bhi.n	80161a0 <_printf_i+0x28>
 80161b2:	a101      	add	r1, pc, #4	; (adr r1, 80161b8 <_printf_i+0x40>)
 80161b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80161b8:	08016211 	.word	0x08016211
 80161bc:	08016225 	.word	0x08016225
 80161c0:	080161a1 	.word	0x080161a1
 80161c4:	080161a1 	.word	0x080161a1
 80161c8:	080161a1 	.word	0x080161a1
 80161cc:	080161a1 	.word	0x080161a1
 80161d0:	08016225 	.word	0x08016225
 80161d4:	080161a1 	.word	0x080161a1
 80161d8:	080161a1 	.word	0x080161a1
 80161dc:	080161a1 	.word	0x080161a1
 80161e0:	080161a1 	.word	0x080161a1
 80161e4:	08016331 	.word	0x08016331
 80161e8:	08016255 	.word	0x08016255
 80161ec:	08016313 	.word	0x08016313
 80161f0:	080161a1 	.word	0x080161a1
 80161f4:	080161a1 	.word	0x080161a1
 80161f8:	08016353 	.word	0x08016353
 80161fc:	080161a1 	.word	0x080161a1
 8016200:	08016255 	.word	0x08016255
 8016204:	080161a1 	.word	0x080161a1
 8016208:	080161a1 	.word	0x080161a1
 801620c:	0801631b 	.word	0x0801631b
 8016210:	682b      	ldr	r3, [r5, #0]
 8016212:	1d1a      	adds	r2, r3, #4
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	602a      	str	r2, [r5, #0]
 8016218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801621c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016220:	2301      	movs	r3, #1
 8016222:	e0a3      	b.n	801636c <_printf_i+0x1f4>
 8016224:	6820      	ldr	r0, [r4, #0]
 8016226:	6829      	ldr	r1, [r5, #0]
 8016228:	0606      	lsls	r6, r0, #24
 801622a:	f101 0304 	add.w	r3, r1, #4
 801622e:	d50a      	bpl.n	8016246 <_printf_i+0xce>
 8016230:	680e      	ldr	r6, [r1, #0]
 8016232:	602b      	str	r3, [r5, #0]
 8016234:	2e00      	cmp	r6, #0
 8016236:	da03      	bge.n	8016240 <_printf_i+0xc8>
 8016238:	232d      	movs	r3, #45	; 0x2d
 801623a:	4276      	negs	r6, r6
 801623c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016240:	485e      	ldr	r0, [pc, #376]	; (80163bc <_printf_i+0x244>)
 8016242:	230a      	movs	r3, #10
 8016244:	e019      	b.n	801627a <_printf_i+0x102>
 8016246:	680e      	ldr	r6, [r1, #0]
 8016248:	602b      	str	r3, [r5, #0]
 801624a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801624e:	bf18      	it	ne
 8016250:	b236      	sxthne	r6, r6
 8016252:	e7ef      	b.n	8016234 <_printf_i+0xbc>
 8016254:	682b      	ldr	r3, [r5, #0]
 8016256:	6820      	ldr	r0, [r4, #0]
 8016258:	1d19      	adds	r1, r3, #4
 801625a:	6029      	str	r1, [r5, #0]
 801625c:	0601      	lsls	r1, r0, #24
 801625e:	d501      	bpl.n	8016264 <_printf_i+0xec>
 8016260:	681e      	ldr	r6, [r3, #0]
 8016262:	e002      	b.n	801626a <_printf_i+0xf2>
 8016264:	0646      	lsls	r6, r0, #25
 8016266:	d5fb      	bpl.n	8016260 <_printf_i+0xe8>
 8016268:	881e      	ldrh	r6, [r3, #0]
 801626a:	4854      	ldr	r0, [pc, #336]	; (80163bc <_printf_i+0x244>)
 801626c:	2f6f      	cmp	r7, #111	; 0x6f
 801626e:	bf0c      	ite	eq
 8016270:	2308      	moveq	r3, #8
 8016272:	230a      	movne	r3, #10
 8016274:	2100      	movs	r1, #0
 8016276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801627a:	6865      	ldr	r5, [r4, #4]
 801627c:	60a5      	str	r5, [r4, #8]
 801627e:	2d00      	cmp	r5, #0
 8016280:	bfa2      	ittt	ge
 8016282:	6821      	ldrge	r1, [r4, #0]
 8016284:	f021 0104 	bicge.w	r1, r1, #4
 8016288:	6021      	strge	r1, [r4, #0]
 801628a:	b90e      	cbnz	r6, 8016290 <_printf_i+0x118>
 801628c:	2d00      	cmp	r5, #0
 801628e:	d04d      	beq.n	801632c <_printf_i+0x1b4>
 8016290:	4615      	mov	r5, r2
 8016292:	fbb6 f1f3 	udiv	r1, r6, r3
 8016296:	fb03 6711 	mls	r7, r3, r1, r6
 801629a:	5dc7      	ldrb	r7, [r0, r7]
 801629c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80162a0:	4637      	mov	r7, r6
 80162a2:	42bb      	cmp	r3, r7
 80162a4:	460e      	mov	r6, r1
 80162a6:	d9f4      	bls.n	8016292 <_printf_i+0x11a>
 80162a8:	2b08      	cmp	r3, #8
 80162aa:	d10b      	bne.n	80162c4 <_printf_i+0x14c>
 80162ac:	6823      	ldr	r3, [r4, #0]
 80162ae:	07de      	lsls	r6, r3, #31
 80162b0:	d508      	bpl.n	80162c4 <_printf_i+0x14c>
 80162b2:	6923      	ldr	r3, [r4, #16]
 80162b4:	6861      	ldr	r1, [r4, #4]
 80162b6:	4299      	cmp	r1, r3
 80162b8:	bfde      	ittt	le
 80162ba:	2330      	movle	r3, #48	; 0x30
 80162bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80162c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80162c4:	1b52      	subs	r2, r2, r5
 80162c6:	6122      	str	r2, [r4, #16]
 80162c8:	f8cd a000 	str.w	sl, [sp]
 80162cc:	464b      	mov	r3, r9
 80162ce:	aa03      	add	r2, sp, #12
 80162d0:	4621      	mov	r1, r4
 80162d2:	4640      	mov	r0, r8
 80162d4:	f7ff fee2 	bl	801609c <_printf_common>
 80162d8:	3001      	adds	r0, #1
 80162da:	d14c      	bne.n	8016376 <_printf_i+0x1fe>
 80162dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80162e0:	b004      	add	sp, #16
 80162e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162e6:	4835      	ldr	r0, [pc, #212]	; (80163bc <_printf_i+0x244>)
 80162e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80162ec:	6829      	ldr	r1, [r5, #0]
 80162ee:	6823      	ldr	r3, [r4, #0]
 80162f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80162f4:	6029      	str	r1, [r5, #0]
 80162f6:	061d      	lsls	r5, r3, #24
 80162f8:	d514      	bpl.n	8016324 <_printf_i+0x1ac>
 80162fa:	07df      	lsls	r7, r3, #31
 80162fc:	bf44      	itt	mi
 80162fe:	f043 0320 	orrmi.w	r3, r3, #32
 8016302:	6023      	strmi	r3, [r4, #0]
 8016304:	b91e      	cbnz	r6, 801630e <_printf_i+0x196>
 8016306:	6823      	ldr	r3, [r4, #0]
 8016308:	f023 0320 	bic.w	r3, r3, #32
 801630c:	6023      	str	r3, [r4, #0]
 801630e:	2310      	movs	r3, #16
 8016310:	e7b0      	b.n	8016274 <_printf_i+0xfc>
 8016312:	6823      	ldr	r3, [r4, #0]
 8016314:	f043 0320 	orr.w	r3, r3, #32
 8016318:	6023      	str	r3, [r4, #0]
 801631a:	2378      	movs	r3, #120	; 0x78
 801631c:	4828      	ldr	r0, [pc, #160]	; (80163c0 <_printf_i+0x248>)
 801631e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016322:	e7e3      	b.n	80162ec <_printf_i+0x174>
 8016324:	0659      	lsls	r1, r3, #25
 8016326:	bf48      	it	mi
 8016328:	b2b6      	uxthmi	r6, r6
 801632a:	e7e6      	b.n	80162fa <_printf_i+0x182>
 801632c:	4615      	mov	r5, r2
 801632e:	e7bb      	b.n	80162a8 <_printf_i+0x130>
 8016330:	682b      	ldr	r3, [r5, #0]
 8016332:	6826      	ldr	r6, [r4, #0]
 8016334:	6961      	ldr	r1, [r4, #20]
 8016336:	1d18      	adds	r0, r3, #4
 8016338:	6028      	str	r0, [r5, #0]
 801633a:	0635      	lsls	r5, r6, #24
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	d501      	bpl.n	8016344 <_printf_i+0x1cc>
 8016340:	6019      	str	r1, [r3, #0]
 8016342:	e002      	b.n	801634a <_printf_i+0x1d2>
 8016344:	0670      	lsls	r0, r6, #25
 8016346:	d5fb      	bpl.n	8016340 <_printf_i+0x1c8>
 8016348:	8019      	strh	r1, [r3, #0]
 801634a:	2300      	movs	r3, #0
 801634c:	6123      	str	r3, [r4, #16]
 801634e:	4615      	mov	r5, r2
 8016350:	e7ba      	b.n	80162c8 <_printf_i+0x150>
 8016352:	682b      	ldr	r3, [r5, #0]
 8016354:	1d1a      	adds	r2, r3, #4
 8016356:	602a      	str	r2, [r5, #0]
 8016358:	681d      	ldr	r5, [r3, #0]
 801635a:	6862      	ldr	r2, [r4, #4]
 801635c:	2100      	movs	r1, #0
 801635e:	4628      	mov	r0, r5
 8016360:	f7e9 ff76 	bl	8000250 <memchr>
 8016364:	b108      	cbz	r0, 801636a <_printf_i+0x1f2>
 8016366:	1b40      	subs	r0, r0, r5
 8016368:	6060      	str	r0, [r4, #4]
 801636a:	6863      	ldr	r3, [r4, #4]
 801636c:	6123      	str	r3, [r4, #16]
 801636e:	2300      	movs	r3, #0
 8016370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016374:	e7a8      	b.n	80162c8 <_printf_i+0x150>
 8016376:	6923      	ldr	r3, [r4, #16]
 8016378:	462a      	mov	r2, r5
 801637a:	4649      	mov	r1, r9
 801637c:	4640      	mov	r0, r8
 801637e:	47d0      	blx	sl
 8016380:	3001      	adds	r0, #1
 8016382:	d0ab      	beq.n	80162dc <_printf_i+0x164>
 8016384:	6823      	ldr	r3, [r4, #0]
 8016386:	079b      	lsls	r3, r3, #30
 8016388:	d413      	bmi.n	80163b2 <_printf_i+0x23a>
 801638a:	68e0      	ldr	r0, [r4, #12]
 801638c:	9b03      	ldr	r3, [sp, #12]
 801638e:	4298      	cmp	r0, r3
 8016390:	bfb8      	it	lt
 8016392:	4618      	movlt	r0, r3
 8016394:	e7a4      	b.n	80162e0 <_printf_i+0x168>
 8016396:	2301      	movs	r3, #1
 8016398:	4632      	mov	r2, r6
 801639a:	4649      	mov	r1, r9
 801639c:	4640      	mov	r0, r8
 801639e:	47d0      	blx	sl
 80163a0:	3001      	adds	r0, #1
 80163a2:	d09b      	beq.n	80162dc <_printf_i+0x164>
 80163a4:	3501      	adds	r5, #1
 80163a6:	68e3      	ldr	r3, [r4, #12]
 80163a8:	9903      	ldr	r1, [sp, #12]
 80163aa:	1a5b      	subs	r3, r3, r1
 80163ac:	42ab      	cmp	r3, r5
 80163ae:	dcf2      	bgt.n	8016396 <_printf_i+0x21e>
 80163b0:	e7eb      	b.n	801638a <_printf_i+0x212>
 80163b2:	2500      	movs	r5, #0
 80163b4:	f104 0619 	add.w	r6, r4, #25
 80163b8:	e7f5      	b.n	80163a6 <_printf_i+0x22e>
 80163ba:	bf00      	nop
 80163bc:	08019a13 	.word	0x08019a13
 80163c0:	08019a24 	.word	0x08019a24

080163c4 <_scanf_chars>:
 80163c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163c8:	4615      	mov	r5, r2
 80163ca:	688a      	ldr	r2, [r1, #8]
 80163cc:	4680      	mov	r8, r0
 80163ce:	460c      	mov	r4, r1
 80163d0:	b932      	cbnz	r2, 80163e0 <_scanf_chars+0x1c>
 80163d2:	698a      	ldr	r2, [r1, #24]
 80163d4:	2a00      	cmp	r2, #0
 80163d6:	bf0c      	ite	eq
 80163d8:	2201      	moveq	r2, #1
 80163da:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80163de:	608a      	str	r2, [r1, #8]
 80163e0:	6822      	ldr	r2, [r4, #0]
 80163e2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016474 <_scanf_chars+0xb0>
 80163e6:	06d1      	lsls	r1, r2, #27
 80163e8:	bf5f      	itttt	pl
 80163ea:	681a      	ldrpl	r2, [r3, #0]
 80163ec:	1d11      	addpl	r1, r2, #4
 80163ee:	6019      	strpl	r1, [r3, #0]
 80163f0:	6816      	ldrpl	r6, [r2, #0]
 80163f2:	2700      	movs	r7, #0
 80163f4:	69a0      	ldr	r0, [r4, #24]
 80163f6:	b188      	cbz	r0, 801641c <_scanf_chars+0x58>
 80163f8:	2801      	cmp	r0, #1
 80163fa:	d107      	bne.n	801640c <_scanf_chars+0x48>
 80163fc:	682a      	ldr	r2, [r5, #0]
 80163fe:	7811      	ldrb	r1, [r2, #0]
 8016400:	6962      	ldr	r2, [r4, #20]
 8016402:	5c52      	ldrb	r2, [r2, r1]
 8016404:	b952      	cbnz	r2, 801641c <_scanf_chars+0x58>
 8016406:	2f00      	cmp	r7, #0
 8016408:	d031      	beq.n	801646e <_scanf_chars+0xaa>
 801640a:	e022      	b.n	8016452 <_scanf_chars+0x8e>
 801640c:	2802      	cmp	r0, #2
 801640e:	d120      	bne.n	8016452 <_scanf_chars+0x8e>
 8016410:	682b      	ldr	r3, [r5, #0]
 8016412:	781b      	ldrb	r3, [r3, #0]
 8016414:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016418:	071b      	lsls	r3, r3, #28
 801641a:	d41a      	bmi.n	8016452 <_scanf_chars+0x8e>
 801641c:	6823      	ldr	r3, [r4, #0]
 801641e:	06da      	lsls	r2, r3, #27
 8016420:	bf5e      	ittt	pl
 8016422:	682b      	ldrpl	r3, [r5, #0]
 8016424:	781b      	ldrbpl	r3, [r3, #0]
 8016426:	f806 3b01 	strbpl.w	r3, [r6], #1
 801642a:	682a      	ldr	r2, [r5, #0]
 801642c:	686b      	ldr	r3, [r5, #4]
 801642e:	3201      	adds	r2, #1
 8016430:	602a      	str	r2, [r5, #0]
 8016432:	68a2      	ldr	r2, [r4, #8]
 8016434:	3b01      	subs	r3, #1
 8016436:	3a01      	subs	r2, #1
 8016438:	606b      	str	r3, [r5, #4]
 801643a:	3701      	adds	r7, #1
 801643c:	60a2      	str	r2, [r4, #8]
 801643e:	b142      	cbz	r2, 8016452 <_scanf_chars+0x8e>
 8016440:	2b00      	cmp	r3, #0
 8016442:	dcd7      	bgt.n	80163f4 <_scanf_chars+0x30>
 8016444:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016448:	4629      	mov	r1, r5
 801644a:	4640      	mov	r0, r8
 801644c:	4798      	blx	r3
 801644e:	2800      	cmp	r0, #0
 8016450:	d0d0      	beq.n	80163f4 <_scanf_chars+0x30>
 8016452:	6823      	ldr	r3, [r4, #0]
 8016454:	f013 0310 	ands.w	r3, r3, #16
 8016458:	d105      	bne.n	8016466 <_scanf_chars+0xa2>
 801645a:	68e2      	ldr	r2, [r4, #12]
 801645c:	3201      	adds	r2, #1
 801645e:	60e2      	str	r2, [r4, #12]
 8016460:	69a2      	ldr	r2, [r4, #24]
 8016462:	b102      	cbz	r2, 8016466 <_scanf_chars+0xa2>
 8016464:	7033      	strb	r3, [r6, #0]
 8016466:	6923      	ldr	r3, [r4, #16]
 8016468:	443b      	add	r3, r7
 801646a:	6123      	str	r3, [r4, #16]
 801646c:	2000      	movs	r0, #0
 801646e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016472:	bf00      	nop
 8016474:	080197ed 	.word	0x080197ed

08016478 <_scanf_i>:
 8016478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801647c:	4698      	mov	r8, r3
 801647e:	4b76      	ldr	r3, [pc, #472]	; (8016658 <_scanf_i+0x1e0>)
 8016480:	460c      	mov	r4, r1
 8016482:	4682      	mov	sl, r0
 8016484:	4616      	mov	r6, r2
 8016486:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801648a:	b087      	sub	sp, #28
 801648c:	ab03      	add	r3, sp, #12
 801648e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016492:	4b72      	ldr	r3, [pc, #456]	; (801665c <_scanf_i+0x1e4>)
 8016494:	69a1      	ldr	r1, [r4, #24]
 8016496:	4a72      	ldr	r2, [pc, #456]	; (8016660 <_scanf_i+0x1e8>)
 8016498:	2903      	cmp	r1, #3
 801649a:	bf18      	it	ne
 801649c:	461a      	movne	r2, r3
 801649e:	68a3      	ldr	r3, [r4, #8]
 80164a0:	9201      	str	r2, [sp, #4]
 80164a2:	1e5a      	subs	r2, r3, #1
 80164a4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80164a8:	bf88      	it	hi
 80164aa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80164ae:	4627      	mov	r7, r4
 80164b0:	bf82      	ittt	hi
 80164b2:	eb03 0905 	addhi.w	r9, r3, r5
 80164b6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80164ba:	60a3      	strhi	r3, [r4, #8]
 80164bc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80164c0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80164c4:	bf98      	it	ls
 80164c6:	f04f 0900 	movls.w	r9, #0
 80164ca:	6023      	str	r3, [r4, #0]
 80164cc:	463d      	mov	r5, r7
 80164ce:	f04f 0b00 	mov.w	fp, #0
 80164d2:	6831      	ldr	r1, [r6, #0]
 80164d4:	ab03      	add	r3, sp, #12
 80164d6:	7809      	ldrb	r1, [r1, #0]
 80164d8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80164dc:	2202      	movs	r2, #2
 80164de:	f7e9 feb7 	bl	8000250 <memchr>
 80164e2:	b328      	cbz	r0, 8016530 <_scanf_i+0xb8>
 80164e4:	f1bb 0f01 	cmp.w	fp, #1
 80164e8:	d159      	bne.n	801659e <_scanf_i+0x126>
 80164ea:	6862      	ldr	r2, [r4, #4]
 80164ec:	b92a      	cbnz	r2, 80164fa <_scanf_i+0x82>
 80164ee:	6822      	ldr	r2, [r4, #0]
 80164f0:	2308      	movs	r3, #8
 80164f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80164f6:	6063      	str	r3, [r4, #4]
 80164f8:	6022      	str	r2, [r4, #0]
 80164fa:	6822      	ldr	r2, [r4, #0]
 80164fc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016500:	6022      	str	r2, [r4, #0]
 8016502:	68a2      	ldr	r2, [r4, #8]
 8016504:	1e51      	subs	r1, r2, #1
 8016506:	60a1      	str	r1, [r4, #8]
 8016508:	b192      	cbz	r2, 8016530 <_scanf_i+0xb8>
 801650a:	6832      	ldr	r2, [r6, #0]
 801650c:	1c51      	adds	r1, r2, #1
 801650e:	6031      	str	r1, [r6, #0]
 8016510:	7812      	ldrb	r2, [r2, #0]
 8016512:	f805 2b01 	strb.w	r2, [r5], #1
 8016516:	6872      	ldr	r2, [r6, #4]
 8016518:	3a01      	subs	r2, #1
 801651a:	2a00      	cmp	r2, #0
 801651c:	6072      	str	r2, [r6, #4]
 801651e:	dc07      	bgt.n	8016530 <_scanf_i+0xb8>
 8016520:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016524:	4631      	mov	r1, r6
 8016526:	4650      	mov	r0, sl
 8016528:	4790      	blx	r2
 801652a:	2800      	cmp	r0, #0
 801652c:	f040 8085 	bne.w	801663a <_scanf_i+0x1c2>
 8016530:	f10b 0b01 	add.w	fp, fp, #1
 8016534:	f1bb 0f03 	cmp.w	fp, #3
 8016538:	d1cb      	bne.n	80164d2 <_scanf_i+0x5a>
 801653a:	6863      	ldr	r3, [r4, #4]
 801653c:	b90b      	cbnz	r3, 8016542 <_scanf_i+0xca>
 801653e:	230a      	movs	r3, #10
 8016540:	6063      	str	r3, [r4, #4]
 8016542:	6863      	ldr	r3, [r4, #4]
 8016544:	4947      	ldr	r1, [pc, #284]	; (8016664 <_scanf_i+0x1ec>)
 8016546:	6960      	ldr	r0, [r4, #20]
 8016548:	1ac9      	subs	r1, r1, r3
 801654a:	f000 f89f 	bl	801668c <__sccl>
 801654e:	f04f 0b00 	mov.w	fp, #0
 8016552:	68a3      	ldr	r3, [r4, #8]
 8016554:	6822      	ldr	r2, [r4, #0]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d03d      	beq.n	80165d6 <_scanf_i+0x15e>
 801655a:	6831      	ldr	r1, [r6, #0]
 801655c:	6960      	ldr	r0, [r4, #20]
 801655e:	f891 c000 	ldrb.w	ip, [r1]
 8016562:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016566:	2800      	cmp	r0, #0
 8016568:	d035      	beq.n	80165d6 <_scanf_i+0x15e>
 801656a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801656e:	d124      	bne.n	80165ba <_scanf_i+0x142>
 8016570:	0510      	lsls	r0, r2, #20
 8016572:	d522      	bpl.n	80165ba <_scanf_i+0x142>
 8016574:	f10b 0b01 	add.w	fp, fp, #1
 8016578:	f1b9 0f00 	cmp.w	r9, #0
 801657c:	d003      	beq.n	8016586 <_scanf_i+0x10e>
 801657e:	3301      	adds	r3, #1
 8016580:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8016584:	60a3      	str	r3, [r4, #8]
 8016586:	6873      	ldr	r3, [r6, #4]
 8016588:	3b01      	subs	r3, #1
 801658a:	2b00      	cmp	r3, #0
 801658c:	6073      	str	r3, [r6, #4]
 801658e:	dd1b      	ble.n	80165c8 <_scanf_i+0x150>
 8016590:	6833      	ldr	r3, [r6, #0]
 8016592:	3301      	adds	r3, #1
 8016594:	6033      	str	r3, [r6, #0]
 8016596:	68a3      	ldr	r3, [r4, #8]
 8016598:	3b01      	subs	r3, #1
 801659a:	60a3      	str	r3, [r4, #8]
 801659c:	e7d9      	b.n	8016552 <_scanf_i+0xda>
 801659e:	f1bb 0f02 	cmp.w	fp, #2
 80165a2:	d1ae      	bne.n	8016502 <_scanf_i+0x8a>
 80165a4:	6822      	ldr	r2, [r4, #0]
 80165a6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80165aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80165ae:	d1bf      	bne.n	8016530 <_scanf_i+0xb8>
 80165b0:	2310      	movs	r3, #16
 80165b2:	6063      	str	r3, [r4, #4]
 80165b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80165b8:	e7a2      	b.n	8016500 <_scanf_i+0x88>
 80165ba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80165be:	6022      	str	r2, [r4, #0]
 80165c0:	780b      	ldrb	r3, [r1, #0]
 80165c2:	f805 3b01 	strb.w	r3, [r5], #1
 80165c6:	e7de      	b.n	8016586 <_scanf_i+0x10e>
 80165c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80165cc:	4631      	mov	r1, r6
 80165ce:	4650      	mov	r0, sl
 80165d0:	4798      	blx	r3
 80165d2:	2800      	cmp	r0, #0
 80165d4:	d0df      	beq.n	8016596 <_scanf_i+0x11e>
 80165d6:	6823      	ldr	r3, [r4, #0]
 80165d8:	05db      	lsls	r3, r3, #23
 80165da:	d50d      	bpl.n	80165f8 <_scanf_i+0x180>
 80165dc:	42bd      	cmp	r5, r7
 80165de:	d909      	bls.n	80165f4 <_scanf_i+0x17c>
 80165e0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80165e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165e8:	4632      	mov	r2, r6
 80165ea:	4650      	mov	r0, sl
 80165ec:	4798      	blx	r3
 80165ee:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80165f2:	464d      	mov	r5, r9
 80165f4:	42bd      	cmp	r5, r7
 80165f6:	d02d      	beq.n	8016654 <_scanf_i+0x1dc>
 80165f8:	6822      	ldr	r2, [r4, #0]
 80165fa:	f012 0210 	ands.w	r2, r2, #16
 80165fe:	d113      	bne.n	8016628 <_scanf_i+0x1b0>
 8016600:	702a      	strb	r2, [r5, #0]
 8016602:	6863      	ldr	r3, [r4, #4]
 8016604:	9e01      	ldr	r6, [sp, #4]
 8016606:	4639      	mov	r1, r7
 8016608:	4650      	mov	r0, sl
 801660a:	47b0      	blx	r6
 801660c:	6821      	ldr	r1, [r4, #0]
 801660e:	f8d8 3000 	ldr.w	r3, [r8]
 8016612:	f011 0f20 	tst.w	r1, #32
 8016616:	d013      	beq.n	8016640 <_scanf_i+0x1c8>
 8016618:	1d1a      	adds	r2, r3, #4
 801661a:	f8c8 2000 	str.w	r2, [r8]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	6018      	str	r0, [r3, #0]
 8016622:	68e3      	ldr	r3, [r4, #12]
 8016624:	3301      	adds	r3, #1
 8016626:	60e3      	str	r3, [r4, #12]
 8016628:	1bed      	subs	r5, r5, r7
 801662a:	44ab      	add	fp, r5
 801662c:	6925      	ldr	r5, [r4, #16]
 801662e:	445d      	add	r5, fp
 8016630:	6125      	str	r5, [r4, #16]
 8016632:	2000      	movs	r0, #0
 8016634:	b007      	add	sp, #28
 8016636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801663a:	f04f 0b00 	mov.w	fp, #0
 801663e:	e7ca      	b.n	80165d6 <_scanf_i+0x15e>
 8016640:	1d1a      	adds	r2, r3, #4
 8016642:	f8c8 2000 	str.w	r2, [r8]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	f011 0f01 	tst.w	r1, #1
 801664c:	bf14      	ite	ne
 801664e:	8018      	strhne	r0, [r3, #0]
 8016650:	6018      	streq	r0, [r3, #0]
 8016652:	e7e6      	b.n	8016622 <_scanf_i+0x1aa>
 8016654:	2001      	movs	r0, #1
 8016656:	e7ed      	b.n	8016634 <_scanf_i+0x1bc>
 8016658:	08019690 	.word	0x08019690
 801665c:	080167e1 	.word	0x080167e1
 8016660:	080153e9 	.word	0x080153e9
 8016664:	08019a4e 	.word	0x08019a4e

08016668 <_read_r>:
 8016668:	b538      	push	{r3, r4, r5, lr}
 801666a:	4d07      	ldr	r5, [pc, #28]	; (8016688 <_read_r+0x20>)
 801666c:	4604      	mov	r4, r0
 801666e:	4608      	mov	r0, r1
 8016670:	4611      	mov	r1, r2
 8016672:	2200      	movs	r2, #0
 8016674:	602a      	str	r2, [r5, #0]
 8016676:	461a      	mov	r2, r3
 8016678:	f7ea fa70 	bl	8000b5c <_read>
 801667c:	1c43      	adds	r3, r0, #1
 801667e:	d102      	bne.n	8016686 <_read_r+0x1e>
 8016680:	682b      	ldr	r3, [r5, #0]
 8016682:	b103      	cbz	r3, 8016686 <_read_r+0x1e>
 8016684:	6023      	str	r3, [r4, #0]
 8016686:	bd38      	pop	{r3, r4, r5, pc}
 8016688:	20017c34 	.word	0x20017c34

0801668c <__sccl>:
 801668c:	b570      	push	{r4, r5, r6, lr}
 801668e:	780b      	ldrb	r3, [r1, #0]
 8016690:	4604      	mov	r4, r0
 8016692:	2b5e      	cmp	r3, #94	; 0x5e
 8016694:	bf0b      	itete	eq
 8016696:	784b      	ldrbeq	r3, [r1, #1]
 8016698:	1c48      	addne	r0, r1, #1
 801669a:	1c88      	addeq	r0, r1, #2
 801669c:	2200      	movne	r2, #0
 801669e:	bf08      	it	eq
 80166a0:	2201      	moveq	r2, #1
 80166a2:	1e61      	subs	r1, r4, #1
 80166a4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80166a8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80166ac:	42a9      	cmp	r1, r5
 80166ae:	d1fb      	bne.n	80166a8 <__sccl+0x1c>
 80166b0:	b90b      	cbnz	r3, 80166b6 <__sccl+0x2a>
 80166b2:	3801      	subs	r0, #1
 80166b4:	bd70      	pop	{r4, r5, r6, pc}
 80166b6:	f082 0201 	eor.w	r2, r2, #1
 80166ba:	54e2      	strb	r2, [r4, r3]
 80166bc:	4605      	mov	r5, r0
 80166be:	4628      	mov	r0, r5
 80166c0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80166c4:	292d      	cmp	r1, #45	; 0x2d
 80166c6:	d006      	beq.n	80166d6 <__sccl+0x4a>
 80166c8:	295d      	cmp	r1, #93	; 0x5d
 80166ca:	d0f3      	beq.n	80166b4 <__sccl+0x28>
 80166cc:	b909      	cbnz	r1, 80166d2 <__sccl+0x46>
 80166ce:	4628      	mov	r0, r5
 80166d0:	e7f0      	b.n	80166b4 <__sccl+0x28>
 80166d2:	460b      	mov	r3, r1
 80166d4:	e7f1      	b.n	80166ba <__sccl+0x2e>
 80166d6:	786e      	ldrb	r6, [r5, #1]
 80166d8:	2e5d      	cmp	r6, #93	; 0x5d
 80166da:	d0fa      	beq.n	80166d2 <__sccl+0x46>
 80166dc:	42b3      	cmp	r3, r6
 80166de:	dcf8      	bgt.n	80166d2 <__sccl+0x46>
 80166e0:	3502      	adds	r5, #2
 80166e2:	4619      	mov	r1, r3
 80166e4:	3101      	adds	r1, #1
 80166e6:	428e      	cmp	r6, r1
 80166e8:	5462      	strb	r2, [r4, r1]
 80166ea:	dcfb      	bgt.n	80166e4 <__sccl+0x58>
 80166ec:	1af1      	subs	r1, r6, r3
 80166ee:	3901      	subs	r1, #1
 80166f0:	1c58      	adds	r0, r3, #1
 80166f2:	42b3      	cmp	r3, r6
 80166f4:	bfa8      	it	ge
 80166f6:	2100      	movge	r1, #0
 80166f8:	1843      	adds	r3, r0, r1
 80166fa:	e7e0      	b.n	80166be <__sccl+0x32>

080166fc <_strtoul_l.constprop.0>:
 80166fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016700:	4f36      	ldr	r7, [pc, #216]	; (80167dc <_strtoul_l.constprop.0+0xe0>)
 8016702:	4686      	mov	lr, r0
 8016704:	460d      	mov	r5, r1
 8016706:	4628      	mov	r0, r5
 8016708:	f815 4b01 	ldrb.w	r4, [r5], #1
 801670c:	5de6      	ldrb	r6, [r4, r7]
 801670e:	f016 0608 	ands.w	r6, r6, #8
 8016712:	d1f8      	bne.n	8016706 <_strtoul_l.constprop.0+0xa>
 8016714:	2c2d      	cmp	r4, #45	; 0x2d
 8016716:	d12f      	bne.n	8016778 <_strtoul_l.constprop.0+0x7c>
 8016718:	782c      	ldrb	r4, [r5, #0]
 801671a:	2601      	movs	r6, #1
 801671c:	1c85      	adds	r5, r0, #2
 801671e:	2b00      	cmp	r3, #0
 8016720:	d057      	beq.n	80167d2 <_strtoul_l.constprop.0+0xd6>
 8016722:	2b10      	cmp	r3, #16
 8016724:	d109      	bne.n	801673a <_strtoul_l.constprop.0+0x3e>
 8016726:	2c30      	cmp	r4, #48	; 0x30
 8016728:	d107      	bne.n	801673a <_strtoul_l.constprop.0+0x3e>
 801672a:	7828      	ldrb	r0, [r5, #0]
 801672c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016730:	2858      	cmp	r0, #88	; 0x58
 8016732:	d149      	bne.n	80167c8 <_strtoul_l.constprop.0+0xcc>
 8016734:	786c      	ldrb	r4, [r5, #1]
 8016736:	2310      	movs	r3, #16
 8016738:	3502      	adds	r5, #2
 801673a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801673e:	2700      	movs	r7, #0
 8016740:	fbb8 f8f3 	udiv	r8, r8, r3
 8016744:	fb03 f908 	mul.w	r9, r3, r8
 8016748:	ea6f 0909 	mvn.w	r9, r9
 801674c:	4638      	mov	r0, r7
 801674e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016752:	f1bc 0f09 	cmp.w	ip, #9
 8016756:	d814      	bhi.n	8016782 <_strtoul_l.constprop.0+0x86>
 8016758:	4664      	mov	r4, ip
 801675a:	42a3      	cmp	r3, r4
 801675c:	dd22      	ble.n	80167a4 <_strtoul_l.constprop.0+0xa8>
 801675e:	2f00      	cmp	r7, #0
 8016760:	db1d      	blt.n	801679e <_strtoul_l.constprop.0+0xa2>
 8016762:	4580      	cmp	r8, r0
 8016764:	d31b      	bcc.n	801679e <_strtoul_l.constprop.0+0xa2>
 8016766:	d101      	bne.n	801676c <_strtoul_l.constprop.0+0x70>
 8016768:	45a1      	cmp	r9, r4
 801676a:	db18      	blt.n	801679e <_strtoul_l.constprop.0+0xa2>
 801676c:	fb00 4003 	mla	r0, r0, r3, r4
 8016770:	2701      	movs	r7, #1
 8016772:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016776:	e7ea      	b.n	801674e <_strtoul_l.constprop.0+0x52>
 8016778:	2c2b      	cmp	r4, #43	; 0x2b
 801677a:	bf04      	itt	eq
 801677c:	782c      	ldrbeq	r4, [r5, #0]
 801677e:	1c85      	addeq	r5, r0, #2
 8016780:	e7cd      	b.n	801671e <_strtoul_l.constprop.0+0x22>
 8016782:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016786:	f1bc 0f19 	cmp.w	ip, #25
 801678a:	d801      	bhi.n	8016790 <_strtoul_l.constprop.0+0x94>
 801678c:	3c37      	subs	r4, #55	; 0x37
 801678e:	e7e4      	b.n	801675a <_strtoul_l.constprop.0+0x5e>
 8016790:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016794:	f1bc 0f19 	cmp.w	ip, #25
 8016798:	d804      	bhi.n	80167a4 <_strtoul_l.constprop.0+0xa8>
 801679a:	3c57      	subs	r4, #87	; 0x57
 801679c:	e7dd      	b.n	801675a <_strtoul_l.constprop.0+0x5e>
 801679e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80167a2:	e7e6      	b.n	8016772 <_strtoul_l.constprop.0+0x76>
 80167a4:	2f00      	cmp	r7, #0
 80167a6:	da07      	bge.n	80167b8 <_strtoul_l.constprop.0+0xbc>
 80167a8:	2322      	movs	r3, #34	; 0x22
 80167aa:	f8ce 3000 	str.w	r3, [lr]
 80167ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80167b2:	b932      	cbnz	r2, 80167c2 <_strtoul_l.constprop.0+0xc6>
 80167b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167b8:	b106      	cbz	r6, 80167bc <_strtoul_l.constprop.0+0xc0>
 80167ba:	4240      	negs	r0, r0
 80167bc:	2a00      	cmp	r2, #0
 80167be:	d0f9      	beq.n	80167b4 <_strtoul_l.constprop.0+0xb8>
 80167c0:	b107      	cbz	r7, 80167c4 <_strtoul_l.constprop.0+0xc8>
 80167c2:	1e69      	subs	r1, r5, #1
 80167c4:	6011      	str	r1, [r2, #0]
 80167c6:	e7f5      	b.n	80167b4 <_strtoul_l.constprop.0+0xb8>
 80167c8:	2430      	movs	r4, #48	; 0x30
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d1b5      	bne.n	801673a <_strtoul_l.constprop.0+0x3e>
 80167ce:	2308      	movs	r3, #8
 80167d0:	e7b3      	b.n	801673a <_strtoul_l.constprop.0+0x3e>
 80167d2:	2c30      	cmp	r4, #48	; 0x30
 80167d4:	d0a9      	beq.n	801672a <_strtoul_l.constprop.0+0x2e>
 80167d6:	230a      	movs	r3, #10
 80167d8:	e7af      	b.n	801673a <_strtoul_l.constprop.0+0x3e>
 80167da:	bf00      	nop
 80167dc:	080197ed 	.word	0x080197ed

080167e0 <_strtoul_r>:
 80167e0:	f7ff bf8c 	b.w	80166fc <_strtoul_l.constprop.0>

080167e4 <__submore>:
 80167e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167e8:	460c      	mov	r4, r1
 80167ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80167ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80167f0:	4299      	cmp	r1, r3
 80167f2:	d11d      	bne.n	8016830 <__submore+0x4c>
 80167f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80167f8:	f7fe fae8 	bl	8014dcc <_malloc_r>
 80167fc:	b918      	cbnz	r0, 8016806 <__submore+0x22>
 80167fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801680a:	63a3      	str	r3, [r4, #56]	; 0x38
 801680c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016810:	6360      	str	r0, [r4, #52]	; 0x34
 8016812:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016816:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801681a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801681e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016822:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016826:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801682a:	6020      	str	r0, [r4, #0]
 801682c:	2000      	movs	r0, #0
 801682e:	e7e8      	b.n	8016802 <__submore+0x1e>
 8016830:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016832:	0077      	lsls	r7, r6, #1
 8016834:	463a      	mov	r2, r7
 8016836:	f000 f839 	bl	80168ac <_realloc_r>
 801683a:	4605      	mov	r5, r0
 801683c:	2800      	cmp	r0, #0
 801683e:	d0de      	beq.n	80167fe <__submore+0x1a>
 8016840:	eb00 0806 	add.w	r8, r0, r6
 8016844:	4601      	mov	r1, r0
 8016846:	4632      	mov	r2, r6
 8016848:	4640      	mov	r0, r8
 801684a:	f7fe fa22 	bl	8014c92 <memcpy>
 801684e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016852:	f8c4 8000 	str.w	r8, [r4]
 8016856:	e7e9      	b.n	801682c <__submore+0x48>

08016858 <abort>:
 8016858:	b508      	push	{r3, lr}
 801685a:	2006      	movs	r0, #6
 801685c:	f000 f87e 	bl	801695c <raise>
 8016860:	2001      	movs	r0, #1
 8016862:	f7ea f971 	bl	8000b48 <_exit>
	...

08016868 <_fstat_r>:
 8016868:	b538      	push	{r3, r4, r5, lr}
 801686a:	4d07      	ldr	r5, [pc, #28]	; (8016888 <_fstat_r+0x20>)
 801686c:	2300      	movs	r3, #0
 801686e:	4604      	mov	r4, r0
 8016870:	4608      	mov	r0, r1
 8016872:	4611      	mov	r1, r2
 8016874:	602b      	str	r3, [r5, #0]
 8016876:	f7ea f99a 	bl	8000bae <_fstat>
 801687a:	1c43      	adds	r3, r0, #1
 801687c:	d102      	bne.n	8016884 <_fstat_r+0x1c>
 801687e:	682b      	ldr	r3, [r5, #0]
 8016880:	b103      	cbz	r3, 8016884 <_fstat_r+0x1c>
 8016882:	6023      	str	r3, [r4, #0]
 8016884:	bd38      	pop	{r3, r4, r5, pc}
 8016886:	bf00      	nop
 8016888:	20017c34 	.word	0x20017c34

0801688c <_isatty_r>:
 801688c:	b538      	push	{r3, r4, r5, lr}
 801688e:	4d06      	ldr	r5, [pc, #24]	; (80168a8 <_isatty_r+0x1c>)
 8016890:	2300      	movs	r3, #0
 8016892:	4604      	mov	r4, r0
 8016894:	4608      	mov	r0, r1
 8016896:	602b      	str	r3, [r5, #0]
 8016898:	f7ea f999 	bl	8000bce <_isatty>
 801689c:	1c43      	adds	r3, r0, #1
 801689e:	d102      	bne.n	80168a6 <_isatty_r+0x1a>
 80168a0:	682b      	ldr	r3, [r5, #0]
 80168a2:	b103      	cbz	r3, 80168a6 <_isatty_r+0x1a>
 80168a4:	6023      	str	r3, [r4, #0]
 80168a6:	bd38      	pop	{r3, r4, r5, pc}
 80168a8:	20017c34 	.word	0x20017c34

080168ac <_realloc_r>:
 80168ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168b0:	4680      	mov	r8, r0
 80168b2:	4614      	mov	r4, r2
 80168b4:	460e      	mov	r6, r1
 80168b6:	b921      	cbnz	r1, 80168c2 <_realloc_r+0x16>
 80168b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80168bc:	4611      	mov	r1, r2
 80168be:	f7fe ba85 	b.w	8014dcc <_malloc_r>
 80168c2:	b92a      	cbnz	r2, 80168d0 <_realloc_r+0x24>
 80168c4:	f7fe fa16 	bl	8014cf4 <_free_r>
 80168c8:	4625      	mov	r5, r4
 80168ca:	4628      	mov	r0, r5
 80168cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168d0:	f000 f860 	bl	8016994 <_malloc_usable_size_r>
 80168d4:	4284      	cmp	r4, r0
 80168d6:	4607      	mov	r7, r0
 80168d8:	d802      	bhi.n	80168e0 <_realloc_r+0x34>
 80168da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80168de:	d812      	bhi.n	8016906 <_realloc_r+0x5a>
 80168e0:	4621      	mov	r1, r4
 80168e2:	4640      	mov	r0, r8
 80168e4:	f7fe fa72 	bl	8014dcc <_malloc_r>
 80168e8:	4605      	mov	r5, r0
 80168ea:	2800      	cmp	r0, #0
 80168ec:	d0ed      	beq.n	80168ca <_realloc_r+0x1e>
 80168ee:	42bc      	cmp	r4, r7
 80168f0:	4622      	mov	r2, r4
 80168f2:	4631      	mov	r1, r6
 80168f4:	bf28      	it	cs
 80168f6:	463a      	movcs	r2, r7
 80168f8:	f7fe f9cb 	bl	8014c92 <memcpy>
 80168fc:	4631      	mov	r1, r6
 80168fe:	4640      	mov	r0, r8
 8016900:	f7fe f9f8 	bl	8014cf4 <_free_r>
 8016904:	e7e1      	b.n	80168ca <_realloc_r+0x1e>
 8016906:	4635      	mov	r5, r6
 8016908:	e7df      	b.n	80168ca <_realloc_r+0x1e>

0801690a <_raise_r>:
 801690a:	291f      	cmp	r1, #31
 801690c:	b538      	push	{r3, r4, r5, lr}
 801690e:	4604      	mov	r4, r0
 8016910:	460d      	mov	r5, r1
 8016912:	d904      	bls.n	801691e <_raise_r+0x14>
 8016914:	2316      	movs	r3, #22
 8016916:	6003      	str	r3, [r0, #0]
 8016918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801691c:	bd38      	pop	{r3, r4, r5, pc}
 801691e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016920:	b112      	cbz	r2, 8016928 <_raise_r+0x1e>
 8016922:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016926:	b94b      	cbnz	r3, 801693c <_raise_r+0x32>
 8016928:	4620      	mov	r0, r4
 801692a:	f000 f831 	bl	8016990 <_getpid_r>
 801692e:	462a      	mov	r2, r5
 8016930:	4601      	mov	r1, r0
 8016932:	4620      	mov	r0, r4
 8016934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016938:	f000 b818 	b.w	801696c <_kill_r>
 801693c:	2b01      	cmp	r3, #1
 801693e:	d00a      	beq.n	8016956 <_raise_r+0x4c>
 8016940:	1c59      	adds	r1, r3, #1
 8016942:	d103      	bne.n	801694c <_raise_r+0x42>
 8016944:	2316      	movs	r3, #22
 8016946:	6003      	str	r3, [r0, #0]
 8016948:	2001      	movs	r0, #1
 801694a:	e7e7      	b.n	801691c <_raise_r+0x12>
 801694c:	2400      	movs	r4, #0
 801694e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016952:	4628      	mov	r0, r5
 8016954:	4798      	blx	r3
 8016956:	2000      	movs	r0, #0
 8016958:	e7e0      	b.n	801691c <_raise_r+0x12>
	...

0801695c <raise>:
 801695c:	4b02      	ldr	r3, [pc, #8]	; (8016968 <raise+0xc>)
 801695e:	4601      	mov	r1, r0
 8016960:	6818      	ldr	r0, [r3, #0]
 8016962:	f7ff bfd2 	b.w	801690a <_raise_r>
 8016966:	bf00      	nop
 8016968:	20000030 	.word	0x20000030

0801696c <_kill_r>:
 801696c:	b538      	push	{r3, r4, r5, lr}
 801696e:	4d07      	ldr	r5, [pc, #28]	; (801698c <_kill_r+0x20>)
 8016970:	2300      	movs	r3, #0
 8016972:	4604      	mov	r4, r0
 8016974:	4608      	mov	r0, r1
 8016976:	4611      	mov	r1, r2
 8016978:	602b      	str	r3, [r5, #0]
 801697a:	f7ea f8d3 	bl	8000b24 <_kill>
 801697e:	1c43      	adds	r3, r0, #1
 8016980:	d102      	bne.n	8016988 <_kill_r+0x1c>
 8016982:	682b      	ldr	r3, [r5, #0]
 8016984:	b103      	cbz	r3, 8016988 <_kill_r+0x1c>
 8016986:	6023      	str	r3, [r4, #0]
 8016988:	bd38      	pop	{r3, r4, r5, pc}
 801698a:	bf00      	nop
 801698c:	20017c34 	.word	0x20017c34

08016990 <_getpid_r>:
 8016990:	f7ea b8c0 	b.w	8000b14 <_getpid>

08016994 <_malloc_usable_size_r>:
 8016994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016998:	1f18      	subs	r0, r3, #4
 801699a:	2b00      	cmp	r3, #0
 801699c:	bfbc      	itt	lt
 801699e:	580b      	ldrlt	r3, [r1, r0]
 80169a0:	18c0      	addlt	r0, r0, r3
 80169a2:	4770      	bx	lr

080169a4 <_gettimeofday>:
 80169a4:	4b02      	ldr	r3, [pc, #8]	; (80169b0 <_gettimeofday+0xc>)
 80169a6:	2258      	movs	r2, #88	; 0x58
 80169a8:	601a      	str	r2, [r3, #0]
 80169aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80169ae:	4770      	bx	lr
 80169b0:	20017c34 	.word	0x20017c34

080169b4 <_init>:
 80169b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169b6:	bf00      	nop
 80169b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169ba:	bc08      	pop	{r3}
 80169bc:	469e      	mov	lr, r3
 80169be:	4770      	bx	lr

080169c0 <_fini>:
 80169c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169c2:	bf00      	nop
 80169c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169c6:	bc08      	pop	{r3}
 80169c8:	469e      	mov	lr, r3
 80169ca:	4770      	bx	lr
