
0328_ETH_env.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000103e8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c58  080105e8  080105e8  000205e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013240  08013240  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08013240  08013240  00023240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013248  08013248  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013248  08013248  00023248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801324c  0801324c  0002324c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08013250  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  080132e0  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  08013380  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000875c  200001d0  08013420  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000892c  08013420  0003892c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000231dd  00000000  00000000  000301fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000058d6  00000000  00000000  000533db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001880  00000000  00000000  00058cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000017b0  00000000  00000000  0005a538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000343f3  00000000  00000000  0005bce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000295dc  00000000  00000000  000900db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010c2a3  00000000  00000000  000b96b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001c595a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006d30  00000000  00000000  001c59ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d0 	.word	0x200001d0
 800021c:	00000000 	.word	0x00000000
 8000220:	080105d0 	.word	0x080105d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d4 	.word	0x200001d4
 800023c:	080105d0 	.word	0x080105d0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <_write>:

PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f8:	68b9      	ldr	r1, [r7, #8]
 80005fa:	4804      	ldr	r0, [pc, #16]	; (800060c <_write+0x28>)
 80005fc:	f003 fc04 	bl	8003e08 <HAL_UART_Transmit>
    return len;
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200001ec 	.word	0x200001ec

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fcb5 	bl	8000f82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f824 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 f8f2 	bl	8000804 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000620:	f000 f892 	bl	8000748 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000624:	f000 f8c0 	bl	80007a8 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000628:	f004 fbe8 	bl	8004dfc <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  printf("hello STM32 ! \n");
 800062c:	4809      	ldr	r0, [pc, #36]	; (8000654 <main+0x44>)
 800062e:	f00e ff8f 	bl	800f550 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000632:	f004 fd2f 	bl	8005094 <MX_LWIP_Process>

	  ethernetif_input(&gnetif);
 8000636:	4808      	ldr	r0, [pc, #32]	; (8000658 <main+0x48>)
 8000638:	f004 fea4 	bl	8005384 <ethernetif_input>
	  sys_check_timeouts();
 800063c:	f00c f966 	bl	800c90c <sys_check_timeouts>

	  printf("Current IP Address: %s\n", ipaddr_ntoa(&gnetif.ip_addr));
 8000640:	4806      	ldr	r0, [pc, #24]	; (800065c <main+0x4c>)
 8000642:	f00d ff11 	bl	800e468 <ip4addr_ntoa>
 8000646:	4603      	mov	r3, r0
 8000648:	4619      	mov	r1, r3
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <main+0x50>)
 800064c:	f00e fefa 	bl	800f444 <iprintf>
	  MX_LWIP_Process();
 8000650:	e7ef      	b.n	8000632 <main+0x22>
 8000652:	bf00      	nop
 8000654:	080105e8 	.word	0x080105e8
 8000658:	20000760 	.word	0x20000760
 800065c:	20000764 	.word	0x20000764
 8000660:	080105f8 	.word	0x080105f8

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2234      	movs	r2, #52	; 0x34
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f00e fede 	bl	800f434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000688:	f002 fa14 	bl	8002ab4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <SystemClock_Config+0xdc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a2b      	ldr	r2, [pc, #172]	; (8000740 <SystemClock_Config+0xdc>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b29      	ldr	r3, [pc, #164]	; (8000740 <SystemClock_Config+0xdc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <SystemClock_Config+0xe0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ac:	4a25      	ldr	r2, [pc, #148]	; (8000744 <SystemClock_Config+0xe0>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b23      	ldr	r3, [pc, #140]	; (8000744 <SystemClock_Config+0xe0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006d8:	2360      	movs	r3, #96	; 0x60
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 fa41 	bl	8002b74 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006f8:	f000 f926 	bl	8000948 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006fc:	f002 f9ea 	bl	8002ad4 <HAL_PWREx_EnableOverDrive>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000706:	f000 f91f 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2103      	movs	r1, #3
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fcd2 	bl	80030d0 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000732:	f000 f909 	bl	8000948 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	; 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 800074e:	4a15      	ldr	r2, [pc, #84]	; (80007a4 <MX_USART3_UART_Init+0x5c>)
 8000750:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART3_UART_Init+0x58>)
 800078c:	f003 faee 	bl	8003d6c <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000796:	f000 f8d7 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200001ec 	.word	0x200001ec
 80007a4:	40004800 	.word	0x40004800

080007a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	2206      	movs	r2, #6
 80007b8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007bc:	2202      	movs	r2, #2
 80007be:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c8:	2202      	movs	r2, #2
 80007ca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ec:	f002 f827 	bl	800283e <HAL_PCD_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007f6:	f000 f8a7 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000274 	.word	0x20000274

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	4b47      	ldr	r3, [pc, #284]	; (8000938 <MX_GPIO_Init+0x134>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a46      	ldr	r2, [pc, #280]	; (8000938 <MX_GPIO_Init+0x134>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b44      	ldr	r3, [pc, #272]	; (8000938 <MX_GPIO_Init+0x134>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	4b41      	ldr	r3, [pc, #260]	; (8000938 <MX_GPIO_Init+0x134>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a40      	ldr	r2, [pc, #256]	; (8000938 <MX_GPIO_Init+0x134>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b3e      	ldr	r3, [pc, #248]	; (8000938 <MX_GPIO_Init+0x134>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b3b      	ldr	r3, [pc, #236]	; (8000938 <MX_GPIO_Init+0x134>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a3a      	ldr	r2, [pc, #232]	; (8000938 <MX_GPIO_Init+0x134>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b38      	ldr	r3, [pc, #224]	; (8000938 <MX_GPIO_Init+0x134>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b35      	ldr	r3, [pc, #212]	; (8000938 <MX_GPIO_Init+0x134>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a34      	ldr	r2, [pc, #208]	; (8000938 <MX_GPIO_Init+0x134>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b32      	ldr	r3, [pc, #200]	; (8000938 <MX_GPIO_Init+0x134>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087a:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <MX_GPIO_Init+0x134>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a2e      	ldr	r2, [pc, #184]	; (8000938 <MX_GPIO_Init+0x134>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <MX_GPIO_Init+0x134>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000892:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_GPIO_Init+0x134>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a28      	ldr	r2, [pc, #160]	; (8000938 <MX_GPIO_Init+0x134>)
 8000898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b26      	ldr	r3, [pc, #152]	; (8000938 <MX_GPIO_Init+0x134>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f244 0181 	movw	r1, #16513	; 0x4081
 80008b0:	4822      	ldr	r0, [pc, #136]	; (800093c <MX_GPIO_Init+0x138>)
 80008b2:	f001 ffab 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2140      	movs	r1, #64	; 0x40
 80008ba:	4821      	ldr	r0, [pc, #132]	; (8000940 <MX_GPIO_Init+0x13c>)
 80008bc:	f001 ffa6 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	481b      	ldr	r0, [pc, #108]	; (8000944 <MX_GPIO_Init+0x140>)
 80008d8:	f001 fdec 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008dc:	f244 0381 	movw	r3, #16513	; 0x4081
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_GPIO_Init+0x138>)
 80008f6:	f001 fddd 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008fa:	2340      	movs	r3, #64	; 0x40
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	480b      	ldr	r0, [pc, #44]	; (8000940 <MX_GPIO_Init+0x13c>)
 8000912:	f001 fdcf 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_GPIO_Init+0x13c>)
 800092a:	f001 fdc3 	bl	80024b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092e:	bf00      	nop
 8000930:	3730      	adds	r7, #48	; 0x30
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40020400 	.word	0x40020400
 8000940:	40021800 	.word	0x40021800
 8000944:	40020800 	.word	0x40020800

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <HAL_MspInit+0x44>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <HAL_MspInit+0x44>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_MspInit+0x44>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_MspInit+0x44>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x44>)
 8000978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097c:	6453      	str	r3, [r2, #68]	; 0x44
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x44>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b0ae      	sub	sp, #184	; 0xb8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2290      	movs	r2, #144	; 0x90
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f00e fd39 	bl	800f434 <memset>
  if(huart->Instance==USART3)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <HAL_UART_MspInit+0xb4>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d13c      	bne.n	8000a46 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fd9e 	bl	800351c <HAL_RCCEx_PeriphCLKConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009e6:	f7ff ffaf 	bl	8000948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <HAL_UART_MspInit+0xb8>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <HAL_UART_MspInit+0xb8>)
 80009f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_UART_MspInit+0xb8>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_UART_MspInit+0xb8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <HAL_UART_MspInit+0xb8>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_UART_MspInit+0xb8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a34:	2307      	movs	r3, #7
 8000a36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <HAL_UART_MspInit+0xbc>)
 8000a42:	f001 fd37 	bl	80024b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a46:	bf00      	nop
 8000a48:	37b8      	adds	r7, #184	; 0xb8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40004800 	.word	0x40004800
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020c00 	.word	0x40020c00

08000a5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b0ae      	sub	sp, #184	; 0xb8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2290      	movs	r2, #144	; 0x90
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f00e fcd9 	bl	800f434 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a8a:	d159      	bne.n	8000b40 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fd3d 	bl	800351c <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000aa8:	f7ff ff4e 	bl	8000948 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <HAL_PCD_MspInit+0xec>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4a25      	ldr	r2, [pc, #148]	; (8000b48 <HAL_PCD_MspInit+0xec>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab8:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <HAL_PCD_MspInit+0xec>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ac4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ade:	230a      	movs	r3, #10
 8000ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4818      	ldr	r0, [pc, #96]	; (8000b4c <HAL_PCD_MspInit+0xf0>)
 8000aec:	f001 fce2 	bl	80024b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4810      	ldr	r0, [pc, #64]	; (8000b4c <HAL_PCD_MspInit+0xf0>)
 8000b0c:	f001 fcd2 	bl	80024b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <HAL_PCD_MspInit+0xec>)
 8000b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b14:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <HAL_PCD_MspInit+0xec>)
 8000b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1a:	6353      	str	r3, [r2, #52]	; 0x34
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_PCD_MspInit+0xec>)
 8000b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <HAL_PCD_MspInit+0xec>)
 8000b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_PCD_MspInit+0xec>)
 8000b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b32:	6453      	str	r3, [r2, #68]	; 0x44
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_PCD_MspInit+0xec>)
 8000b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	37b8      	adds	r7, #184	; 0xb8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 fa2e 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return 1;
 8000ba8:	2301      	movs	r3, #1
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <_kill>:

int _kill(int pid, int sig)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <_kill+0x20>)
 8000bc0:	2216      	movs	r2, #22
 8000bc2:	601a      	str	r2, [r3, #0]
  return -1;
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	2000891c 	.word	0x2000891c

08000bd8 <_exit>:

void _exit (int status)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ffe5 	bl	8000bb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bea:	e7fe      	b.n	8000bea <_exit+0x12>

08000bec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	e00a      	b.n	8000c14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bfe:	f3af 8000 	nop.w
 8000c02:	4601      	mov	r1, r0
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	1c5a      	adds	r2, r3, #1
 8000c08:	60ba      	str	r2, [r7, #8]
 8000c0a:	b2ca      	uxtb	r2, r1
 8000c0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbf0      	blt.n	8000bfe <_read+0x12>
  }

  return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_isatty>:

int _isatty(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b087      	sub	sp, #28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d205      	bcs.n	8000ccc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <_sbrk+0x6c>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	371c      	adds	r7, #28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	20080000 	.word	0x20080000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	20000754 	.word	0x20000754
 8000cf8:	20008930 	.word	0x20008930
 8000cfc:	2000891c 	.word	0x2000891c

08000d00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d28:	f7ff ffea 	bl	8000d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d2e:	490d      	ldr	r1, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d44:	4c0a      	ldr	r4, [pc, #40]	; (8000d70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d52:	f00e fb2d 	bl	800f3b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d56:	f7ff fc5b 	bl	8000610 <main>
  bx  lr    
 8000d5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d5c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d68:	08013250 	.word	0x08013250
  ldr r2, =_sbss
 8000d6c:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000d70:	2000892c 	.word	0x2000892c

08000d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC_IRQHandler>

08000d76 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00b      	beq.n	8000d9e <LAN8742_RegisterBusIO+0x28>
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d007      	beq.n	8000d9e <LAN8742_RegisterBusIO+0x28>
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <LAN8742_RegisterBusIO+0x28>
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d102      	bne.n	8000da4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000da2:	e014      	b.n	8000dce <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	691a      	ldr	r2, [r3, #16]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b086      	sub	sp, #24
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d139      	bne.n	8000e6a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2220      	movs	r2, #32
 8000e08:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	e01c      	b.n	8000e4a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	2112      	movs	r1, #18
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	4798      	blx	r3
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	da03      	bge.n	8000e2c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000e24:	f06f 0304 	mvn.w	r3, #4
 8000e28:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000e2a:	e00b      	b.n	8000e44 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d105      	bne.n	8000e44 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
         break;
 8000e42:	e005      	b.n	8000e50 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	3301      	adds	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	2b1f      	cmp	r3, #31
 8000e4e:	d9df      	bls.n	8000e10 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b1f      	cmp	r3, #31
 8000e56:	d902      	bls.n	8000e5e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000e58:	f06f 0302 	mvn.w	r3, #2
 8000e5c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2201      	movs	r2, #1
 8000e68:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000e6a:	693b      	ldr	r3, [r7, #16]
 }
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6810      	ldr	r0, [r2, #0]
 8000e88:	f107 020c 	add.w	r2, r7, #12
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	4798      	blx	r3
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	da02      	bge.n	8000e9c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e96:	f06f 0304 	mvn.w	r3, #4
 8000e9a:	e06e      	b.n	8000f7a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	6810      	ldr	r0, [r2, #0]
 8000ea4:	f107 020c 	add.w	r2, r7, #12
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4798      	blx	r3
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	da02      	bge.n	8000eb8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000eb2:	f06f 0304 	mvn.w	r3, #4
 8000eb6:	e060      	b.n	8000f7a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e059      	b.n	8000f7a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	6810      	ldr	r0, [r2, #0]
 8000ece:	f107 020c 	add.w	r2, r7, #12
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4798      	blx	r3
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da02      	bge.n	8000ee2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000edc:	f06f 0304 	mvn.w	r3, #4
 8000ee0:	e04b      	b.n	8000f7a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d11b      	bne.n	8000f24 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d006      	beq.n	8000f04 <LAN8742_GetLinkState+0x90>
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f00:	2302      	movs	r3, #2
 8000f02:	e03a      	b.n	8000f7a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e033      	b.n	8000f7a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	e02c      	b.n	8000f7a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f20:	2305      	movs	r3, #5
 8000f22:	e02a      	b.n	8000f7a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	6810      	ldr	r0, [r2, #0]
 8000f2c:	f107 020c 	add.w	r2, r7, #12
 8000f30:	211f      	movs	r1, #31
 8000f32:	4798      	blx	r3
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	da02      	bge.n	8000f40 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000f3a:	f06f 0304 	mvn.w	r3, #4
 8000f3e:	e01c      	b.n	8000f7a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	e015      	b.n	8000f7a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f003 031c 	and.w	r3, r3, #28
 8000f54:	2b18      	cmp	r3, #24
 8000f56:	d101      	bne.n	8000f5c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	e00e      	b.n	8000f7a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 031c 	and.w	r3, r3, #28
 8000f62:	2b08      	cmp	r3, #8
 8000f64:	d101      	bne.n	8000f6a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e007      	b.n	8000f7a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f003 031c 	and.w	r3, r3, #28
 8000f70:	2b14      	cmp	r3, #20
 8000f72:	d101      	bne.n	8000f78 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f74:	2304      	movs	r3, #4
 8000f76:	e000      	b.n	8000f7a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f78:	2305      	movs	r3, #5
    }
  }
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f86:	2003      	movs	r0, #3
 8000f88:	f000 f92e 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f000 f805 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f92:	f7ff fcdf 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x54>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x58>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f93b 	bl	8001236 <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd8:	f000 f911 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_InitTick+0x5c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000004 	.word	0x20000004

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008
 8001020:	20000758 	.word	0x20000758

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000758 	.word	0x20000758

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_Delay+0x44>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffde 	bl	8001024 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__NVIC_SetPriorityGrouping+0x40>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00
 80010c8:	05fa0000 	.word	0x05fa0000

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff47 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff5c 	bl	80010cc <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff8e 	bl	800113c <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffb0 	bl	80011a4 <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e086      	b.n	8001370 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001268:	2b00      	cmp	r3, #0
 800126a:	d106      	bne.n	800127a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2223      	movs	r2, #35	; 0x23
 8001270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f004 f8f5 	bl	8005464 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <HAL_ETH_Init+0x128>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a3e      	ldr	r2, [pc, #248]	; (8001378 <HAL_ETH_Init+0x128>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b3c      	ldr	r3, [pc, #240]	; (8001378 <HAL_ETH_Init+0x128>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001292:	4b3a      	ldr	r3, [pc, #232]	; (800137c <HAL_ETH_Init+0x12c>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4a39      	ldr	r2, [pc, #228]	; (800137c <HAL_ETH_Init+0x12c>)
 8001298:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800129c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800129e:	4b37      	ldr	r3, [pc, #220]	; (800137c <HAL_ETH_Init+0x12c>)
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	4935      	ldr	r1, [pc, #212]	; (800137c <HAL_ETH_Init+0x12c>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012ac:	4b33      	ldr	r3, [pc, #204]	; (800137c <HAL_ETH_Init+0x12c>)
 80012ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c8:	f7ff feac 	bl	8001024 <HAL_GetTick>
 80012cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012ce:	e011      	b.n	80012f4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012d0:	f7ff fea8 	bl	8001024 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012de:	d909      	bls.n	80012f4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2204      	movs	r2, #4
 80012e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	22e0      	movs	r2, #224	; 0xe0
 80012ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e03d      	b.n	8001370 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1e4      	bne.n	80012d0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 fe18 	bl	8001f3c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fec3 	bl	8002098 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 ff19 	bl	800214a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	461a      	mov	r2, r3
 800131e:	2100      	movs	r1, #0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 fe81 	bl	8002028 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001334:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_ETH_Init+0x130>)
 8001344:	430b      	orrs	r3, r1
 8001346:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800135a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2210      	movs	r2, #16
 800136a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800
 8001380:	00020060 	.word	0x00020060

08001384 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001392:	2b10      	cmp	r3, #16
 8001394:	d150      	bne.n	8001438 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2223      	movs	r2, #35	; 0x23
 800139a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2204      	movs	r2, #4
 80013a2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f9f9 	bl	800179c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f042 0208 	orr.w	r2, r2, #8
 80013b8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff fe3a 	bl	800103c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0204 	orr.w	r2, r2, #4
 80013de:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f7ff fe27 	bl	800103c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 fc3c 	bl	8001c74 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800140e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001412:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	f043 0302 	orr.w	r3, r3, #2
 8001426:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800142a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2223      	movs	r2, #35	; 0x23
 8001430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	e000      	b.n	800143a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
  }
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001450:	2b23      	cmp	r3, #35	; 0x23
 8001452:	d14a      	bne.n	80014ea <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2223      	movs	r2, #35	; 0x23
 8001458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800146e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001472:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	f023 0302 	bic.w	r3, r3, #2
 8001486:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800148a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0204 	bic.w	r2, r2, #4
 800149a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f7ff fdc9 	bl	800103c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 fbde 	bl	8001c74 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0208 	bic.w	r2, r2, #8
 80014c6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f7ff fdb3 	bl	800103c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2210      	movs	r2, #16
 80014e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e000      	b.n	80014ec <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
  }
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d109      	bne.n	800151a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150c:	f043 0201 	orr.w	r2, r3, #1
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e07c      	b.n	8001614 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001520:	2b23      	cmp	r3, #35	; 0x23
 8001522:	d176      	bne.n	8001612 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001524:	2200      	movs	r2, #0
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 fe7d 	bl	8002228 <ETH_Prepare_Tx_Descriptors>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d009      	beq.n	8001548 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153a:	f043 0202 	orr.w	r2, r3, #2
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e065      	b.n	8001614 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001548:	f3bf 8f4f 	dsb	sy
}
 800154c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3206      	adds	r2, #6
 8001556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	2b03      	cmp	r3, #3
 800156c:	d904      	bls.n	8001578 <HAL_ETH_Transmit+0x84>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	1f1a      	subs	r2, r3, #4
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3106      	adds	r1, #6
 8001584:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001588:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800158c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800158e:	f7ff fd49 	bl	8001024 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001594:	e037      	b.n	8001606 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d011      	beq.n	80015cc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ae:	f043 0208 	orr.w	r2, r3, #8
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c0:	695a      	ldr	r2, [r3, #20]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e023      	b.n	8001614 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015d2:	d018      	beq.n	8001606 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015d4:	f7ff fd26 	bl	8001024 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d302      	bcc.n	80015ea <HAL_ETH_Transmit+0xf6>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10d      	bne.n	8001606 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f0:	f043 0204 	orr.w	r2, r3, #4
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001600:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e006      	b.n	8001614 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	dbc3      	blt.n	8001596 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
  }
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d109      	bne.n	8001648 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163a:	f043 0201 	orr.w	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0a4      	b.n	8001792 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800164e:	2b23      	cmp	r3, #35	; 0x23
 8001650:	d001      	beq.n	8001656 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e09d      	b.n	8001792 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	3212      	adds	r2, #18
 8001662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001666:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800166c:	f1c3 0304 	rsb	r3, r3, #4
 8001670:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001672:	e066      	b.n	8001742 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d007      	beq.n	8001690 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	69da      	ldr	r2, [r3, #28]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	699a      	ldr	r2, [r3, #24]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001698:	2b00      	cmp	r3, #0
 800169a:	d103      	bne.n	80016a4 <HAL_ETH_ReadData+0x88>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d03c      	beq.n	800171e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0c1b      	lsrs	r3, r3, #16
 80016c2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016c6:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80016dc:	2301      	movs	r3, #1
 80016de:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016f8:	461a      	mov	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	f004 f873 	bl	80057e8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	441a      	add	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2200      	movs	r2, #0
 800171c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3301      	adds	r3, #1
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d902      	bls.n	8001730 <HAL_ETH_ReadData+0x114>
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3b04      	subs	r3, #4
 800172e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	3212      	adds	r2, #18
 8001736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	3301      	adds	r3, #1
 8001740:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db06      	blt.n	8001758 <HAL_ETH_ReadData+0x13c>
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	429a      	cmp	r2, r3
 8001750:	d202      	bcs.n	8001758 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001752:	7cfb      	ldrb	r3, [r7, #19]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d08d      	beq.n	8001674 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	441a      	add	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f815 	bl	800179c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001778:	7cfb      	ldrb	r3, [r7, #19]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	e000      	b.n	8001792 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
}
 8001792:	4618      	mov	r0, r3
 8001794:	3720      	adds	r7, #32
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80017a8:	2301      	movs	r3, #1
 80017aa:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017b0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	3212      	adds	r2, #18
 80017b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017bc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017c2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80017c4:	e042      	b.n	800184c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d112      	bne.n	80017f4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80017ce:	f107 0308 	add.w	r3, r7, #8
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 ffd8 	bl	8005788 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	74fb      	strb	r3, [r7, #19]
 80017e2:	e007      	b.n	80017f4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	461a      	mov	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	461a      	mov	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80017f4:	7cfb      	ldrb	r3, [r7, #19]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d028      	beq.n	800184c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d106      	bne.n	8001810 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <ETH_UpdateDescriptor+0x104>)
 8001808:	4313      	orrs	r3, r2
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	6053      	str	r3, [r2, #4]
 800180e:	e005      	b.n	800181c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	3301      	adds	r3, #1
 800182c:	61fb      	str	r3, [r7, #28]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d902      	bls.n	800183a <ETH_UpdateDescriptor+0x9e>
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	3b04      	subs	r3, #4
 8001838:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	3212      	adds	r2, #18
 8001840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001844:	617b      	str	r3, [r7, #20]
      desccount--;
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	3b01      	subs	r3, #1
 800184a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <ETH_UpdateDescriptor+0xbc>
 8001852:	7cfb      	ldrb	r3, [r7, #19]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1b6      	bne.n	80017c6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	429a      	cmp	r2, r3
 8001860:	d01a      	beq.n	8001898 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3301      	adds	r3, #1
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800186c:	f3bf 8f5f 	dmb	sy
}
 8001870:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6919      	ldr	r1, [r3, #16]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	18ca      	adds	r2, r1, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001898:	bf00      	nop
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	80004000 	.word	0x80004000

080018a4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f003 031c 	and.w	r3, r3, #28
 80018c0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	02db      	lsls	r3, r3, #11
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	019b      	lsls	r3, r3, #6
 80018d2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4313      	orrs	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f023 0302 	bic.w	r3, r3, #2
 80018e2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80018f4:	f7ff fb96 	bl	8001024 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018fa:	e00d      	b.n	8001918 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80018fc:	f7ff fb92 	bl	8001024 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190a:	d301      	bcc.n	8001910 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e010      	b.n	8001932 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1ec      	bne.n	80018fc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	b29b      	uxth	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 031c 	and.w	r3, r3, #28
 8001956:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	02db      	lsls	r3, r3, #11
 800195c:	b29b      	uxth	r3, r3
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4313      	orrs	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	019b      	lsls	r3, r3, #6
 8001968:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	4313      	orrs	r3, r2
 8001970:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001994:	f7ff fb46 	bl	8001024 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800199a:	e00d      	b.n	80019b8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800199c:	f7ff fb42 	bl	8001024 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019aa:	d301      	bcc.n	80019b0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e009      	b.n	80019c4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ec      	bne.n	800199c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0e6      	b.n	8001bae <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf14      	ite	ne
 80019ee:	2301      	movne	r3, #1
 80019f0:	2300      	moveq	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf0c      	ite	eq
 8001a18:	2301      	moveq	r3, #1
 8001a1a:	2300      	movne	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf14      	ite	ne
 8001a34:	2301      	movne	r3, #1
 8001a36:	2300      	moveq	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bf0c      	ite	eq
 8001a4e:	2301      	moveq	r3, #1
 8001a50:	2300      	movne	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf14      	ite	ne
 8001a68:	2301      	movne	r3, #1
 8001a6a:	2300      	moveq	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	bf0c      	ite	eq
 8001a9e:	2301      	moveq	r3, #1
 8001aa0:	2300      	movne	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bf14      	ite	ne
 8001ad2:	2301      	movne	r3, #1
 8001ad4:	2300      	moveq	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	bf14      	ite	ne
 8001afa:	2301      	movne	r3, #1
 8001afc:	2300      	moveq	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf14      	ite	ne
 8001b14:	2301      	movne	r3, #1
 8001b16:	2300      	moveq	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf14      	ite	ne
 8001b2e:	2301      	movne	r3, #1
 8001b30:	2300      	moveq	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	461a      	mov	r2, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bf0c      	ite	eq
 8001b4a:	2301      	moveq	r3, #1
 8001b4c:	2300      	movne	r3, #0
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	0c1b      	lsrs	r3, r3, #16
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bf14      	ite	ne
 8001b82:	2301      	movne	r3, #1
 8001b84:	2300      	moveq	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	bf14      	ite	ne
 8001b9e:	2301      	movne	r3, #1
 8001ba0:	2300      	moveq	r3, #0
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00b      	b.n	8001be6 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bd4:	2b10      	cmp	r3, #16
 8001bd6:	d105      	bne.n	8001be4 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001bd8:	6839      	ldr	r1, [r7, #0]
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f870 	bl	8001cc0 <ETH_SetMACConfig>

    return HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e000      	b.n	8001be6 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
  }
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f023 031c 	bic.w	r3, r3, #28
 8001c06:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c08:	f001 fc54 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 8001c0c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d804      	bhi.n	8001c20 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	e019      	b.n	8001c54 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d204      	bcs.n	8001c32 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f043 030c 	orr.w	r3, r3, #12
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	e010      	b.n	8001c54 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	4a0d      	ldr	r2, [pc, #52]	; (8001c6c <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d90c      	bls.n	8001c54 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	4a0c      	ldr	r2, [pc, #48]	; (8001c70 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d804      	bhi.n	8001c4c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	e003      	b.n	8001c54 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f043 0310 	orr.w	r3, r3, #16
 8001c52:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
}
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	02160ebf 	.word	0x02160ebf
 8001c68:	03938700 	.word	0x03938700
 8001c6c:	05f5e0ff 	.word	0x05f5e0ff
 8001c70:	08f0d17f 	.word	0x08f0d17f

08001c74 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c96:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff f9c9 	bl	800103c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cb4:	6193      	str	r3, [r2, #24]
}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <ETH_SetMACConfig+0x164>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	7b9b      	ldrb	r3, [r3, #14]
 8001cde:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	7c12      	ldrb	r2, [r2, #16]
 8001ce4:	2a00      	cmp	r2, #0
 8001ce6:	d102      	bne.n	8001cee <ETH_SetMACConfig+0x2e>
 8001ce8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001cec:	e000      	b.n	8001cf0 <ETH_SetMACConfig+0x30>
 8001cee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001cf0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	7c52      	ldrb	r2, [r2, #17]
 8001cf6:	2a00      	cmp	r2, #0
 8001cf8:	d102      	bne.n	8001d00 <ETH_SetMACConfig+0x40>
 8001cfa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001cfe:	e000      	b.n	8001d02 <ETH_SetMACConfig+0x42>
 8001d00:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d02:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	7fdb      	ldrb	r3, [r3, #31]
 8001d0e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001d10:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	7f92      	ldrb	r2, [r2, #30]
 8001d1c:	2a00      	cmp	r2, #0
 8001d1e:	d102      	bne.n	8001d26 <ETH_SetMACConfig+0x66>
 8001d20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d24:	e000      	b.n	8001d28 <ETH_SetMACConfig+0x68>
 8001d26:	2200      	movs	r2, #0
                        macconf->Speed |
 8001d28:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	7f1b      	ldrb	r3, [r3, #28]
 8001d2e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d30:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d36:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	791b      	ldrb	r3, [r3, #4]
 8001d3c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001d3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d46:	2a00      	cmp	r2, #0
 8001d48:	d102      	bne.n	8001d50 <ETH_SetMACConfig+0x90>
 8001d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d4e:	e000      	b.n	8001d52 <ETH_SetMACConfig+0x92>
 8001d50:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d52:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	7bdb      	ldrb	r3, [r3, #15]
 8001d58:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d5a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d60:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d68:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f7ff f95a 	bl	800103c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d9e:	4013      	ands	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d101      	bne.n	8001db6 <ETH_SetMACConfig+0xf6>
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	e000      	b.n	8001db8 <ETH_SetMACConfig+0xf8>
 8001db6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001db8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001dbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001dc6:	2a01      	cmp	r2, #1
 8001dc8:	d101      	bne.n	8001dce <ETH_SetMACConfig+0x10e>
 8001dca:	2208      	movs	r2, #8
 8001dcc:	e000      	b.n	8001dd0 <ETH_SetMACConfig+0x110>
 8001dce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001dd0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001dd8:	2a01      	cmp	r2, #1
 8001dda:	d101      	bne.n	8001de0 <ETH_SetMACConfig+0x120>
 8001ddc:	2204      	movs	r2, #4
 8001dde:	e000      	b.n	8001de2 <ETH_SetMACConfig+0x122>
 8001de0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001de2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001dea:	2a01      	cmp	r2, #1
 8001dec:	d101      	bne.n	8001df2 <ETH_SetMACConfig+0x132>
 8001dee:	2202      	movs	r2, #2
 8001df0:	e000      	b.n	8001df4 <ETH_SetMACConfig+0x134>
 8001df2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001df4:	4313      	orrs	r3, r2
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f7ff f915 	bl	800103c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	619a      	str	r2, [r3, #24]
}
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	fd20810f 	.word	0xfd20810f

08001e28 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <ETH_SetDMAConfig+0x110>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	7b1b      	ldrb	r3, [r3, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d102      	bne.n	8001e54 <ETH_SetDMAConfig+0x2c>
 8001e4e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e52:	e000      	b.n	8001e56 <ETH_SetDMAConfig+0x2e>
 8001e54:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	7b5b      	ldrb	r3, [r3, #13]
 8001e5a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e5c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	7f52      	ldrb	r2, [r2, #29]
 8001e62:	2a00      	cmp	r2, #0
 8001e64:	d102      	bne.n	8001e6c <ETH_SetDMAConfig+0x44>
 8001e66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e6a:	e000      	b.n	8001e6e <ETH_SetDMAConfig+0x46>
 8001e6c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	7b9b      	ldrb	r3, [r3, #14]
 8001e74:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e76:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e7c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	7f1b      	ldrb	r3, [r3, #28]
 8001e82:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e84:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	7f9b      	ldrb	r3, [r3, #30]
 8001e8a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e8c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e92:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e9a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eac:	461a      	mov	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f7ff f8bc 	bl	800103c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	791b      	ldrb	r3, [r3, #4]
 8001ed6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001edc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001ee2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ee8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ef0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001ef2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001efa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f00:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f0e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f7ff f88d 	bl	800103c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	f8de3f23 	.word	0xf8de3f23

08001f3c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b0a6      	sub	sp, #152	; 0x98
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f44:	2301      	movs	r3, #1
 8001f46:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f50:	2300      	movs	r3, #0
 8001f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f66:	2301      	movs	r3, #1
 8001f68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001fa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fa8:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001faa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001fb6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff fe7f 	bl	8001cc0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ff8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ffc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002002:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002004:	2301      	movs	r3, #1
 8002006:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800200a:	2300      	movs	r3, #0
 800200c:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002012:	f107 0308 	add.w	r3, r7, #8
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff05 	bl	8001e28 <ETH_SetDMAConfig>
}
 800201e:	bf00      	nop
 8002020:	3798      	adds	r7, #152	; 0x98
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3305      	adds	r3, #5
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	3204      	adds	r2, #4
 8002040:	7812      	ldrb	r2, [r2, #0]
 8002042:	4313      	orrs	r3, r2
 8002044:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <ETH_MACAddressConfig+0x68>)
 800204a:	4413      	add	r3, r2
 800204c:	461a      	mov	r2, r3
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3303      	adds	r3, #3
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	061a      	lsls	r2, r3, #24
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3302      	adds	r3, #2
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	041b      	lsls	r3, r3, #16
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3301      	adds	r3, #1
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	4313      	orrs	r3, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	7812      	ldrb	r2, [r2, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <ETH_MACAddressConfig+0x6c>)
 800207a:	4413      	add	r3, r2
 800207c:	461a      	mov	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	6013      	str	r3, [r2, #0]
}
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40028040 	.word	0x40028040
 8002094:	40028044 	.word	0x40028044

08002098 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e03e      	b.n	8002124 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68d9      	ldr	r1, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	440b      	add	r3, r1
 80020b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2200      	movs	r2, #0
 80020c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	3206      	adds	r2, #6
 80020d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d80c      	bhi.n	8002108 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68d9      	ldr	r1, [r3, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	440b      	add	r3, r1
 8002100:	461a      	mov	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	e004      	b.n	8002112 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	3301      	adds	r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b03      	cmp	r3, #3
 8002128:	d9bd      	bls.n	80020a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800213c:	611a      	str	r2, [r3, #16]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800214a:	b480      	push	{r7}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	e048      	b.n	80021ea <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6919      	ldr	r1, [r3, #16]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	440b      	add	r3, r1
 8002168:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2200      	movs	r2, #0
 8002174:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2200      	movs	r2, #0
 8002186:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2200      	movs	r2, #0
 800218c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002194:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80021ae:	68b9      	ldr	r1, [r7, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	3212      	adds	r2, #18
 80021b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d80c      	bhi.n	80021da <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6919      	ldr	r1, [r3, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	461a      	mov	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60da      	str	r2, [r3, #12]
 80021d8:	e004      	b.n	80021e4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	461a      	mov	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d9b3      	bls.n	8002158 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221a:	60da      	str	r2, [r3, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002228:	b480      	push	{r7}
 800222a:	b091      	sub	sp, #68	; 0x44
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	3318      	adds	r3, #24
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800224e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002252:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800226a:	d007      	beq.n	800227c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800226c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002270:	3304      	adds	r3, #4
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800227c:	2302      	movs	r3, #2
 800227e:	e111      	b.n	80024a4 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002282:	3301      	adds	r3, #1
 8002284:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	4b86      	ldr	r3, [pc, #536]	; (80024b0 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002296:	4013      	ands	r3, r2
 8002298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800229a:	6852      	ldr	r2, [r2, #4]
 800229c:	431a      	orrs	r2, r3
 800229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80022ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022be:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0320 	and.w	r3, r3, #32
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80022cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	431a      	orrs	r2, r3
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80022f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002302:	e082      	b.n	800240a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d006      	beq.n	8002324 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	e005      	b.n	8002330 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002332:	3301      	adds	r3, #1
 8002334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002338:	2b03      	cmp	r3, #3
 800233a:	d902      	bls.n	8002342 <ETH_Prepare_Tx_Descriptors+0x11a>
 800233c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800233e:	3b04      	subs	r3, #4
 8002340:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800234a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800234c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002358:	d007      	beq.n	800236a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800235e:	3304      	adds	r3, #4
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d029      	beq.n	80023be <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002376:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002378:	2300      	movs	r3, #0
 800237a:	63bb      	str	r3, [r7, #56]	; 0x38
 800237c:	e019      	b.n	80023b2 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800237e:	f3bf 8f5f 	dmb	sy
}
 8002382:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002392:	3301      	adds	r3, #1
 8002394:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002398:	2b03      	cmp	r3, #3
 800239a:	d902      	bls.n	80023a2 <ETH_Prepare_Tx_Descriptors+0x17a>
 800239c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239e:	3b04      	subs	r3, #4
 80023a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023aa:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80023ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ae:	3301      	adds	r3, #1
 80023b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80023b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d3e1      	bcc.n	800237e <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80023ba:	2302      	movs	r3, #2
 80023bc:	e072      	b.n	80024a4 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c8:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80023ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023cc:	3301      	adds	r3, #1
 80023ce:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80023d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80023d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	4b32      	ldr	r3, [pc, #200]	; (80024b0 <ETH_Prepare_Tx_Descriptors+0x288>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ea:	6852      	ldr	r2, [r2, #4]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f0:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	3301      	adds	r3, #1
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80023f8:	f3bf 8f5f 	dmb	sy
}
 80023fc:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f47f af78 	bne.w	8002304 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d006      	beq.n	8002428 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	e005      	b.n	8002434 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002432:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800243c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	6a3a      	ldr	r2, [r7, #32]
 8002444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800244a:	f3bf 8f5f 	dmb	sy
}
 800244e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002464:	3304      	adds	r3, #4
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002470:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002472:	f3ef 8310 	mrs	r3, PRIMASK
 8002476:	613b      	str	r3, [r7, #16]
  return(result);
 8002478:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	2301      	movs	r3, #1
 800247e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f383 8810 	msr	PRIMASK, r3
}
 8002486:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248e:	4413      	add	r3, r2
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	f383 8810 	msr	PRIMASK, r3
}
 80024a0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3744      	adds	r7, #68	; 0x44
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	ffffe000 	.word	0xffffe000

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	e175      	b.n	80027c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024d4:	2201      	movs	r2, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	f040 8164 	bne.w	80027ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d005      	beq.n	800250a <HAL_GPIO_Init+0x56>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d130      	bne.n	800256c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	2203      	movs	r2, #3
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002540:	2201      	movs	r2, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 0201 	and.w	r2, r3, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b03      	cmp	r3, #3
 8002576:	d017      	beq.n	80025a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d123      	bne.n	80025fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	08da      	lsrs	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3208      	adds	r2, #8
 80025bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	220f      	movs	r2, #15
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	08da      	lsrs	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3208      	adds	r2, #8
 80025f6:	69b9      	ldr	r1, [r7, #24]
 80025f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80be 	beq.w	80027ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	4b66      	ldr	r3, [pc, #408]	; (80027d8 <HAL_GPIO_Init+0x324>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	4a65      	ldr	r2, [pc, #404]	; (80027d8 <HAL_GPIO_Init+0x324>)
 8002644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002648:	6453      	str	r3, [r2, #68]	; 0x44
 800264a:	4b63      	ldr	r3, [pc, #396]	; (80027d8 <HAL_GPIO_Init+0x324>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002656:	4a61      	ldr	r2, [pc, #388]	; (80027dc <HAL_GPIO_Init+0x328>)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	220f      	movs	r2, #15
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <HAL_GPIO_Init+0x32c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d037      	beq.n	80026f2 <HAL_GPIO_Init+0x23e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a57      	ldr	r2, [pc, #348]	; (80027e4 <HAL_GPIO_Init+0x330>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d031      	beq.n	80026ee <HAL_GPIO_Init+0x23a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a56      	ldr	r2, [pc, #344]	; (80027e8 <HAL_GPIO_Init+0x334>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d02b      	beq.n	80026ea <HAL_GPIO_Init+0x236>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a55      	ldr	r2, [pc, #340]	; (80027ec <HAL_GPIO_Init+0x338>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d025      	beq.n	80026e6 <HAL_GPIO_Init+0x232>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a54      	ldr	r2, [pc, #336]	; (80027f0 <HAL_GPIO_Init+0x33c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d01f      	beq.n	80026e2 <HAL_GPIO_Init+0x22e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a53      	ldr	r2, [pc, #332]	; (80027f4 <HAL_GPIO_Init+0x340>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d019      	beq.n	80026de <HAL_GPIO_Init+0x22a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a52      	ldr	r2, [pc, #328]	; (80027f8 <HAL_GPIO_Init+0x344>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_GPIO_Init+0x226>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a51      	ldr	r2, [pc, #324]	; (80027fc <HAL_GPIO_Init+0x348>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00d      	beq.n	80026d6 <HAL_GPIO_Init+0x222>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a50      	ldr	r2, [pc, #320]	; (8002800 <HAL_GPIO_Init+0x34c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d007      	beq.n	80026d2 <HAL_GPIO_Init+0x21e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4f      	ldr	r2, [pc, #316]	; (8002804 <HAL_GPIO_Init+0x350>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_GPIO_Init+0x21a>
 80026ca:	2309      	movs	r3, #9
 80026cc:	e012      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026ce:	230a      	movs	r3, #10
 80026d0:	e010      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026d2:	2308      	movs	r3, #8
 80026d4:	e00e      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026d6:	2307      	movs	r3, #7
 80026d8:	e00c      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026da:	2306      	movs	r3, #6
 80026dc:	e00a      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026de:	2305      	movs	r3, #5
 80026e0:	e008      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026e2:	2304      	movs	r3, #4
 80026e4:	e006      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026e6:	2303      	movs	r3, #3
 80026e8:	e004      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e002      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026f2:	2300      	movs	r3, #0
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	f002 0203 	and.w	r2, r2, #3
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	4093      	lsls	r3, r2
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002704:	4935      	ldr	r1, [pc, #212]	; (80027dc <HAL_GPIO_Init+0x328>)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3302      	adds	r3, #2
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <HAL_GPIO_Init+0x354>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002736:	4a34      	ldr	r2, [pc, #208]	; (8002808 <HAL_GPIO_Init+0x354>)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <HAL_GPIO_Init+0x354>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002760:	4a29      	ldr	r2, [pc, #164]	; (8002808 <HAL_GPIO_Init+0x354>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002766:	4b28      	ldr	r3, [pc, #160]	; (8002808 <HAL_GPIO_Init+0x354>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800278a:	4a1f      	ldr	r2, [pc, #124]	; (8002808 <HAL_GPIO_Init+0x354>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002790:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <HAL_GPIO_Init+0x354>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b4:	4a14      	ldr	r2, [pc, #80]	; (8002808 <HAL_GPIO_Init+0x354>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3301      	adds	r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b0f      	cmp	r3, #15
 80027c4:	f67f ae86 	bls.w	80024d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	3724      	adds	r7, #36	; 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40013800 	.word	0x40013800
 80027e0:	40020000 	.word	0x40020000
 80027e4:	40020400 	.word	0x40020400
 80027e8:	40020800 	.word	0x40020800
 80027ec:	40020c00 	.word	0x40020c00
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40021400 	.word	0x40021400
 80027f8:	40021800 	.word	0x40021800
 80027fc:	40021c00 	.word	0x40021c00
 8002800:	40022000 	.word	0x40022000
 8002804:	40022400 	.word	0x40022400
 8002808:	40013c00 	.word	0x40013c00

0800280c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	807b      	strh	r3, [r7, #2]
 8002818:	4613      	mov	r3, r2
 800281a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800281c:	787b      	ldrb	r3, [r7, #1]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002828:	e003      	b.n	8002832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800282a:	887b      	ldrh	r3, [r7, #2]
 800282c:	041a      	lsls	r2, r3, #16
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	619a      	str	r2, [r3, #24]
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af02      	add	r7, sp, #8
 8002844:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e108      	b.n	8002a62 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe f8f6 	bl	8000a5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2203      	movs	r2, #3
 8002874:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800287e:	d102      	bne.n	8002886 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f002 f820 	bl	80048d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7c1a      	ldrb	r2, [r3, #16]
 8002898:	f88d 2000 	strb.w	r2, [sp]
 800289c:	3304      	adds	r3, #4
 800289e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028a0:	f001 ffbc 	bl	800481c <USB_CoreInit>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e0d5      	b.n	8002a62 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f002 f818 	bl	80048f2 <USB_SetCurrentMode>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0c6      	b.n	8002a62 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d4:	2300      	movs	r3, #0
 80028d6:	73fb      	strb	r3, [r7, #15]
 80028d8:	e04a      	b.n	8002970 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	3315      	adds	r3, #21
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	3314      	adds	r3, #20
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	b298      	uxth	r0, r3
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	332e      	adds	r3, #46	; 0x2e
 8002916:	4602      	mov	r2, r0
 8002918:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	3318      	adds	r3, #24
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	331c      	adds	r3, #28
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	3320      	adds	r3, #32
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	3324      	adds	r3, #36	; 0x24
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	3301      	adds	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	791b      	ldrb	r3, [r3, #4]
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	429a      	cmp	r2, r3
 8002978:	d3af      	bcc.n	80028da <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297a:	2300      	movs	r3, #0
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	e044      	b.n	8002a0a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4413      	add	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	3301      	adds	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	791b      	ldrb	r3, [r3, #4]
 8002a0e:	7bfa      	ldrb	r2, [r7, #15]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d3b5      	bcc.n	8002980 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7c1a      	ldrb	r2, [r3, #16]
 8002a1c:	f88d 2000 	strb.w	r2, [sp]
 8002a20:	3304      	adds	r3, #4
 8002a22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a24:	f001 ffb2 	bl	800498c <USB_DevInit>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e013      	b.n	8002a62 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7b1b      	ldrb	r3, [r3, #12]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d102      	bne.n	8002a56 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f80b 	bl	8002a6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f002 f96d 	bl	8004d3a <USB_DevDisconnect>

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	10000003 	.word	0x10000003

08002ab4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac2:	6013      	str	r3, [r2, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40007000 	.word	0x40007000

08002ad4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a22      	ldr	r2, [pc, #136]	; (8002b6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1d      	ldr	r2, [pc, #116]	; (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b02:	f7fe fa8f 	bl	8001024 <HAL_GetTick>
 8002b06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b08:	e009      	b.n	8002b1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b0a:	f7fe fa8b 	bl	8001024 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b18:	d901      	bls.n	8002b1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e022      	b.n	8002b64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b1e:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2a:	d1ee      	bne.n	8002b0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b2c:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0f      	ldr	r2, [pc, #60]	; (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b38:	f7fe fa74 	bl	8001024 <HAL_GetTick>
 8002b3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b3e:	e009      	b.n	8002b54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b40:	f7fe fa70 	bl	8001024 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b4e:	d901      	bls.n	8002b54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e007      	b.n	8002b64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b60:	d1ee      	bne.n	8002b40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40007000 	.word	0x40007000

08002b74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e29b      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8087 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b98:	4b96      	ldr	r3, [pc, #600]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d00c      	beq.n	8002bbe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba4:	4b93      	ldr	r3, [pc, #588]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d112      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x62>
 8002bb0:	4b90      	ldr	r3, [pc, #576]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbe:	4b8d      	ldr	r3, [pc, #564]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d06c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x130>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d168      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e275      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x7a>
 8002be0:	4b84      	ldr	r3, [pc, #528]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a83      	ldr	r2, [pc, #524]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e02e      	b.n	8002c4c <HAL_RCC_OscConfig+0xd8>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x9c>
 8002bf6:	4b7f      	ldr	r3, [pc, #508]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7e      	ldr	r2, [pc, #504]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b7c      	ldr	r3, [pc, #496]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7b      	ldr	r2, [pc, #492]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e01d      	b.n	8002c4c <HAL_RCC_OscConfig+0xd8>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0xc0>
 8002c1a:	4b76      	ldr	r3, [pc, #472]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a75      	ldr	r2, [pc, #468]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b73      	ldr	r3, [pc, #460]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a72      	ldr	r2, [pc, #456]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0xd8>
 8002c34:	4b6f      	ldr	r3, [pc, #444]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a6e      	ldr	r2, [pc, #440]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b6c      	ldr	r3, [pc, #432]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6b      	ldr	r2, [pc, #428]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe f9e6 	bl	8001024 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe f9e2 	bl	8001024 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e229      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b61      	ldr	r3, [pc, #388]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0xe8>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe f9d2 	bl	8001024 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe f9ce 	bl	8001024 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e215      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	4b57      	ldr	r3, [pc, #348]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x110>
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d069      	beq.n	8002d86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb2:	4b50      	ldr	r3, [pc, #320]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cbe:	4b4d      	ldr	r3, [pc, #308]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d11c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x190>
 8002cca:	4b4a      	ldr	r3, [pc, #296]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d116      	bne.n	8002d04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd6:	4b47      	ldr	r3, [pc, #284]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_RCC_OscConfig+0x17a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d001      	beq.n	8002cee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e1e9      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4b41      	ldr	r3, [pc, #260]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	493d      	ldr	r1, [pc, #244]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	e040      	b.n	8002d86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d023      	beq.n	8002d54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0c:	4b39      	ldr	r3, [pc, #228]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a38      	ldr	r2, [pc, #224]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe f984 	bl	8001024 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d20:	f7fe f980 	bl	8001024 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e1c7      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d32:	4b30      	ldr	r3, [pc, #192]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3e:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4929      	ldr	r1, [pc, #164]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
 8002d52:	e018      	b.n	8002d86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d54:	4b27      	ldr	r3, [pc, #156]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a26      	ldr	r2, [pc, #152]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
 8002d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7fe f960 	bl	8001024 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d68:	f7fe f95c 	bl	8001024 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e1a3      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d038      	beq.n	8002e04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d019      	beq.n	8002dce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9a:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9e:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da6:	f7fe f93d 	bl	8001024 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dae:	f7fe f939 	bl	8001024 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e180      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x23a>
 8002dcc:	e01a      	b.n	8002e04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dce:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd2:	4a08      	ldr	r2, [pc, #32]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dda:	f7fe f923 	bl	8001024 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de2:	f7fe f91f 	bl	8001024 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d903      	bls.n	8002df8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e166      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
 8002df4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df8:	4b92      	ldr	r3, [pc, #584]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1ee      	bne.n	8002de2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80a4 	beq.w	8002f5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e12:	4b8c      	ldr	r3, [pc, #560]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10d      	bne.n	8002e3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	4b89      	ldr	r3, [pc, #548]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	4a88      	ldr	r2, [pc, #544]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e28:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2a:	4b86      	ldr	r3, [pc, #536]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e36:	2301      	movs	r3, #1
 8002e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3a:	4b83      	ldr	r3, [pc, #524]	; (8003048 <HAL_RCC_OscConfig+0x4d4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d118      	bne.n	8002e78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e46:	4b80      	ldr	r3, [pc, #512]	; (8003048 <HAL_RCC_OscConfig+0x4d4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a7f      	ldr	r2, [pc, #508]	; (8003048 <HAL_RCC_OscConfig+0x4d4>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e52:	f7fe f8e7 	bl	8001024 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7fe f8e3 	bl	8001024 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b64      	cmp	r3, #100	; 0x64
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e12a      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6c:	4b76      	ldr	r3, [pc, #472]	; (8003048 <HAL_RCC_OscConfig+0x4d4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCC_OscConfig+0x31a>
 8002e80:	4b70      	ldr	r3, [pc, #448]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	4a6f      	ldr	r2, [pc, #444]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8c:	e02d      	b.n	8002eea <HAL_RCC_OscConfig+0x376>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x33c>
 8002e96:	4b6b      	ldr	r3, [pc, #428]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	4a6a      	ldr	r2, [pc, #424]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea2:	4b68      	ldr	r3, [pc, #416]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	4a67      	ldr	r2, [pc, #412]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ea8:	f023 0304 	bic.w	r3, r3, #4
 8002eac:	6713      	str	r3, [r2, #112]	; 0x70
 8002eae:	e01c      	b.n	8002eea <HAL_RCC_OscConfig+0x376>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d10c      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x35e>
 8002eb8:	4b62      	ldr	r3, [pc, #392]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	4a61      	ldr	r2, [pc, #388]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ebe:	f043 0304 	orr.w	r3, r3, #4
 8002ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec4:	4b5f      	ldr	r3, [pc, #380]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a5e      	ldr	r2, [pc, #376]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed0:	e00b      	b.n	8002eea <HAL_RCC_OscConfig+0x376>
 8002ed2:	4b5c      	ldr	r3, [pc, #368]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a5b      	ldr	r2, [pc, #364]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ede:	4b59      	ldr	r3, [pc, #356]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a58      	ldr	r2, [pc, #352]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ee4:	f023 0304 	bic.w	r3, r3, #4
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d015      	beq.n	8002f1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef2:	f7fe f897 	bl	8001024 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fe f893 	bl	8001024 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e0d8      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	4b4c      	ldr	r3, [pc, #304]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ee      	beq.n	8002efa <HAL_RCC_OscConfig+0x386>
 8002f1c:	e014      	b.n	8002f48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1e:	f7fe f881 	bl	8001024 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7fe f87d 	bl	8001024 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e0c2      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3c:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ee      	bne.n	8002f26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d105      	bne.n	8002f5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	4a3c      	ldr	r2, [pc, #240]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 80ae 	beq.w	80030c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f64:	4b37      	ldr	r3, [pc, #220]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d06d      	beq.n	800304c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d14b      	bne.n	8003010 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f78:	4b32      	ldr	r3, [pc, #200]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a31      	ldr	r2, [pc, #196]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fe f84e 	bl	8001024 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7fe f84a 	bl	8001024 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e091      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	4b29      	ldr	r3, [pc, #164]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69da      	ldr	r2, [r3, #28]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	019b      	lsls	r3, r3, #6
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	041b      	lsls	r3, r3, #16
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	061b      	lsls	r3, r3, #24
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	071b      	lsls	r3, r3, #28
 8002fd6:	491b      	ldr	r1, [pc, #108]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a18      	ldr	r2, [pc, #96]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe f81c 	bl	8001024 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fe f818 	bl	8001024 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e05f      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x47c>
 800300e:	e057      	b.n	80030c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0b      	ldr	r2, [pc, #44]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8003016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800301a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe f802 	bl	8001024 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fd fffe 	bl	8001024 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e045      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	4b03      	ldr	r3, [pc, #12]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x4b0>
 8003042:	e03d      	b.n	80030c0 <HAL_RCC_OscConfig+0x54c>
 8003044:	40023800 	.word	0x40023800
 8003048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800304c:	4b1f      	ldr	r3, [pc, #124]	; (80030cc <HAL_RCC_OscConfig+0x558>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d030      	beq.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d129      	bne.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d122      	bne.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003082:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003084:	4293      	cmp	r3, r2
 8003086:	d119      	bne.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	3b01      	subs	r3, #1
 8003096:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d10f      	bne.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800

080030d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0d0      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e8:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d910      	bls.n	8003118 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b67      	ldr	r3, [pc, #412]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 020f 	bic.w	r2, r3, #15
 80030fe:	4965      	ldr	r1, [pc, #404]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b63      	ldr	r3, [pc, #396]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0b8      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003130:	4b59      	ldr	r3, [pc, #356]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a58      	ldr	r2, [pc, #352]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003136:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800313a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003148:	4b53      	ldr	r3, [pc, #332]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a52      	ldr	r2, [pc, #328]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800314e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003152:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003154:	4b50      	ldr	r3, [pc, #320]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	494d      	ldr	r1, [pc, #308]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d040      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	4b47      	ldr	r3, [pc, #284]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d115      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e07f      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003192:	4b41      	ldr	r3, [pc, #260]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e073      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a2:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e06b      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b2:	4b39      	ldr	r3, [pc, #228]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f023 0203 	bic.w	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4936      	ldr	r1, [pc, #216]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c4:	f7fd ff2e 	bl	8001024 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031cc:	f7fd ff2a 	bl	8001024 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e053      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 020c 	and.w	r2, r3, #12
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d1eb      	bne.n	80031cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d210      	bcs.n	8003224 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 020f 	bic.w	r2, r3, #15
 800320a:	4922      	ldr	r1, [pc, #136]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e032      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4916      	ldr	r1, [pc, #88]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	490e      	ldr	r1, [pc, #56]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003262:	f000 f821 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8003266:	4602      	mov	r2, r0
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	490a      	ldr	r1, [pc, #40]	; (800329c <HAL_RCC_ClockConfig+0x1cc>)
 8003274:	5ccb      	ldrb	r3, [r1, r3]
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <HAL_RCC_ClockConfig+0x1d0>)
 800327c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <HAL_RCC_ClockConfig+0x1d4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd fe8a 	bl	8000f9c <HAL_InitTick>

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023c00 	.word	0x40023c00
 8003298:	40023800 	.word	0x40023800
 800329c:	08012ff0 	.word	0x08012ff0
 80032a0:	20000000 	.word	0x20000000
 80032a4:	20000004 	.word	0x20000004

080032a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ac:	b094      	sub	sp, #80	; 0x50
 80032ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	647b      	str	r3, [r7, #68]	; 0x44
 80032b4:	2300      	movs	r3, #0
 80032b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b8:	2300      	movs	r3, #0
 80032ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c0:	4b79      	ldr	r3, [pc, #484]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d00d      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x40>
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	f200 80e1 	bhi.w	8003494 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x34>
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d003      	beq.n	80032e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032da:	e0db      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b73      	ldr	r3, [pc, #460]	; (80034ac <HAL_RCC_GetSysClockFreq+0x204>)
 80032de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032e0:	e0db      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032e2:	4b73      	ldr	r3, [pc, #460]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80032e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032e6:	e0d8      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032e8:	4b6f      	ldr	r3, [pc, #444]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032f2:	4b6d      	ldr	r3, [pc, #436]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d063      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fe:	4b6a      	ldr	r3, [pc, #424]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	099b      	lsrs	r3, r3, #6
 8003304:	2200      	movs	r2, #0
 8003306:	63bb      	str	r3, [r7, #56]	; 0x38
 8003308:	63fa      	str	r2, [r7, #60]	; 0x3c
 800330a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003310:	633b      	str	r3, [r7, #48]	; 0x30
 8003312:	2300      	movs	r3, #0
 8003314:	637b      	str	r3, [r7, #52]	; 0x34
 8003316:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800331a:	4622      	mov	r2, r4
 800331c:	462b      	mov	r3, r5
 800331e:	f04f 0000 	mov.w	r0, #0
 8003322:	f04f 0100 	mov.w	r1, #0
 8003326:	0159      	lsls	r1, r3, #5
 8003328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800332c:	0150      	lsls	r0, r2, #5
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4621      	mov	r1, r4
 8003334:	1a51      	subs	r1, r2, r1
 8003336:	6139      	str	r1, [r7, #16]
 8003338:	4629      	mov	r1, r5
 800333a:	eb63 0301 	sbc.w	r3, r3, r1
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800334c:	4659      	mov	r1, fp
 800334e:	018b      	lsls	r3, r1, #6
 8003350:	4651      	mov	r1, sl
 8003352:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003356:	4651      	mov	r1, sl
 8003358:	018a      	lsls	r2, r1, #6
 800335a:	4651      	mov	r1, sl
 800335c:	ebb2 0801 	subs.w	r8, r2, r1
 8003360:	4659      	mov	r1, fp
 8003362:	eb63 0901 	sbc.w	r9, r3, r1
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800337a:	4690      	mov	r8, r2
 800337c:	4699      	mov	r9, r3
 800337e:	4623      	mov	r3, r4
 8003380:	eb18 0303 	adds.w	r3, r8, r3
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	462b      	mov	r3, r5
 8003388:	eb49 0303 	adc.w	r3, r9, r3
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800339a:	4629      	mov	r1, r5
 800339c:	024b      	lsls	r3, r1, #9
 800339e:	4621      	mov	r1, r4
 80033a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033a4:	4621      	mov	r1, r4
 80033a6:	024a      	lsls	r2, r1, #9
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ae:	2200      	movs	r2, #0
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033b8:	f7fc ff92 	bl	80002e0 <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4613      	mov	r3, r2
 80033c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c4:	e058      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c6:	4b38      	ldr	r3, [pc, #224]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	099b      	lsrs	r3, r3, #6
 80033cc:	2200      	movs	r2, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	4611      	mov	r1, r2
 80033d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033d6:	623b      	str	r3, [r7, #32]
 80033d8:	2300      	movs	r3, #0
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
 80033dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033e0:	4642      	mov	r2, r8
 80033e2:	464b      	mov	r3, r9
 80033e4:	f04f 0000 	mov.w	r0, #0
 80033e8:	f04f 0100 	mov.w	r1, #0
 80033ec:	0159      	lsls	r1, r3, #5
 80033ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f2:	0150      	lsls	r0, r2, #5
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4641      	mov	r1, r8
 80033fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80033fe:	4649      	mov	r1, r9
 8003400:	eb63 0b01 	sbc.w	fp, r3, r1
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003410:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003414:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003418:	ebb2 040a 	subs.w	r4, r2, sl
 800341c:	eb63 050b 	sbc.w	r5, r3, fp
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	00eb      	lsls	r3, r5, #3
 800342a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800342e:	00e2      	lsls	r2, r4, #3
 8003430:	4614      	mov	r4, r2
 8003432:	461d      	mov	r5, r3
 8003434:	4643      	mov	r3, r8
 8003436:	18e3      	adds	r3, r4, r3
 8003438:	603b      	str	r3, [r7, #0]
 800343a:	464b      	mov	r3, r9
 800343c:	eb45 0303 	adc.w	r3, r5, r3
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800344e:	4629      	mov	r1, r5
 8003450:	028b      	lsls	r3, r1, #10
 8003452:	4621      	mov	r1, r4
 8003454:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003458:	4621      	mov	r1, r4
 800345a:	028a      	lsls	r2, r1, #10
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003462:	2200      	movs	r2, #0
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	61fa      	str	r2, [r7, #28]
 8003468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800346c:	f7fc ff38 	bl	80002e0 <__aeabi_uldivmod>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4613      	mov	r3, r2
 8003476:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	3301      	adds	r3, #1
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003488:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800348a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003492:	e002      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003496:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800349c:	4618      	mov	r0, r3
 800349e:	3750      	adds	r7, #80	; 0x50
 80034a0:	46bd      	mov	sp, r7
 80034a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800
 80034ac:	00f42400 	.word	0x00f42400
 80034b0:	007a1200 	.word	0x007a1200

080034b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000000 	.word	0x20000000

080034cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034d0:	f7ff fff0 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	0a9b      	lsrs	r3, r3, #10
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4903      	ldr	r1, [pc, #12]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e2:	5ccb      	ldrb	r3, [r1, r3]
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40023800 	.word	0x40023800
 80034f0:	08013000 	.word	0x08013000

080034f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034f8:	f7ff ffdc 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0b5b      	lsrs	r3, r3, #13
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4903      	ldr	r1, [pc, #12]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	08013000 	.word	0x08013000

0800351c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d012      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003544:	4b69      	ldr	r3, [pc, #420]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a68      	ldr	r2, [pc, #416]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800354e:	6093      	str	r3, [r2, #8]
 8003550:	4b66      	ldr	r3, [pc, #408]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003558:	4964      	ldr	r1, [pc, #400]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d017      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003576:	4b5d      	ldr	r3, [pc, #372]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800357c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003584:	4959      	ldr	r1, [pc, #356]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003594:	d101      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d017      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035b2:	4b4e      	ldr	r3, [pc, #312]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	494a      	ldr	r1, [pc, #296]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d0:	d101      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035de:	2301      	movs	r3, #1
 80035e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035ee:	2301      	movs	r3, #1
 80035f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 808b 	beq.w	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003600:	4b3a      	ldr	r3, [pc, #232]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	4a39      	ldr	r2, [pc, #228]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360a:	6413      	str	r3, [r2, #64]	; 0x40
 800360c:	4b37      	ldr	r3, [pc, #220]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003618:	4b35      	ldr	r3, [pc, #212]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a34      	ldr	r2, [pc, #208]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800361e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003622:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003624:	f7fd fcfe 	bl	8001024 <HAL_GetTick>
 8003628:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800362a:	e008      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362c:	f7fd fcfa 	bl	8001024 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	; 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e38f      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800363e:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800364a:	4b28      	ldr	r3, [pc, #160]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003652:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d035      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	429a      	cmp	r2, r3
 8003666:	d02e      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003668:	4b20      	ldr	r3, [pc, #128]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003670:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003672:	4b1e      	ldr	r3, [pc, #120]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800367e:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	4a1a      	ldr	r2, [pc, #104]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003688:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800368a:	4a18      	ldr	r2, [pc, #96]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003690:	4b16      	ldr	r3, [pc, #88]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d114      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fd fcc2 	bl	8001024 <HAL_GetTick>
 80036a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a2:	e00a      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fd fcbe 	bl	8001024 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e351      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ba:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ee      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036d2:	d111      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036e0:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036e2:	400b      	ands	r3, r1
 80036e4:	4901      	ldr	r1, [pc, #4]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
 80036ea:	e00b      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40007000 	.word	0x40007000
 80036f4:	0ffffcff 	.word	0x0ffffcff
 80036f8:	4bac      	ldr	r3, [pc, #688]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4aab      	ldr	r2, [pc, #684]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003702:	6093      	str	r3, [r2, #8]
 8003704:	4ba9      	ldr	r3, [pc, #676]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003706:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003710:	49a6      	ldr	r1, [pc, #664]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003712:	4313      	orrs	r3, r2
 8003714:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	d010      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003722:	4ba2      	ldr	r3, [pc, #648]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003728:	4aa0      	ldr	r2, [pc, #640]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800372a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800372e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003732:	4b9e      	ldr	r3, [pc, #632]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003734:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	499b      	ldr	r1, [pc, #620]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003750:	4b96      	ldr	r3, [pc, #600]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800375e:	4993      	ldr	r1, [pc, #588]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003772:	4b8e      	ldr	r3, [pc, #568]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003780:	498a      	ldr	r1, [pc, #552]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003794:	4b85      	ldr	r3, [pc, #532]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a2:	4982      	ldr	r1, [pc, #520]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037b6:	4b7d      	ldr	r3, [pc, #500]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	4979      	ldr	r1, [pc, #484]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037d8:	4b74      	ldr	r3, [pc, #464]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	4971      	ldr	r1, [pc, #452]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037fa:	4b6c      	ldr	r3, [pc, #432]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003800:	f023 020c 	bic.w	r2, r3, #12
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003808:	4968      	ldr	r1, [pc, #416]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800381c:	4b63      	ldr	r3, [pc, #396]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	4960      	ldr	r1, [pc, #384]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800383e:	4b5b      	ldr	r3, [pc, #364]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003844:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384c:	4957      	ldr	r1, [pc, #348]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003860:	4b52      	ldr	r3, [pc, #328]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003866:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	494f      	ldr	r1, [pc, #316]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003882:	4b4a      	ldr	r3, [pc, #296]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003888:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	4946      	ldr	r1, [pc, #280]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038a4:	4b41      	ldr	r3, [pc, #260]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	493e      	ldr	r1, [pc, #248]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038c6:	4b39      	ldr	r3, [pc, #228]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d4:	4935      	ldr	r1, [pc, #212]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038e8:	4b30      	ldr	r3, [pc, #192]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038f6:	492d      	ldr	r1, [pc, #180]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d011      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800390a:	4b28      	ldr	r3, [pc, #160]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003910:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003918:	4924      	ldr	r1, [pc, #144]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003928:	d101      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800392a:	2301      	movs	r3, #1
 800392c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800393a:	2301      	movs	r3, #1
 800393c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800394a:	4b18      	ldr	r3, [pc, #96]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800394c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003950:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003958:	4914      	ldr	r1, [pc, #80]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00b      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800396c:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800396e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003972:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800397c:	490b      	ldr	r1, [pc, #44]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00f      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a0:	4902      	ldr	r1, [pc, #8]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039a8:	e002      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00b      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039bc:	4b8a      	ldr	r3, [pc, #552]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	4986      	ldr	r1, [pc, #536]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00b      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80039e0:	4b81      	ldr	r3, [pc, #516]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039f0:	497d      	ldr	r1, [pc, #500]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d006      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80d6 	beq.w	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a0c:	4b76      	ldr	r3, [pc, #472]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a75      	ldr	r2, [pc, #468]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a18:	f7fd fb04 	bl	8001024 <HAL_GetTick>
 8003a1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a20:	f7fd fb00 	bl	8001024 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	; 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e195      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a32:	4b6d      	ldr	r3, [pc, #436]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d021      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11d      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a52:	4b65      	ldr	r3, [pc, #404]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a60:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a66:	0e1b      	lsrs	r3, r3, #24
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	019a      	lsls	r2, r3, #6
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	041b      	lsls	r3, r3, #16
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	061b      	lsls	r3, r3, #24
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	071b      	lsls	r3, r3, #28
 8003a86:	4958      	ldr	r1, [pc, #352]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d02e      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab8:	d129      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003aba:	4b4b      	ldr	r3, [pc, #300]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ac8:	4b47      	ldr	r3, [pc, #284]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ace:	0f1b      	lsrs	r3, r3, #28
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	019a      	lsls	r2, r3, #6
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	041b      	lsls	r3, r3, #16
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	061b      	lsls	r3, r3, #24
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	071b      	lsls	r3, r3, #28
 8003aee:	493e      	ldr	r1, [pc, #248]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003af6:	4b3c      	ldr	r3, [pc, #240]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003afc:	f023 021f 	bic.w	r2, r3, #31
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	3b01      	subs	r3, #1
 8003b06:	4938      	ldr	r1, [pc, #224]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01d      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b1a:	4b33      	ldr	r3, [pc, #204]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b20:	0e1b      	lsrs	r3, r3, #24
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b28:	4b2f      	ldr	r3, [pc, #188]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2e:	0f1b      	lsrs	r3, r3, #28
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	019a      	lsls	r2, r3, #6
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	431a      	orrs	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	061b      	lsls	r3, r3, #24
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	071b      	lsls	r3, r3, #28
 8003b4e:	4926      	ldr	r1, [pc, #152]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d011      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	019a      	lsls	r2, r3, #6
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	071b      	lsls	r3, r3, #28
 8003b7e:	491a      	ldr	r1, [pc, #104]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b86:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a17      	ldr	r2, [pc, #92]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b92:	f7fd fa47 	bl	8001024 <HAL_GetTick>
 8003b96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b98:	e008      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b9a:	f7fd fa43 	bl	8001024 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b64      	cmp	r3, #100	; 0x64
 8003ba6:	d901      	bls.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e0d8      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bac:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	f040 80ce 	bne.w	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a08      	ldr	r2, [pc, #32]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bcc:	f7fd fa2a 	bl	8001024 <HAL_GetTick>
 8003bd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bd2:	e00b      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bd4:	f7fd fa26 	bl	8001024 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d904      	bls.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e0bb      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bec:	4b5e      	ldr	r3, [pc, #376]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf8:	d0ec      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d02e      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d12a      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c22:	4b51      	ldr	r3, [pc, #324]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c30:	4b4d      	ldr	r3, [pc, #308]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c36:	0f1b      	lsrs	r3, r3, #28
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	019a      	lsls	r2, r3, #6
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	061b      	lsls	r3, r3, #24
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	071b      	lsls	r3, r3, #28
 8003c56:	4944      	ldr	r1, [pc, #272]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c5e:	4b42      	ldr	r3, [pc, #264]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	493d      	ldr	r1, [pc, #244]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d022      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c8c:	d11d      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c8e:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	0e1b      	lsrs	r3, r3, #24
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c9c:	4b32      	ldr	r3, [pc, #200]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	0f1b      	lsrs	r3, r3, #28
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	019a      	lsls	r2, r3, #6
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	041b      	lsls	r3, r3, #16
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	061b      	lsls	r3, r3, #24
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	071b      	lsls	r3, r3, #28
 8003cc2:	4929      	ldr	r1, [pc, #164]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d028      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cd6:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cdc:	0e1b      	lsrs	r3, r3, #24
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ce4:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	0c1b      	lsrs	r3, r3, #16
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	019a      	lsls	r2, r3, #6
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	041b      	lsls	r3, r3, #16
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	071b      	lsls	r3, r3, #28
 8003d0a:	4917      	ldr	r1, [pc, #92]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	4911      	ldr	r1, [pc, #68]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a0e      	ldr	r2, [pc, #56]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d34:	f7fd f976 	bl	8001024 <HAL_GetTick>
 8003d38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d3c:	f7fd f972 	bl	8001024 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e007      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d5a:	d1ef      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40023800 	.word	0x40023800

08003d6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e040      	b.n	8003e00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fc fe04 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2224      	movs	r2, #36	; 0x24
 8003d98:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fb16 	bl	80043e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f8af 	bl	8003f1c <UART_SetConfig>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e01b      	b.n	8003e00 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003de6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fb95 	bl	8004528 <UART_CheckIdleState>
 8003dfe:	4603      	mov	r3, r0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	; 0x28
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d177      	bne.n	8003f10 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_UART_Transmit+0x24>
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e070      	b.n	8003f12 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2221      	movs	r2, #33	; 0x21
 8003e3c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e3e:	f7fd f8f1 	bl	8001024 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5c:	d108      	bne.n	8003e70 <HAL_UART_Transmit+0x68>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d104      	bne.n	8003e70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	e003      	b.n	8003e78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e78:	e02f      	b.n	8003eda <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	2180      	movs	r1, #128	; 0x80
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fbf7 	bl	8004678 <UART_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d004      	beq.n	8003e9a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e03b      	b.n	8003f12 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	e007      	b.n	8003ec8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	781a      	ldrb	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1c9      	bne.n	8003e7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2200      	movs	r2, #0
 8003eee:	2140      	movs	r1, #64	; 0x40
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fbc1 	bl	8004678 <UART_WaitOnFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d004      	beq.n	8003f06 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e005      	b.n	8003f12 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e000      	b.n	8003f12 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
  }
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3720      	adds	r7, #32
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4ba6      	ldr	r3, [pc, #664]	; (80041e0 <UART_SetConfig+0x2c4>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	6979      	ldr	r1, [r7, #20]
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a94      	ldr	r2, [pc, #592]	; (80041e4 <UART_SetConfig+0x2c8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d120      	bne.n	8003fda <UART_SetConfig+0xbe>
 8003f98:	4b93      	ldr	r3, [pc, #588]	; (80041e8 <UART_SetConfig+0x2cc>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d816      	bhi.n	8003fd4 <UART_SetConfig+0xb8>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <UART_SetConfig+0x90>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fbd 	.word	0x08003fbd
 8003fb0:	08003fc9 	.word	0x08003fc9
 8003fb4:	08003fc3 	.word	0x08003fc3
 8003fb8:	08003fcf 	.word	0x08003fcf
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e150      	b.n	8004264 <UART_SetConfig+0x348>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e14d      	b.n	8004264 <UART_SetConfig+0x348>
 8003fc8:	2304      	movs	r3, #4
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e14a      	b.n	8004264 <UART_SetConfig+0x348>
 8003fce:	2308      	movs	r3, #8
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e147      	b.n	8004264 <UART_SetConfig+0x348>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e144      	b.n	8004264 <UART_SetConfig+0x348>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a83      	ldr	r2, [pc, #524]	; (80041ec <UART_SetConfig+0x2d0>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d132      	bne.n	800404a <UART_SetConfig+0x12e>
 8003fe4:	4b80      	ldr	r3, [pc, #512]	; (80041e8 <UART_SetConfig+0x2cc>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d828      	bhi.n	8004044 <UART_SetConfig+0x128>
 8003ff2:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <UART_SetConfig+0xdc>)
 8003ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff8:	0800402d 	.word	0x0800402d
 8003ffc:	08004045 	.word	0x08004045
 8004000:	08004045 	.word	0x08004045
 8004004:	08004045 	.word	0x08004045
 8004008:	08004039 	.word	0x08004039
 800400c:	08004045 	.word	0x08004045
 8004010:	08004045 	.word	0x08004045
 8004014:	08004045 	.word	0x08004045
 8004018:	08004033 	.word	0x08004033
 800401c:	08004045 	.word	0x08004045
 8004020:	08004045 	.word	0x08004045
 8004024:	08004045 	.word	0x08004045
 8004028:	0800403f 	.word	0x0800403f
 800402c:	2300      	movs	r3, #0
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e118      	b.n	8004264 <UART_SetConfig+0x348>
 8004032:	2302      	movs	r3, #2
 8004034:	77fb      	strb	r3, [r7, #31]
 8004036:	e115      	b.n	8004264 <UART_SetConfig+0x348>
 8004038:	2304      	movs	r3, #4
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e112      	b.n	8004264 <UART_SetConfig+0x348>
 800403e:	2308      	movs	r3, #8
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e10f      	b.n	8004264 <UART_SetConfig+0x348>
 8004044:	2310      	movs	r3, #16
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e10c      	b.n	8004264 <UART_SetConfig+0x348>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a68      	ldr	r2, [pc, #416]	; (80041f0 <UART_SetConfig+0x2d4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d120      	bne.n	8004096 <UART_SetConfig+0x17a>
 8004054:	4b64      	ldr	r3, [pc, #400]	; (80041e8 <UART_SetConfig+0x2cc>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800405e:	2b30      	cmp	r3, #48	; 0x30
 8004060:	d013      	beq.n	800408a <UART_SetConfig+0x16e>
 8004062:	2b30      	cmp	r3, #48	; 0x30
 8004064:	d814      	bhi.n	8004090 <UART_SetConfig+0x174>
 8004066:	2b20      	cmp	r3, #32
 8004068:	d009      	beq.n	800407e <UART_SetConfig+0x162>
 800406a:	2b20      	cmp	r3, #32
 800406c:	d810      	bhi.n	8004090 <UART_SetConfig+0x174>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <UART_SetConfig+0x15c>
 8004072:	2b10      	cmp	r3, #16
 8004074:	d006      	beq.n	8004084 <UART_SetConfig+0x168>
 8004076:	e00b      	b.n	8004090 <UART_SetConfig+0x174>
 8004078:	2300      	movs	r3, #0
 800407a:	77fb      	strb	r3, [r7, #31]
 800407c:	e0f2      	b.n	8004264 <UART_SetConfig+0x348>
 800407e:	2302      	movs	r3, #2
 8004080:	77fb      	strb	r3, [r7, #31]
 8004082:	e0ef      	b.n	8004264 <UART_SetConfig+0x348>
 8004084:	2304      	movs	r3, #4
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e0ec      	b.n	8004264 <UART_SetConfig+0x348>
 800408a:	2308      	movs	r3, #8
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e0e9      	b.n	8004264 <UART_SetConfig+0x348>
 8004090:	2310      	movs	r3, #16
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e0e6      	b.n	8004264 <UART_SetConfig+0x348>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a56      	ldr	r2, [pc, #344]	; (80041f4 <UART_SetConfig+0x2d8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d120      	bne.n	80040e2 <UART_SetConfig+0x1c6>
 80040a0:	4b51      	ldr	r3, [pc, #324]	; (80041e8 <UART_SetConfig+0x2cc>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040aa:	2bc0      	cmp	r3, #192	; 0xc0
 80040ac:	d013      	beq.n	80040d6 <UART_SetConfig+0x1ba>
 80040ae:	2bc0      	cmp	r3, #192	; 0xc0
 80040b0:	d814      	bhi.n	80040dc <UART_SetConfig+0x1c0>
 80040b2:	2b80      	cmp	r3, #128	; 0x80
 80040b4:	d009      	beq.n	80040ca <UART_SetConfig+0x1ae>
 80040b6:	2b80      	cmp	r3, #128	; 0x80
 80040b8:	d810      	bhi.n	80040dc <UART_SetConfig+0x1c0>
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <UART_SetConfig+0x1a8>
 80040be:	2b40      	cmp	r3, #64	; 0x40
 80040c0:	d006      	beq.n	80040d0 <UART_SetConfig+0x1b4>
 80040c2:	e00b      	b.n	80040dc <UART_SetConfig+0x1c0>
 80040c4:	2300      	movs	r3, #0
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	e0cc      	b.n	8004264 <UART_SetConfig+0x348>
 80040ca:	2302      	movs	r3, #2
 80040cc:	77fb      	strb	r3, [r7, #31]
 80040ce:	e0c9      	b.n	8004264 <UART_SetConfig+0x348>
 80040d0:	2304      	movs	r3, #4
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e0c6      	b.n	8004264 <UART_SetConfig+0x348>
 80040d6:	2308      	movs	r3, #8
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e0c3      	b.n	8004264 <UART_SetConfig+0x348>
 80040dc:	2310      	movs	r3, #16
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e0c0      	b.n	8004264 <UART_SetConfig+0x348>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a44      	ldr	r2, [pc, #272]	; (80041f8 <UART_SetConfig+0x2dc>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d125      	bne.n	8004138 <UART_SetConfig+0x21c>
 80040ec:	4b3e      	ldr	r3, [pc, #248]	; (80041e8 <UART_SetConfig+0x2cc>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040fa:	d017      	beq.n	800412c <UART_SetConfig+0x210>
 80040fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004100:	d817      	bhi.n	8004132 <UART_SetConfig+0x216>
 8004102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004106:	d00b      	beq.n	8004120 <UART_SetConfig+0x204>
 8004108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800410c:	d811      	bhi.n	8004132 <UART_SetConfig+0x216>
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <UART_SetConfig+0x1fe>
 8004112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004116:	d006      	beq.n	8004126 <UART_SetConfig+0x20a>
 8004118:	e00b      	b.n	8004132 <UART_SetConfig+0x216>
 800411a:	2300      	movs	r3, #0
 800411c:	77fb      	strb	r3, [r7, #31]
 800411e:	e0a1      	b.n	8004264 <UART_SetConfig+0x348>
 8004120:	2302      	movs	r3, #2
 8004122:	77fb      	strb	r3, [r7, #31]
 8004124:	e09e      	b.n	8004264 <UART_SetConfig+0x348>
 8004126:	2304      	movs	r3, #4
 8004128:	77fb      	strb	r3, [r7, #31]
 800412a:	e09b      	b.n	8004264 <UART_SetConfig+0x348>
 800412c:	2308      	movs	r3, #8
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e098      	b.n	8004264 <UART_SetConfig+0x348>
 8004132:	2310      	movs	r3, #16
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e095      	b.n	8004264 <UART_SetConfig+0x348>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a2f      	ldr	r2, [pc, #188]	; (80041fc <UART_SetConfig+0x2e0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d125      	bne.n	800418e <UART_SetConfig+0x272>
 8004142:	4b29      	ldr	r3, [pc, #164]	; (80041e8 <UART_SetConfig+0x2cc>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800414c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004150:	d017      	beq.n	8004182 <UART_SetConfig+0x266>
 8004152:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004156:	d817      	bhi.n	8004188 <UART_SetConfig+0x26c>
 8004158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800415c:	d00b      	beq.n	8004176 <UART_SetConfig+0x25a>
 800415e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004162:	d811      	bhi.n	8004188 <UART_SetConfig+0x26c>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <UART_SetConfig+0x254>
 8004168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416c:	d006      	beq.n	800417c <UART_SetConfig+0x260>
 800416e:	e00b      	b.n	8004188 <UART_SetConfig+0x26c>
 8004170:	2301      	movs	r3, #1
 8004172:	77fb      	strb	r3, [r7, #31]
 8004174:	e076      	b.n	8004264 <UART_SetConfig+0x348>
 8004176:	2302      	movs	r3, #2
 8004178:	77fb      	strb	r3, [r7, #31]
 800417a:	e073      	b.n	8004264 <UART_SetConfig+0x348>
 800417c:	2304      	movs	r3, #4
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e070      	b.n	8004264 <UART_SetConfig+0x348>
 8004182:	2308      	movs	r3, #8
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e06d      	b.n	8004264 <UART_SetConfig+0x348>
 8004188:	2310      	movs	r3, #16
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e06a      	b.n	8004264 <UART_SetConfig+0x348>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <UART_SetConfig+0x2e4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d138      	bne.n	800420a <UART_SetConfig+0x2ee>
 8004198:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <UART_SetConfig+0x2cc>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041a6:	d017      	beq.n	80041d8 <UART_SetConfig+0x2bc>
 80041a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041ac:	d82a      	bhi.n	8004204 <UART_SetConfig+0x2e8>
 80041ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b2:	d00b      	beq.n	80041cc <UART_SetConfig+0x2b0>
 80041b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b8:	d824      	bhi.n	8004204 <UART_SetConfig+0x2e8>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <UART_SetConfig+0x2aa>
 80041be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c2:	d006      	beq.n	80041d2 <UART_SetConfig+0x2b6>
 80041c4:	e01e      	b.n	8004204 <UART_SetConfig+0x2e8>
 80041c6:	2300      	movs	r3, #0
 80041c8:	77fb      	strb	r3, [r7, #31]
 80041ca:	e04b      	b.n	8004264 <UART_SetConfig+0x348>
 80041cc:	2302      	movs	r3, #2
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e048      	b.n	8004264 <UART_SetConfig+0x348>
 80041d2:	2304      	movs	r3, #4
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e045      	b.n	8004264 <UART_SetConfig+0x348>
 80041d8:	2308      	movs	r3, #8
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e042      	b.n	8004264 <UART_SetConfig+0x348>
 80041de:	bf00      	nop
 80041e0:	efff69f3 	.word	0xefff69f3
 80041e4:	40011000 	.word	0x40011000
 80041e8:	40023800 	.word	0x40023800
 80041ec:	40004400 	.word	0x40004400
 80041f0:	40004800 	.word	0x40004800
 80041f4:	40004c00 	.word	0x40004c00
 80041f8:	40005000 	.word	0x40005000
 80041fc:	40011400 	.word	0x40011400
 8004200:	40007800 	.word	0x40007800
 8004204:	2310      	movs	r3, #16
 8004206:	77fb      	strb	r3, [r7, #31]
 8004208:	e02c      	b.n	8004264 <UART_SetConfig+0x348>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a72      	ldr	r2, [pc, #456]	; (80043d8 <UART_SetConfig+0x4bc>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d125      	bne.n	8004260 <UART_SetConfig+0x344>
 8004214:	4b71      	ldr	r3, [pc, #452]	; (80043dc <UART_SetConfig+0x4c0>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800421e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004222:	d017      	beq.n	8004254 <UART_SetConfig+0x338>
 8004224:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004228:	d817      	bhi.n	800425a <UART_SetConfig+0x33e>
 800422a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800422e:	d00b      	beq.n	8004248 <UART_SetConfig+0x32c>
 8004230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004234:	d811      	bhi.n	800425a <UART_SetConfig+0x33e>
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <UART_SetConfig+0x326>
 800423a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800423e:	d006      	beq.n	800424e <UART_SetConfig+0x332>
 8004240:	e00b      	b.n	800425a <UART_SetConfig+0x33e>
 8004242:	2300      	movs	r3, #0
 8004244:	77fb      	strb	r3, [r7, #31]
 8004246:	e00d      	b.n	8004264 <UART_SetConfig+0x348>
 8004248:	2302      	movs	r3, #2
 800424a:	77fb      	strb	r3, [r7, #31]
 800424c:	e00a      	b.n	8004264 <UART_SetConfig+0x348>
 800424e:	2304      	movs	r3, #4
 8004250:	77fb      	strb	r3, [r7, #31]
 8004252:	e007      	b.n	8004264 <UART_SetConfig+0x348>
 8004254:	2308      	movs	r3, #8
 8004256:	77fb      	strb	r3, [r7, #31]
 8004258:	e004      	b.n	8004264 <UART_SetConfig+0x348>
 800425a:	2310      	movs	r3, #16
 800425c:	77fb      	strb	r3, [r7, #31]
 800425e:	e001      	b.n	8004264 <UART_SetConfig+0x348>
 8004260:	2310      	movs	r3, #16
 8004262:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426c:	d15b      	bne.n	8004326 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800426e:	7ffb      	ldrb	r3, [r7, #31]
 8004270:	2b08      	cmp	r3, #8
 8004272:	d828      	bhi.n	80042c6 <UART_SetConfig+0x3aa>
 8004274:	a201      	add	r2, pc, #4	; (adr r2, 800427c <UART_SetConfig+0x360>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	080042a1 	.word	0x080042a1
 8004280:	080042a9 	.word	0x080042a9
 8004284:	080042b1 	.word	0x080042b1
 8004288:	080042c7 	.word	0x080042c7
 800428c:	080042b7 	.word	0x080042b7
 8004290:	080042c7 	.word	0x080042c7
 8004294:	080042c7 	.word	0x080042c7
 8004298:	080042c7 	.word	0x080042c7
 800429c:	080042bf 	.word	0x080042bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a0:	f7ff f914 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 80042a4:	61b8      	str	r0, [r7, #24]
        break;
 80042a6:	e013      	b.n	80042d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042a8:	f7ff f924 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 80042ac:	61b8      	str	r0, [r7, #24]
        break;
 80042ae:	e00f      	b.n	80042d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042b0:	4b4b      	ldr	r3, [pc, #300]	; (80043e0 <UART_SetConfig+0x4c4>)
 80042b2:	61bb      	str	r3, [r7, #24]
        break;
 80042b4:	e00c      	b.n	80042d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042b6:	f7fe fff7 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 80042ba:	61b8      	str	r0, [r7, #24]
        break;
 80042bc:	e008      	b.n	80042d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042c2:	61bb      	str	r3, [r7, #24]
        break;
 80042c4:	e004      	b.n	80042d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	77bb      	strb	r3, [r7, #30]
        break;
 80042ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d074      	beq.n	80043c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	005a      	lsls	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	085b      	lsrs	r3, r3, #1
 80042e0:	441a      	add	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b0f      	cmp	r3, #15
 80042f0:	d916      	bls.n	8004320 <UART_SetConfig+0x404>
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f8:	d212      	bcs.n	8004320 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	f023 030f 	bic.w	r3, r3, #15
 8004302:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	085b      	lsrs	r3, r3, #1
 8004308:	b29b      	uxth	r3, r3
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	b29a      	uxth	r2, r3
 8004310:	89fb      	ldrh	r3, [r7, #14]
 8004312:	4313      	orrs	r3, r2
 8004314:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	89fa      	ldrh	r2, [r7, #14]
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	e04f      	b.n	80043c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	77bb      	strb	r3, [r7, #30]
 8004324:	e04c      	b.n	80043c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004326:	7ffb      	ldrb	r3, [r7, #31]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d828      	bhi.n	800437e <UART_SetConfig+0x462>
 800432c:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <UART_SetConfig+0x418>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004359 	.word	0x08004359
 8004338:	08004361 	.word	0x08004361
 800433c:	08004369 	.word	0x08004369
 8004340:	0800437f 	.word	0x0800437f
 8004344:	0800436f 	.word	0x0800436f
 8004348:	0800437f 	.word	0x0800437f
 800434c:	0800437f 	.word	0x0800437f
 8004350:	0800437f 	.word	0x0800437f
 8004354:	08004377 	.word	0x08004377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004358:	f7ff f8b8 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 800435c:	61b8      	str	r0, [r7, #24]
        break;
 800435e:	e013      	b.n	8004388 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004360:	f7ff f8c8 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 8004364:	61b8      	str	r0, [r7, #24]
        break;
 8004366:	e00f      	b.n	8004388 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004368:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <UART_SetConfig+0x4c4>)
 800436a:	61bb      	str	r3, [r7, #24]
        break;
 800436c:	e00c      	b.n	8004388 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800436e:	f7fe ff9b 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8004372:	61b8      	str	r0, [r7, #24]
        break;
 8004374:	e008      	b.n	8004388 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800437a:	61bb      	str	r3, [r7, #24]
        break;
 800437c:	e004      	b.n	8004388 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	77bb      	strb	r3, [r7, #30]
        break;
 8004386:	bf00      	nop
    }

    if (pclk != 0U)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d018      	beq.n	80043c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	085a      	lsrs	r2, r3, #1
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	441a      	add	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b0f      	cmp	r3, #15
 80043a6:	d909      	bls.n	80043bc <UART_SetConfig+0x4a0>
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ae:	d205      	bcs.n	80043bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60da      	str	r2, [r3, #12]
 80043ba:	e001      	b.n	80043c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80043cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3720      	adds	r7, #32
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40007c00 	.word	0x40007c00
 80043dc:	40023800 	.word	0x40023800
 80043e0:	00f42400 	.word	0x00f42400

080043e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d01a      	beq.n	80044fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044e2:	d10a      	bne.n	80044fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	605a      	str	r2, [r3, #4]
  }
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b098      	sub	sp, #96	; 0x60
 800452c:	af02      	add	r7, sp, #8
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004538:	f7fc fd74 	bl	8001024 <HAL_GetTick>
 800453c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b08      	cmp	r3, #8
 800454a:	d12e      	bne.n	80045aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800454c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004554:	2200      	movs	r2, #0
 8004556:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f88c 	bl	8004678 <UART_WaitOnFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d021      	beq.n	80045aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800457a:	653b      	str	r3, [r7, #80]	; 0x50
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004584:	647b      	str	r3, [r7, #68]	; 0x44
 8004586:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800458a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e6      	bne.n	8004566 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e062      	b.n	8004670 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d149      	bne.n	800464c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045c0:	2200      	movs	r2, #0
 80045c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f856 	bl	8004678 <UART_WaitOnFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d03c      	beq.n	800464c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	623b      	str	r3, [r7, #32]
   return(result);
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f0:	633b      	str	r3, [r7, #48]	; 0x30
 80045f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f8:	e841 2300 	strex	r3, r2, [r1]
 80045fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e6      	bne.n	80045d2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3308      	adds	r3, #8
 800460a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	60fb      	str	r3, [r7, #12]
   return(result);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	64bb      	str	r3, [r7, #72]	; 0x48
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3308      	adds	r3, #8
 8004622:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004624:	61fa      	str	r2, [r7, #28]
 8004626:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	69b9      	ldr	r1, [r7, #24]
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	617b      	str	r3, [r7, #20]
   return(result);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e5      	bne.n	8004604 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e011      	b.n	8004670 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3758      	adds	r7, #88	; 0x58
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004688:	e04f      	b.n	800472a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004690:	d04b      	beq.n	800472a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004692:	f7fc fcc7 	bl	8001024 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d302      	bcc.n	80046a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e04e      	b.n	800474a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d037      	beq.n	800472a <UART_WaitOnFlagUntilTimeout+0xb2>
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b80      	cmp	r3, #128	; 0x80
 80046be:	d034      	beq.n	800472a <UART_WaitOnFlagUntilTimeout+0xb2>
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b40      	cmp	r3, #64	; 0x40
 80046c4:	d031      	beq.n	800472a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d110      	bne.n	80046f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2208      	movs	r2, #8
 80046da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f838 	bl	8004752 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2208      	movs	r2, #8
 80046e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e029      	b.n	800474a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004704:	d111      	bne.n	800472a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800470e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f81e 	bl	8004752 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e00f      	b.n	800474a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4013      	ands	r3, r2
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	429a      	cmp	r2, r3
 8004738:	bf0c      	ite	eq
 800473a:	2301      	moveq	r3, #1
 800473c:	2300      	movne	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	429a      	cmp	r2, r3
 8004746:	d0a0      	beq.n	800468a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004752:	b480      	push	{r7}
 8004754:	b095      	sub	sp, #84	; 0x54
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800476e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004778:	643b      	str	r3, [r7, #64]	; 0x40
 800477a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800477e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e6      	bne.n	800475a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3308      	adds	r3, #8
 8004792:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	e853 3f00 	ldrex	r3, [r3]
 800479a:	61fb      	str	r3, [r7, #28]
   return(result);
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3308      	adds	r3, #8
 80047aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047b4:	e841 2300 	strex	r3, r2, [r1]
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e5      	bne.n	800478c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d118      	bne.n	80047fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f023 0310 	bic.w	r3, r3, #16
 80047dc:	647b      	str	r3, [r7, #68]	; 0x44
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047e6:	61bb      	str	r3, [r7, #24]
 80047e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	6979      	ldr	r1, [r7, #20]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	613b      	str	r3, [r7, #16]
   return(result);
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1e6      	bne.n	80047c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800480e:	bf00      	nop
 8004810:	3754      	adds	r7, #84	; 0x54
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
	...

0800481c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800481c:	b084      	sub	sp, #16
 800481e:	b580      	push	{r7, lr}
 8004820:	b084      	sub	sp, #16
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	f107 001c 	add.w	r0, r7, #28
 800482a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800482e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004832:	2b01      	cmp	r3, #1
 8004834:	d121      	bne.n	800487a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	4b21      	ldr	r3, [pc, #132]	; (80048cc <USB_CoreInit+0xb0>)
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800485a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800485e:	2b01      	cmp	r3, #1
 8004860:	d105      	bne.n	800486e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fa92 	bl	8004d98 <USB_CoreReset>
 8004874:	4603      	mov	r3, r0
 8004876:	73fb      	strb	r3, [r7, #15]
 8004878:	e010      	b.n	800489c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fa86 	bl	8004d98 <USB_CoreReset>
 800488c:	4603      	mov	r3, r0
 800488e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800489c:	7fbb      	ldrb	r3, [r7, #30]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d10b      	bne.n	80048ba <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f043 0206 	orr.w	r2, r3, #6
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f043 0220 	orr.w	r2, r3, #32
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048c6:	b004      	add	sp, #16
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	ffbdffbf 	.word	0xffbdffbf

080048d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f023 0201 	bic.w	r2, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	460b      	mov	r3, r1
 80048fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d115      	bne.n	8004940 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004920:	200a      	movs	r0, #10
 8004922:	f7fc fb8b 	bl	800103c <HAL_Delay>
      ms += 10U;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	330a      	adds	r3, #10
 800492a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fa25 	bl	8004d7c <USB_GetMode>
 8004932:	4603      	mov	r3, r0
 8004934:	2b01      	cmp	r3, #1
 8004936:	d01e      	beq.n	8004976 <USB_SetCurrentMode+0x84>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2bc7      	cmp	r3, #199	; 0xc7
 800493c:	d9f0      	bls.n	8004920 <USB_SetCurrentMode+0x2e>
 800493e:	e01a      	b.n	8004976 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d115      	bne.n	8004972 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004952:	200a      	movs	r0, #10
 8004954:	f7fc fb72 	bl	800103c <HAL_Delay>
      ms += 10U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	330a      	adds	r3, #10
 800495c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fa0c 	bl	8004d7c <USB_GetMode>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <USB_SetCurrentMode+0x84>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2bc7      	cmp	r3, #199	; 0xc7
 800496e:	d9f0      	bls.n	8004952 <USB_SetCurrentMode+0x60>
 8004970:	e001      	b.n	8004976 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e005      	b.n	8004982 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2bc8      	cmp	r3, #200	; 0xc8
 800497a:	d101      	bne.n	8004980 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800498c:	b084      	sub	sp, #16
 800498e:	b580      	push	{r7, lr}
 8004990:	b086      	sub	sp, #24
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800499a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	e009      	b.n	80049c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	3340      	adds	r3, #64	; 0x40
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	2200      	movs	r2, #0
 80049b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	3301      	adds	r3, #1
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	2b0e      	cmp	r3, #14
 80049c4:	d9f2      	bls.n	80049ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d11c      	bne.n	8004a08 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049dc:	f043 0302 	orr.w	r3, r3, #2
 80049e0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	e005      	b.n	8004a14 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a20:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d10d      	bne.n	8004a44 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a30:	2100      	movs	r1, #0
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f968 	bl	8004d08 <USB_SetDevSpeed>
 8004a38:	e008      	b.n	8004a4c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f963 	bl	8004d08 <USB_SetDevSpeed>
 8004a42:	e003      	b.n	8004a4c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a44:	2103      	movs	r1, #3
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f95e 	bl	8004d08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a4c:	2110      	movs	r1, #16
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f8fa 	bl	8004c48 <USB_FlushTxFifo>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f924 	bl	8004cac <USB_FlushRxFifo>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a74:	461a      	mov	r2, r3
 8004a76:	2300      	movs	r3, #0
 8004a78:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a80:	461a      	mov	r2, r3
 8004a82:	2300      	movs	r3, #0
 8004a84:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	e043      	b.n	8004b20 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aae:	d118      	bne.n	8004ae2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10a      	bne.n	8004acc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	e013      	b.n	8004af4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	e008      	b.n	8004af4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aee:	461a      	mov	r2, r3
 8004af0:	2300      	movs	r3, #0
 8004af2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b00:	461a      	mov	r2, r3
 8004b02:	2300      	movs	r3, #0
 8004b04:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b12:	461a      	mov	r2, r3
 8004b14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b24:	461a      	mov	r2, r3
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d3b5      	bcc.n	8004a98 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	e043      	b.n	8004bba <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b48:	d118      	bne.n	8004b7c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	e013      	b.n	8004b8e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	461a      	mov	r2, r3
 8004b74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	e008      	b.n	8004b8e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bac:	461a      	mov	r2, r3
 8004bae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	613b      	str	r3, [r7, #16]
 8004bba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d3b5      	bcc.n	8004b32 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004be6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004be8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f043 0210 	orr.w	r2, r3, #16
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699a      	ldr	r2, [r3, #24]
 8004c00:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <USB_DevInit+0x2b4>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c08:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	f043 0208 	orr.w	r2, r3, #8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c1c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d105      	bne.n	8004c30 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699a      	ldr	r2, [r3, #24]
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <USB_DevInit+0x2b8>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c3c:	b004      	add	sp, #16
 8004c3e:	4770      	bx	lr
 8004c40:	803c3800 	.word	0x803c3800
 8004c44:	40000004 	.word	0x40000004

08004c48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004c62:	d901      	bls.n	8004c68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e01b      	b.n	8004ca0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	daf2      	bge.n	8004c56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	019b      	lsls	r3, r3, #6
 8004c78:	f043 0220 	orr.w	r2, r3, #32
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3301      	adds	r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004c8c:	d901      	bls.n	8004c92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e006      	b.n	8004ca0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d0f0      	beq.n	8004c80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004cc4:	d901      	bls.n	8004cca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e018      	b.n	8004cfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	daf2      	bge.n	8004cb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2210      	movs	r2, #16
 8004cda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004ce8:	d901      	bls.n	8004cee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e006      	b.n	8004cfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b10      	cmp	r3, #16
 8004cf8:	d0f0      	beq.n	8004cdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	68f9      	ldr	r1, [r7, #12]
 8004d24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d54:	f023 0303 	bic.w	r3, r3, #3
 8004d58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d68:	f043 0302 	orr.w	r3, r3, #2
 8004d6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	f003 0301 	and.w	r3, r3, #1
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3301      	adds	r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004db0:	d901      	bls.n	8004db6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e01b      	b.n	8004dee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	daf2      	bge.n	8004da4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f043 0201 	orr.w	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004dda:	d901      	bls.n	8004de0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e006      	b.n	8004dee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d0f0      	beq.n	8004dce <USB_CoreReset+0x36>

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004e02:	4b8d      	ldr	r3, [pc, #564]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004e04:	22c0      	movs	r2, #192	; 0xc0
 8004e06:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004e08:	4b8b      	ldr	r3, [pc, #556]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004e0a:	22a8      	movs	r2, #168	; 0xa8
 8004e0c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004e0e:	4b8a      	ldr	r3, [pc, #552]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004e10:	2201      	movs	r2, #1
 8004e12:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 3;
 8004e14:	4b88      	ldr	r3, [pc, #544]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004e16:	2203      	movs	r2, #3
 8004e18:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 0;
 8004e1a:	4b88      	ldr	r3, [pc, #544]	; (800503c <MX_LWIP_Init+0x240>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 0;
 8004e20:	4b86      	ldr	r3, [pc, #536]	; (800503c <MX_LWIP_Init+0x240>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8004e26:	4b85      	ldr	r3, [pc, #532]	; (800503c <MX_LWIP_Init+0x240>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004e2c:	4b83      	ldr	r3, [pc, #524]	; (800503c <MX_LWIP_Init+0x240>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8004e32:	4b83      	ldr	r3, [pc, #524]	; (8005040 <MX_LWIP_Init+0x244>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004e38:	4b81      	ldr	r3, [pc, #516]	; (8005040 <MX_LWIP_Init+0x244>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004e3e:	4b80      	ldr	r3, [pc, #512]	; (8005040 <MX_LWIP_Init+0x244>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8004e44:	4b7e      	ldr	r3, [pc, #504]	; (8005040 <MX_LWIP_Init+0x244>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004e4a:	f000 fd3d 	bl	80058c8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004e4e:	4b7a      	ldr	r3, [pc, #488]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	061a      	lsls	r2, r3, #24
 8004e54:	4b78      	ldr	r3, [pc, #480]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004e56:	785b      	ldrb	r3, [r3, #1]
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	4b76      	ldr	r3, [pc, #472]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004e5e:	789b      	ldrb	r3, [r3, #2]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	4313      	orrs	r3, r2
 8004e64:	4a74      	ldr	r2, [pc, #464]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004e66:	78d2      	ldrb	r2, [r2, #3]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	061a      	lsls	r2, r3, #24
 8004e6c:	4b72      	ldr	r3, [pc, #456]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	0619      	lsls	r1, r3, #24
 8004e72:	4b71      	ldr	r3, [pc, #452]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004e74:	785b      	ldrb	r3, [r3, #1]
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	4319      	orrs	r1, r3
 8004e7a:	4b6f      	ldr	r3, [pc, #444]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004e7c:	789b      	ldrb	r3, [r3, #2]
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	430b      	orrs	r3, r1
 8004e82:	496d      	ldr	r1, [pc, #436]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004e84:	78c9      	ldrb	r1, [r1, #3]
 8004e86:	430b      	orrs	r3, r1
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	4b69      	ldr	r3, [pc, #420]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	0619      	lsls	r1, r3, #24
 8004e96:	4b68      	ldr	r3, [pc, #416]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004e98:	785b      	ldrb	r3, [r3, #1]
 8004e9a:	041b      	lsls	r3, r3, #16
 8004e9c:	4319      	orrs	r1, r3
 8004e9e:	4b66      	ldr	r3, [pc, #408]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004ea0:	789b      	ldrb	r3, [r3, #2]
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	4964      	ldr	r1, [pc, #400]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004ea8:	78c9      	ldrb	r1, [r1, #3]
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	0a1b      	lsrs	r3, r3, #8
 8004eae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	4b60      	ldr	r3, [pc, #384]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	0619      	lsls	r1, r3, #24
 8004eba:	4b5f      	ldr	r3, [pc, #380]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004ebc:	785b      	ldrb	r3, [r3, #1]
 8004ebe:	041b      	lsls	r3, r3, #16
 8004ec0:	4319      	orrs	r1, r3
 8004ec2:	4b5d      	ldr	r3, [pc, #372]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004ec4:	789b      	ldrb	r3, [r3, #2]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	495b      	ldr	r1, [pc, #364]	; (8005038 <MX_LWIP_Init+0x23c>)
 8004ecc:	78c9      	ldrb	r1, [r1, #3]
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	0e1b      	lsrs	r3, r3, #24
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	4a5b      	ldr	r2, [pc, #364]	; (8005044 <MX_LWIP_Init+0x248>)
 8004ed6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004ed8:	4b58      	ldr	r3, [pc, #352]	; (800503c <MX_LWIP_Init+0x240>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	061a      	lsls	r2, r3, #24
 8004ede:	4b57      	ldr	r3, [pc, #348]	; (800503c <MX_LWIP_Init+0x240>)
 8004ee0:	785b      	ldrb	r3, [r3, #1]
 8004ee2:	041b      	lsls	r3, r3, #16
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	4b55      	ldr	r3, [pc, #340]	; (800503c <MX_LWIP_Init+0x240>)
 8004ee8:	789b      	ldrb	r3, [r3, #2]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	4313      	orrs	r3, r2
 8004eee:	4a53      	ldr	r2, [pc, #332]	; (800503c <MX_LWIP_Init+0x240>)
 8004ef0:	78d2      	ldrb	r2, [r2, #3]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	061a      	lsls	r2, r3, #24
 8004ef6:	4b51      	ldr	r3, [pc, #324]	; (800503c <MX_LWIP_Init+0x240>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	0619      	lsls	r1, r3, #24
 8004efc:	4b4f      	ldr	r3, [pc, #316]	; (800503c <MX_LWIP_Init+0x240>)
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	041b      	lsls	r3, r3, #16
 8004f02:	4319      	orrs	r1, r3
 8004f04:	4b4d      	ldr	r3, [pc, #308]	; (800503c <MX_LWIP_Init+0x240>)
 8004f06:	789b      	ldrb	r3, [r3, #2]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	494b      	ldr	r1, [pc, #300]	; (800503c <MX_LWIP_Init+0x240>)
 8004f0e:	78c9      	ldrb	r1, [r1, #3]
 8004f10:	430b      	orrs	r3, r1
 8004f12:	021b      	lsls	r3, r3, #8
 8004f14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	4b48      	ldr	r3, [pc, #288]	; (800503c <MX_LWIP_Init+0x240>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	0619      	lsls	r1, r3, #24
 8004f20:	4b46      	ldr	r3, [pc, #280]	; (800503c <MX_LWIP_Init+0x240>)
 8004f22:	785b      	ldrb	r3, [r3, #1]
 8004f24:	041b      	lsls	r3, r3, #16
 8004f26:	4319      	orrs	r1, r3
 8004f28:	4b44      	ldr	r3, [pc, #272]	; (800503c <MX_LWIP_Init+0x240>)
 8004f2a:	789b      	ldrb	r3, [r3, #2]
 8004f2c:	021b      	lsls	r3, r3, #8
 8004f2e:	430b      	orrs	r3, r1
 8004f30:	4942      	ldr	r1, [pc, #264]	; (800503c <MX_LWIP_Init+0x240>)
 8004f32:	78c9      	ldrb	r1, [r1, #3]
 8004f34:	430b      	orrs	r3, r1
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	4b3f      	ldr	r3, [pc, #252]	; (800503c <MX_LWIP_Init+0x240>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	0619      	lsls	r1, r3, #24
 8004f44:	4b3d      	ldr	r3, [pc, #244]	; (800503c <MX_LWIP_Init+0x240>)
 8004f46:	785b      	ldrb	r3, [r3, #1]
 8004f48:	041b      	lsls	r3, r3, #16
 8004f4a:	4319      	orrs	r1, r3
 8004f4c:	4b3b      	ldr	r3, [pc, #236]	; (800503c <MX_LWIP_Init+0x240>)
 8004f4e:	789b      	ldrb	r3, [r3, #2]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	430b      	orrs	r3, r1
 8004f54:	4939      	ldr	r1, [pc, #228]	; (800503c <MX_LWIP_Init+0x240>)
 8004f56:	78c9      	ldrb	r1, [r1, #3]
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	0e1b      	lsrs	r3, r3, #24
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	4a3a      	ldr	r2, [pc, #232]	; (8005048 <MX_LWIP_Init+0x24c>)
 8004f60:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004f62:	4b37      	ldr	r3, [pc, #220]	; (8005040 <MX_LWIP_Init+0x244>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	061a      	lsls	r2, r3, #24
 8004f68:	4b35      	ldr	r3, [pc, #212]	; (8005040 <MX_LWIP_Init+0x244>)
 8004f6a:	785b      	ldrb	r3, [r3, #1]
 8004f6c:	041b      	lsls	r3, r3, #16
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	4b33      	ldr	r3, [pc, #204]	; (8005040 <MX_LWIP_Init+0x244>)
 8004f72:	789b      	ldrb	r3, [r3, #2]
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	4313      	orrs	r3, r2
 8004f78:	4a31      	ldr	r2, [pc, #196]	; (8005040 <MX_LWIP_Init+0x244>)
 8004f7a:	78d2      	ldrb	r2, [r2, #3]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	061a      	lsls	r2, r3, #24
 8004f80:	4b2f      	ldr	r3, [pc, #188]	; (8005040 <MX_LWIP_Init+0x244>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	0619      	lsls	r1, r3, #24
 8004f86:	4b2e      	ldr	r3, [pc, #184]	; (8005040 <MX_LWIP_Init+0x244>)
 8004f88:	785b      	ldrb	r3, [r3, #1]
 8004f8a:	041b      	lsls	r3, r3, #16
 8004f8c:	4319      	orrs	r1, r3
 8004f8e:	4b2c      	ldr	r3, [pc, #176]	; (8005040 <MX_LWIP_Init+0x244>)
 8004f90:	789b      	ldrb	r3, [r3, #2]
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	430b      	orrs	r3, r1
 8004f96:	492a      	ldr	r1, [pc, #168]	; (8005040 <MX_LWIP_Init+0x244>)
 8004f98:	78c9      	ldrb	r1, [r1, #3]
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	4b26      	ldr	r3, [pc, #152]	; (8005040 <MX_LWIP_Init+0x244>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	0619      	lsls	r1, r3, #24
 8004faa:	4b25      	ldr	r3, [pc, #148]	; (8005040 <MX_LWIP_Init+0x244>)
 8004fac:	785b      	ldrb	r3, [r3, #1]
 8004fae:	041b      	lsls	r3, r3, #16
 8004fb0:	4319      	orrs	r1, r3
 8004fb2:	4b23      	ldr	r3, [pc, #140]	; (8005040 <MX_LWIP_Init+0x244>)
 8004fb4:	789b      	ldrb	r3, [r3, #2]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	4921      	ldr	r1, [pc, #132]	; (8005040 <MX_LWIP_Init+0x244>)
 8004fbc:	78c9      	ldrb	r1, [r1, #3]
 8004fbe:	430b      	orrs	r3, r1
 8004fc0:	0a1b      	lsrs	r3, r3, #8
 8004fc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <MX_LWIP_Init+0x244>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	0619      	lsls	r1, r3, #24
 8004fce:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <MX_LWIP_Init+0x244>)
 8004fd0:	785b      	ldrb	r3, [r3, #1]
 8004fd2:	041b      	lsls	r3, r3, #16
 8004fd4:	4319      	orrs	r1, r3
 8004fd6:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <MX_LWIP_Init+0x244>)
 8004fd8:	789b      	ldrb	r3, [r3, #2]
 8004fda:	021b      	lsls	r3, r3, #8
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	4918      	ldr	r1, [pc, #96]	; (8005040 <MX_LWIP_Init+0x244>)
 8004fe0:	78c9      	ldrb	r1, [r1, #3]
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	0e1b      	lsrs	r3, r3, #24
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	4a18      	ldr	r2, [pc, #96]	; (800504c <MX_LWIP_Init+0x250>)
 8004fea:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004fec:	4b18      	ldr	r3, [pc, #96]	; (8005050 <MX_LWIP_Init+0x254>)
 8004fee:	9302      	str	r3, [sp, #8]
 8004ff0:	4b18      	ldr	r3, [pc, #96]	; (8005054 <MX_LWIP_Init+0x258>)
 8004ff2:	9301      	str	r3, [sp, #4]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	4b14      	ldr	r3, [pc, #80]	; (800504c <MX_LWIP_Init+0x250>)
 8004ffa:	4a13      	ldr	r2, [pc, #76]	; (8005048 <MX_LWIP_Init+0x24c>)
 8004ffc:	4911      	ldr	r1, [pc, #68]	; (8005044 <MX_LWIP_Init+0x248>)
 8004ffe:	4816      	ldr	r0, [pc, #88]	; (8005058 <MX_LWIP_Init+0x25c>)
 8005000:	f001 f94e 	bl	80062a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005004:	4814      	ldr	r0, [pc, #80]	; (8005058 <MX_LWIP_Init+0x25c>)
 8005006:	f001 fafd 	bl	8006604 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <MX_LWIP_Init+0x25c>)
 800500c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005010:	089b      	lsrs	r3, r3, #2
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800501c:	480e      	ldr	r0, [pc, #56]	; (8005058 <MX_LWIP_Init+0x25c>)
 800501e:	f001 fb01 	bl	8006624 <netif_set_up>
 8005022:	e002      	b.n	800502a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005024:	480c      	ldr	r0, [pc, #48]	; (8005058 <MX_LWIP_Init+0x25c>)
 8005026:	f001 fb69 	bl	80066fc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800502a:	490c      	ldr	r1, [pc, #48]	; (800505c <MX_LWIP_Init+0x260>)
 800502c:	480a      	ldr	r0, [pc, #40]	; (8005058 <MX_LWIP_Init+0x25c>)
 800502e:	f001 fbfb 	bl	8006828 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005032:	bf00      	nop
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	200007a0 	.word	0x200007a0
 800503c:	200007a4 	.word	0x200007a4
 8005040:	200007a8 	.word	0x200007a8
 8005044:	20000794 	.word	0x20000794
 8005048:	20000798 	.word	0x20000798
 800504c:	2000079c 	.word	0x2000079c
 8005050:	0800f205 	.word	0x0800f205
 8005054:	080053c5 	.word	0x080053c5
 8005058:	20000760 	.word	0x20000760
 800505c:	080050b1 	.word	0x080050b1

08005060 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005068:	f7fb ffdc 	bl	8001024 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	4b08      	ldr	r3, [pc, #32]	; (8005090 <Ethernet_Link_Periodic_Handle+0x30>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b63      	cmp	r3, #99	; 0x63
 8005076:	d907      	bls.n	8005088 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005078:	f7fb ffd4 	bl	8001024 <HAL_GetTick>
 800507c:	4603      	mov	r3, r0
 800507e:	4a04      	ldr	r2, [pc, #16]	; (8005090 <Ethernet_Link_Periodic_Handle+0x30>)
 8005080:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 faf4 	bl	8005670 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005088:	bf00      	nop
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	2000075c 	.word	0x2000075c

08005094 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005098:	4804      	ldr	r0, [pc, #16]	; (80050ac <MX_LWIP_Process+0x18>)
 800509a:	f000 f973 	bl	8005384 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800509e:	f007 fc35 	bl	800c90c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80050a2:	4802      	ldr	r0, [pc, #8]	; (80050ac <MX_LWIP_Process+0x18>)
 80050a4:	f7ff ffdc 	bl	8005060 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80050a8:	bf00      	nop
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20000760 	.word	0x20000760

080050b0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <SCB_InvalidateDCache_by_Addr>:
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80050d6:	2320      	movs	r3, #32
 80050d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80050da:	f3bf 8f4f 	dsb	sy
}
 80050de:	bf00      	nop
    while (op_size > 0) {
 80050e0:	e00b      	b.n	80050fa <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80050e2:	4a0d      	ldr	r2, [pc, #52]	; (8005118 <SCB_InvalidateDCache_by_Addr+0x54>)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4413      	add	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	dcf0      	bgt.n	80050e2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005100:	f3bf 8f4f 	dsb	sy
}
 8005104:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005106:	f3bf 8f6f 	isb	sy
}
 800510a:	bf00      	nop
}
 800510c:	bf00      	nop
 800510e:	371c      	adds	r7, #28
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	e000ed00 	.word	0xe000ed00

0800511c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005128:	4b40      	ldr	r3, [pc, #256]	; (800522c <low_level_init+0x110>)
 800512a:	4a41      	ldr	r2, [pc, #260]	; (8005230 <low_level_init+0x114>)
 800512c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800512e:	2300      	movs	r3, #0
 8005130:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005136:	23e1      	movs	r3, #225	; 0xe1
 8005138:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800513a:	2300      	movs	r3, #0
 800513c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800513e:	2300      	movs	r3, #0
 8005140:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005142:	2300      	movs	r3, #0
 8005144:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005146:	4a39      	ldr	r2, [pc, #228]	; (800522c <low_level_init+0x110>)
 8005148:	f107 0308 	add.w	r3, r7, #8
 800514c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800514e:	4b37      	ldr	r3, [pc, #220]	; (800522c <low_level_init+0x110>)
 8005150:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005154:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005156:	4b35      	ldr	r3, [pc, #212]	; (800522c <low_level_init+0x110>)
 8005158:	4a36      	ldr	r2, [pc, #216]	; (8005234 <low_level_init+0x118>)
 800515a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800515c:	4b33      	ldr	r3, [pc, #204]	; (800522c <low_level_init+0x110>)
 800515e:	4a36      	ldr	r2, [pc, #216]	; (8005238 <low_level_init+0x11c>)
 8005160:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005162:	4b32      	ldr	r3, [pc, #200]	; (800522c <low_level_init+0x110>)
 8005164:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005168:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800516a:	4830      	ldr	r0, [pc, #192]	; (800522c <low_level_init+0x110>)
 800516c:	f7fc f870 	bl	8001250 <HAL_ETH_Init>
 8005170:	4603      	mov	r3, r0
 8005172:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005174:	2238      	movs	r2, #56	; 0x38
 8005176:	2100      	movs	r1, #0
 8005178:	4830      	ldr	r0, [pc, #192]	; (800523c <low_level_init+0x120>)
 800517a:	f00a f95b 	bl	800f434 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800517e:	4b2f      	ldr	r3, [pc, #188]	; (800523c <low_level_init+0x120>)
 8005180:	2221      	movs	r2, #33	; 0x21
 8005182:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005184:	4b2d      	ldr	r3, [pc, #180]	; (800523c <low_level_init+0x120>)
 8005186:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800518a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800518c:	4b2b      	ldr	r3, [pc, #172]	; (800523c <low_level_init+0x120>)
 800518e:	2200      	movs	r2, #0
 8005190:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005192:	482b      	ldr	r0, [pc, #172]	; (8005240 <low_level_init+0x124>)
 8005194:	f000 ff4c 	bl	8006030 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2206      	movs	r2, #6
 800519c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80051a0:	4b22      	ldr	r3, [pc, #136]	; (800522c <low_level_init+0x110>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	781a      	ldrb	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80051ac:	4b1f      	ldr	r3, [pc, #124]	; (800522c <low_level_init+0x110>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	785a      	ldrb	r2, [r3, #1]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80051b8:	4b1c      	ldr	r3, [pc, #112]	; (800522c <low_level_init+0x110>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	789a      	ldrb	r2, [r3, #2]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80051c4:	4b19      	ldr	r3, [pc, #100]	; (800522c <low_level_init+0x110>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	78da      	ldrb	r2, [r3, #3]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80051d0:	4b16      	ldr	r3, [pc, #88]	; (800522c <low_level_init+0x110>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	791a      	ldrb	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80051dc:	4b13      	ldr	r3, [pc, #76]	; (800522c <low_level_init+0x110>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	795a      	ldrb	r2, [r3, #5]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80051ee:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80051f6:	f043 030a 	orr.w	r3, r3, #10
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005202:	4910      	ldr	r1, [pc, #64]	; (8005244 <low_level_init+0x128>)
 8005204:	4810      	ldr	r0, [pc, #64]	; (8005248 <low_level_init+0x12c>)
 8005206:	f7fb fdb6 	bl	8000d76 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800520a:	480f      	ldr	r0, [pc, #60]	; (8005248 <low_level_init+0x12c>)
 800520c:	f7fb fde5 	bl	8000dda <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d103      	bne.n	800521e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fa2a 	bl	8005670 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800521c:	e001      	b.n	8005222 <low_level_init+0x106>
    Error_Handler();
 800521e:	f7fb fb93 	bl	8000948 <Error_Handler>
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20005138 	.word	0x20005138
 8005230:	40028000 	.word	0x40028000
 8005234:	20000130 	.word	0x20000130
 8005238:	20000090 	.word	0x20000090
 800523c:	200051e8 	.word	0x200051e8
 8005240:	08013008 	.word	0x08013008
 8005244:	2000000c 	.word	0x2000000c
 8005248:	20005220 	.word	0x20005220

0800524c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b092      	sub	sp, #72	; 0x48
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800525a:	2300      	movs	r3, #0
 800525c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005264:	f107 030c 	add.w	r3, r7, #12
 8005268:	2230      	movs	r2, #48	; 0x30
 800526a:	2100      	movs	r1, #0
 800526c:	4618      	mov	r0, r3
 800526e:	f00a f8e1 	bl	800f434 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005272:	f107 030c 	add.w	r3, r7, #12
 8005276:	2230      	movs	r2, #48	; 0x30
 8005278:	2100      	movs	r1, #0
 800527a:	4618      	mov	r0, r3
 800527c:	f00a f8da 	bl	800f434 <memset>

  for(q = p; q != NULL; q = q->next)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	643b      	str	r3, [r7, #64]	; 0x40
 8005284:	e045      	b.n	8005312 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005288:	2b03      	cmp	r3, #3
 800528a:	d902      	bls.n	8005292 <low_level_output+0x46>
      return ERR_IF;
 800528c:	f06f 030b 	mvn.w	r3, #11
 8005290:	e055      	b.n	800533e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005294:	6859      	ldr	r1, [r3, #4]
 8005296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005298:	4613      	mov	r3, r2
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	3348      	adds	r3, #72	; 0x48
 80052a2:	443b      	add	r3, r7
 80052a4:	3b3c      	subs	r3, #60	; 0x3c
 80052a6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80052a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052aa:	895b      	ldrh	r3, [r3, #10]
 80052ac:	4619      	mov	r1, r3
 80052ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052b0:	4613      	mov	r3, r2
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	3348      	adds	r3, #72	; 0x48
 80052ba:	443b      	add	r3, r7
 80052bc:	3b38      	subs	r3, #56	; 0x38
 80052be:	6019      	str	r1, [r3, #0]

    if(i>0)
 80052c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d011      	beq.n	80052ea <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80052c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c8:	1e5a      	subs	r2, r3, #1
 80052ca:	f107 000c 	add.w	r0, r7, #12
 80052ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052d0:	460b      	mov	r3, r1
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	440b      	add	r3, r1
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	18c1      	adds	r1, r0, r3
 80052da:	4613      	mov	r3, r2
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	4413      	add	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	3348      	adds	r3, #72	; 0x48
 80052e4:	443b      	add	r3, r7
 80052e6:	3b34      	subs	r3, #52	; 0x34
 80052e8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80052ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80052f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052f4:	4613      	mov	r3, r2
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	4413      	add	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	3348      	adds	r3, #72	; 0x48
 80052fe:	443b      	add	r3, r7
 8005300:	3b34      	subs	r3, #52	; 0x34
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005308:	3301      	adds	r3, #1
 800530a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800530c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	643b      	str	r3, [r7, #64]	; 0x40
 8005312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1b6      	bne.n	8005286 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	891b      	ldrh	r3, [r3, #8]
 800531c:	461a      	mov	r2, r3
 800531e:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <low_level_output+0xfc>)
 8005320:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005322:	4a09      	ldr	r2, [pc, #36]	; (8005348 <low_level_output+0xfc>)
 8005324:	f107 030c 	add.w	r3, r7, #12
 8005328:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800532a:	4a07      	ldr	r2, [pc, #28]	; (8005348 <low_level_output+0xfc>)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005330:	2214      	movs	r2, #20
 8005332:	4905      	ldr	r1, [pc, #20]	; (8005348 <low_level_output+0xfc>)
 8005334:	4805      	ldr	r0, [pc, #20]	; (800534c <low_level_output+0x100>)
 8005336:	f7fc f8dd 	bl	80014f4 <HAL_ETH_Transmit>

  return errval;
 800533a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800533e:	4618      	mov	r0, r3
 8005340:	3748      	adds	r7, #72	; 0x48
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	200051e8 	.word	0x200051e8
 800534c:	20005138 	.word	0x20005138

08005350 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800535c:	4b07      	ldr	r3, [pc, #28]	; (800537c <low_level_input+0x2c>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d105      	bne.n	8005370 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005364:	f107 030c 	add.w	r3, r7, #12
 8005368:	4619      	mov	r1, r3
 800536a:	4805      	ldr	r0, [pc, #20]	; (8005380 <low_level_input+0x30>)
 800536c:	f7fc f956 	bl	800161c <HAL_ETH_ReadData>
  }

  return p;
 8005370:	68fb      	ldr	r3, [r7, #12]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20005134 	.word	0x20005134
 8005380:	20005138 	.word	0x20005138

08005384 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff ffdd 	bl	8005350 <low_level_input>
 8005396:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	4798      	blx	r3
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f001 fdba 	bl	8006f28 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1ea      	bne.n	8005390 <ethernetif_input+0xc>
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <ethernetif_init+0x1c>
 80053d2:	4b0e      	ldr	r3, [pc, #56]	; (800540c <ethernetif_init+0x48>)
 80053d4:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 80053d8:	490d      	ldr	r1, [pc, #52]	; (8005410 <ethernetif_init+0x4c>)
 80053da:	480e      	ldr	r0, [pc, #56]	; (8005414 <ethernetif_init+0x50>)
 80053dc:	f00a f832 	bl	800f444 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2273      	movs	r2, #115	; 0x73
 80053e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2274      	movs	r2, #116	; 0x74
 80053ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a09      	ldr	r2, [pc, #36]	; (8005418 <ethernetif_init+0x54>)
 80053f4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a08      	ldr	r2, [pc, #32]	; (800541c <ethernetif_init+0x58>)
 80053fa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7ff fe8d 	bl	800511c <low_level_init>

  return ERR_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	08010610 	.word	0x08010610
 8005410:	0801062c 	.word	0x0801062c
 8005414:	0801063c 	.word	0x0801063c
 8005418:	0800d59d 	.word	0x0800d59d
 800541c:	0800524d 	.word	0x0800524d

08005420 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800542c:	68f9      	ldr	r1, [r7, #12]
 800542e:	4807      	ldr	r0, [pc, #28]	; (800544c <pbuf_free_custom+0x2c>)
 8005430:	f000 fee0 	bl	80061f4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005434:	4b06      	ldr	r3, [pc, #24]	; (8005450 <pbuf_free_custom+0x30>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d102      	bne.n	8005442 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800543c:	4b04      	ldr	r3, [pc, #16]	; (8005450 <pbuf_free_custom+0x30>)
 800543e:	2200      	movs	r2, #0
 8005440:	701a      	strb	r2, [r3, #0]
  }
}
 8005442:	bf00      	nop
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	08013008 	.word	0x08013008
 8005450:	20005134 	.word	0x20005134

08005454 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005458:	f7fb fde4 	bl	8001024 <HAL_GetTick>
 800545c:	4603      	mov	r3, r0
}
 800545e:	4618      	mov	r0, r3
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08e      	sub	sp, #56	; 0x38
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800546c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	605a      	str	r2, [r3, #4]
 8005476:	609a      	str	r2, [r3, #8]
 8005478:	60da      	str	r2, [r3, #12]
 800547a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a4e      	ldr	r2, [pc, #312]	; (80055bc <HAL_ETH_MspInit+0x158>)
 8005482:	4293      	cmp	r3, r2
 8005484:	f040 8096 	bne.w	80055b4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005488:	4b4d      	ldr	r3, [pc, #308]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	4a4c      	ldr	r2, [pc, #304]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 800548e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005492:	6313      	str	r3, [r2, #48]	; 0x30
 8005494:	4b4a      	ldr	r3, [pc, #296]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549c:	623b      	str	r3, [r7, #32]
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	4b47      	ldr	r3, [pc, #284]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	4a46      	ldr	r2, [pc, #280]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 80054a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054aa:	6313      	str	r3, [r2, #48]	; 0x30
 80054ac:	4b44      	ldr	r3, [pc, #272]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054b4:	61fb      	str	r3, [r7, #28]
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4b41      	ldr	r3, [pc, #260]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	4a40      	ldr	r2, [pc, #256]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 80054be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054c2:	6313      	str	r3, [r2, #48]	; 0x30
 80054c4:	4b3e      	ldr	r3, [pc, #248]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054d0:	4b3b      	ldr	r3, [pc, #236]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	4a3a      	ldr	r2, [pc, #232]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 80054d6:	f043 0304 	orr.w	r3, r3, #4
 80054da:	6313      	str	r3, [r2, #48]	; 0x30
 80054dc:	4b38      	ldr	r3, [pc, #224]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054e8:	4b35      	ldr	r3, [pc, #212]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 80054ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ec:	4a34      	ldr	r2, [pc, #208]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	6313      	str	r3, [r2, #48]	; 0x30
 80054f4:	4b32      	ldr	r3, [pc, #200]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005500:	4b2f      	ldr	r3, [pc, #188]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	4a2e      	ldr	r2, [pc, #184]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 8005506:	f043 0302 	orr.w	r3, r3, #2
 800550a:	6313      	str	r3, [r2, #48]	; 0x30
 800550c:	4b2c      	ldr	r3, [pc, #176]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005518:	4b29      	ldr	r3, [pc, #164]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	4a28      	ldr	r2, [pc, #160]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 800551e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005522:	6313      	str	r3, [r2, #48]	; 0x30
 8005524:	4b26      	ldr	r3, [pc, #152]	; (80055c0 <HAL_ETH_MspInit+0x15c>)
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005530:	2332      	movs	r3, #50	; 0x32
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005534:	2302      	movs	r3, #2
 8005536:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005538:	2300      	movs	r3, #0
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800553c:	2303      	movs	r3, #3
 800553e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005540:	230b      	movs	r3, #11
 8005542:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005548:	4619      	mov	r1, r3
 800554a:	481e      	ldr	r0, [pc, #120]	; (80055c4 <HAL_ETH_MspInit+0x160>)
 800554c:	f7fc ffb2 	bl	80024b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005550:	2386      	movs	r3, #134	; 0x86
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005554:	2302      	movs	r3, #2
 8005556:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005558:	2300      	movs	r3, #0
 800555a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800555c:	2303      	movs	r3, #3
 800555e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005560:	230b      	movs	r3, #11
 8005562:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005568:	4619      	mov	r1, r3
 800556a:	4817      	ldr	r0, [pc, #92]	; (80055c8 <HAL_ETH_MspInit+0x164>)
 800556c:	f7fc ffa2 	bl	80024b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005576:	2302      	movs	r3, #2
 8005578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557a:	2300      	movs	r3, #0
 800557c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800557e:	2303      	movs	r3, #3
 8005580:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005582:	230b      	movs	r3, #11
 8005584:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800558a:	4619      	mov	r1, r3
 800558c:	480f      	ldr	r0, [pc, #60]	; (80055cc <HAL_ETH_MspInit+0x168>)
 800558e:	f7fc ff91 	bl	80024b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005592:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005598:	2302      	movs	r3, #2
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800559c:	2300      	movs	r3, #0
 800559e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055a0:	2303      	movs	r3, #3
 80055a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80055a4:	230b      	movs	r3, #11
 80055a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80055a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055ac:	4619      	mov	r1, r3
 80055ae:	4808      	ldr	r0, [pc, #32]	; (80055d0 <HAL_ETH_MspInit+0x16c>)
 80055b0:	f7fc ff80 	bl	80024b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80055b4:	bf00      	nop
 80055b6:	3738      	adds	r7, #56	; 0x38
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40028000 	.word	0x40028000
 80055c0:	40023800 	.word	0x40023800
 80055c4:	40020800 	.word	0x40020800
 80055c8:	40020000 	.word	0x40020000
 80055cc:	40020400 	.word	0x40020400
 80055d0:	40021800 	.word	0x40021800

080055d4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80055d8:	4802      	ldr	r0, [pc, #8]	; (80055e4 <ETH_PHY_IO_Init+0x10>)
 80055da:	f7fc fb09 	bl	8001bf0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20005138 	.word	0x20005138

080055e8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  return 0;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	68f9      	ldr	r1, [r7, #12]
 800560a:	4807      	ldr	r0, [pc, #28]	; (8005628 <ETH_PHY_IO_ReadReg+0x30>)
 800560c:	f7fc f94a 	bl	80018a4 <HAL_ETH_ReadPHYRegister>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800561a:	e000      	b.n	800561e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20005138 	.word	0x20005138

0800562c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	68f9      	ldr	r1, [r7, #12]
 800563e:	4807      	ldr	r0, [pc, #28]	; (800565c <ETH_PHY_IO_WriteReg+0x30>)
 8005640:	f7fc f97b 	bl	800193a <HAL_ETH_WritePHYRegister>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800564a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800564e:	e000      	b.n	8005652 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20005138 	.word	0x20005138

08005660 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005664:	f7fb fcde 	bl	8001024 <HAL_GetTick>
 8005668:	4603      	mov	r3, r0
}
 800566a:	4618      	mov	r0, r3
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b0a0      	sub	sp, #128	; 0x80
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005678:	f107 030c 	add.w	r3, r7, #12
 800567c:	2264      	movs	r2, #100	; 0x64
 800567e:	2100      	movs	r1, #0
 8005680:	4618      	mov	r0, r3
 8005682:	f009 fed7 	bl	800f434 <memset>
  int32_t PHYLinkState = 0;
 8005686:	2300      	movs	r3, #0
 8005688:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800568e:	2300      	movs	r3, #0
 8005690:	67bb      	str	r3, [r7, #120]	; 0x78
 8005692:	2300      	movs	r3, #0
 8005694:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005696:	483a      	ldr	r0, [pc, #232]	; (8005780 <ethernet_link_check_state+0x110>)
 8005698:	f7fb fbec 	bl	8000e74 <LAN8742_GetLinkState>
 800569c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056a4:	089b      	lsrs	r3, r3, #2
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00c      	beq.n	80056ca <ethernet_link_check_state+0x5a>
 80056b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	dc09      	bgt.n	80056ca <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80056b6:	4833      	ldr	r0, [pc, #204]	; (8005784 <ethernet_link_check_state+0x114>)
 80056b8:	f7fb fec3 	bl	8001442 <HAL_ETH_Stop>
    netif_set_down(netif);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f001 f81d 	bl	80066fc <netif_set_down>
    netif_set_link_down(netif);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 f880 	bl	80067c8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80056c8:	e055      	b.n	8005776 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d14e      	bne.n	8005776 <ethernet_link_check_state+0x106>
 80056d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056da:	2b01      	cmp	r3, #1
 80056dc:	dd4b      	ble.n	8005776 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80056de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056e0:	3b02      	subs	r3, #2
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d82a      	bhi.n	800573c <ethernet_link_check_state+0xcc>
 80056e6:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <ethernet_link_check_state+0x7c>)
 80056e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ec:	080056fd 	.word	0x080056fd
 80056f0:	0800570f 	.word	0x0800570f
 80056f4:	0800571f 	.word	0x0800571f
 80056f8:	0800572f 	.word	0x0800572f
      duplex = ETH_FULLDUPLEX_MODE;
 80056fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005700:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005702:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005706:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005708:	2301      	movs	r3, #1
 800570a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800570c:	e017      	b.n	800573e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800570e:	2300      	movs	r3, #0
 8005710:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005712:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005716:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005718:	2301      	movs	r3, #1
 800571a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800571c:	e00f      	b.n	800573e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800571e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005722:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005724:	2300      	movs	r3, #0
 8005726:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005728:	2301      	movs	r3, #1
 800572a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800572c:	e007      	b.n	800573e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800572e:	2300      	movs	r3, #0
 8005730:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005732:	2300      	movs	r3, #0
 8005734:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005736:	2301      	movs	r3, #1
 8005738:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800573a:	e000      	b.n	800573e <ethernet_link_check_state+0xce>
      break;
 800573c:	bf00      	nop
    if(linkchanged)
 800573e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d018      	beq.n	8005776 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005744:	f107 030c 	add.w	r3, r7, #12
 8005748:	4619      	mov	r1, r3
 800574a:	480e      	ldr	r0, [pc, #56]	; (8005784 <ethernet_link_check_state+0x114>)
 800574c:	f7fc f93e 	bl	80019cc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8005754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005756:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005758:	f107 030c 	add.w	r3, r7, #12
 800575c:	4619      	mov	r1, r3
 800575e:	4809      	ldr	r0, [pc, #36]	; (8005784 <ethernet_link_check_state+0x114>)
 8005760:	f7fc fa2b 	bl	8001bba <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005764:	4807      	ldr	r0, [pc, #28]	; (8005784 <ethernet_link_check_state+0x114>)
 8005766:	f7fb fe0d 	bl	8001384 <HAL_ETH_Start>
      netif_set_up(netif);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 ff5a 	bl	8006624 <netif_set_up>
      netif_set_link_up(netif);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fff5 	bl	8006760 <netif_set_link_up>
}
 8005776:	bf00      	nop
 8005778:	3780      	adds	r7, #128	; 0x80
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20005220 	.word	0x20005220
 8005784:	20005138 	.word	0x20005138

08005788 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af02      	add	r7, sp, #8
 800578e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005790:	4812      	ldr	r0, [pc, #72]	; (80057dc <HAL_ETH_RxAllocateCallback+0x54>)
 8005792:	f000 fcc1 	bl	8006118 <memp_malloc_pool>
 8005796:	60f8      	str	r0, [r7, #12]
  if (p)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d014      	beq.n	80057c8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f103 0220 	add.w	r2, r3, #32
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4a0d      	ldr	r2, [pc, #52]	; (80057e0 <HAL_ETH_RxAllocateCallback+0x58>)
 80057ac:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80057b6:	9201      	str	r2, [sp, #4]
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2241      	movs	r2, #65	; 0x41
 80057be:	2100      	movs	r1, #0
 80057c0:	2000      	movs	r0, #0
 80057c2:	f001 f9f7 	bl	8006bb4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80057c6:	e005      	b.n	80057d4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80057c8:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <HAL_ETH_RxAllocateCallback+0x5c>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
}
 80057d4:	bf00      	nop
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	08013008 	.word	0x08013008
 80057e0:	08005421 	.word	0x08005421
 80057e4:	20005134 	.word	0x20005134

080057e8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3b20      	subs	r3, #32
 8005806:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	2200      	movs	r2, #0
 8005812:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	887a      	ldrh	r2, [r7, #2]
 8005818:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d103      	bne.n	800582a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	e003      	b.n	8005832 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	61fb      	str	r3, [r7, #28]
 800583e:	e009      	b.n	8005854 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	891a      	ldrh	r2, [r3, #8]
 8005844:	887b      	ldrh	r3, [r7, #2]
 8005846:	4413      	add	r3, r2
 8005848:	b29a      	uxth	r2, r3
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	61fb      	str	r3, [r7, #28]
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f2      	bne.n	8005840 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800585a:	887b      	ldrh	r3, [r7, #2]
 800585c:	4619      	mov	r1, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff fc30 	bl	80050c4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005864:	bf00      	nop
 8005866:	3720      	adds	r7, #32
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	4603      	mov	r3, r0
 8005874:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	b21a      	sxth	r2, r3
 800587c:	88fb      	ldrh	r3, [r7, #6]
 800587e:	0a1b      	lsrs	r3, r3, #8
 8005880:	b29b      	uxth	r3, r3
 8005882:	b21b      	sxth	r3, r3
 8005884:	4313      	orrs	r3, r2
 8005886:	b21b      	sxth	r3, r3
 8005888:	b29b      	uxth	r3, r3
}
 800588a:	4618      	mov	r0, r3
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	061a      	lsls	r2, r3, #24
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	0a1b      	lsrs	r3, r3, #8
 80058b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	0e1b      	lsrs	r3, r3, #24
 80058ba:	4313      	orrs	r3, r2
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80058d2:	f000 f8d5 	bl	8005a80 <mem_init>
  memp_init();
 80058d6:	f000 fbdb 	bl	8006090 <memp_init>
  pbuf_init();
  netif_init();
 80058da:	f000 fcd9 	bl	8006290 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80058de:	f007 f857 	bl	800c990 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80058e2:	f001 fdaf 	bl	8007444 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80058e6:	f006 ffc9 	bl	800c87c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80058ea:	bf00      	nop
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	4603      	mov	r3, r0
 80058fc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80058fe:	4b05      	ldr	r3, [pc, #20]	; (8005914 <ptr_to_mem+0x20>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	88fb      	ldrh	r3, [r7, #6]
 8005904:	4413      	add	r3, r2
}
 8005906:	4618      	mov	r0, r3
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	200058ac 	.word	0x200058ac

08005918 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005920:	4b05      	ldr	r3, [pc, #20]	; (8005938 <mem_to_ptr+0x20>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	b29b      	uxth	r3, r3
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	200058ac 	.word	0x200058ac

0800593c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800593c:	b590      	push	{r4, r7, lr}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005944:	4b45      	ldr	r3, [pc, #276]	; (8005a5c <plug_holes+0x120>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	429a      	cmp	r2, r3
 800594c:	d206      	bcs.n	800595c <plug_holes+0x20>
 800594e:	4b44      	ldr	r3, [pc, #272]	; (8005a60 <plug_holes+0x124>)
 8005950:	f240 12df 	movw	r2, #479	; 0x1df
 8005954:	4943      	ldr	r1, [pc, #268]	; (8005a64 <plug_holes+0x128>)
 8005956:	4844      	ldr	r0, [pc, #272]	; (8005a68 <plug_holes+0x12c>)
 8005958:	f009 fd74 	bl	800f444 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800595c:	4b43      	ldr	r3, [pc, #268]	; (8005a6c <plug_holes+0x130>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	429a      	cmp	r2, r3
 8005964:	d306      	bcc.n	8005974 <plug_holes+0x38>
 8005966:	4b3e      	ldr	r3, [pc, #248]	; (8005a60 <plug_holes+0x124>)
 8005968:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800596c:	4940      	ldr	r1, [pc, #256]	; (8005a70 <plug_holes+0x134>)
 800596e:	483e      	ldr	r0, [pc, #248]	; (8005a68 <plug_holes+0x12c>)
 8005970:	f009 fd68 	bl	800f444 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	791b      	ldrb	r3, [r3, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d006      	beq.n	800598a <plug_holes+0x4e>
 800597c:	4b38      	ldr	r3, [pc, #224]	; (8005a60 <plug_holes+0x124>)
 800597e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005982:	493c      	ldr	r1, [pc, #240]	; (8005a74 <plug_holes+0x138>)
 8005984:	4838      	ldr	r0, [pc, #224]	; (8005a68 <plug_holes+0x12c>)
 8005986:	f009 fd5d 	bl	800f444 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005992:	d906      	bls.n	80059a2 <plug_holes+0x66>
 8005994:	4b32      	ldr	r3, [pc, #200]	; (8005a60 <plug_holes+0x124>)
 8005996:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800599a:	4937      	ldr	r1, [pc, #220]	; (8005a78 <plug_holes+0x13c>)
 800599c:	4832      	ldr	r0, [pc, #200]	; (8005a68 <plug_holes+0x12c>)
 800599e:	f009 fd51 	bl	800f444 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff ffa4 	bl	80058f4 <ptr_to_mem>
 80059ac:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d024      	beq.n	8005a00 <plug_holes+0xc4>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	791b      	ldrb	r3, [r3, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d120      	bne.n	8005a00 <plug_holes+0xc4>
 80059be:	4b2b      	ldr	r3, [pc, #172]	; (8005a6c <plug_holes+0x130>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d01b      	beq.n	8005a00 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80059c8:	4b2c      	ldr	r3, [pc, #176]	; (8005a7c <plug_holes+0x140>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d102      	bne.n	80059d8 <plug_holes+0x9c>
      lfree = mem;
 80059d2:	4a2a      	ldr	r2, [pc, #168]	; (8005a7c <plug_holes+0x140>)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	881a      	ldrh	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80059e8:	d00a      	beq.n	8005a00 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff ff80 	bl	80058f4 <ptr_to_mem>
 80059f4:	4604      	mov	r4, r0
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff ff8e 	bl	8005918 <mem_to_ptr>
 80059fc:	4603      	mov	r3, r0
 80059fe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	885b      	ldrh	r3, [r3, #2]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff ff75 	bl	80058f4 <ptr_to_mem>
 8005a0a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d01f      	beq.n	8005a54 <plug_holes+0x118>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	791b      	ldrb	r3, [r3, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d11b      	bne.n	8005a54 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005a1c:	4b17      	ldr	r3, [pc, #92]	; (8005a7c <plug_holes+0x140>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d102      	bne.n	8005a2c <plug_holes+0xf0>
      lfree = pmem;
 8005a26:	4a15      	ldr	r2, [pc, #84]	; (8005a7c <plug_holes+0x140>)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	881a      	ldrh	r2, [r3, #0]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a3c:	d00a      	beq.n	8005a54 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff ff56 	bl	80058f4 <ptr_to_mem>
 8005a48:	4604      	mov	r4, r0
 8005a4a:	68b8      	ldr	r0, [r7, #8]
 8005a4c:	f7ff ff64 	bl	8005918 <mem_to_ptr>
 8005a50:	4603      	mov	r3, r0
 8005a52:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005a54:	bf00      	nop
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd90      	pop	{r4, r7, pc}
 8005a5c:	200058ac 	.word	0x200058ac
 8005a60:	08010664 	.word	0x08010664
 8005a64:	08010694 	.word	0x08010694
 8005a68:	080106ac 	.word	0x080106ac
 8005a6c:	200058b0 	.word	0x200058b0
 8005a70:	080106d4 	.word	0x080106d4
 8005a74:	080106f0 	.word	0x080106f0
 8005a78:	0801070c 	.word	0x0801070c
 8005a7c:	200058b4 	.word	0x200058b4

08005a80 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005a86:	4b18      	ldr	r3, [pc, #96]	; (8005ae8 <mem_init+0x68>)
 8005a88:	3303      	adds	r3, #3
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	4b16      	ldr	r3, [pc, #88]	; (8005aec <mem_init+0x6c>)
 8005a92:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005a94:	4b15      	ldr	r3, [pc, #84]	; (8005aec <mem_init+0x6c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005aa0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005aae:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005ab2:	f7ff ff1f 	bl	80058f4 <ptr_to_mem>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4a0d      	ldr	r2, [pc, #52]	; (8005af0 <mem_init+0x70>)
 8005aba:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005abc:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <mem_init+0x70>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <mem_init+0x70>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005acc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005ace:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <mem_init+0x70>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005ad6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005ad8:	4b04      	ldr	r3, [pc, #16]	; (8005aec <mem_init+0x6c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a05      	ldr	r2, [pc, #20]	; (8005af4 <mem_init+0x74>)
 8005ade:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005ae0:	bf00      	nop
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20005258 	.word	0x20005258
 8005aec:	200058ac 	.word	0x200058ac
 8005af0:	200058b0 	.word	0x200058b0
 8005af4:	200058b4 	.word	0x200058b4

08005af8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff ff09 	bl	8005918 <mem_to_ptr>
 8005b06:	4603      	mov	r3, r0
 8005b08:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff fef0 	bl	80058f4 <ptr_to_mem>
 8005b14:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	885b      	ldrh	r3, [r3, #2]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff feea 	bl	80058f4 <ptr_to_mem>
 8005b20:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b2a:	d818      	bhi.n	8005b5e <mem_link_valid+0x66>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	885b      	ldrh	r3, [r3, #2]
 8005b30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b34:	d813      	bhi.n	8005b5e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005b3a:	8afa      	ldrh	r2, [r7, #22]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d004      	beq.n	8005b4a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	8afa      	ldrh	r2, [r7, #22]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d109      	bne.n	8005b5e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005b4a:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <mem_link_valid+0x74>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d006      	beq.n	8005b62 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	885b      	ldrh	r3, [r3, #2]
 8005b58:	8afa      	ldrh	r2, [r7, #22]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d001      	beq.n	8005b62 <mem_link_valid+0x6a>
    return 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	e000      	b.n	8005b64 <mem_link_valid+0x6c>
  }
  return 1;
 8005b62:	2301      	movs	r3, #1
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	200058b0 	.word	0x200058b0

08005b70 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d04c      	beq.n	8005c18 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d007      	beq.n	8005b98 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005b88:	4b25      	ldr	r3, [pc, #148]	; (8005c20 <mem_free+0xb0>)
 8005b8a:	f240 2273 	movw	r2, #627	; 0x273
 8005b8e:	4925      	ldr	r1, [pc, #148]	; (8005c24 <mem_free+0xb4>)
 8005b90:	4825      	ldr	r0, [pc, #148]	; (8005c28 <mem_free+0xb8>)
 8005b92:	f009 fc57 	bl	800f444 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005b96:	e040      	b.n	8005c1a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3b08      	subs	r3, #8
 8005b9c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005b9e:	4b23      	ldr	r3, [pc, #140]	; (8005c2c <mem_free+0xbc>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d306      	bcc.n	8005bb6 <mem_free+0x46>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f103 020c 	add.w	r2, r3, #12
 8005bae:	4b20      	ldr	r3, [pc, #128]	; (8005c30 <mem_free+0xc0>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d907      	bls.n	8005bc6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005bb6:	4b1a      	ldr	r3, [pc, #104]	; (8005c20 <mem_free+0xb0>)
 8005bb8:	f240 227f 	movw	r2, #639	; 0x27f
 8005bbc:	491d      	ldr	r1, [pc, #116]	; (8005c34 <mem_free+0xc4>)
 8005bbe:	481a      	ldr	r0, [pc, #104]	; (8005c28 <mem_free+0xb8>)
 8005bc0:	f009 fc40 	bl	800f444 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005bc4:	e029      	b.n	8005c1a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	791b      	ldrb	r3, [r3, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005bce:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <mem_free+0xb0>)
 8005bd0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005bd4:	4918      	ldr	r1, [pc, #96]	; (8005c38 <mem_free+0xc8>)
 8005bd6:	4814      	ldr	r0, [pc, #80]	; (8005c28 <mem_free+0xb8>)
 8005bd8:	f009 fc34 	bl	800f444 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005bdc:	e01d      	b.n	8005c1a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7ff ff8a 	bl	8005af8 <mem_link_valid>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d107      	bne.n	8005bfa <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005bea:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <mem_free+0xb0>)
 8005bec:	f240 2295 	movw	r2, #661	; 0x295
 8005bf0:	4912      	ldr	r1, [pc, #72]	; (8005c3c <mem_free+0xcc>)
 8005bf2:	480d      	ldr	r0, [pc, #52]	; (8005c28 <mem_free+0xb8>)
 8005bf4:	f009 fc26 	bl	800f444 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005bf8:	e00f      	b.n	8005c1a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005c00:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <mem_free+0xd0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d202      	bcs.n	8005c10 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005c0a:	4a0d      	ldr	r2, [pc, #52]	; (8005c40 <mem_free+0xd0>)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff fe93 	bl	800593c <plug_holes>
 8005c16:	e000      	b.n	8005c1a <mem_free+0xaa>
    return;
 8005c18:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	08010664 	.word	0x08010664
 8005c24:	08010738 	.word	0x08010738
 8005c28:	080106ac 	.word	0x080106ac
 8005c2c:	200058ac 	.word	0x200058ac
 8005c30:	200058b0 	.word	0x200058b0
 8005c34:	0801075c 	.word	0x0801075c
 8005c38:	08010778 	.word	0x08010778
 8005c3c:	080107a0 	.word	0x080107a0
 8005c40:	200058b4 	.word	0x200058b4

08005c44 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005c50:	887b      	ldrh	r3, [r7, #2]
 8005c52:	3303      	adds	r3, #3
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f023 0303 	bic.w	r3, r3, #3
 8005c5a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005c5c:	8bfb      	ldrh	r3, [r7, #30]
 8005c5e:	2b0b      	cmp	r3, #11
 8005c60:	d801      	bhi.n	8005c66 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005c62:	230c      	movs	r3, #12
 8005c64:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005c66:	8bfb      	ldrh	r3, [r7, #30]
 8005c68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c6c:	d803      	bhi.n	8005c76 <mem_trim+0x32>
 8005c6e:	8bfa      	ldrh	r2, [r7, #30]
 8005c70:	887b      	ldrh	r3, [r7, #2]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d201      	bcs.n	8005c7a <mem_trim+0x36>
    return NULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e0cc      	b.n	8005e14 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005c7a:	4b68      	ldr	r3, [pc, #416]	; (8005e1c <mem_trim+0x1d8>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d304      	bcc.n	8005c8e <mem_trim+0x4a>
 8005c84:	4b66      	ldr	r3, [pc, #408]	; (8005e20 <mem_trim+0x1dc>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d306      	bcc.n	8005c9c <mem_trim+0x58>
 8005c8e:	4b65      	ldr	r3, [pc, #404]	; (8005e24 <mem_trim+0x1e0>)
 8005c90:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005c94:	4964      	ldr	r1, [pc, #400]	; (8005e28 <mem_trim+0x1e4>)
 8005c96:	4865      	ldr	r0, [pc, #404]	; (8005e2c <mem_trim+0x1e8>)
 8005c98:	f009 fbd4 	bl	800f444 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005c9c:	4b5f      	ldr	r3, [pc, #380]	; (8005e1c <mem_trim+0x1d8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d304      	bcc.n	8005cb0 <mem_trim+0x6c>
 8005ca6:	4b5e      	ldr	r3, [pc, #376]	; (8005e20 <mem_trim+0x1dc>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d301      	bcc.n	8005cb4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	e0af      	b.n	8005e14 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3b08      	subs	r3, #8
 8005cb8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005cba:	69b8      	ldr	r0, [r7, #24]
 8005cbc:	f7ff fe2c 	bl	8005918 <mem_to_ptr>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	881a      	ldrh	r2, [r3, #0]
 8005cc8:	8afb      	ldrh	r3, [r7, #22]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b08      	subs	r3, #8
 8005cd0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005cd2:	8bfa      	ldrh	r2, [r7, #30]
 8005cd4:	8abb      	ldrh	r3, [r7, #20]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d906      	bls.n	8005ce8 <mem_trim+0xa4>
 8005cda:	4b52      	ldr	r3, [pc, #328]	; (8005e24 <mem_trim+0x1e0>)
 8005cdc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005ce0:	4953      	ldr	r1, [pc, #332]	; (8005e30 <mem_trim+0x1ec>)
 8005ce2:	4852      	ldr	r0, [pc, #328]	; (8005e2c <mem_trim+0x1e8>)
 8005ce4:	f009 fbae 	bl	800f444 <iprintf>
  if (newsize > size) {
 8005ce8:	8bfa      	ldrh	r2, [r7, #30]
 8005cea:	8abb      	ldrh	r3, [r7, #20]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d901      	bls.n	8005cf4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e08f      	b.n	8005e14 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005cf4:	8bfa      	ldrh	r2, [r7, #30]
 8005cf6:	8abb      	ldrh	r3, [r7, #20]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d101      	bne.n	8005d00 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	e089      	b.n	8005e14 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff fdf5 	bl	80058f4 <ptr_to_mem>
 8005d0a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	791b      	ldrb	r3, [r3, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d13f      	bne.n	8005d94 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d1c:	d106      	bne.n	8005d2c <mem_trim+0xe8>
 8005d1e:	4b41      	ldr	r3, [pc, #260]	; (8005e24 <mem_trim+0x1e0>)
 8005d20:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005d24:	4943      	ldr	r1, [pc, #268]	; (8005e34 <mem_trim+0x1f0>)
 8005d26:	4841      	ldr	r0, [pc, #260]	; (8005e2c <mem_trim+0x1e8>)
 8005d28:	f009 fb8c 	bl	800f444 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005d32:	8afa      	ldrh	r2, [r7, #22]
 8005d34:	8bfb      	ldrh	r3, [r7, #30]
 8005d36:	4413      	add	r3, r2
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005d3e:	4b3e      	ldr	r3, [pc, #248]	; (8005e38 <mem_trim+0x1f4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d106      	bne.n	8005d56 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005d48:	89fb      	ldrh	r3, [r7, #14]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff fdd2 	bl	80058f4 <ptr_to_mem>
 8005d50:	4603      	mov	r3, r0
 8005d52:	4a39      	ldr	r2, [pc, #228]	; (8005e38 <mem_trim+0x1f4>)
 8005d54:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005d56:	89fb      	ldrh	r3, [r7, #14]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff fdcb 	bl	80058f4 <ptr_to_mem>
 8005d5e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2200      	movs	r2, #0
 8005d64:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	89ba      	ldrh	r2, [r7, #12]
 8005d6a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	8afa      	ldrh	r2, [r7, #22]
 8005d70:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	89fa      	ldrh	r2, [r7, #14]
 8005d76:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d80:	d047      	beq.n	8005e12 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff fdb4 	bl	80058f4 <ptr_to_mem>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	89fb      	ldrh	r3, [r7, #14]
 8005d90:	8053      	strh	r3, [r2, #2]
 8005d92:	e03e      	b.n	8005e12 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005d94:	8bfb      	ldrh	r3, [r7, #30]
 8005d96:	f103 0214 	add.w	r2, r3, #20
 8005d9a:	8abb      	ldrh	r3, [r7, #20]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d838      	bhi.n	8005e12 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005da0:	8afa      	ldrh	r2, [r7, #22]
 8005da2:	8bfb      	ldrh	r3, [r7, #30]
 8005da4:	4413      	add	r3, r2
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3308      	adds	r3, #8
 8005daa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005db4:	d106      	bne.n	8005dc4 <mem_trim+0x180>
 8005db6:	4b1b      	ldr	r3, [pc, #108]	; (8005e24 <mem_trim+0x1e0>)
 8005db8:	f240 3216 	movw	r2, #790	; 0x316
 8005dbc:	491d      	ldr	r1, [pc, #116]	; (8005e34 <mem_trim+0x1f0>)
 8005dbe:	481b      	ldr	r0, [pc, #108]	; (8005e2c <mem_trim+0x1e8>)
 8005dc0:	f009 fb40 	bl	800f444 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005dc4:	89fb      	ldrh	r3, [r7, #14]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7ff fd94 	bl	80058f4 <ptr_to_mem>
 8005dcc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005dce:	4b1a      	ldr	r3, [pc, #104]	; (8005e38 <mem_trim+0x1f4>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d202      	bcs.n	8005dde <mem_trim+0x19a>
      lfree = mem2;
 8005dd8:	4a17      	ldr	r2, [pc, #92]	; (8005e38 <mem_trim+0x1f4>)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2200      	movs	r2, #0
 8005de2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	881a      	ldrh	r2, [r3, #0]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	8afa      	ldrh	r2, [r7, #22]
 8005df0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	89fa      	ldrh	r2, [r7, #14]
 8005df6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005e00:	d007      	beq.n	8005e12 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff fd74 	bl	80058f4 <ptr_to_mem>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	89fb      	ldrh	r3, [r7, #14]
 8005e10:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005e12:	687b      	ldr	r3, [r7, #4]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3720      	adds	r7, #32
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	200058ac 	.word	0x200058ac
 8005e20:	200058b0 	.word	0x200058b0
 8005e24:	08010664 	.word	0x08010664
 8005e28:	080107d4 	.word	0x080107d4
 8005e2c:	080106ac 	.word	0x080106ac
 8005e30:	080107ec 	.word	0x080107ec
 8005e34:	0801080c 	.word	0x0801080c
 8005e38:	200058b4 	.word	0x200058b4

08005e3c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <mem_malloc+0x14>
    return NULL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	e0d9      	b.n	8006004 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005e50:	88fb      	ldrh	r3, [r7, #6]
 8005e52:	3303      	adds	r3, #3
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005e5c:	8bbb      	ldrh	r3, [r7, #28]
 8005e5e:	2b0b      	cmp	r3, #11
 8005e60:	d801      	bhi.n	8005e66 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005e62:	230c      	movs	r3, #12
 8005e64:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005e66:	8bbb      	ldrh	r3, [r7, #28]
 8005e68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005e6c:	d803      	bhi.n	8005e76 <mem_malloc+0x3a>
 8005e6e:	8bba      	ldrh	r2, [r7, #28]
 8005e70:	88fb      	ldrh	r3, [r7, #6]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d201      	bcs.n	8005e7a <mem_malloc+0x3e>
    return NULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	e0c4      	b.n	8006004 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005e7a:	4b64      	ldr	r3, [pc, #400]	; (800600c <mem_malloc+0x1d0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff fd4a 	bl	8005918 <mem_to_ptr>
 8005e84:	4603      	mov	r3, r0
 8005e86:	83fb      	strh	r3, [r7, #30]
 8005e88:	e0b4      	b.n	8005ff4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005e8a:	8bfb      	ldrh	r3, [r7, #30]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff fd31 	bl	80058f4 <ptr_to_mem>
 8005e92:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	791b      	ldrb	r3, [r3, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f040 80a4 	bne.w	8005fe6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	8bfb      	ldrh	r3, [r7, #30]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	f1a3 0208 	sub.w	r2, r3, #8
 8005eac:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	f0c0 8099 	bcc.w	8005fe6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	8bfb      	ldrh	r3, [r7, #30]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	f1a3 0208 	sub.w	r2, r3, #8
 8005ec2:	8bbb      	ldrh	r3, [r7, #28]
 8005ec4:	3314      	adds	r3, #20
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d333      	bcc.n	8005f32 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005eca:	8bfa      	ldrh	r2, [r7, #30]
 8005ecc:	8bbb      	ldrh	r3, [r7, #28]
 8005ece:	4413      	add	r3, r2
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005ed6:	8a7b      	ldrh	r3, [r7, #18]
 8005ed8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005edc:	d106      	bne.n	8005eec <mem_malloc+0xb0>
 8005ede:	4b4c      	ldr	r3, [pc, #304]	; (8006010 <mem_malloc+0x1d4>)
 8005ee0:	f240 3287 	movw	r2, #903	; 0x387
 8005ee4:	494b      	ldr	r1, [pc, #300]	; (8006014 <mem_malloc+0x1d8>)
 8005ee6:	484c      	ldr	r0, [pc, #304]	; (8006018 <mem_malloc+0x1dc>)
 8005ee8:	f009 faac 	bl	800f444 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005eec:	8a7b      	ldrh	r3, [r7, #18]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff fd00 	bl	80058f4 <ptr_to_mem>
 8005ef4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	881a      	ldrh	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8bfa      	ldrh	r2, [r7, #30]
 8005f08:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	8a7a      	ldrh	r2, [r7, #18]
 8005f0e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2201      	movs	r2, #1
 8005f14:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005f1e:	d00b      	beq.n	8005f38 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff fce5 	bl	80058f4 <ptr_to_mem>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	8a7b      	ldrh	r3, [r7, #18]
 8005f2e:	8053      	strh	r3, [r2, #2]
 8005f30:	e002      	b.n	8005f38 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2201      	movs	r2, #1
 8005f36:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005f38:	4b34      	ldr	r3, [pc, #208]	; (800600c <mem_malloc+0x1d0>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d127      	bne.n	8005f92 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005f42:	4b32      	ldr	r3, [pc, #200]	; (800600c <mem_malloc+0x1d0>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005f48:	e005      	b.n	8005f56 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fcd0 	bl	80058f4 <ptr_to_mem>
 8005f54:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	791b      	ldrb	r3, [r3, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d004      	beq.n	8005f68 <mem_malloc+0x12c>
 8005f5e:	4b2f      	ldr	r3, [pc, #188]	; (800601c <mem_malloc+0x1e0>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d1f0      	bne.n	8005f4a <mem_malloc+0x10e>
          }
          lfree = cur;
 8005f68:	4a28      	ldr	r2, [pc, #160]	; (800600c <mem_malloc+0x1d0>)
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005f6e:	4b27      	ldr	r3, [pc, #156]	; (800600c <mem_malloc+0x1d0>)
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	4b2a      	ldr	r3, [pc, #168]	; (800601c <mem_malloc+0x1e0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d00b      	beq.n	8005f92 <mem_malloc+0x156>
 8005f7a:	4b24      	ldr	r3, [pc, #144]	; (800600c <mem_malloc+0x1d0>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	791b      	ldrb	r3, [r3, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d006      	beq.n	8005f92 <mem_malloc+0x156>
 8005f84:	4b22      	ldr	r3, [pc, #136]	; (8006010 <mem_malloc+0x1d4>)
 8005f86:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005f8a:	4925      	ldr	r1, [pc, #148]	; (8006020 <mem_malloc+0x1e4>)
 8005f8c:	4822      	ldr	r0, [pc, #136]	; (8006018 <mem_malloc+0x1dc>)
 8005f8e:	f009 fa59 	bl	800f444 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005f92:	8bba      	ldrh	r2, [r7, #28]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	4413      	add	r3, r2
 8005f98:	3308      	adds	r3, #8
 8005f9a:	4a20      	ldr	r2, [pc, #128]	; (800601c <mem_malloc+0x1e0>)
 8005f9c:	6812      	ldr	r2, [r2, #0]
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d906      	bls.n	8005fb0 <mem_malloc+0x174>
 8005fa2:	4b1b      	ldr	r3, [pc, #108]	; (8006010 <mem_malloc+0x1d4>)
 8005fa4:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005fa8:	491e      	ldr	r1, [pc, #120]	; (8006024 <mem_malloc+0x1e8>)
 8005faa:	481b      	ldr	r0, [pc, #108]	; (8006018 <mem_malloc+0x1dc>)
 8005fac:	f009 fa4a 	bl	800f444 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d006      	beq.n	8005fc8 <mem_malloc+0x18c>
 8005fba:	4b15      	ldr	r3, [pc, #84]	; (8006010 <mem_malloc+0x1d4>)
 8005fbc:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005fc0:	4919      	ldr	r1, [pc, #100]	; (8006028 <mem_malloc+0x1ec>)
 8005fc2:	4815      	ldr	r0, [pc, #84]	; (8006018 <mem_malloc+0x1dc>)
 8005fc4:	f009 fa3e 	bl	800f444 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d006      	beq.n	8005fe0 <mem_malloc+0x1a4>
 8005fd2:	4b0f      	ldr	r3, [pc, #60]	; (8006010 <mem_malloc+0x1d4>)
 8005fd4:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005fd8:	4914      	ldr	r1, [pc, #80]	; (800602c <mem_malloc+0x1f0>)
 8005fda:	480f      	ldr	r0, [pc, #60]	; (8006018 <mem_malloc+0x1dc>)
 8005fdc:	f009 fa32 	bl	800f444 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	e00e      	b.n	8006004 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005fe6:	8bfb      	ldrh	r3, [r7, #30]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff fc83 	bl	80058f4 <ptr_to_mem>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005ff4:	8bfa      	ldrh	r2, [r7, #30]
 8005ff6:	8bbb      	ldrh	r3, [r7, #28]
 8005ff8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	f4ff af44 	bcc.w	8005e8a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3720      	adds	r7, #32
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	200058b4 	.word	0x200058b4
 8006010:	08010664 	.word	0x08010664
 8006014:	0801080c 	.word	0x0801080c
 8006018:	080106ac 	.word	0x080106ac
 800601c:	200058b0 	.word	0x200058b0
 8006020:	08010820 	.word	0x08010820
 8006024:	0801083c 	.word	0x0801083c
 8006028:	0801086c 	.word	0x0801086c
 800602c:	0801089c 	.word	0x0801089c

08006030 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	3303      	adds	r3, #3
 8006046:	f023 0303 	bic.w	r3, r3, #3
 800604a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	e011      	b.n	8006076 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	461a      	mov	r2, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	4413      	add	r3, r2
 800606e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3301      	adds	r3, #1
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	885b      	ldrh	r3, [r3, #2]
 800607a:	461a      	mov	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4293      	cmp	r3, r2
 8006080:	dbe7      	blt.n	8006052 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006082:	bf00      	nop
 8006084:	bf00      	nop
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006096:	2300      	movs	r3, #0
 8006098:	80fb      	strh	r3, [r7, #6]
 800609a:	e009      	b.n	80060b0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	4a08      	ldr	r2, [pc, #32]	; (80060c0 <memp_init+0x30>)
 80060a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff ffc3 	bl	8006030 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80060aa:	88fb      	ldrh	r3, [r7, #6]
 80060ac:	3301      	adds	r3, #1
 80060ae:	80fb      	strh	r3, [r7, #6]
 80060b0:	88fb      	ldrh	r3, [r7, #6]
 80060b2:	2b08      	cmp	r3, #8
 80060b4:	d9f2      	bls.n	800609c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80060b6:	bf00      	nop
 80060b8:	bf00      	nop
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	08013080 	.word	0x08013080

080060c4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d012      	beq.n	8006100 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	6812      	ldr	r2, [r2, #0]
 80060e2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d006      	beq.n	80060fc <do_memp_malloc_pool+0x38>
 80060ee:	4b07      	ldr	r3, [pc, #28]	; (800610c <do_memp_malloc_pool+0x48>)
 80060f0:	f44f 728c 	mov.w	r2, #280	; 0x118
 80060f4:	4906      	ldr	r1, [pc, #24]	; (8006110 <do_memp_malloc_pool+0x4c>)
 80060f6:	4807      	ldr	r0, [pc, #28]	; (8006114 <do_memp_malloc_pool+0x50>)
 80060f8:	f009 f9a4 	bl	800f444 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	e000      	b.n	8006102 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	080108c0 	.word	0x080108c0
 8006110:	080108f0 	.word	0x080108f0
 8006114:	08010914 	.word	0x08010914

08006118 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d106      	bne.n	8006134 <memp_malloc_pool+0x1c>
 8006126:	4b0a      	ldr	r3, [pc, #40]	; (8006150 <memp_malloc_pool+0x38>)
 8006128:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800612c:	4909      	ldr	r1, [pc, #36]	; (8006154 <memp_malloc_pool+0x3c>)
 800612e:	480a      	ldr	r0, [pc, #40]	; (8006158 <memp_malloc_pool+0x40>)
 8006130:	f009 f988 	bl	800f444 <iprintf>
  if (desc == NULL) {
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <memp_malloc_pool+0x26>
    return NULL;
 800613a:	2300      	movs	r3, #0
 800613c:	e003      	b.n	8006146 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff ffc0 	bl	80060c4 <do_memp_malloc_pool>
 8006144:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	080108c0 	.word	0x080108c0
 8006154:	0801093c 	.word	0x0801093c
 8006158:	08010914 	.word	0x08010914

0800615c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	4603      	mov	r3, r0
 8006164:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	2b08      	cmp	r3, #8
 800616a:	d908      	bls.n	800617e <memp_malloc+0x22>
 800616c:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <memp_malloc+0x3c>)
 800616e:	f240 1257 	movw	r2, #343	; 0x157
 8006172:	490a      	ldr	r1, [pc, #40]	; (800619c <memp_malloc+0x40>)
 8006174:	480a      	ldr	r0, [pc, #40]	; (80061a0 <memp_malloc+0x44>)
 8006176:	f009 f965 	bl	800f444 <iprintf>
 800617a:	2300      	movs	r3, #0
 800617c:	e008      	b.n	8006190 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800617e:	79fb      	ldrb	r3, [r7, #7]
 8006180:	4a08      	ldr	r2, [pc, #32]	; (80061a4 <memp_malloc+0x48>)
 8006182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff ff9c 	bl	80060c4 <do_memp_malloc_pool>
 800618c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800618e:	68fb      	ldr	r3, [r7, #12]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	080108c0 	.word	0x080108c0
 800619c:	08010950 	.word	0x08010950
 80061a0:	08010914 	.word	0x08010914
 80061a4:	08013080 	.word	0x08013080

080061a8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	f003 0303 	and.w	r3, r3, #3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d006      	beq.n	80061ca <do_memp_free_pool+0x22>
 80061bc:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <do_memp_free_pool+0x40>)
 80061be:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80061c2:	490a      	ldr	r1, [pc, #40]	; (80061ec <do_memp_free_pool+0x44>)
 80061c4:	480a      	ldr	r0, [pc, #40]	; (80061f0 <do_memp_free_pool+0x48>)
 80061c6:	f009 f93d 	bl	800f444 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80061e0:	bf00      	nop
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	080108c0 	.word	0x080108c0
 80061ec:	08010970 	.word	0x08010970
 80061f0:	08010914 	.word	0x08010914

080061f4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d106      	bne.n	8006212 <memp_free_pool+0x1e>
 8006204:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <memp_free_pool+0x3c>)
 8006206:	f240 1295 	movw	r2, #405	; 0x195
 800620a:	490a      	ldr	r1, [pc, #40]	; (8006234 <memp_free_pool+0x40>)
 800620c:	480a      	ldr	r0, [pc, #40]	; (8006238 <memp_free_pool+0x44>)
 800620e:	f009 f919 	bl	800f444 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <memp_free_pool+0x34>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d004      	beq.n	8006228 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff ffc1 	bl	80061a8 <do_memp_free_pool>
 8006226:	e000      	b.n	800622a <memp_free_pool+0x36>
    return;
 8006228:	bf00      	nop
}
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	080108c0 	.word	0x080108c0
 8006234:	0801093c 	.word	0x0801093c
 8006238:	08010914 	.word	0x08010914

0800623c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	4603      	mov	r3, r0
 8006244:	6039      	str	r1, [r7, #0]
 8006246:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	2b08      	cmp	r3, #8
 800624c:	d907      	bls.n	800625e <memp_free+0x22>
 800624e:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <memp_free+0x44>)
 8006250:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006254:	490b      	ldr	r1, [pc, #44]	; (8006284 <memp_free+0x48>)
 8006256:	480c      	ldr	r0, [pc, #48]	; (8006288 <memp_free+0x4c>)
 8006258:	f009 f8f4 	bl	800f444 <iprintf>
 800625c:	e00c      	b.n	8006278 <memp_free+0x3c>

  if (mem == NULL) {
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	4a09      	ldr	r2, [pc, #36]	; (800628c <memp_free+0x50>)
 8006268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff ff9a 	bl	80061a8 <do_memp_free_pool>
 8006274:	e000      	b.n	8006278 <memp_free+0x3c>
    return;
 8006276:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	080108c0 	.word	0x080108c0
 8006284:	08010990 	.word	0x08010990
 8006288:	08010914 	.word	0x08010914
 800628c:	08013080 	.word	0x08013080

08006290 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006294:	bf00      	nop
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
	...

080062a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d108      	bne.n	80062c6 <netif_add+0x26>
 80062b4:	4b57      	ldr	r3, [pc, #348]	; (8006414 <netif_add+0x174>)
 80062b6:	f240 1227 	movw	r2, #295	; 0x127
 80062ba:	4957      	ldr	r1, [pc, #348]	; (8006418 <netif_add+0x178>)
 80062bc:	4857      	ldr	r0, [pc, #348]	; (800641c <netif_add+0x17c>)
 80062be:	f009 f8c1 	bl	800f444 <iprintf>
 80062c2:	2300      	movs	r3, #0
 80062c4:	e0a2      	b.n	800640c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d108      	bne.n	80062de <netif_add+0x3e>
 80062cc:	4b51      	ldr	r3, [pc, #324]	; (8006414 <netif_add+0x174>)
 80062ce:	f44f 7294 	mov.w	r2, #296	; 0x128
 80062d2:	4953      	ldr	r1, [pc, #332]	; (8006420 <netif_add+0x180>)
 80062d4:	4851      	ldr	r0, [pc, #324]	; (800641c <netif_add+0x17c>)
 80062d6:	f009 f8b5 	bl	800f444 <iprintf>
 80062da:	2300      	movs	r3, #0
 80062dc:	e096      	b.n	800640c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80062e4:	4b4f      	ldr	r3, [pc, #316]	; (8006424 <netif_add+0x184>)
 80062e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80062ee:	4b4d      	ldr	r3, [pc, #308]	; (8006424 <netif_add+0x184>)
 80062f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80062f8:	4b4a      	ldr	r3, [pc, #296]	; (8006424 <netif_add+0x184>)
 80062fa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4a45      	ldr	r2, [pc, #276]	; (8006428 <netif_add+0x188>)
 8006312:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a3a      	ldr	r2, [r7, #32]
 800632c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800632e:	4b3f      	ldr	r3, [pc, #252]	; (800642c <netif_add+0x18c>)
 8006330:	781a      	ldrb	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800633c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 f913 	bl	8006570 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	4798      	blx	r3
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <netif_add+0xba>
    return NULL;
 8006356:	2300      	movs	r3, #0
 8006358:	e058      	b.n	800640c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006360:	2bff      	cmp	r3, #255	; 0xff
 8006362:	d103      	bne.n	800636c <netif_add+0xcc>
        netif->num = 0;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800636c:	2300      	movs	r3, #0
 800636e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006370:	4b2f      	ldr	r3, [pc, #188]	; (8006430 <netif_add+0x190>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	e02b      	b.n	80063d0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	429a      	cmp	r2, r3
 800637e:	d106      	bne.n	800638e <netif_add+0xee>
 8006380:	4b24      	ldr	r3, [pc, #144]	; (8006414 <netif_add+0x174>)
 8006382:	f240 128b 	movw	r2, #395	; 0x18b
 8006386:	492b      	ldr	r1, [pc, #172]	; (8006434 <netif_add+0x194>)
 8006388:	4824      	ldr	r0, [pc, #144]	; (800641c <netif_add+0x17c>)
 800638a:	f009 f85b 	bl	800f444 <iprintf>
        num_netifs++;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	3301      	adds	r3, #1
 8006392:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	2bff      	cmp	r3, #255	; 0xff
 8006398:	dd06      	ble.n	80063a8 <netif_add+0x108>
 800639a:	4b1e      	ldr	r3, [pc, #120]	; (8006414 <netif_add+0x174>)
 800639c:	f240 128d 	movw	r2, #397	; 0x18d
 80063a0:	4925      	ldr	r1, [pc, #148]	; (8006438 <netif_add+0x198>)
 80063a2:	481e      	ldr	r0, [pc, #120]	; (800641c <netif_add+0x17c>)
 80063a4:	f009 f84e 	bl	800f444 <iprintf>
        if (netif2->num == netif->num) {
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d108      	bne.n	80063ca <netif_add+0x12a>
          netif->num++;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063be:	3301      	adds	r3, #1
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80063c8:	e005      	b.n	80063d6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1d0      	bne.n	8006378 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1be      	bne.n	800635a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063e2:	2bfe      	cmp	r3, #254	; 0xfe
 80063e4:	d103      	bne.n	80063ee <netif_add+0x14e>
    netif_num = 0;
 80063e6:	4b11      	ldr	r3, [pc, #68]	; (800642c <netif_add+0x18c>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	e006      	b.n	80063fc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063f4:	3301      	adds	r3, #1
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	4b0c      	ldr	r3, [pc, #48]	; (800642c <netif_add+0x18c>)
 80063fa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80063fc:	4b0c      	ldr	r3, [pc, #48]	; (8006430 <netif_add+0x190>)
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006404:	4a0a      	ldr	r2, [pc, #40]	; (8006430 <netif_add+0x190>)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800640a:	68fb      	ldr	r3, [r7, #12]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3718      	adds	r7, #24
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	080109ac 	.word	0x080109ac
 8006418:	08010a40 	.word	0x08010a40
 800641c:	080109fc 	.word	0x080109fc
 8006420:	08010a5c 	.word	0x08010a5c
 8006424:	080130e4 	.word	0x080130e4
 8006428:	0800684b 	.word	0x0800684b
 800642c:	200087ac 	.word	0x200087ac
 8006430:	200087a4 	.word	0x200087a4
 8006434:	08010a80 	.word	0x08010a80
 8006438:	08010a94 	.word	0x08010a94

0800643c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f002 fb43 	bl	8008ad4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800644e:	6839      	ldr	r1, [r7, #0]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f006 fc27 	bl	800cca4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006456:	bf00      	nop
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <netif_do_set_ipaddr+0x20>
 8006472:	4b1d      	ldr	r3, [pc, #116]	; (80064e8 <netif_do_set_ipaddr+0x88>)
 8006474:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006478:	491c      	ldr	r1, [pc, #112]	; (80064ec <netif_do_set_ipaddr+0x8c>)
 800647a:	481d      	ldr	r0, [pc, #116]	; (80064f0 <netif_do_set_ipaddr+0x90>)
 800647c:	f008 ffe2 	bl	800f444 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d106      	bne.n	8006494 <netif_do_set_ipaddr+0x34>
 8006486:	4b18      	ldr	r3, [pc, #96]	; (80064e8 <netif_do_set_ipaddr+0x88>)
 8006488:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800648c:	4917      	ldr	r1, [pc, #92]	; (80064ec <netif_do_set_ipaddr+0x8c>)
 800648e:	4818      	ldr	r0, [pc, #96]	; (80064f0 <netif_do_set_ipaddr+0x90>)
 8006490:	f008 ffd8 	bl	800f444 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3304      	adds	r3, #4
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d01c      	beq.n	80064dc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3304      	adds	r3, #4
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80064b2:	f107 0314 	add.w	r3, r7, #20
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff ffbf 	bl	800643c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d002      	beq.n	80064ca <netif_do_set_ipaddr+0x6a>
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	e000      	b.n	80064cc <netif_do_set_ipaddr+0x6c>
 80064ca:	2300      	movs	r3, #0
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80064d0:	2101      	movs	r1, #1
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 f8d2 	bl	800667c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80064d8:	2301      	movs	r3, #1
 80064da:	e000      	b.n	80064de <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	080109ac 	.word	0x080109ac
 80064ec:	08010ac4 	.word	0x08010ac4
 80064f0:	080109fc 	.word	0x080109fc

080064f4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3308      	adds	r3, #8
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d00a      	beq.n	8006524 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <netif_do_set_netmask+0x26>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	e000      	b.n	800651c <netif_do_set_netmask+0x28>
 800651a:	2300      	movs	r3, #0
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006520:	2301      	movs	r3, #1
 8006522:	e000      	b.n	8006526 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006532:	b480      	push	{r7}
 8006534:	b085      	sub	sp, #20
 8006536:	af00      	add	r7, sp, #0
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	330c      	adds	r3, #12
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d00a      	beq.n	8006562 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <netif_do_set_gw+0x26>
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	e000      	b.n	800655a <netif_do_set_gw+0x28>
 8006558:	2300      	movs	r3, #0
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800655e:	2301      	movs	r3, #1
 8006560:	e000      	b.n	8006564 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b088      	sub	sp, #32
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800657e:	2300      	movs	r3, #0
 8006580:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800658c:	4b1c      	ldr	r3, [pc, #112]	; (8006600 <netif_set_addr+0x90>)
 800658e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006596:	4b1a      	ldr	r3, [pc, #104]	; (8006600 <netif_set_addr+0x90>)
 8006598:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80065a0:	4b17      	ldr	r3, [pc, #92]	; (8006600 <netif_set_addr+0x90>)
 80065a2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <netif_set_addr+0x42>
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <netif_set_addr+0x46>
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <netif_set_addr+0x48>
 80065b6:	2300      	movs	r3, #0
 80065b8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d006      	beq.n	80065ce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80065c0:	f107 0310 	add.w	r3, r7, #16
 80065c4:	461a      	mov	r2, r3
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f7ff ff49 	bl	8006460 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f7ff ff8e 	bl	80064f4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7ff ffa8 	bl	8006532 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d106      	bne.n	80065f6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80065e8:	f107 0310 	add.w	r3, r7, #16
 80065ec:	461a      	mov	r2, r3
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f7ff ff35 	bl	8006460 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80065f6:	bf00      	nop
 80065f8:	3720      	adds	r7, #32
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	080130e4 	.word	0x080130e4

08006604 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800660c:	4a04      	ldr	r2, [pc, #16]	; (8006620 <netif_set_default+0x1c>)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	200087a8 	.word	0x200087a8

08006624 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d107      	bne.n	8006642 <netif_set_up+0x1e>
 8006632:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <netif_set_up+0x4c>)
 8006634:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006638:	490e      	ldr	r1, [pc, #56]	; (8006674 <netif_set_up+0x50>)
 800663a:	480f      	ldr	r0, [pc, #60]	; (8006678 <netif_set_up+0x54>)
 800663c:	f008 ff02 	bl	800f444 <iprintf>
 8006640:	e013      	b.n	800666a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10c      	bne.n	800666a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006656:	f043 0301 	orr.w	r3, r3, #1
 800665a:	b2da      	uxtb	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006662:	2103      	movs	r1, #3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f809 	bl	800667c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	080109ac 	.word	0x080109ac
 8006674:	08010b34 	.word	0x08010b34
 8006678:	080109fc 	.word	0x080109fc

0800667c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <netif_issue_reports+0x20>
 800668e:	4b18      	ldr	r3, [pc, #96]	; (80066f0 <netif_issue_reports+0x74>)
 8006690:	f240 326d 	movw	r2, #877	; 0x36d
 8006694:	4917      	ldr	r1, [pc, #92]	; (80066f4 <netif_issue_reports+0x78>)
 8006696:	4818      	ldr	r0, [pc, #96]	; (80066f8 <netif_issue_reports+0x7c>)
 8006698:	f008 fed4 	bl	800f444 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066a2:	f003 0304 	and.w	r3, r3, #4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d01e      	beq.n	80066e8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066b0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d017      	beq.n	80066e8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d013      	beq.n	80066ea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3304      	adds	r3, #4
 80066c6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00e      	beq.n	80066ea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066d2:	f003 0308 	and.w	r3, r3, #8
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d007      	beq.n	80066ea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3304      	adds	r3, #4
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f007 fa49 	bl	800db78 <etharp_request>
 80066e6:	e000      	b.n	80066ea <netif_issue_reports+0x6e>
    return;
 80066e8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	080109ac 	.word	0x080109ac
 80066f4:	08010b50 	.word	0x08010b50
 80066f8:	080109fc 	.word	0x080109fc

080066fc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d107      	bne.n	800671a <netif_set_down+0x1e>
 800670a:	4b12      	ldr	r3, [pc, #72]	; (8006754 <netif_set_down+0x58>)
 800670c:	f240 329b 	movw	r2, #923	; 0x39b
 8006710:	4911      	ldr	r1, [pc, #68]	; (8006758 <netif_set_down+0x5c>)
 8006712:	4812      	ldr	r0, [pc, #72]	; (800675c <netif_set_down+0x60>)
 8006714:	f008 fe96 	bl	800f444 <iprintf>
 8006718:	e019      	b.n	800674e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d012      	beq.n	800674e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800672e:	f023 0301 	bic.w	r3, r3, #1
 8006732:	b2da      	uxtb	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f006 fdd3 	bl	800d2f4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	080109ac 	.word	0x080109ac
 8006758:	08010b74 	.word	0x08010b74
 800675c:	080109fc 	.word	0x080109fc

08006760 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d107      	bne.n	800677e <netif_set_link_up+0x1e>
 800676e:	4b13      	ldr	r3, [pc, #76]	; (80067bc <netif_set_link_up+0x5c>)
 8006770:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8006774:	4912      	ldr	r1, [pc, #72]	; (80067c0 <netif_set_link_up+0x60>)
 8006776:	4813      	ldr	r0, [pc, #76]	; (80067c4 <netif_set_link_up+0x64>)
 8006778:	f008 fe64 	bl	800f444 <iprintf>
 800677c:	e01b      	b.n	80067b6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d114      	bne.n	80067b6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006792:	f043 0304 	orr.w	r3, r3, #4
 8006796:	b2da      	uxtb	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800679e:	2103      	movs	r1, #3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7ff ff6b 	bl	800667c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <netif_set_link_up+0x56>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	080109ac 	.word	0x080109ac
 80067c0:	08010b94 	.word	0x08010b94
 80067c4:	080109fc 	.word	0x080109fc

080067c8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d107      	bne.n	80067e6 <netif_set_link_down+0x1e>
 80067d6:	4b11      	ldr	r3, [pc, #68]	; (800681c <netif_set_link_down+0x54>)
 80067d8:	f240 4206 	movw	r2, #1030	; 0x406
 80067dc:	4910      	ldr	r1, [pc, #64]	; (8006820 <netif_set_link_down+0x58>)
 80067de:	4811      	ldr	r0, [pc, #68]	; (8006824 <netif_set_link_down+0x5c>)
 80067e0:	f008 fe30 	bl	800f444 <iprintf>
 80067e4:	e017      	b.n	8006816 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d010      	beq.n	8006816 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067fa:	f023 0304 	bic.w	r3, r3, #4
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <netif_set_link_down+0x4e>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	080109ac 	.word	0x080109ac
 8006820:	08010bb8 	.word	0x08010bb8
 8006824:	080109fc 	.word	0x080109fc

08006828 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	61da      	str	r2, [r3, #28]
  }
}
 800683e:	bf00      	nop
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800684a:	b480      	push	{r7}
 800684c:	b085      	sub	sp, #20
 800684e:	af00      	add	r7, sp, #0
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006856:	f06f 030b 	mvn.w	r3, #11
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
	...

08006868 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	4603      	mov	r3, r0
 8006870:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d013      	beq.n	80068a0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006878:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <netif_get_by_index+0x48>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	e00c      	b.n	800689a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006886:	3301      	adds	r3, #1
 8006888:	b2db      	uxtb	r3, r3
 800688a:	79fa      	ldrb	r2, [r7, #7]
 800688c:	429a      	cmp	r2, r3
 800688e:	d101      	bne.n	8006894 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	e006      	b.n	80068a2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1ef      	bne.n	8006880 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	200087a4 	.word	0x200087a4

080068b4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80068ba:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <pbuf_free_ooseq+0x38>)
 80068bc:	2200      	movs	r2, #0
 80068be:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80068c0:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <pbuf_free_ooseq+0x3c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	607b      	str	r3, [r7, #4]
 80068c6:	e00a      	b.n	80068de <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f002 f93d 	bl	8008b50 <tcp_free_ooseq>
      return;
 80068d6:	e005      	b.n	80068e4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	607b      	str	r3, [r7, #4]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1f1      	bne.n	80068c8 <pbuf_free_ooseq+0x14>
    }
  }
}
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	200087ad 	.word	0x200087ad
 80068f0:	200087bc 	.word	0x200087bc

080068f4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80068f8:	4b03      	ldr	r3, [pc, #12]	; (8006908 <pbuf_pool_is_empty+0x14>)
 80068fa:	2201      	movs	r2, #1
 80068fc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80068fe:	bf00      	nop
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	200087ad 	.word	0x200087ad

0800690c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	4611      	mov	r1, r2
 8006918:	461a      	mov	r2, r3
 800691a:	460b      	mov	r3, r1
 800691c:	80fb      	strh	r3, [r7, #6]
 800691e:	4613      	mov	r3, r2
 8006920:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	88fa      	ldrh	r2, [r7, #6]
 8006932:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	88ba      	ldrh	r2, [r7, #4]
 8006938:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800693a:	8b3b      	ldrh	r3, [r7, #24]
 800693c:	b2da      	uxtb	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	7f3a      	ldrb	r2, [r7, #28]
 8006946:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2201      	movs	r2, #1
 800694c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	73da      	strb	r2, [r3, #15]
}
 8006954:	bf00      	nop
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08c      	sub	sp, #48	; 0x30
 8006964:	af02      	add	r7, sp, #8
 8006966:	4603      	mov	r3, r0
 8006968:	71fb      	strb	r3, [r7, #7]
 800696a:	460b      	mov	r3, r1
 800696c:	80bb      	strh	r3, [r7, #4]
 800696e:	4613      	mov	r3, r2
 8006970:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006976:	887b      	ldrh	r3, [r7, #2]
 8006978:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800697c:	d07f      	beq.n	8006a7e <pbuf_alloc+0x11e>
 800697e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006982:	f300 80c8 	bgt.w	8006b16 <pbuf_alloc+0x1b6>
 8006986:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800698a:	d010      	beq.n	80069ae <pbuf_alloc+0x4e>
 800698c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006990:	f300 80c1 	bgt.w	8006b16 <pbuf_alloc+0x1b6>
 8006994:	2b01      	cmp	r3, #1
 8006996:	d002      	beq.n	800699e <pbuf_alloc+0x3e>
 8006998:	2b41      	cmp	r3, #65	; 0x41
 800699a:	f040 80bc 	bne.w	8006b16 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800699e:	887a      	ldrh	r2, [r7, #2]
 80069a0:	88bb      	ldrh	r3, [r7, #4]
 80069a2:	4619      	mov	r1, r3
 80069a4:	2000      	movs	r0, #0
 80069a6:	f000 f8d1 	bl	8006b4c <pbuf_alloc_reference>
 80069aa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80069ac:	e0bd      	b.n	8006b2a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80069ae:	2300      	movs	r3, #0
 80069b0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80069b2:	2300      	movs	r3, #0
 80069b4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80069b6:	88bb      	ldrh	r3, [r7, #4]
 80069b8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80069ba:	2008      	movs	r0, #8
 80069bc:	f7ff fbce 	bl	800615c <memp_malloc>
 80069c0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d109      	bne.n	80069dc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80069c8:	f7ff ff94 	bl	80068f4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80069d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069d4:	f000 faa8 	bl	8006f28 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80069d8:	2300      	movs	r3, #0
 80069da:	e0a7      	b.n	8006b2c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80069dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069de:	3303      	adds	r3, #3
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f023 0303 	bic.w	r3, r3, #3
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	8b7a      	ldrh	r2, [r7, #26]
 80069f0:	4293      	cmp	r3, r2
 80069f2:	bf28      	it	cs
 80069f4:	4613      	movcs	r3, r2
 80069f6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80069f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069fa:	3310      	adds	r3, #16
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4413      	add	r3, r2
 8006a00:	3303      	adds	r3, #3
 8006a02:	f023 0303 	bic.w	r3, r3, #3
 8006a06:	4618      	mov	r0, r3
 8006a08:	89f9      	ldrh	r1, [r7, #14]
 8006a0a:	8b7a      	ldrh	r2, [r7, #26]
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	887b      	ldrh	r3, [r7, #2]
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	460b      	mov	r3, r1
 8006a16:	4601      	mov	r1, r0
 8006a18:	6938      	ldr	r0, [r7, #16]
 8006a1a:	f7ff ff77 	bl	800690c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d006      	beq.n	8006a38 <pbuf_alloc+0xd8>
 8006a2a:	4b42      	ldr	r3, [pc, #264]	; (8006b34 <pbuf_alloc+0x1d4>)
 8006a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a30:	4941      	ldr	r1, [pc, #260]	; (8006b38 <pbuf_alloc+0x1d8>)
 8006a32:	4842      	ldr	r0, [pc, #264]	; (8006b3c <pbuf_alloc+0x1dc>)
 8006a34:	f008 fd06 	bl	800f444 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006a38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a3a:	3303      	adds	r3, #3
 8006a3c:	f023 0303 	bic.w	r3, r3, #3
 8006a40:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006a44:	d106      	bne.n	8006a54 <pbuf_alloc+0xf4>
 8006a46:	4b3b      	ldr	r3, [pc, #236]	; (8006b34 <pbuf_alloc+0x1d4>)
 8006a48:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006a4c:	493c      	ldr	r1, [pc, #240]	; (8006b40 <pbuf_alloc+0x1e0>)
 8006a4e:	483b      	ldr	r0, [pc, #236]	; (8006b3c <pbuf_alloc+0x1dc>)
 8006a50:	f008 fcf8 	bl	800f444 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d102      	bne.n	8006a60 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5e:	e002      	b.n	8006a66 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006a6a:	8b7a      	ldrh	r2, [r7, #26]
 8006a6c:	89fb      	ldrh	r3, [r7, #14]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006a76:	8b7b      	ldrh	r3, [r7, #26]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d19e      	bne.n	80069ba <pbuf_alloc+0x5a>
      break;
 8006a7c:	e055      	b.n	8006b2a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006a7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a80:	3303      	adds	r3, #3
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f023 0303 	bic.w	r3, r3, #3
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	88bb      	ldrh	r3, [r7, #4]
 8006a8c:	3303      	adds	r3, #3
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f023 0303 	bic.w	r3, r3, #3
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	4413      	add	r3, r2
 8006a98:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006a9a:	8b3b      	ldrh	r3, [r7, #24]
 8006a9c:	3310      	adds	r3, #16
 8006a9e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006aa0:	8b3a      	ldrh	r2, [r7, #24]
 8006aa2:	88bb      	ldrh	r3, [r7, #4]
 8006aa4:	3303      	adds	r3, #3
 8006aa6:	f023 0303 	bic.w	r3, r3, #3
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d306      	bcc.n	8006abc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006aae:	8afa      	ldrh	r2, [r7, #22]
 8006ab0:	88bb      	ldrh	r3, [r7, #4]
 8006ab2:	3303      	adds	r3, #3
 8006ab4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d201      	bcs.n	8006ac0 <pbuf_alloc+0x160>
        return NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	e035      	b.n	8006b2c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006ac0:	8afb      	ldrh	r3, [r7, #22]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7ff f9ba 	bl	8005e3c <mem_malloc>
 8006ac8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <pbuf_alloc+0x174>
        return NULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e02b      	b.n	8006b2c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006ad4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ad6:	3310      	adds	r3, #16
 8006ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ada:	4413      	add	r3, r2
 8006adc:	3303      	adds	r3, #3
 8006ade:	f023 0303 	bic.w	r3, r3, #3
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	88b9      	ldrh	r1, [r7, #4]
 8006ae6:	88ba      	ldrh	r2, [r7, #4]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	887b      	ldrh	r3, [r7, #2]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	460b      	mov	r3, r1
 8006af2:	4601      	mov	r1, r0
 8006af4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006af6:	f7ff ff09 	bl	800690c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d010      	beq.n	8006b28 <pbuf_alloc+0x1c8>
 8006b06:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <pbuf_alloc+0x1d4>)
 8006b08:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006b0c:	490d      	ldr	r1, [pc, #52]	; (8006b44 <pbuf_alloc+0x1e4>)
 8006b0e:	480b      	ldr	r0, [pc, #44]	; (8006b3c <pbuf_alloc+0x1dc>)
 8006b10:	f008 fc98 	bl	800f444 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006b14:	e008      	b.n	8006b28 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006b16:	4b07      	ldr	r3, [pc, #28]	; (8006b34 <pbuf_alloc+0x1d4>)
 8006b18:	f240 1227 	movw	r2, #295	; 0x127
 8006b1c:	490a      	ldr	r1, [pc, #40]	; (8006b48 <pbuf_alloc+0x1e8>)
 8006b1e:	4807      	ldr	r0, [pc, #28]	; (8006b3c <pbuf_alloc+0x1dc>)
 8006b20:	f008 fc90 	bl	800f444 <iprintf>
      return NULL;
 8006b24:	2300      	movs	r3, #0
 8006b26:	e001      	b.n	8006b2c <pbuf_alloc+0x1cc>
      break;
 8006b28:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3728      	adds	r7, #40	; 0x28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	08010bdc 	.word	0x08010bdc
 8006b38:	08010c0c 	.word	0x08010c0c
 8006b3c:	08010c3c 	.word	0x08010c3c
 8006b40:	08010c64 	.word	0x08010c64
 8006b44:	08010c98 	.word	0x08010c98
 8006b48:	08010cc4 	.word	0x08010cc4

08006b4c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	807b      	strh	r3, [r7, #2]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006b5c:	883b      	ldrh	r3, [r7, #0]
 8006b5e:	2b41      	cmp	r3, #65	; 0x41
 8006b60:	d009      	beq.n	8006b76 <pbuf_alloc_reference+0x2a>
 8006b62:	883b      	ldrh	r3, [r7, #0]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d006      	beq.n	8006b76 <pbuf_alloc_reference+0x2a>
 8006b68:	4b0f      	ldr	r3, [pc, #60]	; (8006ba8 <pbuf_alloc_reference+0x5c>)
 8006b6a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006b6e:	490f      	ldr	r1, [pc, #60]	; (8006bac <pbuf_alloc_reference+0x60>)
 8006b70:	480f      	ldr	r0, [pc, #60]	; (8006bb0 <pbuf_alloc_reference+0x64>)
 8006b72:	f008 fc67 	bl	800f444 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006b76:	2007      	movs	r0, #7
 8006b78:	f7ff faf0 	bl	800615c <memp_malloc>
 8006b7c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	e00b      	b.n	8006ba0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006b88:	8879      	ldrh	r1, [r7, #2]
 8006b8a:	887a      	ldrh	r2, [r7, #2]
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9301      	str	r3, [sp, #4]
 8006b90:	883b      	ldrh	r3, [r7, #0]
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	460b      	mov	r3, r1
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f7ff feb7 	bl	800690c <pbuf_init_alloced_pbuf>
  return p;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	08010bdc 	.word	0x08010bdc
 8006bac:	08010ce0 	.word	0x08010ce0
 8006bb0:	08010c3c 	.word	0x08010c3c

08006bb4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b088      	sub	sp, #32
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	607b      	str	r3, [r7, #4]
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	73fb      	strb	r3, [r7, #15]
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	81bb      	strh	r3, [r7, #12]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006bcc:	8a7b      	ldrh	r3, [r7, #18]
 8006bce:	3303      	adds	r3, #3
 8006bd0:	f023 0203 	bic.w	r2, r3, #3
 8006bd4:	89bb      	ldrh	r3, [r7, #12]
 8006bd6:	441a      	add	r2, r3
 8006bd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d901      	bls.n	8006be2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e018      	b.n	8006c14 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d007      	beq.n	8006bf8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006be8:	8a7b      	ldrh	r3, [r7, #18]
 8006bea:	3303      	adds	r3, #3
 8006bec:	f023 0303 	bic.w	r3, r3, #3
 8006bf0:	6a3a      	ldr	r2, [r7, #32]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	e001      	b.n	8006bfc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	89b9      	ldrh	r1, [r7, #12]
 8006c00:	89ba      	ldrh	r2, [r7, #12]
 8006c02:	2302      	movs	r3, #2
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	897b      	ldrh	r3, [r7, #10]
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	6979      	ldr	r1, [r7, #20]
 8006c0e:	f7ff fe7d 	bl	800690c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006c12:	687b      	ldr	r3, [r7, #4]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d106      	bne.n	8006c3c <pbuf_realloc+0x20>
 8006c2e:	4b3a      	ldr	r3, [pc, #232]	; (8006d18 <pbuf_realloc+0xfc>)
 8006c30:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006c34:	4939      	ldr	r1, [pc, #228]	; (8006d1c <pbuf_realloc+0x100>)
 8006c36:	483a      	ldr	r0, [pc, #232]	; (8006d20 <pbuf_realloc+0x104>)
 8006c38:	f008 fc04 	bl	800f444 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	891b      	ldrh	r3, [r3, #8]
 8006c40:	887a      	ldrh	r2, [r7, #2]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d263      	bcs.n	8006d0e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	891a      	ldrh	r2, [r3, #8]
 8006c4a:	887b      	ldrh	r3, [r7, #2]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006c50:	887b      	ldrh	r3, [r7, #2]
 8006c52:	817b      	strh	r3, [r7, #10]
  q = p;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006c58:	e018      	b.n	8006c8c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	895b      	ldrh	r3, [r3, #10]
 8006c5e:	897a      	ldrh	r2, [r7, #10]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	891a      	ldrh	r2, [r3, #8]
 8006c68:	893b      	ldrh	r3, [r7, #8]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d106      	bne.n	8006c8c <pbuf_realloc+0x70>
 8006c7e:	4b26      	ldr	r3, [pc, #152]	; (8006d18 <pbuf_realloc+0xfc>)
 8006c80:	f240 12af 	movw	r2, #431	; 0x1af
 8006c84:	4927      	ldr	r1, [pc, #156]	; (8006d24 <pbuf_realloc+0x108>)
 8006c86:	4826      	ldr	r0, [pc, #152]	; (8006d20 <pbuf_realloc+0x104>)
 8006c88:	f008 fbdc 	bl	800f444 <iprintf>
  while (rem_len > q->len) {
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	895b      	ldrh	r3, [r3, #10]
 8006c90:	897a      	ldrh	r2, [r7, #10]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d8e1      	bhi.n	8006c5a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	7b1b      	ldrb	r3, [r3, #12]
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d121      	bne.n	8006ce6 <pbuf_realloc+0xca>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	895b      	ldrh	r3, [r3, #10]
 8006ca6:	897a      	ldrh	r2, [r7, #10]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d01c      	beq.n	8006ce6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	7b5b      	ldrb	r3, [r3, #13]
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d116      	bne.n	8006ce6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	897b      	ldrh	r3, [r7, #10]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	4619      	mov	r1, r3
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f7fe ffba 	bl	8005c44 <mem_trim>
 8006cd0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d106      	bne.n	8006ce6 <pbuf_realloc+0xca>
 8006cd8:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <pbuf_realloc+0xfc>)
 8006cda:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006cde:	4912      	ldr	r1, [pc, #72]	; (8006d28 <pbuf_realloc+0x10c>)
 8006ce0:	480f      	ldr	r0, [pc, #60]	; (8006d20 <pbuf_realloc+0x104>)
 8006ce2:	f008 fbaf 	bl	800f444 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	897a      	ldrh	r2, [r7, #10]
 8006cea:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	895a      	ldrh	r2, [r3, #10]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d004      	beq.n	8006d06 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 f911 	bl	8006f28 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	e000      	b.n	8006d10 <pbuf_realloc+0xf4>
    return;
 8006d0e:	bf00      	nop

}
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	08010bdc 	.word	0x08010bdc
 8006d1c:	08010cf4 	.word	0x08010cf4
 8006d20:	08010c3c 	.word	0x08010c3c
 8006d24:	08010d0c 	.word	0x08010d0c
 8006d28:	08010d24 	.word	0x08010d24

08006d2c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d106      	bne.n	8006d4e <pbuf_add_header_impl+0x22>
 8006d40:	4b2b      	ldr	r3, [pc, #172]	; (8006df0 <pbuf_add_header_impl+0xc4>)
 8006d42:	f240 12df 	movw	r2, #479	; 0x1df
 8006d46:	492b      	ldr	r1, [pc, #172]	; (8006df4 <pbuf_add_header_impl+0xc8>)
 8006d48:	482b      	ldr	r0, [pc, #172]	; (8006df8 <pbuf_add_header_impl+0xcc>)
 8006d4a:	f008 fb7b 	bl	800f444 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <pbuf_add_header_impl+0x30>
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d5a:	d301      	bcc.n	8006d60 <pbuf_add_header_impl+0x34>
    return 1;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e043      	b.n	8006de8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <pbuf_add_header_impl+0x3e>
    return 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	e03e      	b.n	8006de8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	891a      	ldrh	r2, [r3, #8]
 8006d72:	8a7b      	ldrh	r3, [r7, #18]
 8006d74:	4413      	add	r3, r2
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	8a7a      	ldrh	r2, [r7, #18]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d901      	bls.n	8006d82 <pbuf_add_header_impl+0x56>
    return 1;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e032      	b.n	8006de8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	7b1b      	ldrb	r3, [r3, #12]
 8006d86:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006d88:	8a3b      	ldrh	r3, [r7, #16]
 8006d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00c      	beq.n	8006dac <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	425b      	negs	r3, r3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3310      	adds	r3, #16
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d20d      	bcs.n	8006dc4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e01d      	b.n	8006de8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d006      	beq.n	8006dc0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	425b      	negs	r3, r3
 8006dba:	4413      	add	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	e001      	b.n	8006dc4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e011      	b.n	8006de8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	895a      	ldrh	r2, [r3, #10]
 8006dce:	8a7b      	ldrh	r3, [r7, #18]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	891a      	ldrh	r2, [r3, #8]
 8006ddc:	8a7b      	ldrh	r3, [r7, #18]
 8006dde:	4413      	add	r3, r2
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	811a      	strh	r2, [r3, #8]


  return 0;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	08010bdc 	.word	0x08010bdc
 8006df4:	08010d40 	.word	0x08010d40
 8006df8:	08010c3c 	.word	0x08010c3c

08006dfc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006e06:	2200      	movs	r2, #0
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff ff8e 	bl	8006d2c <pbuf_add_header_impl>
 8006e10:	4603      	mov	r3, r0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d106      	bne.n	8006e3a <pbuf_remove_header+0x1e>
 8006e2c:	4b20      	ldr	r3, [pc, #128]	; (8006eb0 <pbuf_remove_header+0x94>)
 8006e2e:	f240 224b 	movw	r2, #587	; 0x24b
 8006e32:	4920      	ldr	r1, [pc, #128]	; (8006eb4 <pbuf_remove_header+0x98>)
 8006e34:	4820      	ldr	r0, [pc, #128]	; (8006eb8 <pbuf_remove_header+0x9c>)
 8006e36:	f008 fb05 	bl	800f444 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <pbuf_remove_header+0x2c>
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e46:	d301      	bcc.n	8006e4c <pbuf_remove_header+0x30>
    return 1;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e02c      	b.n	8006ea6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <pbuf_remove_header+0x3a>
    return 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	e027      	b.n	8006ea6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	895b      	ldrh	r3, [r3, #10]
 8006e5e:	89fa      	ldrh	r2, [r7, #14]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d908      	bls.n	8006e76 <pbuf_remove_header+0x5a>
 8006e64:	4b12      	ldr	r3, [pc, #72]	; (8006eb0 <pbuf_remove_header+0x94>)
 8006e66:	f240 2255 	movw	r2, #597	; 0x255
 8006e6a:	4914      	ldr	r1, [pc, #80]	; (8006ebc <pbuf_remove_header+0xa0>)
 8006e6c:	4812      	ldr	r0, [pc, #72]	; (8006eb8 <pbuf_remove_header+0x9c>)
 8006e6e:	f008 fae9 	bl	800f444 <iprintf>
 8006e72:	2301      	movs	r3, #1
 8006e74:	e017      	b.n	8006ea6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	441a      	add	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	895a      	ldrh	r2, [r3, #10]
 8006e8c:	89fb      	ldrh	r3, [r7, #14]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	891a      	ldrh	r2, [r3, #8]
 8006e9a:	89fb      	ldrh	r3, [r7, #14]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	08010bdc 	.word	0x08010bdc
 8006eb4:	08010d40 	.word	0x08010d40
 8006eb8:	08010c3c 	.word	0x08010c3c
 8006ebc:	08010d4c 	.word	0x08010d4c

08006ec0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	807b      	strh	r3, [r7, #2]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006ed0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	da08      	bge.n	8006eea <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006ed8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006edc:	425b      	negs	r3, r3
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff ff9b 	bl	8006e1c <pbuf_remove_header>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	e007      	b.n	8006efa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006eea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006eee:	787a      	ldrb	r2, [r7, #1]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff ff1a 	bl	8006d2c <pbuf_add_header_impl>
 8006ef8:	4603      	mov	r3, r0
  }
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006f0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f12:	2201      	movs	r2, #1
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff ffd2 	bl	8006ec0 <pbuf_header_impl>
 8006f1c:	4603      	mov	r3, r0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
	...

08006f28 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10b      	bne.n	8006f4e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d106      	bne.n	8006f4a <pbuf_free+0x22>
 8006f3c:	4b38      	ldr	r3, [pc, #224]	; (8007020 <pbuf_free+0xf8>)
 8006f3e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006f42:	4938      	ldr	r1, [pc, #224]	; (8007024 <pbuf_free+0xfc>)
 8006f44:	4838      	ldr	r0, [pc, #224]	; (8007028 <pbuf_free+0x100>)
 8006f46:	f008 fa7d 	bl	800f444 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e063      	b.n	8007016 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006f52:	e05c      	b.n	800700e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	7b9b      	ldrb	r3, [r3, #14]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d106      	bne.n	8006f6a <pbuf_free+0x42>
 8006f5c:	4b30      	ldr	r3, [pc, #192]	; (8007020 <pbuf_free+0xf8>)
 8006f5e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006f62:	4932      	ldr	r1, [pc, #200]	; (800702c <pbuf_free+0x104>)
 8006f64:	4830      	ldr	r0, [pc, #192]	; (8007028 <pbuf_free+0x100>)
 8006f66:	f008 fa6d 	bl	800f444 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	7b9b      	ldrb	r3, [r3, #14]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	739a      	strb	r2, [r3, #14]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	7b9b      	ldrb	r3, [r3, #14]
 8006f7a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006f7c:	7dbb      	ldrb	r3, [r7, #22]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d143      	bne.n	800700a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	7b1b      	ldrb	r3, [r3, #12]
 8006f8c:	f003 030f 	and.w	r3, r3, #15
 8006f90:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	7b5b      	ldrb	r3, [r3, #13]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d011      	beq.n	8006fc2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <pbuf_free+0x90>
 8006faa:	4b1d      	ldr	r3, [pc, #116]	; (8007020 <pbuf_free+0xf8>)
 8006fac:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006fb0:	491f      	ldr	r1, [pc, #124]	; (8007030 <pbuf_free+0x108>)
 8006fb2:	481d      	ldr	r0, [pc, #116]	; (8007028 <pbuf_free+0x100>)
 8006fb4:	f008 fa46 	bl	800f444 <iprintf>
        pc->custom_free_function(p);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	4798      	blx	r3
 8006fc0:	e01d      	b.n	8006ffe <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d104      	bne.n	8006fd2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	2008      	movs	r0, #8
 8006fcc:	f7ff f936 	bl	800623c <memp_free>
 8006fd0:	e015      	b.n	8006ffe <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d104      	bne.n	8006fe2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006fd8:	6879      	ldr	r1, [r7, #4]
 8006fda:	2007      	movs	r0, #7
 8006fdc:	f7ff f92e 	bl	800623c <memp_free>
 8006fe0:	e00d      	b.n	8006ffe <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d103      	bne.n	8006ff0 <pbuf_free+0xc8>
          mem_free(p);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7fe fdc1 	bl	8005b70 <mem_free>
 8006fee:	e006      	b.n	8006ffe <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <pbuf_free+0xf8>)
 8006ff2:	f240 320f 	movw	r2, #783	; 0x30f
 8006ff6:	490f      	ldr	r1, [pc, #60]	; (8007034 <pbuf_free+0x10c>)
 8006ff8:	480b      	ldr	r0, [pc, #44]	; (8007028 <pbuf_free+0x100>)
 8006ffa:	f008 fa23 	bl	800f444 <iprintf>
        }
      }
      count++;
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	3301      	adds	r3, #1
 8007002:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	607b      	str	r3, [r7, #4]
 8007008:	e001      	b.n	800700e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d19f      	bne.n	8006f54 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	08010bdc 	.word	0x08010bdc
 8007024:	08010d40 	.word	0x08010d40
 8007028:	08010c3c 	.word	0x08010c3c
 800702c:	08010d6c 	.word	0x08010d6c
 8007030:	08010d84 	.word	0x08010d84
 8007034:	08010da8 	.word	0x08010da8

08007038 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007044:	e005      	b.n	8007052 <pbuf_clen+0x1a>
    ++len;
 8007046:	89fb      	ldrh	r3, [r7, #14]
 8007048:	3301      	adds	r3, #1
 800704a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1f6      	bne.n	8007046 <pbuf_clen+0xe>
  }
  return len;
 8007058:	89fb      	ldrh	r3, [r7, #14]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
	...

08007068 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d010      	beq.n	8007098 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	7b9b      	ldrb	r3, [r3, #14]
 800707a:	3301      	adds	r3, #1
 800707c:	b2da      	uxtb	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	7b9b      	ldrb	r3, [r3, #14]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d106      	bne.n	8007098 <pbuf_ref+0x30>
 800708a:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <pbuf_ref+0x38>)
 800708c:	f240 3242 	movw	r2, #834	; 0x342
 8007090:	4904      	ldr	r1, [pc, #16]	; (80070a4 <pbuf_ref+0x3c>)
 8007092:	4805      	ldr	r0, [pc, #20]	; (80070a8 <pbuf_ref+0x40>)
 8007094:	f008 f9d6 	bl	800f444 <iprintf>
  }
}
 8007098:	bf00      	nop
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	08010bdc 	.word	0x08010bdc
 80070a4:	08010dbc 	.word	0x08010dbc
 80070a8:	08010c3c 	.word	0x08010c3c

080070ac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <pbuf_cat+0x16>
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d107      	bne.n	80070d2 <pbuf_cat+0x26>
 80070c2:	4b20      	ldr	r3, [pc, #128]	; (8007144 <pbuf_cat+0x98>)
 80070c4:	f240 3259 	movw	r2, #857	; 0x359
 80070c8:	491f      	ldr	r1, [pc, #124]	; (8007148 <pbuf_cat+0x9c>)
 80070ca:	4820      	ldr	r0, [pc, #128]	; (800714c <pbuf_cat+0xa0>)
 80070cc:	f008 f9ba 	bl	800f444 <iprintf>
 80070d0:	e034      	b.n	800713c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	e00a      	b.n	80070ee <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	891a      	ldrh	r2, [r3, #8]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	891b      	ldrh	r3, [r3, #8]
 80070e0:	4413      	add	r3, r2
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1f0      	bne.n	80070d8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	891a      	ldrh	r2, [r3, #8]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	895b      	ldrh	r3, [r3, #10]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d006      	beq.n	8007110 <pbuf_cat+0x64>
 8007102:	4b10      	ldr	r3, [pc, #64]	; (8007144 <pbuf_cat+0x98>)
 8007104:	f240 3262 	movw	r2, #866	; 0x362
 8007108:	4911      	ldr	r1, [pc, #68]	; (8007150 <pbuf_cat+0xa4>)
 800710a:	4810      	ldr	r0, [pc, #64]	; (800714c <pbuf_cat+0xa0>)
 800710c:	f008 f99a 	bl	800f444 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d006      	beq.n	8007126 <pbuf_cat+0x7a>
 8007118:	4b0a      	ldr	r3, [pc, #40]	; (8007144 <pbuf_cat+0x98>)
 800711a:	f240 3263 	movw	r2, #867	; 0x363
 800711e:	490d      	ldr	r1, [pc, #52]	; (8007154 <pbuf_cat+0xa8>)
 8007120:	480a      	ldr	r0, [pc, #40]	; (800714c <pbuf_cat+0xa0>)
 8007122:	f008 f98f 	bl	800f444 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	891a      	ldrh	r2, [r3, #8]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	891b      	ldrh	r3, [r3, #8]
 800712e:	4413      	add	r3, r2
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	08010bdc 	.word	0x08010bdc
 8007148:	08010dd0 	.word	0x08010dd0
 800714c:	08010c3c 	.word	0x08010c3c
 8007150:	08010e08 	.word	0x08010e08
 8007154:	08010e38 	.word	0x08010e38

08007158 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007162:	2300      	movs	r3, #0
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	2300      	movs	r3, #0
 8007168:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d008      	beq.n	8007182 <pbuf_copy+0x2a>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d005      	beq.n	8007182 <pbuf_copy+0x2a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	891a      	ldrh	r2, [r3, #8]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	891b      	ldrh	r3, [r3, #8]
 800717e:	429a      	cmp	r2, r3
 8007180:	d209      	bcs.n	8007196 <pbuf_copy+0x3e>
 8007182:	4b57      	ldr	r3, [pc, #348]	; (80072e0 <pbuf_copy+0x188>)
 8007184:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007188:	4956      	ldr	r1, [pc, #344]	; (80072e4 <pbuf_copy+0x18c>)
 800718a:	4857      	ldr	r0, [pc, #348]	; (80072e8 <pbuf_copy+0x190>)
 800718c:	f008 f95a 	bl	800f444 <iprintf>
 8007190:	f06f 030f 	mvn.w	r3, #15
 8007194:	e09f      	b.n	80072d6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	895b      	ldrh	r3, [r3, #10]
 800719a:	461a      	mov	r2, r3
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	1ad2      	subs	r2, r2, r3
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	895b      	ldrh	r3, [r3, #10]
 80071a4:	4619      	mov	r1, r3
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	1acb      	subs	r3, r1, r3
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d306      	bcc.n	80071bc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	895b      	ldrh	r3, [r3, #10]
 80071b2:	461a      	mov	r2, r3
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	e005      	b.n	80071c8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	895b      	ldrh	r3, [r3, #10]
 80071c0:	461a      	mov	r2, r3
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	18d0      	adds	r0, r2, r3
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	4413      	add	r3, r2
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	4619      	mov	r1, r3
 80071dc:	f008 f91c 	bl	800f418 <memcpy>
    offset_to += len;
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4413      	add	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4413      	add	r3, r2
 80071ee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	895b      	ldrh	r3, [r3, #10]
 80071f4:	461a      	mov	r2, r3
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d906      	bls.n	800720a <pbuf_copy+0xb2>
 80071fc:	4b38      	ldr	r3, [pc, #224]	; (80072e0 <pbuf_copy+0x188>)
 80071fe:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007202:	493a      	ldr	r1, [pc, #232]	; (80072ec <pbuf_copy+0x194>)
 8007204:	4838      	ldr	r0, [pc, #224]	; (80072e8 <pbuf_copy+0x190>)
 8007206:	f008 f91d 	bl	800f444 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	895b      	ldrh	r3, [r3, #10]
 800720e:	461a      	mov	r2, r3
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	4293      	cmp	r3, r2
 8007214:	d906      	bls.n	8007224 <pbuf_copy+0xcc>
 8007216:	4b32      	ldr	r3, [pc, #200]	; (80072e0 <pbuf_copy+0x188>)
 8007218:	f240 32da 	movw	r2, #986	; 0x3da
 800721c:	4934      	ldr	r1, [pc, #208]	; (80072f0 <pbuf_copy+0x198>)
 800721e:	4832      	ldr	r0, [pc, #200]	; (80072e8 <pbuf_copy+0x190>)
 8007220:	f008 f910 	bl	800f444 <iprintf>
    if (offset_from >= p_from->len) {
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	895b      	ldrh	r3, [r3, #10]
 8007228:	461a      	mov	r2, r3
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	4293      	cmp	r3, r2
 800722e:	d304      	bcc.n	800723a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007230:	2300      	movs	r3, #0
 8007232:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	895b      	ldrh	r3, [r3, #10]
 800723e:	461a      	mov	r2, r3
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	4293      	cmp	r3, r2
 8007244:	d114      	bne.n	8007270 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007246:	2300      	movs	r3, #0
 8007248:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10c      	bne.n	8007270 <pbuf_copy+0x118>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d009      	beq.n	8007270 <pbuf_copy+0x118>
 800725c:	4b20      	ldr	r3, [pc, #128]	; (80072e0 <pbuf_copy+0x188>)
 800725e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007262:	4924      	ldr	r1, [pc, #144]	; (80072f4 <pbuf_copy+0x19c>)
 8007264:	4820      	ldr	r0, [pc, #128]	; (80072e8 <pbuf_copy+0x190>)
 8007266:	f008 f8ed 	bl	800f444 <iprintf>
 800726a:	f06f 030f 	mvn.w	r3, #15
 800726e:	e032      	b.n	80072d6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d013      	beq.n	800729e <pbuf_copy+0x146>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	895a      	ldrh	r2, [r3, #10]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	891b      	ldrh	r3, [r3, #8]
 800727e:	429a      	cmp	r2, r3
 8007280:	d10d      	bne.n	800729e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d009      	beq.n	800729e <pbuf_copy+0x146>
 800728a:	4b15      	ldr	r3, [pc, #84]	; (80072e0 <pbuf_copy+0x188>)
 800728c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007290:	4919      	ldr	r1, [pc, #100]	; (80072f8 <pbuf_copy+0x1a0>)
 8007292:	4815      	ldr	r0, [pc, #84]	; (80072e8 <pbuf_copy+0x190>)
 8007294:	f008 f8d6 	bl	800f444 <iprintf>
 8007298:	f06f 0305 	mvn.w	r3, #5
 800729c:	e01b      	b.n	80072d6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d013      	beq.n	80072cc <pbuf_copy+0x174>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	895a      	ldrh	r2, [r3, #10]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	891b      	ldrh	r3, [r3, #8]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d10d      	bne.n	80072cc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d009      	beq.n	80072cc <pbuf_copy+0x174>
 80072b8:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <pbuf_copy+0x188>)
 80072ba:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80072be:	490e      	ldr	r1, [pc, #56]	; (80072f8 <pbuf_copy+0x1a0>)
 80072c0:	4809      	ldr	r0, [pc, #36]	; (80072e8 <pbuf_copy+0x190>)
 80072c2:	f008 f8bf 	bl	800f444 <iprintf>
 80072c6:	f06f 0305 	mvn.w	r3, #5
 80072ca:	e004      	b.n	80072d6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f47f af61 	bne.w	8007196 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	08010bdc 	.word	0x08010bdc
 80072e4:	08010e84 	.word	0x08010e84
 80072e8:	08010c3c 	.word	0x08010c3c
 80072ec:	08010eb4 	.word	0x08010eb4
 80072f0:	08010ecc 	.word	0x08010ecc
 80072f4:	08010ee8 	.word	0x08010ee8
 80072f8:	08010ef8 	.word	0x08010ef8

080072fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	4611      	mov	r1, r2
 8007308:	461a      	mov	r2, r3
 800730a:	460b      	mov	r3, r1
 800730c:	80fb      	strh	r3, [r7, #6]
 800730e:	4613      	mov	r3, r2
 8007310:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d108      	bne.n	8007332 <pbuf_copy_partial+0x36>
 8007320:	4b2b      	ldr	r3, [pc, #172]	; (80073d0 <pbuf_copy_partial+0xd4>)
 8007322:	f240 420a 	movw	r2, #1034	; 0x40a
 8007326:	492b      	ldr	r1, [pc, #172]	; (80073d4 <pbuf_copy_partial+0xd8>)
 8007328:	482b      	ldr	r0, [pc, #172]	; (80073d8 <pbuf_copy_partial+0xdc>)
 800732a:	f008 f88b 	bl	800f444 <iprintf>
 800732e:	2300      	movs	r3, #0
 8007330:	e04a      	b.n	80073c8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d108      	bne.n	800734a <pbuf_copy_partial+0x4e>
 8007338:	4b25      	ldr	r3, [pc, #148]	; (80073d0 <pbuf_copy_partial+0xd4>)
 800733a:	f240 420b 	movw	r2, #1035	; 0x40b
 800733e:	4927      	ldr	r1, [pc, #156]	; (80073dc <pbuf_copy_partial+0xe0>)
 8007340:	4825      	ldr	r0, [pc, #148]	; (80073d8 <pbuf_copy_partial+0xdc>)
 8007342:	f008 f87f 	bl	800f444 <iprintf>
 8007346:	2300      	movs	r3, #0
 8007348:	e03e      	b.n	80073c8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	61fb      	str	r3, [r7, #28]
 800734e:	e034      	b.n	80073ba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007350:	88bb      	ldrh	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <pbuf_copy_partial+0x70>
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	895b      	ldrh	r3, [r3, #10]
 800735a:	88ba      	ldrh	r2, [r7, #4]
 800735c:	429a      	cmp	r2, r3
 800735e:	d305      	bcc.n	800736c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	895b      	ldrh	r3, [r3, #10]
 8007364:	88ba      	ldrh	r2, [r7, #4]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	80bb      	strh	r3, [r7, #4]
 800736a:	e023      	b.n	80073b4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	895a      	ldrh	r2, [r3, #10]
 8007370:	88bb      	ldrh	r3, [r7, #4]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007376:	8b3a      	ldrh	r2, [r7, #24]
 8007378:	88fb      	ldrh	r3, [r7, #6]
 800737a:	429a      	cmp	r2, r3
 800737c:	d901      	bls.n	8007382 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800737e:	88fb      	ldrh	r3, [r7, #6]
 8007380:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007382:	8b7b      	ldrh	r3, [r7, #26]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	18d0      	adds	r0, r2, r3
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	88bb      	ldrh	r3, [r7, #4]
 800738e:	4413      	add	r3, r2
 8007390:	8b3a      	ldrh	r2, [r7, #24]
 8007392:	4619      	mov	r1, r3
 8007394:	f008 f840 	bl	800f418 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007398:	8afa      	ldrh	r2, [r7, #22]
 800739a:	8b3b      	ldrh	r3, [r7, #24]
 800739c:	4413      	add	r3, r2
 800739e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80073a0:	8b7a      	ldrh	r2, [r7, #26]
 80073a2:	8b3b      	ldrh	r3, [r7, #24]
 80073a4:	4413      	add	r3, r2
 80073a6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80073a8:	88fa      	ldrh	r2, [r7, #6]
 80073aa:	8b3b      	ldrh	r3, [r7, #24]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80073b0:	2300      	movs	r3, #0
 80073b2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	61fb      	str	r3, [r7, #28]
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <pbuf_copy_partial+0xca>
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1c4      	bne.n	8007350 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80073c6:	8afb      	ldrh	r3, [r7, #22]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3720      	adds	r7, #32
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	08010bdc 	.word	0x08010bdc
 80073d4:	08010f24 	.word	0x08010f24
 80073d8:	08010c3c 	.word	0x08010c3c
 80073dc:	08010f44 	.word	0x08010f44

080073e0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	4603      	mov	r3, r0
 80073e8:	603a      	str	r2, [r7, #0]
 80073ea:	71fb      	strb	r3, [r7, #7]
 80073ec:	460b      	mov	r3, r1
 80073ee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	8919      	ldrh	r1, [r3, #8]
 80073f4:	88ba      	ldrh	r2, [r7, #4]
 80073f6:	79fb      	ldrb	r3, [r7, #7]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff fab1 	bl	8006960 <pbuf_alloc>
 80073fe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <pbuf_clone+0x2a>
    return NULL;
 8007406:	2300      	movs	r3, #0
 8007408:	e011      	b.n	800742e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f7ff fea3 	bl	8007158 <pbuf_copy>
 8007412:	4603      	mov	r3, r0
 8007414:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007416:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d006      	beq.n	800742c <pbuf_clone+0x4c>
 800741e:	4b06      	ldr	r3, [pc, #24]	; (8007438 <pbuf_clone+0x58>)
 8007420:	f240 5224 	movw	r2, #1316	; 0x524
 8007424:	4905      	ldr	r1, [pc, #20]	; (800743c <pbuf_clone+0x5c>)
 8007426:	4806      	ldr	r0, [pc, #24]	; (8007440 <pbuf_clone+0x60>)
 8007428:	f008 f80c 	bl	800f444 <iprintf>
  return q;
 800742c:	68fb      	ldr	r3, [r7, #12]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	08010bdc 	.word	0x08010bdc
 800743c:	08011050 	.word	0x08011050
 8007440:	08010c3c 	.word	0x08010c3c

08007444 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007448:	f008 f88a 	bl	800f560 <rand>
 800744c:	4603      	mov	r3, r0
 800744e:	b29b      	uxth	r3, r3
 8007450:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007454:	b29b      	uxth	r3, r3
 8007456:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800745a:	b29a      	uxth	r2, r3
 800745c:	4b01      	ldr	r3, [pc, #4]	; (8007464 <tcp_init+0x20>)
 800745e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007460:	bf00      	nop
 8007462:	bd80      	pop	{r7, pc}
 8007464:	20000020 	.word	0x20000020

08007468 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	7d1b      	ldrb	r3, [r3, #20]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d105      	bne.n	8007484 <tcp_free+0x1c>
 8007478:	4b06      	ldr	r3, [pc, #24]	; (8007494 <tcp_free+0x2c>)
 800747a:	22d4      	movs	r2, #212	; 0xd4
 800747c:	4906      	ldr	r1, [pc, #24]	; (8007498 <tcp_free+0x30>)
 800747e:	4807      	ldr	r0, [pc, #28]	; (800749c <tcp_free+0x34>)
 8007480:	f007 ffe0 	bl	800f444 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	2001      	movs	r0, #1
 8007488:	f7fe fed8 	bl	800623c <memp_free>
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	080110dc 	.word	0x080110dc
 8007498:	0801110c 	.word	0x0801110c
 800749c:	08011120 	.word	0x08011120

080074a0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	7d1b      	ldrb	r3, [r3, #20]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d105      	bne.n	80074bc <tcp_free_listen+0x1c>
 80074b0:	4b06      	ldr	r3, [pc, #24]	; (80074cc <tcp_free_listen+0x2c>)
 80074b2:	22df      	movs	r2, #223	; 0xdf
 80074b4:	4906      	ldr	r1, [pc, #24]	; (80074d0 <tcp_free_listen+0x30>)
 80074b6:	4807      	ldr	r0, [pc, #28]	; (80074d4 <tcp_free_listen+0x34>)
 80074b8:	f007 ffc4 	bl	800f444 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	2002      	movs	r0, #2
 80074c0:	f7fe febc 	bl	800623c <memp_free>
}
 80074c4:	bf00      	nop
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	080110dc 	.word	0x080110dc
 80074d0:	08011148 	.word	0x08011148
 80074d4:	08011120 	.word	0x08011120

080074d8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80074dc:	f000 fea2 	bl	8008224 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80074e0:	4b07      	ldr	r3, [pc, #28]	; (8007500 <tcp_tmr+0x28>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	3301      	adds	r3, #1
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	4b05      	ldr	r3, [pc, #20]	; (8007500 <tcp_tmr+0x28>)
 80074ea:	701a      	strb	r2, [r3, #0]
 80074ec:	4b04      	ldr	r3, [pc, #16]	; (8007500 <tcp_tmr+0x28>)
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80074f8:	f000 fb54 	bl	8007ba4 <tcp_slowtmr>
  }
}
 80074fc:	bf00      	nop
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	200087c5 	.word	0x200087c5

08007504 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d105      	bne.n	8007520 <tcp_remove_listener+0x1c>
 8007514:	4b0d      	ldr	r3, [pc, #52]	; (800754c <tcp_remove_listener+0x48>)
 8007516:	22ff      	movs	r2, #255	; 0xff
 8007518:	490d      	ldr	r1, [pc, #52]	; (8007550 <tcp_remove_listener+0x4c>)
 800751a:	480e      	ldr	r0, [pc, #56]	; (8007554 <tcp_remove_listener+0x50>)
 800751c:	f007 ff92 	bl	800f444 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	e00a      	b.n	800753c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	429a      	cmp	r2, r3
 800752e:	d102      	bne.n	8007536 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1f1      	bne.n	8007526 <tcp_remove_listener+0x22>
    }
  }
}
 8007542:	bf00      	nop
 8007544:	bf00      	nop
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	080110dc 	.word	0x080110dc
 8007550:	08011164 	.word	0x08011164
 8007554:	08011120 	.word	0x08011120

08007558 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <tcp_listen_closed+0x1c>
 8007566:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <tcp_listen_closed+0x60>)
 8007568:	f240 1211 	movw	r2, #273	; 0x111
 800756c:	4913      	ldr	r1, [pc, #76]	; (80075bc <tcp_listen_closed+0x64>)
 800756e:	4814      	ldr	r0, [pc, #80]	; (80075c0 <tcp_listen_closed+0x68>)
 8007570:	f007 ff68 	bl	800f444 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	7d1b      	ldrb	r3, [r3, #20]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d006      	beq.n	800758a <tcp_listen_closed+0x32>
 800757c:	4b0e      	ldr	r3, [pc, #56]	; (80075b8 <tcp_listen_closed+0x60>)
 800757e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007582:	4910      	ldr	r1, [pc, #64]	; (80075c4 <tcp_listen_closed+0x6c>)
 8007584:	480e      	ldr	r0, [pc, #56]	; (80075c0 <tcp_listen_closed+0x68>)
 8007586:	f007 ff5d 	bl	800f444 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800758a:	2301      	movs	r3, #1
 800758c:	60fb      	str	r3, [r7, #12]
 800758e:	e00b      	b.n	80075a8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007590:	4a0d      	ldr	r2, [pc, #52]	; (80075c8 <tcp_listen_closed+0x70>)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6879      	ldr	r1, [r7, #4]
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff ffb1 	bl	8007504 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3301      	adds	r3, #1
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d9f0      	bls.n	8007590 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80075ae:	bf00      	nop
 80075b0:	bf00      	nop
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	080110dc 	.word	0x080110dc
 80075bc:	0801118c 	.word	0x0801118c
 80075c0:	08011120 	.word	0x08011120
 80075c4:	08011198 	.word	0x08011198
 80075c8:	080130bc 	.word	0x080130bc

080075cc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80075cc:	b5b0      	push	{r4, r5, r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af04      	add	r7, sp, #16
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d106      	bne.n	80075ec <tcp_close_shutdown+0x20>
 80075de:	4b63      	ldr	r3, [pc, #396]	; (800776c <tcp_close_shutdown+0x1a0>)
 80075e0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80075e4:	4962      	ldr	r1, [pc, #392]	; (8007770 <tcp_close_shutdown+0x1a4>)
 80075e6:	4863      	ldr	r0, [pc, #396]	; (8007774 <tcp_close_shutdown+0x1a8>)
 80075e8:	f007 ff2c 	bl	800f444 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d066      	beq.n	80076c0 <tcp_close_shutdown+0xf4>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	7d1b      	ldrb	r3, [r3, #20]
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	d003      	beq.n	8007602 <tcp_close_shutdown+0x36>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	7d1b      	ldrb	r3, [r3, #20]
 80075fe:	2b07      	cmp	r3, #7
 8007600:	d15e      	bne.n	80076c0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007606:	2b00      	cmp	r3, #0
 8007608:	d104      	bne.n	8007614 <tcp_close_shutdown+0x48>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800760e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007612:	d055      	beq.n	80076c0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	8b5b      	ldrh	r3, [r3, #26]
 8007618:	f003 0310 	and.w	r3, r3, #16
 800761c:	2b00      	cmp	r3, #0
 800761e:	d106      	bne.n	800762e <tcp_close_shutdown+0x62>
 8007620:	4b52      	ldr	r3, [pc, #328]	; (800776c <tcp_close_shutdown+0x1a0>)
 8007622:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8007626:	4954      	ldr	r1, [pc, #336]	; (8007778 <tcp_close_shutdown+0x1ac>)
 8007628:	4852      	ldr	r0, [pc, #328]	; (8007774 <tcp_close_shutdown+0x1a8>)
 800762a:	f007 ff0b 	bl	800f444 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007636:	687d      	ldr	r5, [r7, #4]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3304      	adds	r3, #4
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	8ad2      	ldrh	r2, [r2, #22]
 8007640:	6879      	ldr	r1, [r7, #4]
 8007642:	8b09      	ldrh	r1, [r1, #24]
 8007644:	9102      	str	r1, [sp, #8]
 8007646:	9201      	str	r2, [sp, #4]
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	462b      	mov	r3, r5
 800764c:	4622      	mov	r2, r4
 800764e:	4601      	mov	r1, r0
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f004 fe91 	bl	800c378 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 f8c6 	bl	80087e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800765c:	4b47      	ldr	r3, [pc, #284]	; (800777c <tcp_close_shutdown+0x1b0>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	429a      	cmp	r2, r3
 8007664:	d105      	bne.n	8007672 <tcp_close_shutdown+0xa6>
 8007666:	4b45      	ldr	r3, [pc, #276]	; (800777c <tcp_close_shutdown+0x1b0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	4a43      	ldr	r2, [pc, #268]	; (800777c <tcp_close_shutdown+0x1b0>)
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	e013      	b.n	800769a <tcp_close_shutdown+0xce>
 8007672:	4b42      	ldr	r3, [pc, #264]	; (800777c <tcp_close_shutdown+0x1b0>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	e00c      	b.n	8007694 <tcp_close_shutdown+0xc8>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	429a      	cmp	r2, r3
 8007682:	d104      	bne.n	800768e <tcp_close_shutdown+0xc2>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	60da      	str	r2, [r3, #12]
 800768c:	e005      	b.n	800769a <tcp_close_shutdown+0xce>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1ef      	bne.n	800767a <tcp_close_shutdown+0xae>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	60da      	str	r2, [r3, #12]
 80076a0:	4b37      	ldr	r3, [pc, #220]	; (8007780 <tcp_close_shutdown+0x1b4>)
 80076a2:	2201      	movs	r2, #1
 80076a4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80076a6:	4b37      	ldr	r3, [pc, #220]	; (8007784 <tcp_close_shutdown+0x1b8>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d102      	bne.n	80076b6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80076b0:	f003 fd5e 	bl	800b170 <tcp_trigger_input_pcb_close>
 80076b4:	e002      	b.n	80076bc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7ff fed6 	bl	8007468 <tcp_free>
      }
      return ERR_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	e050      	b.n	8007762 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	7d1b      	ldrb	r3, [r3, #20]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d03b      	beq.n	8007740 <tcp_close_shutdown+0x174>
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	dc44      	bgt.n	8007756 <tcp_close_shutdown+0x18a>
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <tcp_close_shutdown+0x10a>
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d02a      	beq.n	800772a <tcp_close_shutdown+0x15e>
 80076d4:	e03f      	b.n	8007756 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	8adb      	ldrh	r3, [r3, #22]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d021      	beq.n	8007722 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80076de:	4b2a      	ldr	r3, [pc, #168]	; (8007788 <tcp_close_shutdown+0x1bc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d105      	bne.n	80076f4 <tcp_close_shutdown+0x128>
 80076e8:	4b27      	ldr	r3, [pc, #156]	; (8007788 <tcp_close_shutdown+0x1bc>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	4a26      	ldr	r2, [pc, #152]	; (8007788 <tcp_close_shutdown+0x1bc>)
 80076f0:	6013      	str	r3, [r2, #0]
 80076f2:	e013      	b.n	800771c <tcp_close_shutdown+0x150>
 80076f4:	4b24      	ldr	r3, [pc, #144]	; (8007788 <tcp_close_shutdown+0x1bc>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	60bb      	str	r3, [r7, #8]
 80076fa:	e00c      	b.n	8007716 <tcp_close_shutdown+0x14a>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	429a      	cmp	r2, r3
 8007704:	d104      	bne.n	8007710 <tcp_close_shutdown+0x144>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68da      	ldr	r2, [r3, #12]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	60da      	str	r2, [r3, #12]
 800770e:	e005      	b.n	800771c <tcp_close_shutdown+0x150>
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	60bb      	str	r3, [r7, #8]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1ef      	bne.n	80076fc <tcp_close_shutdown+0x130>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7ff fea0 	bl	8007468 <tcp_free>
      break;
 8007728:	e01a      	b.n	8007760 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7ff ff14 	bl	8007558 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007730:	6879      	ldr	r1, [r7, #4]
 8007732:	4816      	ldr	r0, [pc, #88]	; (800778c <tcp_close_shutdown+0x1c0>)
 8007734:	f001 f8a8 	bl	8008888 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7ff feb1 	bl	80074a0 <tcp_free_listen>
      break;
 800773e:	e00f      	b.n	8007760 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	480e      	ldr	r0, [pc, #56]	; (800777c <tcp_close_shutdown+0x1b0>)
 8007744:	f001 f8a0 	bl	8008888 <tcp_pcb_remove>
 8007748:	4b0d      	ldr	r3, [pc, #52]	; (8007780 <tcp_close_shutdown+0x1b4>)
 800774a:	2201      	movs	r2, #1
 800774c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7ff fe8a 	bl	8007468 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007754:	e004      	b.n	8007760 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f81a 	bl	8007790 <tcp_close_shutdown_fin>
 800775c:	4603      	mov	r3, r0
 800775e:	e000      	b.n	8007762 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bdb0      	pop	{r4, r5, r7, pc}
 800776a:	bf00      	nop
 800776c:	080110dc 	.word	0x080110dc
 8007770:	080111b0 	.word	0x080111b0
 8007774:	08011120 	.word	0x08011120
 8007778:	080111d0 	.word	0x080111d0
 800777c:	200087bc 	.word	0x200087bc
 8007780:	200087c4 	.word	0x200087c4
 8007784:	200087fc 	.word	0x200087fc
 8007788:	200087b4 	.word	0x200087b4
 800778c:	200087b8 	.word	0x200087b8

08007790 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d106      	bne.n	80077ac <tcp_close_shutdown_fin+0x1c>
 800779e:	4b2e      	ldr	r3, [pc, #184]	; (8007858 <tcp_close_shutdown_fin+0xc8>)
 80077a0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80077a4:	492d      	ldr	r1, [pc, #180]	; (800785c <tcp_close_shutdown_fin+0xcc>)
 80077a6:	482e      	ldr	r0, [pc, #184]	; (8007860 <tcp_close_shutdown_fin+0xd0>)
 80077a8:	f007 fe4c 	bl	800f444 <iprintf>

  switch (pcb->state) {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	7d1b      	ldrb	r3, [r3, #20]
 80077b0:	2b07      	cmp	r3, #7
 80077b2:	d020      	beq.n	80077f6 <tcp_close_shutdown_fin+0x66>
 80077b4:	2b07      	cmp	r3, #7
 80077b6:	dc2b      	bgt.n	8007810 <tcp_close_shutdown_fin+0x80>
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d002      	beq.n	80077c2 <tcp_close_shutdown_fin+0x32>
 80077bc:	2b04      	cmp	r3, #4
 80077be:	d00d      	beq.n	80077dc <tcp_close_shutdown_fin+0x4c>
 80077c0:	e026      	b.n	8007810 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f003 fee6 	bl	800b594 <tcp_send_fin>
 80077c8:	4603      	mov	r3, r0
 80077ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80077cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d11f      	bne.n	8007814 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2205      	movs	r2, #5
 80077d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80077da:	e01b      	b.n	8007814 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f003 fed9 	bl	800b594 <tcp_send_fin>
 80077e2:	4603      	mov	r3, r0
 80077e4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80077e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d114      	bne.n	8007818 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2205      	movs	r2, #5
 80077f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80077f4:	e010      	b.n	8007818 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f003 fecc 	bl	800b594 <tcp_send_fin>
 80077fc:	4603      	mov	r3, r0
 80077fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d109      	bne.n	800781c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2209      	movs	r2, #9
 800780c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800780e:	e005      	b.n	800781c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	e01c      	b.n	800784e <tcp_close_shutdown_fin+0xbe>
      break;
 8007814:	bf00      	nop
 8007816:	e002      	b.n	800781e <tcp_close_shutdown_fin+0x8e>
      break;
 8007818:	bf00      	nop
 800781a:	e000      	b.n	800781e <tcp_close_shutdown_fin+0x8e>
      break;
 800781c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800781e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d103      	bne.n	800782e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f003 fff2 	bl	800b810 <tcp_output>
 800782c:	e00d      	b.n	800784a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800782e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007836:	d108      	bne.n	800784a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	8b5b      	ldrh	r3, [r3, #26]
 800783c:	f043 0308 	orr.w	r3, r3, #8
 8007840:	b29a      	uxth	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	e001      	b.n	800784e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800784a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	080110dc 	.word	0x080110dc
 800785c:	0801118c 	.word	0x0801118c
 8007860:	08011120 	.word	0x08011120

08007864 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d109      	bne.n	8007886 <tcp_close+0x22>
 8007872:	4b0f      	ldr	r3, [pc, #60]	; (80078b0 <tcp_close+0x4c>)
 8007874:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007878:	490e      	ldr	r1, [pc, #56]	; (80078b4 <tcp_close+0x50>)
 800787a:	480f      	ldr	r0, [pc, #60]	; (80078b8 <tcp_close+0x54>)
 800787c:	f007 fde2 	bl	800f444 <iprintf>
 8007880:	f06f 030f 	mvn.w	r3, #15
 8007884:	e00f      	b.n	80078a6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	7d1b      	ldrb	r3, [r3, #20]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d006      	beq.n	800789c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	8b5b      	ldrh	r3, [r3, #26]
 8007892:	f043 0310 	orr.w	r3, r3, #16
 8007896:	b29a      	uxth	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800789c:	2101      	movs	r1, #1
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7ff fe94 	bl	80075cc <tcp_close_shutdown>
 80078a4:	4603      	mov	r3, r0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	080110dc 	.word	0x080110dc
 80078b4:	080111ec 	.word	0x080111ec
 80078b8:	08011120 	.word	0x08011120

080078bc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08e      	sub	sp, #56	; 0x38
 80078c0:	af04      	add	r7, sp, #16
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d107      	bne.n	80078dc <tcp_abandon+0x20>
 80078cc:	4b52      	ldr	r3, [pc, #328]	; (8007a18 <tcp_abandon+0x15c>)
 80078ce:	f240 223d 	movw	r2, #573	; 0x23d
 80078d2:	4952      	ldr	r1, [pc, #328]	; (8007a1c <tcp_abandon+0x160>)
 80078d4:	4852      	ldr	r0, [pc, #328]	; (8007a20 <tcp_abandon+0x164>)
 80078d6:	f007 fdb5 	bl	800f444 <iprintf>
 80078da:	e099      	b.n	8007a10 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	7d1b      	ldrb	r3, [r3, #20]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d106      	bne.n	80078f2 <tcp_abandon+0x36>
 80078e4:	4b4c      	ldr	r3, [pc, #304]	; (8007a18 <tcp_abandon+0x15c>)
 80078e6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80078ea:	494e      	ldr	r1, [pc, #312]	; (8007a24 <tcp_abandon+0x168>)
 80078ec:	484c      	ldr	r0, [pc, #304]	; (8007a20 <tcp_abandon+0x164>)
 80078ee:	f007 fda9 	bl	800f444 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	7d1b      	ldrb	r3, [r3, #20]
 80078f6:	2b0a      	cmp	r3, #10
 80078f8:	d107      	bne.n	800790a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80078fa:	6879      	ldr	r1, [r7, #4]
 80078fc:	484a      	ldr	r0, [pc, #296]	; (8007a28 <tcp_abandon+0x16c>)
 80078fe:	f000 ffc3 	bl	8008888 <tcp_pcb_remove>
    tcp_free(pcb);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff fdb0 	bl	8007468 <tcp_free>
 8007908:	e082      	b.n	8007a10 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800790e:	2300      	movs	r3, #0
 8007910:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007916:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007924:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	7d1b      	ldrb	r3, [r3, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d126      	bne.n	8007982 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	8adb      	ldrh	r3, [r3, #22]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d02e      	beq.n	800799a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800793c:	4b3b      	ldr	r3, [pc, #236]	; (8007a2c <tcp_abandon+0x170>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	429a      	cmp	r2, r3
 8007944:	d105      	bne.n	8007952 <tcp_abandon+0x96>
 8007946:	4b39      	ldr	r3, [pc, #228]	; (8007a2c <tcp_abandon+0x170>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	4a37      	ldr	r2, [pc, #220]	; (8007a2c <tcp_abandon+0x170>)
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	e013      	b.n	800797a <tcp_abandon+0xbe>
 8007952:	4b36      	ldr	r3, [pc, #216]	; (8007a2c <tcp_abandon+0x170>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	61fb      	str	r3, [r7, #28]
 8007958:	e00c      	b.n	8007974 <tcp_abandon+0xb8>
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	429a      	cmp	r2, r3
 8007962:	d104      	bne.n	800796e <tcp_abandon+0xb2>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	60da      	str	r2, [r3, #12]
 800796c:	e005      	b.n	800797a <tcp_abandon+0xbe>
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	61fb      	str	r3, [r7, #28]
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1ef      	bne.n	800795a <tcp_abandon+0x9e>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	60da      	str	r2, [r3, #12]
 8007980:	e00b      	b.n	800799a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	8adb      	ldrh	r3, [r3, #22]
 800798a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800798c:	6879      	ldr	r1, [r7, #4]
 800798e:	4828      	ldr	r0, [pc, #160]	; (8007a30 <tcp_abandon+0x174>)
 8007990:	f000 ff7a 	bl	8008888 <tcp_pcb_remove>
 8007994:	4b27      	ldr	r3, [pc, #156]	; (8007a34 <tcp_abandon+0x178>)
 8007996:	2201      	movs	r2, #1
 8007998:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d004      	beq.n	80079ac <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fd1c 	bl	80083e4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d004      	beq.n	80079be <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 fd13 	bl	80083e4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fd0a 	bl	80083e4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00e      	beq.n	80079f4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80079d6:	6879      	ldr	r1, [r7, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3304      	adds	r3, #4
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	8b12      	ldrh	r2, [r2, #24]
 80079e0:	9202      	str	r2, [sp, #8]
 80079e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80079e4:	9201      	str	r2, [sp, #4]
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	460b      	mov	r3, r1
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	69b9      	ldr	r1, [r7, #24]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f004 fcc2 	bl	800c378 <tcp_rst>
    }
    last_state = pcb->state;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	7d1b      	ldrb	r3, [r3, #20]
 80079f8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff fd34 	bl	8007468 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d004      	beq.n	8007a10 <tcp_abandon+0x154>
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f06f 010c 	mvn.w	r1, #12
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	4798      	blx	r3
  }
}
 8007a10:	3728      	adds	r7, #40	; 0x28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	080110dc 	.word	0x080110dc
 8007a1c:	08011220 	.word	0x08011220
 8007a20:	08011120 	.word	0x08011120
 8007a24:	0801123c 	.word	0x0801123c
 8007a28:	200087c0 	.word	0x200087c0
 8007a2c:	200087b4 	.word	0x200087b4
 8007a30:	200087bc 	.word	0x200087bc
 8007a34:	200087c4 	.word	0x200087c4

08007a38 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007a40:	2101      	movs	r1, #1
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff ff3a 	bl	80078bc <tcp_abandon>
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d106      	bne.n	8007a6c <tcp_update_rcv_ann_wnd+0x1c>
 8007a5e:	4b25      	ldr	r3, [pc, #148]	; (8007af4 <tcp_update_rcv_ann_wnd+0xa4>)
 8007a60:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007a64:	4924      	ldr	r1, [pc, #144]	; (8007af8 <tcp_update_rcv_ann_wnd+0xa8>)
 8007a66:	4825      	ldr	r0, [pc, #148]	; (8007afc <tcp_update_rcv_ann_wnd+0xac>)
 8007a68:	f007 fcec 	bl	800f444 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007a74:	4413      	add	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007a80:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007a84:	bf28      	it	cs
 8007a86:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007a8a:	b292      	uxth	r2, r2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	db08      	blt.n	8007aa8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	e020      	b.n	8007aea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	dd03      	ble.n	8007abe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007abc:	e014      	b.n	8007ae8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ad0:	d306      	bcc.n	8007ae0 <tcp_update_rcv_ann_wnd+0x90>
 8007ad2:	4b08      	ldr	r3, [pc, #32]	; (8007af4 <tcp_update_rcv_ann_wnd+0xa4>)
 8007ad4:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007ad8:	4909      	ldr	r1, [pc, #36]	; (8007b00 <tcp_update_rcv_ann_wnd+0xb0>)
 8007ada:	4808      	ldr	r0, [pc, #32]	; (8007afc <tcp_update_rcv_ann_wnd+0xac>)
 8007adc:	f007 fcb2 	bl	800f444 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007ae8:	2300      	movs	r3, #0
  }
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	080110dc 	.word	0x080110dc
 8007af8:	08011338 	.word	0x08011338
 8007afc:	08011120 	.word	0x08011120
 8007b00:	0801135c 	.word	0x0801135c

08007b04 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d107      	bne.n	8007b26 <tcp_recved+0x22>
 8007b16:	4b1f      	ldr	r3, [pc, #124]	; (8007b94 <tcp_recved+0x90>)
 8007b18:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007b1c:	491e      	ldr	r1, [pc, #120]	; (8007b98 <tcp_recved+0x94>)
 8007b1e:	481f      	ldr	r0, [pc, #124]	; (8007b9c <tcp_recved+0x98>)
 8007b20:	f007 fc90 	bl	800f444 <iprintf>
 8007b24:	e032      	b.n	8007b8c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	7d1b      	ldrb	r3, [r3, #20]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d106      	bne.n	8007b3c <tcp_recved+0x38>
 8007b2e:	4b19      	ldr	r3, [pc, #100]	; (8007b94 <tcp_recved+0x90>)
 8007b30:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007b34:	491a      	ldr	r1, [pc, #104]	; (8007ba0 <tcp_recved+0x9c>)
 8007b36:	4819      	ldr	r0, [pc, #100]	; (8007b9c <tcp_recved+0x98>)
 8007b38:	f007 fc84 	bl	800f444 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007b40:	887b      	ldrh	r3, [r7, #2]
 8007b42:	4413      	add	r3, r2
 8007b44:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007b46:	89fb      	ldrh	r3, [r7, #14]
 8007b48:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007b4c:	d804      	bhi.n	8007b58 <tcp_recved+0x54>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b52:	89fa      	ldrh	r2, [r7, #14]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d204      	bcs.n	8007b62 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007b5e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007b60:	e002      	b.n	8007b68 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	89fa      	ldrh	r2, [r7, #14]
 8007b66:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff ff71 	bl	8007a50 <tcp_update_rcv_ann_wnd>
 8007b6e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007b76:	d309      	bcc.n	8007b8c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	8b5b      	ldrh	r3, [r3, #26]
 8007b7c:	f043 0302 	orr.w	r3, r3, #2
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f003 fe42 	bl	800b810 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	080110dc 	.word	0x080110dc
 8007b98:	08011378 	.word	0x08011378
 8007b9c:	08011120 	.word	0x08011120
 8007ba0:	08011390 	.word	0x08011390

08007ba4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007ba4:	b5b0      	push	{r4, r5, r7, lr}
 8007ba6:	b090      	sub	sp, #64	; 0x40
 8007ba8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007bb0:	4b94      	ldr	r3, [pc, #592]	; (8007e04 <tcp_slowtmr+0x260>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	4a93      	ldr	r2, [pc, #588]	; (8007e04 <tcp_slowtmr+0x260>)
 8007bb8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007bba:	4b93      	ldr	r3, [pc, #588]	; (8007e08 <tcp_slowtmr+0x264>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	4b91      	ldr	r3, [pc, #580]	; (8007e08 <tcp_slowtmr+0x264>)
 8007bc4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007bca:	4b90      	ldr	r3, [pc, #576]	; (8007e0c <tcp_slowtmr+0x268>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007bd0:	e29d      	b.n	800810e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	7d1b      	ldrb	r3, [r3, #20]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d106      	bne.n	8007be8 <tcp_slowtmr+0x44>
 8007bda:	4b8d      	ldr	r3, [pc, #564]	; (8007e10 <tcp_slowtmr+0x26c>)
 8007bdc:	f240 42be 	movw	r2, #1214	; 0x4be
 8007be0:	498c      	ldr	r1, [pc, #560]	; (8007e14 <tcp_slowtmr+0x270>)
 8007be2:	488d      	ldr	r0, [pc, #564]	; (8007e18 <tcp_slowtmr+0x274>)
 8007be4:	f007 fc2e 	bl	800f444 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bea:	7d1b      	ldrb	r3, [r3, #20]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d106      	bne.n	8007bfe <tcp_slowtmr+0x5a>
 8007bf0:	4b87      	ldr	r3, [pc, #540]	; (8007e10 <tcp_slowtmr+0x26c>)
 8007bf2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007bf6:	4989      	ldr	r1, [pc, #548]	; (8007e1c <tcp_slowtmr+0x278>)
 8007bf8:	4887      	ldr	r0, [pc, #540]	; (8007e18 <tcp_slowtmr+0x274>)
 8007bfa:	f007 fc23 	bl	800f444 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	7d1b      	ldrb	r3, [r3, #20]
 8007c02:	2b0a      	cmp	r3, #10
 8007c04:	d106      	bne.n	8007c14 <tcp_slowtmr+0x70>
 8007c06:	4b82      	ldr	r3, [pc, #520]	; (8007e10 <tcp_slowtmr+0x26c>)
 8007c08:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007c0c:	4984      	ldr	r1, [pc, #528]	; (8007e20 <tcp_slowtmr+0x27c>)
 8007c0e:	4882      	ldr	r0, [pc, #520]	; (8007e18 <tcp_slowtmr+0x274>)
 8007c10:	f007 fc18 	bl	800f444 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c16:	7f9a      	ldrb	r2, [r3, #30]
 8007c18:	4b7b      	ldr	r3, [pc, #492]	; (8007e08 <tcp_slowtmr+0x264>)
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d105      	bne.n	8007c2c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c22:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007c2a:	e270      	b.n	800810e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007c2c:	4b76      	ldr	r3, [pc, #472]	; (8007e08 <tcp_slowtmr+0x264>)
 8007c2e:	781a      	ldrb	r2, [r3, #0]
 8007c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c32:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c42:	7d1b      	ldrb	r3, [r3, #20]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d10a      	bne.n	8007c5e <tcp_slowtmr+0xba>
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c4e:	2b05      	cmp	r3, #5
 8007c50:	d905      	bls.n	8007c5e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c56:	3301      	adds	r3, #1
 8007c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c5c:	e11e      	b.n	8007e9c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c64:	2b0b      	cmp	r3, #11
 8007c66:	d905      	bls.n	8007c74 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c72:	e113      	b.n	8007e9c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c76:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d075      	beq.n	8007d6a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d006      	beq.n	8007c94 <tcp_slowtmr+0xf0>
 8007c86:	4b62      	ldr	r3, [pc, #392]	; (8007e10 <tcp_slowtmr+0x26c>)
 8007c88:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007c8c:	4965      	ldr	r1, [pc, #404]	; (8007e24 <tcp_slowtmr+0x280>)
 8007c8e:	4862      	ldr	r0, [pc, #392]	; (8007e18 <tcp_slowtmr+0x274>)
 8007c90:	f007 fbd8 	bl	800f444 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d106      	bne.n	8007caa <tcp_slowtmr+0x106>
 8007c9c:	4b5c      	ldr	r3, [pc, #368]	; (8007e10 <tcp_slowtmr+0x26c>)
 8007c9e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007ca2:	4961      	ldr	r1, [pc, #388]	; (8007e28 <tcp_slowtmr+0x284>)
 8007ca4:	485c      	ldr	r0, [pc, #368]	; (8007e18 <tcp_slowtmr+0x274>)
 8007ca6:	f007 fbcd 	bl	800f444 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007cb0:	2b0b      	cmp	r3, #11
 8007cb2:	d905      	bls.n	8007cc0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cb8:	3301      	adds	r3, #1
 8007cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007cbe:	e0ed      	b.n	8007e9c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	4a58      	ldr	r2, [pc, #352]	; (8007e2c <tcp_slowtmr+0x288>)
 8007cca:	5cd3      	ldrb	r3, [r2, r3]
 8007ccc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007cd4:	7c7a      	ldrb	r2, [r7, #17]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d907      	bls.n	8007cea <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007cf0:	7c7a      	ldrb	r2, [r7, #17]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	f200 80d2 	bhi.w	8007e9c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d108      	bne.n	8007d18 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007d06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d08:	f004 fc2a 	bl	800c560 <tcp_zero_window_probe>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d014      	beq.n	8007d3c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007d12:	2300      	movs	r3, #0
 8007d14:	623b      	str	r3, [r7, #32]
 8007d16:	e011      	b.n	8007d3c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d22:	f003 faef 	bl	800b304 <tcp_split_unsent_seg>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d107      	bne.n	8007d3c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007d2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d2e:	f003 fd6f 	bl	800b810 <tcp_output>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 80ac 	beq.w	8007e9c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007d52:	2b06      	cmp	r3, #6
 8007d54:	f200 80a2 	bhi.w	8007e9c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007d5e:	3301      	adds	r3, #1
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007d68:	e098      	b.n	8007e9c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	db0f      	blt.n	8007d94 <tcp_slowtmr+0x1f0>
 8007d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007d7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d008      	beq.n	8007d94 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	b21a      	sxth	r2, r3
 8007d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d92:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d96:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007da0:	429a      	cmp	r2, r3
 8007da2:	db7b      	blt.n	8007e9c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007da4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007da6:	f004 f825 	bl	800bdf4 <tcp_rexmit_rto_prepare>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d007      	beq.n	8007dc0 <tcp_slowtmr+0x21c>
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d171      	bne.n	8007e9c <tcp_slowtmr+0x2f8>
 8007db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d06d      	beq.n	8007e9c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc2:	7d1b      	ldrb	r3, [r3, #20]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d03a      	beq.n	8007e3e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007dce:	2b0c      	cmp	r3, #12
 8007dd0:	bf28      	it	cs
 8007dd2:	230c      	movcs	r3, #12
 8007dd4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007ddc:	10db      	asrs	r3, r3, #3
 8007dde:	b21b      	sxth	r3, r3
 8007de0:	461a      	mov	r2, r3
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007de8:	4413      	add	r3, r2
 8007dea:	7efa      	ldrb	r2, [r7, #27]
 8007dec:	4910      	ldr	r1, [pc, #64]	; (8007e30 <tcp_slowtmr+0x28c>)
 8007dee:	5c8a      	ldrb	r2, [r1, r2]
 8007df0:	4093      	lsls	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	dc1a      	bgt.n	8007e34 <tcp_slowtmr+0x290>
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	b21a      	sxth	r2, r3
 8007e02:	e019      	b.n	8007e38 <tcp_slowtmr+0x294>
 8007e04:	200087b0 	.word	0x200087b0
 8007e08:	200087c6 	.word	0x200087c6
 8007e0c:	200087bc 	.word	0x200087bc
 8007e10:	080110dc 	.word	0x080110dc
 8007e14:	08011420 	.word	0x08011420
 8007e18:	08011120 	.word	0x08011120
 8007e1c:	0801144c 	.word	0x0801144c
 8007e20:	08011478 	.word	0x08011478
 8007e24:	080114a8 	.word	0x080114a8
 8007e28:	080114dc 	.word	0x080114dc
 8007e2c:	080130b4 	.word	0x080130b4
 8007e30:	080130a4 	.word	0x080130a4
 8007e34:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e40:	2200      	movs	r2, #0
 8007e42:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007e50:	4293      	cmp	r3, r2
 8007e52:	bf28      	it	cs
 8007e54:	4613      	movcs	r3, r2
 8007e56:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007e58:	8a7b      	ldrh	r3, [r7, #18]
 8007e5a:	085b      	lsrs	r3, r3, #1
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d206      	bcs.n	8007e84 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e7a:	005b      	lsls	r3, r3, #1
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e90:	2200      	movs	r2, #0
 8007e92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e98:	f004 f81c 	bl	800bed4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9e:	7d1b      	ldrb	r3, [r3, #20]
 8007ea0:	2b06      	cmp	r3, #6
 8007ea2:	d111      	bne.n	8007ec8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea6:	8b5b      	ldrh	r3, [r3, #26]
 8007ea8:	f003 0310 	and.w	r3, r3, #16
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00b      	beq.n	8007ec8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007eb0:	4b9c      	ldr	r3, [pc, #624]	; (8008124 <tcp_slowtmr+0x580>)
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb6:	6a1b      	ldr	r3, [r3, #32]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	2b28      	cmp	r3, #40	; 0x28
 8007ebc:	d904      	bls.n	8007ec8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eca:	7a5b      	ldrb	r3, [r3, #9]
 8007ecc:	f003 0308 	and.w	r3, r3, #8
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d04a      	beq.n	8007f6a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d003      	beq.n	8007ee4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ede:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007ee0:	2b07      	cmp	r3, #7
 8007ee2:	d142      	bne.n	8007f6a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007ee4:	4b8f      	ldr	r3, [pc, #572]	; (8008124 <tcp_slowtmr+0x580>)
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007ef4:	4b8c      	ldr	r3, [pc, #560]	; (8008128 <tcp_slowtmr+0x584>)
 8007ef6:	440b      	add	r3, r1
 8007ef8:	498c      	ldr	r1, [pc, #560]	; (800812c <tcp_slowtmr+0x588>)
 8007efa:	fba1 1303 	umull	r1, r3, r1, r3
 8007efe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d90a      	bls.n	8007f1a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f08:	3301      	adds	r3, #1
 8007f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007f0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f12:	3301      	adds	r3, #1
 8007f14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007f18:	e027      	b.n	8007f6a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f1a:	4b82      	ldr	r3, [pc, #520]	; (8008124 <tcp_slowtmr+0x580>)
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f26:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007f30:	4618      	mov	r0, r3
 8007f32:	4b7f      	ldr	r3, [pc, #508]	; (8008130 <tcp_slowtmr+0x58c>)
 8007f34:	fb00 f303 	mul.w	r3, r0, r3
 8007f38:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007f3a:	497c      	ldr	r1, [pc, #496]	; (800812c <tcp_slowtmr+0x588>)
 8007f3c:	fba1 1303 	umull	r1, r3, r1, r3
 8007f40:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d911      	bls.n	8007f6a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8007f46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f48:	f004 faca 	bl	800c4e0 <tcp_keepalive>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007f52:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d107      	bne.n	8007f6a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8007f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007f60:	3301      	adds	r3, #1
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f66:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d011      	beq.n	8007f96 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007f72:	4b6c      	ldr	r3, [pc, #432]	; (8008124 <tcp_slowtmr+0x580>)
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	1ad2      	subs	r2, r2, r3
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007f82:	4619      	mov	r1, r3
 8007f84:	460b      	mov	r3, r1
 8007f86:	005b      	lsls	r3, r3, #1
 8007f88:	440b      	add	r3, r1
 8007f8a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d302      	bcc.n	8007f96 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007f90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f92:	f000 fddd 	bl	8008b50 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f98:	7d1b      	ldrb	r3, [r3, #20]
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d10b      	bne.n	8007fb6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f9e:	4b61      	ldr	r3, [pc, #388]	; (8008124 <tcp_slowtmr+0x580>)
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	2b28      	cmp	r3, #40	; 0x28
 8007faa:	d904      	bls.n	8007fb6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb8:	7d1b      	ldrb	r3, [r3, #20]
 8007fba:	2b09      	cmp	r3, #9
 8007fbc:	d10b      	bne.n	8007fd6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007fbe:	4b59      	ldr	r3, [pc, #356]	; (8008124 <tcp_slowtmr+0x580>)
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	2bf0      	cmp	r3, #240	; 0xf0
 8007fca:	d904      	bls.n	8007fd6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d060      	beq.n	80080a0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007fe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fe8:	f000 fbfe 	bl	80087e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d010      	beq.n	8008014 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007ff2:	4b50      	ldr	r3, [pc, #320]	; (8008134 <tcp_slowtmr+0x590>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d106      	bne.n	800800a <tcp_slowtmr+0x466>
 8007ffc:	4b4e      	ldr	r3, [pc, #312]	; (8008138 <tcp_slowtmr+0x594>)
 8007ffe:	f240 526d 	movw	r2, #1389	; 0x56d
 8008002:	494e      	ldr	r1, [pc, #312]	; (800813c <tcp_slowtmr+0x598>)
 8008004:	484e      	ldr	r0, [pc, #312]	; (8008140 <tcp_slowtmr+0x59c>)
 8008006:	f007 fa1d 	bl	800f444 <iprintf>
        prev->next = pcb->next;
 800800a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800c:	68da      	ldr	r2, [r3, #12]
 800800e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008010:	60da      	str	r2, [r3, #12]
 8008012:	e00f      	b.n	8008034 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008014:	4b47      	ldr	r3, [pc, #284]	; (8008134 <tcp_slowtmr+0x590>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800801a:	429a      	cmp	r2, r3
 800801c:	d006      	beq.n	800802c <tcp_slowtmr+0x488>
 800801e:	4b46      	ldr	r3, [pc, #280]	; (8008138 <tcp_slowtmr+0x594>)
 8008020:	f240 5271 	movw	r2, #1393	; 0x571
 8008024:	4947      	ldr	r1, [pc, #284]	; (8008144 <tcp_slowtmr+0x5a0>)
 8008026:	4846      	ldr	r0, [pc, #280]	; (8008140 <tcp_slowtmr+0x59c>)
 8008028:	f007 fa0c 	bl	800f444 <iprintf>
        tcp_active_pcbs = pcb->next;
 800802c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	4a40      	ldr	r2, [pc, #256]	; (8008134 <tcp_slowtmr+0x590>)
 8008032:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008034:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008038:	2b00      	cmp	r3, #0
 800803a:	d013      	beq.n	8008064 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008042:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008044:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	3304      	adds	r3, #4
 800804a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800804c:	8ad2      	ldrh	r2, [r2, #22]
 800804e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008050:	8b09      	ldrh	r1, [r1, #24]
 8008052:	9102      	str	r1, [sp, #8]
 8008054:	9201      	str	r2, [sp, #4]
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	462b      	mov	r3, r5
 800805a:	4622      	mov	r2, r4
 800805c:	4601      	mov	r1, r0
 800805e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008060:	f004 f98a 	bl	800c378 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800806a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806c:	7d1b      	ldrb	r3, [r3, #20]
 800806e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008072:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800807a:	6838      	ldr	r0, [r7, #0]
 800807c:	f7ff f9f4 	bl	8007468 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008080:	4b31      	ldr	r3, [pc, #196]	; (8008148 <tcp_slowtmr+0x5a4>)
 8008082:	2200      	movs	r2, #0
 8008084:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d004      	beq.n	8008096 <tcp_slowtmr+0x4f2>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f06f 010c 	mvn.w	r1, #12
 8008092:	68b8      	ldr	r0, [r7, #8]
 8008094:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008096:	4b2c      	ldr	r3, [pc, #176]	; (8008148 <tcp_slowtmr+0x5a4>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d037      	beq.n	800810e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800809e:	e592      	b.n	8007bc6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80080a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80080a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80080aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ac:	7f1b      	ldrb	r3, [r3, #28]
 80080ae:	3301      	adds	r3, #1
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	7f1a      	ldrb	r2, [r3, #28]
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	7f5b      	ldrb	r3, [r3, #29]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d325      	bcc.n	800810e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80080c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c4:	2200      	movs	r2, #0
 80080c6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80080c8:	4b1f      	ldr	r3, [pc, #124]	; (8008148 <tcp_slowtmr+0x5a4>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80080ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00b      	beq.n	80080f0 <tcp_slowtmr+0x54c>
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080e0:	6912      	ldr	r2, [r2, #16]
 80080e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080e4:	4610      	mov	r0, r2
 80080e6:	4798      	blx	r3
 80080e8:	4603      	mov	r3, r0
 80080ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80080ee:	e002      	b.n	80080f6 <tcp_slowtmr+0x552>
 80080f0:	2300      	movs	r3, #0
 80080f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80080f6:	4b14      	ldr	r3, [pc, #80]	; (8008148 <tcp_slowtmr+0x5a4>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d000      	beq.n	8008100 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80080fe:	e562      	b.n	8007bc6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008100:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8008108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800810a:	f003 fb81 	bl	800b810 <tcp_output>
  while (pcb != NULL) {
 800810e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008110:	2b00      	cmp	r3, #0
 8008112:	f47f ad5e 	bne.w	8007bd2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008116:	2300      	movs	r3, #0
 8008118:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800811a:	4b0c      	ldr	r3, [pc, #48]	; (800814c <tcp_slowtmr+0x5a8>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008120:	e069      	b.n	80081f6 <tcp_slowtmr+0x652>
 8008122:	bf00      	nop
 8008124:	200087b0 	.word	0x200087b0
 8008128:	000a4cb8 	.word	0x000a4cb8
 800812c:	10624dd3 	.word	0x10624dd3
 8008130:	000124f8 	.word	0x000124f8
 8008134:	200087bc 	.word	0x200087bc
 8008138:	080110dc 	.word	0x080110dc
 800813c:	08011514 	.word	0x08011514
 8008140:	08011120 	.word	0x08011120
 8008144:	08011540 	.word	0x08011540
 8008148:	200087c4 	.word	0x200087c4
 800814c:	200087c0 	.word	0x200087c0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008152:	7d1b      	ldrb	r3, [r3, #20]
 8008154:	2b0a      	cmp	r3, #10
 8008156:	d006      	beq.n	8008166 <tcp_slowtmr+0x5c2>
 8008158:	4b2b      	ldr	r3, [pc, #172]	; (8008208 <tcp_slowtmr+0x664>)
 800815a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800815e:	492b      	ldr	r1, [pc, #172]	; (800820c <tcp_slowtmr+0x668>)
 8008160:	482b      	ldr	r0, [pc, #172]	; (8008210 <tcp_slowtmr+0x66c>)
 8008162:	f007 f96f 	bl	800f444 <iprintf>
    pcb_remove = 0;
 8008166:	2300      	movs	r3, #0
 8008168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800816c:	4b29      	ldr	r3, [pc, #164]	; (8008214 <tcp_slowtmr+0x670>)
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2bf0      	cmp	r3, #240	; 0xf0
 8008178:	d904      	bls.n	8008184 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800817a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800817e:	3301      	adds	r3, #1
 8008180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008188:	2b00      	cmp	r3, #0
 800818a:	d02f      	beq.n	80081ec <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800818c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800818e:	f000 fb2b 	bl	80087e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	2b00      	cmp	r3, #0
 8008196:	d010      	beq.n	80081ba <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008198:	4b1f      	ldr	r3, [pc, #124]	; (8008218 <tcp_slowtmr+0x674>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800819e:	429a      	cmp	r2, r3
 80081a0:	d106      	bne.n	80081b0 <tcp_slowtmr+0x60c>
 80081a2:	4b19      	ldr	r3, [pc, #100]	; (8008208 <tcp_slowtmr+0x664>)
 80081a4:	f240 52af 	movw	r2, #1455	; 0x5af
 80081a8:	491c      	ldr	r1, [pc, #112]	; (800821c <tcp_slowtmr+0x678>)
 80081aa:	4819      	ldr	r0, [pc, #100]	; (8008210 <tcp_slowtmr+0x66c>)
 80081ac:	f007 f94a 	bl	800f444 <iprintf>
        prev->next = pcb->next;
 80081b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	60da      	str	r2, [r3, #12]
 80081b8:	e00f      	b.n	80081da <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80081ba:	4b17      	ldr	r3, [pc, #92]	; (8008218 <tcp_slowtmr+0x674>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d006      	beq.n	80081d2 <tcp_slowtmr+0x62e>
 80081c4:	4b10      	ldr	r3, [pc, #64]	; (8008208 <tcp_slowtmr+0x664>)
 80081c6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80081ca:	4915      	ldr	r1, [pc, #84]	; (8008220 <tcp_slowtmr+0x67c>)
 80081cc:	4810      	ldr	r0, [pc, #64]	; (8008210 <tcp_slowtmr+0x66c>)
 80081ce:	f007 f939 	bl	800f444 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80081d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	4a10      	ldr	r2, [pc, #64]	; (8008218 <tcp_slowtmr+0x674>)
 80081d8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80081da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081dc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80081de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80081e4:	69f8      	ldr	r0, [r7, #28]
 80081e6:	f7ff f93f 	bl	8007468 <tcp_free>
 80081ea:	e004      	b.n	80081f6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80081ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80081f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1a9      	bne.n	8008150 <tcp_slowtmr+0x5ac>
    }
  }
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	3730      	adds	r7, #48	; 0x30
 8008202:	46bd      	mov	sp, r7
 8008204:	bdb0      	pop	{r4, r5, r7, pc}
 8008206:	bf00      	nop
 8008208:	080110dc 	.word	0x080110dc
 800820c:	0801156c 	.word	0x0801156c
 8008210:	08011120 	.word	0x08011120
 8008214:	200087b0 	.word	0x200087b0
 8008218:	200087c0 	.word	0x200087c0
 800821c:	0801159c 	.word	0x0801159c
 8008220:	080115c4 	.word	0x080115c4

08008224 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800822a:	4b2d      	ldr	r3, [pc, #180]	; (80082e0 <tcp_fasttmr+0xbc>)
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	3301      	adds	r3, #1
 8008230:	b2da      	uxtb	r2, r3
 8008232:	4b2b      	ldr	r3, [pc, #172]	; (80082e0 <tcp_fasttmr+0xbc>)
 8008234:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008236:	4b2b      	ldr	r3, [pc, #172]	; (80082e4 <tcp_fasttmr+0xc0>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800823c:	e048      	b.n	80082d0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	7f9a      	ldrb	r2, [r3, #30]
 8008242:	4b27      	ldr	r3, [pc, #156]	; (80082e0 <tcp_fasttmr+0xbc>)
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	429a      	cmp	r2, r3
 8008248:	d03f      	beq.n	80082ca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800824a:	4b25      	ldr	r3, [pc, #148]	; (80082e0 <tcp_fasttmr+0xbc>)
 800824c:	781a      	ldrb	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	8b5b      	ldrh	r3, [r3, #26]
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d010      	beq.n	8008280 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	8b5b      	ldrh	r3, [r3, #26]
 8008262:	f043 0302 	orr.w	r3, r3, #2
 8008266:	b29a      	uxth	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f003 facf 	bl	800b810 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	8b5b      	ldrh	r3, [r3, #26]
 8008276:	f023 0303 	bic.w	r3, r3, #3
 800827a:	b29a      	uxth	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	8b5b      	ldrh	r3, [r3, #26]
 8008284:	f003 0308 	and.w	r3, r3, #8
 8008288:	2b00      	cmp	r3, #0
 800828a:	d009      	beq.n	80082a0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	8b5b      	ldrh	r3, [r3, #26]
 8008290:	f023 0308 	bic.w	r3, r3, #8
 8008294:	b29a      	uxth	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7ff fa78 	bl	8007790 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00a      	beq.n	80082c4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80082ae:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <tcp_fasttmr+0xc4>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f819 	bl	80082ec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80082ba:	4b0b      	ldr	r3, [pc, #44]	; (80082e8 <tcp_fasttmr+0xc4>)
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d000      	beq.n	80082c4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80082c2:	e7b8      	b.n	8008236 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	607b      	str	r3, [r7, #4]
 80082c8:	e002      	b.n	80082d0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1b3      	bne.n	800823e <tcp_fasttmr+0x1a>
    }
  }
}
 80082d6:	bf00      	nop
 80082d8:	bf00      	nop
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	200087c6 	.word	0x200087c6
 80082e4:	200087bc 	.word	0x200087bc
 80082e8:	200087c4 	.word	0x200087c4

080082ec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80082ec:	b590      	push	{r4, r7, lr}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d109      	bne.n	800830e <tcp_process_refused_data+0x22>
 80082fa:	4b37      	ldr	r3, [pc, #220]	; (80083d8 <tcp_process_refused_data+0xec>)
 80082fc:	f240 6209 	movw	r2, #1545	; 0x609
 8008300:	4936      	ldr	r1, [pc, #216]	; (80083dc <tcp_process_refused_data+0xf0>)
 8008302:	4837      	ldr	r0, [pc, #220]	; (80083e0 <tcp_process_refused_data+0xf4>)
 8008304:	f007 f89e 	bl	800f444 <iprintf>
 8008308:	f06f 030f 	mvn.w	r3, #15
 800830c:	e060      	b.n	80083d0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008312:	7b5b      	ldrb	r3, [r3, #13]
 8008314:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800831a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00b      	beq.n	8008344 <tcp_process_refused_data+0x58>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6918      	ldr	r0, [r3, #16]
 8008336:	2300      	movs	r3, #0
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	6879      	ldr	r1, [r7, #4]
 800833c:	47a0      	blx	r4
 800833e:	4603      	mov	r3, r0
 8008340:	73fb      	strb	r3, [r7, #15]
 8008342:	e007      	b.n	8008354 <tcp_process_refused_data+0x68>
 8008344:	2300      	movs	r3, #0
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	6879      	ldr	r1, [r7, #4]
 800834a:	2000      	movs	r0, #0
 800834c:	f000 f8a4 	bl	8008498 <tcp_recv_null>
 8008350:	4603      	mov	r3, r0
 8008352:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d12a      	bne.n	80083b2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b00      	cmp	r3, #0
 8008364:	d033      	beq.n	80083ce <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800836a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800836e:	d005      	beq.n	800837c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008374:	3301      	adds	r3, #1
 8008376:	b29a      	uxth	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00b      	beq.n	800839e <tcp_process_refused_data+0xb2>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6918      	ldr	r0, [r3, #16]
 8008390:	2300      	movs	r3, #0
 8008392:	2200      	movs	r2, #0
 8008394:	6879      	ldr	r1, [r7, #4]
 8008396:	47a0      	blx	r4
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]
 800839c:	e001      	b.n	80083a2 <tcp_process_refused_data+0xb6>
 800839e:	2300      	movs	r3, #0
 80083a0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80083a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083a6:	f113 0f0d 	cmn.w	r3, #13
 80083aa:	d110      	bne.n	80083ce <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80083ac:	f06f 030c 	mvn.w	r3, #12
 80083b0:	e00e      	b.n	80083d0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80083b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083b6:	f113 0f0d 	cmn.w	r3, #13
 80083ba:	d102      	bne.n	80083c2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80083bc:	f06f 030c 	mvn.w	r3, #12
 80083c0:	e006      	b.n	80083d0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80083c8:	f06f 0304 	mvn.w	r3, #4
 80083cc:	e000      	b.n	80083d0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd90      	pop	{r4, r7, pc}
 80083d8:	080110dc 	.word	0x080110dc
 80083dc:	080115ec 	.word	0x080115ec
 80083e0:	08011120 	.word	0x08011120

080083e4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80083ec:	e007      	b.n	80083fe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f80a 	bl	800840e <tcp_seg_free>
    seg = next;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1f4      	bne.n	80083ee <tcp_segs_free+0xa>
  }
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00c      	beq.n	8008436 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d004      	beq.n	800842e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe fd7d 	bl	8006f28 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	2003      	movs	r0, #3
 8008432:	f7fd ff03 	bl	800623c <memp_free>
  }
}
 8008436:	bf00      	nop
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d106      	bne.n	800845c <tcp_seg_copy+0x1c>
 800844e:	4b0f      	ldr	r3, [pc, #60]	; (800848c <tcp_seg_copy+0x4c>)
 8008450:	f240 6282 	movw	r2, #1666	; 0x682
 8008454:	490e      	ldr	r1, [pc, #56]	; (8008490 <tcp_seg_copy+0x50>)
 8008456:	480f      	ldr	r0, [pc, #60]	; (8008494 <tcp_seg_copy+0x54>)
 8008458:	f006 fff4 	bl	800f444 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800845c:	2003      	movs	r0, #3
 800845e:	f7fd fe7d 	bl	800615c <memp_malloc>
 8008462:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <tcp_seg_copy+0x2e>
    return NULL;
 800846a:	2300      	movs	r3, #0
 800846c:	e00a      	b.n	8008484 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800846e:	2210      	movs	r2, #16
 8008470:	6879      	ldr	r1, [r7, #4]
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f006 ffd0 	bl	800f418 <memcpy>
  pbuf_ref(cseg->p);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	4618      	mov	r0, r3
 800847e:	f7fe fdf3 	bl	8007068 <pbuf_ref>
  return cseg;
 8008482:	68fb      	ldr	r3, [r7, #12]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	080110dc 	.word	0x080110dc
 8008490:	08011630 	.word	0x08011630
 8008494:	08011120 	.word	0x08011120

08008498 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d109      	bne.n	80084c0 <tcp_recv_null+0x28>
 80084ac:	4b12      	ldr	r3, [pc, #72]	; (80084f8 <tcp_recv_null+0x60>)
 80084ae:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80084b2:	4912      	ldr	r1, [pc, #72]	; (80084fc <tcp_recv_null+0x64>)
 80084b4:	4812      	ldr	r0, [pc, #72]	; (8008500 <tcp_recv_null+0x68>)
 80084b6:	f006 ffc5 	bl	800f444 <iprintf>
 80084ba:	f06f 030f 	mvn.w	r3, #15
 80084be:	e016      	b.n	80084ee <tcp_recv_null+0x56>

  if (p != NULL) {
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d009      	beq.n	80084da <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	891b      	ldrh	r3, [r3, #8]
 80084ca:	4619      	mov	r1, r3
 80084cc:	68b8      	ldr	r0, [r7, #8]
 80084ce:	f7ff fb19 	bl	8007b04 <tcp_recved>
    pbuf_free(p);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7fe fd28 	bl	8006f28 <pbuf_free>
 80084d8:	e008      	b.n	80084ec <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80084da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d104      	bne.n	80084ec <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80084e2:	68b8      	ldr	r0, [r7, #8]
 80084e4:	f7ff f9be 	bl	8007864 <tcp_close>
 80084e8:	4603      	mov	r3, r0
 80084ea:	e000      	b.n	80084ee <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	080110dc 	.word	0x080110dc
 80084fc:	0801164c 	.word	0x0801164c
 8008500:	08011120 	.word	0x08011120

08008504 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	4603      	mov	r3, r0
 800850c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800850e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008512:	2b00      	cmp	r3, #0
 8008514:	db01      	blt.n	800851a <tcp_kill_prio+0x16>
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	e000      	b.n	800851c <tcp_kill_prio+0x18>
 800851a:	237f      	movs	r3, #127	; 0x7f
 800851c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800851e:	7afb      	ldrb	r3, [r7, #11]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d034      	beq.n	800858e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008524:	7afb      	ldrb	r3, [r7, #11]
 8008526:	3b01      	subs	r3, #1
 8008528:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800852e:	2300      	movs	r3, #0
 8008530:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008532:	4b19      	ldr	r3, [pc, #100]	; (8008598 <tcp_kill_prio+0x94>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	617b      	str	r3, [r7, #20]
 8008538:	e01f      	b.n	800857a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	7d5b      	ldrb	r3, [r3, #21]
 800853e:	7afa      	ldrb	r2, [r7, #11]
 8008540:	429a      	cmp	r2, r3
 8008542:	d80c      	bhi.n	800855e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008548:	7afa      	ldrb	r2, [r7, #11]
 800854a:	429a      	cmp	r2, r3
 800854c:	d112      	bne.n	8008574 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800854e:	4b13      	ldr	r3, [pc, #76]	; (800859c <tcp_kill_prio+0x98>)
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	429a      	cmp	r2, r3
 800855c:	d80a      	bhi.n	8008574 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800855e:	4b0f      	ldr	r3, [pc, #60]	; (800859c <tcp_kill_prio+0x98>)
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	7d5b      	ldrb	r3, [r3, #21]
 8008572:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	617b      	str	r3, [r7, #20]
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1dc      	bne.n	800853a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d004      	beq.n	8008590 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008586:	6938      	ldr	r0, [r7, #16]
 8008588:	f7ff fa56 	bl	8007a38 <tcp_abort>
 800858c:	e000      	b.n	8008590 <tcp_kill_prio+0x8c>
    return;
 800858e:	bf00      	nop
  }
}
 8008590:	3718      	adds	r7, #24
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	200087bc 	.word	0x200087bc
 800859c:	200087b0 	.word	0x200087b0

080085a0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80085aa:	79fb      	ldrb	r3, [r7, #7]
 80085ac:	2b08      	cmp	r3, #8
 80085ae:	d009      	beq.n	80085c4 <tcp_kill_state+0x24>
 80085b0:	79fb      	ldrb	r3, [r7, #7]
 80085b2:	2b09      	cmp	r3, #9
 80085b4:	d006      	beq.n	80085c4 <tcp_kill_state+0x24>
 80085b6:	4b1a      	ldr	r3, [pc, #104]	; (8008620 <tcp_kill_state+0x80>)
 80085b8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80085bc:	4919      	ldr	r1, [pc, #100]	; (8008624 <tcp_kill_state+0x84>)
 80085be:	481a      	ldr	r0, [pc, #104]	; (8008628 <tcp_kill_state+0x88>)
 80085c0:	f006 ff40 	bl	800f444 <iprintf>

  inactivity = 0;
 80085c4:	2300      	movs	r3, #0
 80085c6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80085c8:	2300      	movs	r3, #0
 80085ca:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80085cc:	4b17      	ldr	r3, [pc, #92]	; (800862c <tcp_kill_state+0x8c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	617b      	str	r3, [r7, #20]
 80085d2:	e017      	b.n	8008604 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	7d1b      	ldrb	r3, [r3, #20]
 80085d8:	79fa      	ldrb	r2, [r7, #7]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d10f      	bne.n	80085fe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80085de:	4b14      	ldr	r3, [pc, #80]	; (8008630 <tcp_kill_state+0x90>)
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d807      	bhi.n	80085fe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80085ee:	4b10      	ldr	r3, [pc, #64]	; (8008630 <tcp_kill_state+0x90>)
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	617b      	str	r3, [r7, #20]
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e4      	bne.n	80085d4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008610:	2100      	movs	r1, #0
 8008612:	6938      	ldr	r0, [r7, #16]
 8008614:	f7ff f952 	bl	80078bc <tcp_abandon>
  }
}
 8008618:	bf00      	nop
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	080110dc 	.word	0x080110dc
 8008624:	08011668 	.word	0x08011668
 8008628:	08011120 	.word	0x08011120
 800862c:	200087bc 	.word	0x200087bc
 8008630:	200087b0 	.word	0x200087b0

08008634 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008642:	4b12      	ldr	r3, [pc, #72]	; (800868c <tcp_kill_timewait+0x58>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	e012      	b.n	8008670 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800864a:	4b11      	ldr	r3, [pc, #68]	; (8008690 <tcp_kill_timewait+0x5c>)
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	429a      	cmp	r2, r3
 8008658:	d807      	bhi.n	800866a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800865a:	4b0d      	ldr	r3, [pc, #52]	; (8008690 <tcp_kill_timewait+0x5c>)
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e9      	bne.n	800864a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d002      	beq.n	8008682 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800867c:	68b8      	ldr	r0, [r7, #8]
 800867e:	f7ff f9db 	bl	8007a38 <tcp_abort>
  }
}
 8008682:	bf00      	nop
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	200087c0 	.word	0x200087c0
 8008690:	200087b0 	.word	0x200087b0

08008694 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800869a:	4b10      	ldr	r3, [pc, #64]	; (80086dc <tcp_handle_closepend+0x48>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80086a0:	e014      	b.n	80086cc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	8b5b      	ldrh	r3, [r3, #26]
 80086ac:	f003 0308 	and.w	r3, r3, #8
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d009      	beq.n	80086c8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	8b5b      	ldrh	r3, [r3, #26]
 80086b8:	f023 0308 	bic.w	r3, r3, #8
 80086bc:	b29a      	uxth	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7ff f864 	bl	8007790 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e7      	bne.n	80086a2 <tcp_handle_closepend+0xe>
  }
}
 80086d2:	bf00      	nop
 80086d4:	bf00      	nop
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	200087bc 	.word	0x200087bc

080086e0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	4603      	mov	r3, r0
 80086e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80086ea:	2001      	movs	r0, #1
 80086ec:	f7fd fd36 	bl	800615c <memp_malloc>
 80086f0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d126      	bne.n	8008746 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80086f8:	f7ff ffcc 	bl	8008694 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80086fc:	f7ff ff9a 	bl	8008634 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008700:	2001      	movs	r0, #1
 8008702:	f7fd fd2b 	bl	800615c <memp_malloc>
 8008706:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d11b      	bne.n	8008746 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800870e:	2009      	movs	r0, #9
 8008710:	f7ff ff46 	bl	80085a0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008714:	2001      	movs	r0, #1
 8008716:	f7fd fd21 	bl	800615c <memp_malloc>
 800871a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d111      	bne.n	8008746 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008722:	2008      	movs	r0, #8
 8008724:	f7ff ff3c 	bl	80085a0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008728:	2001      	movs	r0, #1
 800872a:	f7fd fd17 	bl	800615c <memp_malloc>
 800872e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d107      	bne.n	8008746 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008736:	79fb      	ldrb	r3, [r7, #7]
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff fee3 	bl	8008504 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800873e:	2001      	movs	r0, #1
 8008740:	f7fd fd0c 	bl	800615c <memp_malloc>
 8008744:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d03f      	beq.n	80087cc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800874c:	229c      	movs	r2, #156	; 0x9c
 800874e:	2100      	movs	r1, #0
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f006 fe6f 	bl	800f434 <memset>
    pcb->prio = prio;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	79fa      	ldrb	r2, [r7, #7]
 800875a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008762:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800876c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	22ff      	movs	r2, #255	; 0xff
 800877a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008782:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2206      	movs	r2, #6
 8008788:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2206      	movs	r2, #6
 8008790:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008798:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2201      	movs	r2, #1
 800879e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80087a2:	4b0d      	ldr	r3, [pc, #52]	; (80087d8 <tcp_alloc+0xf8>)
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80087aa:	4b0c      	ldr	r3, [pc, #48]	; (80087dc <tcp_alloc+0xfc>)
 80087ac:	781a      	ldrb	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80087b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	4a08      	ldr	r2, [pc, #32]	; (80087e0 <tcp_alloc+0x100>)
 80087c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	4a07      	ldr	r2, [pc, #28]	; (80087e4 <tcp_alloc+0x104>)
 80087c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80087cc:	68fb      	ldr	r3, [r7, #12]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	200087b0 	.word	0x200087b0
 80087dc:	200087c6 	.word	0x200087c6
 80087e0:	08008499 	.word	0x08008499
 80087e4:	006ddd00 	.word	0x006ddd00

080087e8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d107      	bne.n	8008806 <tcp_pcb_purge+0x1e>
 80087f6:	4b21      	ldr	r3, [pc, #132]	; (800887c <tcp_pcb_purge+0x94>)
 80087f8:	f640 0251 	movw	r2, #2129	; 0x851
 80087fc:	4920      	ldr	r1, [pc, #128]	; (8008880 <tcp_pcb_purge+0x98>)
 80087fe:	4821      	ldr	r0, [pc, #132]	; (8008884 <tcp_pcb_purge+0x9c>)
 8008800:	f006 fe20 	bl	800f444 <iprintf>
 8008804:	e037      	b.n	8008876 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	7d1b      	ldrb	r3, [r3, #20]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d033      	beq.n	8008876 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008812:	2b0a      	cmp	r3, #10
 8008814:	d02f      	beq.n	8008876 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800881a:	2b01      	cmp	r3, #1
 800881c:	d02b      	beq.n	8008876 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008822:	2b00      	cmp	r3, #0
 8008824:	d007      	beq.n	8008836 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800882a:	4618      	mov	r0, r3
 800882c:	f7fe fb7c 	bl	8006f28 <pbuf_free>
      pcb->refused_data = NULL;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f986 	bl	8008b50 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800884a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008850:	4618      	mov	r0, r3
 8008852:	f7ff fdc7 	bl	80083e4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885a:	4618      	mov	r0, r3
 800885c:	f7ff fdc2 	bl	80083e4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	66da      	str	r2, [r3, #108]	; 0x6c
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	080110dc 	.word	0x080110dc
 8008880:	08011728 	.word	0x08011728
 8008884:	08011120 	.word	0x08011120

08008888 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d106      	bne.n	80088a6 <tcp_pcb_remove+0x1e>
 8008898:	4b3e      	ldr	r3, [pc, #248]	; (8008994 <tcp_pcb_remove+0x10c>)
 800889a:	f640 0283 	movw	r2, #2179	; 0x883
 800889e:	493e      	ldr	r1, [pc, #248]	; (8008998 <tcp_pcb_remove+0x110>)
 80088a0:	483e      	ldr	r0, [pc, #248]	; (800899c <tcp_pcb_remove+0x114>)
 80088a2:	f006 fdcf 	bl	800f444 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d106      	bne.n	80088ba <tcp_pcb_remove+0x32>
 80088ac:	4b39      	ldr	r3, [pc, #228]	; (8008994 <tcp_pcb_remove+0x10c>)
 80088ae:	f640 0284 	movw	r2, #2180	; 0x884
 80088b2:	493b      	ldr	r1, [pc, #236]	; (80089a0 <tcp_pcb_remove+0x118>)
 80088b4:	4839      	ldr	r0, [pc, #228]	; (800899c <tcp_pcb_remove+0x114>)
 80088b6:	f006 fdc5 	bl	800f444 <iprintf>

  TCP_RMV(pcblist, pcb);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d105      	bne.n	80088d0 <tcp_pcb_remove+0x48>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68da      	ldr	r2, [r3, #12]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	601a      	str	r2, [r3, #0]
 80088ce:	e013      	b.n	80088f8 <tcp_pcb_remove+0x70>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	60fb      	str	r3, [r7, #12]
 80088d6:	e00c      	b.n	80088f2 <tcp_pcb_remove+0x6a>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d104      	bne.n	80088ec <tcp_pcb_remove+0x64>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	68da      	ldr	r2, [r3, #12]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	60da      	str	r2, [r3, #12]
 80088ea:	e005      	b.n	80088f8 <tcp_pcb_remove+0x70>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1ef      	bne.n	80088d8 <tcp_pcb_remove+0x50>
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2200      	movs	r2, #0
 80088fc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80088fe:	6838      	ldr	r0, [r7, #0]
 8008900:	f7ff ff72 	bl	80087e8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	7d1b      	ldrb	r3, [r3, #20]
 8008908:	2b0a      	cmp	r3, #10
 800890a:	d013      	beq.n	8008934 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008910:	2b01      	cmp	r3, #1
 8008912:	d00f      	beq.n	8008934 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	8b5b      	ldrh	r3, [r3, #26]
 8008918:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800891c:	2b00      	cmp	r3, #0
 800891e:	d009      	beq.n	8008934 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	8b5b      	ldrh	r3, [r3, #26]
 8008924:	f043 0302 	orr.w	r3, r3, #2
 8008928:	b29a      	uxth	r2, r3
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800892e:	6838      	ldr	r0, [r7, #0]
 8008930:	f002 ff6e 	bl	800b810 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	7d1b      	ldrb	r3, [r3, #20]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d020      	beq.n	800897e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008940:	2b00      	cmp	r3, #0
 8008942:	d006      	beq.n	8008952 <tcp_pcb_remove+0xca>
 8008944:	4b13      	ldr	r3, [pc, #76]	; (8008994 <tcp_pcb_remove+0x10c>)
 8008946:	f640 0293 	movw	r2, #2195	; 0x893
 800894a:	4916      	ldr	r1, [pc, #88]	; (80089a4 <tcp_pcb_remove+0x11c>)
 800894c:	4813      	ldr	r0, [pc, #76]	; (800899c <tcp_pcb_remove+0x114>)
 800894e:	f006 fd79 	bl	800f444 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008956:	2b00      	cmp	r3, #0
 8008958:	d006      	beq.n	8008968 <tcp_pcb_remove+0xe0>
 800895a:	4b0e      	ldr	r3, [pc, #56]	; (8008994 <tcp_pcb_remove+0x10c>)
 800895c:	f640 0294 	movw	r2, #2196	; 0x894
 8008960:	4911      	ldr	r1, [pc, #68]	; (80089a8 <tcp_pcb_remove+0x120>)
 8008962:	480e      	ldr	r0, [pc, #56]	; (800899c <tcp_pcb_remove+0x114>)
 8008964:	f006 fd6e 	bl	800f444 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800896c:	2b00      	cmp	r3, #0
 800896e:	d006      	beq.n	800897e <tcp_pcb_remove+0xf6>
 8008970:	4b08      	ldr	r3, [pc, #32]	; (8008994 <tcp_pcb_remove+0x10c>)
 8008972:	f640 0296 	movw	r2, #2198	; 0x896
 8008976:	490d      	ldr	r1, [pc, #52]	; (80089ac <tcp_pcb_remove+0x124>)
 8008978:	4808      	ldr	r0, [pc, #32]	; (800899c <tcp_pcb_remove+0x114>)
 800897a:	f006 fd63 	bl	800f444 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2200      	movs	r2, #0
 8008982:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2200      	movs	r2, #0
 8008988:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800898a:	bf00      	nop
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	080110dc 	.word	0x080110dc
 8008998:	08011744 	.word	0x08011744
 800899c:	08011120 	.word	0x08011120
 80089a0:	08011760 	.word	0x08011760
 80089a4:	08011780 	.word	0x08011780
 80089a8:	08011798 	.word	0x08011798
 80089ac:	080117b4 	.word	0x080117b4

080089b0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d106      	bne.n	80089cc <tcp_next_iss+0x1c>
 80089be:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <tcp_next_iss+0x38>)
 80089c0:	f640 02af 	movw	r2, #2223	; 0x8af
 80089c4:	4909      	ldr	r1, [pc, #36]	; (80089ec <tcp_next_iss+0x3c>)
 80089c6:	480a      	ldr	r0, [pc, #40]	; (80089f0 <tcp_next_iss+0x40>)
 80089c8:	f006 fd3c 	bl	800f444 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80089cc:	4b09      	ldr	r3, [pc, #36]	; (80089f4 <tcp_next_iss+0x44>)
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	4b09      	ldr	r3, [pc, #36]	; (80089f8 <tcp_next_iss+0x48>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4413      	add	r3, r2
 80089d6:	4a07      	ldr	r2, [pc, #28]	; (80089f4 <tcp_next_iss+0x44>)
 80089d8:	6013      	str	r3, [r2, #0]
  return iss;
 80089da:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <tcp_next_iss+0x44>)
 80089dc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	080110dc 	.word	0x080110dc
 80089ec:	080117cc 	.word	0x080117cc
 80089f0:	08011120 	.word	0x08011120
 80089f4:	20000024 	.word	0x20000024
 80089f8:	200087b0 	.word	0x200087b0

080089fc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
 8008a08:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d106      	bne.n	8008a1e <tcp_eff_send_mss_netif+0x22>
 8008a10:	4b14      	ldr	r3, [pc, #80]	; (8008a64 <tcp_eff_send_mss_netif+0x68>)
 8008a12:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008a16:	4914      	ldr	r1, [pc, #80]	; (8008a68 <tcp_eff_send_mss_netif+0x6c>)
 8008a18:	4814      	ldr	r0, [pc, #80]	; (8008a6c <tcp_eff_send_mss_netif+0x70>)
 8008a1a:	f006 fd13 	bl	800f444 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008a24:	89fb      	ldrh	r3, [r7, #14]
 8008a26:	e019      	b.n	8008a5c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a2c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008a2e:	8afb      	ldrh	r3, [r7, #22]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d012      	beq.n	8008a5a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008a34:	2328      	movs	r3, #40	; 0x28
 8008a36:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008a38:	8afa      	ldrh	r2, [r7, #22]
 8008a3a:	8abb      	ldrh	r3, [r7, #20]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d904      	bls.n	8008a4a <tcp_eff_send_mss_netif+0x4e>
 8008a40:	8afa      	ldrh	r2, [r7, #22]
 8008a42:	8abb      	ldrh	r3, [r7, #20]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	e000      	b.n	8008a4c <tcp_eff_send_mss_netif+0x50>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008a4e:	8a7a      	ldrh	r2, [r7, #18]
 8008a50:	89fb      	ldrh	r3, [r7, #14]
 8008a52:	4293      	cmp	r3, r2
 8008a54:	bf28      	it	cs
 8008a56:	4613      	movcs	r3, r2
 8008a58:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008a5a:	89fb      	ldrh	r3, [r7, #14]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	080110dc 	.word	0x080110dc
 8008a68:	080117e8 	.word	0x080117e8
 8008a6c:	08011120 	.word	0x08011120

08008a70 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d119      	bne.n	8008ab8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008a84:	4b10      	ldr	r3, [pc, #64]	; (8008ac8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008a86:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008a8a:	4910      	ldr	r1, [pc, #64]	; (8008acc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008a8c:	4810      	ldr	r0, [pc, #64]	; (8008ad0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008a8e:	f006 fcd9 	bl	800f444 <iprintf>

  while (pcb != NULL) {
 8008a92:	e011      	b.n	8008ab8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d108      	bne.n	8008ab2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f7fe ffc6 	bl	8007a38 <tcp_abort>
      pcb = next;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	e002      	b.n	8008ab8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1ea      	bne.n	8008a94 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008abe:	bf00      	nop
 8008ac0:	bf00      	nop
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	080110dc 	.word	0x080110dc
 8008acc:	08011810 	.word	0x08011810
 8008ad0:	08011120 	.word	0x08011120

08008ad4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d02a      	beq.n	8008b3a <tcp_netif_ip_addr_changed+0x66>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d026      	beq.n	8008b3a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008aec:	4b15      	ldr	r3, [pc, #84]	; (8008b44 <tcp_netif_ip_addr_changed+0x70>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7ff ffbc 	bl	8008a70 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008af8:	4b13      	ldr	r3, [pc, #76]	; (8008b48 <tcp_netif_ip_addr_changed+0x74>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7ff ffb6 	bl	8008a70 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d017      	beq.n	8008b3a <tcp_netif_ip_addr_changed+0x66>
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d013      	beq.n	8008b3a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008b12:	4b0e      	ldr	r3, [pc, #56]	; (8008b4c <tcp_netif_ip_addr_changed+0x78>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	e00c      	b.n	8008b34 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d103      	bne.n	8008b2e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1ef      	bne.n	8008b1a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008b3a:	bf00      	nop
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	200087bc 	.word	0x200087bc
 8008b48:	200087b4 	.word	0x200087b4
 8008b4c:	200087b8 	.word	0x200087b8

08008b50 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d007      	beq.n	8008b70 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7ff fc3d 	bl	80083e4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008b70:	bf00      	nop
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008b78:	b590      	push	{r4, r7, lr}
 8008b7a:	b08d      	sub	sp, #52	; 0x34
 8008b7c:	af04      	add	r7, sp, #16
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d105      	bne.n	8008b94 <tcp_input+0x1c>
 8008b88:	4b9b      	ldr	r3, [pc, #620]	; (8008df8 <tcp_input+0x280>)
 8008b8a:	2283      	movs	r2, #131	; 0x83
 8008b8c:	499b      	ldr	r1, [pc, #620]	; (8008dfc <tcp_input+0x284>)
 8008b8e:	489c      	ldr	r0, [pc, #624]	; (8008e00 <tcp_input+0x288>)
 8008b90:	f006 fc58 	bl	800f444 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	4a9a      	ldr	r2, [pc, #616]	; (8008e04 <tcp_input+0x28c>)
 8008b9a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	895b      	ldrh	r3, [r3, #10]
 8008ba0:	2b13      	cmp	r3, #19
 8008ba2:	f240 83d1 	bls.w	8009348 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008ba6:	4b98      	ldr	r3, [pc, #608]	; (8008e08 <tcp_input+0x290>)
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	4a97      	ldr	r2, [pc, #604]	; (8008e08 <tcp_input+0x290>)
 8008bac:	6812      	ldr	r2, [r2, #0]
 8008bae:	4611      	mov	r1, r2
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f005 fc17 	bl	800e3e4 <ip4_addr_isbroadcast_u32>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f040 83c7 	bne.w	800934c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008bbe:	4b92      	ldr	r3, [pc, #584]	; (8008e08 <tcp_input+0x290>)
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008bc6:	2be0      	cmp	r3, #224	; 0xe0
 8008bc8:	f000 83c0 	beq.w	800934c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008bcc:	4b8d      	ldr	r3, [pc, #564]	; (8008e04 <tcp_input+0x28c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	899b      	ldrh	r3, [r3, #12]
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fc fe49 	bl	800586c <lwip_htons>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	0b1b      	lsrs	r3, r3, #12
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008be6:	7cbb      	ldrb	r3, [r7, #18]
 8008be8:	2b13      	cmp	r3, #19
 8008bea:	f240 83b1 	bls.w	8009350 <tcp_input+0x7d8>
 8008bee:	7cbb      	ldrb	r3, [r7, #18]
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	891b      	ldrh	r3, [r3, #8]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	f200 83aa 	bhi.w	8009350 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008bfc:	7cbb      	ldrb	r3, [r7, #18]
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	3b14      	subs	r3, #20
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	4b81      	ldr	r3, [pc, #516]	; (8008e0c <tcp_input+0x294>)
 8008c06:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008c08:	4b81      	ldr	r3, [pc, #516]	; (8008e10 <tcp_input+0x298>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	895a      	ldrh	r2, [r3, #10]
 8008c12:	7cbb      	ldrb	r3, [r7, #18]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d309      	bcc.n	8008c2e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008c1a:	4b7c      	ldr	r3, [pc, #496]	; (8008e0c <tcp_input+0x294>)
 8008c1c:	881a      	ldrh	r2, [r3, #0]
 8008c1e:	4b7d      	ldr	r3, [pc, #500]	; (8008e14 <tcp_input+0x29c>)
 8008c20:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008c22:	7cbb      	ldrb	r3, [r7, #18]
 8008c24:	4619      	mov	r1, r3
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7fe f8f8 	bl	8006e1c <pbuf_remove_header>
 8008c2c:	e04e      	b.n	8008ccc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d105      	bne.n	8008c42 <tcp_input+0xca>
 8008c36:	4b70      	ldr	r3, [pc, #448]	; (8008df8 <tcp_input+0x280>)
 8008c38:	22c2      	movs	r2, #194	; 0xc2
 8008c3a:	4977      	ldr	r1, [pc, #476]	; (8008e18 <tcp_input+0x2a0>)
 8008c3c:	4870      	ldr	r0, [pc, #448]	; (8008e00 <tcp_input+0x288>)
 8008c3e:	f006 fc01 	bl	800f444 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008c42:	2114      	movs	r1, #20
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7fe f8e9 	bl	8006e1c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	895a      	ldrh	r2, [r3, #10]
 8008c4e:	4b71      	ldr	r3, [pc, #452]	; (8008e14 <tcp_input+0x29c>)
 8008c50:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008c52:	4b6e      	ldr	r3, [pc, #440]	; (8008e0c <tcp_input+0x294>)
 8008c54:	881a      	ldrh	r2, [r3, #0]
 8008c56:	4b6f      	ldr	r3, [pc, #444]	; (8008e14 <tcp_input+0x29c>)
 8008c58:	881b      	ldrh	r3, [r3, #0]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008c5e:	4b6d      	ldr	r3, [pc, #436]	; (8008e14 <tcp_input+0x29c>)
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7fe f8d9 	bl	8006e1c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	895b      	ldrh	r3, [r3, #10]
 8008c70:	8a3a      	ldrh	r2, [r7, #16]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	f200 836e 	bhi.w	8009354 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	4a64      	ldr	r2, [pc, #400]	; (8008e10 <tcp_input+0x298>)
 8008c80:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	8a3a      	ldrh	r2, [r7, #16]
 8008c88:	4611      	mov	r1, r2
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fe f8c6 	bl	8006e1c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	891a      	ldrh	r2, [r3, #8]
 8008c94:	8a3b      	ldrh	r3, [r7, #16]
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	895b      	ldrh	r3, [r3, #10]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d005      	beq.n	8008cb2 <tcp_input+0x13a>
 8008ca6:	4b54      	ldr	r3, [pc, #336]	; (8008df8 <tcp_input+0x280>)
 8008ca8:	22df      	movs	r2, #223	; 0xdf
 8008caa:	495c      	ldr	r1, [pc, #368]	; (8008e1c <tcp_input+0x2a4>)
 8008cac:	4854      	ldr	r0, [pc, #336]	; (8008e00 <tcp_input+0x288>)
 8008cae:	f006 fbc9 	bl	800f444 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	891a      	ldrh	r2, [r3, #8]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	891b      	ldrh	r3, [r3, #8]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d005      	beq.n	8008ccc <tcp_input+0x154>
 8008cc0:	4b4d      	ldr	r3, [pc, #308]	; (8008df8 <tcp_input+0x280>)
 8008cc2:	22e0      	movs	r2, #224	; 0xe0
 8008cc4:	4956      	ldr	r1, [pc, #344]	; (8008e20 <tcp_input+0x2a8>)
 8008cc6:	484e      	ldr	r0, [pc, #312]	; (8008e00 <tcp_input+0x288>)
 8008cc8:	f006 fbbc 	bl	800f444 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008ccc:	4b4d      	ldr	r3, [pc, #308]	; (8008e04 <tcp_input+0x28c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	881b      	ldrh	r3, [r3, #0]
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	4a4b      	ldr	r2, [pc, #300]	; (8008e04 <tcp_input+0x28c>)
 8008cd6:	6814      	ldr	r4, [r2, #0]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7fc fdc7 	bl	800586c <lwip_htons>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008ce2:	4b48      	ldr	r3, [pc, #288]	; (8008e04 <tcp_input+0x28c>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	885b      	ldrh	r3, [r3, #2]
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	4a46      	ldr	r2, [pc, #280]	; (8008e04 <tcp_input+0x28c>)
 8008cec:	6814      	ldr	r4, [r2, #0]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fc fdbc 	bl	800586c <lwip_htons>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008cf8:	4b42      	ldr	r3, [pc, #264]	; (8008e04 <tcp_input+0x28c>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	4a41      	ldr	r2, [pc, #260]	; (8008e04 <tcp_input+0x28c>)
 8008d00:	6814      	ldr	r4, [r2, #0]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fc fdc7 	bl	8005896 <lwip_htonl>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	6063      	str	r3, [r4, #4]
 8008d0c:	6863      	ldr	r3, [r4, #4]
 8008d0e:	4a45      	ldr	r2, [pc, #276]	; (8008e24 <tcp_input+0x2ac>)
 8008d10:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008d12:	4b3c      	ldr	r3, [pc, #240]	; (8008e04 <tcp_input+0x28c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	4a3a      	ldr	r2, [pc, #232]	; (8008e04 <tcp_input+0x28c>)
 8008d1a:	6814      	ldr	r4, [r2, #0]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fc fdba 	bl	8005896 <lwip_htonl>
 8008d22:	4603      	mov	r3, r0
 8008d24:	60a3      	str	r3, [r4, #8]
 8008d26:	68a3      	ldr	r3, [r4, #8]
 8008d28:	4a3f      	ldr	r2, [pc, #252]	; (8008e28 <tcp_input+0x2b0>)
 8008d2a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008d2c:	4b35      	ldr	r3, [pc, #212]	; (8008e04 <tcp_input+0x28c>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	89db      	ldrh	r3, [r3, #14]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	4a33      	ldr	r2, [pc, #204]	; (8008e04 <tcp_input+0x28c>)
 8008d36:	6814      	ldr	r4, [r2, #0]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fc fd97 	bl	800586c <lwip_htons>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008d42:	4b30      	ldr	r3, [pc, #192]	; (8008e04 <tcp_input+0x28c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	899b      	ldrh	r3, [r3, #12]
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fc fd8e 	bl	800586c <lwip_htons>
 8008d50:	4603      	mov	r3, r0
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	4b34      	ldr	r3, [pc, #208]	; (8008e2c <tcp_input+0x2b4>)
 8008d5c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	891a      	ldrh	r2, [r3, #8]
 8008d62:	4b33      	ldr	r3, [pc, #204]	; (8008e30 <tcp_input+0x2b8>)
 8008d64:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008d66:	4b31      	ldr	r3, [pc, #196]	; (8008e2c <tcp_input+0x2b4>)
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	f003 0303 	and.w	r3, r3, #3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00c      	beq.n	8008d8c <tcp_input+0x214>
    tcplen++;
 8008d72:	4b2f      	ldr	r3, [pc, #188]	; (8008e30 <tcp_input+0x2b8>)
 8008d74:	881b      	ldrh	r3, [r3, #0]
 8008d76:	3301      	adds	r3, #1
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	4b2d      	ldr	r3, [pc, #180]	; (8008e30 <tcp_input+0x2b8>)
 8008d7c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	891a      	ldrh	r2, [r3, #8]
 8008d82:	4b2b      	ldr	r3, [pc, #172]	; (8008e30 <tcp_input+0x2b8>)
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	f200 82e6 	bhi.w	8009358 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d90:	4b28      	ldr	r3, [pc, #160]	; (8008e34 <tcp_input+0x2bc>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	61fb      	str	r3, [r7, #28]
 8008d96:	e09d      	b.n	8008ed4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	7d1b      	ldrb	r3, [r3, #20]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d105      	bne.n	8008dac <tcp_input+0x234>
 8008da0:	4b15      	ldr	r3, [pc, #84]	; (8008df8 <tcp_input+0x280>)
 8008da2:	22fb      	movs	r2, #251	; 0xfb
 8008da4:	4924      	ldr	r1, [pc, #144]	; (8008e38 <tcp_input+0x2c0>)
 8008da6:	4816      	ldr	r0, [pc, #88]	; (8008e00 <tcp_input+0x288>)
 8008da8:	f006 fb4c 	bl	800f444 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	7d1b      	ldrb	r3, [r3, #20]
 8008db0:	2b0a      	cmp	r3, #10
 8008db2:	d105      	bne.n	8008dc0 <tcp_input+0x248>
 8008db4:	4b10      	ldr	r3, [pc, #64]	; (8008df8 <tcp_input+0x280>)
 8008db6:	22fc      	movs	r2, #252	; 0xfc
 8008db8:	4920      	ldr	r1, [pc, #128]	; (8008e3c <tcp_input+0x2c4>)
 8008dba:	4811      	ldr	r0, [pc, #68]	; (8008e00 <tcp_input+0x288>)
 8008dbc:	f006 fb42 	bl	800f444 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	7d1b      	ldrb	r3, [r3, #20]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d105      	bne.n	8008dd4 <tcp_input+0x25c>
 8008dc8:	4b0b      	ldr	r3, [pc, #44]	; (8008df8 <tcp_input+0x280>)
 8008dca:	22fd      	movs	r2, #253	; 0xfd
 8008dcc:	491c      	ldr	r1, [pc, #112]	; (8008e40 <tcp_input+0x2c8>)
 8008dce:	480c      	ldr	r0, [pc, #48]	; (8008e00 <tcp_input+0x288>)
 8008dd0:	f006 fb38 	bl	800f444 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	7a1b      	ldrb	r3, [r3, #8]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d033      	beq.n	8008e44 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	7a1a      	ldrb	r2, [r3, #8]
 8008de0:	4b09      	ldr	r3, [pc, #36]	; (8008e08 <tcp_input+0x290>)
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008de8:	3301      	adds	r3, #1
 8008dea:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d029      	beq.n	8008e44 <tcp_input+0x2cc>
      prev = pcb;
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	61bb      	str	r3, [r7, #24]
      continue;
 8008df4:	e06b      	b.n	8008ece <tcp_input+0x356>
 8008df6:	bf00      	nop
 8008df8:	08011844 	.word	0x08011844
 8008dfc:	08011878 	.word	0x08011878
 8008e00:	08011890 	.word	0x08011890
 8008e04:	200087d8 	.word	0x200087d8
 8008e08:	20005240 	.word	0x20005240
 8008e0c:	200087dc 	.word	0x200087dc
 8008e10:	200087e0 	.word	0x200087e0
 8008e14:	200087de 	.word	0x200087de
 8008e18:	080118b8 	.word	0x080118b8
 8008e1c:	080118c8 	.word	0x080118c8
 8008e20:	080118d4 	.word	0x080118d4
 8008e24:	200087e8 	.word	0x200087e8
 8008e28:	200087ec 	.word	0x200087ec
 8008e2c:	200087f4 	.word	0x200087f4
 8008e30:	200087f2 	.word	0x200087f2
 8008e34:	200087bc 	.word	0x200087bc
 8008e38:	080118f4 	.word	0x080118f4
 8008e3c:	0801191c 	.word	0x0801191c
 8008e40:	08011948 	.word	0x08011948
    }

    if (pcb->remote_port == tcphdr->src &&
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	8b1a      	ldrh	r2, [r3, #24]
 8008e48:	4b72      	ldr	r3, [pc, #456]	; (8009014 <tcp_input+0x49c>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d13a      	bne.n	8008eca <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	8ada      	ldrh	r2, [r3, #22]
 8008e58:	4b6e      	ldr	r3, [pc, #440]	; (8009014 <tcp_input+0x49c>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	885b      	ldrh	r3, [r3, #2]
 8008e5e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d132      	bne.n	8008eca <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	4b6b      	ldr	r3, [pc, #428]	; (8009018 <tcp_input+0x4a0>)
 8008e6a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d12c      	bne.n	8008eca <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	4b68      	ldr	r3, [pc, #416]	; (8009018 <tcp_input+0x4a0>)
 8008e76:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d126      	bne.n	8008eca <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	69fa      	ldr	r2, [r7, #28]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d106      	bne.n	8008e94 <tcp_input+0x31c>
 8008e86:	4b65      	ldr	r3, [pc, #404]	; (800901c <tcp_input+0x4a4>)
 8008e88:	f240 120d 	movw	r2, #269	; 0x10d
 8008e8c:	4964      	ldr	r1, [pc, #400]	; (8009020 <tcp_input+0x4a8>)
 8008e8e:	4865      	ldr	r0, [pc, #404]	; (8009024 <tcp_input+0x4ac>)
 8008e90:	f006 fad8 	bl	800f444 <iprintf>
      if (prev != NULL) {
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <tcp_input+0x338>
        prev->next = pcb->next;
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	68da      	ldr	r2, [r3, #12]
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008ea2:	4b61      	ldr	r3, [pc, #388]	; (8009028 <tcp_input+0x4b0>)
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008eaa:	4a5f      	ldr	r2, [pc, #380]	; (8009028 <tcp_input+0x4b0>)
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	69fa      	ldr	r2, [r7, #28]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d111      	bne.n	8008ede <tcp_input+0x366>
 8008eba:	4b58      	ldr	r3, [pc, #352]	; (800901c <tcp_input+0x4a4>)
 8008ebc:	f240 1215 	movw	r2, #277	; 0x115
 8008ec0:	495a      	ldr	r1, [pc, #360]	; (800902c <tcp_input+0x4b4>)
 8008ec2:	4858      	ldr	r0, [pc, #352]	; (8009024 <tcp_input+0x4ac>)
 8008ec4:	f006 fabe 	bl	800f444 <iprintf>
      break;
 8008ec8:	e009      	b.n	8008ede <tcp_input+0x366>
    }
    prev = pcb;
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	61fb      	str	r3, [r7, #28]
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f47f af5e 	bne.w	8008d98 <tcp_input+0x220>
 8008edc:	e000      	b.n	8008ee0 <tcp_input+0x368>
      break;
 8008ede:	bf00      	nop
  }

  if (pcb == NULL) {
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f040 80aa 	bne.w	800903c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ee8:	4b51      	ldr	r3, [pc, #324]	; (8009030 <tcp_input+0x4b8>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	61fb      	str	r3, [r7, #28]
 8008eee:	e03f      	b.n	8008f70 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	7d1b      	ldrb	r3, [r3, #20]
 8008ef4:	2b0a      	cmp	r3, #10
 8008ef6:	d006      	beq.n	8008f06 <tcp_input+0x38e>
 8008ef8:	4b48      	ldr	r3, [pc, #288]	; (800901c <tcp_input+0x4a4>)
 8008efa:	f240 121f 	movw	r2, #287	; 0x11f
 8008efe:	494d      	ldr	r1, [pc, #308]	; (8009034 <tcp_input+0x4bc>)
 8008f00:	4848      	ldr	r0, [pc, #288]	; (8009024 <tcp_input+0x4ac>)
 8008f02:	f006 fa9f 	bl	800f444 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	7a1b      	ldrb	r3, [r3, #8]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d009      	beq.n	8008f22 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	7a1a      	ldrb	r2, [r3, #8]
 8008f12:	4b41      	ldr	r3, [pc, #260]	; (8009018 <tcp_input+0x4a0>)
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d122      	bne.n	8008f68 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	8b1a      	ldrh	r2, [r3, #24]
 8008f26:	4b3b      	ldr	r3, [pc, #236]	; (8009014 <tcp_input+0x49c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	881b      	ldrh	r3, [r3, #0]
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d11b      	bne.n	8008f6a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	8ada      	ldrh	r2, [r3, #22]
 8008f36:	4b37      	ldr	r3, [pc, #220]	; (8009014 <tcp_input+0x49c>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	885b      	ldrh	r3, [r3, #2]
 8008f3c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d113      	bne.n	8008f6a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	4b34      	ldr	r3, [pc, #208]	; (8009018 <tcp_input+0x4a0>)
 8008f48:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d10d      	bne.n	8008f6a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	4b31      	ldr	r3, [pc, #196]	; (8009018 <tcp_input+0x4a0>)
 8008f54:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d107      	bne.n	8008f6a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008f5a:	69f8      	ldr	r0, [r7, #28]
 8008f5c:	f000 fb56 	bl	800960c <tcp_timewait_input>
        }
        pbuf_free(p);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7fd ffe1 	bl	8006f28 <pbuf_free>
        return;
 8008f66:	e1fd      	b.n	8009364 <tcp_input+0x7ec>
        continue;
 8008f68:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	61fb      	str	r3, [r7, #28]
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1bc      	bne.n	8008ef0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008f76:	2300      	movs	r3, #0
 8008f78:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008f7a:	4b2f      	ldr	r3, [pc, #188]	; (8009038 <tcp_input+0x4c0>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	617b      	str	r3, [r7, #20]
 8008f80:	e02a      	b.n	8008fd8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	7a1b      	ldrb	r3, [r3, #8]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00c      	beq.n	8008fa4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	7a1a      	ldrb	r2, [r3, #8]
 8008f8e:	4b22      	ldr	r3, [pc, #136]	; (8009018 <tcp_input+0x4a0>)
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f96:	3301      	adds	r3, #1
 8008f98:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d002      	beq.n	8008fa4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	61bb      	str	r3, [r7, #24]
        continue;
 8008fa2:	e016      	b.n	8008fd2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	8ada      	ldrh	r2, [r3, #22]
 8008fa8:	4b1a      	ldr	r3, [pc, #104]	; (8009014 <tcp_input+0x49c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	885b      	ldrh	r3, [r3, #2]
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d10c      	bne.n	8008fce <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	4b17      	ldr	r3, [pc, #92]	; (8009018 <tcp_input+0x4a0>)
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d00f      	beq.n	8008fe0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00d      	beq.n	8008fe2 <tcp_input+0x46a>
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d009      	beq.n	8008fe2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	617b      	str	r3, [r7, #20]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1d1      	bne.n	8008f82 <tcp_input+0x40a>
 8008fde:	e000      	b.n	8008fe2 <tcp_input+0x46a>
            break;
 8008fe0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d029      	beq.n	800903c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00a      	beq.n	8009004 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008ff6:	4b10      	ldr	r3, [pc, #64]	; (8009038 <tcp_input+0x4c0>)
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008ffe:	4a0e      	ldr	r2, [pc, #56]	; (8009038 <tcp_input+0x4c0>)
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009004:	6978      	ldr	r0, [r7, #20]
 8009006:	f000 fa03 	bl	8009410 <tcp_listen_input>
      }
      pbuf_free(p);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7fd ff8c 	bl	8006f28 <pbuf_free>
      return;
 8009010:	e1a8      	b.n	8009364 <tcp_input+0x7ec>
 8009012:	bf00      	nop
 8009014:	200087d8 	.word	0x200087d8
 8009018:	20005240 	.word	0x20005240
 800901c:	08011844 	.word	0x08011844
 8009020:	08011970 	.word	0x08011970
 8009024:	08011890 	.word	0x08011890
 8009028:	200087bc 	.word	0x200087bc
 800902c:	0801199c 	.word	0x0801199c
 8009030:	200087c0 	.word	0x200087c0
 8009034:	080119c8 	.word	0x080119c8
 8009038:	200087b8 	.word	0x200087b8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	2b00      	cmp	r3, #0
 8009040:	f000 8158 	beq.w	80092f4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009044:	4b95      	ldr	r3, [pc, #596]	; (800929c <tcp_input+0x724>)
 8009046:	2200      	movs	r2, #0
 8009048:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	891a      	ldrh	r2, [r3, #8]
 800904e:	4b93      	ldr	r3, [pc, #588]	; (800929c <tcp_input+0x724>)
 8009050:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009052:	4a92      	ldr	r2, [pc, #584]	; (800929c <tcp_input+0x724>)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009058:	4b91      	ldr	r3, [pc, #580]	; (80092a0 <tcp_input+0x728>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a8f      	ldr	r2, [pc, #572]	; (800929c <tcp_input+0x724>)
 800905e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009060:	4b90      	ldr	r3, [pc, #576]	; (80092a4 <tcp_input+0x72c>)
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009066:	4b90      	ldr	r3, [pc, #576]	; (80092a8 <tcp_input+0x730>)
 8009068:	2200      	movs	r2, #0
 800906a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800906c:	4b8f      	ldr	r3, [pc, #572]	; (80092ac <tcp_input+0x734>)
 800906e:	2200      	movs	r2, #0
 8009070:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009072:	4b8f      	ldr	r3, [pc, #572]	; (80092b0 <tcp_input+0x738>)
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	f003 0308 	and.w	r3, r3, #8
 800907a:	2b00      	cmp	r3, #0
 800907c:	d006      	beq.n	800908c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	7b5b      	ldrb	r3, [r3, #13]
 8009082:	f043 0301 	orr.w	r3, r3, #1
 8009086:	b2da      	uxtb	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009090:	2b00      	cmp	r3, #0
 8009092:	d017      	beq.n	80090c4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009094:	69f8      	ldr	r0, [r7, #28]
 8009096:	f7ff f929 	bl	80082ec <tcp_process_refused_data>
 800909a:	4603      	mov	r3, r0
 800909c:	f113 0f0d 	cmn.w	r3, #13
 80090a0:	d007      	beq.n	80090b2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00c      	beq.n	80090c4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80090aa:	4b82      	ldr	r3, [pc, #520]	; (80092b4 <tcp_input+0x73c>)
 80090ac:	881b      	ldrh	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d008      	beq.n	80090c4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f040 80e3 	bne.w	8009282 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80090bc:	69f8      	ldr	r0, [r7, #28]
 80090be:	f003 f9ad 	bl	800c41c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80090c2:	e0de      	b.n	8009282 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80090c4:	4a7c      	ldr	r2, [pc, #496]	; (80092b8 <tcp_input+0x740>)
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80090ca:	69f8      	ldr	r0, [r7, #28]
 80090cc:	f000 fb18 	bl	8009700 <tcp_process>
 80090d0:	4603      	mov	r3, r0
 80090d2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80090d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090d8:	f113 0f0d 	cmn.w	r3, #13
 80090dc:	f000 80d3 	beq.w	8009286 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80090e0:	4b71      	ldr	r3, [pc, #452]	; (80092a8 <tcp_input+0x730>)
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	f003 0308 	and.w	r3, r3, #8
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d015      	beq.n	8009118 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d008      	beq.n	8009108 <tcp_input+0x590>
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090fc:	69fa      	ldr	r2, [r7, #28]
 80090fe:	6912      	ldr	r2, [r2, #16]
 8009100:	f06f 010d 	mvn.w	r1, #13
 8009104:	4610      	mov	r0, r2
 8009106:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009108:	69f9      	ldr	r1, [r7, #28]
 800910a:	486c      	ldr	r0, [pc, #432]	; (80092bc <tcp_input+0x744>)
 800910c:	f7ff fbbc 	bl	8008888 <tcp_pcb_remove>
        tcp_free(pcb);
 8009110:	69f8      	ldr	r0, [r7, #28]
 8009112:	f7fe f9a9 	bl	8007468 <tcp_free>
 8009116:	e0da      	b.n	80092ce <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800911c:	4b63      	ldr	r3, [pc, #396]	; (80092ac <tcp_input+0x734>)
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d01d      	beq.n	8009160 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009124:	4b61      	ldr	r3, [pc, #388]	; (80092ac <tcp_input+0x734>)
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00a      	beq.n	800914a <tcp_input+0x5d2>
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800913a:	69fa      	ldr	r2, [r7, #28]
 800913c:	6910      	ldr	r0, [r2, #16]
 800913e:	89fa      	ldrh	r2, [r7, #14]
 8009140:	69f9      	ldr	r1, [r7, #28]
 8009142:	4798      	blx	r3
 8009144:	4603      	mov	r3, r0
 8009146:	74fb      	strb	r3, [r7, #19]
 8009148:	e001      	b.n	800914e <tcp_input+0x5d6>
 800914a:	2300      	movs	r3, #0
 800914c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800914e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009152:	f113 0f0d 	cmn.w	r3, #13
 8009156:	f000 8098 	beq.w	800928a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800915a:	4b54      	ldr	r3, [pc, #336]	; (80092ac <tcp_input+0x734>)
 800915c:	2200      	movs	r2, #0
 800915e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009160:	69f8      	ldr	r0, [r7, #28]
 8009162:	f000 f915 	bl	8009390 <tcp_input_delayed_close>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	f040 8090 	bne.w	800928e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800916e:	4b4d      	ldr	r3, [pc, #308]	; (80092a4 <tcp_input+0x72c>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d041      	beq.n	80091fa <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800917a:	2b00      	cmp	r3, #0
 800917c:	d006      	beq.n	800918c <tcp_input+0x614>
 800917e:	4b50      	ldr	r3, [pc, #320]	; (80092c0 <tcp_input+0x748>)
 8009180:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009184:	494f      	ldr	r1, [pc, #316]	; (80092c4 <tcp_input+0x74c>)
 8009186:	4850      	ldr	r0, [pc, #320]	; (80092c8 <tcp_input+0x750>)
 8009188:	f006 f95c 	bl	800f444 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	8b5b      	ldrh	r3, [r3, #26]
 8009190:	f003 0310 	and.w	r3, r3, #16
 8009194:	2b00      	cmp	r3, #0
 8009196:	d008      	beq.n	80091aa <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009198:	4b42      	ldr	r3, [pc, #264]	; (80092a4 <tcp_input+0x72c>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4618      	mov	r0, r3
 800919e:	f7fd fec3 	bl	8006f28 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80091a2:	69f8      	ldr	r0, [r7, #28]
 80091a4:	f7fe fc48 	bl	8007a38 <tcp_abort>
            goto aborted;
 80091a8:	e091      	b.n	80092ce <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00c      	beq.n	80091ce <tcp_input+0x656>
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	6918      	ldr	r0, [r3, #16]
 80091be:	4b39      	ldr	r3, [pc, #228]	; (80092a4 <tcp_input+0x72c>)
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	2300      	movs	r3, #0
 80091c4:	69f9      	ldr	r1, [r7, #28]
 80091c6:	47a0      	blx	r4
 80091c8:	4603      	mov	r3, r0
 80091ca:	74fb      	strb	r3, [r7, #19]
 80091cc:	e008      	b.n	80091e0 <tcp_input+0x668>
 80091ce:	4b35      	ldr	r3, [pc, #212]	; (80092a4 <tcp_input+0x72c>)
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	2300      	movs	r3, #0
 80091d4:	69f9      	ldr	r1, [r7, #28]
 80091d6:	2000      	movs	r0, #0
 80091d8:	f7ff f95e 	bl	8008498 <tcp_recv_null>
 80091dc:	4603      	mov	r3, r0
 80091de:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80091e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80091e4:	f113 0f0d 	cmn.w	r3, #13
 80091e8:	d053      	beq.n	8009292 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80091ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d003      	beq.n	80091fa <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80091f2:	4b2c      	ldr	r3, [pc, #176]	; (80092a4 <tcp_input+0x72c>)
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80091fa:	4b2b      	ldr	r3, [pc, #172]	; (80092a8 <tcp_input+0x730>)
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	f003 0320 	and.w	r3, r3, #32
 8009202:	2b00      	cmp	r3, #0
 8009204:	d030      	beq.n	8009268 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800920a:	2b00      	cmp	r3, #0
 800920c:	d009      	beq.n	8009222 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009212:	7b5a      	ldrb	r2, [r3, #13]
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009218:	f042 0220 	orr.w	r2, r2, #32
 800921c:	b2d2      	uxtb	r2, r2
 800921e:	735a      	strb	r2, [r3, #13]
 8009220:	e022      	b.n	8009268 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009226:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800922a:	d005      	beq.n	8009238 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009230:	3301      	adds	r3, #1
 8009232:	b29a      	uxth	r2, r3
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00b      	beq.n	800925a <tcp_input+0x6e2>
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	6918      	ldr	r0, [r3, #16]
 800924c:	2300      	movs	r3, #0
 800924e:	2200      	movs	r2, #0
 8009250:	69f9      	ldr	r1, [r7, #28]
 8009252:	47a0      	blx	r4
 8009254:	4603      	mov	r3, r0
 8009256:	74fb      	strb	r3, [r7, #19]
 8009258:	e001      	b.n	800925e <tcp_input+0x6e6>
 800925a:	2300      	movs	r3, #0
 800925c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800925e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009262:	f113 0f0d 	cmn.w	r3, #13
 8009266:	d016      	beq.n	8009296 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009268:	4b13      	ldr	r3, [pc, #76]	; (80092b8 <tcp_input+0x740>)
 800926a:	2200      	movs	r2, #0
 800926c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800926e:	69f8      	ldr	r0, [r7, #28]
 8009270:	f000 f88e 	bl	8009390 <tcp_input_delayed_close>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d128      	bne.n	80092cc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800927a:	69f8      	ldr	r0, [r7, #28]
 800927c:	f002 fac8 	bl	800b810 <tcp_output>
 8009280:	e025      	b.n	80092ce <tcp_input+0x756>
        goto aborted;
 8009282:	bf00      	nop
 8009284:	e023      	b.n	80092ce <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009286:	bf00      	nop
 8009288:	e021      	b.n	80092ce <tcp_input+0x756>
              goto aborted;
 800928a:	bf00      	nop
 800928c:	e01f      	b.n	80092ce <tcp_input+0x756>
          goto aborted;
 800928e:	bf00      	nop
 8009290:	e01d      	b.n	80092ce <tcp_input+0x756>
            goto aborted;
 8009292:	bf00      	nop
 8009294:	e01b      	b.n	80092ce <tcp_input+0x756>
              goto aborted;
 8009296:	bf00      	nop
 8009298:	e019      	b.n	80092ce <tcp_input+0x756>
 800929a:	bf00      	nop
 800929c:	200087c8 	.word	0x200087c8
 80092a0:	200087d8 	.word	0x200087d8
 80092a4:	200087f8 	.word	0x200087f8
 80092a8:	200087f5 	.word	0x200087f5
 80092ac:	200087f0 	.word	0x200087f0
 80092b0:	200087f4 	.word	0x200087f4
 80092b4:	200087f2 	.word	0x200087f2
 80092b8:	200087fc 	.word	0x200087fc
 80092bc:	200087bc 	.word	0x200087bc
 80092c0:	08011844 	.word	0x08011844
 80092c4:	080119f8 	.word	0x080119f8
 80092c8:	08011890 	.word	0x08011890
          goto aborted;
 80092cc:	bf00      	nop
    tcp_input_pcb = NULL;
 80092ce:	4b27      	ldr	r3, [pc, #156]	; (800936c <tcp_input+0x7f4>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80092d4:	4b26      	ldr	r3, [pc, #152]	; (8009370 <tcp_input+0x7f8>)
 80092d6:	2200      	movs	r2, #0
 80092d8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80092da:	4b26      	ldr	r3, [pc, #152]	; (8009374 <tcp_input+0x7fc>)
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d03f      	beq.n	8009362 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80092e2:	4b24      	ldr	r3, [pc, #144]	; (8009374 <tcp_input+0x7fc>)
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fd fe1e 	bl	8006f28 <pbuf_free>
      inseg.p = NULL;
 80092ec:	4b21      	ldr	r3, [pc, #132]	; (8009374 <tcp_input+0x7fc>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80092f2:	e036      	b.n	8009362 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80092f4:	4b20      	ldr	r3, [pc, #128]	; (8009378 <tcp_input+0x800>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	899b      	ldrh	r3, [r3, #12]
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fc fab5 	bl	800586c <lwip_htons>
 8009302:	4603      	mov	r3, r0
 8009304:	b2db      	uxtb	r3, r3
 8009306:	f003 0304 	and.w	r3, r3, #4
 800930a:	2b00      	cmp	r3, #0
 800930c:	d118      	bne.n	8009340 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800930e:	4b1b      	ldr	r3, [pc, #108]	; (800937c <tcp_input+0x804>)
 8009310:	6819      	ldr	r1, [r3, #0]
 8009312:	4b1b      	ldr	r3, [pc, #108]	; (8009380 <tcp_input+0x808>)
 8009314:	881b      	ldrh	r3, [r3, #0]
 8009316:	461a      	mov	r2, r3
 8009318:	4b1a      	ldr	r3, [pc, #104]	; (8009384 <tcp_input+0x80c>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800931e:	4b16      	ldr	r3, [pc, #88]	; (8009378 <tcp_input+0x800>)
 8009320:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009322:	885b      	ldrh	r3, [r3, #2]
 8009324:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009326:	4a14      	ldr	r2, [pc, #80]	; (8009378 <tcp_input+0x800>)
 8009328:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800932a:	8812      	ldrh	r2, [r2, #0]
 800932c:	b292      	uxth	r2, r2
 800932e:	9202      	str	r2, [sp, #8]
 8009330:	9301      	str	r3, [sp, #4]
 8009332:	4b15      	ldr	r3, [pc, #84]	; (8009388 <tcp_input+0x810>)
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	4b15      	ldr	r3, [pc, #84]	; (800938c <tcp_input+0x814>)
 8009338:	4602      	mov	r2, r0
 800933a:	2000      	movs	r0, #0
 800933c:	f003 f81c 	bl	800c378 <tcp_rst>
    pbuf_free(p);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7fd fdf1 	bl	8006f28 <pbuf_free>
  return;
 8009346:	e00c      	b.n	8009362 <tcp_input+0x7ea>
    goto dropped;
 8009348:	bf00      	nop
 800934a:	e006      	b.n	800935a <tcp_input+0x7e2>
    goto dropped;
 800934c:	bf00      	nop
 800934e:	e004      	b.n	800935a <tcp_input+0x7e2>
    goto dropped;
 8009350:	bf00      	nop
 8009352:	e002      	b.n	800935a <tcp_input+0x7e2>
      goto dropped;
 8009354:	bf00      	nop
 8009356:	e000      	b.n	800935a <tcp_input+0x7e2>
      goto dropped;
 8009358:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7fd fde4 	bl	8006f28 <pbuf_free>
 8009360:	e000      	b.n	8009364 <tcp_input+0x7ec>
  return;
 8009362:	bf00      	nop
}
 8009364:	3724      	adds	r7, #36	; 0x24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd90      	pop	{r4, r7, pc}
 800936a:	bf00      	nop
 800936c:	200087fc 	.word	0x200087fc
 8009370:	200087f8 	.word	0x200087f8
 8009374:	200087c8 	.word	0x200087c8
 8009378:	200087d8 	.word	0x200087d8
 800937c:	200087ec 	.word	0x200087ec
 8009380:	200087f2 	.word	0x200087f2
 8009384:	200087e8 	.word	0x200087e8
 8009388:	20005250 	.word	0x20005250
 800938c:	20005254 	.word	0x20005254

08009390 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d106      	bne.n	80093ac <tcp_input_delayed_close+0x1c>
 800939e:	4b17      	ldr	r3, [pc, #92]	; (80093fc <tcp_input_delayed_close+0x6c>)
 80093a0:	f240 225a 	movw	r2, #602	; 0x25a
 80093a4:	4916      	ldr	r1, [pc, #88]	; (8009400 <tcp_input_delayed_close+0x70>)
 80093a6:	4817      	ldr	r0, [pc, #92]	; (8009404 <tcp_input_delayed_close+0x74>)
 80093a8:	f006 f84c 	bl	800f444 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80093ac:	4b16      	ldr	r3, [pc, #88]	; (8009408 <tcp_input_delayed_close+0x78>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	f003 0310 	and.w	r3, r3, #16
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d01c      	beq.n	80093f2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	8b5b      	ldrh	r3, [r3, #26]
 80093bc:	f003 0310 	and.w	r3, r3, #16
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10d      	bne.n	80093e0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d008      	beq.n	80093e0 <tcp_input_delayed_close+0x50>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	6912      	ldr	r2, [r2, #16]
 80093d8:	f06f 010e 	mvn.w	r1, #14
 80093dc:	4610      	mov	r0, r2
 80093de:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80093e0:	6879      	ldr	r1, [r7, #4]
 80093e2:	480a      	ldr	r0, [pc, #40]	; (800940c <tcp_input_delayed_close+0x7c>)
 80093e4:	f7ff fa50 	bl	8008888 <tcp_pcb_remove>
    tcp_free(pcb);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7fe f83d 	bl	8007468 <tcp_free>
    return 1;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e000      	b.n	80093f4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	08011844 	.word	0x08011844
 8009400:	08011a14 	.word	0x08011a14
 8009404:	08011890 	.word	0x08011890
 8009408:	200087f5 	.word	0x200087f5
 800940c:	200087bc 	.word	0x200087bc

08009410 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009410:	b590      	push	{r4, r7, lr}
 8009412:	b08b      	sub	sp, #44	; 0x2c
 8009414:	af04      	add	r7, sp, #16
 8009416:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009418:	4b6f      	ldr	r3, [pc, #444]	; (80095d8 <tcp_listen_input+0x1c8>)
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	f003 0304 	and.w	r3, r3, #4
 8009420:	2b00      	cmp	r3, #0
 8009422:	f040 80d2 	bne.w	80095ca <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d106      	bne.n	800943a <tcp_listen_input+0x2a>
 800942c:	4b6b      	ldr	r3, [pc, #428]	; (80095dc <tcp_listen_input+0x1cc>)
 800942e:	f240 2281 	movw	r2, #641	; 0x281
 8009432:	496b      	ldr	r1, [pc, #428]	; (80095e0 <tcp_listen_input+0x1d0>)
 8009434:	486b      	ldr	r0, [pc, #428]	; (80095e4 <tcp_listen_input+0x1d4>)
 8009436:	f006 f805 	bl	800f444 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800943a:	4b67      	ldr	r3, [pc, #412]	; (80095d8 <tcp_listen_input+0x1c8>)
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	f003 0310 	and.w	r3, r3, #16
 8009442:	2b00      	cmp	r3, #0
 8009444:	d019      	beq.n	800947a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009446:	4b68      	ldr	r3, [pc, #416]	; (80095e8 <tcp_listen_input+0x1d8>)
 8009448:	6819      	ldr	r1, [r3, #0]
 800944a:	4b68      	ldr	r3, [pc, #416]	; (80095ec <tcp_listen_input+0x1dc>)
 800944c:	881b      	ldrh	r3, [r3, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	4b67      	ldr	r3, [pc, #412]	; (80095f0 <tcp_listen_input+0x1e0>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009456:	4b67      	ldr	r3, [pc, #412]	; (80095f4 <tcp_listen_input+0x1e4>)
 8009458:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800945a:	885b      	ldrh	r3, [r3, #2]
 800945c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800945e:	4a65      	ldr	r2, [pc, #404]	; (80095f4 <tcp_listen_input+0x1e4>)
 8009460:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009462:	8812      	ldrh	r2, [r2, #0]
 8009464:	b292      	uxth	r2, r2
 8009466:	9202      	str	r2, [sp, #8]
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	4b63      	ldr	r3, [pc, #396]	; (80095f8 <tcp_listen_input+0x1e8>)
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	4b63      	ldr	r3, [pc, #396]	; (80095fc <tcp_listen_input+0x1ec>)
 8009470:	4602      	mov	r2, r0
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f002 ff80 	bl	800c378 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009478:	e0a9      	b.n	80095ce <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800947a:	4b57      	ldr	r3, [pc, #348]	; (80095d8 <tcp_listen_input+0x1c8>)
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	f003 0302 	and.w	r3, r3, #2
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 80a3 	beq.w	80095ce <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	7d5b      	ldrb	r3, [r3, #21]
 800948c:	4618      	mov	r0, r3
 800948e:	f7ff f927 	bl	80086e0 <tcp_alloc>
 8009492:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d111      	bne.n	80094be <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00a      	beq.n	80094b8 <tcp_listen_input+0xa8>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	6910      	ldr	r0, [r2, #16]
 80094aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094ae:	2100      	movs	r1, #0
 80094b0:	4798      	blx	r3
 80094b2:	4603      	mov	r3, r0
 80094b4:	73bb      	strb	r3, [r7, #14]
      return;
 80094b6:	e08b      	b.n	80095d0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80094b8:	23f0      	movs	r3, #240	; 0xf0
 80094ba:	73bb      	strb	r3, [r7, #14]
      return;
 80094bc:	e088      	b.n	80095d0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80094be:	4b50      	ldr	r3, [pc, #320]	; (8009600 <tcp_listen_input+0x1f0>)
 80094c0:	695a      	ldr	r2, [r3, #20]
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80094c6:	4b4e      	ldr	r3, [pc, #312]	; (8009600 <tcp_listen_input+0x1f0>)
 80094c8:	691a      	ldr	r2, [r3, #16]
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	8ada      	ldrh	r2, [r3, #22]
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80094d6:	4b47      	ldr	r3, [pc, #284]	; (80095f4 <tcp_listen_input+0x1e4>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	881b      	ldrh	r3, [r3, #0]
 80094dc:	b29a      	uxth	r2, r3
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	2203      	movs	r2, #3
 80094e6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80094e8:	4b41      	ldr	r3, [pc, #260]	; (80095f0 <tcp_listen_input+0x1e0>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80094fa:	6978      	ldr	r0, [r7, #20]
 80094fc:	f7ff fa58 	bl	80089b0 <tcp_next_iss>
 8009500:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	693a      	ldr	r2, [r7, #16]
 800950c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	693a      	ldr	r2, [r7, #16]
 8009518:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800951a:	4b35      	ldr	r3, [pc, #212]	; (80095f0 <tcp_listen_input+0x1e0>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	1e5a      	subs	r2, r3, #1
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	691a      	ldr	r2, [r3, #16]
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	7a5b      	ldrb	r3, [r3, #9]
 8009536:	f003 030c 	and.w	r3, r3, #12
 800953a:	b2da      	uxtb	r2, r3
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	7a1a      	ldrb	r2, [r3, #8]
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009548:	4b2e      	ldr	r3, [pc, #184]	; (8009604 <tcp_listen_input+0x1f4>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	60da      	str	r2, [r3, #12]
 8009550:	4a2c      	ldr	r2, [pc, #176]	; (8009604 <tcp_listen_input+0x1f4>)
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	6013      	str	r3, [r2, #0]
 8009556:	f003 f8d1 	bl	800c6fc <tcp_timer_needed>
 800955a:	4b2b      	ldr	r3, [pc, #172]	; (8009608 <tcp_listen_input+0x1f8>)
 800955c:	2201      	movs	r2, #1
 800955e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009560:	6978      	ldr	r0, [r7, #20]
 8009562:	f001 fd8f 	bl	800b084 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009566:	4b23      	ldr	r3, [pc, #140]	; (80095f4 <tcp_listen_input+0x1e4>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	89db      	ldrh	r3, [r3, #14]
 800956c:	b29a      	uxth	r2, r3
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	3304      	adds	r3, #4
 8009588:	4618      	mov	r0, r3
 800958a:	f004 fc95 	bl	800deb8 <ip4_route>
 800958e:	4601      	mov	r1, r0
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	3304      	adds	r3, #4
 8009594:	461a      	mov	r2, r3
 8009596:	4620      	mov	r0, r4
 8009598:	f7ff fa30 	bl	80089fc <tcp_eff_send_mss_netif>
 800959c:	4603      	mov	r3, r0
 800959e:	461a      	mov	r2, r3
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80095a4:	2112      	movs	r1, #18
 80095a6:	6978      	ldr	r0, [r7, #20]
 80095a8:	f002 f844 	bl	800b634 <tcp_enqueue_flags>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80095b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d004      	beq.n	80095c2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80095b8:	2100      	movs	r1, #0
 80095ba:	6978      	ldr	r0, [r7, #20]
 80095bc:	f7fe f97e 	bl	80078bc <tcp_abandon>
      return;
 80095c0:	e006      	b.n	80095d0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80095c2:	6978      	ldr	r0, [r7, #20]
 80095c4:	f002 f924 	bl	800b810 <tcp_output>
  return;
 80095c8:	e001      	b.n	80095ce <tcp_listen_input+0x1be>
    return;
 80095ca:	bf00      	nop
 80095cc:	e000      	b.n	80095d0 <tcp_listen_input+0x1c0>
  return;
 80095ce:	bf00      	nop
}
 80095d0:	371c      	adds	r7, #28
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd90      	pop	{r4, r7, pc}
 80095d6:	bf00      	nop
 80095d8:	200087f4 	.word	0x200087f4
 80095dc:	08011844 	.word	0x08011844
 80095e0:	08011a3c 	.word	0x08011a3c
 80095e4:	08011890 	.word	0x08011890
 80095e8:	200087ec 	.word	0x200087ec
 80095ec:	200087f2 	.word	0x200087f2
 80095f0:	200087e8 	.word	0x200087e8
 80095f4:	200087d8 	.word	0x200087d8
 80095f8:	20005250 	.word	0x20005250
 80095fc:	20005254 	.word	0x20005254
 8009600:	20005240 	.word	0x20005240
 8009604:	200087bc 	.word	0x200087bc
 8009608:	200087c4 	.word	0x200087c4

0800960c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af04      	add	r7, sp, #16
 8009612:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009614:	4b2f      	ldr	r3, [pc, #188]	; (80096d4 <tcp_timewait_input+0xc8>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	f003 0304 	and.w	r3, r3, #4
 800961c:	2b00      	cmp	r3, #0
 800961e:	d153      	bne.n	80096c8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d106      	bne.n	8009634 <tcp_timewait_input+0x28>
 8009626:	4b2c      	ldr	r3, [pc, #176]	; (80096d8 <tcp_timewait_input+0xcc>)
 8009628:	f240 22ee 	movw	r2, #750	; 0x2ee
 800962c:	492b      	ldr	r1, [pc, #172]	; (80096dc <tcp_timewait_input+0xd0>)
 800962e:	482c      	ldr	r0, [pc, #176]	; (80096e0 <tcp_timewait_input+0xd4>)
 8009630:	f005 ff08 	bl	800f444 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009634:	4b27      	ldr	r3, [pc, #156]	; (80096d4 <tcp_timewait_input+0xc8>)
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	f003 0302 	and.w	r3, r3, #2
 800963c:	2b00      	cmp	r3, #0
 800963e:	d02a      	beq.n	8009696 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009640:	4b28      	ldr	r3, [pc, #160]	; (80096e4 <tcp_timewait_input+0xd8>)
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	db2d      	blt.n	80096aa <tcp_timewait_input+0x9e>
 800964e:	4b25      	ldr	r3, [pc, #148]	; (80096e4 <tcp_timewait_input+0xd8>)
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800965a:	440b      	add	r3, r1
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	2b00      	cmp	r3, #0
 8009660:	dc23      	bgt.n	80096aa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009662:	4b21      	ldr	r3, [pc, #132]	; (80096e8 <tcp_timewait_input+0xdc>)
 8009664:	6819      	ldr	r1, [r3, #0]
 8009666:	4b21      	ldr	r3, [pc, #132]	; (80096ec <tcp_timewait_input+0xe0>)
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	4b1d      	ldr	r3, [pc, #116]	; (80096e4 <tcp_timewait_input+0xd8>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009672:	4b1f      	ldr	r3, [pc, #124]	; (80096f0 <tcp_timewait_input+0xe4>)
 8009674:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009676:	885b      	ldrh	r3, [r3, #2]
 8009678:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800967a:	4a1d      	ldr	r2, [pc, #116]	; (80096f0 <tcp_timewait_input+0xe4>)
 800967c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800967e:	8812      	ldrh	r2, [r2, #0]
 8009680:	b292      	uxth	r2, r2
 8009682:	9202      	str	r2, [sp, #8]
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	4b1b      	ldr	r3, [pc, #108]	; (80096f4 <tcp_timewait_input+0xe8>)
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	4b1b      	ldr	r3, [pc, #108]	; (80096f8 <tcp_timewait_input+0xec>)
 800968c:	4602      	mov	r2, r0
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f002 fe72 	bl	800c378 <tcp_rst>
      return;
 8009694:	e01b      	b.n	80096ce <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8009696:	4b0f      	ldr	r3, [pc, #60]	; (80096d4 <tcp_timewait_input+0xc8>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80096a2:	4b16      	ldr	r3, [pc, #88]	; (80096fc <tcp_timewait_input+0xf0>)
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80096aa:	4b10      	ldr	r3, [pc, #64]	; (80096ec <tcp_timewait_input+0xe0>)
 80096ac:	881b      	ldrh	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00c      	beq.n	80096cc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	8b5b      	ldrh	r3, [r3, #26]
 80096b6:	f043 0302 	orr.w	r3, r3, #2
 80096ba:	b29a      	uxth	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f002 f8a5 	bl	800b810 <tcp_output>
  }
  return;
 80096c6:	e001      	b.n	80096cc <tcp_timewait_input+0xc0>
    return;
 80096c8:	bf00      	nop
 80096ca:	e000      	b.n	80096ce <tcp_timewait_input+0xc2>
  return;
 80096cc:	bf00      	nop
}
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	200087f4 	.word	0x200087f4
 80096d8:	08011844 	.word	0x08011844
 80096dc:	08011a5c 	.word	0x08011a5c
 80096e0:	08011890 	.word	0x08011890
 80096e4:	200087e8 	.word	0x200087e8
 80096e8:	200087ec 	.word	0x200087ec
 80096ec:	200087f2 	.word	0x200087f2
 80096f0:	200087d8 	.word	0x200087d8
 80096f4:	20005250 	.word	0x20005250
 80096f8:	20005254 	.word	0x20005254
 80096fc:	200087b0 	.word	0x200087b0

08009700 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009700:	b590      	push	{r4, r7, lr}
 8009702:	b08d      	sub	sp, #52	; 0x34
 8009704:	af04      	add	r7, sp, #16
 8009706:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009708:	2300      	movs	r3, #0
 800970a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d106      	bne.n	8009724 <tcp_process+0x24>
 8009716:	4b9d      	ldr	r3, [pc, #628]	; (800998c <tcp_process+0x28c>)
 8009718:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800971c:	499c      	ldr	r1, [pc, #624]	; (8009990 <tcp_process+0x290>)
 800971e:	489d      	ldr	r0, [pc, #628]	; (8009994 <tcp_process+0x294>)
 8009720:	f005 fe90 	bl	800f444 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009724:	4b9c      	ldr	r3, [pc, #624]	; (8009998 <tcp_process+0x298>)
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	f003 0304 	and.w	r3, r3, #4
 800972c:	2b00      	cmp	r3, #0
 800972e:	d04e      	beq.n	80097ce <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	7d1b      	ldrb	r3, [r3, #20]
 8009734:	2b02      	cmp	r3, #2
 8009736:	d108      	bne.n	800974a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800973c:	4b97      	ldr	r3, [pc, #604]	; (800999c <tcp_process+0x29c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	429a      	cmp	r2, r3
 8009742:	d123      	bne.n	800978c <tcp_process+0x8c>
        acceptable = 1;
 8009744:	2301      	movs	r3, #1
 8009746:	76fb      	strb	r3, [r7, #27]
 8009748:	e020      	b.n	800978c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800974e:	4b94      	ldr	r3, [pc, #592]	; (80099a0 <tcp_process+0x2a0>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	429a      	cmp	r2, r3
 8009754:	d102      	bne.n	800975c <tcp_process+0x5c>
        acceptable = 1;
 8009756:	2301      	movs	r3, #1
 8009758:	76fb      	strb	r3, [r7, #27]
 800975a:	e017      	b.n	800978c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800975c:	4b90      	ldr	r3, [pc, #576]	; (80099a0 <tcp_process+0x2a0>)
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	db10      	blt.n	800978c <tcp_process+0x8c>
 800976a:	4b8d      	ldr	r3, [pc, #564]	; (80099a0 <tcp_process+0x2a0>)
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	6879      	ldr	r1, [r7, #4]
 8009774:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009776:	440b      	add	r3, r1
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	dc06      	bgt.n	800978c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	8b5b      	ldrh	r3, [r3, #26]
 8009782:	f043 0302 	orr.w	r3, r3, #2
 8009786:	b29a      	uxth	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800978c:	7efb      	ldrb	r3, [r7, #27]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d01b      	beq.n	80097ca <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	7d1b      	ldrb	r3, [r3, #20]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d106      	bne.n	80097a8 <tcp_process+0xa8>
 800979a:	4b7c      	ldr	r3, [pc, #496]	; (800998c <tcp_process+0x28c>)
 800979c:	f44f 724e 	mov.w	r2, #824	; 0x338
 80097a0:	4980      	ldr	r1, [pc, #512]	; (80099a4 <tcp_process+0x2a4>)
 80097a2:	487c      	ldr	r0, [pc, #496]	; (8009994 <tcp_process+0x294>)
 80097a4:	f005 fe4e 	bl	800f444 <iprintf>
      recv_flags |= TF_RESET;
 80097a8:	4b7f      	ldr	r3, [pc, #508]	; (80099a8 <tcp_process+0x2a8>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	f043 0308 	orr.w	r3, r3, #8
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	4b7d      	ldr	r3, [pc, #500]	; (80099a8 <tcp_process+0x2a8>)
 80097b4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	8b5b      	ldrh	r3, [r3, #26]
 80097ba:	f023 0301 	bic.w	r3, r3, #1
 80097be:	b29a      	uxth	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80097c4:	f06f 030d 	mvn.w	r3, #13
 80097c8:	e37a      	b.n	8009ec0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	e378      	b.n	8009ec0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80097ce:	4b72      	ldr	r3, [pc, #456]	; (8009998 <tcp_process+0x298>)
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	f003 0302 	and.w	r3, r3, #2
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d010      	beq.n	80097fc <tcp_process+0xfc>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	7d1b      	ldrb	r3, [r3, #20]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d00c      	beq.n	80097fc <tcp_process+0xfc>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	7d1b      	ldrb	r3, [r3, #20]
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d008      	beq.n	80097fc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	8b5b      	ldrh	r3, [r3, #26]
 80097ee:	f043 0302 	orr.w	r3, r3, #2
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	e361      	b.n	8009ec0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	8b5b      	ldrh	r3, [r3, #26]
 8009800:	f003 0310 	and.w	r3, r3, #16
 8009804:	2b00      	cmp	r3, #0
 8009806:	d103      	bne.n	8009810 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009808:	4b68      	ldr	r3, [pc, #416]	; (80099ac <tcp_process+0x2ac>)
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f001 fc2f 	bl	800b084 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	7d1b      	ldrb	r3, [r3, #20]
 800982a:	3b02      	subs	r3, #2
 800982c:	2b07      	cmp	r3, #7
 800982e:	f200 8337 	bhi.w	8009ea0 <tcp_process+0x7a0>
 8009832:	a201      	add	r2, pc, #4	; (adr r2, 8009838 <tcp_process+0x138>)
 8009834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009838:	08009859 	.word	0x08009859
 800983c:	08009a89 	.word	0x08009a89
 8009840:	08009c01 	.word	0x08009c01
 8009844:	08009c2b 	.word	0x08009c2b
 8009848:	08009d4f 	.word	0x08009d4f
 800984c:	08009c01 	.word	0x08009c01
 8009850:	08009ddb 	.word	0x08009ddb
 8009854:	08009e6b 	.word	0x08009e6b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009858:	4b4f      	ldr	r3, [pc, #316]	; (8009998 <tcp_process+0x298>)
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	f003 0310 	and.w	r3, r3, #16
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 80e4 	beq.w	8009a2e <tcp_process+0x32e>
 8009866:	4b4c      	ldr	r3, [pc, #304]	; (8009998 <tcp_process+0x298>)
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	f003 0302 	and.w	r3, r3, #2
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 80dd 	beq.w	8009a2e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009878:	1c5a      	adds	r2, r3, #1
 800987a:	4b48      	ldr	r3, [pc, #288]	; (800999c <tcp_process+0x29c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	429a      	cmp	r2, r3
 8009880:	f040 80d5 	bne.w	8009a2e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009884:	4b46      	ldr	r3, [pc, #280]	; (80099a0 <tcp_process+0x2a0>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009896:	4b41      	ldr	r3, [pc, #260]	; (800999c <tcp_process+0x29c>)
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800989e:	4b44      	ldr	r3, [pc, #272]	; (80099b0 <tcp_process+0x2b0>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	89db      	ldrh	r3, [r3, #14]
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80098b8:	4b39      	ldr	r3, [pc, #228]	; (80099a0 <tcp_process+0x2a0>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	1e5a      	subs	r2, r3, #1
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2204      	movs	r2, #4
 80098c6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	3304      	adds	r3, #4
 80098d0:	4618      	mov	r0, r3
 80098d2:	f004 faf1 	bl	800deb8 <ip4_route>
 80098d6:	4601      	mov	r1, r0
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	3304      	adds	r3, #4
 80098dc:	461a      	mov	r2, r3
 80098de:	4620      	mov	r0, r4
 80098e0:	f7ff f88c 	bl	80089fc <tcp_eff_send_mss_netif>
 80098e4:	4603      	mov	r3, r0
 80098e6:	461a      	mov	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098f0:	009a      	lsls	r2, r3, #2
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098f6:	005b      	lsls	r3, r3, #1
 80098f8:	f241 111c 	movw	r1, #4380	; 0x111c
 80098fc:	428b      	cmp	r3, r1
 80098fe:	bf38      	it	cc
 8009900:	460b      	movcc	r3, r1
 8009902:	429a      	cmp	r2, r3
 8009904:	d204      	bcs.n	8009910 <tcp_process+0x210>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	b29b      	uxth	r3, r3
 800990e:	e00d      	b.n	800992c <tcp_process+0x22c>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009914:	005b      	lsls	r3, r3, #1
 8009916:	f241 121c 	movw	r2, #4380	; 0x111c
 800991a:	4293      	cmp	r3, r2
 800991c:	d904      	bls.n	8009928 <tcp_process+0x228>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009922:	005b      	lsls	r3, r3, #1
 8009924:	b29b      	uxth	r3, r3
 8009926:	e001      	b.n	800992c <tcp_process+0x22c>
 8009928:	f241 131c 	movw	r3, #4380	; 0x111c
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009938:	2b00      	cmp	r3, #0
 800993a:	d106      	bne.n	800994a <tcp_process+0x24a>
 800993c:	4b13      	ldr	r3, [pc, #76]	; (800998c <tcp_process+0x28c>)
 800993e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009942:	491c      	ldr	r1, [pc, #112]	; (80099b4 <tcp_process+0x2b4>)
 8009944:	4813      	ldr	r0, [pc, #76]	; (8009994 <tcp_process+0x294>)
 8009946:	f005 fd7d 	bl	800f444 <iprintf>
        --pcb->snd_queuelen;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009950:	3b01      	subs	r3, #1
 8009952:	b29a      	uxth	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800995e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d12a      	bne.n	80099bc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800996a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d106      	bne.n	8009980 <tcp_process+0x280>
 8009972:	4b06      	ldr	r3, [pc, #24]	; (800998c <tcp_process+0x28c>)
 8009974:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009978:	490f      	ldr	r1, [pc, #60]	; (80099b8 <tcp_process+0x2b8>)
 800997a:	4806      	ldr	r0, [pc, #24]	; (8009994 <tcp_process+0x294>)
 800997c:	f005 fd62 	bl	800f444 <iprintf>
          pcb->unsent = rseg->next;
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	66da      	str	r2, [r3, #108]	; 0x6c
 8009988:	e01c      	b.n	80099c4 <tcp_process+0x2c4>
 800998a:	bf00      	nop
 800998c:	08011844 	.word	0x08011844
 8009990:	08011a7c 	.word	0x08011a7c
 8009994:	08011890 	.word	0x08011890
 8009998:	200087f4 	.word	0x200087f4
 800999c:	200087ec 	.word	0x200087ec
 80099a0:	200087e8 	.word	0x200087e8
 80099a4:	08011a98 	.word	0x08011a98
 80099a8:	200087f5 	.word	0x200087f5
 80099ac:	200087b0 	.word	0x200087b0
 80099b0:	200087d8 	.word	0x200087d8
 80099b4:	08011ab8 	.word	0x08011ab8
 80099b8:	08011ad0 	.word	0x08011ad0
        } else {
          pcb->unacked = rseg->next;
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80099c4:	69f8      	ldr	r0, [r7, #28]
 80099c6:	f7fe fd22 	bl	800840e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d104      	bne.n	80099dc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099d8:	861a      	strh	r2, [r3, #48]	; 0x30
 80099da:	e006      	b.n	80099ea <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00a      	beq.n	8009a0a <tcp_process+0x30a>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	6910      	ldr	r0, [r2, #16]
 80099fe:	2200      	movs	r2, #0
 8009a00:	6879      	ldr	r1, [r7, #4]
 8009a02:	4798      	blx	r3
 8009a04:	4603      	mov	r3, r0
 8009a06:	76bb      	strb	r3, [r7, #26]
 8009a08:	e001      	b.n	8009a0e <tcp_process+0x30e>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009a0e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009a12:	f113 0f0d 	cmn.w	r3, #13
 8009a16:	d102      	bne.n	8009a1e <tcp_process+0x31e>
          return ERR_ABRT;
 8009a18:	f06f 030c 	mvn.w	r3, #12
 8009a1c:	e250      	b.n	8009ec0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	8b5b      	ldrh	r3, [r3, #26]
 8009a22:	f043 0302 	orr.w	r3, r3, #2
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009a2c:	e23a      	b.n	8009ea4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009a2e:	4b98      	ldr	r3, [pc, #608]	; (8009c90 <tcp_process+0x590>)
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	f003 0310 	and.w	r3, r3, #16
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 8234 	beq.w	8009ea4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a3c:	4b95      	ldr	r3, [pc, #596]	; (8009c94 <tcp_process+0x594>)
 8009a3e:	6819      	ldr	r1, [r3, #0]
 8009a40:	4b95      	ldr	r3, [pc, #596]	; (8009c98 <tcp_process+0x598>)
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	461a      	mov	r2, r3
 8009a46:	4b95      	ldr	r3, [pc, #596]	; (8009c9c <tcp_process+0x59c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a4c:	4b94      	ldr	r3, [pc, #592]	; (8009ca0 <tcp_process+0x5a0>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a50:	885b      	ldrh	r3, [r3, #2]
 8009a52:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a54:	4a92      	ldr	r2, [pc, #584]	; (8009ca0 <tcp_process+0x5a0>)
 8009a56:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a58:	8812      	ldrh	r2, [r2, #0]
 8009a5a:	b292      	uxth	r2, r2
 8009a5c:	9202      	str	r2, [sp, #8]
 8009a5e:	9301      	str	r3, [sp, #4]
 8009a60:	4b90      	ldr	r3, [pc, #576]	; (8009ca4 <tcp_process+0x5a4>)
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	4b90      	ldr	r3, [pc, #576]	; (8009ca8 <tcp_process+0x5a8>)
 8009a66:	4602      	mov	r2, r0
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f002 fc85 	bl	800c378 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a74:	2b05      	cmp	r3, #5
 8009a76:	f200 8215 	bhi.w	8009ea4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f002 fa4f 	bl	800bf24 <tcp_rexmit_rto>
      break;
 8009a86:	e20d      	b.n	8009ea4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009a88:	4b81      	ldr	r3, [pc, #516]	; (8009c90 <tcp_process+0x590>)
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	f003 0310 	and.w	r3, r3, #16
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 80a1 	beq.w	8009bd8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009a96:	4b7f      	ldr	r3, [pc, #508]	; (8009c94 <tcp_process+0x594>)
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	db7e      	blt.n	8009ba4 <tcp_process+0x4a4>
 8009aa6:	4b7b      	ldr	r3, [pc, #492]	; (8009c94 <tcp_process+0x594>)
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	dc77      	bgt.n	8009ba4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2204      	movs	r2, #4
 8009ab8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d102      	bne.n	8009ac8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009ac2:	23fa      	movs	r3, #250	; 0xfa
 8009ac4:	76bb      	strb	r3, [r7, #26]
 8009ac6:	e01d      	b.n	8009b04 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d106      	bne.n	8009ae0 <tcp_process+0x3e0>
 8009ad2:	4b76      	ldr	r3, [pc, #472]	; (8009cac <tcp_process+0x5ac>)
 8009ad4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009ad8:	4975      	ldr	r1, [pc, #468]	; (8009cb0 <tcp_process+0x5b0>)
 8009ada:	4876      	ldr	r0, [pc, #472]	; (8009cb4 <tcp_process+0x5b4>)
 8009adc:	f005 fcb2 	bl	800f444 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00a      	beq.n	8009b00 <tcp_process+0x400>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	6910      	ldr	r0, [r2, #16]
 8009af4:	2200      	movs	r2, #0
 8009af6:	6879      	ldr	r1, [r7, #4]
 8009af8:	4798      	blx	r3
 8009afa:	4603      	mov	r3, r0
 8009afc:	76bb      	strb	r3, [r7, #26]
 8009afe:	e001      	b.n	8009b04 <tcp_process+0x404>
 8009b00:	23f0      	movs	r3, #240	; 0xf0
 8009b02:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009b04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00a      	beq.n	8009b22 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009b0c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009b10:	f113 0f0d 	cmn.w	r3, #13
 8009b14:	d002      	beq.n	8009b1c <tcp_process+0x41c>
              tcp_abort(pcb);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7fd ff8e 	bl	8007a38 <tcp_abort>
            }
            return ERR_ABRT;
 8009b1c:	f06f 030c 	mvn.w	r3, #12
 8009b20:	e1ce      	b.n	8009ec0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fae0 	bl	800a0e8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009b28:	4b63      	ldr	r3, [pc, #396]	; (8009cb8 <tcp_process+0x5b8>)
 8009b2a:	881b      	ldrh	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d005      	beq.n	8009b3c <tcp_process+0x43c>
            recv_acked--;
 8009b30:	4b61      	ldr	r3, [pc, #388]	; (8009cb8 <tcp_process+0x5b8>)
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	3b01      	subs	r3, #1
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	4b5f      	ldr	r3, [pc, #380]	; (8009cb8 <tcp_process+0x5b8>)
 8009b3a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b40:	009a      	lsls	r2, r3, #2
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b46:	005b      	lsls	r3, r3, #1
 8009b48:	f241 111c 	movw	r1, #4380	; 0x111c
 8009b4c:	428b      	cmp	r3, r1
 8009b4e:	bf38      	it	cc
 8009b50:	460b      	movcc	r3, r1
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d204      	bcs.n	8009b60 <tcp_process+0x460>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	e00d      	b.n	8009b7c <tcp_process+0x47c>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b64:	005b      	lsls	r3, r3, #1
 8009b66:	f241 121c 	movw	r2, #4380	; 0x111c
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d904      	bls.n	8009b78 <tcp_process+0x478>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	e001      	b.n	8009b7c <tcp_process+0x47c>
 8009b78:	f241 131c 	movw	r3, #4380	; 0x111c
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009b82:	4b4e      	ldr	r3, [pc, #312]	; (8009cbc <tcp_process+0x5bc>)
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	f003 0320 	and.w	r3, r3, #32
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d037      	beq.n	8009bfe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	8b5b      	ldrh	r3, [r3, #26]
 8009b92:	f043 0302 	orr.w	r3, r3, #2
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2207      	movs	r2, #7
 8009ba0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009ba2:	e02c      	b.n	8009bfe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ba4:	4b3b      	ldr	r3, [pc, #236]	; (8009c94 <tcp_process+0x594>)
 8009ba6:	6819      	ldr	r1, [r3, #0]
 8009ba8:	4b3b      	ldr	r3, [pc, #236]	; (8009c98 <tcp_process+0x598>)
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	461a      	mov	r2, r3
 8009bae:	4b3b      	ldr	r3, [pc, #236]	; (8009c9c <tcp_process+0x59c>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009bb4:	4b3a      	ldr	r3, [pc, #232]	; (8009ca0 <tcp_process+0x5a0>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bb8:	885b      	ldrh	r3, [r3, #2]
 8009bba:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009bbc:	4a38      	ldr	r2, [pc, #224]	; (8009ca0 <tcp_process+0x5a0>)
 8009bbe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bc0:	8812      	ldrh	r2, [r2, #0]
 8009bc2:	b292      	uxth	r2, r2
 8009bc4:	9202      	str	r2, [sp, #8]
 8009bc6:	9301      	str	r3, [sp, #4]
 8009bc8:	4b36      	ldr	r3, [pc, #216]	; (8009ca4 <tcp_process+0x5a4>)
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	4b36      	ldr	r3, [pc, #216]	; (8009ca8 <tcp_process+0x5a8>)
 8009bce:	4602      	mov	r2, r0
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f002 fbd1 	bl	800c378 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009bd6:	e167      	b.n	8009ea8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009bd8:	4b2d      	ldr	r3, [pc, #180]	; (8009c90 <tcp_process+0x590>)
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	f003 0302 	and.w	r3, r3, #2
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f000 8161 	beq.w	8009ea8 <tcp_process+0x7a8>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bea:	1e5a      	subs	r2, r3, #1
 8009bec:	4b2b      	ldr	r3, [pc, #172]	; (8009c9c <tcp_process+0x59c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	f040 8159 	bne.w	8009ea8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f002 f9b6 	bl	800bf68 <tcp_rexmit>
      break;
 8009bfc:	e154      	b.n	8009ea8 <tcp_process+0x7a8>
 8009bfe:	e153      	b.n	8009ea8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fa71 	bl	800a0e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009c06:	4b2d      	ldr	r3, [pc, #180]	; (8009cbc <tcp_process+0x5bc>)
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	f003 0320 	and.w	r3, r3, #32
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f000 814c 	beq.w	8009eac <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	8b5b      	ldrh	r3, [r3, #26]
 8009c18:	f043 0302 	orr.w	r3, r3, #2
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2207      	movs	r2, #7
 8009c26:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009c28:	e140      	b.n	8009eac <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fa5c 	bl	800a0e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009c30:	4b22      	ldr	r3, [pc, #136]	; (8009cbc <tcp_process+0x5bc>)
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	f003 0320 	and.w	r3, r3, #32
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d071      	beq.n	8009d20 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c3c:	4b14      	ldr	r3, [pc, #80]	; (8009c90 <tcp_process+0x590>)
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	f003 0310 	and.w	r3, r3, #16
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d060      	beq.n	8009d0a <tcp_process+0x60a>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c4c:	4b11      	ldr	r3, [pc, #68]	; (8009c94 <tcp_process+0x594>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d15a      	bne.n	8009d0a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d156      	bne.n	8009d0a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	8b5b      	ldrh	r3, [r3, #26]
 8009c60:	f043 0302 	orr.w	r3, r3, #2
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7fe fdbc 	bl	80087e8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009c70:	4b13      	ldr	r3, [pc, #76]	; (8009cc0 <tcp_process+0x5c0>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d105      	bne.n	8009c86 <tcp_process+0x586>
 8009c7a:	4b11      	ldr	r3, [pc, #68]	; (8009cc0 <tcp_process+0x5c0>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	4a0f      	ldr	r2, [pc, #60]	; (8009cc0 <tcp_process+0x5c0>)
 8009c82:	6013      	str	r3, [r2, #0]
 8009c84:	e02e      	b.n	8009ce4 <tcp_process+0x5e4>
 8009c86:	4b0e      	ldr	r3, [pc, #56]	; (8009cc0 <tcp_process+0x5c0>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	e027      	b.n	8009cde <tcp_process+0x5de>
 8009c8e:	bf00      	nop
 8009c90:	200087f4 	.word	0x200087f4
 8009c94:	200087ec 	.word	0x200087ec
 8009c98:	200087f2 	.word	0x200087f2
 8009c9c:	200087e8 	.word	0x200087e8
 8009ca0:	200087d8 	.word	0x200087d8
 8009ca4:	20005250 	.word	0x20005250
 8009ca8:	20005254 	.word	0x20005254
 8009cac:	08011844 	.word	0x08011844
 8009cb0:	08011ae4 	.word	0x08011ae4
 8009cb4:	08011890 	.word	0x08011890
 8009cb8:	200087f0 	.word	0x200087f0
 8009cbc:	200087f5 	.word	0x200087f5
 8009cc0:	200087bc 	.word	0x200087bc
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d104      	bne.n	8009cd8 <tcp_process+0x5d8>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	68da      	ldr	r2, [r3, #12]
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	60da      	str	r2, [r3, #12]
 8009cd6:	e005      	b.n	8009ce4 <tcp_process+0x5e4>
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	617b      	str	r3, [r7, #20]
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d1ef      	bne.n	8009cc4 <tcp_process+0x5c4>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	60da      	str	r2, [r3, #12]
 8009cea:	4b77      	ldr	r3, [pc, #476]	; (8009ec8 <tcp_process+0x7c8>)
 8009cec:	2201      	movs	r2, #1
 8009cee:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	220a      	movs	r2, #10
 8009cf4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009cf6:	4b75      	ldr	r3, [pc, #468]	; (8009ecc <tcp_process+0x7cc>)
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	60da      	str	r2, [r3, #12]
 8009cfe:	4a73      	ldr	r2, [pc, #460]	; (8009ecc <tcp_process+0x7cc>)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6013      	str	r3, [r2, #0]
 8009d04:	f002 fcfa 	bl	800c6fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009d08:	e0d2      	b.n	8009eb0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	8b5b      	ldrh	r3, [r3, #26]
 8009d0e:	f043 0302 	orr.w	r3, r3, #2
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2208      	movs	r2, #8
 8009d1c:	751a      	strb	r2, [r3, #20]
      break;
 8009d1e:	e0c7      	b.n	8009eb0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d20:	4b6b      	ldr	r3, [pc, #428]	; (8009ed0 <tcp_process+0x7d0>)
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	f003 0310 	and.w	r3, r3, #16
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f000 80c1 	beq.w	8009eb0 <tcp_process+0x7b0>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d32:	4b68      	ldr	r3, [pc, #416]	; (8009ed4 <tcp_process+0x7d4>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	f040 80ba 	bne.w	8009eb0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f040 80b5 	bne.w	8009eb0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2206      	movs	r2, #6
 8009d4a:	751a      	strb	r2, [r3, #20]
      break;
 8009d4c:	e0b0      	b.n	8009eb0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f9ca 	bl	800a0e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009d54:	4b60      	ldr	r3, [pc, #384]	; (8009ed8 <tcp_process+0x7d8>)
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	f003 0320 	and.w	r3, r3, #32
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 80a9 	beq.w	8009eb4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	8b5b      	ldrh	r3, [r3, #26]
 8009d66:	f043 0302 	orr.w	r3, r3, #2
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7fe fd39 	bl	80087e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009d76:	4b59      	ldr	r3, [pc, #356]	; (8009edc <tcp_process+0x7dc>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d105      	bne.n	8009d8c <tcp_process+0x68c>
 8009d80:	4b56      	ldr	r3, [pc, #344]	; (8009edc <tcp_process+0x7dc>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	4a55      	ldr	r2, [pc, #340]	; (8009edc <tcp_process+0x7dc>)
 8009d88:	6013      	str	r3, [r2, #0]
 8009d8a:	e013      	b.n	8009db4 <tcp_process+0x6b4>
 8009d8c:	4b53      	ldr	r3, [pc, #332]	; (8009edc <tcp_process+0x7dc>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	613b      	str	r3, [r7, #16]
 8009d92:	e00c      	b.n	8009dae <tcp_process+0x6ae>
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d104      	bne.n	8009da8 <tcp_process+0x6a8>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68da      	ldr	r2, [r3, #12]
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	60da      	str	r2, [r3, #12]
 8009da6:	e005      	b.n	8009db4 <tcp_process+0x6b4>
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	613b      	str	r3, [r7, #16]
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1ef      	bne.n	8009d94 <tcp_process+0x694>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	60da      	str	r2, [r3, #12]
 8009dba:	4b43      	ldr	r3, [pc, #268]	; (8009ec8 <tcp_process+0x7c8>)
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	220a      	movs	r2, #10
 8009dc4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009dc6:	4b41      	ldr	r3, [pc, #260]	; (8009ecc <tcp_process+0x7cc>)
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	60da      	str	r2, [r3, #12]
 8009dce:	4a3f      	ldr	r2, [pc, #252]	; (8009ecc <tcp_process+0x7cc>)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6013      	str	r3, [r2, #0]
 8009dd4:	f002 fc92 	bl	800c6fc <tcp_timer_needed>
      }
      break;
 8009dd8:	e06c      	b.n	8009eb4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f984 	bl	800a0e8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009de0:	4b3b      	ldr	r3, [pc, #236]	; (8009ed0 <tcp_process+0x7d0>)
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	f003 0310 	and.w	r3, r3, #16
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d065      	beq.n	8009eb8 <tcp_process+0x7b8>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009df0:	4b38      	ldr	r3, [pc, #224]	; (8009ed4 <tcp_process+0x7d4>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d15f      	bne.n	8009eb8 <tcp_process+0x7b8>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d15b      	bne.n	8009eb8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7fe fcf1 	bl	80087e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009e06:	4b35      	ldr	r3, [pc, #212]	; (8009edc <tcp_process+0x7dc>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d105      	bne.n	8009e1c <tcp_process+0x71c>
 8009e10:	4b32      	ldr	r3, [pc, #200]	; (8009edc <tcp_process+0x7dc>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	4a31      	ldr	r2, [pc, #196]	; (8009edc <tcp_process+0x7dc>)
 8009e18:	6013      	str	r3, [r2, #0]
 8009e1a:	e013      	b.n	8009e44 <tcp_process+0x744>
 8009e1c:	4b2f      	ldr	r3, [pc, #188]	; (8009edc <tcp_process+0x7dc>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	60fb      	str	r3, [r7, #12]
 8009e22:	e00c      	b.n	8009e3e <tcp_process+0x73e>
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d104      	bne.n	8009e38 <tcp_process+0x738>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	68da      	ldr	r2, [r3, #12]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	60da      	str	r2, [r3, #12]
 8009e36:	e005      	b.n	8009e44 <tcp_process+0x744>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	60fb      	str	r3, [r7, #12]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1ef      	bne.n	8009e24 <tcp_process+0x724>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	60da      	str	r2, [r3, #12]
 8009e4a:	4b1f      	ldr	r3, [pc, #124]	; (8009ec8 <tcp_process+0x7c8>)
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	220a      	movs	r2, #10
 8009e54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009e56:	4b1d      	ldr	r3, [pc, #116]	; (8009ecc <tcp_process+0x7cc>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60da      	str	r2, [r3, #12]
 8009e5e:	4a1b      	ldr	r2, [pc, #108]	; (8009ecc <tcp_process+0x7cc>)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	f002 fc4a 	bl	800c6fc <tcp_timer_needed>
      }
      break;
 8009e68:	e026      	b.n	8009eb8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f93c 	bl	800a0e8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009e70:	4b17      	ldr	r3, [pc, #92]	; (8009ed0 <tcp_process+0x7d0>)
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	f003 0310 	and.w	r3, r3, #16
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d01f      	beq.n	8009ebc <tcp_process+0x7bc>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e80:	4b14      	ldr	r3, [pc, #80]	; (8009ed4 <tcp_process+0x7d4>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d119      	bne.n	8009ebc <tcp_process+0x7bc>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d115      	bne.n	8009ebc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009e90:	4b11      	ldr	r3, [pc, #68]	; (8009ed8 <tcp_process+0x7d8>)
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	f043 0310 	orr.w	r3, r3, #16
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	4b0f      	ldr	r3, [pc, #60]	; (8009ed8 <tcp_process+0x7d8>)
 8009e9c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009e9e:	e00d      	b.n	8009ebc <tcp_process+0x7bc>
    default:
      break;
 8009ea0:	bf00      	nop
 8009ea2:	e00c      	b.n	8009ebe <tcp_process+0x7be>
      break;
 8009ea4:	bf00      	nop
 8009ea6:	e00a      	b.n	8009ebe <tcp_process+0x7be>
      break;
 8009ea8:	bf00      	nop
 8009eaa:	e008      	b.n	8009ebe <tcp_process+0x7be>
      break;
 8009eac:	bf00      	nop
 8009eae:	e006      	b.n	8009ebe <tcp_process+0x7be>
      break;
 8009eb0:	bf00      	nop
 8009eb2:	e004      	b.n	8009ebe <tcp_process+0x7be>
      break;
 8009eb4:	bf00      	nop
 8009eb6:	e002      	b.n	8009ebe <tcp_process+0x7be>
      break;
 8009eb8:	bf00      	nop
 8009eba:	e000      	b.n	8009ebe <tcp_process+0x7be>
      break;
 8009ebc:	bf00      	nop
  }
  return ERR_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3724      	adds	r7, #36	; 0x24
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd90      	pop	{r4, r7, pc}
 8009ec8:	200087c4 	.word	0x200087c4
 8009ecc:	200087c0 	.word	0x200087c0
 8009ed0:	200087f4 	.word	0x200087f4
 8009ed4:	200087ec 	.word	0x200087ec
 8009ed8:	200087f5 	.word	0x200087f5
 8009edc:	200087bc 	.word	0x200087bc

08009ee0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009ee0:	b590      	push	{r4, r7, lr}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d106      	bne.n	8009efe <tcp_oos_insert_segment+0x1e>
 8009ef0:	4b3b      	ldr	r3, [pc, #236]	; (8009fe0 <tcp_oos_insert_segment+0x100>)
 8009ef2:	f240 421f 	movw	r2, #1055	; 0x41f
 8009ef6:	493b      	ldr	r1, [pc, #236]	; (8009fe4 <tcp_oos_insert_segment+0x104>)
 8009ef8:	483b      	ldr	r0, [pc, #236]	; (8009fe8 <tcp_oos_insert_segment+0x108>)
 8009efa:	f005 faa3 	bl	800f444 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	899b      	ldrh	r3, [r3, #12]
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fb fcb0 	bl	800586c <lwip_htons>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	f003 0301 	and.w	r3, r3, #1
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d028      	beq.n	8009f6a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009f18:	6838      	ldr	r0, [r7, #0]
 8009f1a:	f7fe fa63 	bl	80083e4 <tcp_segs_free>
    next = NULL;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	603b      	str	r3, [r7, #0]
 8009f22:	e056      	b.n	8009fd2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	899b      	ldrh	r3, [r3, #12]
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fb fc9d 	bl	800586c <lwip_htons>
 8009f32:	4603      	mov	r3, r0
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	f003 0301 	and.w	r3, r3, #1
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00d      	beq.n	8009f5a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	899b      	ldrh	r3, [r3, #12]
 8009f44:	b29c      	uxth	r4, r3
 8009f46:	2001      	movs	r0, #1
 8009f48:	f7fb fc90 	bl	800586c <lwip_htons>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	461a      	mov	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	4322      	orrs	r2, r4
 8009f56:	b292      	uxth	r2, r2
 8009f58:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f7fe fa52 	bl	800840e <tcp_seg_free>
    while (next &&
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00e      	beq.n	8009f8e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	891b      	ldrh	r3, [r3, #8]
 8009f74:	461a      	mov	r2, r3
 8009f76:	4b1d      	ldr	r3, [pc, #116]	; (8009fec <tcp_oos_insert_segment+0x10c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	441a      	add	r2, r3
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	8909      	ldrh	r1, [r1, #8]
 8009f86:	440b      	add	r3, r1
 8009f88:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	daca      	bge.n	8009f24 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d01e      	beq.n	8009fd2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	891b      	ldrh	r3, [r3, #8]
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4b14      	ldr	r3, [pc, #80]	; (8009fec <tcp_oos_insert_segment+0x10c>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	441a      	add	r2, r3
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	dd12      	ble.n	8009fd2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	4b0d      	ldr	r3, [pc, #52]	; (8009fec <tcp_oos_insert_segment+0x10c>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	891b      	ldrh	r3, [r3, #8]
 8009fca:	4619      	mov	r1, r3
 8009fcc:	4610      	mov	r0, r2
 8009fce:	f7fc fe25 	bl	8006c1c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	601a      	str	r2, [r3, #0]
}
 8009fd8:	bf00      	nop
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd90      	pop	{r4, r7, pc}
 8009fe0:	08011844 	.word	0x08011844
 8009fe4:	08011b04 	.word	0x08011b04
 8009fe8:	08011890 	.word	0x08011890
 8009fec:	200087e8 	.word	0x200087e8

08009ff0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009ff0:	b5b0      	push	{r4, r5, r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009ffe:	e03e      	b.n	800a07e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fd f812 	bl	8007038 <pbuf_clen>
 800a014:	4603      	mov	r3, r0
 800a016:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a01e:	8a7a      	ldrh	r2, [r7, #18]
 800a020:	429a      	cmp	r2, r3
 800a022:	d906      	bls.n	800a032 <tcp_free_acked_segments+0x42>
 800a024:	4b2a      	ldr	r3, [pc, #168]	; (800a0d0 <tcp_free_acked_segments+0xe0>)
 800a026:	f240 4257 	movw	r2, #1111	; 0x457
 800a02a:	492a      	ldr	r1, [pc, #168]	; (800a0d4 <tcp_free_acked_segments+0xe4>)
 800a02c:	482a      	ldr	r0, [pc, #168]	; (800a0d8 <tcp_free_acked_segments+0xe8>)
 800a02e:	f005 fa09 	bl	800f444 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a038:	8a7b      	ldrh	r3, [r7, #18]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	891a      	ldrh	r2, [r3, #8]
 800a048:	4b24      	ldr	r3, [pc, #144]	; (800a0dc <tcp_free_acked_segments+0xec>)
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	4413      	add	r3, r2
 800a04e:	b29a      	uxth	r2, r3
 800a050:	4b22      	ldr	r3, [pc, #136]	; (800a0dc <tcp_free_acked_segments+0xec>)
 800a052:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a054:	6978      	ldr	r0, [r7, #20]
 800a056:	f7fe f9da 	bl	800840e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00c      	beq.n	800a07e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d109      	bne.n	800a07e <tcp_free_acked_segments+0x8e>
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d106      	bne.n	800a07e <tcp_free_acked_segments+0x8e>
 800a070:	4b17      	ldr	r3, [pc, #92]	; (800a0d0 <tcp_free_acked_segments+0xe0>)
 800a072:	f240 4261 	movw	r2, #1121	; 0x461
 800a076:	491a      	ldr	r1, [pc, #104]	; (800a0e0 <tcp_free_acked_segments+0xf0>)
 800a078:	4817      	ldr	r0, [pc, #92]	; (800a0d8 <tcp_free_acked_segments+0xe8>)
 800a07a:	f005 f9e3 	bl	800f444 <iprintf>
  while (seg_list != NULL &&
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d020      	beq.n	800a0c6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fb fc03 	bl	8005896 <lwip_htonl>
 800a090:	4604      	mov	r4, r0
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	891b      	ldrh	r3, [r3, #8]
 800a096:	461d      	mov	r5, r3
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	899b      	ldrh	r3, [r3, #12]
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7fb fbe3 	bl	800586c <lwip_htons>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	f003 0303 	and.w	r3, r3, #3
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <tcp_free_acked_segments+0xc6>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e000      	b.n	800a0b8 <tcp_free_acked_segments+0xc8>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	442b      	add	r3, r5
 800a0ba:	18e2      	adds	r2, r4, r3
 800a0bc:	4b09      	ldr	r3, [pc, #36]	; (800a0e4 <tcp_free_acked_segments+0xf4>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	dd9c      	ble.n	800a000 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a0c6:	68bb      	ldr	r3, [r7, #8]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3718      	adds	r7, #24
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bdb0      	pop	{r4, r5, r7, pc}
 800a0d0:	08011844 	.word	0x08011844
 800a0d4:	08011b2c 	.word	0x08011b2c
 800a0d8:	08011890 	.word	0x08011890
 800a0dc:	200087f0 	.word	0x200087f0
 800a0e0:	08011b54 	.word	0x08011b54
 800a0e4:	200087ec 	.word	0x200087ec

0800a0e8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a0e8:	b5b0      	push	{r4, r5, r7, lr}
 800a0ea:	b094      	sub	sp, #80	; 0x50
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d106      	bne.n	800a108 <tcp_receive+0x20>
 800a0fa:	4b91      	ldr	r3, [pc, #580]	; (800a340 <tcp_receive+0x258>)
 800a0fc:	f240 427b 	movw	r2, #1147	; 0x47b
 800a100:	4990      	ldr	r1, [pc, #576]	; (800a344 <tcp_receive+0x25c>)
 800a102:	4891      	ldr	r0, [pc, #580]	; (800a348 <tcp_receive+0x260>)
 800a104:	f005 f99e 	bl	800f444 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	7d1b      	ldrb	r3, [r3, #20]
 800a10c:	2b03      	cmp	r3, #3
 800a10e:	d806      	bhi.n	800a11e <tcp_receive+0x36>
 800a110:	4b8b      	ldr	r3, [pc, #556]	; (800a340 <tcp_receive+0x258>)
 800a112:	f240 427c 	movw	r2, #1148	; 0x47c
 800a116:	498d      	ldr	r1, [pc, #564]	; (800a34c <tcp_receive+0x264>)
 800a118:	488b      	ldr	r0, [pc, #556]	; (800a348 <tcp_receive+0x260>)
 800a11a:	f005 f993 	bl	800f444 <iprintf>

  if (flags & TCP_ACK) {
 800a11e:	4b8c      	ldr	r3, [pc, #560]	; (800a350 <tcp_receive+0x268>)
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	f003 0310 	and.w	r3, r3, #16
 800a126:	2b00      	cmp	r3, #0
 800a128:	f000 8264 	beq.w	800a5f4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a132:	461a      	mov	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a138:	4413      	add	r3, r2
 800a13a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a140:	4b84      	ldr	r3, [pc, #528]	; (800a354 <tcp_receive+0x26c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	db1b      	blt.n	800a182 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a14e:	4b81      	ldr	r3, [pc, #516]	; (800a354 <tcp_receive+0x26c>)
 800a150:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a152:	429a      	cmp	r2, r3
 800a154:	d106      	bne.n	800a164 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a15a:	4b7f      	ldr	r3, [pc, #508]	; (800a358 <tcp_receive+0x270>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	2b00      	cmp	r3, #0
 800a162:	db0e      	blt.n	800a182 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a168:	4b7b      	ldr	r3, [pc, #492]	; (800a358 <tcp_receive+0x270>)
 800a16a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d125      	bne.n	800a1bc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a170:	4b7a      	ldr	r3, [pc, #488]	; (800a35c <tcp_receive+0x274>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	89db      	ldrh	r3, [r3, #14]
 800a176:	b29a      	uxth	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a17e:	429a      	cmp	r2, r3
 800a180:	d91c      	bls.n	800a1bc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a182:	4b76      	ldr	r3, [pc, #472]	; (800a35c <tcp_receive+0x274>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	89db      	ldrh	r3, [r3, #14]
 800a188:	b29a      	uxth	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d205      	bcs.n	800a1ac <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a1ac:	4b69      	ldr	r3, [pc, #420]	; (800a354 <tcp_receive+0x26c>)
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a1b4:	4b68      	ldr	r3, [pc, #416]	; (800a358 <tcp_receive+0x270>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a1bc:	4b66      	ldr	r3, [pc, #408]	; (800a358 <tcp_receive+0x270>)
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	dc58      	bgt.n	800a27c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a1ca:	4b65      	ldr	r3, [pc, #404]	; (800a360 <tcp_receive+0x278>)
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d14b      	bne.n	800a26a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a1dc:	4413      	add	r3, r2
 800a1de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d142      	bne.n	800a26a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	db3d      	blt.n	800a26a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1f2:	4b59      	ldr	r3, [pc, #356]	; (800a358 <tcp_receive+0x270>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d137      	bne.n	800a26a <tcp_receive+0x182>
              found_dupack = 1;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a204:	2bff      	cmp	r3, #255	; 0xff
 800a206:	d007      	beq.n	800a218 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a20e:	3301      	adds	r3, #1
 800a210:	b2da      	uxtb	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a21e:	2b03      	cmp	r3, #3
 800a220:	d91b      	bls.n	800a25a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a22c:	4413      	add	r3, r2
 800a22e:	b29a      	uxth	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a236:	429a      	cmp	r2, r3
 800a238:	d30a      	bcc.n	800a250 <tcp_receive+0x168>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a244:	4413      	add	r3, r2
 800a246:	b29a      	uxth	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a24e:	e004      	b.n	800a25a <tcp_receive+0x172>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a256:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a260:	2b02      	cmp	r3, #2
 800a262:	d902      	bls.n	800a26a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f001 feeb 	bl	800c040 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a26a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f040 8161 	bne.w	800a534 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a27a:	e15b      	b.n	800a534 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a27c:	4b36      	ldr	r3, [pc, #216]	; (800a358 <tcp_receive+0x270>)
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	3b01      	subs	r3, #1
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f2c0 814e 	blt.w	800a52a <tcp_receive+0x442>
 800a28e:	4b32      	ldr	r3, [pc, #200]	; (800a358 <tcp_receive+0x270>)
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f300 8146 	bgt.w	800a52a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	8b5b      	ldrh	r3, [r3, #26]
 800a2a2:	f003 0304 	and.w	r3, r3, #4
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d010      	beq.n	800a2cc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	8b5b      	ldrh	r3, [r3, #26]
 800a2ae:	f023 0304 	bic.w	r3, r3, #4
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a2da:	10db      	asrs	r3, r3, #3
 800a2dc:	b21b      	sxth	r3, r3
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	4413      	add	r3, r2
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	b21a      	sxth	r2, r3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a2f4:	4b18      	ldr	r3, [pc, #96]	; (800a358 <tcp_receive+0x270>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a30c:	4b12      	ldr	r3, [pc, #72]	; (800a358 <tcp_receive+0x270>)
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	7d1b      	ldrb	r3, [r3, #20]
 800a318:	2b03      	cmp	r3, #3
 800a31a:	f240 8097 	bls.w	800a44c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d245      	bcs.n	800a3ba <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	8b5b      	ldrh	r3, [r3, #26]
 800a332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a336:	2b00      	cmp	r3, #0
 800a338:	d014      	beq.n	800a364 <tcp_receive+0x27c>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e013      	b.n	800a366 <tcp_receive+0x27e>
 800a33e:	bf00      	nop
 800a340:	08011844 	.word	0x08011844
 800a344:	08011b74 	.word	0x08011b74
 800a348:	08011890 	.word	0x08011890
 800a34c:	08011b90 	.word	0x08011b90
 800a350:	200087f4 	.word	0x200087f4
 800a354:	200087e8 	.word	0x200087e8
 800a358:	200087ec 	.word	0x200087ec
 800a35c:	200087d8 	.word	0x200087d8
 800a360:	200087f2 	.word	0x200087f2
 800a364:	2302      	movs	r3, #2
 800a366:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a36a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a36e:	b29a      	uxth	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a374:	fb12 f303 	smulbb	r3, r2, r3
 800a378:	b29b      	uxth	r3, r3
 800a37a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a37c:	4293      	cmp	r3, r2
 800a37e:	bf28      	it	cs
 800a380:	4613      	movcs	r3, r2
 800a382:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a38a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a38c:	4413      	add	r3, r2
 800a38e:	b29a      	uxth	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a396:	429a      	cmp	r2, r3
 800a398:	d309      	bcc.n	800a3ae <tcp_receive+0x2c6>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a3a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a3a2:	4413      	add	r3, r2
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a3ac:	e04e      	b.n	800a44c <tcp_receive+0x364>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a3b8:	e048      	b.n	800a44c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a3c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3c2:	4413      	add	r3, r2
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d309      	bcc.n	800a3e4 <tcp_receive+0x2fc>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a3d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3d8:	4413      	add	r3, r2
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a3e2:	e004      	b.n	800a3ee <tcp_receive+0x306>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d326      	bcc.n	800a44c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a41e:	4413      	add	r3, r2
 800a420:	b29a      	uxth	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a428:	429a      	cmp	r2, r3
 800a42a:	d30a      	bcc.n	800a442 <tcp_receive+0x35a>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a436:	4413      	add	r3, r2
 800a438:	b29a      	uxth	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a440:	e004      	b.n	800a44c <tcp_receive+0x364>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a448:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a454:	4a98      	ldr	r2, [pc, #608]	; (800a6b8 <tcp_receive+0x5d0>)
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff fdca 	bl	8009ff0 <tcp_free_acked_segments>
 800a45c:	4602      	mov	r2, r0
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a46a:	4a94      	ldr	r2, [pc, #592]	; (800a6bc <tcp_receive+0x5d4>)
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f7ff fdbf 	bl	8009ff0 <tcp_free_acked_segments>
 800a472:	4602      	mov	r2, r0
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d104      	bne.n	800a48a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a486:	861a      	strh	r2, [r3, #48]	; 0x30
 800a488:	e002      	b.n	800a490 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d103      	bne.n	800a4a6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a4ac:	4b84      	ldr	r3, [pc, #528]	; (800a6c0 <tcp_receive+0x5d8>)
 800a4ae:	881b      	ldrh	r3, [r3, #0]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	8b5b      	ldrh	r3, [r3, #26]
 800a4be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d035      	beq.n	800a532 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d118      	bne.n	800a500 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00c      	beq.n	800a4f0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fb f9d7 	bl	8005896 <lwip_htonl>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	dc20      	bgt.n	800a532 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	8b5b      	ldrh	r3, [r3, #26]
 800a4f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a4fe:	e018      	b.n	800a532 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fb f9c2 	bl	8005896 <lwip_htonl>
 800a512:	4603      	mov	r3, r0
 800a514:	1ae3      	subs	r3, r4, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	dc0b      	bgt.n	800a532 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	8b5b      	ldrh	r3, [r3, #26]
 800a51e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a522:	b29a      	uxth	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a528:	e003      	b.n	800a532 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f001 ff76 	bl	800c41c <tcp_send_empty_ack>
 800a530:	e000      	b.n	800a534 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a532:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d05b      	beq.n	800a5f4 <tcp_receive+0x50c>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a540:	4b60      	ldr	r3, [pc, #384]	; (800a6c4 <tcp_receive+0x5dc>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	da54      	bge.n	800a5f4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a54a:	4b5f      	ldr	r3, [pc, #380]	; (800a6c8 <tcp_receive+0x5e0>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	b29a      	uxth	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a554:	b29b      	uxth	r3, r3
 800a556:	1ad3      	subs	r3, r2, r3
 800a558:	b29b      	uxth	r3, r3
 800a55a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a55e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a568:	10db      	asrs	r3, r3, #3
 800a56a:	b21b      	sxth	r3, r3
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	b29b      	uxth	r3, r3
 800a572:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a582:	4413      	add	r3, r2
 800a584:	b29b      	uxth	r3, r3
 800a586:	b21a      	sxth	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a58c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a590:	2b00      	cmp	r3, #0
 800a592:	da05      	bge.n	800a5a0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a594:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a598:	425b      	negs	r3, r3
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a5a0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a5aa:	109b      	asrs	r3, r3, #2
 800a5ac:	b21b      	sxth	r3, r3
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a5c4:	4413      	add	r3, r2
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	b21a      	sxth	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a5d4:	10db      	asrs	r3, r3, #3
 800a5d6:	b21b      	sxth	r3, r3
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	4413      	add	r3, r2
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	b21a      	sxth	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a5f4:	4b35      	ldr	r3, [pc, #212]	; (800a6cc <tcp_receive+0x5e4>)
 800a5f6:	881b      	ldrh	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f000 84e2 	beq.w	800afc2 <tcp_receive+0xeda>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	7d1b      	ldrb	r3, [r3, #20]
 800a602:	2b06      	cmp	r3, #6
 800a604:	f200 84dd 	bhi.w	800afc2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a60c:	4b30      	ldr	r3, [pc, #192]	; (800a6d0 <tcp_receive+0x5e8>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	3b01      	subs	r3, #1
 800a614:	2b00      	cmp	r3, #0
 800a616:	f2c0 808f 	blt.w	800a738 <tcp_receive+0x650>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a61e:	4b2b      	ldr	r3, [pc, #172]	; (800a6cc <tcp_receive+0x5e4>)
 800a620:	881b      	ldrh	r3, [r3, #0]
 800a622:	4619      	mov	r1, r3
 800a624:	4b2a      	ldr	r3, [pc, #168]	; (800a6d0 <tcp_receive+0x5e8>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	440b      	add	r3, r1
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	3301      	adds	r3, #1
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f300 8082 	bgt.w	800a738 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a634:	4b27      	ldr	r3, [pc, #156]	; (800a6d4 <tcp_receive+0x5ec>)
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a63e:	4b24      	ldr	r3, [pc, #144]	; (800a6d0 <tcp_receive+0x5e8>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a646:	4b23      	ldr	r3, [pc, #140]	; (800a6d4 <tcp_receive+0x5ec>)
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d106      	bne.n	800a65c <tcp_receive+0x574>
 800a64e:	4b22      	ldr	r3, [pc, #136]	; (800a6d8 <tcp_receive+0x5f0>)
 800a650:	f240 5294 	movw	r2, #1428	; 0x594
 800a654:	4921      	ldr	r1, [pc, #132]	; (800a6dc <tcp_receive+0x5f4>)
 800a656:	4822      	ldr	r0, [pc, #136]	; (800a6e0 <tcp_receive+0x5f8>)
 800a658:	f004 fef4 	bl	800f444 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a662:	4293      	cmp	r3, r2
 800a664:	d906      	bls.n	800a674 <tcp_receive+0x58c>
 800a666:	4b1c      	ldr	r3, [pc, #112]	; (800a6d8 <tcp_receive+0x5f0>)
 800a668:	f240 5295 	movw	r2, #1429	; 0x595
 800a66c:	491d      	ldr	r1, [pc, #116]	; (800a6e4 <tcp_receive+0x5fc>)
 800a66e:	481c      	ldr	r0, [pc, #112]	; (800a6e0 <tcp_receive+0x5f8>)
 800a670:	f004 fee8 	bl	800f444 <iprintf>
      off = (u16_t)off32;
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a67a:	4b16      	ldr	r3, [pc, #88]	; (800a6d4 <tcp_receive+0x5ec>)
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	891b      	ldrh	r3, [r3, #8]
 800a680:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a684:	429a      	cmp	r2, r3
 800a686:	d906      	bls.n	800a696 <tcp_receive+0x5ae>
 800a688:	4b13      	ldr	r3, [pc, #76]	; (800a6d8 <tcp_receive+0x5f0>)
 800a68a:	f240 5297 	movw	r2, #1431	; 0x597
 800a68e:	4916      	ldr	r1, [pc, #88]	; (800a6e8 <tcp_receive+0x600>)
 800a690:	4813      	ldr	r0, [pc, #76]	; (800a6e0 <tcp_receive+0x5f8>)
 800a692:	f004 fed7 	bl	800f444 <iprintf>
      inseg.len -= off;
 800a696:	4b0f      	ldr	r3, [pc, #60]	; (800a6d4 <tcp_receive+0x5ec>)
 800a698:	891a      	ldrh	r2, [r3, #8]
 800a69a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	4b0c      	ldr	r3, [pc, #48]	; (800a6d4 <tcp_receive+0x5ec>)
 800a6a4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a6a6:	4b0b      	ldr	r3, [pc, #44]	; (800a6d4 <tcp_receive+0x5ec>)
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	891a      	ldrh	r2, [r3, #8]
 800a6ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a6b0:	1ad3      	subs	r3, r2, r3
 800a6b2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a6b4:	e02a      	b.n	800a70c <tcp_receive+0x624>
 800a6b6:	bf00      	nop
 800a6b8:	08011bac 	.word	0x08011bac
 800a6bc:	08011bb4 	.word	0x08011bb4
 800a6c0:	200087f0 	.word	0x200087f0
 800a6c4:	200087ec 	.word	0x200087ec
 800a6c8:	200087b0 	.word	0x200087b0
 800a6cc:	200087f2 	.word	0x200087f2
 800a6d0:	200087e8 	.word	0x200087e8
 800a6d4:	200087c8 	.word	0x200087c8
 800a6d8:	08011844 	.word	0x08011844
 800a6dc:	08011bbc 	.word	0x08011bbc
 800a6e0:	08011890 	.word	0x08011890
 800a6e4:	08011bcc 	.word	0x08011bcc
 800a6e8:	08011bdc 	.word	0x08011bdc
        off -= p->len;
 800a6ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6ee:	895b      	ldrh	r3, [r3, #10]
 800a6f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a6fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a6fe:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a702:	2200      	movs	r2, #0
 800a704:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a70c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a70e:	895b      	ldrh	r3, [r3, #10]
 800a710:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a714:	429a      	cmp	r2, r3
 800a716:	d8e9      	bhi.n	800a6ec <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a718:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a71c:	4619      	mov	r1, r3
 800a71e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a720:	f7fc fb7c 	bl	8006e1c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a728:	4a91      	ldr	r2, [pc, #580]	; (800a970 <tcp_receive+0x888>)
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	4b91      	ldr	r3, [pc, #580]	; (800a974 <tcp_receive+0x88c>)
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	4a8f      	ldr	r2, [pc, #572]	; (800a970 <tcp_receive+0x888>)
 800a732:	6812      	ldr	r2, [r2, #0]
 800a734:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a736:	e00d      	b.n	800a754 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a738:	4b8d      	ldr	r3, [pc, #564]	; (800a970 <tcp_receive+0x888>)
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	2b00      	cmp	r3, #0
 800a744:	da06      	bge.n	800a754 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	8b5b      	ldrh	r3, [r3, #26]
 800a74a:	f043 0302 	orr.w	r3, r3, #2
 800a74e:	b29a      	uxth	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a754:	4b86      	ldr	r3, [pc, #536]	; (800a970 <tcp_receive+0x888>)
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	f2c0 842a 	blt.w	800afb8 <tcp_receive+0xed0>
 800a764:	4b82      	ldr	r3, [pc, #520]	; (800a970 <tcp_receive+0x888>)
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	6879      	ldr	r1, [r7, #4]
 800a76e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a770:	440b      	add	r3, r1
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	3301      	adds	r3, #1
 800a776:	2b00      	cmp	r3, #0
 800a778:	f300 841e 	bgt.w	800afb8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a780:	4b7b      	ldr	r3, [pc, #492]	; (800a970 <tcp_receive+0x888>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	429a      	cmp	r2, r3
 800a786:	f040 829a 	bne.w	800acbe <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a78a:	4b7a      	ldr	r3, [pc, #488]	; (800a974 <tcp_receive+0x88c>)
 800a78c:	891c      	ldrh	r4, [r3, #8]
 800a78e:	4b79      	ldr	r3, [pc, #484]	; (800a974 <tcp_receive+0x88c>)
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	899b      	ldrh	r3, [r3, #12]
 800a794:	b29b      	uxth	r3, r3
 800a796:	4618      	mov	r0, r3
 800a798:	f7fb f868 	bl	800586c <lwip_htons>
 800a79c:	4603      	mov	r3, r0
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	f003 0303 	and.w	r3, r3, #3
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <tcp_receive+0x6c4>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e000      	b.n	800a7ae <tcp_receive+0x6c6>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	4423      	add	r3, r4
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	4b71      	ldr	r3, [pc, #452]	; (800a978 <tcp_receive+0x890>)
 800a7b4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a7ba:	4b6f      	ldr	r3, [pc, #444]	; (800a978 <tcp_receive+0x890>)
 800a7bc:	881b      	ldrh	r3, [r3, #0]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d275      	bcs.n	800a8ae <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a7c2:	4b6c      	ldr	r3, [pc, #432]	; (800a974 <tcp_receive+0x88c>)
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	899b      	ldrh	r3, [r3, #12]
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fb f84e 	bl	800586c <lwip_htons>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d01f      	beq.n	800a81c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a7dc:	4b65      	ldr	r3, [pc, #404]	; (800a974 <tcp_receive+0x88c>)
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	899b      	ldrh	r3, [r3, #12]
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	b21b      	sxth	r3, r3
 800a7e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a7ea:	b21c      	sxth	r4, r3
 800a7ec:	4b61      	ldr	r3, [pc, #388]	; (800a974 <tcp_receive+0x88c>)
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	899b      	ldrh	r3, [r3, #12]
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fb f839 	bl	800586c <lwip_htons>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a804:	b29b      	uxth	r3, r3
 800a806:	4618      	mov	r0, r3
 800a808:	f7fb f830 	bl	800586c <lwip_htons>
 800a80c:	4603      	mov	r3, r0
 800a80e:	b21b      	sxth	r3, r3
 800a810:	4323      	orrs	r3, r4
 800a812:	b21a      	sxth	r2, r3
 800a814:	4b57      	ldr	r3, [pc, #348]	; (800a974 <tcp_receive+0x88c>)
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	b292      	uxth	r2, r2
 800a81a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a820:	4b54      	ldr	r3, [pc, #336]	; (800a974 <tcp_receive+0x88c>)
 800a822:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a824:	4b53      	ldr	r3, [pc, #332]	; (800a974 <tcp_receive+0x88c>)
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	899b      	ldrh	r3, [r3, #12]
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fb f81d 	bl	800586c <lwip_htons>
 800a832:	4603      	mov	r3, r0
 800a834:	b2db      	uxtb	r3, r3
 800a836:	f003 0302 	and.w	r3, r3, #2
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d005      	beq.n	800a84a <tcp_receive+0x762>
            inseg.len -= 1;
 800a83e:	4b4d      	ldr	r3, [pc, #308]	; (800a974 <tcp_receive+0x88c>)
 800a840:	891b      	ldrh	r3, [r3, #8]
 800a842:	3b01      	subs	r3, #1
 800a844:	b29a      	uxth	r2, r3
 800a846:	4b4b      	ldr	r3, [pc, #300]	; (800a974 <tcp_receive+0x88c>)
 800a848:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a84a:	4b4a      	ldr	r3, [pc, #296]	; (800a974 <tcp_receive+0x88c>)
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	4a49      	ldr	r2, [pc, #292]	; (800a974 <tcp_receive+0x88c>)
 800a850:	8912      	ldrh	r2, [r2, #8]
 800a852:	4611      	mov	r1, r2
 800a854:	4618      	mov	r0, r3
 800a856:	f7fc f9e1 	bl	8006c1c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a85a:	4b46      	ldr	r3, [pc, #280]	; (800a974 <tcp_receive+0x88c>)
 800a85c:	891c      	ldrh	r4, [r3, #8]
 800a85e:	4b45      	ldr	r3, [pc, #276]	; (800a974 <tcp_receive+0x88c>)
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	899b      	ldrh	r3, [r3, #12]
 800a864:	b29b      	uxth	r3, r3
 800a866:	4618      	mov	r0, r3
 800a868:	f7fb f800 	bl	800586c <lwip_htons>
 800a86c:	4603      	mov	r3, r0
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	f003 0303 	and.w	r3, r3, #3
 800a874:	2b00      	cmp	r3, #0
 800a876:	d001      	beq.n	800a87c <tcp_receive+0x794>
 800a878:	2301      	movs	r3, #1
 800a87a:	e000      	b.n	800a87e <tcp_receive+0x796>
 800a87c:	2300      	movs	r3, #0
 800a87e:	4423      	add	r3, r4
 800a880:	b29a      	uxth	r2, r3
 800a882:	4b3d      	ldr	r3, [pc, #244]	; (800a978 <tcp_receive+0x890>)
 800a884:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a886:	4b3c      	ldr	r3, [pc, #240]	; (800a978 <tcp_receive+0x890>)
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	461a      	mov	r2, r3
 800a88c:	4b38      	ldr	r3, [pc, #224]	; (800a970 <tcp_receive+0x888>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	441a      	add	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	6879      	ldr	r1, [r7, #4]
 800a898:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a89a:	440b      	add	r3, r1
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d006      	beq.n	800a8ae <tcp_receive+0x7c6>
 800a8a0:	4b36      	ldr	r3, [pc, #216]	; (800a97c <tcp_receive+0x894>)
 800a8a2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a8a6:	4936      	ldr	r1, [pc, #216]	; (800a980 <tcp_receive+0x898>)
 800a8a8:	4836      	ldr	r0, [pc, #216]	; (800a984 <tcp_receive+0x89c>)
 800a8aa:	f004 fdcb 	bl	800f444 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 80e7 	beq.w	800aa86 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a8b8:	4b2e      	ldr	r3, [pc, #184]	; (800a974 <tcp_receive+0x88c>)
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	899b      	ldrh	r3, [r3, #12]
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fa ffd3 	bl	800586c <lwip_htons>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	f003 0301 	and.w	r3, r3, #1
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d010      	beq.n	800a8f4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a8d2:	e00a      	b.n	800a8ea <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8d8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f7fd fd92 	bl	800840e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1f0      	bne.n	800a8d4 <tcp_receive+0x7ec>
 800a8f2:	e0c8      	b.n	800aa86 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a8fa:	e052      	b.n	800a9a2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	899b      	ldrh	r3, [r3, #12]
 800a902:	b29b      	uxth	r3, r3
 800a904:	4618      	mov	r0, r3
 800a906:	f7fa ffb1 	bl	800586c <lwip_htons>
 800a90a:	4603      	mov	r3, r0
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	f003 0301 	and.w	r3, r3, #1
 800a912:	2b00      	cmp	r3, #0
 800a914:	d03d      	beq.n	800a992 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a916:	4b17      	ldr	r3, [pc, #92]	; (800a974 <tcp_receive+0x88c>)
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	899b      	ldrh	r3, [r3, #12]
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fa ffa4 	bl	800586c <lwip_htons>
 800a924:	4603      	mov	r3, r0
 800a926:	b2db      	uxtb	r3, r3
 800a928:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d130      	bne.n	800a992 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a930:	4b10      	ldr	r3, [pc, #64]	; (800a974 <tcp_receive+0x88c>)
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	899b      	ldrh	r3, [r3, #12]
 800a936:	b29c      	uxth	r4, r3
 800a938:	2001      	movs	r0, #1
 800a93a:	f7fa ff97 	bl	800586c <lwip_htons>
 800a93e:	4603      	mov	r3, r0
 800a940:	461a      	mov	r2, r3
 800a942:	4b0c      	ldr	r3, [pc, #48]	; (800a974 <tcp_receive+0x88c>)
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	4322      	orrs	r2, r4
 800a948:	b292      	uxth	r2, r2
 800a94a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a94c:	4b09      	ldr	r3, [pc, #36]	; (800a974 <tcp_receive+0x88c>)
 800a94e:	891c      	ldrh	r4, [r3, #8]
 800a950:	4b08      	ldr	r3, [pc, #32]	; (800a974 <tcp_receive+0x88c>)
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	899b      	ldrh	r3, [r3, #12]
 800a956:	b29b      	uxth	r3, r3
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fa ff87 	bl	800586c <lwip_htons>
 800a95e:	4603      	mov	r3, r0
 800a960:	b2db      	uxtb	r3, r3
 800a962:	f003 0303 	and.w	r3, r3, #3
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00e      	beq.n	800a988 <tcp_receive+0x8a0>
 800a96a:	2301      	movs	r3, #1
 800a96c:	e00d      	b.n	800a98a <tcp_receive+0x8a2>
 800a96e:	bf00      	nop
 800a970:	200087e8 	.word	0x200087e8
 800a974:	200087c8 	.word	0x200087c8
 800a978:	200087f2 	.word	0x200087f2
 800a97c:	08011844 	.word	0x08011844
 800a980:	08011bec 	.word	0x08011bec
 800a984:	08011890 	.word	0x08011890
 800a988:	2300      	movs	r3, #0
 800a98a:	4423      	add	r3, r4
 800a98c:	b29a      	uxth	r2, r3
 800a98e:	4b98      	ldr	r3, [pc, #608]	; (800abf0 <tcp_receive+0xb08>)
 800a990:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a994:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a99c:	6938      	ldr	r0, [r7, #16]
 800a99e:	f7fd fd36 	bl	800840e <tcp_seg_free>
            while (next &&
 800a9a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00e      	beq.n	800a9c6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a9a8:	4b91      	ldr	r3, [pc, #580]	; (800abf0 <tcp_receive+0xb08>)
 800a9aa:	881b      	ldrh	r3, [r3, #0]
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	4b91      	ldr	r3, [pc, #580]	; (800abf4 <tcp_receive+0xb0c>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	441a      	add	r2, r3
 800a9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9bc:	8909      	ldrh	r1, [r1, #8]
 800a9be:	440b      	add	r3, r1
 800a9c0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	da9a      	bge.n	800a8fc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a9c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d059      	beq.n	800aa80 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a9cc:	4b88      	ldr	r3, [pc, #544]	; (800abf0 <tcp_receive+0xb08>)
 800a9ce:	881b      	ldrh	r3, [r3, #0]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	4b88      	ldr	r3, [pc, #544]	; (800abf4 <tcp_receive+0xb0c>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	441a      	add	r2, r3
 800a9d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	dd4d      	ble.n	800aa80 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a9e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	4b81      	ldr	r3, [pc, #516]	; (800abf4 <tcp_receive+0xb0c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	4b80      	ldr	r3, [pc, #512]	; (800abf8 <tcp_receive+0xb10>)
 800a9f8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a9fa:	4b7f      	ldr	r3, [pc, #508]	; (800abf8 <tcp_receive+0xb10>)
 800a9fc:	68db      	ldr	r3, [r3, #12]
 800a9fe:	899b      	ldrh	r3, [r3, #12]
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fa ff32 	bl	800586c <lwip_htons>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	f003 0302 	and.w	r3, r3, #2
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d005      	beq.n	800aa20 <tcp_receive+0x938>
                inseg.len -= 1;
 800aa14:	4b78      	ldr	r3, [pc, #480]	; (800abf8 <tcp_receive+0xb10>)
 800aa16:	891b      	ldrh	r3, [r3, #8]
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	4b76      	ldr	r3, [pc, #472]	; (800abf8 <tcp_receive+0xb10>)
 800aa1e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800aa20:	4b75      	ldr	r3, [pc, #468]	; (800abf8 <tcp_receive+0xb10>)
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	4a74      	ldr	r2, [pc, #464]	; (800abf8 <tcp_receive+0xb10>)
 800aa26:	8912      	ldrh	r2, [r2, #8]
 800aa28:	4611      	mov	r1, r2
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7fc f8f6 	bl	8006c1c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800aa30:	4b71      	ldr	r3, [pc, #452]	; (800abf8 <tcp_receive+0xb10>)
 800aa32:	891c      	ldrh	r4, [r3, #8]
 800aa34:	4b70      	ldr	r3, [pc, #448]	; (800abf8 <tcp_receive+0xb10>)
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	899b      	ldrh	r3, [r3, #12]
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fa ff15 	bl	800586c <lwip_htons>
 800aa42:	4603      	mov	r3, r0
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	f003 0303 	and.w	r3, r3, #3
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d001      	beq.n	800aa52 <tcp_receive+0x96a>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e000      	b.n	800aa54 <tcp_receive+0x96c>
 800aa52:	2300      	movs	r3, #0
 800aa54:	4423      	add	r3, r4
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	4b65      	ldr	r3, [pc, #404]	; (800abf0 <tcp_receive+0xb08>)
 800aa5a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800aa5c:	4b64      	ldr	r3, [pc, #400]	; (800abf0 <tcp_receive+0xb08>)
 800aa5e:	881b      	ldrh	r3, [r3, #0]
 800aa60:	461a      	mov	r2, r3
 800aa62:	4b64      	ldr	r3, [pc, #400]	; (800abf4 <tcp_receive+0xb0c>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	441a      	add	r2, r3
 800aa68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d006      	beq.n	800aa80 <tcp_receive+0x998>
 800aa72:	4b62      	ldr	r3, [pc, #392]	; (800abfc <tcp_receive+0xb14>)
 800aa74:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800aa78:	4961      	ldr	r1, [pc, #388]	; (800ac00 <tcp_receive+0xb18>)
 800aa7a:	4862      	ldr	r0, [pc, #392]	; (800ac04 <tcp_receive+0xb1c>)
 800aa7c:	f004 fce2 	bl	800f444 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa84:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800aa86:	4b5a      	ldr	r3, [pc, #360]	; (800abf0 <tcp_receive+0xb08>)
 800aa88:	881b      	ldrh	r3, [r3, #0]
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	4b59      	ldr	r3, [pc, #356]	; (800abf4 <tcp_receive+0xb0c>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	441a      	add	r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa9a:	4b55      	ldr	r3, [pc, #340]	; (800abf0 <tcp_receive+0xb08>)
 800aa9c:	881b      	ldrh	r3, [r3, #0]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d206      	bcs.n	800aab0 <tcp_receive+0x9c8>
 800aaa2:	4b56      	ldr	r3, [pc, #344]	; (800abfc <tcp_receive+0xb14>)
 800aaa4:	f240 6207 	movw	r2, #1543	; 0x607
 800aaa8:	4957      	ldr	r1, [pc, #348]	; (800ac08 <tcp_receive+0xb20>)
 800aaaa:	4856      	ldr	r0, [pc, #344]	; (800ac04 <tcp_receive+0xb1c>)
 800aaac:	f004 fcca 	bl	800f444 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aab4:	4b4e      	ldr	r3, [pc, #312]	; (800abf0 <tcp_receive+0xb08>)
 800aab6:	881b      	ldrh	r3, [r3, #0]
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7fc ffc5 	bl	8007a50 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800aac6:	4b4c      	ldr	r3, [pc, #304]	; (800abf8 <tcp_receive+0xb10>)
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	891b      	ldrh	r3, [r3, #8]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d006      	beq.n	800aade <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800aad0:	4b49      	ldr	r3, [pc, #292]	; (800abf8 <tcp_receive+0xb10>)
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	4a4d      	ldr	r2, [pc, #308]	; (800ac0c <tcp_receive+0xb24>)
 800aad6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800aad8:	4b47      	ldr	r3, [pc, #284]	; (800abf8 <tcp_receive+0xb10>)
 800aada:	2200      	movs	r2, #0
 800aadc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aade:	4b46      	ldr	r3, [pc, #280]	; (800abf8 <tcp_receive+0xb10>)
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	899b      	ldrh	r3, [r3, #12]
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fa fec0 	bl	800586c <lwip_htons>
 800aaec:	4603      	mov	r3, r0
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	f003 0301 	and.w	r3, r3, #1
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f000 80b8 	beq.w	800ac6a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800aafa:	4b45      	ldr	r3, [pc, #276]	; (800ac10 <tcp_receive+0xb28>)
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	f043 0320 	orr.w	r3, r3, #32
 800ab02:	b2da      	uxtb	r2, r3
 800ab04:	4b42      	ldr	r3, [pc, #264]	; (800ac10 <tcp_receive+0xb28>)
 800ab06:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ab08:	e0af      	b.n	800ac6a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab0e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	4a36      	ldr	r2, [pc, #216]	; (800abf4 <tcp_receive+0xb0c>)
 800ab1a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	891b      	ldrh	r3, [r3, #8]
 800ab20:	461c      	mov	r4, r3
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	899b      	ldrh	r3, [r3, #12]
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fa fe9e 	bl	800586c <lwip_htons>
 800ab30:	4603      	mov	r3, r0
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	f003 0303 	and.w	r3, r3, #3
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <tcp_receive+0xa58>
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	e000      	b.n	800ab42 <tcp_receive+0xa5a>
 800ab40:	2300      	movs	r3, #0
 800ab42:	191a      	adds	r2, r3, r4
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab48:	441a      	add	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab52:	461c      	mov	r4, r3
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	891b      	ldrh	r3, [r3, #8]
 800ab58:	461d      	mov	r5, r3
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	899b      	ldrh	r3, [r3, #12]
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fa fe82 	bl	800586c <lwip_htons>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	f003 0303 	and.w	r3, r3, #3
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d001      	beq.n	800ab78 <tcp_receive+0xa90>
 800ab74:	2301      	movs	r3, #1
 800ab76:	e000      	b.n	800ab7a <tcp_receive+0xa92>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	442b      	add	r3, r5
 800ab7c:	429c      	cmp	r4, r3
 800ab7e:	d206      	bcs.n	800ab8e <tcp_receive+0xaa6>
 800ab80:	4b1e      	ldr	r3, [pc, #120]	; (800abfc <tcp_receive+0xb14>)
 800ab82:	f240 622b 	movw	r2, #1579	; 0x62b
 800ab86:	4923      	ldr	r1, [pc, #140]	; (800ac14 <tcp_receive+0xb2c>)
 800ab88:	481e      	ldr	r0, [pc, #120]	; (800ac04 <tcp_receive+0xb1c>)
 800ab8a:	f004 fc5b 	bl	800f444 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	891b      	ldrh	r3, [r3, #8]
 800ab92:	461c      	mov	r4, r3
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	899b      	ldrh	r3, [r3, #12]
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7fa fe65 	bl	800586c <lwip_htons>
 800aba2:	4603      	mov	r3, r0
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	f003 0303 	and.w	r3, r3, #3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d001      	beq.n	800abb2 <tcp_receive+0xaca>
 800abae:	2301      	movs	r3, #1
 800abb0:	e000      	b.n	800abb4 <tcp_receive+0xacc>
 800abb2:	2300      	movs	r3, #0
 800abb4:	1919      	adds	r1, r3, r4
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800abba:	b28b      	uxth	r3, r1
 800abbc:	1ad3      	subs	r3, r2, r3
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f7fc ff43 	bl	8007a50 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	891b      	ldrh	r3, [r3, #8]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d028      	beq.n	800ac26 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800abd4:	4b0d      	ldr	r3, [pc, #52]	; (800ac0c <tcp_receive+0xb24>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d01d      	beq.n	800ac18 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800abdc:	4b0b      	ldr	r3, [pc, #44]	; (800ac0c <tcp_receive+0xb24>)
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	4619      	mov	r1, r3
 800abe6:	4610      	mov	r0, r2
 800abe8:	f7fc fa60 	bl	80070ac <pbuf_cat>
 800abec:	e018      	b.n	800ac20 <tcp_receive+0xb38>
 800abee:	bf00      	nop
 800abf0:	200087f2 	.word	0x200087f2
 800abf4:	200087e8 	.word	0x200087e8
 800abf8:	200087c8 	.word	0x200087c8
 800abfc:	08011844 	.word	0x08011844
 800ac00:	08011c24 	.word	0x08011c24
 800ac04:	08011890 	.word	0x08011890
 800ac08:	08011c60 	.word	0x08011c60
 800ac0c:	200087f8 	.word	0x200087f8
 800ac10:	200087f5 	.word	0x200087f5
 800ac14:	08011c80 	.word	0x08011c80
            } else {
              recv_data = cseg->p;
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	4a70      	ldr	r2, [pc, #448]	; (800ade0 <tcp_receive+0xcf8>)
 800ac1e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2200      	movs	r2, #0
 800ac24:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	899b      	ldrh	r3, [r3, #12]
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fa fe1c 	bl	800586c <lwip_htons>
 800ac34:	4603      	mov	r3, r0
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	f003 0301 	and.w	r3, r3, #1
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00d      	beq.n	800ac5c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ac40:	4b68      	ldr	r3, [pc, #416]	; (800ade4 <tcp_receive+0xcfc>)
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	f043 0320 	orr.w	r3, r3, #32
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	4b66      	ldr	r3, [pc, #408]	; (800ade4 <tcp_receive+0xcfc>)
 800ac4c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	7d1b      	ldrb	r3, [r3, #20]
 800ac52:	2b04      	cmp	r3, #4
 800ac54:	d102      	bne.n	800ac5c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2207      	movs	r2, #7
 800ac5a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ac64:	68b8      	ldr	r0, [r7, #8]
 800ac66:	f7fd fbd2 	bl	800840e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d008      	beq.n	800ac84 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	685a      	ldr	r2, [r3, #4]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	f43f af43 	beq.w	800ab0a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	8b5b      	ldrh	r3, [r3, #26]
 800ac88:	f003 0301 	and.w	r3, r3, #1
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00e      	beq.n	800acae <tcp_receive+0xbc6>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	8b5b      	ldrh	r3, [r3, #26]
 800ac94:	f023 0301 	bic.w	r3, r3, #1
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	835a      	strh	r2, [r3, #26]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	8b5b      	ldrh	r3, [r3, #26]
 800aca2:	f043 0302 	orr.w	r3, r3, #2
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800acac:	e188      	b.n	800afc0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	8b5b      	ldrh	r3, [r3, #26]
 800acb2:	f043 0301 	orr.w	r3, r3, #1
 800acb6:	b29a      	uxth	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800acbc:	e180      	b.n	800afc0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d106      	bne.n	800acd4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800acc6:	4848      	ldr	r0, [pc, #288]	; (800ade8 <tcp_receive+0xd00>)
 800acc8:	f7fd fbba 	bl	8008440 <tcp_seg_copy>
 800accc:	4602      	mov	r2, r0
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	675a      	str	r2, [r3, #116]	; 0x74
 800acd2:	e16d      	b.n	800afb0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800acd4:	2300      	movs	r3, #0
 800acd6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acdc:	63bb      	str	r3, [r7, #56]	; 0x38
 800acde:	e157      	b.n	800af90 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ace0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	685a      	ldr	r2, [r3, #4]
 800ace6:	4b41      	ldr	r3, [pc, #260]	; (800adec <tcp_receive+0xd04>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	429a      	cmp	r2, r3
 800acec:	d11d      	bne.n	800ad2a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800acee:	4b3e      	ldr	r3, [pc, #248]	; (800ade8 <tcp_receive+0xd00>)
 800acf0:	891a      	ldrh	r2, [r3, #8]
 800acf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf4:	891b      	ldrh	r3, [r3, #8]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	f240 814f 	bls.w	800af9a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800acfc:	483a      	ldr	r0, [pc, #232]	; (800ade8 <tcp_receive+0xd00>)
 800acfe:	f7fd fb9f 	bl	8008440 <tcp_seg_copy>
 800ad02:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f000 8149 	beq.w	800af9e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ad0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d003      	beq.n	800ad1a <tcp_receive+0xc32>
                    prev->next = cseg;
 800ad12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad14:	697a      	ldr	r2, [r7, #20]
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	e002      	b.n	800ad20 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ad20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad22:	6978      	ldr	r0, [r7, #20]
 800ad24:	f7ff f8dc 	bl	8009ee0 <tcp_oos_insert_segment>
                }
                break;
 800ad28:	e139      	b.n	800af9e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ad2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d117      	bne.n	800ad60 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ad30:	4b2e      	ldr	r3, [pc, #184]	; (800adec <tcp_receive+0xd04>)
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	da57      	bge.n	800adf0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ad40:	4829      	ldr	r0, [pc, #164]	; (800ade8 <tcp_receive+0xd00>)
 800ad42:	f7fd fb7d 	bl	8008440 <tcp_seg_copy>
 800ad46:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 8129 	beq.w	800afa2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	69ba      	ldr	r2, [r7, #24]
 800ad54:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ad56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad58:	69b8      	ldr	r0, [r7, #24]
 800ad5a:	f7ff f8c1 	bl	8009ee0 <tcp_oos_insert_segment>
                  }
                  break;
 800ad5e:	e120      	b.n	800afa2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ad60:	4b22      	ldr	r3, [pc, #136]	; (800adec <tcp_receive+0xd04>)
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	db3e      	blt.n	800adf0 <tcp_receive+0xd08>
 800ad72:	4b1e      	ldr	r3, [pc, #120]	; (800adec <tcp_receive+0xd04>)
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	3301      	adds	r3, #1
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	dc35      	bgt.n	800adf0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ad84:	4818      	ldr	r0, [pc, #96]	; (800ade8 <tcp_receive+0xd00>)
 800ad86:	f7fd fb5b 	bl	8008440 <tcp_seg_copy>
 800ad8a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f000 8109 	beq.w	800afa6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ad94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad9c:	8912      	ldrh	r2, [r2, #8]
 800ad9e:	441a      	add	r2, r3
 800ada0:	4b12      	ldr	r3, [pc, #72]	; (800adec <tcp_receive+0xd04>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	dd12      	ble.n	800add0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800adaa:	4b10      	ldr	r3, [pc, #64]	; (800adec <tcp_receive+0xd04>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	b29a      	uxth	r2, r3
 800adb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	b29a      	uxth	r2, r3
 800adbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adbe:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800adc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc2:	685a      	ldr	r2, [r3, #4]
 800adc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc6:	891b      	ldrh	r3, [r3, #8]
 800adc8:	4619      	mov	r1, r3
 800adca:	4610      	mov	r0, r2
 800adcc:	f7fb ff26 	bl	8006c1c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800add0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add2:	69fa      	ldr	r2, [r7, #28]
 800add4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800add6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800add8:	69f8      	ldr	r0, [r7, #28]
 800adda:	f7ff f881 	bl	8009ee0 <tcp_oos_insert_segment>
                  }
                  break;
 800adde:	e0e2      	b.n	800afa6 <tcp_receive+0xebe>
 800ade0:	200087f8 	.word	0x200087f8
 800ade4:	200087f5 	.word	0x200087f5
 800ade8:	200087c8 	.word	0x200087c8
 800adec:	200087e8 	.word	0x200087e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800adf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f040 80c6 	bne.w	800af8a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800adfe:	4b80      	ldr	r3, [pc, #512]	; (800b000 <tcp_receive+0xf18>)
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f340 80bd 	ble.w	800af8a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ae10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	899b      	ldrh	r3, [r3, #12]
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7fa fd27 	bl	800586c <lwip_htons>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	f003 0301 	and.w	r3, r3, #1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f040 80bf 	bne.w	800afaa <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ae2c:	4875      	ldr	r0, [pc, #468]	; (800b004 <tcp_receive+0xf1c>)
 800ae2e:	f7fd fb07 	bl	8008440 <tcp_seg_copy>
 800ae32:	4602      	mov	r2, r0
 800ae34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae36:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ae38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f000 80b6 	beq.w	800afae <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ae42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae4a:	8912      	ldrh	r2, [r2, #8]
 800ae4c:	441a      	add	r2, r3
 800ae4e:	4b6c      	ldr	r3, [pc, #432]	; (800b000 <tcp_receive+0xf18>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	1ad3      	subs	r3, r2, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	dd12      	ble.n	800ae7e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ae58:	4b69      	ldr	r3, [pc, #420]	; (800b000 <tcp_receive+0xf18>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	b29a      	uxth	r2, r3
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ae6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae70:	685a      	ldr	r2, [r3, #4]
 800ae72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae74:	891b      	ldrh	r3, [r3, #8]
 800ae76:	4619      	mov	r1, r3
 800ae78:	4610      	mov	r0, r2
 800ae7a:	f7fb fecf 	bl	8006c1c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ae7e:	4b62      	ldr	r3, [pc, #392]	; (800b008 <tcp_receive+0xf20>)
 800ae80:	881b      	ldrh	r3, [r3, #0]
 800ae82:	461a      	mov	r2, r3
 800ae84:	4b5e      	ldr	r3, [pc, #376]	; (800b000 <tcp_receive+0xf18>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	441a      	add	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8e:	6879      	ldr	r1, [r7, #4]
 800ae90:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae92:	440b      	add	r3, r1
 800ae94:	1ad3      	subs	r3, r2, r3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	f340 8089 	ble.w	800afae <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ae9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	899b      	ldrh	r3, [r3, #12]
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fa fce0 	bl	800586c <lwip_htons>
 800aeac:	4603      	mov	r3, r0
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	f003 0301 	and.w	r3, r3, #1
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d022      	beq.n	800aefe <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800aeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	899b      	ldrh	r3, [r3, #12]
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	b21b      	sxth	r3, r3
 800aec4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aec8:	b21c      	sxth	r4, r3
 800aeca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	899b      	ldrh	r3, [r3, #12]
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7fa fcc9 	bl	800586c <lwip_htons>
 800aeda:	4603      	mov	r3, r0
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	b29b      	uxth	r3, r3
 800aee0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fa fcc0 	bl	800586c <lwip_htons>
 800aeec:	4603      	mov	r3, r0
 800aeee:	b21b      	sxth	r3, r3
 800aef0:	4323      	orrs	r3, r4
 800aef2:	b21a      	sxth	r2, r3
 800aef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	b292      	uxth	r2, r2
 800aefc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af02:	b29a      	uxth	r2, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af08:	4413      	add	r3, r2
 800af0a:	b299      	uxth	r1, r3
 800af0c:	4b3c      	ldr	r3, [pc, #240]	; (800b000 <tcp_receive+0xf18>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	b29a      	uxth	r2, r3
 800af12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	1a8a      	subs	r2, r1, r2
 800af18:	b292      	uxth	r2, r2
 800af1a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800af1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	685a      	ldr	r2, [r3, #4]
 800af22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	891b      	ldrh	r3, [r3, #8]
 800af28:	4619      	mov	r1, r3
 800af2a:	4610      	mov	r0, r2
 800af2c:	f7fb fe76 	bl	8006c1c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800af30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	891c      	ldrh	r4, [r3, #8]
 800af36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	899b      	ldrh	r3, [r3, #12]
 800af3e:	b29b      	uxth	r3, r3
 800af40:	4618      	mov	r0, r3
 800af42:	f7fa fc93 	bl	800586c <lwip_htons>
 800af46:	4603      	mov	r3, r0
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	f003 0303 	and.w	r3, r3, #3
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d001      	beq.n	800af56 <tcp_receive+0xe6e>
 800af52:	2301      	movs	r3, #1
 800af54:	e000      	b.n	800af58 <tcp_receive+0xe70>
 800af56:	2300      	movs	r3, #0
 800af58:	4423      	add	r3, r4
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	4b2a      	ldr	r3, [pc, #168]	; (800b008 <tcp_receive+0xf20>)
 800af5e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800af60:	4b29      	ldr	r3, [pc, #164]	; (800b008 <tcp_receive+0xf20>)
 800af62:	881b      	ldrh	r3, [r3, #0]
 800af64:	461a      	mov	r2, r3
 800af66:	4b26      	ldr	r3, [pc, #152]	; (800b000 <tcp_receive+0xf18>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	441a      	add	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af70:	6879      	ldr	r1, [r7, #4]
 800af72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800af74:	440b      	add	r3, r1
 800af76:	429a      	cmp	r2, r3
 800af78:	d019      	beq.n	800afae <tcp_receive+0xec6>
 800af7a:	4b24      	ldr	r3, [pc, #144]	; (800b00c <tcp_receive+0xf24>)
 800af7c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800af80:	4923      	ldr	r1, [pc, #140]	; (800b010 <tcp_receive+0xf28>)
 800af82:	4824      	ldr	r0, [pc, #144]	; (800b014 <tcp_receive+0xf2c>)
 800af84:	f004 fa5e 	bl	800f444 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800af88:	e011      	b.n	800afae <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800af8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	63bb      	str	r3, [r7, #56]	; 0x38
 800af90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af92:	2b00      	cmp	r3, #0
 800af94:	f47f aea4 	bne.w	800ace0 <tcp_receive+0xbf8>
 800af98:	e00a      	b.n	800afb0 <tcp_receive+0xec8>
                break;
 800af9a:	bf00      	nop
 800af9c:	e008      	b.n	800afb0 <tcp_receive+0xec8>
                break;
 800af9e:	bf00      	nop
 800afa0:	e006      	b.n	800afb0 <tcp_receive+0xec8>
                  break;
 800afa2:	bf00      	nop
 800afa4:	e004      	b.n	800afb0 <tcp_receive+0xec8>
                  break;
 800afa6:	bf00      	nop
 800afa8:	e002      	b.n	800afb0 <tcp_receive+0xec8>
                  break;
 800afaa:	bf00      	nop
 800afac:	e000      	b.n	800afb0 <tcp_receive+0xec8>
                break;
 800afae:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f001 fa33 	bl	800c41c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800afb6:	e003      	b.n	800afc0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f001 fa2f 	bl	800c41c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800afbe:	e01a      	b.n	800aff6 <tcp_receive+0xf0e>
 800afc0:	e019      	b.n	800aff6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800afc2:	4b0f      	ldr	r3, [pc, #60]	; (800b000 <tcp_receive+0xf18>)
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afca:	1ad3      	subs	r3, r2, r3
 800afcc:	2b00      	cmp	r3, #0
 800afce:	db0a      	blt.n	800afe6 <tcp_receive+0xefe>
 800afd0:	4b0b      	ldr	r3, [pc, #44]	; (800b000 <tcp_receive+0xf18>)
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd8:	6879      	ldr	r1, [r7, #4]
 800afda:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800afdc:	440b      	add	r3, r1
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	3301      	adds	r3, #1
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	dd07      	ble.n	800aff6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	8b5b      	ldrh	r3, [r3, #26]
 800afea:	f043 0302 	orr.w	r3, r3, #2
 800afee:	b29a      	uxth	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800aff4:	e7ff      	b.n	800aff6 <tcp_receive+0xf0e>
 800aff6:	bf00      	nop
 800aff8:	3750      	adds	r7, #80	; 0x50
 800affa:	46bd      	mov	sp, r7
 800affc:	bdb0      	pop	{r4, r5, r7, pc}
 800affe:	bf00      	nop
 800b000:	200087e8 	.word	0x200087e8
 800b004:	200087c8 	.word	0x200087c8
 800b008:	200087f2 	.word	0x200087f2
 800b00c:	08011844 	.word	0x08011844
 800b010:	08011bec 	.word	0x08011bec
 800b014:	08011890 	.word	0x08011890

0800b018 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b01e:	4b15      	ldr	r3, [pc, #84]	; (800b074 <tcp_get_next_optbyte+0x5c>)
 800b020:	881b      	ldrh	r3, [r3, #0]
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	b291      	uxth	r1, r2
 800b026:	4a13      	ldr	r2, [pc, #76]	; (800b074 <tcp_get_next_optbyte+0x5c>)
 800b028:	8011      	strh	r1, [r2, #0]
 800b02a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b02c:	4b12      	ldr	r3, [pc, #72]	; (800b078 <tcp_get_next_optbyte+0x60>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d004      	beq.n	800b03e <tcp_get_next_optbyte+0x26>
 800b034:	4b11      	ldr	r3, [pc, #68]	; (800b07c <tcp_get_next_optbyte+0x64>)
 800b036:	881b      	ldrh	r3, [r3, #0]
 800b038:	88fa      	ldrh	r2, [r7, #6]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d208      	bcs.n	800b050 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b03e:	4b10      	ldr	r3, [pc, #64]	; (800b080 <tcp_get_next_optbyte+0x68>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3314      	adds	r3, #20
 800b044:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b046:	88fb      	ldrh	r3, [r7, #6]
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	4413      	add	r3, r2
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	e00b      	b.n	800b068 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b050:	88fb      	ldrh	r3, [r7, #6]
 800b052:	b2da      	uxtb	r2, r3
 800b054:	4b09      	ldr	r3, [pc, #36]	; (800b07c <tcp_get_next_optbyte+0x64>)
 800b056:	881b      	ldrh	r3, [r3, #0]
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	1ad3      	subs	r3, r2, r3
 800b05c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b05e:	4b06      	ldr	r3, [pc, #24]	; (800b078 <tcp_get_next_optbyte+0x60>)
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	797b      	ldrb	r3, [r7, #5]
 800b064:	4413      	add	r3, r2
 800b066:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b068:	4618      	mov	r0, r3
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr
 800b074:	200087e4 	.word	0x200087e4
 800b078:	200087e0 	.word	0x200087e0
 800b07c:	200087de 	.word	0x200087de
 800b080:	200087d8 	.word	0x200087d8

0800b084 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d106      	bne.n	800b0a0 <tcp_parseopt+0x1c>
 800b092:	4b32      	ldr	r3, [pc, #200]	; (800b15c <tcp_parseopt+0xd8>)
 800b094:	f240 727d 	movw	r2, #1917	; 0x77d
 800b098:	4931      	ldr	r1, [pc, #196]	; (800b160 <tcp_parseopt+0xdc>)
 800b09a:	4832      	ldr	r0, [pc, #200]	; (800b164 <tcp_parseopt+0xe0>)
 800b09c:	f004 f9d2 	bl	800f444 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b0a0:	4b31      	ldr	r3, [pc, #196]	; (800b168 <tcp_parseopt+0xe4>)
 800b0a2:	881b      	ldrh	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d055      	beq.n	800b154 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b0a8:	4b30      	ldr	r3, [pc, #192]	; (800b16c <tcp_parseopt+0xe8>)
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	801a      	strh	r2, [r3, #0]
 800b0ae:	e045      	b.n	800b13c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800b0b0:	f7ff ffb2 	bl	800b018 <tcp_get_next_optbyte>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d006      	beq.n	800b0cc <tcp_parseopt+0x48>
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	dc2b      	bgt.n	800b11a <tcp_parseopt+0x96>
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d041      	beq.n	800b14a <tcp_parseopt+0xc6>
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d127      	bne.n	800b11a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800b0ca:	e037      	b.n	800b13c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b0cc:	f7ff ffa4 	bl	800b018 <tcp_get_next_optbyte>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b04      	cmp	r3, #4
 800b0d4:	d13b      	bne.n	800b14e <tcp_parseopt+0xca>
 800b0d6:	4b25      	ldr	r3, [pc, #148]	; (800b16c <tcp_parseopt+0xe8>)
 800b0d8:	881b      	ldrh	r3, [r3, #0]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	4a22      	ldr	r2, [pc, #136]	; (800b168 <tcp_parseopt+0xe4>)
 800b0de:	8812      	ldrh	r2, [r2, #0]
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	da34      	bge.n	800b14e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b0e4:	f7ff ff98 	bl	800b018 <tcp_get_next_optbyte>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	021b      	lsls	r3, r3, #8
 800b0ee:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b0f0:	f7ff ff92 	bl	800b018 <tcp_get_next_optbyte>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	89bb      	ldrh	r3, [r7, #12]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b0fe:	89bb      	ldrh	r3, [r7, #12]
 800b100:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b104:	d804      	bhi.n	800b110 <tcp_parseopt+0x8c>
 800b106:	89bb      	ldrh	r3, [r7, #12]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d001      	beq.n	800b110 <tcp_parseopt+0x8c>
 800b10c:	89ba      	ldrh	r2, [r7, #12]
 800b10e:	e001      	b.n	800b114 <tcp_parseopt+0x90>
 800b110:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b118:	e010      	b.n	800b13c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b11a:	f7ff ff7d 	bl	800b018 <tcp_get_next_optbyte>
 800b11e:	4603      	mov	r3, r0
 800b120:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b122:	7afb      	ldrb	r3, [r7, #11]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d914      	bls.n	800b152 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b128:	7afb      	ldrb	r3, [r7, #11]
 800b12a:	b29a      	uxth	r2, r3
 800b12c:	4b0f      	ldr	r3, [pc, #60]	; (800b16c <tcp_parseopt+0xe8>)
 800b12e:	881b      	ldrh	r3, [r3, #0]
 800b130:	4413      	add	r3, r2
 800b132:	b29b      	uxth	r3, r3
 800b134:	3b02      	subs	r3, #2
 800b136:	b29a      	uxth	r2, r3
 800b138:	4b0c      	ldr	r3, [pc, #48]	; (800b16c <tcp_parseopt+0xe8>)
 800b13a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b13c:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <tcp_parseopt+0xe8>)
 800b13e:	881a      	ldrh	r2, [r3, #0]
 800b140:	4b09      	ldr	r3, [pc, #36]	; (800b168 <tcp_parseopt+0xe4>)
 800b142:	881b      	ldrh	r3, [r3, #0]
 800b144:	429a      	cmp	r2, r3
 800b146:	d3b3      	bcc.n	800b0b0 <tcp_parseopt+0x2c>
 800b148:	e004      	b.n	800b154 <tcp_parseopt+0xd0>
          return;
 800b14a:	bf00      	nop
 800b14c:	e002      	b.n	800b154 <tcp_parseopt+0xd0>
            return;
 800b14e:	bf00      	nop
 800b150:	e000      	b.n	800b154 <tcp_parseopt+0xd0>
            return;
 800b152:	bf00      	nop
      }
    }
  }
}
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	08011844 	.word	0x08011844
 800b160:	08011ca8 	.word	0x08011ca8
 800b164:	08011890 	.word	0x08011890
 800b168:	200087dc 	.word	0x200087dc
 800b16c:	200087e4 	.word	0x200087e4

0800b170 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b170:	b480      	push	{r7}
 800b172:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b174:	4b05      	ldr	r3, [pc, #20]	; (800b18c <tcp_trigger_input_pcb_close+0x1c>)
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	f043 0310 	orr.w	r3, r3, #16
 800b17c:	b2da      	uxtb	r2, r3
 800b17e:	4b03      	ldr	r3, [pc, #12]	; (800b18c <tcp_trigger_input_pcb_close+0x1c>)
 800b180:	701a      	strb	r2, [r3, #0]
}
 800b182:	bf00      	nop
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	200087f5 	.word	0x200087f5

0800b190 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d00a      	beq.n	800b1b8 <tcp_route+0x28>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	7a1b      	ldrb	r3, [r3, #8]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d006      	beq.n	800b1b8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	7a1b      	ldrb	r3, [r3, #8]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fb fb5a 	bl	8006868 <netif_get_by_index>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	e003      	b.n	800b1c0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f002 fe7d 	bl	800deb8 <ip4_route>
 800b1be:	4603      	mov	r3, r0
  }
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b1c8:	b590      	push	{r4, r7, lr}
 800b1ca:	b087      	sub	sp, #28
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	603b      	str	r3, [r7, #0]
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d105      	bne.n	800b1ea <tcp_create_segment+0x22>
 800b1de:	4b44      	ldr	r3, [pc, #272]	; (800b2f0 <tcp_create_segment+0x128>)
 800b1e0:	22a3      	movs	r2, #163	; 0xa3
 800b1e2:	4944      	ldr	r1, [pc, #272]	; (800b2f4 <tcp_create_segment+0x12c>)
 800b1e4:	4844      	ldr	r0, [pc, #272]	; (800b2f8 <tcp_create_segment+0x130>)
 800b1e6:	f004 f92d 	bl	800f444 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d105      	bne.n	800b1fc <tcp_create_segment+0x34>
 800b1f0:	4b3f      	ldr	r3, [pc, #252]	; (800b2f0 <tcp_create_segment+0x128>)
 800b1f2:	22a4      	movs	r2, #164	; 0xa4
 800b1f4:	4941      	ldr	r1, [pc, #260]	; (800b2fc <tcp_create_segment+0x134>)
 800b1f6:	4840      	ldr	r0, [pc, #256]	; (800b2f8 <tcp_create_segment+0x130>)
 800b1f8:	f004 f924 	bl	800f444 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b1fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	b2db      	uxtb	r3, r3
 800b204:	f003 0304 	and.w	r3, r3, #4
 800b208:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b20a:	2003      	movs	r0, #3
 800b20c:	f7fa ffa6 	bl	800615c <memp_malloc>
 800b210:	6138      	str	r0, [r7, #16]
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d104      	bne.n	800b222 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b218:	68b8      	ldr	r0, [r7, #8]
 800b21a:	f7fb fe85 	bl	8006f28 <pbuf_free>
    return NULL;
 800b21e:	2300      	movs	r3, #0
 800b220:	e061      	b.n	800b2e6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b228:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	2200      	movs	r2, #0
 800b22e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	891a      	ldrh	r2, [r3, #8]
 800b23a:	7dfb      	ldrb	r3, [r7, #23]
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	429a      	cmp	r2, r3
 800b240:	d205      	bcs.n	800b24e <tcp_create_segment+0x86>
 800b242:	4b2b      	ldr	r3, [pc, #172]	; (800b2f0 <tcp_create_segment+0x128>)
 800b244:	22b0      	movs	r2, #176	; 0xb0
 800b246:	492e      	ldr	r1, [pc, #184]	; (800b300 <tcp_create_segment+0x138>)
 800b248:	482b      	ldr	r0, [pc, #172]	; (800b2f8 <tcp_create_segment+0x130>)
 800b24a:	f004 f8fb 	bl	800f444 <iprintf>
  seg->len = p->tot_len - optlen;
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	891a      	ldrh	r2, [r3, #8]
 800b252:	7dfb      	ldrb	r3, [r7, #23]
 800b254:	b29b      	uxth	r3, r3
 800b256:	1ad3      	subs	r3, r2, r3
 800b258:	b29a      	uxth	r2, r3
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b25e:	2114      	movs	r1, #20
 800b260:	68b8      	ldr	r0, [r7, #8]
 800b262:	f7fb fdcb 	bl	8006dfc <pbuf_add_header>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d004      	beq.n	800b276 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b26c:	6938      	ldr	r0, [r7, #16]
 800b26e:	f7fd f8ce 	bl	800840e <tcp_seg_free>
    return NULL;
 800b272:	2300      	movs	r3, #0
 800b274:	e037      	b.n	800b2e6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	8ada      	ldrh	r2, [r3, #22]
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	68dc      	ldr	r4, [r3, #12]
 800b288:	4610      	mov	r0, r2
 800b28a:	f7fa faef 	bl	800586c <lwip_htons>
 800b28e:	4603      	mov	r3, r0
 800b290:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	8b1a      	ldrh	r2, [r3, #24]
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	68dc      	ldr	r4, [r3, #12]
 800b29a:	4610      	mov	r0, r2
 800b29c:	f7fa fae6 	bl	800586c <lwip_htons>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	68dc      	ldr	r4, [r3, #12]
 800b2a8:	6838      	ldr	r0, [r7, #0]
 800b2aa:	f7fa faf4 	bl	8005896 <lwip_htonl>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b2b2:	7dfb      	ldrb	r3, [r7, #23]
 800b2b4:	089b      	lsrs	r3, r3, #2
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	3305      	adds	r3, #5
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	031b      	lsls	r3, r3, #12
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	79fb      	ldrb	r3, [r7, #7]
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	68dc      	ldr	r4, [r3, #12]
 800b2ce:	4610      	mov	r0, r2
 800b2d0:	f7fa facc 	bl	800586c <lwip_htons>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	749a      	strb	r2, [r3, #18]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	74da      	strb	r2, [r3, #19]
  return seg;
 800b2e4:	693b      	ldr	r3, [r7, #16]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	371c      	adds	r7, #28
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd90      	pop	{r4, r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	08011cc4 	.word	0x08011cc4
 800b2f4:	08011cf8 	.word	0x08011cf8
 800b2f8:	08011d18 	.word	0x08011d18
 800b2fc:	08011d40 	.word	0x08011d40
 800b300:	08011d64 	.word	0x08011d64

0800b304 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b304:	b590      	push	{r4, r7, lr}
 800b306:	b08b      	sub	sp, #44	; 0x2c
 800b308:	af02      	add	r7, sp, #8
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	460b      	mov	r3, r1
 800b30e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b310:	2300      	movs	r3, #0
 800b312:	61fb      	str	r3, [r7, #28]
 800b314:	2300      	movs	r3, #0
 800b316:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b318:	2300      	movs	r3, #0
 800b31a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d106      	bne.n	800b330 <tcp_split_unsent_seg+0x2c>
 800b322:	4b95      	ldr	r3, [pc, #596]	; (800b578 <tcp_split_unsent_seg+0x274>)
 800b324:	f240 324b 	movw	r2, #843	; 0x34b
 800b328:	4994      	ldr	r1, [pc, #592]	; (800b57c <tcp_split_unsent_seg+0x278>)
 800b32a:	4895      	ldr	r0, [pc, #596]	; (800b580 <tcp_split_unsent_seg+0x27c>)
 800b32c:	f004 f88a 	bl	800f444 <iprintf>

  useg = pcb->unsent;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b334:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d102      	bne.n	800b342 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b33c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b340:	e116      	b.n	800b570 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b342:	887b      	ldrh	r3, [r7, #2]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d109      	bne.n	800b35c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b348:	4b8b      	ldr	r3, [pc, #556]	; (800b578 <tcp_split_unsent_seg+0x274>)
 800b34a:	f240 3253 	movw	r2, #851	; 0x353
 800b34e:	498d      	ldr	r1, [pc, #564]	; (800b584 <tcp_split_unsent_seg+0x280>)
 800b350:	488b      	ldr	r0, [pc, #556]	; (800b580 <tcp_split_unsent_seg+0x27c>)
 800b352:	f004 f877 	bl	800f444 <iprintf>
    return ERR_VAL;
 800b356:	f06f 0305 	mvn.w	r3, #5
 800b35a:	e109      	b.n	800b570 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	891b      	ldrh	r3, [r3, #8]
 800b360:	887a      	ldrh	r2, [r7, #2]
 800b362:	429a      	cmp	r2, r3
 800b364:	d301      	bcc.n	800b36a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b366:	2300      	movs	r3, #0
 800b368:	e102      	b.n	800b570 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b36e:	887a      	ldrh	r2, [r7, #2]
 800b370:	429a      	cmp	r2, r3
 800b372:	d906      	bls.n	800b382 <tcp_split_unsent_seg+0x7e>
 800b374:	4b80      	ldr	r3, [pc, #512]	; (800b578 <tcp_split_unsent_seg+0x274>)
 800b376:	f240 325b 	movw	r2, #859	; 0x35b
 800b37a:	4983      	ldr	r1, [pc, #524]	; (800b588 <tcp_split_unsent_seg+0x284>)
 800b37c:	4880      	ldr	r0, [pc, #512]	; (800b580 <tcp_split_unsent_seg+0x27c>)
 800b37e:	f004 f861 	bl	800f444 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	891b      	ldrh	r3, [r3, #8]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d106      	bne.n	800b398 <tcp_split_unsent_seg+0x94>
 800b38a:	4b7b      	ldr	r3, [pc, #492]	; (800b578 <tcp_split_unsent_seg+0x274>)
 800b38c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b390:	497e      	ldr	r1, [pc, #504]	; (800b58c <tcp_split_unsent_seg+0x288>)
 800b392:	487b      	ldr	r0, [pc, #492]	; (800b580 <tcp_split_unsent_seg+0x27c>)
 800b394:	f004 f856 	bl	800f444 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	7a9b      	ldrb	r3, [r3, #10]
 800b39c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	f003 0304 	and.w	r3, r3, #4
 800b3a8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	891a      	ldrh	r2, [r3, #8]
 800b3ae:	887b      	ldrh	r3, [r7, #2]
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b3b4:	7bbb      	ldrb	r3, [r7, #14]
 800b3b6:	b29a      	uxth	r2, r3
 800b3b8:	89bb      	ldrh	r3, [r7, #12]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	2036      	movs	r0, #54	; 0x36
 800b3c6:	f7fb facb 	bl	8006960 <pbuf_alloc>
 800b3ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f000 80b7 	beq.w	800b542 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	891a      	ldrh	r2, [r3, #8]
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	891b      	ldrh	r3, [r3, #8]
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	b29a      	uxth	r2, r3
 800b3e2:	887b      	ldrh	r3, [r7, #2]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	6858      	ldr	r0, [r3, #4]
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	685a      	ldr	r2, [r3, #4]
 800b3f0:	7bbb      	ldrb	r3, [r7, #14]
 800b3f2:	18d1      	adds	r1, r2, r3
 800b3f4:	897b      	ldrh	r3, [r7, #10]
 800b3f6:	89ba      	ldrh	r2, [r7, #12]
 800b3f8:	f7fb ff80 	bl	80072fc <pbuf_copy_partial>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	461a      	mov	r2, r3
 800b400:	89bb      	ldrh	r3, [r7, #12]
 800b402:	4293      	cmp	r3, r2
 800b404:	f040 809f 	bne.w	800b546 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	899b      	ldrh	r3, [r3, #12]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	4618      	mov	r0, r3
 800b412:	f7fa fa2b 	bl	800586c <lwip_htons>
 800b416:	4603      	mov	r3, r0
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b41e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b420:	2300      	movs	r3, #0
 800b422:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b424:	7efb      	ldrb	r3, [r7, #27]
 800b426:	f003 0308 	and.w	r3, r3, #8
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d007      	beq.n	800b43e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b42e:	7efb      	ldrb	r3, [r7, #27]
 800b430:	f023 0308 	bic.w	r3, r3, #8
 800b434:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b436:	7ebb      	ldrb	r3, [r7, #26]
 800b438:	f043 0308 	orr.w	r3, r3, #8
 800b43c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b43e:	7efb      	ldrb	r3, [r7, #27]
 800b440:	f003 0301 	and.w	r3, r3, #1
 800b444:	2b00      	cmp	r3, #0
 800b446:	d007      	beq.n	800b458 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b448:	7efb      	ldrb	r3, [r7, #27]
 800b44a:	f023 0301 	bic.w	r3, r3, #1
 800b44e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b450:	7ebb      	ldrb	r3, [r7, #26]
 800b452:	f043 0301 	orr.w	r3, r3, #1
 800b456:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	4618      	mov	r0, r3
 800b460:	f7fa fa19 	bl	8005896 <lwip_htonl>
 800b464:	4602      	mov	r2, r0
 800b466:	887b      	ldrh	r3, [r7, #2]
 800b468:	18d1      	adds	r1, r2, r3
 800b46a:	7eba      	ldrb	r2, [r7, #26]
 800b46c:	7bfb      	ldrb	r3, [r7, #15]
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	460b      	mov	r3, r1
 800b472:	6939      	ldr	r1, [r7, #16]
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f7ff fea7 	bl	800b1c8 <tcp_create_segment>
 800b47a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d063      	beq.n	800b54a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	4618      	mov	r0, r3
 800b488:	f7fb fdd6 	bl	8007038 <pbuf_clen>
 800b48c:	4603      	mov	r3, r0
 800b48e:	461a      	mov	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b496:	1a9b      	subs	r3, r3, r2
 800b498:	b29a      	uxth	r2, r3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	6858      	ldr	r0, [r3, #4]
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	891a      	ldrh	r2, [r3, #8]
 800b4aa:	89bb      	ldrh	r3, [r7, #12]
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	f7fb fbb3 	bl	8006c1c <pbuf_realloc>
  useg->len -= remainder;
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	891a      	ldrh	r2, [r3, #8]
 800b4ba:	89bb      	ldrh	r3, [r7, #12]
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	899b      	ldrh	r3, [r3, #12]
 800b4ca:	b29c      	uxth	r4, r3
 800b4cc:	7efb      	ldrb	r3, [r7, #27]
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fa f9cb 	bl	800586c <lwip_htons>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	461a      	mov	r2, r3
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	4322      	orrs	r2, r4
 800b4e0:	b292      	uxth	r2, r2
 800b4e2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7fb fda5 	bl	8007038 <pbuf_clen>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b4f8:	4413      	add	r3, r2
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	4618      	mov	r0, r3
 800b508:	f7fb fd96 	bl	8007038 <pbuf_clen>
 800b50c:	4603      	mov	r3, r0
 800b50e:	461a      	mov	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b516:	4413      	add	r3, r2
 800b518:	b29a      	uxth	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	69fa      	ldr	r2, [r7, #28]
 800b52c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d103      	bne.n	800b53e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b53e:	2300      	movs	r3, #0
 800b540:	e016      	b.n	800b570 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b542:	bf00      	nop
 800b544:	e002      	b.n	800b54c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b546:	bf00      	nop
 800b548:	e000      	b.n	800b54c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b54a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d006      	beq.n	800b560 <tcp_split_unsent_seg+0x25c>
 800b552:	4b09      	ldr	r3, [pc, #36]	; (800b578 <tcp_split_unsent_seg+0x274>)
 800b554:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b558:	490d      	ldr	r1, [pc, #52]	; (800b590 <tcp_split_unsent_seg+0x28c>)
 800b55a:	4809      	ldr	r0, [pc, #36]	; (800b580 <tcp_split_unsent_seg+0x27c>)
 800b55c:	f003 ff72 	bl	800f444 <iprintf>
  if (p != NULL) {
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d002      	beq.n	800b56c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b566:	6938      	ldr	r0, [r7, #16]
 800b568:	f7fb fcde 	bl	8006f28 <pbuf_free>
  }

  return ERR_MEM;
 800b56c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b570:	4618      	mov	r0, r3
 800b572:	3724      	adds	r7, #36	; 0x24
 800b574:	46bd      	mov	sp, r7
 800b576:	bd90      	pop	{r4, r7, pc}
 800b578:	08011cc4 	.word	0x08011cc4
 800b57c:	08012058 	.word	0x08012058
 800b580:	08011d18 	.word	0x08011d18
 800b584:	0801207c 	.word	0x0801207c
 800b588:	080120a0 	.word	0x080120a0
 800b58c:	080120b0 	.word	0x080120b0
 800b590:	080120c0 	.word	0x080120c0

0800b594 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b594:	b590      	push	{r4, r7, lr}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d106      	bne.n	800b5b0 <tcp_send_fin+0x1c>
 800b5a2:	4b21      	ldr	r3, [pc, #132]	; (800b628 <tcp_send_fin+0x94>)
 800b5a4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b5a8:	4920      	ldr	r1, [pc, #128]	; (800b62c <tcp_send_fin+0x98>)
 800b5aa:	4821      	ldr	r0, [pc, #132]	; (800b630 <tcp_send_fin+0x9c>)
 800b5ac:	f003 ff4a 	bl	800f444 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d02e      	beq.n	800b616 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5bc:	60fb      	str	r3, [r7, #12]
 800b5be:	e002      	b.n	800b5c6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1f8      	bne.n	800b5c0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	899b      	ldrh	r3, [r3, #12]
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fa f948 	bl	800586c <lwip_htons>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	f003 0307 	and.w	r3, r3, #7
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d116      	bne.n	800b616 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	899b      	ldrh	r3, [r3, #12]
 800b5ee:	b29c      	uxth	r4, r3
 800b5f0:	2001      	movs	r0, #1
 800b5f2:	f7fa f93b 	bl	800586c <lwip_htons>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	4322      	orrs	r2, r4
 800b600:	b292      	uxth	r2, r2
 800b602:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	8b5b      	ldrh	r3, [r3, #26]
 800b608:	f043 0320 	orr.w	r3, r3, #32
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b612:	2300      	movs	r3, #0
 800b614:	e004      	b.n	800b620 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b616:	2101      	movs	r1, #1
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 f80b 	bl	800b634 <tcp_enqueue_flags>
 800b61e:	4603      	mov	r3, r0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	bd90      	pop	{r4, r7, pc}
 800b628:	08011cc4 	.word	0x08011cc4
 800b62c:	080120cc 	.word	0x080120cc
 800b630:	08011d18 	.word	0x08011d18

0800b634 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b08a      	sub	sp, #40	; 0x28
 800b638:	af02      	add	r7, sp, #8
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	460b      	mov	r3, r1
 800b63e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b640:	2300      	movs	r3, #0
 800b642:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b644:	2300      	movs	r3, #0
 800b646:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b648:	78fb      	ldrb	r3, [r7, #3]
 800b64a:	f003 0303 	and.w	r3, r3, #3
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d106      	bne.n	800b660 <tcp_enqueue_flags+0x2c>
 800b652:	4b67      	ldr	r3, [pc, #412]	; (800b7f0 <tcp_enqueue_flags+0x1bc>)
 800b654:	f240 4211 	movw	r2, #1041	; 0x411
 800b658:	4966      	ldr	r1, [pc, #408]	; (800b7f4 <tcp_enqueue_flags+0x1c0>)
 800b65a:	4867      	ldr	r0, [pc, #412]	; (800b7f8 <tcp_enqueue_flags+0x1c4>)
 800b65c:	f003 fef2 	bl	800f444 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d106      	bne.n	800b674 <tcp_enqueue_flags+0x40>
 800b666:	4b62      	ldr	r3, [pc, #392]	; (800b7f0 <tcp_enqueue_flags+0x1bc>)
 800b668:	f240 4213 	movw	r2, #1043	; 0x413
 800b66c:	4963      	ldr	r1, [pc, #396]	; (800b7fc <tcp_enqueue_flags+0x1c8>)
 800b66e:	4862      	ldr	r0, [pc, #392]	; (800b7f8 <tcp_enqueue_flags+0x1c4>)
 800b670:	f003 fee8 	bl	800f444 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b674:	78fb      	ldrb	r3, [r7, #3]
 800b676:	f003 0302 	and.w	r3, r3, #2
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b67e:	2301      	movs	r3, #1
 800b680:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b682:	7ffb      	ldrb	r3, [r7, #31]
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	b2db      	uxtb	r3, r3
 800b688:	f003 0304 	and.w	r3, r3, #4
 800b68c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b68e:	7dfb      	ldrb	r3, [r7, #23]
 800b690:	b29b      	uxth	r3, r3
 800b692:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b696:	4619      	mov	r1, r3
 800b698:	2036      	movs	r0, #54	; 0x36
 800b69a:	f7fb f961 	bl	8006960 <pbuf_alloc>
 800b69e:	6138      	str	r0, [r7, #16]
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d109      	bne.n	800b6ba <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	8b5b      	ldrh	r3, [r3, #26]
 800b6aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b6b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6b8:	e095      	b.n	800b7e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	895a      	ldrh	r2, [r3, #10]
 800b6be:	7dfb      	ldrb	r3, [r7, #23]
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d206      	bcs.n	800b6d4 <tcp_enqueue_flags+0xa0>
 800b6c6:	4b4a      	ldr	r3, [pc, #296]	; (800b7f0 <tcp_enqueue_flags+0x1bc>)
 800b6c8:	f240 4239 	movw	r2, #1081	; 0x439
 800b6cc:	494c      	ldr	r1, [pc, #304]	; (800b800 <tcp_enqueue_flags+0x1cc>)
 800b6ce:	484a      	ldr	r0, [pc, #296]	; (800b7f8 <tcp_enqueue_flags+0x1c4>)
 800b6d0:	f003 feb8 	bl	800f444 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b6d8:	78fa      	ldrb	r2, [r7, #3]
 800b6da:	7ffb      	ldrb	r3, [r7, #31]
 800b6dc:	9300      	str	r3, [sp, #0]
 800b6de:	460b      	mov	r3, r1
 800b6e0:	6939      	ldr	r1, [r7, #16]
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f7ff fd70 	bl	800b1c8 <tcp_create_segment>
 800b6e8:	60f8      	str	r0, [r7, #12]
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d109      	bne.n	800b704 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	8b5b      	ldrh	r3, [r3, #26]
 800b6f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b6fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b702:	e070      	b.n	800b7e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	f003 0303 	and.w	r3, r3, #3
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d006      	beq.n	800b71e <tcp_enqueue_flags+0xea>
 800b710:	4b37      	ldr	r3, [pc, #220]	; (800b7f0 <tcp_enqueue_flags+0x1bc>)
 800b712:	f240 4242 	movw	r2, #1090	; 0x442
 800b716:	493b      	ldr	r1, [pc, #236]	; (800b804 <tcp_enqueue_flags+0x1d0>)
 800b718:	4837      	ldr	r0, [pc, #220]	; (800b7f8 <tcp_enqueue_flags+0x1c4>)
 800b71a:	f003 fe93 	bl	800f444 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	891b      	ldrh	r3, [r3, #8]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d006      	beq.n	800b734 <tcp_enqueue_flags+0x100>
 800b726:	4b32      	ldr	r3, [pc, #200]	; (800b7f0 <tcp_enqueue_flags+0x1bc>)
 800b728:	f240 4243 	movw	r2, #1091	; 0x443
 800b72c:	4936      	ldr	r1, [pc, #216]	; (800b808 <tcp_enqueue_flags+0x1d4>)
 800b72e:	4832      	ldr	r0, [pc, #200]	; (800b7f8 <tcp_enqueue_flags+0x1c4>)
 800b730:	f003 fe88 	bl	800f444 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d103      	bne.n	800b744 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	66da      	str	r2, [r3, #108]	; 0x6c
 800b742:	e00d      	b.n	800b760 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b748:	61bb      	str	r3, [r7, #24]
 800b74a:	e002      	b.n	800b752 <tcp_enqueue_flags+0x11e>
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	61bb      	str	r3, [r7, #24]
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1f8      	bne.n	800b74c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b768:	78fb      	ldrb	r3, [r7, #3]
 800b76a:	f003 0302 	and.w	r3, r3, #2
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d104      	bne.n	800b77c <tcp_enqueue_flags+0x148>
 800b772:	78fb      	ldrb	r3, [r7, #3]
 800b774:	f003 0301 	and.w	r3, r3, #1
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d004      	beq.n	800b786 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b780:	1c5a      	adds	r2, r3, #1
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b786:	78fb      	ldrb	r3, [r7, #3]
 800b788:	f003 0301 	and.w	r3, r3, #1
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d006      	beq.n	800b79e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	8b5b      	ldrh	r3, [r3, #26]
 800b794:	f043 0320 	orr.w	r3, r3, #32
 800b798:	b29a      	uxth	r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fb fc48 	bl	8007038 <pbuf_clen>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b7b2:	4413      	add	r3, r2
 800b7b4:	b29a      	uxth	r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00e      	beq.n	800b7e4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10a      	bne.n	800b7e4 <tcp_enqueue_flags+0x1b0>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d106      	bne.n	800b7e4 <tcp_enqueue_flags+0x1b0>
 800b7d6:	4b06      	ldr	r3, [pc, #24]	; (800b7f0 <tcp_enqueue_flags+0x1bc>)
 800b7d8:	f240 4265 	movw	r2, #1125	; 0x465
 800b7dc:	490b      	ldr	r1, [pc, #44]	; (800b80c <tcp_enqueue_flags+0x1d8>)
 800b7de:	4806      	ldr	r0, [pc, #24]	; (800b7f8 <tcp_enqueue_flags+0x1c4>)
 800b7e0:	f003 fe30 	bl	800f444 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3720      	adds	r7, #32
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	08011cc4 	.word	0x08011cc4
 800b7f4:	080120e8 	.word	0x080120e8
 800b7f8:	08011d18 	.word	0x08011d18
 800b7fc:	08012140 	.word	0x08012140
 800b800:	08012160 	.word	0x08012160
 800b804:	0801219c 	.word	0x0801219c
 800b808:	080121b4 	.word	0x080121b4
 800b80c:	080121e0 	.word	0x080121e0

0800b810 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b810:	b5b0      	push	{r4, r5, r7, lr}
 800b812:	b08a      	sub	sp, #40	; 0x28
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d106      	bne.n	800b82c <tcp_output+0x1c>
 800b81e:	4b8a      	ldr	r3, [pc, #552]	; (800ba48 <tcp_output+0x238>)
 800b820:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b824:	4989      	ldr	r1, [pc, #548]	; (800ba4c <tcp_output+0x23c>)
 800b826:	488a      	ldr	r0, [pc, #552]	; (800ba50 <tcp_output+0x240>)
 800b828:	f003 fe0c 	bl	800f444 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	7d1b      	ldrb	r3, [r3, #20]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d106      	bne.n	800b842 <tcp_output+0x32>
 800b834:	4b84      	ldr	r3, [pc, #528]	; (800ba48 <tcp_output+0x238>)
 800b836:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b83a:	4986      	ldr	r1, [pc, #536]	; (800ba54 <tcp_output+0x244>)
 800b83c:	4884      	ldr	r0, [pc, #528]	; (800ba50 <tcp_output+0x240>)
 800b83e:	f003 fe01 	bl	800f444 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b842:	4b85      	ldr	r3, [pc, #532]	; (800ba58 <tcp_output+0x248>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d101      	bne.n	800b850 <tcp_output+0x40>
    return ERR_OK;
 800b84c:	2300      	movs	r3, #0
 800b84e:	e1ce      	b.n	800bbee <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b85c:	4293      	cmp	r3, r2
 800b85e:	bf28      	it	cs
 800b860:	4613      	movcs	r3, r2
 800b862:	b29b      	uxth	r3, r3
 800b864:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b86a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10b      	bne.n	800b88a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	8b5b      	ldrh	r3, [r3, #26]
 800b876:	f003 0302 	and.w	r3, r3, #2
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f000 81aa 	beq.w	800bbd4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 fdcb 	bl	800c41c <tcp_send_empty_ack>
 800b886:	4603      	mov	r3, r0
 800b888:	e1b1      	b.n	800bbee <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b88a:	6879      	ldr	r1, [r7, #4]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	3304      	adds	r3, #4
 800b890:	461a      	mov	r2, r3
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7ff fc7c 	bl	800b190 <tcp_route>
 800b898:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d102      	bne.n	800b8a6 <tcp_output+0x96>
    return ERR_RTE;
 800b8a0:	f06f 0303 	mvn.w	r3, #3
 800b8a4:	e1a3      	b.n	800bbee <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d003      	beq.n	800b8b4 <tcp_output+0xa4>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d111      	bne.n	800b8d8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d002      	beq.n	800b8c0 <tcp_output+0xb0>
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	3304      	adds	r3, #4
 800b8be:	e000      	b.n	800b8c2 <tcp_output+0xb2>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d102      	bne.n	800b8d0 <tcp_output+0xc0>
      return ERR_RTE;
 800b8ca:	f06f 0303 	mvn.w	r3, #3
 800b8ce:	e18e      	b.n	800bbee <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7f9 ffd9 	bl	8005896 <lwip_htonl>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ee:	8912      	ldrh	r2, [r2, #8]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	69ba      	ldr	r2, [r7, #24]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d227      	bcs.n	800b948 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b8fe:	461a      	mov	r2, r3
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	4293      	cmp	r3, r2
 800b904:	d114      	bne.n	800b930 <tcp_output+0x120>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d110      	bne.n	800b930 <tcp_output+0x120>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10b      	bne.n	800b930 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	8b5b      	ldrh	r3, [r3, #26]
 800b934:	f003 0302 	and.w	r3, r3, #2
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f000 814d 	beq.w	800bbd8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f000 fd6c 	bl	800c41c <tcp_send_empty_ack>
 800b944:	4603      	mov	r3, r0
 800b946:	e152      	b.n	800bbee <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b954:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b956:	6a3b      	ldr	r3, [r7, #32]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f000 811c 	beq.w	800bb96 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b95e:	e002      	b.n	800b966 <tcp_output+0x156>
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	623b      	str	r3, [r7, #32]
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d1f8      	bne.n	800b960 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b96e:	e112      	b.n	800bb96 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	899b      	ldrh	r3, [r3, #12]
 800b976:	b29b      	uxth	r3, r3
 800b978:	4618      	mov	r0, r3
 800b97a:	f7f9 ff77 	bl	800586c <lwip_htons>
 800b97e:	4603      	mov	r3, r0
 800b980:	b2db      	uxtb	r3, r3
 800b982:	f003 0304 	and.w	r3, r3, #4
 800b986:	2b00      	cmp	r3, #0
 800b988:	d006      	beq.n	800b998 <tcp_output+0x188>
 800b98a:	4b2f      	ldr	r3, [pc, #188]	; (800ba48 <tcp_output+0x238>)
 800b98c:	f240 5236 	movw	r2, #1334	; 0x536
 800b990:	4932      	ldr	r1, [pc, #200]	; (800ba5c <tcp_output+0x24c>)
 800b992:	482f      	ldr	r0, [pc, #188]	; (800ba50 <tcp_output+0x240>)
 800b994:	f003 fd56 	bl	800f444 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d01f      	beq.n	800b9e0 <tcp_output+0x1d0>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	8b5b      	ldrh	r3, [r3, #26]
 800b9a4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d119      	bne.n	800b9e0 <tcp_output+0x1d0>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00b      	beq.n	800b9cc <tcp_output+0x1bc>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d110      	bne.n	800b9e0 <tcp_output+0x1d0>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9c2:	891a      	ldrh	r2, [r3, #8]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d209      	bcs.n	800b9e0 <tcp_output+0x1d0>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d004      	beq.n	800b9e0 <tcp_output+0x1d0>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9dc:	2b08      	cmp	r3, #8
 800b9de:	d901      	bls.n	800b9e4 <tcp_output+0x1d4>
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	e000      	b.n	800b9e6 <tcp_output+0x1d6>
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d106      	bne.n	800b9f8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	8b5b      	ldrh	r3, [r3, #26]
 800b9ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f000 80e4 	beq.w	800bbc0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	7d1b      	ldrb	r3, [r3, #20]
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d00d      	beq.n	800ba1c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ba00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	899b      	ldrh	r3, [r3, #12]
 800ba06:	b29c      	uxth	r4, r3
 800ba08:	2010      	movs	r0, #16
 800ba0a:	f7f9 ff2f 	bl	800586c <lwip_htons>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	461a      	mov	r2, r3
 800ba12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	4322      	orrs	r2, r4
 800ba18:	b292      	uxth	r2, r2
 800ba1a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ba1c:	697a      	ldr	r2, [r7, #20]
 800ba1e:	6879      	ldr	r1, [r7, #4]
 800ba20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba22:	f000 f909 	bl	800bc38 <tcp_output_segment>
 800ba26:	4603      	mov	r3, r0
 800ba28:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ba2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d016      	beq.n	800ba60 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	8b5b      	ldrh	r3, [r3, #26]
 800ba36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba3a:	b29a      	uxth	r2, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	835a      	strh	r2, [r3, #26]
      return err;
 800ba40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba44:	e0d3      	b.n	800bbee <tcp_output+0x3de>
 800ba46:	bf00      	nop
 800ba48:	08011cc4 	.word	0x08011cc4
 800ba4c:	08012208 	.word	0x08012208
 800ba50:	08011d18 	.word	0x08011d18
 800ba54:	08012220 	.word	0x08012220
 800ba58:	200087fc 	.word	0x200087fc
 800ba5c:	08012248 	.word	0x08012248
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ba60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	7d1b      	ldrb	r3, [r3, #20]
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d006      	beq.n	800ba7e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	8b5b      	ldrh	r3, [r3, #26]
 800ba74:	f023 0303 	bic.w	r3, r3, #3
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7f9 ff06 	bl	8005896 <lwip_htonl>
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8e:	891b      	ldrh	r3, [r3, #8]
 800ba90:	461d      	mov	r5, r3
 800ba92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	899b      	ldrh	r3, [r3, #12]
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7f9 fee6 	bl	800586c <lwip_htons>
 800baa0:	4603      	mov	r3, r0
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	f003 0303 	and.w	r3, r3, #3
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d001      	beq.n	800bab0 <tcp_output+0x2a0>
 800baac:	2301      	movs	r3, #1
 800baae:	e000      	b.n	800bab2 <tcp_output+0x2a2>
 800bab0:	2300      	movs	r3, #0
 800bab2:	442b      	add	r3, r5
 800bab4:	4423      	add	r3, r4
 800bab6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	da02      	bge.n	800baca <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800baca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bacc:	891b      	ldrh	r3, [r3, #8]
 800bace:	461c      	mov	r4, r3
 800bad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	899b      	ldrh	r3, [r3, #12]
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	4618      	mov	r0, r3
 800bada:	f7f9 fec7 	bl	800586c <lwip_htons>
 800bade:	4603      	mov	r3, r0
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	f003 0303 	and.w	r3, r3, #3
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <tcp_output+0x2de>
 800baea:	2301      	movs	r3, #1
 800baec:	e000      	b.n	800baf0 <tcp_output+0x2e0>
 800baee:	2300      	movs	r3, #0
 800baf0:	4423      	add	r3, r4
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d049      	beq.n	800bb8a <tcp_output+0x37a>
      seg->next = NULL;
 800baf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf8:	2200      	movs	r2, #0
 800bafa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d105      	bne.n	800bb10 <tcp_output+0x300>
        pcb->unacked = seg;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb08:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0c:	623b      	str	r3, [r7, #32]
 800bb0e:	e03f      	b.n	800bb90 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7f9 febd 	bl	8005896 <lwip_htonl>
 800bb1c:	4604      	mov	r4, r0
 800bb1e:	6a3b      	ldr	r3, [r7, #32]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7f9 feb6 	bl	8005896 <lwip_htonl>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	1ae3      	subs	r3, r4, r3
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	da24      	bge.n	800bb7c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	3370      	adds	r3, #112	; 0x70
 800bb36:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bb38:	e002      	b.n	800bb40 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d011      	beq.n	800bb6c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7f9 fea0 	bl	8005896 <lwip_htonl>
 800bb56:	4604      	mov	r4, r0
 800bb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7f9 fe99 	bl	8005896 <lwip_htonl>
 800bb64:	4603      	mov	r3, r0
 800bb66:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	dbe6      	blt.n	800bb3a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb72:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb78:	601a      	str	r2, [r3, #0]
 800bb7a:	e009      	b.n	800bb90 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bb7c:	6a3b      	ldr	r3, [r7, #32]
 800bb7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb80:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bb82:	6a3b      	ldr	r3, [r7, #32]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	623b      	str	r3, [r7, #32]
 800bb88:	e002      	b.n	800bb90 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bb8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb8c:	f7fc fc3f 	bl	800840e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb94:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800bb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d012      	beq.n	800bbc2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7f9 fe77 	bl	8005896 <lwip_htonl>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbb2:	8912      	ldrh	r2, [r2, #8]
 800bbb4:	4413      	add	r3, r2
  while (seg != NULL &&
 800bbb6:	69ba      	ldr	r2, [r7, #24]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	f4bf aed9 	bcs.w	800b970 <tcp_output+0x160>
 800bbbe:	e000      	b.n	800bbc2 <tcp_output+0x3b2>
      break;
 800bbc0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d108      	bne.n	800bbdc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800bbd2:	e004      	b.n	800bbde <tcp_output+0x3ce>
    goto output_done;
 800bbd4:	bf00      	nop
 800bbd6:	e002      	b.n	800bbde <tcp_output+0x3ce>
    goto output_done;
 800bbd8:	bf00      	nop
 800bbda:	e000      	b.n	800bbde <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bbdc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	8b5b      	ldrh	r3, [r3, #26]
 800bbe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3728      	adds	r7, #40	; 0x28
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bdb0      	pop	{r4, r5, r7, pc}
 800bbf6:	bf00      	nop

0800bbf8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d106      	bne.n	800bc14 <tcp_output_segment_busy+0x1c>
 800bc06:	4b09      	ldr	r3, [pc, #36]	; (800bc2c <tcp_output_segment_busy+0x34>)
 800bc08:	f240 529a 	movw	r2, #1434	; 0x59a
 800bc0c:	4908      	ldr	r1, [pc, #32]	; (800bc30 <tcp_output_segment_busy+0x38>)
 800bc0e:	4809      	ldr	r0, [pc, #36]	; (800bc34 <tcp_output_segment_busy+0x3c>)
 800bc10:	f003 fc18 	bl	800f444 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	7b9b      	ldrb	r3, [r3, #14]
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d001      	beq.n	800bc22 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e000      	b.n	800bc24 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bc22:	2300      	movs	r3, #0
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	08011cc4 	.word	0x08011cc4
 800bc30:	08012260 	.word	0x08012260
 800bc34:	08011d18 	.word	0x08011d18

0800bc38 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bc38:	b5b0      	push	{r4, r5, r7, lr}
 800bc3a:	b08c      	sub	sp, #48	; 0x30
 800bc3c:	af04      	add	r7, sp, #16
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d106      	bne.n	800bc58 <tcp_output_segment+0x20>
 800bc4a:	4b63      	ldr	r3, [pc, #396]	; (800bdd8 <tcp_output_segment+0x1a0>)
 800bc4c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bc50:	4962      	ldr	r1, [pc, #392]	; (800bddc <tcp_output_segment+0x1a4>)
 800bc52:	4863      	ldr	r0, [pc, #396]	; (800bde0 <tcp_output_segment+0x1a8>)
 800bc54:	f003 fbf6 	bl	800f444 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d106      	bne.n	800bc6c <tcp_output_segment+0x34>
 800bc5e:	4b5e      	ldr	r3, [pc, #376]	; (800bdd8 <tcp_output_segment+0x1a0>)
 800bc60:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bc64:	495f      	ldr	r1, [pc, #380]	; (800bde4 <tcp_output_segment+0x1ac>)
 800bc66:	485e      	ldr	r0, [pc, #376]	; (800bde0 <tcp_output_segment+0x1a8>)
 800bc68:	f003 fbec 	bl	800f444 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d106      	bne.n	800bc80 <tcp_output_segment+0x48>
 800bc72:	4b59      	ldr	r3, [pc, #356]	; (800bdd8 <tcp_output_segment+0x1a0>)
 800bc74:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bc78:	495b      	ldr	r1, [pc, #364]	; (800bde8 <tcp_output_segment+0x1b0>)
 800bc7a:	4859      	ldr	r0, [pc, #356]	; (800bde0 <tcp_output_segment+0x1a8>)
 800bc7c:	f003 fbe2 	bl	800f444 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bc80:	68f8      	ldr	r0, [r7, #12]
 800bc82:	f7ff ffb9 	bl	800bbf8 <tcp_output_segment_busy>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d001      	beq.n	800bc90 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	e09f      	b.n	800bdd0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	68dc      	ldr	r4, [r3, #12]
 800bc98:	4610      	mov	r0, r2
 800bc9a:	f7f9 fdfc 	bl	8005896 <lwip_htonl>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	68dc      	ldr	r4, [r3, #12]
 800bcaa:	4610      	mov	r0, r2
 800bcac:	f7f9 fdde 	bl	800586c <lwip_htons>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb8:	68ba      	ldr	r2, [r7, #8]
 800bcba:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bcbc:	441a      	add	r2, r3
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	3314      	adds	r3, #20
 800bcc8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	7a9b      	ldrb	r3, [r3, #10]
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d015      	beq.n	800bd02 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	3304      	adds	r3, #4
 800bcda:	461a      	mov	r2, r3
 800bcdc:	6879      	ldr	r1, [r7, #4]
 800bcde:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bce2:	f7fc fe8b 	bl	80089fc <tcp_eff_send_mss_netif>
 800bce6:	4603      	mov	r3, r0
 800bce8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bcea:	8b7b      	ldrh	r3, [r7, #26]
 800bcec:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7f9 fdd0 	bl	8005896 <lwip_htonl>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	3304      	adds	r3, #4
 800bd00:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	da02      	bge.n	800bd12 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d10c      	bne.n	800bd34 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bd1a:	4b34      	ldr	r3, [pc, #208]	; (800bdec <tcp_output_segment+0x1b4>)
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7f9 fdb4 	bl	8005896 <lwip_htonl>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	68da      	ldr	r2, [r3, #12]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	1ad3      	subs	r3, r2, r3
 800bd40:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	8959      	ldrh	r1, [r3, #10]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	8b3a      	ldrh	r2, [r7, #24]
 800bd4e:	1a8a      	subs	r2, r1, r2
 800bd50:	b292      	uxth	r2, r2
 800bd52:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	8919      	ldrh	r1, [r3, #8]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	8b3a      	ldrh	r2, [r7, #24]
 800bd60:	1a8a      	subs	r2, r1, r2
 800bd62:	b292      	uxth	r2, r2
 800bd64:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	68d2      	ldr	r2, [r2, #12]
 800bd6e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	2200      	movs	r2, #0
 800bd76:	741a      	strb	r2, [r3, #16]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	f103 0214 	add.w	r2, r3, #20
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	7a9b      	ldrb	r3, [r3, #10]
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	f003 0304 	and.w	r3, r3, #4
 800bd8e:	4413      	add	r3, r2
 800bd90:	69fa      	ldr	r2, [r7, #28]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d006      	beq.n	800bda4 <tcp_output_segment+0x16c>
 800bd96:	4b10      	ldr	r3, [pc, #64]	; (800bdd8 <tcp_output_segment+0x1a0>)
 800bd98:	f240 621c 	movw	r2, #1564	; 0x61c
 800bd9c:	4914      	ldr	r1, [pc, #80]	; (800bdf0 <tcp_output_segment+0x1b8>)
 800bd9e:	4810      	ldr	r0, [pc, #64]	; (800bde0 <tcp_output_segment+0x1a8>)
 800bda0:	f003 fb50 	bl	800f444 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6858      	ldr	r0, [r3, #4]
 800bda8:	68b9      	ldr	r1, [r7, #8]
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	1d1c      	adds	r4, r3, #4
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	7add      	ldrb	r5, [r3, #11]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	7a9b      	ldrb	r3, [r3, #10]
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	9202      	str	r2, [sp, #8]
 800bdba:	2206      	movs	r2, #6
 800bdbc:	9201      	str	r2, [sp, #4]
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	462b      	mov	r3, r5
 800bdc2:	4622      	mov	r2, r4
 800bdc4:	f002 fa36 	bl	800e234 <ip4_output_if>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bdcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3720      	adds	r7, #32
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bdb0      	pop	{r4, r5, r7, pc}
 800bdd8:	08011cc4 	.word	0x08011cc4
 800bddc:	08012288 	.word	0x08012288
 800bde0:	08011d18 	.word	0x08011d18
 800bde4:	080122a8 	.word	0x080122a8
 800bde8:	080122c8 	.word	0x080122c8
 800bdec:	200087b0 	.word	0x200087b0
 800bdf0:	080122ec 	.word	0x080122ec

0800bdf4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800bdf4:	b5b0      	push	{r4, r5, r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d106      	bne.n	800be10 <tcp_rexmit_rto_prepare+0x1c>
 800be02:	4b31      	ldr	r3, [pc, #196]	; (800bec8 <tcp_rexmit_rto_prepare+0xd4>)
 800be04:	f240 6263 	movw	r2, #1635	; 0x663
 800be08:	4930      	ldr	r1, [pc, #192]	; (800becc <tcp_rexmit_rto_prepare+0xd8>)
 800be0a:	4831      	ldr	r0, [pc, #196]	; (800bed0 <tcp_rexmit_rto_prepare+0xdc>)
 800be0c:	f003 fb1a 	bl	800f444 <iprintf>

  if (pcb->unacked == NULL) {
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be14:	2b00      	cmp	r3, #0
 800be16:	d102      	bne.n	800be1e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800be18:	f06f 0305 	mvn.w	r3, #5
 800be1c:	e050      	b.n	800bec0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be22:	60fb      	str	r3, [r7, #12]
 800be24:	e00b      	b.n	800be3e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f7ff fee6 	bl	800bbf8 <tcp_output_segment_busy>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d002      	beq.n	800be38 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800be32:	f06f 0305 	mvn.w	r3, #5
 800be36:	e043      	b.n	800bec0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	60fb      	str	r3, [r7, #12]
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d1ef      	bne.n	800be26 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800be46:	68f8      	ldr	r0, [r7, #12]
 800be48:	f7ff fed6 	bl	800bbf8 <tcp_output_segment_busy>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d002      	beq.n	800be58 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800be52:	f06f 0305 	mvn.w	r3, #5
 800be56:	e033      	b.n	800bec0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	8b5b      	ldrh	r3, [r3, #26]
 800be72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800be76:	b29a      	uxth	r2, r3
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	4618      	mov	r0, r3
 800be84:	f7f9 fd07 	bl	8005896 <lwip_htonl>
 800be88:	4604      	mov	r4, r0
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	891b      	ldrh	r3, [r3, #8]
 800be8e:	461d      	mov	r5, r3
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	899b      	ldrh	r3, [r3, #12]
 800be96:	b29b      	uxth	r3, r3
 800be98:	4618      	mov	r0, r3
 800be9a:	f7f9 fce7 	bl	800586c <lwip_htons>
 800be9e:	4603      	mov	r3, r0
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	f003 0303 	and.w	r3, r3, #3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d001      	beq.n	800beae <tcp_rexmit_rto_prepare+0xba>
 800beaa:	2301      	movs	r3, #1
 800beac:	e000      	b.n	800beb0 <tcp_rexmit_rto_prepare+0xbc>
 800beae:	2300      	movs	r3, #0
 800beb0:	442b      	add	r3, r5
 800beb2:	18e2      	adds	r2, r4, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bdb0      	pop	{r4, r5, r7, pc}
 800bec8:	08011cc4 	.word	0x08011cc4
 800becc:	08012300 	.word	0x08012300
 800bed0:	08011d18 	.word	0x08011d18

0800bed4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d106      	bne.n	800bef0 <tcp_rexmit_rto_commit+0x1c>
 800bee2:	4b0d      	ldr	r3, [pc, #52]	; (800bf18 <tcp_rexmit_rto_commit+0x44>)
 800bee4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bee8:	490c      	ldr	r1, [pc, #48]	; (800bf1c <tcp_rexmit_rto_commit+0x48>)
 800beea:	480d      	ldr	r0, [pc, #52]	; (800bf20 <tcp_rexmit_rto_commit+0x4c>)
 800beec:	f003 faaa 	bl	800f444 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bef6:	2bff      	cmp	r3, #255	; 0xff
 800bef8:	d007      	beq.n	800bf0a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf00:	3301      	adds	r3, #1
 800bf02:	b2da      	uxtb	r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7ff fc80 	bl	800b810 <tcp_output>
}
 800bf10:	bf00      	nop
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	08011cc4 	.word	0x08011cc4
 800bf1c:	08012324 	.word	0x08012324
 800bf20:	08011d18 	.word	0x08011d18

0800bf24 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d106      	bne.n	800bf40 <tcp_rexmit_rto+0x1c>
 800bf32:	4b0a      	ldr	r3, [pc, #40]	; (800bf5c <tcp_rexmit_rto+0x38>)
 800bf34:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bf38:	4909      	ldr	r1, [pc, #36]	; (800bf60 <tcp_rexmit_rto+0x3c>)
 800bf3a:	480a      	ldr	r0, [pc, #40]	; (800bf64 <tcp_rexmit_rto+0x40>)
 800bf3c:	f003 fa82 	bl	800f444 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f7ff ff57 	bl	800bdf4 <tcp_rexmit_rto_prepare>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d102      	bne.n	800bf52 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f7ff ffc1 	bl	800bed4 <tcp_rexmit_rto_commit>
  }
}
 800bf52:	bf00      	nop
 800bf54:	3708      	adds	r7, #8
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	08011cc4 	.word	0x08011cc4
 800bf60:	08012348 	.word	0x08012348
 800bf64:	08011d18 	.word	0x08011d18

0800bf68 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bf68:	b590      	push	{r4, r7, lr}
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d106      	bne.n	800bf84 <tcp_rexmit+0x1c>
 800bf76:	4b2f      	ldr	r3, [pc, #188]	; (800c034 <tcp_rexmit+0xcc>)
 800bf78:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800bf7c:	492e      	ldr	r1, [pc, #184]	; (800c038 <tcp_rexmit+0xd0>)
 800bf7e:	482f      	ldr	r0, [pc, #188]	; (800c03c <tcp_rexmit+0xd4>)
 800bf80:	f003 fa60 	bl	800f444 <iprintf>

  if (pcb->unacked == NULL) {
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d102      	bne.n	800bf92 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bf8c:	f06f 0305 	mvn.w	r3, #5
 800bf90:	e04c      	b.n	800c02c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf96:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bf98:	68b8      	ldr	r0, [r7, #8]
 800bf9a:	f7ff fe2d 	bl	800bbf8 <tcp_output_segment_busy>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d002      	beq.n	800bfaa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bfa4:	f06f 0305 	mvn.w	r3, #5
 800bfa8:	e040      	b.n	800c02c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	336c      	adds	r3, #108	; 0x6c
 800bfb6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bfb8:	e002      	b.n	800bfc0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d011      	beq.n	800bfec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	68db      	ldr	r3, [r3, #12]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7f9 fc60 	bl	8005896 <lwip_htonl>
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7f9 fc59 	bl	8005896 <lwip_htonl>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	dbe6      	blt.n	800bfba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	68ba      	ldr	r2, [r7, #8]
 800bff8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d103      	bne.n	800c00a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c010:	2bff      	cmp	r3, #255	; 0xff
 800c012:	d007      	beq.n	800c024 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c01a:	3301      	adds	r3, #1
 800c01c:	b2da      	uxtb	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3714      	adds	r7, #20
 800c030:	46bd      	mov	sp, r7
 800c032:	bd90      	pop	{r4, r7, pc}
 800c034:	08011cc4 	.word	0x08011cc4
 800c038:	08012364 	.word	0x08012364
 800c03c:	08011d18 	.word	0x08011d18

0800c040 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d106      	bne.n	800c05c <tcp_rexmit_fast+0x1c>
 800c04e:	4b2a      	ldr	r3, [pc, #168]	; (800c0f8 <tcp_rexmit_fast+0xb8>)
 800c050:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c054:	4929      	ldr	r1, [pc, #164]	; (800c0fc <tcp_rexmit_fast+0xbc>)
 800c056:	482a      	ldr	r0, [pc, #168]	; (800c100 <tcp_rexmit_fast+0xc0>)
 800c058:	f003 f9f4 	bl	800f444 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c060:	2b00      	cmp	r3, #0
 800c062:	d045      	beq.n	800c0f0 <tcp_rexmit_fast+0xb0>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	8b5b      	ldrh	r3, [r3, #26]
 800c068:	f003 0304 	and.w	r3, r3, #4
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d13f      	bne.n	800c0f0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7ff ff79 	bl	800bf68 <tcp_rexmit>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d139      	bne.n	800c0f0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c088:	4293      	cmp	r3, r2
 800c08a:	bf28      	it	cs
 800c08c:	4613      	movcs	r3, r2
 800c08e:	b29b      	uxth	r3, r3
 800c090:	2b00      	cmp	r3, #0
 800c092:	da00      	bge.n	800c096 <tcp_rexmit_fast+0x56>
 800c094:	3301      	adds	r3, #1
 800c096:	105b      	asrs	r3, r3, #1
 800c098:	b29a      	uxth	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0ac:	005b      	lsls	r3, r3, #1
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d206      	bcs.n	800c0c0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0b6:	005b      	lsls	r3, r3, #1
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	0049      	lsls	r1, r1, #1
 800c0ce:	440b      	add	r3, r1
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	4413      	add	r3, r2
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	8b5b      	ldrh	r3, [r3, #26]
 800c0e0:	f043 0304 	orr.w	r3, r3, #4
 800c0e4:	b29a      	uxth	r2, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c0f0:	bf00      	nop
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	08011cc4 	.word	0x08011cc4
 800c0fc:	0801237c 	.word	0x0801237c
 800c100:	08011d18 	.word	0x08011d18

0800c104 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	607b      	str	r3, [r7, #4]
 800c10e:	460b      	mov	r3, r1
 800c110:	817b      	strh	r3, [r7, #10]
 800c112:	4613      	mov	r3, r2
 800c114:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c116:	897a      	ldrh	r2, [r7, #10]
 800c118:	893b      	ldrh	r3, [r7, #8]
 800c11a:	4413      	add	r3, r2
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	3314      	adds	r3, #20
 800c120:	b29b      	uxth	r3, r3
 800c122:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c126:	4619      	mov	r1, r3
 800c128:	2022      	movs	r0, #34	; 0x22
 800c12a:	f7fa fc19 	bl	8006960 <pbuf_alloc>
 800c12e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d04d      	beq.n	800c1d2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c136:	897b      	ldrh	r3, [r7, #10]
 800c138:	3313      	adds	r3, #19
 800c13a:	697a      	ldr	r2, [r7, #20]
 800c13c:	8952      	ldrh	r2, [r2, #10]
 800c13e:	4293      	cmp	r3, r2
 800c140:	db06      	blt.n	800c150 <tcp_output_alloc_header_common+0x4c>
 800c142:	4b26      	ldr	r3, [pc, #152]	; (800c1dc <tcp_output_alloc_header_common+0xd8>)
 800c144:	f240 7223 	movw	r2, #1827	; 0x723
 800c148:	4925      	ldr	r1, [pc, #148]	; (800c1e0 <tcp_output_alloc_header_common+0xdc>)
 800c14a:	4826      	ldr	r0, [pc, #152]	; (800c1e4 <tcp_output_alloc_header_common+0xe0>)
 800c14c:	f003 f97a 	bl	800f444 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c156:	8c3b      	ldrh	r3, [r7, #32]
 800c158:	4618      	mov	r0, r3
 800c15a:	f7f9 fb87 	bl	800586c <lwip_htons>
 800c15e:	4603      	mov	r3, r0
 800c160:	461a      	mov	r2, r3
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c168:	4618      	mov	r0, r3
 800c16a:	f7f9 fb7f 	bl	800586c <lwip_htons>
 800c16e:	4603      	mov	r3, r0
 800c170:	461a      	mov	r2, r3
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f7f9 fb8a 	bl	8005896 <lwip_htonl>
 800c182:	4602      	mov	r2, r0
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c188:	897b      	ldrh	r3, [r7, #10]
 800c18a:	089b      	lsrs	r3, r3, #2
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	3305      	adds	r3, #5
 800c190:	b29b      	uxth	r3, r3
 800c192:	031b      	lsls	r3, r3, #12
 800c194:	b29a      	uxth	r2, r3
 800c196:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	4313      	orrs	r3, r2
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7f9 fb63 	bl	800586c <lwip_htons>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c1ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7f9 fb5b 	bl	800586c <lwip_htons>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	741a      	strb	r2, [r3, #16]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	749a      	strb	r2, [r3, #18]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c1d2:	697b      	ldr	r3, [r7, #20]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3718      	adds	r7, #24
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	08011cc4 	.word	0x08011cc4
 800c1e0:	0801239c 	.word	0x0801239c
 800c1e4:	08011d18 	.word	0x08011d18

0800c1e8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c1e8:	b5b0      	push	{r4, r5, r7, lr}
 800c1ea:	b08a      	sub	sp, #40	; 0x28
 800c1ec:	af04      	add	r7, sp, #16
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	607b      	str	r3, [r7, #4]
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	817b      	strh	r3, [r7, #10]
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d106      	bne.n	800c20e <tcp_output_alloc_header+0x26>
 800c200:	4b15      	ldr	r3, [pc, #84]	; (800c258 <tcp_output_alloc_header+0x70>)
 800c202:	f240 7242 	movw	r2, #1858	; 0x742
 800c206:	4915      	ldr	r1, [pc, #84]	; (800c25c <tcp_output_alloc_header+0x74>)
 800c208:	4815      	ldr	r0, [pc, #84]	; (800c260 <tcp_output_alloc_header+0x78>)
 800c20a:	f003 f91b 	bl	800f444 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	8adb      	ldrh	r3, [r3, #22]
 800c216:	68fa      	ldr	r2, [r7, #12]
 800c218:	8b12      	ldrh	r2, [r2, #24]
 800c21a:	68f9      	ldr	r1, [r7, #12]
 800c21c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c21e:	893d      	ldrh	r5, [r7, #8]
 800c220:	897c      	ldrh	r4, [r7, #10]
 800c222:	9103      	str	r1, [sp, #12]
 800c224:	2110      	movs	r1, #16
 800c226:	9102      	str	r1, [sp, #8]
 800c228:	9201      	str	r2, [sp, #4]
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	462a      	mov	r2, r5
 800c230:	4621      	mov	r1, r4
 800c232:	f7ff ff67 	bl	800c104 <tcp_output_alloc_header_common>
 800c236:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d006      	beq.n	800c24c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c246:	441a      	add	r2, r3
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c24c:	697b      	ldr	r3, [r7, #20]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3718      	adds	r7, #24
 800c252:	46bd      	mov	sp, r7
 800c254:	bdb0      	pop	{r4, r5, r7, pc}
 800c256:	bf00      	nop
 800c258:	08011cc4 	.word	0x08011cc4
 800c25c:	080123cc 	.word	0x080123cc
 800c260:	08011d18 	.word	0x08011d18

0800c264 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b088      	sub	sp, #32
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	4611      	mov	r1, r2
 800c270:	461a      	mov	r2, r3
 800c272:	460b      	mov	r3, r1
 800c274:	71fb      	strb	r3, [r7, #7]
 800c276:	4613      	mov	r3, r2
 800c278:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c27a:	2300      	movs	r3, #0
 800c27c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d106      	bne.n	800c292 <tcp_output_fill_options+0x2e>
 800c284:	4b13      	ldr	r3, [pc, #76]	; (800c2d4 <tcp_output_fill_options+0x70>)
 800c286:	f240 7256 	movw	r2, #1878	; 0x756
 800c28a:	4913      	ldr	r1, [pc, #76]	; (800c2d8 <tcp_output_fill_options+0x74>)
 800c28c:	4813      	ldr	r0, [pc, #76]	; (800c2dc <tcp_output_fill_options+0x78>)
 800c28e:	f003 f8d9 	bl	800f444 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	3314      	adds	r3, #20
 800c29c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c29e:	69bb      	ldr	r3, [r7, #24]
 800c2a0:	f103 0214 	add.w	r2, r3, #20
 800c2a4:	8bfb      	ldrh	r3, [r7, #30]
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	79fb      	ldrb	r3, [r7, #7]
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	f003 0304 	and.w	r3, r3, #4
 800c2b2:	440b      	add	r3, r1
 800c2b4:	4413      	add	r3, r2
 800c2b6:	697a      	ldr	r2, [r7, #20]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d006      	beq.n	800c2ca <tcp_output_fill_options+0x66>
 800c2bc:	4b05      	ldr	r3, [pc, #20]	; (800c2d4 <tcp_output_fill_options+0x70>)
 800c2be:	f240 7275 	movw	r2, #1909	; 0x775
 800c2c2:	4907      	ldr	r1, [pc, #28]	; (800c2e0 <tcp_output_fill_options+0x7c>)
 800c2c4:	4805      	ldr	r0, [pc, #20]	; (800c2dc <tcp_output_fill_options+0x78>)
 800c2c6:	f003 f8bd 	bl	800f444 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c2ca:	bf00      	nop
 800c2cc:	3720      	adds	r7, #32
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	08011cc4 	.word	0x08011cc4
 800c2d8:	080123f4 	.word	0x080123f4
 800c2dc:	08011d18 	.word	0x08011d18
 800c2e0:	080122ec 	.word	0x080122ec

0800c2e4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b08a      	sub	sp, #40	; 0x28
 800c2e8:	af04      	add	r7, sp, #16
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	607a      	str	r2, [r7, #4]
 800c2f0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d106      	bne.n	800c306 <tcp_output_control_segment+0x22>
 800c2f8:	4b1c      	ldr	r3, [pc, #112]	; (800c36c <tcp_output_control_segment+0x88>)
 800c2fa:	f240 7287 	movw	r2, #1927	; 0x787
 800c2fe:	491c      	ldr	r1, [pc, #112]	; (800c370 <tcp_output_control_segment+0x8c>)
 800c300:	481c      	ldr	r0, [pc, #112]	; (800c374 <tcp_output_control_segment+0x90>)
 800c302:	f003 f89f 	bl	800f444 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c306:	683a      	ldr	r2, [r7, #0]
 800c308:	6879      	ldr	r1, [r7, #4]
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f7fe ff40 	bl	800b190 <tcp_route>
 800c310:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d102      	bne.n	800c31e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c318:	23fc      	movs	r3, #252	; 0xfc
 800c31a:	75fb      	strb	r3, [r7, #23]
 800c31c:	e01c      	b.n	800c358 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d006      	beq.n	800c332 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	7adb      	ldrb	r3, [r3, #11]
 800c328:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	7a9b      	ldrb	r3, [r3, #10]
 800c32e:	757b      	strb	r3, [r7, #21]
 800c330:	e003      	b.n	800c33a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c332:	23ff      	movs	r3, #255	; 0xff
 800c334:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c336:	2300      	movs	r3, #0
 800c338:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c33a:	7dba      	ldrb	r2, [r7, #22]
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	9302      	str	r3, [sp, #8]
 800c340:	2306      	movs	r3, #6
 800c342:	9301      	str	r3, [sp, #4]
 800c344:	7d7b      	ldrb	r3, [r7, #21]
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	4613      	mov	r3, r2
 800c34a:	683a      	ldr	r2, [r7, #0]
 800c34c:	6879      	ldr	r1, [r7, #4]
 800c34e:	68b8      	ldr	r0, [r7, #8]
 800c350:	f001 ff70 	bl	800e234 <ip4_output_if>
 800c354:	4603      	mov	r3, r0
 800c356:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c358:	68b8      	ldr	r0, [r7, #8]
 800c35a:	f7fa fde5 	bl	8006f28 <pbuf_free>
  return err;
 800c35e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c362:	4618      	mov	r0, r3
 800c364:	3718      	adds	r7, #24
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	08011cc4 	.word	0x08011cc4
 800c370:	0801241c 	.word	0x0801241c
 800c374:	08011d18 	.word	0x08011d18

0800c378 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c378:	b590      	push	{r4, r7, lr}
 800c37a:	b08b      	sub	sp, #44	; 0x2c
 800c37c:	af04      	add	r7, sp, #16
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
 800c384:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d106      	bne.n	800c39a <tcp_rst+0x22>
 800c38c:	4b1f      	ldr	r3, [pc, #124]	; (800c40c <tcp_rst+0x94>)
 800c38e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c392:	491f      	ldr	r1, [pc, #124]	; (800c410 <tcp_rst+0x98>)
 800c394:	481f      	ldr	r0, [pc, #124]	; (800c414 <tcp_rst+0x9c>)
 800c396:	f003 f855 	bl	800f444 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d106      	bne.n	800c3ae <tcp_rst+0x36>
 800c3a0:	4b1a      	ldr	r3, [pc, #104]	; (800c40c <tcp_rst+0x94>)
 800c3a2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c3a6:	491c      	ldr	r1, [pc, #112]	; (800c418 <tcp_rst+0xa0>)
 800c3a8:	481a      	ldr	r0, [pc, #104]	; (800c414 <tcp_rst+0x9c>)
 800c3aa:	f003 f84b 	bl	800f444 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c3b2:	f246 0308 	movw	r3, #24584	; 0x6008
 800c3b6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c3b8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ba:	b29c      	uxth	r4, r3
 800c3bc:	68b8      	ldr	r0, [r7, #8]
 800c3be:	f7f9 fa6a 	bl	8005896 <lwip_htonl>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	8abb      	ldrh	r3, [r7, #20]
 800c3c6:	9303      	str	r3, [sp, #12]
 800c3c8:	2314      	movs	r3, #20
 800c3ca:	9302      	str	r3, [sp, #8]
 800c3cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c3ce:	9301      	str	r3, [sp, #4]
 800c3d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c3d2:	9300      	str	r3, [sp, #0]
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	4621      	mov	r1, r4
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f7ff fe92 	bl	800c104 <tcp_output_alloc_header_common>
 800c3e0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00c      	beq.n	800c402 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c3e8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	6939      	ldr	r1, [r7, #16]
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f7ff ff38 	bl	800c264 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	6939      	ldr	r1, [r7, #16]
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f7ff ff72 	bl	800c2e4 <tcp_output_control_segment>
 800c400:	e000      	b.n	800c404 <tcp_rst+0x8c>
    return;
 800c402:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c404:	371c      	adds	r7, #28
 800c406:	46bd      	mov	sp, r7
 800c408:	bd90      	pop	{r4, r7, pc}
 800c40a:	bf00      	nop
 800c40c:	08011cc4 	.word	0x08011cc4
 800c410:	08012448 	.word	0x08012448
 800c414:	08011d18 	.word	0x08011d18
 800c418:	08012464 	.word	0x08012464

0800c41c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c41c:	b590      	push	{r4, r7, lr}
 800c41e:	b087      	sub	sp, #28
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c424:	2300      	movs	r3, #0
 800c426:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c428:	2300      	movs	r3, #0
 800c42a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d106      	bne.n	800c440 <tcp_send_empty_ack+0x24>
 800c432:	4b28      	ldr	r3, [pc, #160]	; (800c4d4 <tcp_send_empty_ack+0xb8>)
 800c434:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c438:	4927      	ldr	r1, [pc, #156]	; (800c4d8 <tcp_send_empty_ack+0xbc>)
 800c43a:	4828      	ldr	r0, [pc, #160]	; (800c4dc <tcp_send_empty_ack+0xc0>)
 800c43c:	f003 f802 	bl	800f444 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c440:	7dfb      	ldrb	r3, [r7, #23]
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	b2db      	uxtb	r3, r3
 800c446:	f003 0304 	and.w	r3, r3, #4
 800c44a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c44c:	7d7b      	ldrb	r3, [r7, #21]
 800c44e:	b29c      	uxth	r4, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c454:	4618      	mov	r0, r3
 800c456:	f7f9 fa1e 	bl	8005896 <lwip_htonl>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2200      	movs	r2, #0
 800c45e:	4621      	mov	r1, r4
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f7ff fec1 	bl	800c1e8 <tcp_output_alloc_header>
 800c466:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d109      	bne.n	800c482 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	8b5b      	ldrh	r3, [r3, #26]
 800c472:	f043 0303 	orr.w	r3, r3, #3
 800c476:	b29a      	uxth	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c47c:	f06f 0301 	mvn.w	r3, #1
 800c480:	e023      	b.n	800c4ca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c482:	7dbb      	ldrb	r3, [r7, #22]
 800c484:	7dfa      	ldrb	r2, [r7, #23]
 800c486:	6939      	ldr	r1, [r7, #16]
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f7ff feeb 	bl	800c264 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	3304      	adds	r3, #4
 800c494:	6939      	ldr	r1, [r7, #16]
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7ff ff24 	bl	800c2e4 <tcp_output_control_segment>
 800c49c:	4603      	mov	r3, r0
 800c49e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c4a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d007      	beq.n	800c4b8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	8b5b      	ldrh	r3, [r3, #26]
 800c4ac:	f043 0303 	orr.w	r3, r3, #3
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	835a      	strh	r2, [r3, #26]
 800c4b6:	e006      	b.n	800c4c6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	8b5b      	ldrh	r3, [r3, #26]
 800c4bc:	f023 0303 	bic.w	r3, r3, #3
 800c4c0:	b29a      	uxth	r2, r3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c4c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	371c      	adds	r7, #28
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd90      	pop	{r4, r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	08011cc4 	.word	0x08011cc4
 800c4d8:	08012480 	.word	0x08012480
 800c4dc:	08011d18 	.word	0x08011d18

0800c4e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c4e0:	b590      	push	{r4, r7, lr}
 800c4e2:	b087      	sub	sp, #28
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d106      	bne.n	800c500 <tcp_keepalive+0x20>
 800c4f2:	4b18      	ldr	r3, [pc, #96]	; (800c554 <tcp_keepalive+0x74>)
 800c4f4:	f640 0224 	movw	r2, #2084	; 0x824
 800c4f8:	4917      	ldr	r1, [pc, #92]	; (800c558 <tcp_keepalive+0x78>)
 800c4fa:	4818      	ldr	r0, [pc, #96]	; (800c55c <tcp_keepalive+0x7c>)
 800c4fc:	f002 ffa2 	bl	800f444 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c500:	7dfb      	ldrb	r3, [r7, #23]
 800c502:	b29c      	uxth	r4, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c508:	3b01      	subs	r3, #1
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7f9 f9c3 	bl	8005896 <lwip_htonl>
 800c510:	4603      	mov	r3, r0
 800c512:	2200      	movs	r2, #0
 800c514:	4621      	mov	r1, r4
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f7ff fe66 	bl	800c1e8 <tcp_output_alloc_header>
 800c51c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d102      	bne.n	800c52a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c528:	e010      	b.n	800c54c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c52a:	7dfb      	ldrb	r3, [r7, #23]
 800c52c:	2200      	movs	r2, #0
 800c52e:	6939      	ldr	r1, [r7, #16]
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f7ff fe97 	bl	800c264 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3304      	adds	r3, #4
 800c53c:	6939      	ldr	r1, [r7, #16]
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f7ff fed0 	bl	800c2e4 <tcp_output_control_segment>
 800c544:	4603      	mov	r3, r0
 800c546:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c548:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	371c      	adds	r7, #28
 800c550:	46bd      	mov	sp, r7
 800c552:	bd90      	pop	{r4, r7, pc}
 800c554:	08011cc4 	.word	0x08011cc4
 800c558:	080124a0 	.word	0x080124a0
 800c55c:	08011d18 	.word	0x08011d18

0800c560 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c560:	b590      	push	{r4, r7, lr}
 800c562:	b08b      	sub	sp, #44	; 0x2c
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c568:	2300      	movs	r3, #0
 800c56a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d106      	bne.n	800c582 <tcp_zero_window_probe+0x22>
 800c574:	4b4c      	ldr	r3, [pc, #304]	; (800c6a8 <tcp_zero_window_probe+0x148>)
 800c576:	f640 024f 	movw	r2, #2127	; 0x84f
 800c57a:	494c      	ldr	r1, [pc, #304]	; (800c6ac <tcp_zero_window_probe+0x14c>)
 800c57c:	484c      	ldr	r0, [pc, #304]	; (800c6b0 <tcp_zero_window_probe+0x150>)
 800c57e:	f002 ff61 	bl	800f444 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c586:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c588:	6a3b      	ldr	r3, [r7, #32]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d101      	bne.n	800c592 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c58e:	2300      	movs	r3, #0
 800c590:	e086      	b.n	800c6a0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c598:	2bff      	cmp	r3, #255	; 0xff
 800c59a:	d007      	beq.n	800c5ac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	b2da      	uxtb	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c5ac:	6a3b      	ldr	r3, [r7, #32]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	899b      	ldrh	r3, [r3, #12]
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7f9 f959 	bl	800586c <lwip_htons>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	f003 0301 	and.w	r3, r3, #1
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d005      	beq.n	800c5d2 <tcp_zero_window_probe+0x72>
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	891b      	ldrh	r3, [r3, #8]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d101      	bne.n	800c5d2 <tcp_zero_window_probe+0x72>
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e000      	b.n	800c5d4 <tcp_zero_window_probe+0x74>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c5d6:	7ffb      	ldrb	r3, [r7, #31]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	bf0c      	ite	eq
 800c5dc:	2301      	moveq	r3, #1
 800c5de:	2300      	movne	r3, #0
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c5e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5e8:	b299      	uxth	r1, r3
 800c5ea:	6a3b      	ldr	r3, [r7, #32]
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	8bba      	ldrh	r2, [r7, #28]
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7ff fdf8 	bl	800c1e8 <tcp_output_alloc_header>
 800c5f8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d102      	bne.n	800c606 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c604:	e04c      	b.n	800c6a0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c606:	69bb      	ldr	r3, [r7, #24]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c60c:	7ffb      	ldrb	r3, [r7, #31]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d011      	beq.n	800c636 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	899b      	ldrh	r3, [r3, #12]
 800c616:	b29b      	uxth	r3, r3
 800c618:	b21b      	sxth	r3, r3
 800c61a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c61e:	b21c      	sxth	r4, r3
 800c620:	2011      	movs	r0, #17
 800c622:	f7f9 f923 	bl	800586c <lwip_htons>
 800c626:	4603      	mov	r3, r0
 800c628:	b21b      	sxth	r3, r3
 800c62a:	4323      	orrs	r3, r4
 800c62c:	b21b      	sxth	r3, r3
 800c62e:	b29a      	uxth	r2, r3
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	819a      	strh	r2, [r3, #12]
 800c634:	e010      	b.n	800c658 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	3314      	adds	r3, #20
 800c63c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	6858      	ldr	r0, [r3, #4]
 800c642:	6a3b      	ldr	r3, [r7, #32]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	891a      	ldrh	r2, [r3, #8]
 800c648:	6a3b      	ldr	r3, [r7, #32]
 800c64a:	891b      	ldrh	r3, [r3, #8]
 800c64c:	1ad3      	subs	r3, r2, r3
 800c64e:	b29b      	uxth	r3, r3
 800c650:	2201      	movs	r2, #1
 800c652:	6939      	ldr	r1, [r7, #16]
 800c654:	f7fa fe52 	bl	80072fc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c658:	6a3b      	ldr	r3, [r7, #32]
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	4618      	mov	r0, r3
 800c660:	f7f9 f919 	bl	8005896 <lwip_htonl>
 800c664:	4603      	mov	r3, r0
 800c666:	3301      	adds	r3, #1
 800c668:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	2b00      	cmp	r3, #0
 800c674:	da02      	bge.n	800c67c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c67c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c680:	2200      	movs	r2, #0
 800c682:	69b9      	ldr	r1, [r7, #24]
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f7ff fded 	bl	800c264 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	3304      	adds	r3, #4
 800c690:	69b9      	ldr	r1, [r7, #24]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7ff fe26 	bl	800c2e4 <tcp_output_control_segment>
 800c698:	4603      	mov	r3, r0
 800c69a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c69c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	372c      	adds	r7, #44	; 0x2c
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd90      	pop	{r4, r7, pc}
 800c6a8:	08011cc4 	.word	0x08011cc4
 800c6ac:	080124bc 	.word	0x080124bc
 800c6b0:	08011d18 	.word	0x08011d18

0800c6b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c6bc:	f7fa ff0c 	bl	80074d8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c6c0:	4b0a      	ldr	r3, [pc, #40]	; (800c6ec <tcpip_tcp_timer+0x38>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d103      	bne.n	800c6d0 <tcpip_tcp_timer+0x1c>
 800c6c8:	4b09      	ldr	r3, [pc, #36]	; (800c6f0 <tcpip_tcp_timer+0x3c>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d005      	beq.n	800c6dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	4908      	ldr	r1, [pc, #32]	; (800c6f4 <tcpip_tcp_timer+0x40>)
 800c6d4:	20fa      	movs	r0, #250	; 0xfa
 800c6d6:	f000 f8f3 	bl	800c8c0 <sys_timeout>
 800c6da:	e003      	b.n	800c6e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c6dc:	4b06      	ldr	r3, [pc, #24]	; (800c6f8 <tcpip_tcp_timer+0x44>)
 800c6de:	2200      	movs	r2, #0
 800c6e0:	601a      	str	r2, [r3, #0]
  }
}
 800c6e2:	bf00      	nop
 800c6e4:	bf00      	nop
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	200087bc 	.word	0x200087bc
 800c6f0:	200087c0 	.word	0x200087c0
 800c6f4:	0800c6b5 	.word	0x0800c6b5
 800c6f8:	20008808 	.word	0x20008808

0800c6fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c700:	4b0a      	ldr	r3, [pc, #40]	; (800c72c <tcp_timer_needed+0x30>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d10f      	bne.n	800c728 <tcp_timer_needed+0x2c>
 800c708:	4b09      	ldr	r3, [pc, #36]	; (800c730 <tcp_timer_needed+0x34>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d103      	bne.n	800c718 <tcp_timer_needed+0x1c>
 800c710:	4b08      	ldr	r3, [pc, #32]	; (800c734 <tcp_timer_needed+0x38>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d007      	beq.n	800c728 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c718:	4b04      	ldr	r3, [pc, #16]	; (800c72c <tcp_timer_needed+0x30>)
 800c71a:	2201      	movs	r2, #1
 800c71c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c71e:	2200      	movs	r2, #0
 800c720:	4905      	ldr	r1, [pc, #20]	; (800c738 <tcp_timer_needed+0x3c>)
 800c722:	20fa      	movs	r0, #250	; 0xfa
 800c724:	f000 f8cc 	bl	800c8c0 <sys_timeout>
  }
}
 800c728:	bf00      	nop
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	20008808 	.word	0x20008808
 800c730:	200087bc 	.word	0x200087bc
 800c734:	200087c0 	.word	0x200087c0
 800c738:	0800c6b5 	.word	0x0800c6b5

0800c73c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b086      	sub	sp, #24
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c748:	2006      	movs	r0, #6
 800c74a:	f7f9 fd07 	bl	800615c <memp_malloc>
 800c74e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d109      	bne.n	800c76a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d151      	bne.n	800c800 <sys_timeout_abs+0xc4>
 800c75c:	4b2a      	ldr	r3, [pc, #168]	; (800c808 <sys_timeout_abs+0xcc>)
 800c75e:	22be      	movs	r2, #190	; 0xbe
 800c760:	492a      	ldr	r1, [pc, #168]	; (800c80c <sys_timeout_abs+0xd0>)
 800c762:	482b      	ldr	r0, [pc, #172]	; (800c810 <sys_timeout_abs+0xd4>)
 800c764:	f002 fe6e 	bl	800f444 <iprintf>
    return;
 800c768:	e04a      	b.n	800c800 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	2200      	movs	r2, #0
 800c76e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	68ba      	ldr	r2, [r7, #8]
 800c774:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c782:	4b24      	ldr	r3, [pc, #144]	; (800c814 <sys_timeout_abs+0xd8>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d103      	bne.n	800c792 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c78a:	4a22      	ldr	r2, [pc, #136]	; (800c814 <sys_timeout_abs+0xd8>)
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	6013      	str	r3, [r2, #0]
    return;
 800c790:	e037      	b.n	800c802 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	685a      	ldr	r2, [r3, #4]
 800c796:	4b1f      	ldr	r3, [pc, #124]	; (800c814 <sys_timeout_abs+0xd8>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	0fdb      	lsrs	r3, r3, #31
 800c7a0:	f003 0301 	and.w	r3, r3, #1
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d007      	beq.n	800c7ba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c7aa:	4b1a      	ldr	r3, [pc, #104]	; (800c814 <sys_timeout_abs+0xd8>)
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c7b2:	4a18      	ldr	r2, [pc, #96]	; (800c814 <sys_timeout_abs+0xd8>)
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	6013      	str	r3, [r2, #0]
 800c7b8:	e023      	b.n	800c802 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c7ba:	4b16      	ldr	r3, [pc, #88]	; (800c814 <sys_timeout_abs+0xd8>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	617b      	str	r3, [r7, #20]
 800c7c0:	e01a      	b.n	800c7f8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00b      	beq.n	800c7e2 <sys_timeout_abs+0xa6>
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	685a      	ldr	r2, [r3, #4]
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	1ad3      	subs	r3, r2, r3
 800c7d6:	0fdb      	lsrs	r3, r3, #31
 800c7d8:	f003 0301 	and.w	r3, r3, #1
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d007      	beq.n	800c7f2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	693a      	ldr	r2, [r7, #16]
 800c7ee:	601a      	str	r2, [r3, #0]
        break;
 800c7f0:	e007      	b.n	800c802 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	617b      	str	r3, [r7, #20]
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d1e1      	bne.n	800c7c2 <sys_timeout_abs+0x86>
 800c7fe:	e000      	b.n	800c802 <sys_timeout_abs+0xc6>
    return;
 800c800:	bf00      	nop
      }
    }
  }
}
 800c802:	3718      	adds	r7, #24
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}
 800c808:	080124e0 	.word	0x080124e0
 800c80c:	08012514 	.word	0x08012514
 800c810:	08012554 	.word	0x08012554
 800c814:	20008800 	.word	0x20008800

0800c818 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b086      	sub	sp, #24
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	4798      	blx	r3

  now = sys_now();
 800c82a:	f7f8 fe13 	bl	8005454 <sys_now>
 800c82e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	4b0f      	ldr	r3, [pc, #60]	; (800c874 <lwip_cyclic_timer+0x5c>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4413      	add	r3, r2
 800c83a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	0fdb      	lsrs	r3, r3, #31
 800c844:	f003 0301 	and.w	r3, r3, #1
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d009      	beq.n	800c862 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	4413      	add	r3, r2
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	4907      	ldr	r1, [pc, #28]	; (800c878 <lwip_cyclic_timer+0x60>)
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7ff ff6e 	bl	800c73c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c860:	e004      	b.n	800c86c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	4904      	ldr	r1, [pc, #16]	; (800c878 <lwip_cyclic_timer+0x60>)
 800c866:	68f8      	ldr	r0, [r7, #12]
 800c868:	f7ff ff68 	bl	800c73c <sys_timeout_abs>
}
 800c86c:	bf00      	nop
 800c86e:	3718      	adds	r7, #24
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	20008804 	.word	0x20008804
 800c878:	0800c819 	.word	0x0800c819

0800c87c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c882:	2301      	movs	r3, #1
 800c884:	607b      	str	r3, [r7, #4]
 800c886:	e00e      	b.n	800c8a6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c888:	4a0b      	ldr	r2, [pc, #44]	; (800c8b8 <sys_timeouts_init+0x3c>)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	00db      	lsls	r3, r3, #3
 800c894:	4a08      	ldr	r2, [pc, #32]	; (800c8b8 <sys_timeouts_init+0x3c>)
 800c896:	4413      	add	r3, r2
 800c898:	461a      	mov	r2, r3
 800c89a:	4908      	ldr	r1, [pc, #32]	; (800c8bc <sys_timeouts_init+0x40>)
 800c89c:	f000 f810 	bl	800c8c0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	607b      	str	r3, [r7, #4]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2b02      	cmp	r3, #2
 800c8aa:	d9ed      	bls.n	800c888 <sys_timeouts_init+0xc>
  }
}
 800c8ac:	bf00      	nop
 800c8ae:	bf00      	nop
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	080130cc 	.word	0x080130cc
 800c8bc:	0800c819 	.word	0x0800c819

0800c8c0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b086      	sub	sp, #24
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8d2:	d306      	bcc.n	800c8e2 <sys_timeout+0x22>
 800c8d4:	4b0a      	ldr	r3, [pc, #40]	; (800c900 <sys_timeout+0x40>)
 800c8d6:	f240 1229 	movw	r2, #297	; 0x129
 800c8da:	490a      	ldr	r1, [pc, #40]	; (800c904 <sys_timeout+0x44>)
 800c8dc:	480a      	ldr	r0, [pc, #40]	; (800c908 <sys_timeout+0x48>)
 800c8de:	f002 fdb1 	bl	800f444 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c8e2:	f7f8 fdb7 	bl	8005454 <sys_now>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	4413      	add	r3, r2
 800c8ec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	68b9      	ldr	r1, [r7, #8]
 800c8f2:	6978      	ldr	r0, [r7, #20]
 800c8f4:	f7ff ff22 	bl	800c73c <sys_timeout_abs>
#endif
}
 800c8f8:	bf00      	nop
 800c8fa:	3718      	adds	r7, #24
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	080124e0 	.word	0x080124e0
 800c904:	0801257c 	.word	0x0801257c
 800c908:	08012554 	.word	0x08012554

0800c90c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c912:	f7f8 fd9f 	bl	8005454 <sys_now>
 800c916:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c918:	4b1a      	ldr	r3, [pc, #104]	; (800c984 <sys_check_timeouts+0x78>)
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d001      	beq.n	800c926 <sys_check_timeouts+0x1a>
 800c922:	f7f9 ffc7 	bl	80068b4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c926:	4b18      	ldr	r3, [pc, #96]	; (800c988 <sys_check_timeouts+0x7c>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d022      	beq.n	800c978 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	68fa      	ldr	r2, [r7, #12]
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	0fdb      	lsrs	r3, r3, #31
 800c93c:	f003 0301 	and.w	r3, r3, #1
 800c940:	b2db      	uxtb	r3, r3
 800c942:	2b00      	cmp	r3, #0
 800c944:	d11a      	bne.n	800c97c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a0f      	ldr	r2, [pc, #60]	; (800c988 <sys_check_timeouts+0x7c>)
 800c94c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	4a0b      	ldr	r2, [pc, #44]	; (800c98c <sys_check_timeouts+0x80>)
 800c960:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c962:	68b9      	ldr	r1, [r7, #8]
 800c964:	2006      	movs	r0, #6
 800c966:	f7f9 fc69 	bl	800623c <memp_free>
    if (handler != NULL) {
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d0d3      	beq.n	800c918 <sys_check_timeouts+0xc>
      handler(arg);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6838      	ldr	r0, [r7, #0]
 800c974:	4798      	blx	r3
  do {
 800c976:	e7cf      	b.n	800c918 <sys_check_timeouts+0xc>
      return;
 800c978:	bf00      	nop
 800c97a:	e000      	b.n	800c97e <sys_check_timeouts+0x72>
      return;
 800c97c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	200087ad 	.word	0x200087ad
 800c988:	20008800 	.word	0x20008800
 800c98c:	20008804 	.word	0x20008804

0800c990 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c994:	f002 fde4 	bl	800f560 <rand>
 800c998:	4603      	mov	r3, r0
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	4b01      	ldr	r3, [pc, #4]	; (800c9b0 <udp_init+0x20>)
 800c9aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c9ac:	bf00      	nop
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	20000028 	.word	0x20000028

0800c9b4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d105      	bne.n	800c9d4 <udp_input_local_match+0x20>
 800c9c8:	4b27      	ldr	r3, [pc, #156]	; (800ca68 <udp_input_local_match+0xb4>)
 800c9ca:	2287      	movs	r2, #135	; 0x87
 800c9cc:	4927      	ldr	r1, [pc, #156]	; (800ca6c <udp_input_local_match+0xb8>)
 800c9ce:	4828      	ldr	r0, [pc, #160]	; (800ca70 <udp_input_local_match+0xbc>)
 800c9d0:	f002 fd38 	bl	800f444 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d105      	bne.n	800c9e6 <udp_input_local_match+0x32>
 800c9da:	4b23      	ldr	r3, [pc, #140]	; (800ca68 <udp_input_local_match+0xb4>)
 800c9dc:	2288      	movs	r2, #136	; 0x88
 800c9de:	4925      	ldr	r1, [pc, #148]	; (800ca74 <udp_input_local_match+0xc0>)
 800c9e0:	4823      	ldr	r0, [pc, #140]	; (800ca70 <udp_input_local_match+0xbc>)
 800c9e2:	f002 fd2f 	bl	800f444 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	7a1b      	ldrb	r3, [r3, #8]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00b      	beq.n	800ca06 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	7a1a      	ldrb	r2, [r3, #8]
 800c9f2:	4b21      	ldr	r3, [pc, #132]	; (800ca78 <udp_input_local_match+0xc4>)
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d001      	beq.n	800ca06 <udp_input_local_match+0x52>
    return 0;
 800ca02:	2300      	movs	r3, #0
 800ca04:	e02b      	b.n	800ca5e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ca06:	79fb      	ldrb	r3, [r7, #7]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d018      	beq.n	800ca3e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d013      	beq.n	800ca3a <udp_input_local_match+0x86>
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00f      	beq.n	800ca3a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ca1a:	4b17      	ldr	r3, [pc, #92]	; (800ca78 <udp_input_local_match+0xc4>)
 800ca1c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ca1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca22:	d00a      	beq.n	800ca3a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	4b13      	ldr	r3, [pc, #76]	; (800ca78 <udp_input_local_match+0xc4>)
 800ca2a:	695b      	ldr	r3, [r3, #20]
 800ca2c:	405a      	eors	r2, r3
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	3308      	adds	r3, #8
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d110      	bne.n	800ca5c <udp_input_local_match+0xa8>
          return 1;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e00f      	b.n	800ca5e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d009      	beq.n	800ca58 <udp_input_local_match+0xa4>
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d005      	beq.n	800ca58 <udp_input_local_match+0xa4>
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	4b09      	ldr	r3, [pc, #36]	; (800ca78 <udp_input_local_match+0xc4>)
 800ca52:	695b      	ldr	r3, [r3, #20]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d101      	bne.n	800ca5c <udp_input_local_match+0xa8>
        return 1;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e000      	b.n	800ca5e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ca5c:	2300      	movs	r3, #0
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	080125c8 	.word	0x080125c8
 800ca6c:	080125f8 	.word	0x080125f8
 800ca70:	0801261c 	.word	0x0801261c
 800ca74:	08012644 	.word	0x08012644
 800ca78:	20005240 	.word	0x20005240

0800ca7c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ca7c:	b590      	push	{r4, r7, lr}
 800ca7e:	b08d      	sub	sp, #52	; 0x34
 800ca80:	af02      	add	r7, sp, #8
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ca86:	2300      	movs	r3, #0
 800ca88:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d105      	bne.n	800ca9c <udp_input+0x20>
 800ca90:	4b7c      	ldr	r3, [pc, #496]	; (800cc84 <udp_input+0x208>)
 800ca92:	22cf      	movs	r2, #207	; 0xcf
 800ca94:	497c      	ldr	r1, [pc, #496]	; (800cc88 <udp_input+0x20c>)
 800ca96:	487d      	ldr	r0, [pc, #500]	; (800cc8c <udp_input+0x210>)
 800ca98:	f002 fcd4 	bl	800f444 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d105      	bne.n	800caae <udp_input+0x32>
 800caa2:	4b78      	ldr	r3, [pc, #480]	; (800cc84 <udp_input+0x208>)
 800caa4:	22d0      	movs	r2, #208	; 0xd0
 800caa6:	497a      	ldr	r1, [pc, #488]	; (800cc90 <udp_input+0x214>)
 800caa8:	4878      	ldr	r0, [pc, #480]	; (800cc8c <udp_input+0x210>)
 800caaa:	f002 fccb 	bl	800f444 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	895b      	ldrh	r3, [r3, #10]
 800cab2:	2b07      	cmp	r3, #7
 800cab4:	d803      	bhi.n	800cabe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f7fa fa36 	bl	8006f28 <pbuf_free>
    goto end;
 800cabc:	e0de      	b.n	800cc7c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cac4:	4b73      	ldr	r3, [pc, #460]	; (800cc94 <udp_input+0x218>)
 800cac6:	695b      	ldr	r3, [r3, #20]
 800cac8:	4a72      	ldr	r2, [pc, #456]	; (800cc94 <udp_input+0x218>)
 800caca:	6812      	ldr	r2, [r2, #0]
 800cacc:	4611      	mov	r1, r2
 800cace:	4618      	mov	r0, r3
 800cad0:	f001 fc88 	bl	800e3e4 <ip4_addr_isbroadcast_u32>
 800cad4:	4603      	mov	r3, r0
 800cad6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	881b      	ldrh	r3, [r3, #0]
 800cadc:	b29b      	uxth	r3, r3
 800cade:	4618      	mov	r0, r3
 800cae0:	f7f8 fec4 	bl	800586c <lwip_htons>
 800cae4:	4603      	mov	r3, r0
 800cae6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	885b      	ldrh	r3, [r3, #2]
 800caec:	b29b      	uxth	r3, r3
 800caee:	4618      	mov	r0, r3
 800caf0:	f7f8 febc 	bl	800586c <lwip_htons>
 800caf4:	4603      	mov	r3, r0
 800caf6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800caf8:	2300      	movs	r3, #0
 800cafa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800cafc:	2300      	movs	r3, #0
 800cafe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cb00:	2300      	movs	r3, #0
 800cb02:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb04:	4b64      	ldr	r3, [pc, #400]	; (800cc98 <udp_input+0x21c>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	627b      	str	r3, [r7, #36]	; 0x24
 800cb0a:	e054      	b.n	800cbb6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0e:	8a5b      	ldrh	r3, [r3, #18]
 800cb10:	89fa      	ldrh	r2, [r7, #14]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d14a      	bne.n	800cbac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cb16:	7cfb      	ldrb	r3, [r7, #19]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	6839      	ldr	r1, [r7, #0]
 800cb1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb1e:	f7ff ff49 	bl	800c9b4 <udp_input_local_match>
 800cb22:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d041      	beq.n	800cbac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2a:	7c1b      	ldrb	r3, [r3, #16]
 800cb2c:	f003 0304 	and.w	r3, r3, #4
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d11d      	bne.n	800cb70 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d102      	bne.n	800cb40 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3c:	61fb      	str	r3, [r7, #28]
 800cb3e:	e017      	b.n	800cb70 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cb40:	7cfb      	ldrb	r3, [r7, #19]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d014      	beq.n	800cb70 <udp_input+0xf4>
 800cb46:	4b53      	ldr	r3, [pc, #332]	; (800cc94 <udp_input+0x218>)
 800cb48:	695b      	ldr	r3, [r3, #20]
 800cb4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb4e:	d10f      	bne.n	800cb70 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	3304      	adds	r3, #4
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d008      	beq.n	800cb70 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	3304      	adds	r3, #4
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d101      	bne.n	800cb70 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800cb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb72:	8a9b      	ldrh	r3, [r3, #20]
 800cb74:	8a3a      	ldrh	r2, [r7, #16]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d118      	bne.n	800cbac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d005      	beq.n	800cb8e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb84:	685a      	ldr	r2, [r3, #4]
 800cb86:	4b43      	ldr	r3, [pc, #268]	; (800cc94 <udp_input+0x218>)
 800cb88:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d10e      	bne.n	800cbac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cb8e:	6a3b      	ldr	r3, [r7, #32]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d014      	beq.n	800cbbe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb96:	68da      	ldr	r2, [r3, #12]
 800cb98:	6a3b      	ldr	r3, [r7, #32]
 800cb9a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cb9c:	4b3e      	ldr	r3, [pc, #248]	; (800cc98 <udp_input+0x21c>)
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cba4:	4a3c      	ldr	r2, [pc, #240]	; (800cc98 <udp_input+0x21c>)
 800cba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cbaa:	e008      	b.n	800cbbe <udp_input+0x142>
      }
    }

    prev = pcb;
 800cbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb2:	68db      	ldr	r3, [r3, #12]
 800cbb4:	627b      	str	r3, [r7, #36]	; 0x24
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d1a7      	bne.n	800cb0c <udp_input+0x90>
 800cbbc:	e000      	b.n	800cbc0 <udp_input+0x144>
        break;
 800cbbe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d101      	bne.n	800cbca <udp_input+0x14e>
    pcb = uncon_pcb;
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d002      	beq.n	800cbd6 <udp_input+0x15a>
    for_us = 1;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	76fb      	strb	r3, [r7, #27]
 800cbd4:	e00a      	b.n	800cbec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	3304      	adds	r3, #4
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	4b2d      	ldr	r3, [pc, #180]	; (800cc94 <udp_input+0x218>)
 800cbde:	695b      	ldr	r3, [r3, #20]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	bf0c      	ite	eq
 800cbe4:	2301      	moveq	r3, #1
 800cbe6:	2300      	movne	r3, #0
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cbec:	7efb      	ldrb	r3, [r7, #27]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d041      	beq.n	800cc76 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cbf2:	2108      	movs	r1, #8
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7fa f911 	bl	8006e1c <pbuf_remove_header>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00a      	beq.n	800cc16 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800cc00:	4b20      	ldr	r3, [pc, #128]	; (800cc84 <udp_input+0x208>)
 800cc02:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800cc06:	4925      	ldr	r1, [pc, #148]	; (800cc9c <udp_input+0x220>)
 800cc08:	4820      	ldr	r0, [pc, #128]	; (800cc8c <udp_input+0x210>)
 800cc0a:	f002 fc1b 	bl	800f444 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7fa f98a 	bl	8006f28 <pbuf_free>
      goto end;
 800cc14:	e032      	b.n	800cc7c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800cc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d012      	beq.n	800cc42 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1e:	699b      	ldr	r3, [r3, #24]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00a      	beq.n	800cc3a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc26:	699c      	ldr	r4, [r3, #24]
 800cc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2a:	69d8      	ldr	r0, [r3, #28]
 800cc2c:	8a3b      	ldrh	r3, [r7, #16]
 800cc2e:	9300      	str	r3, [sp, #0]
 800cc30:	4b1b      	ldr	r3, [pc, #108]	; (800cca0 <udp_input+0x224>)
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc36:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cc38:	e021      	b.n	800cc7e <udp_input+0x202>
        pbuf_free(p);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f7fa f974 	bl	8006f28 <pbuf_free>
        goto end;
 800cc40:	e01c      	b.n	800cc7c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cc42:	7cfb      	ldrb	r3, [r7, #19]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d112      	bne.n	800cc6e <udp_input+0x1f2>
 800cc48:	4b12      	ldr	r3, [pc, #72]	; (800cc94 <udp_input+0x218>)
 800cc4a:	695b      	ldr	r3, [r3, #20]
 800cc4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc50:	2be0      	cmp	r3, #224	; 0xe0
 800cc52:	d00c      	beq.n	800cc6e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cc54:	4b0f      	ldr	r3, [pc, #60]	; (800cc94 <udp_input+0x218>)
 800cc56:	899b      	ldrh	r3, [r3, #12]
 800cc58:	3308      	adds	r3, #8
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	b21b      	sxth	r3, r3
 800cc5e:	4619      	mov	r1, r3
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f7fa f94e 	bl	8006f02 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cc66:	2103      	movs	r1, #3
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f001 f89b 	bl	800dda4 <icmp_dest_unreach>
      pbuf_free(p);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f7fa f95a 	bl	8006f28 <pbuf_free>
  return;
 800cc74:	e003      	b.n	800cc7e <udp_input+0x202>
    pbuf_free(p);
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f7fa f956 	bl	8006f28 <pbuf_free>
  return;
 800cc7c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cc7e:	372c      	adds	r7, #44	; 0x2c
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd90      	pop	{r4, r7, pc}
 800cc84:	080125c8 	.word	0x080125c8
 800cc88:	0801266c 	.word	0x0801266c
 800cc8c:	0801261c 	.word	0x0801261c
 800cc90:	08012684 	.word	0x08012684
 800cc94:	20005240 	.word	0x20005240
 800cc98:	2000880c 	.word	0x2000880c
 800cc9c:	080126a0 	.word	0x080126a0
 800cca0:	20005250 	.word	0x20005250

0800cca4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d01e      	beq.n	800ccf2 <udp_netif_ip_addr_changed+0x4e>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d01a      	beq.n	800ccf2 <udp_netif_ip_addr_changed+0x4e>
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d017      	beq.n	800ccf2 <udp_netif_ip_addr_changed+0x4e>
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d013      	beq.n	800ccf2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ccca:	4b0d      	ldr	r3, [pc, #52]	; (800cd00 <udp_netif_ip_addr_changed+0x5c>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	60fb      	str	r3, [r7, #12]
 800ccd0:	e00c      	b.n	800ccec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d103      	bne.n	800cce6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	60fb      	str	r3, [r7, #12]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d1ef      	bne.n	800ccd2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ccf2:	bf00      	nop
 800ccf4:	3714      	adds	r7, #20
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	2000880c 	.word	0x2000880c

0800cd04 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cd0c:	4915      	ldr	r1, [pc, #84]	; (800cd64 <etharp_free_entry+0x60>)
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	4613      	mov	r3, r2
 800cd12:	005b      	lsls	r3, r3, #1
 800cd14:	4413      	add	r3, r2
 800cd16:	00db      	lsls	r3, r3, #3
 800cd18:	440b      	add	r3, r1
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d013      	beq.n	800cd48 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cd20:	4910      	ldr	r1, [pc, #64]	; (800cd64 <etharp_free_entry+0x60>)
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	4613      	mov	r3, r2
 800cd26:	005b      	lsls	r3, r3, #1
 800cd28:	4413      	add	r3, r2
 800cd2a:	00db      	lsls	r3, r3, #3
 800cd2c:	440b      	add	r3, r1
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fa f8f9 	bl	8006f28 <pbuf_free>
    arp_table[i].q = NULL;
 800cd36:	490b      	ldr	r1, [pc, #44]	; (800cd64 <etharp_free_entry+0x60>)
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	005b      	lsls	r3, r3, #1
 800cd3e:	4413      	add	r3, r2
 800cd40:	00db      	lsls	r3, r3, #3
 800cd42:	440b      	add	r3, r1
 800cd44:	2200      	movs	r2, #0
 800cd46:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cd48:	4906      	ldr	r1, [pc, #24]	; (800cd64 <etharp_free_entry+0x60>)
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	005b      	lsls	r3, r3, #1
 800cd50:	4413      	add	r3, r2
 800cd52:	00db      	lsls	r3, r3, #3
 800cd54:	440b      	add	r3, r1
 800cd56:	3314      	adds	r3, #20
 800cd58:	2200      	movs	r2, #0
 800cd5a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cd5c:	bf00      	nop
 800cd5e:	3708      	adds	r7, #8
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	20008810 	.word	0x20008810

0800cd68 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd6e:	2300      	movs	r3, #0
 800cd70:	607b      	str	r3, [r7, #4]
 800cd72:	e096      	b.n	800cea2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cd74:	494f      	ldr	r1, [pc, #316]	; (800ceb4 <etharp_tmr+0x14c>)
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	005b      	lsls	r3, r3, #1
 800cd7c:	4413      	add	r3, r2
 800cd7e:	00db      	lsls	r3, r3, #3
 800cd80:	440b      	add	r3, r1
 800cd82:	3314      	adds	r3, #20
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cd88:	78fb      	ldrb	r3, [r7, #3]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	f000 8086 	beq.w	800ce9c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cd90:	4948      	ldr	r1, [pc, #288]	; (800ceb4 <etharp_tmr+0x14c>)
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	4613      	mov	r3, r2
 800cd96:	005b      	lsls	r3, r3, #1
 800cd98:	4413      	add	r3, r2
 800cd9a:	00db      	lsls	r3, r3, #3
 800cd9c:	440b      	add	r3, r1
 800cd9e:	3312      	adds	r3, #18
 800cda0:	881b      	ldrh	r3, [r3, #0]
 800cda2:	3301      	adds	r3, #1
 800cda4:	b298      	uxth	r0, r3
 800cda6:	4943      	ldr	r1, [pc, #268]	; (800ceb4 <etharp_tmr+0x14c>)
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	4613      	mov	r3, r2
 800cdac:	005b      	lsls	r3, r3, #1
 800cdae:	4413      	add	r3, r2
 800cdb0:	00db      	lsls	r3, r3, #3
 800cdb2:	440b      	add	r3, r1
 800cdb4:	3312      	adds	r3, #18
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cdba:	493e      	ldr	r1, [pc, #248]	; (800ceb4 <etharp_tmr+0x14c>)
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	005b      	lsls	r3, r3, #1
 800cdc2:	4413      	add	r3, r2
 800cdc4:	00db      	lsls	r3, r3, #3
 800cdc6:	440b      	add	r3, r1
 800cdc8:	3312      	adds	r3, #18
 800cdca:	881b      	ldrh	r3, [r3, #0]
 800cdcc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cdd0:	d215      	bcs.n	800cdfe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cdd2:	4938      	ldr	r1, [pc, #224]	; (800ceb4 <etharp_tmr+0x14c>)
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	4413      	add	r3, r2
 800cddc:	00db      	lsls	r3, r3, #3
 800cdde:	440b      	add	r3, r1
 800cde0:	3314      	adds	r3, #20
 800cde2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d10e      	bne.n	800ce06 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cde8:	4932      	ldr	r1, [pc, #200]	; (800ceb4 <etharp_tmr+0x14c>)
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	4613      	mov	r3, r2
 800cdee:	005b      	lsls	r3, r3, #1
 800cdf0:	4413      	add	r3, r2
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	440b      	add	r3, r1
 800cdf6:	3312      	adds	r3, #18
 800cdf8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cdfa:	2b04      	cmp	r3, #4
 800cdfc:	d903      	bls.n	800ce06 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f7ff ff80 	bl	800cd04 <etharp_free_entry>
 800ce04:	e04a      	b.n	800ce9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ce06:	492b      	ldr	r1, [pc, #172]	; (800ceb4 <etharp_tmr+0x14c>)
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	4613      	mov	r3, r2
 800ce0c:	005b      	lsls	r3, r3, #1
 800ce0e:	4413      	add	r3, r2
 800ce10:	00db      	lsls	r3, r3, #3
 800ce12:	440b      	add	r3, r1
 800ce14:	3314      	adds	r3, #20
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	2b03      	cmp	r3, #3
 800ce1a:	d10a      	bne.n	800ce32 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ce1c:	4925      	ldr	r1, [pc, #148]	; (800ceb4 <etharp_tmr+0x14c>)
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	4613      	mov	r3, r2
 800ce22:	005b      	lsls	r3, r3, #1
 800ce24:	4413      	add	r3, r2
 800ce26:	00db      	lsls	r3, r3, #3
 800ce28:	440b      	add	r3, r1
 800ce2a:	3314      	adds	r3, #20
 800ce2c:	2204      	movs	r2, #4
 800ce2e:	701a      	strb	r2, [r3, #0]
 800ce30:	e034      	b.n	800ce9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ce32:	4920      	ldr	r1, [pc, #128]	; (800ceb4 <etharp_tmr+0x14c>)
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	4613      	mov	r3, r2
 800ce38:	005b      	lsls	r3, r3, #1
 800ce3a:	4413      	add	r3, r2
 800ce3c:	00db      	lsls	r3, r3, #3
 800ce3e:	440b      	add	r3, r1
 800ce40:	3314      	adds	r3, #20
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	2b04      	cmp	r3, #4
 800ce46:	d10a      	bne.n	800ce5e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ce48:	491a      	ldr	r1, [pc, #104]	; (800ceb4 <etharp_tmr+0x14c>)
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	005b      	lsls	r3, r3, #1
 800ce50:	4413      	add	r3, r2
 800ce52:	00db      	lsls	r3, r3, #3
 800ce54:	440b      	add	r3, r1
 800ce56:	3314      	adds	r3, #20
 800ce58:	2202      	movs	r2, #2
 800ce5a:	701a      	strb	r2, [r3, #0]
 800ce5c:	e01e      	b.n	800ce9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ce5e:	4915      	ldr	r1, [pc, #84]	; (800ceb4 <etharp_tmr+0x14c>)
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	4613      	mov	r3, r2
 800ce64:	005b      	lsls	r3, r3, #1
 800ce66:	4413      	add	r3, r2
 800ce68:	00db      	lsls	r3, r3, #3
 800ce6a:	440b      	add	r3, r1
 800ce6c:	3314      	adds	r3, #20
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d113      	bne.n	800ce9c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ce74:	490f      	ldr	r1, [pc, #60]	; (800ceb4 <etharp_tmr+0x14c>)
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	4613      	mov	r3, r2
 800ce7a:	005b      	lsls	r3, r3, #1
 800ce7c:	4413      	add	r3, r2
 800ce7e:	00db      	lsls	r3, r3, #3
 800ce80:	440b      	add	r3, r1
 800ce82:	3308      	adds	r3, #8
 800ce84:	6818      	ldr	r0, [r3, #0]
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	4613      	mov	r3, r2
 800ce8a:	005b      	lsls	r3, r3, #1
 800ce8c:	4413      	add	r3, r2
 800ce8e:	00db      	lsls	r3, r3, #3
 800ce90:	4a08      	ldr	r2, [pc, #32]	; (800ceb4 <etharp_tmr+0x14c>)
 800ce92:	4413      	add	r3, r2
 800ce94:	3304      	adds	r3, #4
 800ce96:	4619      	mov	r1, r3
 800ce98:	f000 fe6e 	bl	800db78 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	607b      	str	r3, [r7, #4]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2b09      	cmp	r3, #9
 800cea6:	f77f af65 	ble.w	800cd74 <etharp_tmr+0xc>
      }
    }
  }
}
 800ceaa:	bf00      	nop
 800ceac:	bf00      	nop
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	20008810 	.word	0x20008810

0800ceb8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b08a      	sub	sp, #40	; 0x28
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	460b      	mov	r3, r1
 800cec2:	607a      	str	r2, [r7, #4]
 800cec4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cec6:	230a      	movs	r3, #10
 800cec8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ceca:	230a      	movs	r3, #10
 800cecc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cece:	230a      	movs	r3, #10
 800ced0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ced6:	230a      	movs	r3, #10
 800ced8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ceda:	2300      	movs	r3, #0
 800cedc:	83bb      	strh	r3, [r7, #28]
 800cede:	2300      	movs	r3, #0
 800cee0:	837b      	strh	r3, [r7, #26]
 800cee2:	2300      	movs	r3, #0
 800cee4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cee6:	2300      	movs	r3, #0
 800cee8:	843b      	strh	r3, [r7, #32]
 800ceea:	e0ae      	b.n	800d04a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ceec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cef0:	49a6      	ldr	r1, [pc, #664]	; (800d18c <etharp_find_entry+0x2d4>)
 800cef2:	4613      	mov	r3, r2
 800cef4:	005b      	lsls	r3, r3, #1
 800cef6:	4413      	add	r3, r2
 800cef8:	00db      	lsls	r3, r3, #3
 800cefa:	440b      	add	r3, r1
 800cefc:	3314      	adds	r3, #20
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cf02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cf06:	2b0a      	cmp	r3, #10
 800cf08:	d105      	bne.n	800cf16 <etharp_find_entry+0x5e>
 800cf0a:	7dfb      	ldrb	r3, [r7, #23]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d102      	bne.n	800cf16 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cf10:	8c3b      	ldrh	r3, [r7, #32]
 800cf12:	847b      	strh	r3, [r7, #34]	; 0x22
 800cf14:	e095      	b.n	800d042 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cf16:	7dfb      	ldrb	r3, [r7, #23]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	f000 8092 	beq.w	800d042 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cf1e:	7dfb      	ldrb	r3, [r7, #23]
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d009      	beq.n	800cf38 <etharp_find_entry+0x80>
 800cf24:	7dfb      	ldrb	r3, [r7, #23]
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d806      	bhi.n	800cf38 <etharp_find_entry+0x80>
 800cf2a:	4b99      	ldr	r3, [pc, #612]	; (800d190 <etharp_find_entry+0x2d8>)
 800cf2c:	f240 1223 	movw	r2, #291	; 0x123
 800cf30:	4998      	ldr	r1, [pc, #608]	; (800d194 <etharp_find_entry+0x2dc>)
 800cf32:	4899      	ldr	r0, [pc, #612]	; (800d198 <etharp_find_entry+0x2e0>)
 800cf34:	f002 fa86 	bl	800f444 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d020      	beq.n	800cf80 <etharp_find_entry+0xc8>
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	6819      	ldr	r1, [r3, #0]
 800cf42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf46:	4891      	ldr	r0, [pc, #580]	; (800d18c <etharp_find_entry+0x2d4>)
 800cf48:	4613      	mov	r3, r2
 800cf4a:	005b      	lsls	r3, r3, #1
 800cf4c:	4413      	add	r3, r2
 800cf4e:	00db      	lsls	r3, r3, #3
 800cf50:	4403      	add	r3, r0
 800cf52:	3304      	adds	r3, #4
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4299      	cmp	r1, r3
 800cf58:	d112      	bne.n	800cf80 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00c      	beq.n	800cf7a <etharp_find_entry+0xc2>
 800cf60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf64:	4989      	ldr	r1, [pc, #548]	; (800d18c <etharp_find_entry+0x2d4>)
 800cf66:	4613      	mov	r3, r2
 800cf68:	005b      	lsls	r3, r3, #1
 800cf6a:	4413      	add	r3, r2
 800cf6c:	00db      	lsls	r3, r3, #3
 800cf6e:	440b      	add	r3, r1
 800cf70:	3308      	adds	r3, #8
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d102      	bne.n	800cf80 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cf7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf7e:	e100      	b.n	800d182 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cf80:	7dfb      	ldrb	r3, [r7, #23]
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d140      	bne.n	800d008 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cf86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf8a:	4980      	ldr	r1, [pc, #512]	; (800d18c <etharp_find_entry+0x2d4>)
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	005b      	lsls	r3, r3, #1
 800cf90:	4413      	add	r3, r2
 800cf92:	00db      	lsls	r3, r3, #3
 800cf94:	440b      	add	r3, r1
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d01a      	beq.n	800cfd2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cf9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfa0:	497a      	ldr	r1, [pc, #488]	; (800d18c <etharp_find_entry+0x2d4>)
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	005b      	lsls	r3, r3, #1
 800cfa6:	4413      	add	r3, r2
 800cfa8:	00db      	lsls	r3, r3, #3
 800cfaa:	440b      	add	r3, r1
 800cfac:	3312      	adds	r3, #18
 800cfae:	881b      	ldrh	r3, [r3, #0]
 800cfb0:	8bba      	ldrh	r2, [r7, #28]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d845      	bhi.n	800d042 <etharp_find_entry+0x18a>
            old_queue = i;
 800cfb6:	8c3b      	ldrh	r3, [r7, #32]
 800cfb8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cfba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfbe:	4973      	ldr	r1, [pc, #460]	; (800d18c <etharp_find_entry+0x2d4>)
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	005b      	lsls	r3, r3, #1
 800cfc4:	4413      	add	r3, r2
 800cfc6:	00db      	lsls	r3, r3, #3
 800cfc8:	440b      	add	r3, r1
 800cfca:	3312      	adds	r3, #18
 800cfcc:	881b      	ldrh	r3, [r3, #0]
 800cfce:	83bb      	strh	r3, [r7, #28]
 800cfd0:	e037      	b.n	800d042 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cfd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfd6:	496d      	ldr	r1, [pc, #436]	; (800d18c <etharp_find_entry+0x2d4>)
 800cfd8:	4613      	mov	r3, r2
 800cfda:	005b      	lsls	r3, r3, #1
 800cfdc:	4413      	add	r3, r2
 800cfde:	00db      	lsls	r3, r3, #3
 800cfe0:	440b      	add	r3, r1
 800cfe2:	3312      	adds	r3, #18
 800cfe4:	881b      	ldrh	r3, [r3, #0]
 800cfe6:	8b7a      	ldrh	r2, [r7, #26]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d82a      	bhi.n	800d042 <etharp_find_entry+0x18a>
            old_pending = i;
 800cfec:	8c3b      	ldrh	r3, [r7, #32]
 800cfee:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800cff0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cff4:	4965      	ldr	r1, [pc, #404]	; (800d18c <etharp_find_entry+0x2d4>)
 800cff6:	4613      	mov	r3, r2
 800cff8:	005b      	lsls	r3, r3, #1
 800cffa:	4413      	add	r3, r2
 800cffc:	00db      	lsls	r3, r3, #3
 800cffe:	440b      	add	r3, r1
 800d000:	3312      	adds	r3, #18
 800d002:	881b      	ldrh	r3, [r3, #0]
 800d004:	837b      	strh	r3, [r7, #26]
 800d006:	e01c      	b.n	800d042 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d008:	7dfb      	ldrb	r3, [r7, #23]
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d919      	bls.n	800d042 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d00e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d012:	495e      	ldr	r1, [pc, #376]	; (800d18c <etharp_find_entry+0x2d4>)
 800d014:	4613      	mov	r3, r2
 800d016:	005b      	lsls	r3, r3, #1
 800d018:	4413      	add	r3, r2
 800d01a:	00db      	lsls	r3, r3, #3
 800d01c:	440b      	add	r3, r1
 800d01e:	3312      	adds	r3, #18
 800d020:	881b      	ldrh	r3, [r3, #0]
 800d022:	8b3a      	ldrh	r2, [r7, #24]
 800d024:	429a      	cmp	r2, r3
 800d026:	d80c      	bhi.n	800d042 <etharp_find_entry+0x18a>
            old_stable = i;
 800d028:	8c3b      	ldrh	r3, [r7, #32]
 800d02a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d02c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d030:	4956      	ldr	r1, [pc, #344]	; (800d18c <etharp_find_entry+0x2d4>)
 800d032:	4613      	mov	r3, r2
 800d034:	005b      	lsls	r3, r3, #1
 800d036:	4413      	add	r3, r2
 800d038:	00db      	lsls	r3, r3, #3
 800d03a:	440b      	add	r3, r1
 800d03c:	3312      	adds	r3, #18
 800d03e:	881b      	ldrh	r3, [r3, #0]
 800d040:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d042:	8c3b      	ldrh	r3, [r7, #32]
 800d044:	3301      	adds	r3, #1
 800d046:	b29b      	uxth	r3, r3
 800d048:	843b      	strh	r3, [r7, #32]
 800d04a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d04e:	2b09      	cmp	r3, #9
 800d050:	f77f af4c 	ble.w	800ceec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d054:	7afb      	ldrb	r3, [r7, #11]
 800d056:	f003 0302 	and.w	r3, r3, #2
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d108      	bne.n	800d070 <etharp_find_entry+0x1b8>
 800d05e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d062:	2b0a      	cmp	r3, #10
 800d064:	d107      	bne.n	800d076 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d066:	7afb      	ldrb	r3, [r7, #11]
 800d068:	f003 0301 	and.w	r3, r3, #1
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d102      	bne.n	800d076 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d074:	e085      	b.n	800d182 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d076:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d07a:	2b09      	cmp	r3, #9
 800d07c:	dc02      	bgt.n	800d084 <etharp_find_entry+0x1cc>
    i = empty;
 800d07e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d080:	843b      	strh	r3, [r7, #32]
 800d082:	e039      	b.n	800d0f8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d084:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d088:	2b09      	cmp	r3, #9
 800d08a:	dc14      	bgt.n	800d0b6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d08c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d08e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d090:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d094:	493d      	ldr	r1, [pc, #244]	; (800d18c <etharp_find_entry+0x2d4>)
 800d096:	4613      	mov	r3, r2
 800d098:	005b      	lsls	r3, r3, #1
 800d09a:	4413      	add	r3, r2
 800d09c:	00db      	lsls	r3, r3, #3
 800d09e:	440b      	add	r3, r1
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d018      	beq.n	800d0d8 <etharp_find_entry+0x220>
 800d0a6:	4b3a      	ldr	r3, [pc, #232]	; (800d190 <etharp_find_entry+0x2d8>)
 800d0a8:	f240 126d 	movw	r2, #365	; 0x16d
 800d0ac:	493b      	ldr	r1, [pc, #236]	; (800d19c <etharp_find_entry+0x2e4>)
 800d0ae:	483a      	ldr	r0, [pc, #232]	; (800d198 <etharp_find_entry+0x2e0>)
 800d0b0:	f002 f9c8 	bl	800f444 <iprintf>
 800d0b4:	e010      	b.n	800d0d8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d0b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d0ba:	2b09      	cmp	r3, #9
 800d0bc:	dc02      	bgt.n	800d0c4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d0be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0c0:	843b      	strh	r3, [r7, #32]
 800d0c2:	e009      	b.n	800d0d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d0c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d0c8:	2b09      	cmp	r3, #9
 800d0ca:	dc02      	bgt.n	800d0d2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d0cc:	8bfb      	ldrh	r3, [r7, #30]
 800d0ce:	843b      	strh	r3, [r7, #32]
 800d0d0:	e002      	b.n	800d0d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d0d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0d6:	e054      	b.n	800d182 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d0d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d0dc:	2b09      	cmp	r3, #9
 800d0de:	dd06      	ble.n	800d0ee <etharp_find_entry+0x236>
 800d0e0:	4b2b      	ldr	r3, [pc, #172]	; (800d190 <etharp_find_entry+0x2d8>)
 800d0e2:	f240 127f 	movw	r2, #383	; 0x17f
 800d0e6:	492e      	ldr	r1, [pc, #184]	; (800d1a0 <etharp_find_entry+0x2e8>)
 800d0e8:	482b      	ldr	r0, [pc, #172]	; (800d198 <etharp_find_entry+0x2e0>)
 800d0ea:	f002 f9ab 	bl	800f444 <iprintf>
    etharp_free_entry(i);
 800d0ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7ff fe06 	bl	800cd04 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d0f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d0fc:	2b09      	cmp	r3, #9
 800d0fe:	dd06      	ble.n	800d10e <etharp_find_entry+0x256>
 800d100:	4b23      	ldr	r3, [pc, #140]	; (800d190 <etharp_find_entry+0x2d8>)
 800d102:	f240 1283 	movw	r2, #387	; 0x183
 800d106:	4926      	ldr	r1, [pc, #152]	; (800d1a0 <etharp_find_entry+0x2e8>)
 800d108:	4823      	ldr	r0, [pc, #140]	; (800d198 <etharp_find_entry+0x2e0>)
 800d10a:	f002 f99b 	bl	800f444 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d10e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d112:	491e      	ldr	r1, [pc, #120]	; (800d18c <etharp_find_entry+0x2d4>)
 800d114:	4613      	mov	r3, r2
 800d116:	005b      	lsls	r3, r3, #1
 800d118:	4413      	add	r3, r2
 800d11a:	00db      	lsls	r3, r3, #3
 800d11c:	440b      	add	r3, r1
 800d11e:	3314      	adds	r3, #20
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d006      	beq.n	800d134 <etharp_find_entry+0x27c>
 800d126:	4b1a      	ldr	r3, [pc, #104]	; (800d190 <etharp_find_entry+0x2d8>)
 800d128:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d12c:	491d      	ldr	r1, [pc, #116]	; (800d1a4 <etharp_find_entry+0x2ec>)
 800d12e:	481a      	ldr	r0, [pc, #104]	; (800d198 <etharp_find_entry+0x2e0>)
 800d130:	f002 f988 	bl	800f444 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00b      	beq.n	800d152 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d13a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6819      	ldr	r1, [r3, #0]
 800d142:	4812      	ldr	r0, [pc, #72]	; (800d18c <etharp_find_entry+0x2d4>)
 800d144:	4613      	mov	r3, r2
 800d146:	005b      	lsls	r3, r3, #1
 800d148:	4413      	add	r3, r2
 800d14a:	00db      	lsls	r3, r3, #3
 800d14c:	4403      	add	r3, r0
 800d14e:	3304      	adds	r3, #4
 800d150:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d152:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d156:	490d      	ldr	r1, [pc, #52]	; (800d18c <etharp_find_entry+0x2d4>)
 800d158:	4613      	mov	r3, r2
 800d15a:	005b      	lsls	r3, r3, #1
 800d15c:	4413      	add	r3, r2
 800d15e:	00db      	lsls	r3, r3, #3
 800d160:	440b      	add	r3, r1
 800d162:	3312      	adds	r3, #18
 800d164:	2200      	movs	r2, #0
 800d166:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d168:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d16c:	4907      	ldr	r1, [pc, #28]	; (800d18c <etharp_find_entry+0x2d4>)
 800d16e:	4613      	mov	r3, r2
 800d170:	005b      	lsls	r3, r3, #1
 800d172:	4413      	add	r3, r2
 800d174:	00db      	lsls	r3, r3, #3
 800d176:	440b      	add	r3, r1
 800d178:	3308      	adds	r3, #8
 800d17a:	687a      	ldr	r2, [r7, #4]
 800d17c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d17e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d182:	4618      	mov	r0, r3
 800d184:	3728      	adds	r7, #40	; 0x28
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	20008810 	.word	0x20008810
 800d190:	0801292c 	.word	0x0801292c
 800d194:	08012964 	.word	0x08012964
 800d198:	080129a4 	.word	0x080129a4
 800d19c:	080129cc 	.word	0x080129cc
 800d1a0:	080129e4 	.word	0x080129e4
 800d1a4:	080129f8 	.word	0x080129f8

0800d1a8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b088      	sub	sp, #32
 800d1ac:	af02      	add	r7, sp, #8
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	60b9      	str	r1, [r7, #8]
 800d1b2:	607a      	str	r2, [r7, #4]
 800d1b4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d1bc:	2b06      	cmp	r3, #6
 800d1be:	d006      	beq.n	800d1ce <etharp_update_arp_entry+0x26>
 800d1c0:	4b48      	ldr	r3, [pc, #288]	; (800d2e4 <etharp_update_arp_entry+0x13c>)
 800d1c2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d1c6:	4948      	ldr	r1, [pc, #288]	; (800d2e8 <etharp_update_arp_entry+0x140>)
 800d1c8:	4848      	ldr	r0, [pc, #288]	; (800d2ec <etharp_update_arp_entry+0x144>)
 800d1ca:	f002 f93b 	bl	800f444 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d012      	beq.n	800d1fa <etharp_update_arp_entry+0x52>
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00e      	beq.n	800d1fa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	68f9      	ldr	r1, [r7, #12]
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f001 f8fe 	bl	800e3e4 <ip4_addr_isbroadcast_u32>
 800d1e8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d105      	bne.n	800d1fa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d1f6:	2be0      	cmp	r3, #224	; 0xe0
 800d1f8:	d102      	bne.n	800d200 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d1fa:	f06f 030f 	mvn.w	r3, #15
 800d1fe:	e06c      	b.n	800d2da <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d200:	78fb      	ldrb	r3, [r7, #3]
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	4619      	mov	r1, r3
 800d206:	68b8      	ldr	r0, [r7, #8]
 800d208:	f7ff fe56 	bl	800ceb8 <etharp_find_entry>
 800d20c:	4603      	mov	r3, r0
 800d20e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d210:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d214:	2b00      	cmp	r3, #0
 800d216:	da02      	bge.n	800d21e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d218:	8afb      	ldrh	r3, [r7, #22]
 800d21a:	b25b      	sxtb	r3, r3
 800d21c:	e05d      	b.n	800d2da <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d21e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d222:	4933      	ldr	r1, [pc, #204]	; (800d2f0 <etharp_update_arp_entry+0x148>)
 800d224:	4613      	mov	r3, r2
 800d226:	005b      	lsls	r3, r3, #1
 800d228:	4413      	add	r3, r2
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	440b      	add	r3, r1
 800d22e:	3314      	adds	r3, #20
 800d230:	2202      	movs	r2, #2
 800d232:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d234:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d238:	492d      	ldr	r1, [pc, #180]	; (800d2f0 <etharp_update_arp_entry+0x148>)
 800d23a:	4613      	mov	r3, r2
 800d23c:	005b      	lsls	r3, r3, #1
 800d23e:	4413      	add	r3, r2
 800d240:	00db      	lsls	r3, r3, #3
 800d242:	440b      	add	r3, r1
 800d244:	3308      	adds	r3, #8
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d24a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d24e:	4613      	mov	r3, r2
 800d250:	005b      	lsls	r3, r3, #1
 800d252:	4413      	add	r3, r2
 800d254:	00db      	lsls	r3, r3, #3
 800d256:	3308      	adds	r3, #8
 800d258:	4a25      	ldr	r2, [pc, #148]	; (800d2f0 <etharp_update_arp_entry+0x148>)
 800d25a:	4413      	add	r3, r2
 800d25c:	3304      	adds	r3, #4
 800d25e:	2206      	movs	r2, #6
 800d260:	6879      	ldr	r1, [r7, #4]
 800d262:	4618      	mov	r0, r3
 800d264:	f002 f8d8 	bl	800f418 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d268:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d26c:	4920      	ldr	r1, [pc, #128]	; (800d2f0 <etharp_update_arp_entry+0x148>)
 800d26e:	4613      	mov	r3, r2
 800d270:	005b      	lsls	r3, r3, #1
 800d272:	4413      	add	r3, r2
 800d274:	00db      	lsls	r3, r3, #3
 800d276:	440b      	add	r3, r1
 800d278:	3312      	adds	r3, #18
 800d27a:	2200      	movs	r2, #0
 800d27c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d27e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d282:	491b      	ldr	r1, [pc, #108]	; (800d2f0 <etharp_update_arp_entry+0x148>)
 800d284:	4613      	mov	r3, r2
 800d286:	005b      	lsls	r3, r3, #1
 800d288:	4413      	add	r3, r2
 800d28a:	00db      	lsls	r3, r3, #3
 800d28c:	440b      	add	r3, r1
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d021      	beq.n	800d2d8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d294:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d298:	4915      	ldr	r1, [pc, #84]	; (800d2f0 <etharp_update_arp_entry+0x148>)
 800d29a:	4613      	mov	r3, r2
 800d29c:	005b      	lsls	r3, r3, #1
 800d29e:	4413      	add	r3, r2
 800d2a0:	00db      	lsls	r3, r3, #3
 800d2a2:	440b      	add	r3, r1
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d2a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d2ac:	4910      	ldr	r1, [pc, #64]	; (800d2f0 <etharp_update_arp_entry+0x148>)
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	005b      	lsls	r3, r3, #1
 800d2b2:	4413      	add	r3, r2
 800d2b4:	00db      	lsls	r3, r3, #3
 800d2b6:	440b      	add	r3, r1
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d2c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d2c6:	9300      	str	r3, [sp, #0]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6939      	ldr	r1, [r7, #16]
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f002 f827 	bl	800f320 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d2d2:	6938      	ldr	r0, [r7, #16]
 800d2d4:	f7f9 fe28 	bl	8006f28 <pbuf_free>
  }
  return ERR_OK;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3718      	adds	r7, #24
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	0801292c 	.word	0x0801292c
 800d2e8:	08012a24 	.word	0x08012a24
 800d2ec:	080129a4 	.word	0x080129a4
 800d2f0:	20008810 	.word	0x20008810

0800d2f4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	60fb      	str	r3, [r7, #12]
 800d300:	e01e      	b.n	800d340 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d302:	4913      	ldr	r1, [pc, #76]	; (800d350 <etharp_cleanup_netif+0x5c>)
 800d304:	68fa      	ldr	r2, [r7, #12]
 800d306:	4613      	mov	r3, r2
 800d308:	005b      	lsls	r3, r3, #1
 800d30a:	4413      	add	r3, r2
 800d30c:	00db      	lsls	r3, r3, #3
 800d30e:	440b      	add	r3, r1
 800d310:	3314      	adds	r3, #20
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d316:	7afb      	ldrb	r3, [r7, #11]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00e      	beq.n	800d33a <etharp_cleanup_netif+0x46>
 800d31c:	490c      	ldr	r1, [pc, #48]	; (800d350 <etharp_cleanup_netif+0x5c>)
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	4613      	mov	r3, r2
 800d322:	005b      	lsls	r3, r3, #1
 800d324:	4413      	add	r3, r2
 800d326:	00db      	lsls	r3, r3, #3
 800d328:	440b      	add	r3, r1
 800d32a:	3308      	adds	r3, #8
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	429a      	cmp	r2, r3
 800d332:	d102      	bne.n	800d33a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d334:	68f8      	ldr	r0, [r7, #12]
 800d336:	f7ff fce5 	bl	800cd04 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	3301      	adds	r3, #1
 800d33e:	60fb      	str	r3, [r7, #12]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2b09      	cmp	r3, #9
 800d344:	dddd      	ble.n	800d302 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d346:	bf00      	nop
 800d348:	bf00      	nop
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	20008810 	.word	0x20008810

0800d354 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d354:	b5b0      	push	{r4, r5, r7, lr}
 800d356:	b08a      	sub	sp, #40	; 0x28
 800d358:	af04      	add	r7, sp, #16
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d107      	bne.n	800d374 <etharp_input+0x20>
 800d364:	4b3d      	ldr	r3, [pc, #244]	; (800d45c <etharp_input+0x108>)
 800d366:	f240 228a 	movw	r2, #650	; 0x28a
 800d36a:	493d      	ldr	r1, [pc, #244]	; (800d460 <etharp_input+0x10c>)
 800d36c:	483d      	ldr	r0, [pc, #244]	; (800d464 <etharp_input+0x110>)
 800d36e:	f002 f869 	bl	800f444 <iprintf>
 800d372:	e06f      	b.n	800d454 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	685b      	ldr	r3, [r3, #4]
 800d378:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	881b      	ldrh	r3, [r3, #0]
 800d37e:	b29b      	uxth	r3, r3
 800d380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d384:	d10c      	bne.n	800d3a0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d38a:	2b06      	cmp	r3, #6
 800d38c:	d108      	bne.n	800d3a0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d392:	2b04      	cmp	r3, #4
 800d394:	d104      	bne.n	800d3a0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	885b      	ldrh	r3, [r3, #2]
 800d39a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d39c:	2b08      	cmp	r3, #8
 800d39e:	d003      	beq.n	800d3a8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7f9 fdc1 	bl	8006f28 <pbuf_free>
    return;
 800d3a6:	e055      	b.n	800d454 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	330e      	adds	r3, #14
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	3318      	adds	r3, #24
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	3304      	adds	r3, #4
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d102      	bne.n	800d3c8 <etharp_input+0x74>
    for_us = 0;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	75fb      	strb	r3, [r7, #23]
 800d3c6:	e009      	b.n	800d3dc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d3c8:	68ba      	ldr	r2, [r7, #8]
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	3304      	adds	r3, #4
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	bf0c      	ite	eq
 800d3d4:	2301      	moveq	r3, #1
 800d3d6:	2300      	movne	r3, #0
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	f103 0208 	add.w	r2, r3, #8
 800d3e2:	7dfb      	ldrb	r3, [r7, #23]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d001      	beq.n	800d3ec <etharp_input+0x98>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	e000      	b.n	800d3ee <etharp_input+0x9a>
 800d3ec:	2302      	movs	r3, #2
 800d3ee:	f107 010c 	add.w	r1, r7, #12
 800d3f2:	6838      	ldr	r0, [r7, #0]
 800d3f4:	f7ff fed8 	bl	800d1a8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	88db      	ldrh	r3, [r3, #6]
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d402:	d003      	beq.n	800d40c <etharp_input+0xb8>
 800d404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d408:	d01e      	beq.n	800d448 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d40a:	e020      	b.n	800d44e <etharp_input+0xfa>
      if (for_us) {
 800d40c:	7dfb      	ldrb	r3, [r7, #23]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d01c      	beq.n	800d44c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d428:	693a      	ldr	r2, [r7, #16]
 800d42a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d42c:	2102      	movs	r1, #2
 800d42e:	9103      	str	r1, [sp, #12]
 800d430:	f107 010c 	add.w	r1, r7, #12
 800d434:	9102      	str	r1, [sp, #8]
 800d436:	9201      	str	r2, [sp, #4]
 800d438:	9300      	str	r3, [sp, #0]
 800d43a:	462b      	mov	r3, r5
 800d43c:	4622      	mov	r2, r4
 800d43e:	4601      	mov	r1, r0
 800d440:	6838      	ldr	r0, [r7, #0]
 800d442:	f000 faeb 	bl	800da1c <etharp_raw>
      break;
 800d446:	e001      	b.n	800d44c <etharp_input+0xf8>
      break;
 800d448:	bf00      	nop
 800d44a:	e000      	b.n	800d44e <etharp_input+0xfa>
      break;
 800d44c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f7f9 fd6a 	bl	8006f28 <pbuf_free>
}
 800d454:	3718      	adds	r7, #24
 800d456:	46bd      	mov	sp, r7
 800d458:	bdb0      	pop	{r4, r5, r7, pc}
 800d45a:	bf00      	nop
 800d45c:	0801292c 	.word	0x0801292c
 800d460:	08012a7c 	.word	0x08012a7c
 800d464:	080129a4 	.word	0x080129a4

0800d468 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b086      	sub	sp, #24
 800d46c:	af02      	add	r7, sp, #8
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	60b9      	str	r1, [r7, #8]
 800d472:	4613      	mov	r3, r2
 800d474:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d476:	79fa      	ldrb	r2, [r7, #7]
 800d478:	4944      	ldr	r1, [pc, #272]	; (800d58c <etharp_output_to_arp_index+0x124>)
 800d47a:	4613      	mov	r3, r2
 800d47c:	005b      	lsls	r3, r3, #1
 800d47e:	4413      	add	r3, r2
 800d480:	00db      	lsls	r3, r3, #3
 800d482:	440b      	add	r3, r1
 800d484:	3314      	adds	r3, #20
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d806      	bhi.n	800d49a <etharp_output_to_arp_index+0x32>
 800d48c:	4b40      	ldr	r3, [pc, #256]	; (800d590 <etharp_output_to_arp_index+0x128>)
 800d48e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d492:	4940      	ldr	r1, [pc, #256]	; (800d594 <etharp_output_to_arp_index+0x12c>)
 800d494:	4840      	ldr	r0, [pc, #256]	; (800d598 <etharp_output_to_arp_index+0x130>)
 800d496:	f001 ffd5 	bl	800f444 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d49a:	79fa      	ldrb	r2, [r7, #7]
 800d49c:	493b      	ldr	r1, [pc, #236]	; (800d58c <etharp_output_to_arp_index+0x124>)
 800d49e:	4613      	mov	r3, r2
 800d4a0:	005b      	lsls	r3, r3, #1
 800d4a2:	4413      	add	r3, r2
 800d4a4:	00db      	lsls	r3, r3, #3
 800d4a6:	440b      	add	r3, r1
 800d4a8:	3314      	adds	r3, #20
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	d153      	bne.n	800d558 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d4b0:	79fa      	ldrb	r2, [r7, #7]
 800d4b2:	4936      	ldr	r1, [pc, #216]	; (800d58c <etharp_output_to_arp_index+0x124>)
 800d4b4:	4613      	mov	r3, r2
 800d4b6:	005b      	lsls	r3, r3, #1
 800d4b8:	4413      	add	r3, r2
 800d4ba:	00db      	lsls	r3, r3, #3
 800d4bc:	440b      	add	r3, r1
 800d4be:	3312      	adds	r3, #18
 800d4c0:	881b      	ldrh	r3, [r3, #0]
 800d4c2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d4c6:	d919      	bls.n	800d4fc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d4c8:	79fa      	ldrb	r2, [r7, #7]
 800d4ca:	4613      	mov	r3, r2
 800d4cc:	005b      	lsls	r3, r3, #1
 800d4ce:	4413      	add	r3, r2
 800d4d0:	00db      	lsls	r3, r3, #3
 800d4d2:	4a2e      	ldr	r2, [pc, #184]	; (800d58c <etharp_output_to_arp_index+0x124>)
 800d4d4:	4413      	add	r3, r2
 800d4d6:	3304      	adds	r3, #4
 800d4d8:	4619      	mov	r1, r3
 800d4da:	68f8      	ldr	r0, [r7, #12]
 800d4dc:	f000 fb4c 	bl	800db78 <etharp_request>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d138      	bne.n	800d558 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d4e6:	79fa      	ldrb	r2, [r7, #7]
 800d4e8:	4928      	ldr	r1, [pc, #160]	; (800d58c <etharp_output_to_arp_index+0x124>)
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	005b      	lsls	r3, r3, #1
 800d4ee:	4413      	add	r3, r2
 800d4f0:	00db      	lsls	r3, r3, #3
 800d4f2:	440b      	add	r3, r1
 800d4f4:	3314      	adds	r3, #20
 800d4f6:	2203      	movs	r2, #3
 800d4f8:	701a      	strb	r2, [r3, #0]
 800d4fa:	e02d      	b.n	800d558 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d4fc:	79fa      	ldrb	r2, [r7, #7]
 800d4fe:	4923      	ldr	r1, [pc, #140]	; (800d58c <etharp_output_to_arp_index+0x124>)
 800d500:	4613      	mov	r3, r2
 800d502:	005b      	lsls	r3, r3, #1
 800d504:	4413      	add	r3, r2
 800d506:	00db      	lsls	r3, r3, #3
 800d508:	440b      	add	r3, r1
 800d50a:	3312      	adds	r3, #18
 800d50c:	881b      	ldrh	r3, [r3, #0]
 800d50e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d512:	d321      	bcc.n	800d558 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d514:	79fa      	ldrb	r2, [r7, #7]
 800d516:	4613      	mov	r3, r2
 800d518:	005b      	lsls	r3, r3, #1
 800d51a:	4413      	add	r3, r2
 800d51c:	00db      	lsls	r3, r3, #3
 800d51e:	4a1b      	ldr	r2, [pc, #108]	; (800d58c <etharp_output_to_arp_index+0x124>)
 800d520:	4413      	add	r3, r2
 800d522:	1d19      	adds	r1, r3, #4
 800d524:	79fa      	ldrb	r2, [r7, #7]
 800d526:	4613      	mov	r3, r2
 800d528:	005b      	lsls	r3, r3, #1
 800d52a:	4413      	add	r3, r2
 800d52c:	00db      	lsls	r3, r3, #3
 800d52e:	3308      	adds	r3, #8
 800d530:	4a16      	ldr	r2, [pc, #88]	; (800d58c <etharp_output_to_arp_index+0x124>)
 800d532:	4413      	add	r3, r2
 800d534:	3304      	adds	r3, #4
 800d536:	461a      	mov	r2, r3
 800d538:	68f8      	ldr	r0, [r7, #12]
 800d53a:	f000 fafb 	bl	800db34 <etharp_request_dst>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	d109      	bne.n	800d558 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d544:	79fa      	ldrb	r2, [r7, #7]
 800d546:	4911      	ldr	r1, [pc, #68]	; (800d58c <etharp_output_to_arp_index+0x124>)
 800d548:	4613      	mov	r3, r2
 800d54a:	005b      	lsls	r3, r3, #1
 800d54c:	4413      	add	r3, r2
 800d54e:	00db      	lsls	r3, r3, #3
 800d550:	440b      	add	r3, r1
 800d552:	3314      	adds	r3, #20
 800d554:	2203      	movs	r2, #3
 800d556:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d55e:	79fa      	ldrb	r2, [r7, #7]
 800d560:	4613      	mov	r3, r2
 800d562:	005b      	lsls	r3, r3, #1
 800d564:	4413      	add	r3, r2
 800d566:	00db      	lsls	r3, r3, #3
 800d568:	3308      	adds	r3, #8
 800d56a:	4a08      	ldr	r2, [pc, #32]	; (800d58c <etharp_output_to_arp_index+0x124>)
 800d56c:	4413      	add	r3, r2
 800d56e:	3304      	adds	r3, #4
 800d570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d574:	9200      	str	r2, [sp, #0]
 800d576:	460a      	mov	r2, r1
 800d578:	68b9      	ldr	r1, [r7, #8]
 800d57a:	68f8      	ldr	r0, [r7, #12]
 800d57c:	f001 fed0 	bl	800f320 <ethernet_output>
 800d580:	4603      	mov	r3, r0
}
 800d582:	4618      	mov	r0, r3
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	20008810 	.word	0x20008810
 800d590:	0801292c 	.word	0x0801292c
 800d594:	08012a9c 	.word	0x08012a9c
 800d598:	080129a4 	.word	0x080129a4

0800d59c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b08a      	sub	sp, #40	; 0x28
 800d5a0:	af02      	add	r7, sp, #8
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d106      	bne.n	800d5c0 <etharp_output+0x24>
 800d5b2:	4b73      	ldr	r3, [pc, #460]	; (800d780 <etharp_output+0x1e4>)
 800d5b4:	f240 321e 	movw	r2, #798	; 0x31e
 800d5b8:	4972      	ldr	r1, [pc, #456]	; (800d784 <etharp_output+0x1e8>)
 800d5ba:	4873      	ldr	r0, [pc, #460]	; (800d788 <etharp_output+0x1ec>)
 800d5bc:	f001 ff42 	bl	800f444 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d106      	bne.n	800d5d4 <etharp_output+0x38>
 800d5c6:	4b6e      	ldr	r3, [pc, #440]	; (800d780 <etharp_output+0x1e4>)
 800d5c8:	f240 321f 	movw	r2, #799	; 0x31f
 800d5cc:	496f      	ldr	r1, [pc, #444]	; (800d78c <etharp_output+0x1f0>)
 800d5ce:	486e      	ldr	r0, [pc, #440]	; (800d788 <etharp_output+0x1ec>)
 800d5d0:	f001 ff38 	bl	800f444 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d106      	bne.n	800d5e8 <etharp_output+0x4c>
 800d5da:	4b69      	ldr	r3, [pc, #420]	; (800d780 <etharp_output+0x1e4>)
 800d5dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d5e0:	496b      	ldr	r1, [pc, #428]	; (800d790 <etharp_output+0x1f4>)
 800d5e2:	4869      	ldr	r0, [pc, #420]	; (800d788 <etharp_output+0x1ec>)
 800d5e4:	f001 ff2e 	bl	800f444 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	68f9      	ldr	r1, [r7, #12]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f000 fef8 	bl	800e3e4 <ip4_addr_isbroadcast_u32>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d002      	beq.n	800d600 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d5fa:	4b66      	ldr	r3, [pc, #408]	; (800d794 <etharp_output+0x1f8>)
 800d5fc:	61fb      	str	r3, [r7, #28]
 800d5fe:	e0af      	b.n	800d760 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d608:	2be0      	cmp	r3, #224	; 0xe0
 800d60a:	d118      	bne.n	800d63e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d60c:	2301      	movs	r3, #1
 800d60e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d610:	2300      	movs	r3, #0
 800d612:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d614:	235e      	movs	r3, #94	; 0x5e
 800d616:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	3301      	adds	r3, #1
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d622:	b2db      	uxtb	r3, r3
 800d624:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	3302      	adds	r3, #2
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	3303      	adds	r3, #3
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d636:	f107 0310 	add.w	r3, r7, #16
 800d63a:	61fb      	str	r3, [r7, #28]
 800d63c:	e090      	b.n	800d760 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	3304      	adds	r3, #4
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	405a      	eors	r2, r3
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	3308      	adds	r3, #8
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4013      	ands	r3, r2
 800d652:	2b00      	cmp	r3, #0
 800d654:	d012      	beq.n	800d67c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d65c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d660:	4293      	cmp	r3, r2
 800d662:	d00b      	beq.n	800d67c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	330c      	adds	r3, #12
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d003      	beq.n	800d676 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	330c      	adds	r3, #12
 800d672:	61bb      	str	r3, [r7, #24]
 800d674:	e002      	b.n	800d67c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d676:	f06f 0303 	mvn.w	r3, #3
 800d67a:	e07d      	b.n	800d778 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d67c:	4b46      	ldr	r3, [pc, #280]	; (800d798 <etharp_output+0x1fc>)
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	4619      	mov	r1, r3
 800d682:	4a46      	ldr	r2, [pc, #280]	; (800d79c <etharp_output+0x200>)
 800d684:	460b      	mov	r3, r1
 800d686:	005b      	lsls	r3, r3, #1
 800d688:	440b      	add	r3, r1
 800d68a:	00db      	lsls	r3, r3, #3
 800d68c:	4413      	add	r3, r2
 800d68e:	3314      	adds	r3, #20
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	2b01      	cmp	r3, #1
 800d694:	d925      	bls.n	800d6e2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d696:	4b40      	ldr	r3, [pc, #256]	; (800d798 <etharp_output+0x1fc>)
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	4619      	mov	r1, r3
 800d69c:	4a3f      	ldr	r2, [pc, #252]	; (800d79c <etharp_output+0x200>)
 800d69e:	460b      	mov	r3, r1
 800d6a0:	005b      	lsls	r3, r3, #1
 800d6a2:	440b      	add	r3, r1
 800d6a4:	00db      	lsls	r3, r3, #3
 800d6a6:	4413      	add	r3, r2
 800d6a8:	3308      	adds	r3, #8
 800d6aa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d117      	bne.n	800d6e2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	681a      	ldr	r2, [r3, #0]
 800d6b6:	4b38      	ldr	r3, [pc, #224]	; (800d798 <etharp_output+0x1fc>)
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	4937      	ldr	r1, [pc, #220]	; (800d79c <etharp_output+0x200>)
 800d6be:	4603      	mov	r3, r0
 800d6c0:	005b      	lsls	r3, r3, #1
 800d6c2:	4403      	add	r3, r0
 800d6c4:	00db      	lsls	r3, r3, #3
 800d6c6:	440b      	add	r3, r1
 800d6c8:	3304      	adds	r3, #4
 800d6ca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d108      	bne.n	800d6e2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d6d0:	4b31      	ldr	r3, [pc, #196]	; (800d798 <etharp_output+0x1fc>)
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	68b9      	ldr	r1, [r7, #8]
 800d6d8:	68f8      	ldr	r0, [r7, #12]
 800d6da:	f7ff fec5 	bl	800d468 <etharp_output_to_arp_index>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	e04a      	b.n	800d778 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	75fb      	strb	r3, [r7, #23]
 800d6e6:	e031      	b.n	800d74c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d6e8:	7dfa      	ldrb	r2, [r7, #23]
 800d6ea:	492c      	ldr	r1, [pc, #176]	; (800d79c <etharp_output+0x200>)
 800d6ec:	4613      	mov	r3, r2
 800d6ee:	005b      	lsls	r3, r3, #1
 800d6f0:	4413      	add	r3, r2
 800d6f2:	00db      	lsls	r3, r3, #3
 800d6f4:	440b      	add	r3, r1
 800d6f6:	3314      	adds	r3, #20
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d923      	bls.n	800d746 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d6fe:	7dfa      	ldrb	r2, [r7, #23]
 800d700:	4926      	ldr	r1, [pc, #152]	; (800d79c <etharp_output+0x200>)
 800d702:	4613      	mov	r3, r2
 800d704:	005b      	lsls	r3, r3, #1
 800d706:	4413      	add	r3, r2
 800d708:	00db      	lsls	r3, r3, #3
 800d70a:	440b      	add	r3, r1
 800d70c:	3308      	adds	r3, #8
 800d70e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d710:	68fa      	ldr	r2, [r7, #12]
 800d712:	429a      	cmp	r2, r3
 800d714:	d117      	bne.n	800d746 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d716:	69bb      	ldr	r3, [r7, #24]
 800d718:	6819      	ldr	r1, [r3, #0]
 800d71a:	7dfa      	ldrb	r2, [r7, #23]
 800d71c:	481f      	ldr	r0, [pc, #124]	; (800d79c <etharp_output+0x200>)
 800d71e:	4613      	mov	r3, r2
 800d720:	005b      	lsls	r3, r3, #1
 800d722:	4413      	add	r3, r2
 800d724:	00db      	lsls	r3, r3, #3
 800d726:	4403      	add	r3, r0
 800d728:	3304      	adds	r3, #4
 800d72a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d72c:	4299      	cmp	r1, r3
 800d72e:	d10a      	bne.n	800d746 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d730:	4a19      	ldr	r2, [pc, #100]	; (800d798 <etharp_output+0x1fc>)
 800d732:	7dfb      	ldrb	r3, [r7, #23]
 800d734:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d736:	7dfb      	ldrb	r3, [r7, #23]
 800d738:	461a      	mov	r2, r3
 800d73a:	68b9      	ldr	r1, [r7, #8]
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f7ff fe93 	bl	800d468 <etharp_output_to_arp_index>
 800d742:	4603      	mov	r3, r0
 800d744:	e018      	b.n	800d778 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d746:	7dfb      	ldrb	r3, [r7, #23]
 800d748:	3301      	adds	r3, #1
 800d74a:	75fb      	strb	r3, [r7, #23]
 800d74c:	7dfb      	ldrb	r3, [r7, #23]
 800d74e:	2b09      	cmp	r3, #9
 800d750:	d9ca      	bls.n	800d6e8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d752:	68ba      	ldr	r2, [r7, #8]
 800d754:	69b9      	ldr	r1, [r7, #24]
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f000 f822 	bl	800d7a0 <etharp_query>
 800d75c:	4603      	mov	r3, r0
 800d75e:	e00b      	b.n	800d778 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d766:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d76a:	9300      	str	r3, [sp, #0]
 800d76c:	69fb      	ldr	r3, [r7, #28]
 800d76e:	68b9      	ldr	r1, [r7, #8]
 800d770:	68f8      	ldr	r0, [r7, #12]
 800d772:	f001 fdd5 	bl	800f320 <ethernet_output>
 800d776:	4603      	mov	r3, r0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3720      	adds	r7, #32
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	0801292c 	.word	0x0801292c
 800d784:	08012a7c 	.word	0x08012a7c
 800d788:	080129a4 	.word	0x080129a4
 800d78c:	08012acc 	.word	0x08012acc
 800d790:	08012a6c 	.word	0x08012a6c
 800d794:	080130e8 	.word	0x080130e8
 800d798:	20008900 	.word	0x20008900
 800d79c:	20008810 	.word	0x20008810

0800d7a0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b08c      	sub	sp, #48	; 0x30
 800d7a4:	af02      	add	r7, sp, #8
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	60b9      	str	r1, [r7, #8]
 800d7aa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	3326      	adds	r3, #38	; 0x26
 800d7b0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d7b2:	23ff      	movs	r3, #255	; 0xff
 800d7b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	68f9      	ldr	r1, [r7, #12]
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 fe0e 	bl	800e3e4 <ip4_addr_isbroadcast_u32>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d10c      	bne.n	800d7e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d7d6:	2be0      	cmp	r3, #224	; 0xe0
 800d7d8:	d006      	beq.n	800d7e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d003      	beq.n	800d7e8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d102      	bne.n	800d7ee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d7e8:	f06f 030f 	mvn.w	r3, #15
 800d7ec:	e101      	b.n	800d9f2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d7ee:	68fa      	ldr	r2, [r7, #12]
 800d7f0:	2101      	movs	r1, #1
 800d7f2:	68b8      	ldr	r0, [r7, #8]
 800d7f4:	f7ff fb60 	bl	800ceb8 <etharp_find_entry>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d7fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d800:	2b00      	cmp	r3, #0
 800d802:	da02      	bge.n	800d80a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d804:	8a7b      	ldrh	r3, [r7, #18]
 800d806:	b25b      	sxtb	r3, r3
 800d808:	e0f3      	b.n	800d9f2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d80a:	8a7b      	ldrh	r3, [r7, #18]
 800d80c:	2b7e      	cmp	r3, #126	; 0x7e
 800d80e:	d906      	bls.n	800d81e <etharp_query+0x7e>
 800d810:	4b7a      	ldr	r3, [pc, #488]	; (800d9fc <etharp_query+0x25c>)
 800d812:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d816:	497a      	ldr	r1, [pc, #488]	; (800da00 <etharp_query+0x260>)
 800d818:	487a      	ldr	r0, [pc, #488]	; (800da04 <etharp_query+0x264>)
 800d81a:	f001 fe13 	bl	800f444 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d81e:	8a7b      	ldrh	r3, [r7, #18]
 800d820:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d822:	7c7a      	ldrb	r2, [r7, #17]
 800d824:	4978      	ldr	r1, [pc, #480]	; (800da08 <etharp_query+0x268>)
 800d826:	4613      	mov	r3, r2
 800d828:	005b      	lsls	r3, r3, #1
 800d82a:	4413      	add	r3, r2
 800d82c:	00db      	lsls	r3, r3, #3
 800d82e:	440b      	add	r3, r1
 800d830:	3314      	adds	r3, #20
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d115      	bne.n	800d864 <etharp_query+0xc4>
    is_new_entry = 1;
 800d838:	2301      	movs	r3, #1
 800d83a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d83c:	7c7a      	ldrb	r2, [r7, #17]
 800d83e:	4972      	ldr	r1, [pc, #456]	; (800da08 <etharp_query+0x268>)
 800d840:	4613      	mov	r3, r2
 800d842:	005b      	lsls	r3, r3, #1
 800d844:	4413      	add	r3, r2
 800d846:	00db      	lsls	r3, r3, #3
 800d848:	440b      	add	r3, r1
 800d84a:	3314      	adds	r3, #20
 800d84c:	2201      	movs	r2, #1
 800d84e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d850:	7c7a      	ldrb	r2, [r7, #17]
 800d852:	496d      	ldr	r1, [pc, #436]	; (800da08 <etharp_query+0x268>)
 800d854:	4613      	mov	r3, r2
 800d856:	005b      	lsls	r3, r3, #1
 800d858:	4413      	add	r3, r2
 800d85a:	00db      	lsls	r3, r3, #3
 800d85c:	440b      	add	r3, r1
 800d85e:	3308      	adds	r3, #8
 800d860:	68fa      	ldr	r2, [r7, #12]
 800d862:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d864:	7c7a      	ldrb	r2, [r7, #17]
 800d866:	4968      	ldr	r1, [pc, #416]	; (800da08 <etharp_query+0x268>)
 800d868:	4613      	mov	r3, r2
 800d86a:	005b      	lsls	r3, r3, #1
 800d86c:	4413      	add	r3, r2
 800d86e:	00db      	lsls	r3, r3, #3
 800d870:	440b      	add	r3, r1
 800d872:	3314      	adds	r3, #20
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	2b01      	cmp	r3, #1
 800d878:	d011      	beq.n	800d89e <etharp_query+0xfe>
 800d87a:	7c7a      	ldrb	r2, [r7, #17]
 800d87c:	4962      	ldr	r1, [pc, #392]	; (800da08 <etharp_query+0x268>)
 800d87e:	4613      	mov	r3, r2
 800d880:	005b      	lsls	r3, r3, #1
 800d882:	4413      	add	r3, r2
 800d884:	00db      	lsls	r3, r3, #3
 800d886:	440b      	add	r3, r1
 800d888:	3314      	adds	r3, #20
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d806      	bhi.n	800d89e <etharp_query+0xfe>
 800d890:	4b5a      	ldr	r3, [pc, #360]	; (800d9fc <etharp_query+0x25c>)
 800d892:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d896:	495d      	ldr	r1, [pc, #372]	; (800da0c <etharp_query+0x26c>)
 800d898:	485a      	ldr	r0, [pc, #360]	; (800da04 <etharp_query+0x264>)
 800d89a:	f001 fdd3 	bl	800f444 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d89e:	6a3b      	ldr	r3, [r7, #32]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d102      	bne.n	800d8aa <etharp_query+0x10a>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d10c      	bne.n	800d8c4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d8aa:	68b9      	ldr	r1, [r7, #8]
 800d8ac:	68f8      	ldr	r0, [r7, #12]
 800d8ae:	f000 f963 	bl	800db78 <etharp_request>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d102      	bne.n	800d8c4 <etharp_query+0x124>
      return result;
 800d8be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d8c2:	e096      	b.n	800d9f2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d106      	bne.n	800d8d8 <etharp_query+0x138>
 800d8ca:	4b4c      	ldr	r3, [pc, #304]	; (800d9fc <etharp_query+0x25c>)
 800d8cc:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d8d0:	494f      	ldr	r1, [pc, #316]	; (800da10 <etharp_query+0x270>)
 800d8d2:	484c      	ldr	r0, [pc, #304]	; (800da04 <etharp_query+0x264>)
 800d8d4:	f001 fdb6 	bl	800f444 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d8d8:	7c7a      	ldrb	r2, [r7, #17]
 800d8da:	494b      	ldr	r1, [pc, #300]	; (800da08 <etharp_query+0x268>)
 800d8dc:	4613      	mov	r3, r2
 800d8de:	005b      	lsls	r3, r3, #1
 800d8e0:	4413      	add	r3, r2
 800d8e2:	00db      	lsls	r3, r3, #3
 800d8e4:	440b      	add	r3, r1
 800d8e6:	3314      	adds	r3, #20
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d917      	bls.n	800d91e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d8ee:	4a49      	ldr	r2, [pc, #292]	; (800da14 <etharp_query+0x274>)
 800d8f0:	7c7b      	ldrb	r3, [r7, #17]
 800d8f2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d8f4:	7c7a      	ldrb	r2, [r7, #17]
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	005b      	lsls	r3, r3, #1
 800d8fa:	4413      	add	r3, r2
 800d8fc:	00db      	lsls	r3, r3, #3
 800d8fe:	3308      	adds	r3, #8
 800d900:	4a41      	ldr	r2, [pc, #260]	; (800da08 <etharp_query+0x268>)
 800d902:	4413      	add	r3, r2
 800d904:	3304      	adds	r3, #4
 800d906:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d90a:	9200      	str	r2, [sp, #0]
 800d90c:	697a      	ldr	r2, [r7, #20]
 800d90e:	6879      	ldr	r1, [r7, #4]
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f001 fd05 	bl	800f320 <ethernet_output>
 800d916:	4603      	mov	r3, r0
 800d918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d91c:	e067      	b.n	800d9ee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d91e:	7c7a      	ldrb	r2, [r7, #17]
 800d920:	4939      	ldr	r1, [pc, #228]	; (800da08 <etharp_query+0x268>)
 800d922:	4613      	mov	r3, r2
 800d924:	005b      	lsls	r3, r3, #1
 800d926:	4413      	add	r3, r2
 800d928:	00db      	lsls	r3, r3, #3
 800d92a:	440b      	add	r3, r1
 800d92c:	3314      	adds	r3, #20
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	2b01      	cmp	r3, #1
 800d932:	d15c      	bne.n	800d9ee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d934:	2300      	movs	r3, #0
 800d936:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d93c:	e01c      	b.n	800d978 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	895a      	ldrh	r2, [r3, #10]
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	891b      	ldrh	r3, [r3, #8]
 800d946:	429a      	cmp	r2, r3
 800d948:	d10a      	bne.n	800d960 <etharp_query+0x1c0>
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d006      	beq.n	800d960 <etharp_query+0x1c0>
 800d952:	4b2a      	ldr	r3, [pc, #168]	; (800d9fc <etharp_query+0x25c>)
 800d954:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d958:	492f      	ldr	r1, [pc, #188]	; (800da18 <etharp_query+0x278>)
 800d95a:	482a      	ldr	r0, [pc, #168]	; (800da04 <etharp_query+0x264>)
 800d95c:	f001 fd72 	bl	800f444 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	7b1b      	ldrb	r3, [r3, #12]
 800d964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d002      	beq.n	800d972 <etharp_query+0x1d2>
        copy_needed = 1;
 800d96c:	2301      	movs	r3, #1
 800d96e:	61bb      	str	r3, [r7, #24]
        break;
 800d970:	e005      	b.n	800d97e <etharp_query+0x1de>
      }
      p = p->next;
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d1df      	bne.n	800d93e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d97e:	69bb      	ldr	r3, [r7, #24]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d007      	beq.n	800d994 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d984:	687a      	ldr	r2, [r7, #4]
 800d986:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d98a:	200e      	movs	r0, #14
 800d98c:	f7f9 fd28 	bl	80073e0 <pbuf_clone>
 800d990:	61f8      	str	r0, [r7, #28]
 800d992:	e004      	b.n	800d99e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d998:	69f8      	ldr	r0, [r7, #28]
 800d99a:	f7f9 fb65 	bl	8007068 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d021      	beq.n	800d9e8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d9a4:	7c7a      	ldrb	r2, [r7, #17]
 800d9a6:	4918      	ldr	r1, [pc, #96]	; (800da08 <etharp_query+0x268>)
 800d9a8:	4613      	mov	r3, r2
 800d9aa:	005b      	lsls	r3, r3, #1
 800d9ac:	4413      	add	r3, r2
 800d9ae:	00db      	lsls	r3, r3, #3
 800d9b0:	440b      	add	r3, r1
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d00a      	beq.n	800d9ce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d9b8:	7c7a      	ldrb	r2, [r7, #17]
 800d9ba:	4913      	ldr	r1, [pc, #76]	; (800da08 <etharp_query+0x268>)
 800d9bc:	4613      	mov	r3, r2
 800d9be:	005b      	lsls	r3, r3, #1
 800d9c0:	4413      	add	r3, r2
 800d9c2:	00db      	lsls	r3, r3, #3
 800d9c4:	440b      	add	r3, r1
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7f9 faad 	bl	8006f28 <pbuf_free>
      }
      arp_table[i].q = p;
 800d9ce:	7c7a      	ldrb	r2, [r7, #17]
 800d9d0:	490d      	ldr	r1, [pc, #52]	; (800da08 <etharp_query+0x268>)
 800d9d2:	4613      	mov	r3, r2
 800d9d4:	005b      	lsls	r3, r3, #1
 800d9d6:	4413      	add	r3, r2
 800d9d8:	00db      	lsls	r3, r3, #3
 800d9da:	440b      	add	r3, r1
 800d9dc:	69fa      	ldr	r2, [r7, #28]
 800d9de:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d9e6:	e002      	b.n	800d9ee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d9e8:	23ff      	movs	r3, #255	; 0xff
 800d9ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d9ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3728      	adds	r7, #40	; 0x28
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	0801292c 	.word	0x0801292c
 800da00:	08012ad8 	.word	0x08012ad8
 800da04:	080129a4 	.word	0x080129a4
 800da08:	20008810 	.word	0x20008810
 800da0c:	08012ae8 	.word	0x08012ae8
 800da10:	08012acc 	.word	0x08012acc
 800da14:	20008900 	.word	0x20008900
 800da18:	08012b10 	.word	0x08012b10

0800da1c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b08a      	sub	sp, #40	; 0x28
 800da20:	af02      	add	r7, sp, #8
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	607a      	str	r2, [r7, #4]
 800da28:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800da2a:	2300      	movs	r3, #0
 800da2c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d106      	bne.n	800da42 <etharp_raw+0x26>
 800da34:	4b3a      	ldr	r3, [pc, #232]	; (800db20 <etharp_raw+0x104>)
 800da36:	f240 4257 	movw	r2, #1111	; 0x457
 800da3a:	493a      	ldr	r1, [pc, #232]	; (800db24 <etharp_raw+0x108>)
 800da3c:	483a      	ldr	r0, [pc, #232]	; (800db28 <etharp_raw+0x10c>)
 800da3e:	f001 fd01 	bl	800f444 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800da42:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da46:	211c      	movs	r1, #28
 800da48:	200e      	movs	r0, #14
 800da4a:	f7f8 ff89 	bl	8006960 <pbuf_alloc>
 800da4e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d102      	bne.n	800da5c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800da56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da5a:	e05d      	b.n	800db18 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800da5c:	69bb      	ldr	r3, [r7, #24]
 800da5e:	895b      	ldrh	r3, [r3, #10]
 800da60:	2b1b      	cmp	r3, #27
 800da62:	d806      	bhi.n	800da72 <etharp_raw+0x56>
 800da64:	4b2e      	ldr	r3, [pc, #184]	; (800db20 <etharp_raw+0x104>)
 800da66:	f240 4262 	movw	r2, #1122	; 0x462
 800da6a:	4930      	ldr	r1, [pc, #192]	; (800db2c <etharp_raw+0x110>)
 800da6c:	482e      	ldr	r0, [pc, #184]	; (800db28 <etharp_raw+0x10c>)
 800da6e:	f001 fce9 	bl	800f444 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800da78:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7f7 fef6 	bl	800586c <lwip_htons>
 800da80:	4603      	mov	r3, r0
 800da82:	461a      	mov	r2, r3
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800da8e:	2b06      	cmp	r3, #6
 800da90:	d006      	beq.n	800daa0 <etharp_raw+0x84>
 800da92:	4b23      	ldr	r3, [pc, #140]	; (800db20 <etharp_raw+0x104>)
 800da94:	f240 4269 	movw	r2, #1129	; 0x469
 800da98:	4925      	ldr	r1, [pc, #148]	; (800db30 <etharp_raw+0x114>)
 800da9a:	4823      	ldr	r0, [pc, #140]	; (800db28 <etharp_raw+0x10c>)
 800da9c:	f001 fcd2 	bl	800f444 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	3308      	adds	r3, #8
 800daa4:	2206      	movs	r2, #6
 800daa6:	6839      	ldr	r1, [r7, #0]
 800daa8:	4618      	mov	r0, r3
 800daaa:	f001 fcb5 	bl	800f418 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	3312      	adds	r3, #18
 800dab2:	2206      	movs	r2, #6
 800dab4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dab6:	4618      	mov	r0, r3
 800dab8:	f001 fcae 	bl	800f418 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	330e      	adds	r3, #14
 800dac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dac2:	6812      	ldr	r2, [r2, #0]
 800dac4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	3318      	adds	r3, #24
 800daca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dacc:	6812      	ldr	r2, [r2, #0]
 800dace:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	2200      	movs	r2, #0
 800dad4:	701a      	strb	r2, [r3, #0]
 800dad6:	2200      	movs	r2, #0
 800dad8:	f042 0201 	orr.w	r2, r2, #1
 800dadc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	2200      	movs	r2, #0
 800dae2:	f042 0208 	orr.w	r2, r2, #8
 800dae6:	709a      	strb	r2, [r3, #2]
 800dae8:	2200      	movs	r2, #0
 800daea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	2206      	movs	r2, #6
 800daf0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	2204      	movs	r2, #4
 800daf6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800daf8:	f640 0306 	movw	r3, #2054	; 0x806
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	68ba      	ldr	r2, [r7, #8]
 800db02:	69b9      	ldr	r1, [r7, #24]
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f001 fc0b 	bl	800f320 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800db0a:	69b8      	ldr	r0, [r7, #24]
 800db0c:	f7f9 fa0c 	bl	8006f28 <pbuf_free>
  p = NULL;
 800db10:	2300      	movs	r3, #0
 800db12:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800db14:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3720      	adds	r7, #32
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	0801292c 	.word	0x0801292c
 800db24:	08012a7c 	.word	0x08012a7c
 800db28:	080129a4 	.word	0x080129a4
 800db2c:	08012b2c 	.word	0x08012b2c
 800db30:	08012b60 	.word	0x08012b60

0800db34 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b088      	sub	sp, #32
 800db38:	af04      	add	r7, sp, #16
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800db50:	2201      	movs	r2, #1
 800db52:	9203      	str	r2, [sp, #12]
 800db54:	68ba      	ldr	r2, [r7, #8]
 800db56:	9202      	str	r2, [sp, #8]
 800db58:	4a06      	ldr	r2, [pc, #24]	; (800db74 <etharp_request_dst+0x40>)
 800db5a:	9201      	str	r2, [sp, #4]
 800db5c:	9300      	str	r3, [sp, #0]
 800db5e:	4603      	mov	r3, r0
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	68f8      	ldr	r0, [r7, #12]
 800db64:	f7ff ff5a 	bl	800da1c <etharp_raw>
 800db68:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3710      	adds	r7, #16
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	080130f0 	.word	0x080130f0

0800db78 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800db82:	4a05      	ldr	r2, [pc, #20]	; (800db98 <etharp_request+0x20>)
 800db84:	6839      	ldr	r1, [r7, #0]
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f7ff ffd4 	bl	800db34 <etharp_request_dst>
 800db8c:	4603      	mov	r3, r0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3708      	adds	r7, #8
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	080130e8 	.word	0x080130e8

0800db9c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b08e      	sub	sp, #56	; 0x38
 800dba0:	af04      	add	r7, sp, #16
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800dba6:	4b79      	ldr	r3, [pc, #484]	; (800dd8c <icmp_input+0x1f0>)
 800dba8:	689b      	ldr	r3, [r3, #8]
 800dbaa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800dbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	f003 030f 	and.w	r3, r3, #15
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	009b      	lsls	r3, r3, #2
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800dbbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbbe:	2b13      	cmp	r3, #19
 800dbc0:	f240 80cd 	bls.w	800dd5e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	895b      	ldrh	r3, [r3, #10]
 800dbc8:	2b03      	cmp	r3, #3
 800dbca:	f240 80ca 	bls.w	800dd62 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800dbd8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	f000 80b7 	beq.w	800dd50 <icmp_input+0x1b4>
 800dbe2:	2b08      	cmp	r3, #8
 800dbe4:	f040 80b7 	bne.w	800dd56 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800dbe8:	4b69      	ldr	r3, [pc, #420]	; (800dd90 <icmp_input+0x1f4>)
 800dbea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dbec:	4b67      	ldr	r3, [pc, #412]	; (800dd8c <icmp_input+0x1f0>)
 800dbee:	695b      	ldr	r3, [r3, #20]
 800dbf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dbf4:	2be0      	cmp	r3, #224	; 0xe0
 800dbf6:	f000 80bb 	beq.w	800dd70 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800dbfa:	4b64      	ldr	r3, [pc, #400]	; (800dd8c <icmp_input+0x1f0>)
 800dbfc:	695b      	ldr	r3, [r3, #20]
 800dbfe:	4a63      	ldr	r2, [pc, #396]	; (800dd8c <icmp_input+0x1f0>)
 800dc00:	6812      	ldr	r2, [r2, #0]
 800dc02:	4611      	mov	r1, r2
 800dc04:	4618      	mov	r0, r3
 800dc06:	f000 fbed 	bl	800e3e4 <ip4_addr_isbroadcast_u32>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f040 80b1 	bne.w	800dd74 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	891b      	ldrh	r3, [r3, #8]
 800dc16:	2b07      	cmp	r3, #7
 800dc18:	f240 80a5 	bls.w	800dd66 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dc1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc1e:	330e      	adds	r3, #14
 800dc20:	4619      	mov	r1, r3
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f7f9 f8ea 	bl	8006dfc <pbuf_add_header>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d04b      	beq.n	800dcc6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	891a      	ldrh	r2, [r3, #8]
 800dc32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc34:	4413      	add	r3, r2
 800dc36:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	891b      	ldrh	r3, [r3, #8]
 800dc3c:	8b7a      	ldrh	r2, [r7, #26]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	f0c0 809a 	bcc.w	800dd78 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dc44:	8b7b      	ldrh	r3, [r7, #26]
 800dc46:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	200e      	movs	r0, #14
 800dc4e:	f7f8 fe87 	bl	8006960 <pbuf_alloc>
 800dc52:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	f000 8090 	beq.w	800dd7c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	895b      	ldrh	r3, [r3, #10]
 800dc60:	461a      	mov	r2, r3
 800dc62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc64:	3308      	adds	r3, #8
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d203      	bcs.n	800dc72 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800dc6a:	6978      	ldr	r0, [r7, #20]
 800dc6c:	f7f9 f95c 	bl	8006f28 <pbuf_free>
          goto icmperr;
 800dc70:	e085      	b.n	800dd7e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dc78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f001 fbcc 	bl	800f418 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800dc80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc82:	4619      	mov	r1, r3
 800dc84:	6978      	ldr	r0, [r7, #20]
 800dc86:	f7f9 f8c9 	bl	8006e1c <pbuf_remove_header>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d009      	beq.n	800dca4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dc90:	4b40      	ldr	r3, [pc, #256]	; (800dd94 <icmp_input+0x1f8>)
 800dc92:	22b6      	movs	r2, #182	; 0xb6
 800dc94:	4940      	ldr	r1, [pc, #256]	; (800dd98 <icmp_input+0x1fc>)
 800dc96:	4841      	ldr	r0, [pc, #260]	; (800dd9c <icmp_input+0x200>)
 800dc98:	f001 fbd4 	bl	800f444 <iprintf>
          pbuf_free(r);
 800dc9c:	6978      	ldr	r0, [r7, #20]
 800dc9e:	f7f9 f943 	bl	8006f28 <pbuf_free>
          goto icmperr;
 800dca2:	e06c      	b.n	800dd7e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800dca4:	6879      	ldr	r1, [r7, #4]
 800dca6:	6978      	ldr	r0, [r7, #20]
 800dca8:	f7f9 fa56 	bl	8007158 <pbuf_copy>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d003      	beq.n	800dcba <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800dcb2:	6978      	ldr	r0, [r7, #20]
 800dcb4:	f7f9 f938 	bl	8006f28 <pbuf_free>
          goto icmperr;
 800dcb8:	e061      	b.n	800dd7e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f7f9 f934 	bl	8006f28 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	607b      	str	r3, [r7, #4]
 800dcc4:	e00f      	b.n	800dce6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dcc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dcc8:	330e      	adds	r3, #14
 800dcca:	4619      	mov	r1, r3
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f7f9 f8a5 	bl	8006e1c <pbuf_remove_header>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d006      	beq.n	800dce6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dcd8:	4b2e      	ldr	r3, [pc, #184]	; (800dd94 <icmp_input+0x1f8>)
 800dcda:	22c7      	movs	r2, #199	; 0xc7
 800dcdc:	4930      	ldr	r1, [pc, #192]	; (800dda0 <icmp_input+0x204>)
 800dcde:	482f      	ldr	r0, [pc, #188]	; (800dd9c <icmp_input+0x200>)
 800dce0:	f001 fbb0 	bl	800f444 <iprintf>
          goto icmperr;
 800dce4:	e04b      	b.n	800dd7e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800dcec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dcee:	4619      	mov	r1, r3
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f7f9 f883 	bl	8006dfc <pbuf_add_header>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d12b      	bne.n	800dd54 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	681a      	ldr	r2, [r3, #0]
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dd0a:	4b20      	ldr	r3, [pc, #128]	; (800dd8c <icmp_input+0x1f0>)
 800dd0c:	691a      	ldr	r2, [r3, #16]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	2200      	movs	r2, #0
 800dd16:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	709a      	strb	r2, [r3, #2]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	22ff      	movs	r2, #255	; 0xff
 800dd26:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	729a      	strb	r2, [r3, #10]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	9302      	str	r3, [sp, #8]
 800dd36:	2301      	movs	r3, #1
 800dd38:	9301      	str	r3, [sp, #4]
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	9300      	str	r3, [sp, #0]
 800dd3e:	23ff      	movs	r3, #255	; 0xff
 800dd40:	2200      	movs	r2, #0
 800dd42:	69f9      	ldr	r1, [r7, #28]
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f000 fa75 	bl	800e234 <ip4_output_if>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800dd4e:	e001      	b.n	800dd54 <icmp_input+0x1b8>
      break;
 800dd50:	bf00      	nop
 800dd52:	e000      	b.n	800dd56 <icmp_input+0x1ba>
      break;
 800dd54:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f7f9 f8e6 	bl	8006f28 <pbuf_free>
  return;
 800dd5c:	e013      	b.n	800dd86 <icmp_input+0x1ea>
    goto lenerr;
 800dd5e:	bf00      	nop
 800dd60:	e002      	b.n	800dd68 <icmp_input+0x1cc>
    goto lenerr;
 800dd62:	bf00      	nop
 800dd64:	e000      	b.n	800dd68 <icmp_input+0x1cc>
        goto lenerr;
 800dd66:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f7f9 f8dd 	bl	8006f28 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dd6e:	e00a      	b.n	800dd86 <icmp_input+0x1ea>
        goto icmperr;
 800dd70:	bf00      	nop
 800dd72:	e004      	b.n	800dd7e <icmp_input+0x1e2>
        goto icmperr;
 800dd74:	bf00      	nop
 800dd76:	e002      	b.n	800dd7e <icmp_input+0x1e2>
          goto icmperr;
 800dd78:	bf00      	nop
 800dd7a:	e000      	b.n	800dd7e <icmp_input+0x1e2>
          goto icmperr;
 800dd7c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f7f9 f8d2 	bl	8006f28 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dd84:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dd86:	3728      	adds	r7, #40	; 0x28
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	20005240 	.word	0x20005240
 800dd90:	20005254 	.word	0x20005254
 800dd94:	08012ba4 	.word	0x08012ba4
 800dd98:	08012bdc 	.word	0x08012bdc
 800dd9c:	08012c14 	.word	0x08012c14
 800dda0:	08012c3c 	.word	0x08012c3c

0800dda4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	460b      	mov	r3, r1
 800ddae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ddb0:	78fb      	ldrb	r3, [r7, #3]
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	2103      	movs	r1, #3
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 f814 	bl	800dde4 <icmp_send_response>
}
 800ddbc:	bf00      	nop
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	460b      	mov	r3, r1
 800ddce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ddd0:	78fb      	ldrb	r3, [r7, #3]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	210b      	movs	r1, #11
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f000 f804 	bl	800dde4 <icmp_send_response>
}
 800dddc:	bf00      	nop
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b08c      	sub	sp, #48	; 0x30
 800dde8:	af04      	add	r7, sp, #16
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	460b      	mov	r3, r1
 800ddee:	70fb      	strb	r3, [r7, #3]
 800ddf0:	4613      	mov	r3, r2
 800ddf2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ddf4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ddf8:	2124      	movs	r1, #36	; 0x24
 800ddfa:	2022      	movs	r0, #34	; 0x22
 800ddfc:	f7f8 fdb0 	bl	8006960 <pbuf_alloc>
 800de00:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800de02:	69fb      	ldr	r3, [r7, #28]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d04c      	beq.n	800dea2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	895b      	ldrh	r3, [r3, #10]
 800de0c:	2b23      	cmp	r3, #35	; 0x23
 800de0e:	d806      	bhi.n	800de1e <icmp_send_response+0x3a>
 800de10:	4b26      	ldr	r3, [pc, #152]	; (800deac <icmp_send_response+0xc8>)
 800de12:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800de16:	4926      	ldr	r1, [pc, #152]	; (800deb0 <icmp_send_response+0xcc>)
 800de18:	4826      	ldr	r0, [pc, #152]	; (800deb4 <icmp_send_response+0xd0>)
 800de1a:	f001 fb13 	bl	800f444 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	78fa      	ldrb	r2, [r7, #3]
 800de2e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	78ba      	ldrb	r2, [r7, #2]
 800de34:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	2200      	movs	r2, #0
 800de3a:	711a      	strb	r2, [r3, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	2200      	movs	r2, #0
 800de44:	719a      	strb	r2, [r3, #6]
 800de46:	2200      	movs	r2, #0
 800de48:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	f103 0008 	add.w	r0, r3, #8
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	221c      	movs	r2, #28
 800de58:	4619      	mov	r1, r3
 800de5a:	f001 fadd 	bl	800f418 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800de5e:	69bb      	ldr	r3, [r7, #24]
 800de60:	68db      	ldr	r3, [r3, #12]
 800de62:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800de64:	f107 030c 	add.w	r3, r7, #12
 800de68:	4618      	mov	r0, r3
 800de6a:	f000 f825 	bl	800deb8 <ip4_route>
 800de6e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d011      	beq.n	800de9a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	2200      	movs	r2, #0
 800de7a:	709a      	strb	r2, [r3, #2]
 800de7c:	2200      	movs	r2, #0
 800de7e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800de80:	f107 020c 	add.w	r2, r7, #12
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	9302      	str	r3, [sp, #8]
 800de88:	2301      	movs	r3, #1
 800de8a:	9301      	str	r3, [sp, #4]
 800de8c:	2300      	movs	r3, #0
 800de8e:	9300      	str	r3, [sp, #0]
 800de90:	23ff      	movs	r3, #255	; 0xff
 800de92:	2100      	movs	r1, #0
 800de94:	69f8      	ldr	r0, [r7, #28]
 800de96:	f000 f9cd 	bl	800e234 <ip4_output_if>
  }
  pbuf_free(q);
 800de9a:	69f8      	ldr	r0, [r7, #28]
 800de9c:	f7f9 f844 	bl	8006f28 <pbuf_free>
 800dea0:	e000      	b.n	800dea4 <icmp_send_response+0xc0>
    return;
 800dea2:	bf00      	nop
}
 800dea4:	3720      	adds	r7, #32
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	08012ba4 	.word	0x08012ba4
 800deb0:	08012c70 	.word	0x08012c70
 800deb4:	08012c14 	.word	0x08012c14

0800deb8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800deb8:	b480      	push	{r7}
 800deba:	b085      	sub	sp, #20
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800dec0:	4b33      	ldr	r3, [pc, #204]	; (800df90 <ip4_route+0xd8>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	60fb      	str	r3, [r7, #12]
 800dec6:	e036      	b.n	800df36 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dece:	f003 0301 	and.w	r3, r3, #1
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d02b      	beq.n	800df30 <ip4_route+0x78>
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dede:	089b      	lsrs	r3, r3, #2
 800dee0:	f003 0301 	and.w	r3, r3, #1
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d022      	beq.n	800df30 <ip4_route+0x78>
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	3304      	adds	r3, #4
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d01d      	beq.n	800df30 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	3304      	adds	r3, #4
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	405a      	eors	r2, r3
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	3308      	adds	r3, #8
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4013      	ands	r3, r2
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d101      	bne.n	800df10 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	e038      	b.n	800df82 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df16:	f003 0302 	and.w	r3, r3, #2
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d108      	bne.n	800df30 <ip4_route+0x78>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	330c      	adds	r3, #12
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d101      	bne.n	800df30 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	e028      	b.n	800df82 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	60fb      	str	r3, [r7, #12]
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d1c5      	bne.n	800dec8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800df3c:	4b15      	ldr	r3, [pc, #84]	; (800df94 <ip4_route+0xdc>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d01a      	beq.n	800df7a <ip4_route+0xc2>
 800df44:	4b13      	ldr	r3, [pc, #76]	; (800df94 <ip4_route+0xdc>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df4c:	f003 0301 	and.w	r3, r3, #1
 800df50:	2b00      	cmp	r3, #0
 800df52:	d012      	beq.n	800df7a <ip4_route+0xc2>
 800df54:	4b0f      	ldr	r3, [pc, #60]	; (800df94 <ip4_route+0xdc>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df5c:	f003 0304 	and.w	r3, r3, #4
 800df60:	2b00      	cmp	r3, #0
 800df62:	d00a      	beq.n	800df7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800df64:	4b0b      	ldr	r3, [pc, #44]	; (800df94 <ip4_route+0xdc>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	3304      	adds	r3, #4
 800df6a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d004      	beq.n	800df7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	b2db      	uxtb	r3, r3
 800df76:	2b7f      	cmp	r3, #127	; 0x7f
 800df78:	d101      	bne.n	800df7e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800df7a:	2300      	movs	r3, #0
 800df7c:	e001      	b.n	800df82 <ip4_route+0xca>
  }

  return netif_default;
 800df7e:	4b05      	ldr	r3, [pc, #20]	; (800df94 <ip4_route+0xdc>)
 800df80:	681b      	ldr	r3, [r3, #0]
}
 800df82:	4618      	mov	r0, r3
 800df84:	3714      	adds	r7, #20
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop
 800df90:	200087a4 	.word	0x200087a4
 800df94:	200087a8 	.word	0x200087a8

0800df98 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfa6:	f003 0301 	and.w	r3, r3, #1
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d016      	beq.n	800dfde <ip4_input_accept+0x46>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	3304      	adds	r3, #4
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d011      	beq.n	800dfde <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dfba:	4b0b      	ldr	r3, [pc, #44]	; (800dfe8 <ip4_input_accept+0x50>)
 800dfbc:	695a      	ldr	r2, [r3, #20]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	3304      	adds	r3, #4
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d008      	beq.n	800dfda <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800dfc8:	4b07      	ldr	r3, [pc, #28]	; (800dfe8 <ip4_input_accept+0x50>)
 800dfca:	695b      	ldr	r3, [r3, #20]
 800dfcc:	6879      	ldr	r1, [r7, #4]
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f000 fa08 	bl	800e3e4 <ip4_addr_isbroadcast_u32>
 800dfd4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d001      	beq.n	800dfde <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	e000      	b.n	800dfe0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800dfde:	2300      	movs	r3, #0
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	20005240 	.word	0x20005240

0800dfec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b086      	sub	sp, #24
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	091b      	lsrs	r3, r3, #4
 800e002:	b2db      	uxtb	r3, r3
 800e004:	2b04      	cmp	r3, #4
 800e006:	d004      	beq.n	800e012 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f7f8 ff8d 	bl	8006f28 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e00e:	2300      	movs	r3, #0
 800e010:	e107      	b.n	800e222 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	f003 030f 	and.w	r3, r3, #15
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	009b      	lsls	r3, r3, #2
 800e01e:	b2db      	uxtb	r3, r3
 800e020:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	885b      	ldrh	r3, [r3, #2]
 800e026:	b29b      	uxth	r3, r3
 800e028:	4618      	mov	r0, r3
 800e02a:	f7f7 fc1f 	bl	800586c <lwip_htons>
 800e02e:	4603      	mov	r3, r0
 800e030:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	891b      	ldrh	r3, [r3, #8]
 800e036:	89ba      	ldrh	r2, [r7, #12]
 800e038:	429a      	cmp	r2, r3
 800e03a:	d204      	bcs.n	800e046 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e03c:	89bb      	ldrh	r3, [r7, #12]
 800e03e:	4619      	mov	r1, r3
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f7f8 fdeb 	bl	8006c1c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	895b      	ldrh	r3, [r3, #10]
 800e04a:	89fa      	ldrh	r2, [r7, #14]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d807      	bhi.n	800e060 <ip4_input+0x74>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	891b      	ldrh	r3, [r3, #8]
 800e054:	89ba      	ldrh	r2, [r7, #12]
 800e056:	429a      	cmp	r2, r3
 800e058:	d802      	bhi.n	800e060 <ip4_input+0x74>
 800e05a:	89fb      	ldrh	r3, [r7, #14]
 800e05c:	2b13      	cmp	r3, #19
 800e05e:	d804      	bhi.n	800e06a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f7f8 ff61 	bl	8006f28 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e066:	2300      	movs	r3, #0
 800e068:	e0db      	b.n	800e222 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	691b      	ldr	r3, [r3, #16]
 800e06e:	4a6f      	ldr	r2, [pc, #444]	; (800e22c <ip4_input+0x240>)
 800e070:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	68db      	ldr	r3, [r3, #12]
 800e076:	4a6d      	ldr	r2, [pc, #436]	; (800e22c <ip4_input+0x240>)
 800e078:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e07a:	4b6c      	ldr	r3, [pc, #432]	; (800e22c <ip4_input+0x240>)
 800e07c:	695b      	ldr	r3, [r3, #20]
 800e07e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e082:	2be0      	cmp	r3, #224	; 0xe0
 800e084:	d112      	bne.n	800e0ac <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e08c:	f003 0301 	and.w	r3, r3, #1
 800e090:	b2db      	uxtb	r3, r3
 800e092:	2b00      	cmp	r3, #0
 800e094:	d007      	beq.n	800e0a6 <ip4_input+0xba>
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	3304      	adds	r3, #4
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d002      	beq.n	800e0a6 <ip4_input+0xba>
      netif = inp;
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	613b      	str	r3, [r7, #16]
 800e0a4:	e02a      	b.n	800e0fc <ip4_input+0x110>
    } else {
      netif = NULL;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	613b      	str	r3, [r7, #16]
 800e0aa:	e027      	b.n	800e0fc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e0ac:	6838      	ldr	r0, [r7, #0]
 800e0ae:	f7ff ff73 	bl	800df98 <ip4_input_accept>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d002      	beq.n	800e0be <ip4_input+0xd2>
      netif = inp;
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	613b      	str	r3, [r7, #16]
 800e0bc:	e01e      	b.n	800e0fc <ip4_input+0x110>
    } else {
      netif = NULL;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e0c2:	4b5a      	ldr	r3, [pc, #360]	; (800e22c <ip4_input+0x240>)
 800e0c4:	695b      	ldr	r3, [r3, #20]
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	2b7f      	cmp	r3, #127	; 0x7f
 800e0ca:	d017      	beq.n	800e0fc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e0cc:	4b58      	ldr	r3, [pc, #352]	; (800e230 <ip4_input+0x244>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	613b      	str	r3, [r7, #16]
 800e0d2:	e00e      	b.n	800e0f2 <ip4_input+0x106>
          if (netif == inp) {
 800e0d4:	693a      	ldr	r2, [r7, #16]
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d006      	beq.n	800e0ea <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e0dc:	6938      	ldr	r0, [r7, #16]
 800e0de:	f7ff ff5b 	bl	800df98 <ip4_input_accept>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d108      	bne.n	800e0fa <ip4_input+0x10e>
 800e0e8:	e000      	b.n	800e0ec <ip4_input+0x100>
            continue;
 800e0ea:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	613b      	str	r3, [r7, #16]
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d1ed      	bne.n	800e0d4 <ip4_input+0xe8>
 800e0f8:	e000      	b.n	800e0fc <ip4_input+0x110>
            break;
 800e0fa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e0fc:	4b4b      	ldr	r3, [pc, #300]	; (800e22c <ip4_input+0x240>)
 800e0fe:	691b      	ldr	r3, [r3, #16]
 800e100:	6839      	ldr	r1, [r7, #0]
 800e102:	4618      	mov	r0, r3
 800e104:	f000 f96e 	bl	800e3e4 <ip4_addr_isbroadcast_u32>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d105      	bne.n	800e11a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e10e:	4b47      	ldr	r3, [pc, #284]	; (800e22c <ip4_input+0x240>)
 800e110:	691b      	ldr	r3, [r3, #16]
 800e112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e116:	2be0      	cmp	r3, #224	; 0xe0
 800e118:	d104      	bne.n	800e124 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f7f8 ff04 	bl	8006f28 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e120:	2300      	movs	r3, #0
 800e122:	e07e      	b.n	800e222 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d104      	bne.n	800e134 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f7f8 fefc 	bl	8006f28 <pbuf_free>
    return ERR_OK;
 800e130:	2300      	movs	r3, #0
 800e132:	e076      	b.n	800e222 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	88db      	ldrh	r3, [r3, #6]
 800e138:	b29b      	uxth	r3, r3
 800e13a:	461a      	mov	r2, r3
 800e13c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e140:	4013      	ands	r3, r2
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00b      	beq.n	800e15e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f000 fd22 	bl	800eb90 <ip4_reass>
 800e14c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d101      	bne.n	800e158 <ip4_input+0x16c>
      return ERR_OK;
 800e154:	2300      	movs	r3, #0
 800e156:	e064      	b.n	800e222 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e15e:	4a33      	ldr	r2, [pc, #204]	; (800e22c <ip4_input+0x240>)
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e164:	4a31      	ldr	r2, [pc, #196]	; (800e22c <ip4_input+0x240>)
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e16a:	4a30      	ldr	r2, [pc, #192]	; (800e22c <ip4_input+0x240>)
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	f003 030f 	and.w	r3, r3, #15
 800e178:	b2db      	uxtb	r3, r3
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	b29a      	uxth	r2, r3
 800e180:	4b2a      	ldr	r3, [pc, #168]	; (800e22c <ip4_input+0x240>)
 800e182:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e184:	89fb      	ldrh	r3, [r7, #14]
 800e186:	4619      	mov	r1, r3
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f7f8 fe47 	bl	8006e1c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	7a5b      	ldrb	r3, [r3, #9]
 800e192:	2b11      	cmp	r3, #17
 800e194:	d006      	beq.n	800e1a4 <ip4_input+0x1b8>
 800e196:	2b11      	cmp	r3, #17
 800e198:	dc13      	bgt.n	800e1c2 <ip4_input+0x1d6>
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d00c      	beq.n	800e1b8 <ip4_input+0x1cc>
 800e19e:	2b06      	cmp	r3, #6
 800e1a0:	d005      	beq.n	800e1ae <ip4_input+0x1c2>
 800e1a2:	e00e      	b.n	800e1c2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e1a4:	6839      	ldr	r1, [r7, #0]
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f7fe fc68 	bl	800ca7c <udp_input>
        break;
 800e1ac:	e026      	b.n	800e1fc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e1ae:	6839      	ldr	r1, [r7, #0]
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f7fa fce1 	bl	8008b78 <tcp_input>
        break;
 800e1b6:	e021      	b.n	800e1fc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e1b8:	6839      	ldr	r1, [r7, #0]
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7ff fcee 	bl	800db9c <icmp_input>
        break;
 800e1c0:	e01c      	b.n	800e1fc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e1c2:	4b1a      	ldr	r3, [pc, #104]	; (800e22c <ip4_input+0x240>)
 800e1c4:	695b      	ldr	r3, [r3, #20]
 800e1c6:	6939      	ldr	r1, [r7, #16]
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f000 f90b 	bl	800e3e4 <ip4_addr_isbroadcast_u32>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d10f      	bne.n	800e1f4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e1d4:	4b15      	ldr	r3, [pc, #84]	; (800e22c <ip4_input+0x240>)
 800e1d6:	695b      	ldr	r3, [r3, #20]
 800e1d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e1dc:	2be0      	cmp	r3, #224	; 0xe0
 800e1de:	d009      	beq.n	800e1f4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e1e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f7f8 fe8b 	bl	8006f02 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e1ec:	2102      	movs	r1, #2
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f7ff fdd8 	bl	800dda4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f7f8 fe97 	bl	8006f28 <pbuf_free>
        break;
 800e1fa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e1fc:	4b0b      	ldr	r3, [pc, #44]	; (800e22c <ip4_input+0x240>)
 800e1fe:	2200      	movs	r2, #0
 800e200:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e202:	4b0a      	ldr	r3, [pc, #40]	; (800e22c <ip4_input+0x240>)
 800e204:	2200      	movs	r2, #0
 800e206:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e208:	4b08      	ldr	r3, [pc, #32]	; (800e22c <ip4_input+0x240>)
 800e20a:	2200      	movs	r2, #0
 800e20c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e20e:	4b07      	ldr	r3, [pc, #28]	; (800e22c <ip4_input+0x240>)
 800e210:	2200      	movs	r2, #0
 800e212:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e214:	4b05      	ldr	r3, [pc, #20]	; (800e22c <ip4_input+0x240>)
 800e216:	2200      	movs	r2, #0
 800e218:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e21a:	4b04      	ldr	r3, [pc, #16]	; (800e22c <ip4_input+0x240>)
 800e21c:	2200      	movs	r2, #0
 800e21e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e220:	2300      	movs	r3, #0
}
 800e222:	4618      	mov	r0, r3
 800e224:	3718      	adds	r7, #24
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	20005240 	.word	0x20005240
 800e230:	200087a4 	.word	0x200087a4

0800e234 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b08a      	sub	sp, #40	; 0x28
 800e238:	af04      	add	r7, sp, #16
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	607a      	str	r2, [r7, #4]
 800e240:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d009      	beq.n	800e260 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d003      	beq.n	800e25a <ip4_output_if+0x26>
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d102      	bne.n	800e260 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25c:	3304      	adds	r3, #4
 800e25e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e260:	78fa      	ldrb	r2, [r7, #3]
 800e262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e264:	9302      	str	r3, [sp, #8]
 800e266:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e26a:	9301      	str	r3, [sp, #4]
 800e26c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	4613      	mov	r3, r2
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	6979      	ldr	r1, [r7, #20]
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f000 f805 	bl	800e288 <ip4_output_if_src>
 800e27e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e280:	4618      	mov	r0, r3
 800e282:	3718      	adds	r7, #24
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b088      	sub	sp, #32
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	607a      	str	r2, [r7, #4]
 800e294:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	7b9b      	ldrb	r3, [r3, #14]
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	d006      	beq.n	800e2ac <ip4_output_if_src+0x24>
 800e29e:	4b4b      	ldr	r3, [pc, #300]	; (800e3cc <ip4_output_if_src+0x144>)
 800e2a0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e2a4:	494a      	ldr	r1, [pc, #296]	; (800e3d0 <ip4_output_if_src+0x148>)
 800e2a6:	484b      	ldr	r0, [pc, #300]	; (800e3d4 <ip4_output_if_src+0x14c>)
 800e2a8:	f001 f8cc 	bl	800f444 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d060      	beq.n	800e374 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e2b2:	2314      	movs	r3, #20
 800e2b4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e2b6:	2114      	movs	r1, #20
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	f7f8 fd9f 	bl	8006dfc <pbuf_add_header>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d002      	beq.n	800e2ca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e2c4:	f06f 0301 	mvn.w	r3, #1
 800e2c8:	e07c      	b.n	800e3c4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	895b      	ldrh	r3, [r3, #10]
 800e2d4:	2b13      	cmp	r3, #19
 800e2d6:	d806      	bhi.n	800e2e6 <ip4_output_if_src+0x5e>
 800e2d8:	4b3c      	ldr	r3, [pc, #240]	; (800e3cc <ip4_output_if_src+0x144>)
 800e2da:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e2de:	493e      	ldr	r1, [pc, #248]	; (800e3d8 <ip4_output_if_src+0x150>)
 800e2e0:	483c      	ldr	r0, [pc, #240]	; (800e3d4 <ip4_output_if_src+0x14c>)
 800e2e2:	f001 f8af 	bl	800f444 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	78fa      	ldrb	r2, [r7, #3]
 800e2ea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e2f2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	69fb      	ldr	r3, [r7, #28]
 800e2fa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e2fc:	8b7b      	ldrh	r3, [r7, #26]
 800e2fe:	089b      	lsrs	r3, r3, #2
 800e300:	b29b      	uxth	r3, r3
 800e302:	b2db      	uxtb	r3, r3
 800e304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e308:	b2da      	uxtb	r2, r3
 800e30a:	69fb      	ldr	r3, [r7, #28]
 800e30c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e314:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	891b      	ldrh	r3, [r3, #8]
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7f7 faa6 	bl	800586c <lwip_htons>
 800e320:	4603      	mov	r3, r0
 800e322:	461a      	mov	r2, r3
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	2200      	movs	r2, #0
 800e32c:	719a      	strb	r2, [r3, #6]
 800e32e:	2200      	movs	r2, #0
 800e330:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e332:	4b2a      	ldr	r3, [pc, #168]	; (800e3dc <ip4_output_if_src+0x154>)
 800e334:	881b      	ldrh	r3, [r3, #0]
 800e336:	4618      	mov	r0, r3
 800e338:	f7f7 fa98 	bl	800586c <lwip_htons>
 800e33c:	4603      	mov	r3, r0
 800e33e:	461a      	mov	r2, r3
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e344:	4b25      	ldr	r3, [pc, #148]	; (800e3dc <ip4_output_if_src+0x154>)
 800e346:	881b      	ldrh	r3, [r3, #0]
 800e348:	3301      	adds	r3, #1
 800e34a:	b29a      	uxth	r2, r3
 800e34c:	4b23      	ldr	r3, [pc, #140]	; (800e3dc <ip4_output_if_src+0x154>)
 800e34e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d104      	bne.n	800e360 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e356:	4b22      	ldr	r3, [pc, #136]	; (800e3e0 <ip4_output_if_src+0x158>)
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	69fb      	ldr	r3, [r7, #28]
 800e35c:	60da      	str	r2, [r3, #12]
 800e35e:	e003      	b.n	800e368 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e368:	69fb      	ldr	r3, [r7, #28]
 800e36a:	2200      	movs	r2, #0
 800e36c:	729a      	strb	r2, [r3, #10]
 800e36e:	2200      	movs	r2, #0
 800e370:	72da      	strb	r2, [r3, #11]
 800e372:	e00f      	b.n	800e394 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	895b      	ldrh	r3, [r3, #10]
 800e378:	2b13      	cmp	r3, #19
 800e37a:	d802      	bhi.n	800e382 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e37c:	f06f 0301 	mvn.w	r3, #1
 800e380:	e020      	b.n	800e3c4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e388:	69fb      	ldr	r3, [r7, #28]
 800e38a:	691b      	ldr	r3, [r3, #16]
 800e38c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e38e:	f107 0314 	add.w	r3, r7, #20
 800e392:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e396:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d00c      	beq.n	800e3b6 <ip4_output_if_src+0x12e>
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	891a      	ldrh	r2, [r3, #8]
 800e3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d906      	bls.n	800e3b6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e3ac:	68f8      	ldr	r0, [r7, #12]
 800e3ae:	f000 fde3 	bl	800ef78 <ip4_frag>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	e006      	b.n	800e3c4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b8:	695b      	ldr	r3, [r3, #20]
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	68f9      	ldr	r1, [r7, #12]
 800e3be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3c0:	4798      	blx	r3
 800e3c2:	4603      	mov	r3, r0
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3720      	adds	r7, #32
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	08012c9c 	.word	0x08012c9c
 800e3d0:	08012cd0 	.word	0x08012cd0
 800e3d4:	08012cdc 	.word	0x08012cdc
 800e3d8:	08012d04 	.word	0x08012d04
 800e3dc:	20008902 	.word	0x20008902
 800e3e0:	080130e4 	.word	0x080130e4

0800e3e4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3f8:	d002      	beq.n	800e400 <ip4_addr_isbroadcast_u32+0x1c>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d101      	bne.n	800e404 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e400:	2301      	movs	r3, #1
 800e402:	e02a      	b.n	800e45a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e40a:	f003 0302 	and.w	r3, r3, #2
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d101      	bne.n	800e416 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e412:	2300      	movs	r3, #0
 800e414:	e021      	b.n	800e45a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	3304      	adds	r3, #4
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	687a      	ldr	r2, [r7, #4]
 800e41e:	429a      	cmp	r2, r3
 800e420:	d101      	bne.n	800e426 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e422:	2300      	movs	r3, #0
 800e424:	e019      	b.n	800e45a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e426:	68fa      	ldr	r2, [r7, #12]
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	3304      	adds	r3, #4
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	405a      	eors	r2, r3
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	3308      	adds	r3, #8
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4013      	ands	r3, r2
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d10d      	bne.n	800e458 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	3308      	adds	r3, #8
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	43da      	mvns	r2, r3
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	3308      	adds	r3, #8
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e450:	429a      	cmp	r2, r3
 800e452:	d101      	bne.n	800e458 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e454:	2301      	movs	r3, #1
 800e456:	e000      	b.n	800e45a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e458:	2300      	movs	r3, #0
  }
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3714      	adds	r7, #20
 800e45e:	46bd      	mov	sp, r7
 800e460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e464:	4770      	bx	lr
	...

0800e468 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b082      	sub	sp, #8
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800e470:	2210      	movs	r2, #16
 800e472:	4904      	ldr	r1, [pc, #16]	; (800e484 <ip4addr_ntoa+0x1c>)
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f000 f807 	bl	800e488 <ip4addr_ntoa_r>
 800e47a:	4603      	mov	r3, r0
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3708      	adds	r7, #8
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}
 800e484:	20008904 	.word	0x20008904

0800e488 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800e488:	b480      	push	{r7}
 800e48a:	b08d      	sub	sp, #52	; 0x34
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800e494:	2300      	movs	r3, #0
 800e496:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800e4a2:	f107 0318 	add.w	r3, r7, #24
 800e4a6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4ae:	e058      	b.n	800e562 <ip4addr_ntoa_r+0xda>
    i = 0;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800e4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b8:	781a      	ldrb	r2, [r3, #0]
 800e4ba:	4b32      	ldr	r3, [pc, #200]	; (800e584 <ip4addr_ntoa_r+0xfc>)
 800e4bc:	fba3 1302 	umull	r1, r3, r3, r2
 800e4c0:	08d9      	lsrs	r1, r3, #3
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	440b      	add	r3, r1
 800e4c8:	005b      	lsls	r3, r3, #1
 800e4ca:	1ad3      	subs	r3, r2, r3
 800e4cc:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800e4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	4a2c      	ldr	r2, [pc, #176]	; (800e584 <ip4addr_ntoa_r+0xfc>)
 800e4d4:	fba2 2303 	umull	r2, r3, r2, r3
 800e4d8:	08db      	lsrs	r3, r3, #3
 800e4da:	b2da      	uxtb	r2, r3
 800e4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4de:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800e4e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4e4:	1c5a      	adds	r2, r3, #1
 800e4e6:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	7ffb      	ldrb	r3, [r7, #31]
 800e4ee:	3330      	adds	r3, #48	; 0x30
 800e4f0:	b2da      	uxtb	r2, r3
 800e4f2:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800e4f6:	443b      	add	r3, r7
 800e4f8:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800e4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d1d8      	bne.n	800e4b6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800e504:	e011      	b.n	800e52a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800e506:	6a3b      	ldr	r3, [r7, #32]
 800e508:	1c5a      	adds	r2, r3, #1
 800e50a:	623a      	str	r2, [r7, #32]
 800e50c:	687a      	ldr	r2, [r7, #4]
 800e50e:	429a      	cmp	r2, r3
 800e510:	dc01      	bgt.n	800e516 <ip4addr_ntoa_r+0x8e>
        return NULL;
 800e512:	2300      	movs	r3, #0
 800e514:	e030      	b.n	800e578 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800e516:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51c:	1c59      	adds	r1, r3, #1
 800e51e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800e520:	3230      	adds	r2, #48	; 0x30
 800e522:	443a      	add	r2, r7
 800e524:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800e528:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800e52a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e52e:	1e5a      	subs	r2, r3, #1
 800e530:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800e534:	2b00      	cmp	r3, #0
 800e536:	d1e6      	bne.n	800e506 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800e538:	6a3b      	ldr	r3, [r7, #32]
 800e53a:	1c5a      	adds	r2, r3, #1
 800e53c:	623a      	str	r2, [r7, #32]
 800e53e:	687a      	ldr	r2, [r7, #4]
 800e540:	429a      	cmp	r2, r3
 800e542:	dc01      	bgt.n	800e548 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800e544:	2300      	movs	r3, #0
 800e546:	e017      	b.n	800e578 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800e548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54a:	1c5a      	adds	r2, r3, #1
 800e54c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e54e:	222e      	movs	r2, #46	; 0x2e
 800e550:	701a      	strb	r2, [r3, #0]
    ap++;
 800e552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e554:	3301      	adds	r3, #1
 800e556:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800e558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e55c:	3301      	adds	r3, #1
 800e55e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e566:	2b03      	cmp	r3, #3
 800e568:	d9a2      	bls.n	800e4b0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800e56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56c:	3b01      	subs	r3, #1
 800e56e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e572:	2200      	movs	r2, #0
 800e574:	701a      	strb	r2, [r3, #0]
  return buf;
 800e576:	68bb      	ldr	r3, [r7, #8]
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3734      	adds	r7, #52	; 0x34
 800e57c:	46bd      	mov	sp, r7
 800e57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e582:	4770      	bx	lr
 800e584:	cccccccd 	.word	0xcccccccd

0800e588 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e58e:	2300      	movs	r3, #0
 800e590:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e592:	4b12      	ldr	r3, [pc, #72]	; (800e5dc <ip_reass_tmr+0x54>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e598:	e018      	b.n	800e5cc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	7fdb      	ldrb	r3, [r3, #31]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00b      	beq.n	800e5ba <ip_reass_tmr+0x32>
      r->timer--;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	7fdb      	ldrb	r3, [r3, #31]
 800e5a6:	3b01      	subs	r3, #1
 800e5a8:	b2da      	uxtb	r2, r3
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	60fb      	str	r3, [r7, #12]
 800e5b8:	e008      	b.n	800e5cc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e5c4:	68b9      	ldr	r1, [r7, #8]
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 f80a 	bl	800e5e0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d1e3      	bne.n	800e59a <ip_reass_tmr+0x12>
    }
  }
}
 800e5d2:	bf00      	nop
 800e5d4:	bf00      	nop
 800e5d6:	3710      	adds	r7, #16
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	20008914 	.word	0x20008914

0800e5e0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b088      	sub	sp, #32
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e5ee:	683a      	ldr	r2, [r7, #0]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d105      	bne.n	800e602 <ip_reass_free_complete_datagram+0x22>
 800e5f6:	4b45      	ldr	r3, [pc, #276]	; (800e70c <ip_reass_free_complete_datagram+0x12c>)
 800e5f8:	22ab      	movs	r2, #171	; 0xab
 800e5fa:	4945      	ldr	r1, [pc, #276]	; (800e710 <ip_reass_free_complete_datagram+0x130>)
 800e5fc:	4845      	ldr	r0, [pc, #276]	; (800e714 <ip_reass_free_complete_datagram+0x134>)
 800e5fe:	f000 ff21 	bl	800f444 <iprintf>
  if (prev != NULL) {
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d00a      	beq.n	800e61e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d005      	beq.n	800e61e <ip_reass_free_complete_datagram+0x3e>
 800e612:	4b3e      	ldr	r3, [pc, #248]	; (800e70c <ip_reass_free_complete_datagram+0x12c>)
 800e614:	22ad      	movs	r2, #173	; 0xad
 800e616:	4940      	ldr	r1, [pc, #256]	; (800e718 <ip_reass_free_complete_datagram+0x138>)
 800e618:	483e      	ldr	r0, [pc, #248]	; (800e714 <ip_reass_free_complete_datagram+0x134>)
 800e61a:	f000 ff13 	bl	800f444 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	889b      	ldrh	r3, [r3, #4]
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d12a      	bne.n	800e686 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e63e:	69bb      	ldr	r3, [r7, #24]
 800e640:	6858      	ldr	r0, [r3, #4]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	3308      	adds	r3, #8
 800e646:	2214      	movs	r2, #20
 800e648:	4619      	mov	r1, r3
 800e64a:	f000 fee5 	bl	800f418 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e64e:	2101      	movs	r1, #1
 800e650:	69b8      	ldr	r0, [r7, #24]
 800e652:	f7ff fbb7 	bl	800ddc4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e656:	69b8      	ldr	r0, [r7, #24]
 800e658:	f7f8 fcee 	bl	8007038 <pbuf_clen>
 800e65c:	4603      	mov	r3, r0
 800e65e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e660:	8bfa      	ldrh	r2, [r7, #30]
 800e662:	8a7b      	ldrh	r3, [r7, #18]
 800e664:	4413      	add	r3, r2
 800e666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e66a:	db05      	blt.n	800e678 <ip_reass_free_complete_datagram+0x98>
 800e66c:	4b27      	ldr	r3, [pc, #156]	; (800e70c <ip_reass_free_complete_datagram+0x12c>)
 800e66e:	22bc      	movs	r2, #188	; 0xbc
 800e670:	492a      	ldr	r1, [pc, #168]	; (800e71c <ip_reass_free_complete_datagram+0x13c>)
 800e672:	4828      	ldr	r0, [pc, #160]	; (800e714 <ip_reass_free_complete_datagram+0x134>)
 800e674:	f000 fee6 	bl	800f444 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e678:	8bfa      	ldrh	r2, [r7, #30]
 800e67a:	8a7b      	ldrh	r3, [r7, #18]
 800e67c:	4413      	add	r3, r2
 800e67e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e680:	69b8      	ldr	r0, [r7, #24]
 800e682:	f7f8 fc51 	bl	8006f28 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e68c:	e01f      	b.n	800e6ce <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e69e:	68f8      	ldr	r0, [r7, #12]
 800e6a0:	f7f8 fcca 	bl	8007038 <pbuf_clen>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e6a8:	8bfa      	ldrh	r2, [r7, #30]
 800e6aa:	8a7b      	ldrh	r3, [r7, #18]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6b2:	db05      	blt.n	800e6c0 <ip_reass_free_complete_datagram+0xe0>
 800e6b4:	4b15      	ldr	r3, [pc, #84]	; (800e70c <ip_reass_free_complete_datagram+0x12c>)
 800e6b6:	22cc      	movs	r2, #204	; 0xcc
 800e6b8:	4918      	ldr	r1, [pc, #96]	; (800e71c <ip_reass_free_complete_datagram+0x13c>)
 800e6ba:	4816      	ldr	r0, [pc, #88]	; (800e714 <ip_reass_free_complete_datagram+0x134>)
 800e6bc:	f000 fec2 	bl	800f444 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e6c0:	8bfa      	ldrh	r2, [r7, #30]
 800e6c2:	8a7b      	ldrh	r3, [r7, #18]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e6c8:	68f8      	ldr	r0, [r7, #12]
 800e6ca:	f7f8 fc2d 	bl	8006f28 <pbuf_free>
  while (p != NULL) {
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1dc      	bne.n	800e68e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e6d4:	6839      	ldr	r1, [r7, #0]
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f000 f8c2 	bl	800e860 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e6dc:	4b10      	ldr	r3, [pc, #64]	; (800e720 <ip_reass_free_complete_datagram+0x140>)
 800e6de:	881b      	ldrh	r3, [r3, #0]
 800e6e0:	8bfa      	ldrh	r2, [r7, #30]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d905      	bls.n	800e6f2 <ip_reass_free_complete_datagram+0x112>
 800e6e6:	4b09      	ldr	r3, [pc, #36]	; (800e70c <ip_reass_free_complete_datagram+0x12c>)
 800e6e8:	22d2      	movs	r2, #210	; 0xd2
 800e6ea:	490e      	ldr	r1, [pc, #56]	; (800e724 <ip_reass_free_complete_datagram+0x144>)
 800e6ec:	4809      	ldr	r0, [pc, #36]	; (800e714 <ip_reass_free_complete_datagram+0x134>)
 800e6ee:	f000 fea9 	bl	800f444 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e6f2:	4b0b      	ldr	r3, [pc, #44]	; (800e720 <ip_reass_free_complete_datagram+0x140>)
 800e6f4:	881a      	ldrh	r2, [r3, #0]
 800e6f6:	8bfb      	ldrh	r3, [r7, #30]
 800e6f8:	1ad3      	subs	r3, r2, r3
 800e6fa:	b29a      	uxth	r2, r3
 800e6fc:	4b08      	ldr	r3, [pc, #32]	; (800e720 <ip_reass_free_complete_datagram+0x140>)
 800e6fe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e700:	8bfb      	ldrh	r3, [r7, #30]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3720      	adds	r7, #32
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	08012d34 	.word	0x08012d34
 800e710:	08012d70 	.word	0x08012d70
 800e714:	08012d7c 	.word	0x08012d7c
 800e718:	08012da4 	.word	0x08012da4
 800e71c:	08012db8 	.word	0x08012db8
 800e720:	20008918 	.word	0x20008918
 800e724:	08012dd8 	.word	0x08012dd8

0800e728 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b08a      	sub	sp, #40	; 0x28
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e732:	2300      	movs	r3, #0
 800e734:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e736:	2300      	movs	r3, #0
 800e738:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e73a:	2300      	movs	r3, #0
 800e73c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e73e:	2300      	movs	r3, #0
 800e740:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e742:	2300      	movs	r3, #0
 800e744:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e746:	4b28      	ldr	r3, [pc, #160]	; (800e7e8 <ip_reass_remove_oldest_datagram+0xc0>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e74c:	e030      	b.n	800e7b0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e750:	695a      	ldr	r2, [r3, #20]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	68db      	ldr	r3, [r3, #12]
 800e756:	429a      	cmp	r2, r3
 800e758:	d10c      	bne.n	800e774 <ip_reass_remove_oldest_datagram+0x4c>
 800e75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75c:	699a      	ldr	r2, [r3, #24]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	691b      	ldr	r3, [r3, #16]
 800e762:	429a      	cmp	r2, r3
 800e764:	d106      	bne.n	800e774 <ip_reass_remove_oldest_datagram+0x4c>
 800e766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e768:	899a      	ldrh	r2, [r3, #12]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	889b      	ldrh	r3, [r3, #4]
 800e76e:	b29b      	uxth	r3, r3
 800e770:	429a      	cmp	r2, r3
 800e772:	d014      	beq.n	800e79e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	3301      	adds	r3, #1
 800e778:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e77a:	6a3b      	ldr	r3, [r7, #32]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d104      	bne.n	800e78a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e782:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	61bb      	str	r3, [r7, #24]
 800e788:	e009      	b.n	800e79e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78c:	7fda      	ldrb	r2, [r3, #31]
 800e78e:	6a3b      	ldr	r3, [r7, #32]
 800e790:	7fdb      	ldrb	r3, [r3, #31]
 800e792:	429a      	cmp	r2, r3
 800e794:	d803      	bhi.n	800e79e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e798:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d001      	beq.n	800e7aa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d1cb      	bne.n	800e74e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e7b6:	6a3b      	ldr	r3, [r7, #32]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d008      	beq.n	800e7ce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e7bc:	69b9      	ldr	r1, [r7, #24]
 800e7be:	6a38      	ldr	r0, [r7, #32]
 800e7c0:	f7ff ff0e 	bl	800e5e0 <ip_reass_free_complete_datagram>
 800e7c4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e7c6:	697a      	ldr	r2, [r7, #20]
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	4413      	add	r3, r2
 800e7cc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e7ce:	697a      	ldr	r2, [r7, #20]
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	da02      	bge.n	800e7dc <ip_reass_remove_oldest_datagram+0xb4>
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	2b01      	cmp	r3, #1
 800e7da:	dcac      	bgt.n	800e736 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e7dc:	697b      	ldr	r3, [r7, #20]
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3728      	adds	r7, #40	; 0x28
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	20008914 	.word	0x20008914

0800e7ec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e7f6:	2004      	movs	r0, #4
 800e7f8:	f7f7 fcb0 	bl	800615c <memp_malloc>
 800e7fc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d110      	bne.n	800e826 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e804:	6839      	ldr	r1, [r7, #0]
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f7ff ff8e 	bl	800e728 <ip_reass_remove_oldest_datagram>
 800e80c:	4602      	mov	r2, r0
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	4293      	cmp	r3, r2
 800e812:	dc03      	bgt.n	800e81c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e814:	2004      	movs	r0, #4
 800e816:	f7f7 fca1 	bl	800615c <memp_malloc>
 800e81a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d101      	bne.n	800e826 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e822:	2300      	movs	r3, #0
 800e824:	e016      	b.n	800e854 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e826:	2220      	movs	r2, #32
 800e828:	2100      	movs	r1, #0
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	f000 fe02 	bl	800f434 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	220f      	movs	r2, #15
 800e834:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e836:	4b09      	ldr	r3, [pc, #36]	; (800e85c <ip_reass_enqueue_new_datagram+0x70>)
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e83e:	4a07      	ldr	r2, [pc, #28]	; (800e85c <ip_reass_enqueue_new_datagram+0x70>)
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	3308      	adds	r3, #8
 800e848:	2214      	movs	r2, #20
 800e84a:	6879      	ldr	r1, [r7, #4]
 800e84c:	4618      	mov	r0, r3
 800e84e:	f000 fde3 	bl	800f418 <memcpy>
  return ipr;
 800e852:	68fb      	ldr	r3, [r7, #12]
}
 800e854:	4618      	mov	r0, r3
 800e856:	3710      	adds	r7, #16
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}
 800e85c:	20008914 	.word	0x20008914

0800e860 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e86a:	4b10      	ldr	r3, [pc, #64]	; (800e8ac <ip_reass_dequeue_datagram+0x4c>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	429a      	cmp	r2, r3
 800e872:	d104      	bne.n	800e87e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4a0c      	ldr	r2, [pc, #48]	; (800e8ac <ip_reass_dequeue_datagram+0x4c>)
 800e87a:	6013      	str	r3, [r2, #0]
 800e87c:	e00d      	b.n	800e89a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d106      	bne.n	800e892 <ip_reass_dequeue_datagram+0x32>
 800e884:	4b0a      	ldr	r3, [pc, #40]	; (800e8b0 <ip_reass_dequeue_datagram+0x50>)
 800e886:	f240 1245 	movw	r2, #325	; 0x145
 800e88a:	490a      	ldr	r1, [pc, #40]	; (800e8b4 <ip_reass_dequeue_datagram+0x54>)
 800e88c:	480a      	ldr	r0, [pc, #40]	; (800e8b8 <ip_reass_dequeue_datagram+0x58>)
 800e88e:	f000 fdd9 	bl	800f444 <iprintf>
    prev->next = ipr->next;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e89a:	6879      	ldr	r1, [r7, #4]
 800e89c:	2004      	movs	r0, #4
 800e89e:	f7f7 fccd 	bl	800623c <memp_free>
}
 800e8a2:	bf00      	nop
 800e8a4:	3708      	adds	r7, #8
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	20008914 	.word	0x20008914
 800e8b0:	08012d34 	.word	0x08012d34
 800e8b4:	08012dfc 	.word	0x08012dfc
 800e8b8:	08012d7c 	.word	0x08012d7c

0800e8bc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b08c      	sub	sp, #48	; 0x30
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	885b      	ldrh	r3, [r3, #2]
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7f6 ffc5 	bl	800586c <lwip_htons>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e8e6:	69fb      	ldr	r3, [r7, #28]
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	f003 030f 	and.w	r3, r3, #15
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e8f4:	7e7b      	ldrb	r3, [r7, #25]
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	8b7a      	ldrh	r2, [r7, #26]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d202      	bcs.n	800e904 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e8fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e902:	e135      	b.n	800eb70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e904:	7e7b      	ldrb	r3, [r7, #25]
 800e906:	b29b      	uxth	r3, r3
 800e908:	8b7a      	ldrh	r2, [r7, #26]
 800e90a:	1ad3      	subs	r3, r2, r3
 800e90c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	88db      	ldrh	r3, [r3, #6]
 800e912:	b29b      	uxth	r3, r3
 800e914:	4618      	mov	r0, r3
 800e916:	f7f6 ffa9 	bl	800586c <lwip_htons>
 800e91a:	4603      	mov	r3, r0
 800e91c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e920:	b29b      	uxth	r3, r3
 800e922:	00db      	lsls	r3, r3, #3
 800e924:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92e:	2200      	movs	r2, #0
 800e930:	701a      	strb	r2, [r3, #0]
 800e932:	2200      	movs	r2, #0
 800e934:	705a      	strb	r2, [r3, #1]
 800e936:	2200      	movs	r2, #0
 800e938:	709a      	strb	r2, [r3, #2]
 800e93a:	2200      	movs	r2, #0
 800e93c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e940:	8afa      	ldrh	r2, [r7, #22]
 800e942:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e944:	8afa      	ldrh	r2, [r7, #22]
 800e946:	8b7b      	ldrh	r3, [r7, #26]
 800e948:	4413      	add	r3, r2
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e952:	88db      	ldrh	r3, [r3, #6]
 800e954:	b29b      	uxth	r3, r3
 800e956:	8afa      	ldrh	r2, [r7, #22]
 800e958:	429a      	cmp	r2, r3
 800e95a:	d902      	bls.n	800e962 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e95c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e960:	e106      	b.n	800eb70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	627b      	str	r3, [r7, #36]	; 0x24
 800e968:	e068      	b.n	800ea3c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e972:	889b      	ldrh	r3, [r3, #4]
 800e974:	b29a      	uxth	r2, r3
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	889b      	ldrh	r3, [r3, #4]
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d235      	bcs.n	800e9ec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e984:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d020      	beq.n	800e9ce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98e:	889b      	ldrh	r3, [r3, #4]
 800e990:	b29a      	uxth	r2, r3
 800e992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e994:	88db      	ldrh	r3, [r3, #6]
 800e996:	b29b      	uxth	r3, r3
 800e998:	429a      	cmp	r2, r3
 800e99a:	d307      	bcc.n	800e9ac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99e:	88db      	ldrh	r3, [r3, #6]
 800e9a0:	b29a      	uxth	r2, r3
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	889b      	ldrh	r3, [r3, #4]
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d902      	bls.n	800e9b2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e9ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9b0:	e0de      	b.n	800eb70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b4:	68ba      	ldr	r2, [r7, #8]
 800e9b6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ba:	88db      	ldrh	r3, [r3, #6]
 800e9bc:	b29a      	uxth	r2, r3
 800e9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c0:	889b      	ldrh	r3, [r3, #4]
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d03d      	beq.n	800ea44 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e9cc:	e03a      	b.n	800ea44 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d0:	88db      	ldrh	r3, [r3, #6]
 800e9d2:	b29a      	uxth	r2, r3
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	889b      	ldrh	r3, [r3, #4]
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d902      	bls.n	800e9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e9de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9e2:	e0c5      	b.n	800eb70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	68ba      	ldr	r2, [r7, #8]
 800e9e8:	605a      	str	r2, [r3, #4]
      break;
 800e9ea:	e02b      	b.n	800ea44 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ee:	889b      	ldrh	r3, [r3, #4]
 800e9f0:	b29a      	uxth	r2, r3
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	889b      	ldrh	r3, [r3, #4]
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d102      	bne.n	800ea02 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e9fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea00:	e0b6      	b.n	800eb70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800ea02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea04:	889b      	ldrh	r3, [r3, #4]
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	88db      	ldrh	r3, [r3, #6]
 800ea0c:	b29b      	uxth	r3, r3
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d202      	bcs.n	800ea18 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ea12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea16:	e0ab      	b.n	800eb70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800ea18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d009      	beq.n	800ea32 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800ea1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea20:	88db      	ldrh	r3, [r3, #6]
 800ea22:	b29a      	uxth	r2, r3
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	889b      	ldrh	r3, [r3, #4]
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d001      	beq.n	800ea32 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800ea3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d193      	bne.n	800e96a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800ea42:	e000      	b.n	800ea46 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800ea44:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800ea46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d12d      	bne.n	800eaa8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800ea4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d01c      	beq.n	800ea8c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800ea52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea54:	88db      	ldrh	r3, [r3, #6]
 800ea56:	b29a      	uxth	r2, r3
 800ea58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5a:	889b      	ldrh	r3, [r3, #4]
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d906      	bls.n	800ea70 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800ea62:	4b45      	ldr	r3, [pc, #276]	; (800eb78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ea64:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800ea68:	4944      	ldr	r1, [pc, #272]	; (800eb7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ea6a:	4845      	ldr	r0, [pc, #276]	; (800eb80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ea6c:	f000 fcea 	bl	800f444 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800ea70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea72:	68ba      	ldr	r2, [r7, #8]
 800ea74:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ea76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea78:	88db      	ldrh	r3, [r3, #6]
 800ea7a:	b29a      	uxth	r2, r3
 800ea7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7e:	889b      	ldrh	r3, [r3, #4]
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d010      	beq.n	800eaa8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ea86:	2300      	movs	r3, #0
 800ea88:	623b      	str	r3, [r7, #32]
 800ea8a:	e00d      	b.n	800eaa8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d006      	beq.n	800eaa2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ea94:	4b38      	ldr	r3, [pc, #224]	; (800eb78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ea96:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800ea9a:	493a      	ldr	r1, [pc, #232]	; (800eb84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ea9c:	4838      	ldr	r0, [pc, #224]	; (800eb80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ea9e:	f000 fcd1 	bl	800f444 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	68ba      	ldr	r2, [r7, #8]
 800eaa6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d105      	bne.n	800eaba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	7f9b      	ldrb	r3, [r3, #30]
 800eab2:	f003 0301 	and.w	r3, r3, #1
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d059      	beq.n	800eb6e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800eaba:	6a3b      	ldr	r3, [r7, #32]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d04f      	beq.n	800eb60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d006      	beq.n	800ead6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	889b      	ldrh	r3, [r3, #4]
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d002      	beq.n	800eadc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ead6:	2300      	movs	r3, #0
 800ead8:	623b      	str	r3, [r7, #32]
 800eada:	e041      	b.n	800eb60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800eadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eade:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800eae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800eae6:	e012      	b.n	800eb0e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800eae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800eaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf0:	88db      	ldrh	r3, [r3, #6]
 800eaf2:	b29a      	uxth	r2, r3
 800eaf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf6:	889b      	ldrh	r3, [r3, #4]
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d002      	beq.n	800eb04 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800eafe:	2300      	movs	r3, #0
 800eb00:	623b      	str	r3, [r7, #32]
            break;
 800eb02:	e007      	b.n	800eb14 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800eb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb06:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800eb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800eb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d1e9      	bne.n	800eae8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800eb14:	6a3b      	ldr	r3, [r7, #32]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d022      	beq.n	800eb60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	685b      	ldr	r3, [r3, #4]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d106      	bne.n	800eb30 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800eb22:	4b15      	ldr	r3, [pc, #84]	; (800eb78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eb24:	f240 12df 	movw	r2, #479	; 0x1df
 800eb28:	4917      	ldr	r1, [pc, #92]	; (800eb88 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800eb2a:	4815      	ldr	r0, [pc, #84]	; (800eb80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800eb2c:	f000 fc8a 	bl	800f444 <iprintf>
          LWIP_ASSERT("sanity check",
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	685b      	ldr	r3, [r3, #4]
 800eb36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d106      	bne.n	800eb4a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800eb3c:	4b0e      	ldr	r3, [pc, #56]	; (800eb78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eb3e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800eb42:	4911      	ldr	r1, [pc, #68]	; (800eb88 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800eb44:	480e      	ldr	r0, [pc, #56]	; (800eb80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800eb46:	f000 fc7d 	bl	800f444 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800eb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d006      	beq.n	800eb60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800eb52:	4b09      	ldr	r3, [pc, #36]	; (800eb78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eb54:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800eb58:	490c      	ldr	r1, [pc, #48]	; (800eb8c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800eb5a:	4809      	ldr	r0, [pc, #36]	; (800eb80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800eb5c:	f000 fc72 	bl	800f444 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800eb60:	6a3b      	ldr	r3, [r7, #32]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	bf14      	ite	ne
 800eb66:	2301      	movne	r3, #1
 800eb68:	2300      	moveq	r3, #0
 800eb6a:	b2db      	uxtb	r3, r3
 800eb6c:	e000      	b.n	800eb70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800eb6e:	2300      	movs	r3, #0
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3730      	adds	r7, #48	; 0x30
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	08012d34 	.word	0x08012d34
 800eb7c:	08012e18 	.word	0x08012e18
 800eb80:	08012d7c 	.word	0x08012d7c
 800eb84:	08012e38 	.word	0x08012e38
 800eb88:	08012e70 	.word	0x08012e70
 800eb8c:	08012e80 	.word	0x08012e80

0800eb90 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b08e      	sub	sp, #56	; 0x38
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800eb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	f003 030f 	and.w	r3, r3, #15
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	009b      	lsls	r3, r3, #2
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	2b14      	cmp	r3, #20
 800ebae:	f040 8171 	bne.w	800ee94 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800ebb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb4:	88db      	ldrh	r3, [r3, #6]
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7f6 fe57 	bl	800586c <lwip_htons>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	00db      	lsls	r3, r3, #3
 800ebc8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ebca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebcc:	885b      	ldrh	r3, [r3, #2]
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7f6 fe4b 	bl	800586c <lwip_htons>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800ebda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	f003 030f 	and.w	r3, r3, #15
 800ebe2:	b2db      	uxtb	r3, r3
 800ebe4:	009b      	lsls	r3, r3, #2
 800ebe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800ebea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	f0c0 8150 	bcc.w	800ee98 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800ebf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec00:	1ad3      	subs	r3, r2, r3
 800ec02:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f7f8 fa17 	bl	8007038 <pbuf_clen>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ec0e:	4b8c      	ldr	r3, [pc, #560]	; (800ee40 <ip4_reass+0x2b0>)
 800ec10:	881b      	ldrh	r3, [r3, #0]
 800ec12:	461a      	mov	r2, r3
 800ec14:	8c3b      	ldrh	r3, [r7, #32]
 800ec16:	4413      	add	r3, r2
 800ec18:	2b0a      	cmp	r3, #10
 800ec1a:	dd10      	ble.n	800ec3e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ec1c:	8c3b      	ldrh	r3, [r7, #32]
 800ec1e:	4619      	mov	r1, r3
 800ec20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec22:	f7ff fd81 	bl	800e728 <ip_reass_remove_oldest_datagram>
 800ec26:	4603      	mov	r3, r0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f000 8137 	beq.w	800ee9c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ec2e:	4b84      	ldr	r3, [pc, #528]	; (800ee40 <ip4_reass+0x2b0>)
 800ec30:	881b      	ldrh	r3, [r3, #0]
 800ec32:	461a      	mov	r2, r3
 800ec34:	8c3b      	ldrh	r3, [r7, #32]
 800ec36:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ec38:	2b0a      	cmp	r3, #10
 800ec3a:	f300 812f 	bgt.w	800ee9c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ec3e:	4b81      	ldr	r3, [pc, #516]	; (800ee44 <ip4_reass+0x2b4>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	633b      	str	r3, [r7, #48]	; 0x30
 800ec44:	e015      	b.n	800ec72 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ec46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec48:	695a      	ldr	r2, [r3, #20]
 800ec4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4c:	68db      	ldr	r3, [r3, #12]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d10c      	bne.n	800ec6c <ip4_reass+0xdc>
 800ec52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec54:	699a      	ldr	r2, [r3, #24]
 800ec56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec58:	691b      	ldr	r3, [r3, #16]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d106      	bne.n	800ec6c <ip4_reass+0xdc>
 800ec5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec60:	899a      	ldrh	r2, [r3, #12]
 800ec62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec64:	889b      	ldrh	r3, [r3, #4]
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d006      	beq.n	800ec7a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ec6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	633b      	str	r3, [r7, #48]	; 0x30
 800ec72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d1e6      	bne.n	800ec46 <ip4_reass+0xb6>
 800ec78:	e000      	b.n	800ec7c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ec7a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ec7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d109      	bne.n	800ec96 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ec82:	8c3b      	ldrh	r3, [r7, #32]
 800ec84:	4619      	mov	r1, r3
 800ec86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec88:	f7ff fdb0 	bl	800e7ec <ip_reass_enqueue_new_datagram>
 800ec8c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ec8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d11c      	bne.n	800ecce <ip4_reass+0x13e>
      goto nullreturn;
 800ec94:	e105      	b.n	800eea2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ec96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec98:	88db      	ldrh	r3, [r3, #6]
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7f6 fde5 	bl	800586c <lwip_htons>
 800eca2:	4603      	mov	r3, r0
 800eca4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d110      	bne.n	800ecce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ecac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecae:	89db      	ldrh	r3, [r3, #14]
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7f6 fddb 	bl	800586c <lwip_htons>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d006      	beq.n	800ecce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ecc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc2:	3308      	adds	r3, #8
 800ecc4:	2214      	movs	r2, #20
 800ecc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f000 fba5 	bl	800f418 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ecce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd0:	88db      	ldrh	r3, [r3, #6]
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	f003 0320 	and.w	r3, r3, #32
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	bf0c      	ite	eq
 800ecdc:	2301      	moveq	r3, #1
 800ecde:	2300      	movne	r3, #0
 800ece0:	b2db      	uxtb	r3, r3
 800ece2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d00e      	beq.n	800ed08 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ecea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ecec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecee:	4413      	add	r3, r2
 800ecf0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ecf2:	8b7a      	ldrh	r2, [r7, #26]
 800ecf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	f0c0 80a0 	bcc.w	800ee3c <ip4_reass+0x2ac>
 800ecfc:	8b7b      	ldrh	r3, [r7, #26]
 800ecfe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ed02:	4293      	cmp	r3, r2
 800ed04:	f200 809a 	bhi.w	800ee3c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ed08:	69fa      	ldr	r2, [r7, #28]
 800ed0a:	6879      	ldr	r1, [r7, #4]
 800ed0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed0e:	f7ff fdd5 	bl	800e8bc <ip_reass_chain_frag_into_datagram_and_validate>
 800ed12:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed1a:	f000 809b 	beq.w	800ee54 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ed1e:	4b48      	ldr	r3, [pc, #288]	; (800ee40 <ip4_reass+0x2b0>)
 800ed20:	881a      	ldrh	r2, [r3, #0]
 800ed22:	8c3b      	ldrh	r3, [r7, #32]
 800ed24:	4413      	add	r3, r2
 800ed26:	b29a      	uxth	r2, r3
 800ed28:	4b45      	ldr	r3, [pc, #276]	; (800ee40 <ip4_reass+0x2b0>)
 800ed2a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d00d      	beq.n	800ed4e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ed32:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ed34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed36:	4413      	add	r3, r2
 800ed38:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ed3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3c:	8a7a      	ldrh	r2, [r7, #18]
 800ed3e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ed40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed42:	7f9b      	ldrb	r3, [r3, #30]
 800ed44:	f043 0301 	orr.w	r3, r3, #1
 800ed48:	b2da      	uxtb	r2, r3
 800ed4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d171      	bne.n	800ee38 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ed54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed56:	8b9b      	ldrh	r3, [r3, #28]
 800ed58:	3314      	adds	r3, #20
 800ed5a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ed5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ed66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ed6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed70:	3308      	adds	r3, #8
 800ed72:	2214      	movs	r2, #20
 800ed74:	4619      	mov	r1, r3
 800ed76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed78:	f000 fb4e 	bl	800f418 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ed7c:	8a3b      	ldrh	r3, [r7, #16]
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7f6 fd74 	bl	800586c <lwip_htons>
 800ed84:	4603      	mov	r3, r0
 800ed86:	461a      	mov	r2, r3
 800ed88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ed8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8e:	2200      	movs	r2, #0
 800ed90:	719a      	strb	r2, [r3, #6]
 800ed92:	2200      	movs	r2, #0
 800ed94:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ed96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed98:	2200      	movs	r2, #0
 800ed9a:	729a      	strb	r2, [r3, #10]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800eda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800eda6:	e00d      	b.n	800edc4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800eda8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edaa:	685b      	ldr	r3, [r3, #4]
 800edac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800edae:	2114      	movs	r1, #20
 800edb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800edb2:	f7f8 f833 	bl	8006e1c <pbuf_remove_header>
      pbuf_cat(p, r);
 800edb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f7f8 f977 	bl	80070ac <pbuf_cat>
      r = iprh->next_pbuf;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800edc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d1ee      	bne.n	800eda8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800edca:	4b1e      	ldr	r3, [pc, #120]	; (800ee44 <ip4_reass+0x2b4>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d102      	bne.n	800edda <ip4_reass+0x24a>
      ipr_prev = NULL;
 800edd4:	2300      	movs	r3, #0
 800edd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edd8:	e010      	b.n	800edfc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800edda:	4b1a      	ldr	r3, [pc, #104]	; (800ee44 <ip4_reass+0x2b4>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ede0:	e007      	b.n	800edf2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ede2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ede8:	429a      	cmp	r2, r3
 800edea:	d006      	beq.n	800edfa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800edec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d1f4      	bne.n	800ede2 <ip4_reass+0x252>
 800edf8:	e000      	b.n	800edfc <ip4_reass+0x26c>
          break;
 800edfa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800edfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800edfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee00:	f7ff fd2e 	bl	800e860 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f7f8 f917 	bl	8007038 <pbuf_clen>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ee0e:	4b0c      	ldr	r3, [pc, #48]	; (800ee40 <ip4_reass+0x2b0>)
 800ee10:	881b      	ldrh	r3, [r3, #0]
 800ee12:	8c3a      	ldrh	r2, [r7, #32]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d906      	bls.n	800ee26 <ip4_reass+0x296>
 800ee18:	4b0b      	ldr	r3, [pc, #44]	; (800ee48 <ip4_reass+0x2b8>)
 800ee1a:	f240 229b 	movw	r2, #667	; 0x29b
 800ee1e:	490b      	ldr	r1, [pc, #44]	; (800ee4c <ip4_reass+0x2bc>)
 800ee20:	480b      	ldr	r0, [pc, #44]	; (800ee50 <ip4_reass+0x2c0>)
 800ee22:	f000 fb0f 	bl	800f444 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ee26:	4b06      	ldr	r3, [pc, #24]	; (800ee40 <ip4_reass+0x2b0>)
 800ee28:	881a      	ldrh	r2, [r3, #0]
 800ee2a:	8c3b      	ldrh	r3, [r7, #32]
 800ee2c:	1ad3      	subs	r3, r2, r3
 800ee2e:	b29a      	uxth	r2, r3
 800ee30:	4b03      	ldr	r3, [pc, #12]	; (800ee40 <ip4_reass+0x2b0>)
 800ee32:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	e038      	b.n	800eeaa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	e036      	b.n	800eeaa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ee3c:	bf00      	nop
 800ee3e:	e00a      	b.n	800ee56 <ip4_reass+0x2c6>
 800ee40:	20008918 	.word	0x20008918
 800ee44:	20008914 	.word	0x20008914
 800ee48:	08012d34 	.word	0x08012d34
 800ee4c:	08012ea4 	.word	0x08012ea4
 800ee50:	08012d7c 	.word	0x08012d7c
    goto nullreturn_ipr;
 800ee54:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ee56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d106      	bne.n	800ee6a <ip4_reass+0x2da>
 800ee5c:	4b15      	ldr	r3, [pc, #84]	; (800eeb4 <ip4_reass+0x324>)
 800ee5e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ee62:	4915      	ldr	r1, [pc, #84]	; (800eeb8 <ip4_reass+0x328>)
 800ee64:	4815      	ldr	r0, [pc, #84]	; (800eebc <ip4_reass+0x32c>)
 800ee66:	f000 faed 	bl	800f444 <iprintf>
  if (ipr->p == NULL) {
 800ee6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d116      	bne.n	800eea0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ee72:	4b13      	ldr	r3, [pc, #76]	; (800eec0 <ip4_reass+0x330>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d006      	beq.n	800ee8a <ip4_reass+0x2fa>
 800ee7c:	4b0d      	ldr	r3, [pc, #52]	; (800eeb4 <ip4_reass+0x324>)
 800ee7e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ee82:	4910      	ldr	r1, [pc, #64]	; (800eec4 <ip4_reass+0x334>)
 800ee84:	480d      	ldr	r0, [pc, #52]	; (800eebc <ip4_reass+0x32c>)
 800ee86:	f000 fadd 	bl	800f444 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ee8a:	2100      	movs	r1, #0
 800ee8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee8e:	f7ff fce7 	bl	800e860 <ip_reass_dequeue_datagram>
 800ee92:	e006      	b.n	800eea2 <ip4_reass+0x312>
    goto nullreturn;
 800ee94:	bf00      	nop
 800ee96:	e004      	b.n	800eea2 <ip4_reass+0x312>
    goto nullreturn;
 800ee98:	bf00      	nop
 800ee9a:	e002      	b.n	800eea2 <ip4_reass+0x312>
      goto nullreturn;
 800ee9c:	bf00      	nop
 800ee9e:	e000      	b.n	800eea2 <ip4_reass+0x312>
  }

nullreturn:
 800eea0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f7f8 f840 	bl	8006f28 <pbuf_free>
  return NULL;
 800eea8:	2300      	movs	r3, #0
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3738      	adds	r7, #56	; 0x38
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	08012d34 	.word	0x08012d34
 800eeb8:	08012ec0 	.word	0x08012ec0
 800eebc:	08012d7c 	.word	0x08012d7c
 800eec0:	20008914 	.word	0x20008914
 800eec4:	08012ecc 	.word	0x08012ecc

0800eec8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800eecc:	2005      	movs	r0, #5
 800eece:	f7f7 f945 	bl	800615c <memp_malloc>
 800eed2:	4603      	mov	r3, r0
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d106      	bne.n	800eef4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800eee6:	4b07      	ldr	r3, [pc, #28]	; (800ef04 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800eee8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800eeec:	4906      	ldr	r1, [pc, #24]	; (800ef08 <ip_frag_free_pbuf_custom_ref+0x30>)
 800eeee:	4807      	ldr	r0, [pc, #28]	; (800ef0c <ip_frag_free_pbuf_custom_ref+0x34>)
 800eef0:	f000 faa8 	bl	800f444 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800eef4:	6879      	ldr	r1, [r7, #4]
 800eef6:	2005      	movs	r0, #5
 800eef8:	f7f7 f9a0 	bl	800623c <memp_free>
}
 800eefc:	bf00      	nop
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	08012d34 	.word	0x08012d34
 800ef08:	08012eec 	.word	0x08012eec
 800ef0c:	08012d7c 	.word	0x08012d7c

0800ef10 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d106      	bne.n	800ef30 <ipfrag_free_pbuf_custom+0x20>
 800ef22:	4b11      	ldr	r3, [pc, #68]	; (800ef68 <ipfrag_free_pbuf_custom+0x58>)
 800ef24:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ef28:	4910      	ldr	r1, [pc, #64]	; (800ef6c <ipfrag_free_pbuf_custom+0x5c>)
 800ef2a:	4811      	ldr	r0, [pc, #68]	; (800ef70 <ipfrag_free_pbuf_custom+0x60>)
 800ef2c:	f000 fa8a 	bl	800f444 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ef30:	68fa      	ldr	r2, [r7, #12]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d006      	beq.n	800ef46 <ipfrag_free_pbuf_custom+0x36>
 800ef38:	4b0b      	ldr	r3, [pc, #44]	; (800ef68 <ipfrag_free_pbuf_custom+0x58>)
 800ef3a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ef3e:	490d      	ldr	r1, [pc, #52]	; (800ef74 <ipfrag_free_pbuf_custom+0x64>)
 800ef40:	480b      	ldr	r0, [pc, #44]	; (800ef70 <ipfrag_free_pbuf_custom+0x60>)
 800ef42:	f000 fa7f 	bl	800f444 <iprintf>
  if (pcr->original != NULL) {
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	695b      	ldr	r3, [r3, #20]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d004      	beq.n	800ef58 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	695b      	ldr	r3, [r3, #20]
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7f7 ffe8 	bl	8006f28 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f7ff ffbd 	bl	800eed8 <ip_frag_free_pbuf_custom_ref>
}
 800ef5e:	bf00      	nop
 800ef60:	3710      	adds	r7, #16
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	08012d34 	.word	0x08012d34
 800ef6c:	08012ef8 	.word	0x08012ef8
 800ef70:	08012d7c 	.word	0x08012d7c
 800ef74:	08012f04 	.word	0x08012f04

0800ef78 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b094      	sub	sp, #80	; 0x50
 800ef7c:	af02      	add	r7, sp, #8
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ef84:	2300      	movs	r3, #0
 800ef86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ef8e:	3b14      	subs	r3, #20
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	da00      	bge.n	800ef96 <ip4_frag+0x1e>
 800ef94:	3307      	adds	r3, #7
 800ef96:	10db      	asrs	r3, r3, #3
 800ef98:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ef9a:	2314      	movs	r3, #20
 800ef9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800efa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efa6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800efa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	f003 030f 	and.w	r3, r3, #15
 800efb0:	b2db      	uxtb	r3, r3
 800efb2:	009b      	lsls	r3, r3, #2
 800efb4:	b2db      	uxtb	r3, r3
 800efb6:	2b14      	cmp	r3, #20
 800efb8:	d002      	beq.n	800efc0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800efba:	f06f 0305 	mvn.w	r3, #5
 800efbe:	e110      	b.n	800f1e2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	895b      	ldrh	r3, [r3, #10]
 800efc4:	2b13      	cmp	r3, #19
 800efc6:	d809      	bhi.n	800efdc <ip4_frag+0x64>
 800efc8:	4b88      	ldr	r3, [pc, #544]	; (800f1ec <ip4_frag+0x274>)
 800efca:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800efce:	4988      	ldr	r1, [pc, #544]	; (800f1f0 <ip4_frag+0x278>)
 800efd0:	4888      	ldr	r0, [pc, #544]	; (800f1f4 <ip4_frag+0x27c>)
 800efd2:	f000 fa37 	bl	800f444 <iprintf>
 800efd6:	f06f 0305 	mvn.w	r3, #5
 800efda:	e102      	b.n	800f1e2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800efdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efde:	88db      	ldrh	r3, [r3, #6]
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7f6 fc42 	bl	800586c <lwip_htons>
 800efe8:	4603      	mov	r3, r0
 800efea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800efec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800efee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eff2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800eff6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800effc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	891b      	ldrh	r3, [r3, #8]
 800f002:	3b14      	subs	r3, #20
 800f004:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f008:	e0e1      	b.n	800f1ce <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f00a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f00c:	00db      	lsls	r3, r3, #3
 800f00e:	b29b      	uxth	r3, r3
 800f010:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f014:	4293      	cmp	r3, r2
 800f016:	bf28      	it	cs
 800f018:	4613      	movcs	r3, r2
 800f01a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f01c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f020:	2114      	movs	r1, #20
 800f022:	200e      	movs	r0, #14
 800f024:	f7f7 fc9c 	bl	8006960 <pbuf_alloc>
 800f028:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	f000 80d5 	beq.w	800f1dc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f034:	895b      	ldrh	r3, [r3, #10]
 800f036:	2b13      	cmp	r3, #19
 800f038:	d806      	bhi.n	800f048 <ip4_frag+0xd0>
 800f03a:	4b6c      	ldr	r3, [pc, #432]	; (800f1ec <ip4_frag+0x274>)
 800f03c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f040:	496d      	ldr	r1, [pc, #436]	; (800f1f8 <ip4_frag+0x280>)
 800f042:	486c      	ldr	r0, [pc, #432]	; (800f1f4 <ip4_frag+0x27c>)
 800f044:	f000 f9fe 	bl	800f444 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04a:	685b      	ldr	r3, [r3, #4]
 800f04c:	2214      	movs	r2, #20
 800f04e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f050:	4618      	mov	r0, r3
 800f052:	f000 f9e1 	bl	800f418 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f058:	685b      	ldr	r3, [r3, #4]
 800f05a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f05c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f05e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f062:	e064      	b.n	800f12e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	895a      	ldrh	r2, [r3, #10]
 800f068:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f06a:	1ad3      	subs	r3, r2, r3
 800f06c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	895b      	ldrh	r3, [r3, #10]
 800f072:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f074:	429a      	cmp	r2, r3
 800f076:	d906      	bls.n	800f086 <ip4_frag+0x10e>
 800f078:	4b5c      	ldr	r3, [pc, #368]	; (800f1ec <ip4_frag+0x274>)
 800f07a:	f240 322d 	movw	r2, #813	; 0x32d
 800f07e:	495f      	ldr	r1, [pc, #380]	; (800f1fc <ip4_frag+0x284>)
 800f080:	485c      	ldr	r0, [pc, #368]	; (800f1f4 <ip4_frag+0x27c>)
 800f082:	f000 f9df 	bl	800f444 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f086:	8bfa      	ldrh	r2, [r7, #30]
 800f088:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f08c:	4293      	cmp	r3, r2
 800f08e:	bf28      	it	cs
 800f090:	4613      	movcs	r3, r2
 800f092:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f096:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d105      	bne.n	800f0aa <ip4_frag+0x132>
        poff = 0;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	60fb      	str	r3, [r7, #12]
        continue;
 800f0a8:	e041      	b.n	800f12e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f0aa:	f7ff ff0d 	bl	800eec8 <ip_frag_alloc_pbuf_custom_ref>
 800f0ae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f0b0:	69bb      	ldr	r3, [r7, #24]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d103      	bne.n	800f0be <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f0b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0b8:	f7f7 ff36 	bl	8006f28 <pbuf_free>
        goto memerr;
 800f0bc:	e08f      	b.n	800f1de <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f0be:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f0c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f0c6:	4413      	add	r3, r2
 800f0c8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f0cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f0d0:	9201      	str	r2, [sp, #4]
 800f0d2:	9300      	str	r3, [sp, #0]
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2241      	movs	r2, #65	; 0x41
 800f0d8:	2000      	movs	r0, #0
 800f0da:	f7f7 fd6b 	bl	8006bb4 <pbuf_alloced_custom>
 800f0de:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d106      	bne.n	800f0f4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f0e6:	69b8      	ldr	r0, [r7, #24]
 800f0e8:	f7ff fef6 	bl	800eed8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f0ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0ee:	f7f7 ff1b 	bl	8006f28 <pbuf_free>
        goto memerr;
 800f0f2:	e074      	b.n	800f1de <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f0f4:	68f8      	ldr	r0, [r7, #12]
 800f0f6:	f7f7 ffb7 	bl	8007068 <pbuf_ref>
      pcr->original = p;
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	68fa      	ldr	r2, [r7, #12]
 800f0fe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	4a3f      	ldr	r2, [pc, #252]	; (800f200 <ip4_frag+0x288>)
 800f104:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f106:	6979      	ldr	r1, [r7, #20]
 800f108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f10a:	f7f7 ffcf 	bl	80070ac <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f10e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f112:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f116:	1ad3      	subs	r3, r2, r3
 800f118:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f11c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f120:	2b00      	cmp	r3, #0
 800f122:	d004      	beq.n	800f12e <ip4_frag+0x1b6>
        poff = 0;
 800f124:	2300      	movs	r3, #0
 800f126:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f12e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f132:	2b00      	cmp	r3, #0
 800f134:	d196      	bne.n	800f064 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f136:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f138:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f13c:	4413      	add	r3, r2
 800f13e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f144:	f1a3 0213 	sub.w	r2, r3, #19
 800f148:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f14c:	429a      	cmp	r2, r3
 800f14e:	bfcc      	ite	gt
 800f150:	2301      	movgt	r3, #1
 800f152:	2300      	movle	r3, #0
 800f154:	b2db      	uxtb	r3, r3
 800f156:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f158:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f15c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f160:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f162:	6a3b      	ldr	r3, [r7, #32]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d002      	beq.n	800f16e <ip4_frag+0x1f6>
 800f168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d003      	beq.n	800f176 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f16e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f170:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f174:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f176:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f178:	4618      	mov	r0, r3
 800f17a:	f7f6 fb77 	bl	800586c <lwip_htons>
 800f17e:	4603      	mov	r3, r0
 800f180:	461a      	mov	r2, r3
 800f182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f184:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f186:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f188:	3314      	adds	r3, #20
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7f6 fb6d 	bl	800586c <lwip_htons>
 800f192:	4603      	mov	r3, r0
 800f194:	461a      	mov	r2, r3
 800f196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f198:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19c:	2200      	movs	r2, #0
 800f19e:	729a      	strb	r2, [r3, #10]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	695b      	ldr	r3, [r3, #20]
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f1ac:	68b8      	ldr	r0, [r7, #8]
 800f1ae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f1b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1b2:	f7f7 feb9 	bl	8006f28 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f1b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f1ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f1bc:	1ad3      	subs	r3, r2, r3
 800f1be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f1c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f1c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f1c8:	4413      	add	r3, r2
 800f1ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f1ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	f47f af19 	bne.w	800f00a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	e002      	b.n	800f1e2 <ip4_frag+0x26a>
      goto memerr;
 800f1dc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f1de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3748      	adds	r7, #72	; 0x48
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
 800f1ea:	bf00      	nop
 800f1ec:	08012d34 	.word	0x08012d34
 800f1f0:	08012f10 	.word	0x08012f10
 800f1f4:	08012d7c 	.word	0x08012d7c
 800f1f8:	08012f2c 	.word	0x08012f2c
 800f1fc:	08012f4c 	.word	0x08012f4c
 800f200:	0800ef11 	.word	0x0800ef11

0800f204 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b086      	sub	sp, #24
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f20e:	230e      	movs	r3, #14
 800f210:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	895b      	ldrh	r3, [r3, #10]
 800f216:	2b0e      	cmp	r3, #14
 800f218:	d96e      	bls.n	800f2f8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	7bdb      	ldrb	r3, [r3, #15]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d106      	bne.n	800f230 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f228:	3301      	adds	r3, #1
 800f22a:	b2da      	uxtb	r2, r3
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	7b1a      	ldrb	r2, [r3, #12]
 800f23a:	7b5b      	ldrb	r3, [r3, #13]
 800f23c:	021b      	lsls	r3, r3, #8
 800f23e:	4313      	orrs	r3, r2
 800f240:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	f003 0301 	and.w	r3, r3, #1
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d023      	beq.n	800f296 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	2b01      	cmp	r3, #1
 800f254:	d10f      	bne.n	800f276 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f256:	693b      	ldr	r3, [r7, #16]
 800f258:	785b      	ldrb	r3, [r3, #1]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d11b      	bne.n	800f296 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f262:	2b5e      	cmp	r3, #94	; 0x5e
 800f264:	d117      	bne.n	800f296 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	7b5b      	ldrb	r3, [r3, #13]
 800f26a:	f043 0310 	orr.w	r3, r3, #16
 800f26e:	b2da      	uxtb	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	735a      	strb	r2, [r3, #13]
 800f274:	e00f      	b.n	800f296 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	2206      	movs	r2, #6
 800f27a:	4928      	ldr	r1, [pc, #160]	; (800f31c <ethernet_input+0x118>)
 800f27c:	4618      	mov	r0, r3
 800f27e:	f000 f8bb 	bl	800f3f8 <memcmp>
 800f282:	4603      	mov	r3, r0
 800f284:	2b00      	cmp	r3, #0
 800f286:	d106      	bne.n	800f296 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	7b5b      	ldrb	r3, [r3, #13]
 800f28c:	f043 0308 	orr.w	r3, r3, #8
 800f290:	b2da      	uxtb	r2, r3
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f296:	89fb      	ldrh	r3, [r7, #14]
 800f298:	2b08      	cmp	r3, #8
 800f29a:	d003      	beq.n	800f2a4 <ethernet_input+0xa0>
 800f29c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f2a0:	d014      	beq.n	800f2cc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f2a2:	e032      	b.n	800f30a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f2aa:	f003 0308 	and.w	r3, r3, #8
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d024      	beq.n	800f2fc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f2b2:	8afb      	ldrh	r3, [r7, #22]
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f7f7 fdb0 	bl	8006e1c <pbuf_remove_header>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d11e      	bne.n	800f300 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f2c2:	6839      	ldr	r1, [r7, #0]
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f7fe fe91 	bl	800dfec <ip4_input>
      break;
 800f2ca:	e013      	b.n	800f2f4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f2d2:	f003 0308 	and.w	r3, r3, #8
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d014      	beq.n	800f304 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f2da:	8afb      	ldrh	r3, [r7, #22]
 800f2dc:	4619      	mov	r1, r3
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f7f7 fd9c 	bl	8006e1c <pbuf_remove_header>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d10e      	bne.n	800f308 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f2ea:	6839      	ldr	r1, [r7, #0]
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f7fe f831 	bl	800d354 <etharp_input>
      break;
 800f2f2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	e00c      	b.n	800f312 <ethernet_input+0x10e>
    goto free_and_return;
 800f2f8:	bf00      	nop
 800f2fa:	e006      	b.n	800f30a <ethernet_input+0x106>
        goto free_and_return;
 800f2fc:	bf00      	nop
 800f2fe:	e004      	b.n	800f30a <ethernet_input+0x106>
        goto free_and_return;
 800f300:	bf00      	nop
 800f302:	e002      	b.n	800f30a <ethernet_input+0x106>
        goto free_and_return;
 800f304:	bf00      	nop
 800f306:	e000      	b.n	800f30a <ethernet_input+0x106>
        goto free_and_return;
 800f308:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7f7 fe0c 	bl	8006f28 <pbuf_free>
  return ERR_OK;
 800f310:	2300      	movs	r3, #0
}
 800f312:	4618      	mov	r0, r3
 800f314:	3718      	adds	r7, #24
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	bf00      	nop
 800f31c:	080130e8 	.word	0x080130e8

0800f320 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f320:	b580      	push	{r7, lr}
 800f322:	b086      	sub	sp, #24
 800f324:	af00      	add	r7, sp, #0
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	60b9      	str	r1, [r7, #8]
 800f32a:	607a      	str	r2, [r7, #4]
 800f32c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f32e:	8c3b      	ldrh	r3, [r7, #32]
 800f330:	4618      	mov	r0, r3
 800f332:	f7f6 fa9b 	bl	800586c <lwip_htons>
 800f336:	4603      	mov	r3, r0
 800f338:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f33a:	210e      	movs	r1, #14
 800f33c:	68b8      	ldr	r0, [r7, #8]
 800f33e:	f7f7 fd5d 	bl	8006dfc <pbuf_add_header>
 800f342:	4603      	mov	r3, r0
 800f344:	2b00      	cmp	r3, #0
 800f346:	d125      	bne.n	800f394 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	8afa      	ldrh	r2, [r7, #22]
 800f352:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	2206      	movs	r2, #6
 800f358:	6839      	ldr	r1, [r7, #0]
 800f35a:	4618      	mov	r0, r3
 800f35c:	f000 f85c 	bl	800f418 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	3306      	adds	r3, #6
 800f364:	2206      	movs	r2, #6
 800f366:	6879      	ldr	r1, [r7, #4]
 800f368:	4618      	mov	r0, r3
 800f36a:	f000 f855 	bl	800f418 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f374:	2b06      	cmp	r3, #6
 800f376:	d006      	beq.n	800f386 <ethernet_output+0x66>
 800f378:	4b0a      	ldr	r3, [pc, #40]	; (800f3a4 <ethernet_output+0x84>)
 800f37a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f37e:	490a      	ldr	r1, [pc, #40]	; (800f3a8 <ethernet_output+0x88>)
 800f380:	480a      	ldr	r0, [pc, #40]	; (800f3ac <ethernet_output+0x8c>)
 800f382:	f000 f85f 	bl	800f444 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	699b      	ldr	r3, [r3, #24]
 800f38a:	68b9      	ldr	r1, [r7, #8]
 800f38c:	68f8      	ldr	r0, [r7, #12]
 800f38e:	4798      	blx	r3
 800f390:	4603      	mov	r3, r0
 800f392:	e002      	b.n	800f39a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f394:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f396:	f06f 0301 	mvn.w	r3, #1
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3718      	adds	r7, #24
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	08012f5c 	.word	0x08012f5c
 800f3a8:	08012f94 	.word	0x08012f94
 800f3ac:	08012fc8 	.word	0x08012fc8

0800f3b0 <__libc_init_array>:
 800f3b0:	b570      	push	{r4, r5, r6, lr}
 800f3b2:	4d0d      	ldr	r5, [pc, #52]	; (800f3e8 <__libc_init_array+0x38>)
 800f3b4:	4c0d      	ldr	r4, [pc, #52]	; (800f3ec <__libc_init_array+0x3c>)
 800f3b6:	1b64      	subs	r4, r4, r5
 800f3b8:	10a4      	asrs	r4, r4, #2
 800f3ba:	2600      	movs	r6, #0
 800f3bc:	42a6      	cmp	r6, r4
 800f3be:	d109      	bne.n	800f3d4 <__libc_init_array+0x24>
 800f3c0:	4d0b      	ldr	r5, [pc, #44]	; (800f3f0 <__libc_init_array+0x40>)
 800f3c2:	4c0c      	ldr	r4, [pc, #48]	; (800f3f4 <__libc_init_array+0x44>)
 800f3c4:	f001 f904 	bl	80105d0 <_init>
 800f3c8:	1b64      	subs	r4, r4, r5
 800f3ca:	10a4      	asrs	r4, r4, #2
 800f3cc:	2600      	movs	r6, #0
 800f3ce:	42a6      	cmp	r6, r4
 800f3d0:	d105      	bne.n	800f3de <__libc_init_array+0x2e>
 800f3d2:	bd70      	pop	{r4, r5, r6, pc}
 800f3d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3d8:	4798      	blx	r3
 800f3da:	3601      	adds	r6, #1
 800f3dc:	e7ee      	b.n	800f3bc <__libc_init_array+0xc>
 800f3de:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3e2:	4798      	blx	r3
 800f3e4:	3601      	adds	r6, #1
 800f3e6:	e7f2      	b.n	800f3ce <__libc_init_array+0x1e>
 800f3e8:	08013248 	.word	0x08013248
 800f3ec:	08013248 	.word	0x08013248
 800f3f0:	08013248 	.word	0x08013248
 800f3f4:	0801324c 	.word	0x0801324c

0800f3f8 <memcmp>:
 800f3f8:	b510      	push	{r4, lr}
 800f3fa:	3901      	subs	r1, #1
 800f3fc:	4402      	add	r2, r0
 800f3fe:	4290      	cmp	r0, r2
 800f400:	d101      	bne.n	800f406 <memcmp+0xe>
 800f402:	2000      	movs	r0, #0
 800f404:	e005      	b.n	800f412 <memcmp+0x1a>
 800f406:	7803      	ldrb	r3, [r0, #0]
 800f408:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f40c:	42a3      	cmp	r3, r4
 800f40e:	d001      	beq.n	800f414 <memcmp+0x1c>
 800f410:	1b18      	subs	r0, r3, r4
 800f412:	bd10      	pop	{r4, pc}
 800f414:	3001      	adds	r0, #1
 800f416:	e7f2      	b.n	800f3fe <memcmp+0x6>

0800f418 <memcpy>:
 800f418:	440a      	add	r2, r1
 800f41a:	4291      	cmp	r1, r2
 800f41c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f420:	d100      	bne.n	800f424 <memcpy+0xc>
 800f422:	4770      	bx	lr
 800f424:	b510      	push	{r4, lr}
 800f426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f42a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f42e:	4291      	cmp	r1, r2
 800f430:	d1f9      	bne.n	800f426 <memcpy+0xe>
 800f432:	bd10      	pop	{r4, pc}

0800f434 <memset>:
 800f434:	4402      	add	r2, r0
 800f436:	4603      	mov	r3, r0
 800f438:	4293      	cmp	r3, r2
 800f43a:	d100      	bne.n	800f43e <memset+0xa>
 800f43c:	4770      	bx	lr
 800f43e:	f803 1b01 	strb.w	r1, [r3], #1
 800f442:	e7f9      	b.n	800f438 <memset+0x4>

0800f444 <iprintf>:
 800f444:	b40f      	push	{r0, r1, r2, r3}
 800f446:	4b0a      	ldr	r3, [pc, #40]	; (800f470 <iprintf+0x2c>)
 800f448:	b513      	push	{r0, r1, r4, lr}
 800f44a:	681c      	ldr	r4, [r3, #0]
 800f44c:	b124      	cbz	r4, 800f458 <iprintf+0x14>
 800f44e:	69a3      	ldr	r3, [r4, #24]
 800f450:	b913      	cbnz	r3, 800f458 <iprintf+0x14>
 800f452:	4620      	mov	r0, r4
 800f454:	f000 faba 	bl	800f9cc <__sinit>
 800f458:	ab05      	add	r3, sp, #20
 800f45a:	9a04      	ldr	r2, [sp, #16]
 800f45c:	68a1      	ldr	r1, [r4, #8]
 800f45e:	9301      	str	r3, [sp, #4]
 800f460:	4620      	mov	r0, r4
 800f462:	f000 fcdd 	bl	800fe20 <_vfiprintf_r>
 800f466:	b002      	add	sp, #8
 800f468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f46c:	b004      	add	sp, #16
 800f46e:	4770      	bx	lr
 800f470:	2000002c 	.word	0x2000002c

0800f474 <_puts_r>:
 800f474:	b570      	push	{r4, r5, r6, lr}
 800f476:	460e      	mov	r6, r1
 800f478:	4605      	mov	r5, r0
 800f47a:	b118      	cbz	r0, 800f484 <_puts_r+0x10>
 800f47c:	6983      	ldr	r3, [r0, #24]
 800f47e:	b90b      	cbnz	r3, 800f484 <_puts_r+0x10>
 800f480:	f000 faa4 	bl	800f9cc <__sinit>
 800f484:	69ab      	ldr	r3, [r5, #24]
 800f486:	68ac      	ldr	r4, [r5, #8]
 800f488:	b913      	cbnz	r3, 800f490 <_puts_r+0x1c>
 800f48a:	4628      	mov	r0, r5
 800f48c:	f000 fa9e 	bl	800f9cc <__sinit>
 800f490:	4b2c      	ldr	r3, [pc, #176]	; (800f544 <_puts_r+0xd0>)
 800f492:	429c      	cmp	r4, r3
 800f494:	d120      	bne.n	800f4d8 <_puts_r+0x64>
 800f496:	686c      	ldr	r4, [r5, #4]
 800f498:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f49a:	07db      	lsls	r3, r3, #31
 800f49c:	d405      	bmi.n	800f4aa <_puts_r+0x36>
 800f49e:	89a3      	ldrh	r3, [r4, #12]
 800f4a0:	0598      	lsls	r0, r3, #22
 800f4a2:	d402      	bmi.n	800f4aa <_puts_r+0x36>
 800f4a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4a6:	f000 fb41 	bl	800fb2c <__retarget_lock_acquire_recursive>
 800f4aa:	89a3      	ldrh	r3, [r4, #12]
 800f4ac:	0719      	lsls	r1, r3, #28
 800f4ae:	d51d      	bpl.n	800f4ec <_puts_r+0x78>
 800f4b0:	6923      	ldr	r3, [r4, #16]
 800f4b2:	b1db      	cbz	r3, 800f4ec <_puts_r+0x78>
 800f4b4:	3e01      	subs	r6, #1
 800f4b6:	68a3      	ldr	r3, [r4, #8]
 800f4b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f4bc:	3b01      	subs	r3, #1
 800f4be:	60a3      	str	r3, [r4, #8]
 800f4c0:	bb39      	cbnz	r1, 800f512 <_puts_r+0x9e>
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	da38      	bge.n	800f538 <_puts_r+0xc4>
 800f4c6:	4622      	mov	r2, r4
 800f4c8:	210a      	movs	r1, #10
 800f4ca:	4628      	mov	r0, r5
 800f4cc:	f000 f886 	bl	800f5dc <__swbuf_r>
 800f4d0:	3001      	adds	r0, #1
 800f4d2:	d011      	beq.n	800f4f8 <_puts_r+0x84>
 800f4d4:	250a      	movs	r5, #10
 800f4d6:	e011      	b.n	800f4fc <_puts_r+0x88>
 800f4d8:	4b1b      	ldr	r3, [pc, #108]	; (800f548 <_puts_r+0xd4>)
 800f4da:	429c      	cmp	r4, r3
 800f4dc:	d101      	bne.n	800f4e2 <_puts_r+0x6e>
 800f4de:	68ac      	ldr	r4, [r5, #8]
 800f4e0:	e7da      	b.n	800f498 <_puts_r+0x24>
 800f4e2:	4b1a      	ldr	r3, [pc, #104]	; (800f54c <_puts_r+0xd8>)
 800f4e4:	429c      	cmp	r4, r3
 800f4e6:	bf08      	it	eq
 800f4e8:	68ec      	ldreq	r4, [r5, #12]
 800f4ea:	e7d5      	b.n	800f498 <_puts_r+0x24>
 800f4ec:	4621      	mov	r1, r4
 800f4ee:	4628      	mov	r0, r5
 800f4f0:	f000 f8c6 	bl	800f680 <__swsetup_r>
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	d0dd      	beq.n	800f4b4 <_puts_r+0x40>
 800f4f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f4fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f4fe:	07da      	lsls	r2, r3, #31
 800f500:	d405      	bmi.n	800f50e <_puts_r+0x9a>
 800f502:	89a3      	ldrh	r3, [r4, #12]
 800f504:	059b      	lsls	r3, r3, #22
 800f506:	d402      	bmi.n	800f50e <_puts_r+0x9a>
 800f508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f50a:	f000 fb10 	bl	800fb2e <__retarget_lock_release_recursive>
 800f50e:	4628      	mov	r0, r5
 800f510:	bd70      	pop	{r4, r5, r6, pc}
 800f512:	2b00      	cmp	r3, #0
 800f514:	da04      	bge.n	800f520 <_puts_r+0xac>
 800f516:	69a2      	ldr	r2, [r4, #24]
 800f518:	429a      	cmp	r2, r3
 800f51a:	dc06      	bgt.n	800f52a <_puts_r+0xb6>
 800f51c:	290a      	cmp	r1, #10
 800f51e:	d004      	beq.n	800f52a <_puts_r+0xb6>
 800f520:	6823      	ldr	r3, [r4, #0]
 800f522:	1c5a      	adds	r2, r3, #1
 800f524:	6022      	str	r2, [r4, #0]
 800f526:	7019      	strb	r1, [r3, #0]
 800f528:	e7c5      	b.n	800f4b6 <_puts_r+0x42>
 800f52a:	4622      	mov	r2, r4
 800f52c:	4628      	mov	r0, r5
 800f52e:	f000 f855 	bl	800f5dc <__swbuf_r>
 800f532:	3001      	adds	r0, #1
 800f534:	d1bf      	bne.n	800f4b6 <_puts_r+0x42>
 800f536:	e7df      	b.n	800f4f8 <_puts_r+0x84>
 800f538:	6823      	ldr	r3, [r4, #0]
 800f53a:	250a      	movs	r5, #10
 800f53c:	1c5a      	adds	r2, r3, #1
 800f53e:	6022      	str	r2, [r4, #0]
 800f540:	701d      	strb	r5, [r3, #0]
 800f542:	e7db      	b.n	800f4fc <_puts_r+0x88>
 800f544:	080131cc 	.word	0x080131cc
 800f548:	080131ec 	.word	0x080131ec
 800f54c:	080131ac 	.word	0x080131ac

0800f550 <puts>:
 800f550:	4b02      	ldr	r3, [pc, #8]	; (800f55c <puts+0xc>)
 800f552:	4601      	mov	r1, r0
 800f554:	6818      	ldr	r0, [r3, #0]
 800f556:	f7ff bf8d 	b.w	800f474 <_puts_r>
 800f55a:	bf00      	nop
 800f55c:	2000002c 	.word	0x2000002c

0800f560 <rand>:
 800f560:	4b16      	ldr	r3, [pc, #88]	; (800f5bc <rand+0x5c>)
 800f562:	b510      	push	{r4, lr}
 800f564:	681c      	ldr	r4, [r3, #0]
 800f566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f568:	b9b3      	cbnz	r3, 800f598 <rand+0x38>
 800f56a:	2018      	movs	r0, #24
 800f56c:	f000 fb46 	bl	800fbfc <malloc>
 800f570:	63a0      	str	r0, [r4, #56]	; 0x38
 800f572:	b928      	cbnz	r0, 800f580 <rand+0x20>
 800f574:	4602      	mov	r2, r0
 800f576:	4b12      	ldr	r3, [pc, #72]	; (800f5c0 <rand+0x60>)
 800f578:	4812      	ldr	r0, [pc, #72]	; (800f5c4 <rand+0x64>)
 800f57a:	214e      	movs	r1, #78	; 0x4e
 800f57c:	f000 f8ee 	bl	800f75c <__assert_func>
 800f580:	4a11      	ldr	r2, [pc, #68]	; (800f5c8 <rand+0x68>)
 800f582:	4b12      	ldr	r3, [pc, #72]	; (800f5cc <rand+0x6c>)
 800f584:	e9c0 2300 	strd	r2, r3, [r0]
 800f588:	4b11      	ldr	r3, [pc, #68]	; (800f5d0 <rand+0x70>)
 800f58a:	6083      	str	r3, [r0, #8]
 800f58c:	230b      	movs	r3, #11
 800f58e:	8183      	strh	r3, [r0, #12]
 800f590:	2201      	movs	r2, #1
 800f592:	2300      	movs	r3, #0
 800f594:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f598:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800f59a:	4a0e      	ldr	r2, [pc, #56]	; (800f5d4 <rand+0x74>)
 800f59c:	6920      	ldr	r0, [r4, #16]
 800f59e:	6963      	ldr	r3, [r4, #20]
 800f5a0:	490d      	ldr	r1, [pc, #52]	; (800f5d8 <rand+0x78>)
 800f5a2:	4342      	muls	r2, r0
 800f5a4:	fb01 2203 	mla	r2, r1, r3, r2
 800f5a8:	fba0 0101 	umull	r0, r1, r0, r1
 800f5ac:	1c43      	adds	r3, r0, #1
 800f5ae:	eb42 0001 	adc.w	r0, r2, r1
 800f5b2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800f5b6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f5ba:	bd10      	pop	{r4, pc}
 800f5bc:	2000002c 	.word	0x2000002c
 800f5c0:	080130fc 	.word	0x080130fc
 800f5c4:	08013113 	.word	0x08013113
 800f5c8:	abcd330e 	.word	0xabcd330e
 800f5cc:	e66d1234 	.word	0xe66d1234
 800f5d0:	0005deec 	.word	0x0005deec
 800f5d4:	5851f42d 	.word	0x5851f42d
 800f5d8:	4c957f2d 	.word	0x4c957f2d

0800f5dc <__swbuf_r>:
 800f5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5de:	460e      	mov	r6, r1
 800f5e0:	4614      	mov	r4, r2
 800f5e2:	4605      	mov	r5, r0
 800f5e4:	b118      	cbz	r0, 800f5ee <__swbuf_r+0x12>
 800f5e6:	6983      	ldr	r3, [r0, #24]
 800f5e8:	b90b      	cbnz	r3, 800f5ee <__swbuf_r+0x12>
 800f5ea:	f000 f9ef 	bl	800f9cc <__sinit>
 800f5ee:	4b21      	ldr	r3, [pc, #132]	; (800f674 <__swbuf_r+0x98>)
 800f5f0:	429c      	cmp	r4, r3
 800f5f2:	d12b      	bne.n	800f64c <__swbuf_r+0x70>
 800f5f4:	686c      	ldr	r4, [r5, #4]
 800f5f6:	69a3      	ldr	r3, [r4, #24]
 800f5f8:	60a3      	str	r3, [r4, #8]
 800f5fa:	89a3      	ldrh	r3, [r4, #12]
 800f5fc:	071a      	lsls	r2, r3, #28
 800f5fe:	d52f      	bpl.n	800f660 <__swbuf_r+0x84>
 800f600:	6923      	ldr	r3, [r4, #16]
 800f602:	b36b      	cbz	r3, 800f660 <__swbuf_r+0x84>
 800f604:	6923      	ldr	r3, [r4, #16]
 800f606:	6820      	ldr	r0, [r4, #0]
 800f608:	1ac0      	subs	r0, r0, r3
 800f60a:	6963      	ldr	r3, [r4, #20]
 800f60c:	b2f6      	uxtb	r6, r6
 800f60e:	4283      	cmp	r3, r0
 800f610:	4637      	mov	r7, r6
 800f612:	dc04      	bgt.n	800f61e <__swbuf_r+0x42>
 800f614:	4621      	mov	r1, r4
 800f616:	4628      	mov	r0, r5
 800f618:	f000 f944 	bl	800f8a4 <_fflush_r>
 800f61c:	bb30      	cbnz	r0, 800f66c <__swbuf_r+0x90>
 800f61e:	68a3      	ldr	r3, [r4, #8]
 800f620:	3b01      	subs	r3, #1
 800f622:	60a3      	str	r3, [r4, #8]
 800f624:	6823      	ldr	r3, [r4, #0]
 800f626:	1c5a      	adds	r2, r3, #1
 800f628:	6022      	str	r2, [r4, #0]
 800f62a:	701e      	strb	r6, [r3, #0]
 800f62c:	6963      	ldr	r3, [r4, #20]
 800f62e:	3001      	adds	r0, #1
 800f630:	4283      	cmp	r3, r0
 800f632:	d004      	beq.n	800f63e <__swbuf_r+0x62>
 800f634:	89a3      	ldrh	r3, [r4, #12]
 800f636:	07db      	lsls	r3, r3, #31
 800f638:	d506      	bpl.n	800f648 <__swbuf_r+0x6c>
 800f63a:	2e0a      	cmp	r6, #10
 800f63c:	d104      	bne.n	800f648 <__swbuf_r+0x6c>
 800f63e:	4621      	mov	r1, r4
 800f640:	4628      	mov	r0, r5
 800f642:	f000 f92f 	bl	800f8a4 <_fflush_r>
 800f646:	b988      	cbnz	r0, 800f66c <__swbuf_r+0x90>
 800f648:	4638      	mov	r0, r7
 800f64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f64c:	4b0a      	ldr	r3, [pc, #40]	; (800f678 <__swbuf_r+0x9c>)
 800f64e:	429c      	cmp	r4, r3
 800f650:	d101      	bne.n	800f656 <__swbuf_r+0x7a>
 800f652:	68ac      	ldr	r4, [r5, #8]
 800f654:	e7cf      	b.n	800f5f6 <__swbuf_r+0x1a>
 800f656:	4b09      	ldr	r3, [pc, #36]	; (800f67c <__swbuf_r+0xa0>)
 800f658:	429c      	cmp	r4, r3
 800f65a:	bf08      	it	eq
 800f65c:	68ec      	ldreq	r4, [r5, #12]
 800f65e:	e7ca      	b.n	800f5f6 <__swbuf_r+0x1a>
 800f660:	4621      	mov	r1, r4
 800f662:	4628      	mov	r0, r5
 800f664:	f000 f80c 	bl	800f680 <__swsetup_r>
 800f668:	2800      	cmp	r0, #0
 800f66a:	d0cb      	beq.n	800f604 <__swbuf_r+0x28>
 800f66c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f670:	e7ea      	b.n	800f648 <__swbuf_r+0x6c>
 800f672:	bf00      	nop
 800f674:	080131cc 	.word	0x080131cc
 800f678:	080131ec 	.word	0x080131ec
 800f67c:	080131ac 	.word	0x080131ac

0800f680 <__swsetup_r>:
 800f680:	4b32      	ldr	r3, [pc, #200]	; (800f74c <__swsetup_r+0xcc>)
 800f682:	b570      	push	{r4, r5, r6, lr}
 800f684:	681d      	ldr	r5, [r3, #0]
 800f686:	4606      	mov	r6, r0
 800f688:	460c      	mov	r4, r1
 800f68a:	b125      	cbz	r5, 800f696 <__swsetup_r+0x16>
 800f68c:	69ab      	ldr	r3, [r5, #24]
 800f68e:	b913      	cbnz	r3, 800f696 <__swsetup_r+0x16>
 800f690:	4628      	mov	r0, r5
 800f692:	f000 f99b 	bl	800f9cc <__sinit>
 800f696:	4b2e      	ldr	r3, [pc, #184]	; (800f750 <__swsetup_r+0xd0>)
 800f698:	429c      	cmp	r4, r3
 800f69a:	d10f      	bne.n	800f6bc <__swsetup_r+0x3c>
 800f69c:	686c      	ldr	r4, [r5, #4]
 800f69e:	89a3      	ldrh	r3, [r4, #12]
 800f6a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f6a4:	0719      	lsls	r1, r3, #28
 800f6a6:	d42c      	bmi.n	800f702 <__swsetup_r+0x82>
 800f6a8:	06dd      	lsls	r5, r3, #27
 800f6aa:	d411      	bmi.n	800f6d0 <__swsetup_r+0x50>
 800f6ac:	2309      	movs	r3, #9
 800f6ae:	6033      	str	r3, [r6, #0]
 800f6b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f6b4:	81a3      	strh	r3, [r4, #12]
 800f6b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6ba:	e03e      	b.n	800f73a <__swsetup_r+0xba>
 800f6bc:	4b25      	ldr	r3, [pc, #148]	; (800f754 <__swsetup_r+0xd4>)
 800f6be:	429c      	cmp	r4, r3
 800f6c0:	d101      	bne.n	800f6c6 <__swsetup_r+0x46>
 800f6c2:	68ac      	ldr	r4, [r5, #8]
 800f6c4:	e7eb      	b.n	800f69e <__swsetup_r+0x1e>
 800f6c6:	4b24      	ldr	r3, [pc, #144]	; (800f758 <__swsetup_r+0xd8>)
 800f6c8:	429c      	cmp	r4, r3
 800f6ca:	bf08      	it	eq
 800f6cc:	68ec      	ldreq	r4, [r5, #12]
 800f6ce:	e7e6      	b.n	800f69e <__swsetup_r+0x1e>
 800f6d0:	0758      	lsls	r0, r3, #29
 800f6d2:	d512      	bpl.n	800f6fa <__swsetup_r+0x7a>
 800f6d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6d6:	b141      	cbz	r1, 800f6ea <__swsetup_r+0x6a>
 800f6d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6dc:	4299      	cmp	r1, r3
 800f6de:	d002      	beq.n	800f6e6 <__swsetup_r+0x66>
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	f000 fa93 	bl	800fc0c <_free_r>
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	6363      	str	r3, [r4, #52]	; 0x34
 800f6ea:	89a3      	ldrh	r3, [r4, #12]
 800f6ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f6f0:	81a3      	strh	r3, [r4, #12]
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	6063      	str	r3, [r4, #4]
 800f6f6:	6923      	ldr	r3, [r4, #16]
 800f6f8:	6023      	str	r3, [r4, #0]
 800f6fa:	89a3      	ldrh	r3, [r4, #12]
 800f6fc:	f043 0308 	orr.w	r3, r3, #8
 800f700:	81a3      	strh	r3, [r4, #12]
 800f702:	6923      	ldr	r3, [r4, #16]
 800f704:	b94b      	cbnz	r3, 800f71a <__swsetup_r+0x9a>
 800f706:	89a3      	ldrh	r3, [r4, #12]
 800f708:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f70c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f710:	d003      	beq.n	800f71a <__swsetup_r+0x9a>
 800f712:	4621      	mov	r1, r4
 800f714:	4630      	mov	r0, r6
 800f716:	f000 fa31 	bl	800fb7c <__smakebuf_r>
 800f71a:	89a0      	ldrh	r0, [r4, #12]
 800f71c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f720:	f010 0301 	ands.w	r3, r0, #1
 800f724:	d00a      	beq.n	800f73c <__swsetup_r+0xbc>
 800f726:	2300      	movs	r3, #0
 800f728:	60a3      	str	r3, [r4, #8]
 800f72a:	6963      	ldr	r3, [r4, #20]
 800f72c:	425b      	negs	r3, r3
 800f72e:	61a3      	str	r3, [r4, #24]
 800f730:	6923      	ldr	r3, [r4, #16]
 800f732:	b943      	cbnz	r3, 800f746 <__swsetup_r+0xc6>
 800f734:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f738:	d1ba      	bne.n	800f6b0 <__swsetup_r+0x30>
 800f73a:	bd70      	pop	{r4, r5, r6, pc}
 800f73c:	0781      	lsls	r1, r0, #30
 800f73e:	bf58      	it	pl
 800f740:	6963      	ldrpl	r3, [r4, #20]
 800f742:	60a3      	str	r3, [r4, #8]
 800f744:	e7f4      	b.n	800f730 <__swsetup_r+0xb0>
 800f746:	2000      	movs	r0, #0
 800f748:	e7f7      	b.n	800f73a <__swsetup_r+0xba>
 800f74a:	bf00      	nop
 800f74c:	2000002c 	.word	0x2000002c
 800f750:	080131cc 	.word	0x080131cc
 800f754:	080131ec 	.word	0x080131ec
 800f758:	080131ac 	.word	0x080131ac

0800f75c <__assert_func>:
 800f75c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f75e:	4614      	mov	r4, r2
 800f760:	461a      	mov	r2, r3
 800f762:	4b09      	ldr	r3, [pc, #36]	; (800f788 <__assert_func+0x2c>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	4605      	mov	r5, r0
 800f768:	68d8      	ldr	r0, [r3, #12]
 800f76a:	b14c      	cbz	r4, 800f780 <__assert_func+0x24>
 800f76c:	4b07      	ldr	r3, [pc, #28]	; (800f78c <__assert_func+0x30>)
 800f76e:	9100      	str	r1, [sp, #0]
 800f770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f774:	4906      	ldr	r1, [pc, #24]	; (800f790 <__assert_func+0x34>)
 800f776:	462b      	mov	r3, r5
 800f778:	f000 f9a6 	bl	800fac8 <fiprintf>
 800f77c:	f000 fe7a 	bl	8010474 <abort>
 800f780:	4b04      	ldr	r3, [pc, #16]	; (800f794 <__assert_func+0x38>)
 800f782:	461c      	mov	r4, r3
 800f784:	e7f3      	b.n	800f76e <__assert_func+0x12>
 800f786:	bf00      	nop
 800f788:	2000002c 	.word	0x2000002c
 800f78c:	0801316e 	.word	0x0801316e
 800f790:	0801317b 	.word	0x0801317b
 800f794:	080131a9 	.word	0x080131a9

0800f798 <__sflush_r>:
 800f798:	898a      	ldrh	r2, [r1, #12]
 800f79a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f79e:	4605      	mov	r5, r0
 800f7a0:	0710      	lsls	r0, r2, #28
 800f7a2:	460c      	mov	r4, r1
 800f7a4:	d458      	bmi.n	800f858 <__sflush_r+0xc0>
 800f7a6:	684b      	ldr	r3, [r1, #4]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	dc05      	bgt.n	800f7b8 <__sflush_r+0x20>
 800f7ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	dc02      	bgt.n	800f7b8 <__sflush_r+0x20>
 800f7b2:	2000      	movs	r0, #0
 800f7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7ba:	2e00      	cmp	r6, #0
 800f7bc:	d0f9      	beq.n	800f7b2 <__sflush_r+0x1a>
 800f7be:	2300      	movs	r3, #0
 800f7c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f7c4:	682f      	ldr	r7, [r5, #0]
 800f7c6:	602b      	str	r3, [r5, #0]
 800f7c8:	d032      	beq.n	800f830 <__sflush_r+0x98>
 800f7ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f7cc:	89a3      	ldrh	r3, [r4, #12]
 800f7ce:	075a      	lsls	r2, r3, #29
 800f7d0:	d505      	bpl.n	800f7de <__sflush_r+0x46>
 800f7d2:	6863      	ldr	r3, [r4, #4]
 800f7d4:	1ac0      	subs	r0, r0, r3
 800f7d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f7d8:	b10b      	cbz	r3, 800f7de <__sflush_r+0x46>
 800f7da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f7dc:	1ac0      	subs	r0, r0, r3
 800f7de:	2300      	movs	r3, #0
 800f7e0:	4602      	mov	r2, r0
 800f7e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7e4:	6a21      	ldr	r1, [r4, #32]
 800f7e6:	4628      	mov	r0, r5
 800f7e8:	47b0      	blx	r6
 800f7ea:	1c43      	adds	r3, r0, #1
 800f7ec:	89a3      	ldrh	r3, [r4, #12]
 800f7ee:	d106      	bne.n	800f7fe <__sflush_r+0x66>
 800f7f0:	6829      	ldr	r1, [r5, #0]
 800f7f2:	291d      	cmp	r1, #29
 800f7f4:	d82c      	bhi.n	800f850 <__sflush_r+0xb8>
 800f7f6:	4a2a      	ldr	r2, [pc, #168]	; (800f8a0 <__sflush_r+0x108>)
 800f7f8:	40ca      	lsrs	r2, r1
 800f7fa:	07d6      	lsls	r6, r2, #31
 800f7fc:	d528      	bpl.n	800f850 <__sflush_r+0xb8>
 800f7fe:	2200      	movs	r2, #0
 800f800:	6062      	str	r2, [r4, #4]
 800f802:	04d9      	lsls	r1, r3, #19
 800f804:	6922      	ldr	r2, [r4, #16]
 800f806:	6022      	str	r2, [r4, #0]
 800f808:	d504      	bpl.n	800f814 <__sflush_r+0x7c>
 800f80a:	1c42      	adds	r2, r0, #1
 800f80c:	d101      	bne.n	800f812 <__sflush_r+0x7a>
 800f80e:	682b      	ldr	r3, [r5, #0]
 800f810:	b903      	cbnz	r3, 800f814 <__sflush_r+0x7c>
 800f812:	6560      	str	r0, [r4, #84]	; 0x54
 800f814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f816:	602f      	str	r7, [r5, #0]
 800f818:	2900      	cmp	r1, #0
 800f81a:	d0ca      	beq.n	800f7b2 <__sflush_r+0x1a>
 800f81c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f820:	4299      	cmp	r1, r3
 800f822:	d002      	beq.n	800f82a <__sflush_r+0x92>
 800f824:	4628      	mov	r0, r5
 800f826:	f000 f9f1 	bl	800fc0c <_free_r>
 800f82a:	2000      	movs	r0, #0
 800f82c:	6360      	str	r0, [r4, #52]	; 0x34
 800f82e:	e7c1      	b.n	800f7b4 <__sflush_r+0x1c>
 800f830:	6a21      	ldr	r1, [r4, #32]
 800f832:	2301      	movs	r3, #1
 800f834:	4628      	mov	r0, r5
 800f836:	47b0      	blx	r6
 800f838:	1c41      	adds	r1, r0, #1
 800f83a:	d1c7      	bne.n	800f7cc <__sflush_r+0x34>
 800f83c:	682b      	ldr	r3, [r5, #0]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d0c4      	beq.n	800f7cc <__sflush_r+0x34>
 800f842:	2b1d      	cmp	r3, #29
 800f844:	d001      	beq.n	800f84a <__sflush_r+0xb2>
 800f846:	2b16      	cmp	r3, #22
 800f848:	d101      	bne.n	800f84e <__sflush_r+0xb6>
 800f84a:	602f      	str	r7, [r5, #0]
 800f84c:	e7b1      	b.n	800f7b2 <__sflush_r+0x1a>
 800f84e:	89a3      	ldrh	r3, [r4, #12]
 800f850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f854:	81a3      	strh	r3, [r4, #12]
 800f856:	e7ad      	b.n	800f7b4 <__sflush_r+0x1c>
 800f858:	690f      	ldr	r7, [r1, #16]
 800f85a:	2f00      	cmp	r7, #0
 800f85c:	d0a9      	beq.n	800f7b2 <__sflush_r+0x1a>
 800f85e:	0793      	lsls	r3, r2, #30
 800f860:	680e      	ldr	r6, [r1, #0]
 800f862:	bf08      	it	eq
 800f864:	694b      	ldreq	r3, [r1, #20]
 800f866:	600f      	str	r7, [r1, #0]
 800f868:	bf18      	it	ne
 800f86a:	2300      	movne	r3, #0
 800f86c:	eba6 0807 	sub.w	r8, r6, r7
 800f870:	608b      	str	r3, [r1, #8]
 800f872:	f1b8 0f00 	cmp.w	r8, #0
 800f876:	dd9c      	ble.n	800f7b2 <__sflush_r+0x1a>
 800f878:	6a21      	ldr	r1, [r4, #32]
 800f87a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f87c:	4643      	mov	r3, r8
 800f87e:	463a      	mov	r2, r7
 800f880:	4628      	mov	r0, r5
 800f882:	47b0      	blx	r6
 800f884:	2800      	cmp	r0, #0
 800f886:	dc06      	bgt.n	800f896 <__sflush_r+0xfe>
 800f888:	89a3      	ldrh	r3, [r4, #12]
 800f88a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f88e:	81a3      	strh	r3, [r4, #12]
 800f890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f894:	e78e      	b.n	800f7b4 <__sflush_r+0x1c>
 800f896:	4407      	add	r7, r0
 800f898:	eba8 0800 	sub.w	r8, r8, r0
 800f89c:	e7e9      	b.n	800f872 <__sflush_r+0xda>
 800f89e:	bf00      	nop
 800f8a0:	20400001 	.word	0x20400001

0800f8a4 <_fflush_r>:
 800f8a4:	b538      	push	{r3, r4, r5, lr}
 800f8a6:	690b      	ldr	r3, [r1, #16]
 800f8a8:	4605      	mov	r5, r0
 800f8aa:	460c      	mov	r4, r1
 800f8ac:	b913      	cbnz	r3, 800f8b4 <_fflush_r+0x10>
 800f8ae:	2500      	movs	r5, #0
 800f8b0:	4628      	mov	r0, r5
 800f8b2:	bd38      	pop	{r3, r4, r5, pc}
 800f8b4:	b118      	cbz	r0, 800f8be <_fflush_r+0x1a>
 800f8b6:	6983      	ldr	r3, [r0, #24]
 800f8b8:	b90b      	cbnz	r3, 800f8be <_fflush_r+0x1a>
 800f8ba:	f000 f887 	bl	800f9cc <__sinit>
 800f8be:	4b14      	ldr	r3, [pc, #80]	; (800f910 <_fflush_r+0x6c>)
 800f8c0:	429c      	cmp	r4, r3
 800f8c2:	d11b      	bne.n	800f8fc <_fflush_r+0x58>
 800f8c4:	686c      	ldr	r4, [r5, #4]
 800f8c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d0ef      	beq.n	800f8ae <_fflush_r+0xa>
 800f8ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f8d0:	07d0      	lsls	r0, r2, #31
 800f8d2:	d404      	bmi.n	800f8de <_fflush_r+0x3a>
 800f8d4:	0599      	lsls	r1, r3, #22
 800f8d6:	d402      	bmi.n	800f8de <_fflush_r+0x3a>
 800f8d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8da:	f000 f927 	bl	800fb2c <__retarget_lock_acquire_recursive>
 800f8de:	4628      	mov	r0, r5
 800f8e0:	4621      	mov	r1, r4
 800f8e2:	f7ff ff59 	bl	800f798 <__sflush_r>
 800f8e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8e8:	07da      	lsls	r2, r3, #31
 800f8ea:	4605      	mov	r5, r0
 800f8ec:	d4e0      	bmi.n	800f8b0 <_fflush_r+0xc>
 800f8ee:	89a3      	ldrh	r3, [r4, #12]
 800f8f0:	059b      	lsls	r3, r3, #22
 800f8f2:	d4dd      	bmi.n	800f8b0 <_fflush_r+0xc>
 800f8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8f6:	f000 f91a 	bl	800fb2e <__retarget_lock_release_recursive>
 800f8fa:	e7d9      	b.n	800f8b0 <_fflush_r+0xc>
 800f8fc:	4b05      	ldr	r3, [pc, #20]	; (800f914 <_fflush_r+0x70>)
 800f8fe:	429c      	cmp	r4, r3
 800f900:	d101      	bne.n	800f906 <_fflush_r+0x62>
 800f902:	68ac      	ldr	r4, [r5, #8]
 800f904:	e7df      	b.n	800f8c6 <_fflush_r+0x22>
 800f906:	4b04      	ldr	r3, [pc, #16]	; (800f918 <_fflush_r+0x74>)
 800f908:	429c      	cmp	r4, r3
 800f90a:	bf08      	it	eq
 800f90c:	68ec      	ldreq	r4, [r5, #12]
 800f90e:	e7da      	b.n	800f8c6 <_fflush_r+0x22>
 800f910:	080131cc 	.word	0x080131cc
 800f914:	080131ec 	.word	0x080131ec
 800f918:	080131ac 	.word	0x080131ac

0800f91c <std>:
 800f91c:	2300      	movs	r3, #0
 800f91e:	b510      	push	{r4, lr}
 800f920:	4604      	mov	r4, r0
 800f922:	e9c0 3300 	strd	r3, r3, [r0]
 800f926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f92a:	6083      	str	r3, [r0, #8]
 800f92c:	8181      	strh	r1, [r0, #12]
 800f92e:	6643      	str	r3, [r0, #100]	; 0x64
 800f930:	81c2      	strh	r2, [r0, #14]
 800f932:	6183      	str	r3, [r0, #24]
 800f934:	4619      	mov	r1, r3
 800f936:	2208      	movs	r2, #8
 800f938:	305c      	adds	r0, #92	; 0x5c
 800f93a:	f7ff fd7b 	bl	800f434 <memset>
 800f93e:	4b05      	ldr	r3, [pc, #20]	; (800f954 <std+0x38>)
 800f940:	6263      	str	r3, [r4, #36]	; 0x24
 800f942:	4b05      	ldr	r3, [pc, #20]	; (800f958 <std+0x3c>)
 800f944:	62a3      	str	r3, [r4, #40]	; 0x28
 800f946:	4b05      	ldr	r3, [pc, #20]	; (800f95c <std+0x40>)
 800f948:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f94a:	4b05      	ldr	r3, [pc, #20]	; (800f960 <std+0x44>)
 800f94c:	6224      	str	r4, [r4, #32]
 800f94e:	6323      	str	r3, [r4, #48]	; 0x30
 800f950:	bd10      	pop	{r4, pc}
 800f952:	bf00      	nop
 800f954:	080103c9 	.word	0x080103c9
 800f958:	080103eb 	.word	0x080103eb
 800f95c:	08010423 	.word	0x08010423
 800f960:	08010447 	.word	0x08010447

0800f964 <_cleanup_r>:
 800f964:	4901      	ldr	r1, [pc, #4]	; (800f96c <_cleanup_r+0x8>)
 800f966:	f000 b8c1 	b.w	800faec <_fwalk_reent>
 800f96a:	bf00      	nop
 800f96c:	0800f8a5 	.word	0x0800f8a5

0800f970 <__sfmoreglue>:
 800f970:	b570      	push	{r4, r5, r6, lr}
 800f972:	2268      	movs	r2, #104	; 0x68
 800f974:	1e4d      	subs	r5, r1, #1
 800f976:	4355      	muls	r5, r2
 800f978:	460e      	mov	r6, r1
 800f97a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f97e:	f000 f9b1 	bl	800fce4 <_malloc_r>
 800f982:	4604      	mov	r4, r0
 800f984:	b140      	cbz	r0, 800f998 <__sfmoreglue+0x28>
 800f986:	2100      	movs	r1, #0
 800f988:	e9c0 1600 	strd	r1, r6, [r0]
 800f98c:	300c      	adds	r0, #12
 800f98e:	60a0      	str	r0, [r4, #8]
 800f990:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f994:	f7ff fd4e 	bl	800f434 <memset>
 800f998:	4620      	mov	r0, r4
 800f99a:	bd70      	pop	{r4, r5, r6, pc}

0800f99c <__sfp_lock_acquire>:
 800f99c:	4801      	ldr	r0, [pc, #4]	; (800f9a4 <__sfp_lock_acquire+0x8>)
 800f99e:	f000 b8c5 	b.w	800fb2c <__retarget_lock_acquire_recursive>
 800f9a2:	bf00      	nop
 800f9a4:	20008921 	.word	0x20008921

0800f9a8 <__sfp_lock_release>:
 800f9a8:	4801      	ldr	r0, [pc, #4]	; (800f9b0 <__sfp_lock_release+0x8>)
 800f9aa:	f000 b8c0 	b.w	800fb2e <__retarget_lock_release_recursive>
 800f9ae:	bf00      	nop
 800f9b0:	20008921 	.word	0x20008921

0800f9b4 <__sinit_lock_acquire>:
 800f9b4:	4801      	ldr	r0, [pc, #4]	; (800f9bc <__sinit_lock_acquire+0x8>)
 800f9b6:	f000 b8b9 	b.w	800fb2c <__retarget_lock_acquire_recursive>
 800f9ba:	bf00      	nop
 800f9bc:	20008922 	.word	0x20008922

0800f9c0 <__sinit_lock_release>:
 800f9c0:	4801      	ldr	r0, [pc, #4]	; (800f9c8 <__sinit_lock_release+0x8>)
 800f9c2:	f000 b8b4 	b.w	800fb2e <__retarget_lock_release_recursive>
 800f9c6:	bf00      	nop
 800f9c8:	20008922 	.word	0x20008922

0800f9cc <__sinit>:
 800f9cc:	b510      	push	{r4, lr}
 800f9ce:	4604      	mov	r4, r0
 800f9d0:	f7ff fff0 	bl	800f9b4 <__sinit_lock_acquire>
 800f9d4:	69a3      	ldr	r3, [r4, #24]
 800f9d6:	b11b      	cbz	r3, 800f9e0 <__sinit+0x14>
 800f9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9dc:	f7ff bff0 	b.w	800f9c0 <__sinit_lock_release>
 800f9e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f9e4:	6523      	str	r3, [r4, #80]	; 0x50
 800f9e6:	4b13      	ldr	r3, [pc, #76]	; (800fa34 <__sinit+0x68>)
 800f9e8:	4a13      	ldr	r2, [pc, #76]	; (800fa38 <__sinit+0x6c>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800f9ee:	42a3      	cmp	r3, r4
 800f9f0:	bf04      	itt	eq
 800f9f2:	2301      	moveq	r3, #1
 800f9f4:	61a3      	streq	r3, [r4, #24]
 800f9f6:	4620      	mov	r0, r4
 800f9f8:	f000 f820 	bl	800fa3c <__sfp>
 800f9fc:	6060      	str	r0, [r4, #4]
 800f9fe:	4620      	mov	r0, r4
 800fa00:	f000 f81c 	bl	800fa3c <__sfp>
 800fa04:	60a0      	str	r0, [r4, #8]
 800fa06:	4620      	mov	r0, r4
 800fa08:	f000 f818 	bl	800fa3c <__sfp>
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	60e0      	str	r0, [r4, #12]
 800fa10:	2104      	movs	r1, #4
 800fa12:	6860      	ldr	r0, [r4, #4]
 800fa14:	f7ff ff82 	bl	800f91c <std>
 800fa18:	68a0      	ldr	r0, [r4, #8]
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	2109      	movs	r1, #9
 800fa1e:	f7ff ff7d 	bl	800f91c <std>
 800fa22:	68e0      	ldr	r0, [r4, #12]
 800fa24:	2202      	movs	r2, #2
 800fa26:	2112      	movs	r1, #18
 800fa28:	f7ff ff78 	bl	800f91c <std>
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	61a3      	str	r3, [r4, #24]
 800fa30:	e7d2      	b.n	800f9d8 <__sinit+0xc>
 800fa32:	bf00      	nop
 800fa34:	080130f8 	.word	0x080130f8
 800fa38:	0800f965 	.word	0x0800f965

0800fa3c <__sfp>:
 800fa3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa3e:	4607      	mov	r7, r0
 800fa40:	f7ff ffac 	bl	800f99c <__sfp_lock_acquire>
 800fa44:	4b1e      	ldr	r3, [pc, #120]	; (800fac0 <__sfp+0x84>)
 800fa46:	681e      	ldr	r6, [r3, #0]
 800fa48:	69b3      	ldr	r3, [r6, #24]
 800fa4a:	b913      	cbnz	r3, 800fa52 <__sfp+0x16>
 800fa4c:	4630      	mov	r0, r6
 800fa4e:	f7ff ffbd 	bl	800f9cc <__sinit>
 800fa52:	3648      	adds	r6, #72	; 0x48
 800fa54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fa58:	3b01      	subs	r3, #1
 800fa5a:	d503      	bpl.n	800fa64 <__sfp+0x28>
 800fa5c:	6833      	ldr	r3, [r6, #0]
 800fa5e:	b30b      	cbz	r3, 800faa4 <__sfp+0x68>
 800fa60:	6836      	ldr	r6, [r6, #0]
 800fa62:	e7f7      	b.n	800fa54 <__sfp+0x18>
 800fa64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fa68:	b9d5      	cbnz	r5, 800faa0 <__sfp+0x64>
 800fa6a:	4b16      	ldr	r3, [pc, #88]	; (800fac4 <__sfp+0x88>)
 800fa6c:	60e3      	str	r3, [r4, #12]
 800fa6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fa72:	6665      	str	r5, [r4, #100]	; 0x64
 800fa74:	f000 f859 	bl	800fb2a <__retarget_lock_init_recursive>
 800fa78:	f7ff ff96 	bl	800f9a8 <__sfp_lock_release>
 800fa7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fa80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fa84:	6025      	str	r5, [r4, #0]
 800fa86:	61a5      	str	r5, [r4, #24]
 800fa88:	2208      	movs	r2, #8
 800fa8a:	4629      	mov	r1, r5
 800fa8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fa90:	f7ff fcd0 	bl	800f434 <memset>
 800fa94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fa98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faa0:	3468      	adds	r4, #104	; 0x68
 800faa2:	e7d9      	b.n	800fa58 <__sfp+0x1c>
 800faa4:	2104      	movs	r1, #4
 800faa6:	4638      	mov	r0, r7
 800faa8:	f7ff ff62 	bl	800f970 <__sfmoreglue>
 800faac:	4604      	mov	r4, r0
 800faae:	6030      	str	r0, [r6, #0]
 800fab0:	2800      	cmp	r0, #0
 800fab2:	d1d5      	bne.n	800fa60 <__sfp+0x24>
 800fab4:	f7ff ff78 	bl	800f9a8 <__sfp_lock_release>
 800fab8:	230c      	movs	r3, #12
 800faba:	603b      	str	r3, [r7, #0]
 800fabc:	e7ee      	b.n	800fa9c <__sfp+0x60>
 800fabe:	bf00      	nop
 800fac0:	080130f8 	.word	0x080130f8
 800fac4:	ffff0001 	.word	0xffff0001

0800fac8 <fiprintf>:
 800fac8:	b40e      	push	{r1, r2, r3}
 800faca:	b503      	push	{r0, r1, lr}
 800facc:	4601      	mov	r1, r0
 800face:	ab03      	add	r3, sp, #12
 800fad0:	4805      	ldr	r0, [pc, #20]	; (800fae8 <fiprintf+0x20>)
 800fad2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fad6:	6800      	ldr	r0, [r0, #0]
 800fad8:	9301      	str	r3, [sp, #4]
 800fada:	f000 f9a1 	bl	800fe20 <_vfiprintf_r>
 800fade:	b002      	add	sp, #8
 800fae0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fae4:	b003      	add	sp, #12
 800fae6:	4770      	bx	lr
 800fae8:	2000002c 	.word	0x2000002c

0800faec <_fwalk_reent>:
 800faec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faf0:	4606      	mov	r6, r0
 800faf2:	4688      	mov	r8, r1
 800faf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800faf8:	2700      	movs	r7, #0
 800fafa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fafe:	f1b9 0901 	subs.w	r9, r9, #1
 800fb02:	d505      	bpl.n	800fb10 <_fwalk_reent+0x24>
 800fb04:	6824      	ldr	r4, [r4, #0]
 800fb06:	2c00      	cmp	r4, #0
 800fb08:	d1f7      	bne.n	800fafa <_fwalk_reent+0xe>
 800fb0a:	4638      	mov	r0, r7
 800fb0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb10:	89ab      	ldrh	r3, [r5, #12]
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	d907      	bls.n	800fb26 <_fwalk_reent+0x3a>
 800fb16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	d003      	beq.n	800fb26 <_fwalk_reent+0x3a>
 800fb1e:	4629      	mov	r1, r5
 800fb20:	4630      	mov	r0, r6
 800fb22:	47c0      	blx	r8
 800fb24:	4307      	orrs	r7, r0
 800fb26:	3568      	adds	r5, #104	; 0x68
 800fb28:	e7e9      	b.n	800fafe <_fwalk_reent+0x12>

0800fb2a <__retarget_lock_init_recursive>:
 800fb2a:	4770      	bx	lr

0800fb2c <__retarget_lock_acquire_recursive>:
 800fb2c:	4770      	bx	lr

0800fb2e <__retarget_lock_release_recursive>:
 800fb2e:	4770      	bx	lr

0800fb30 <__swhatbuf_r>:
 800fb30:	b570      	push	{r4, r5, r6, lr}
 800fb32:	460e      	mov	r6, r1
 800fb34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb38:	2900      	cmp	r1, #0
 800fb3a:	b096      	sub	sp, #88	; 0x58
 800fb3c:	4614      	mov	r4, r2
 800fb3e:	461d      	mov	r5, r3
 800fb40:	da08      	bge.n	800fb54 <__swhatbuf_r+0x24>
 800fb42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fb46:	2200      	movs	r2, #0
 800fb48:	602a      	str	r2, [r5, #0]
 800fb4a:	061a      	lsls	r2, r3, #24
 800fb4c:	d410      	bmi.n	800fb70 <__swhatbuf_r+0x40>
 800fb4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb52:	e00e      	b.n	800fb72 <__swhatbuf_r+0x42>
 800fb54:	466a      	mov	r2, sp
 800fb56:	f000 fca5 	bl	80104a4 <_fstat_r>
 800fb5a:	2800      	cmp	r0, #0
 800fb5c:	dbf1      	blt.n	800fb42 <__swhatbuf_r+0x12>
 800fb5e:	9a01      	ldr	r2, [sp, #4]
 800fb60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fb64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fb68:	425a      	negs	r2, r3
 800fb6a:	415a      	adcs	r2, r3
 800fb6c:	602a      	str	r2, [r5, #0]
 800fb6e:	e7ee      	b.n	800fb4e <__swhatbuf_r+0x1e>
 800fb70:	2340      	movs	r3, #64	; 0x40
 800fb72:	2000      	movs	r0, #0
 800fb74:	6023      	str	r3, [r4, #0]
 800fb76:	b016      	add	sp, #88	; 0x58
 800fb78:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fb7c <__smakebuf_r>:
 800fb7c:	898b      	ldrh	r3, [r1, #12]
 800fb7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb80:	079d      	lsls	r5, r3, #30
 800fb82:	4606      	mov	r6, r0
 800fb84:	460c      	mov	r4, r1
 800fb86:	d507      	bpl.n	800fb98 <__smakebuf_r+0x1c>
 800fb88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb8c:	6023      	str	r3, [r4, #0]
 800fb8e:	6123      	str	r3, [r4, #16]
 800fb90:	2301      	movs	r3, #1
 800fb92:	6163      	str	r3, [r4, #20]
 800fb94:	b002      	add	sp, #8
 800fb96:	bd70      	pop	{r4, r5, r6, pc}
 800fb98:	ab01      	add	r3, sp, #4
 800fb9a:	466a      	mov	r2, sp
 800fb9c:	f7ff ffc8 	bl	800fb30 <__swhatbuf_r>
 800fba0:	9900      	ldr	r1, [sp, #0]
 800fba2:	4605      	mov	r5, r0
 800fba4:	4630      	mov	r0, r6
 800fba6:	f000 f89d 	bl	800fce4 <_malloc_r>
 800fbaa:	b948      	cbnz	r0, 800fbc0 <__smakebuf_r+0x44>
 800fbac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbb0:	059a      	lsls	r2, r3, #22
 800fbb2:	d4ef      	bmi.n	800fb94 <__smakebuf_r+0x18>
 800fbb4:	f023 0303 	bic.w	r3, r3, #3
 800fbb8:	f043 0302 	orr.w	r3, r3, #2
 800fbbc:	81a3      	strh	r3, [r4, #12]
 800fbbe:	e7e3      	b.n	800fb88 <__smakebuf_r+0xc>
 800fbc0:	4b0d      	ldr	r3, [pc, #52]	; (800fbf8 <__smakebuf_r+0x7c>)
 800fbc2:	62b3      	str	r3, [r6, #40]	; 0x28
 800fbc4:	89a3      	ldrh	r3, [r4, #12]
 800fbc6:	6020      	str	r0, [r4, #0]
 800fbc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbcc:	81a3      	strh	r3, [r4, #12]
 800fbce:	9b00      	ldr	r3, [sp, #0]
 800fbd0:	6163      	str	r3, [r4, #20]
 800fbd2:	9b01      	ldr	r3, [sp, #4]
 800fbd4:	6120      	str	r0, [r4, #16]
 800fbd6:	b15b      	cbz	r3, 800fbf0 <__smakebuf_r+0x74>
 800fbd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbdc:	4630      	mov	r0, r6
 800fbde:	f000 fc73 	bl	80104c8 <_isatty_r>
 800fbe2:	b128      	cbz	r0, 800fbf0 <__smakebuf_r+0x74>
 800fbe4:	89a3      	ldrh	r3, [r4, #12]
 800fbe6:	f023 0303 	bic.w	r3, r3, #3
 800fbea:	f043 0301 	orr.w	r3, r3, #1
 800fbee:	81a3      	strh	r3, [r4, #12]
 800fbf0:	89a0      	ldrh	r0, [r4, #12]
 800fbf2:	4305      	orrs	r5, r0
 800fbf4:	81a5      	strh	r5, [r4, #12]
 800fbf6:	e7cd      	b.n	800fb94 <__smakebuf_r+0x18>
 800fbf8:	0800f965 	.word	0x0800f965

0800fbfc <malloc>:
 800fbfc:	4b02      	ldr	r3, [pc, #8]	; (800fc08 <malloc+0xc>)
 800fbfe:	4601      	mov	r1, r0
 800fc00:	6818      	ldr	r0, [r3, #0]
 800fc02:	f000 b86f 	b.w	800fce4 <_malloc_r>
 800fc06:	bf00      	nop
 800fc08:	2000002c 	.word	0x2000002c

0800fc0c <_free_r>:
 800fc0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc0e:	2900      	cmp	r1, #0
 800fc10:	d044      	beq.n	800fc9c <_free_r+0x90>
 800fc12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc16:	9001      	str	r0, [sp, #4]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	f1a1 0404 	sub.w	r4, r1, #4
 800fc1e:	bfb8      	it	lt
 800fc20:	18e4      	addlt	r4, r4, r3
 800fc22:	f000 fc73 	bl	801050c <__malloc_lock>
 800fc26:	4a1e      	ldr	r2, [pc, #120]	; (800fca0 <_free_r+0x94>)
 800fc28:	9801      	ldr	r0, [sp, #4]
 800fc2a:	6813      	ldr	r3, [r2, #0]
 800fc2c:	b933      	cbnz	r3, 800fc3c <_free_r+0x30>
 800fc2e:	6063      	str	r3, [r4, #4]
 800fc30:	6014      	str	r4, [r2, #0]
 800fc32:	b003      	add	sp, #12
 800fc34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc38:	f000 bc6e 	b.w	8010518 <__malloc_unlock>
 800fc3c:	42a3      	cmp	r3, r4
 800fc3e:	d908      	bls.n	800fc52 <_free_r+0x46>
 800fc40:	6825      	ldr	r5, [r4, #0]
 800fc42:	1961      	adds	r1, r4, r5
 800fc44:	428b      	cmp	r3, r1
 800fc46:	bf01      	itttt	eq
 800fc48:	6819      	ldreq	r1, [r3, #0]
 800fc4a:	685b      	ldreq	r3, [r3, #4]
 800fc4c:	1949      	addeq	r1, r1, r5
 800fc4e:	6021      	streq	r1, [r4, #0]
 800fc50:	e7ed      	b.n	800fc2e <_free_r+0x22>
 800fc52:	461a      	mov	r2, r3
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	b10b      	cbz	r3, 800fc5c <_free_r+0x50>
 800fc58:	42a3      	cmp	r3, r4
 800fc5a:	d9fa      	bls.n	800fc52 <_free_r+0x46>
 800fc5c:	6811      	ldr	r1, [r2, #0]
 800fc5e:	1855      	adds	r5, r2, r1
 800fc60:	42a5      	cmp	r5, r4
 800fc62:	d10b      	bne.n	800fc7c <_free_r+0x70>
 800fc64:	6824      	ldr	r4, [r4, #0]
 800fc66:	4421      	add	r1, r4
 800fc68:	1854      	adds	r4, r2, r1
 800fc6a:	42a3      	cmp	r3, r4
 800fc6c:	6011      	str	r1, [r2, #0]
 800fc6e:	d1e0      	bne.n	800fc32 <_free_r+0x26>
 800fc70:	681c      	ldr	r4, [r3, #0]
 800fc72:	685b      	ldr	r3, [r3, #4]
 800fc74:	6053      	str	r3, [r2, #4]
 800fc76:	4421      	add	r1, r4
 800fc78:	6011      	str	r1, [r2, #0]
 800fc7a:	e7da      	b.n	800fc32 <_free_r+0x26>
 800fc7c:	d902      	bls.n	800fc84 <_free_r+0x78>
 800fc7e:	230c      	movs	r3, #12
 800fc80:	6003      	str	r3, [r0, #0]
 800fc82:	e7d6      	b.n	800fc32 <_free_r+0x26>
 800fc84:	6825      	ldr	r5, [r4, #0]
 800fc86:	1961      	adds	r1, r4, r5
 800fc88:	428b      	cmp	r3, r1
 800fc8a:	bf04      	itt	eq
 800fc8c:	6819      	ldreq	r1, [r3, #0]
 800fc8e:	685b      	ldreq	r3, [r3, #4]
 800fc90:	6063      	str	r3, [r4, #4]
 800fc92:	bf04      	itt	eq
 800fc94:	1949      	addeq	r1, r1, r5
 800fc96:	6021      	streq	r1, [r4, #0]
 800fc98:	6054      	str	r4, [r2, #4]
 800fc9a:	e7ca      	b.n	800fc32 <_free_r+0x26>
 800fc9c:	b003      	add	sp, #12
 800fc9e:	bd30      	pop	{r4, r5, pc}
 800fca0:	20008924 	.word	0x20008924

0800fca4 <sbrk_aligned>:
 800fca4:	b570      	push	{r4, r5, r6, lr}
 800fca6:	4e0e      	ldr	r6, [pc, #56]	; (800fce0 <sbrk_aligned+0x3c>)
 800fca8:	460c      	mov	r4, r1
 800fcaa:	6831      	ldr	r1, [r6, #0]
 800fcac:	4605      	mov	r5, r0
 800fcae:	b911      	cbnz	r1, 800fcb6 <sbrk_aligned+0x12>
 800fcb0:	f000 fb7a 	bl	80103a8 <_sbrk_r>
 800fcb4:	6030      	str	r0, [r6, #0]
 800fcb6:	4621      	mov	r1, r4
 800fcb8:	4628      	mov	r0, r5
 800fcba:	f000 fb75 	bl	80103a8 <_sbrk_r>
 800fcbe:	1c43      	adds	r3, r0, #1
 800fcc0:	d00a      	beq.n	800fcd8 <sbrk_aligned+0x34>
 800fcc2:	1cc4      	adds	r4, r0, #3
 800fcc4:	f024 0403 	bic.w	r4, r4, #3
 800fcc8:	42a0      	cmp	r0, r4
 800fcca:	d007      	beq.n	800fcdc <sbrk_aligned+0x38>
 800fccc:	1a21      	subs	r1, r4, r0
 800fcce:	4628      	mov	r0, r5
 800fcd0:	f000 fb6a 	bl	80103a8 <_sbrk_r>
 800fcd4:	3001      	adds	r0, #1
 800fcd6:	d101      	bne.n	800fcdc <sbrk_aligned+0x38>
 800fcd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fcdc:	4620      	mov	r0, r4
 800fcde:	bd70      	pop	{r4, r5, r6, pc}
 800fce0:	20008928 	.word	0x20008928

0800fce4 <_malloc_r>:
 800fce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fce8:	1ccd      	adds	r5, r1, #3
 800fcea:	f025 0503 	bic.w	r5, r5, #3
 800fcee:	3508      	adds	r5, #8
 800fcf0:	2d0c      	cmp	r5, #12
 800fcf2:	bf38      	it	cc
 800fcf4:	250c      	movcc	r5, #12
 800fcf6:	2d00      	cmp	r5, #0
 800fcf8:	4607      	mov	r7, r0
 800fcfa:	db01      	blt.n	800fd00 <_malloc_r+0x1c>
 800fcfc:	42a9      	cmp	r1, r5
 800fcfe:	d905      	bls.n	800fd0c <_malloc_r+0x28>
 800fd00:	230c      	movs	r3, #12
 800fd02:	603b      	str	r3, [r7, #0]
 800fd04:	2600      	movs	r6, #0
 800fd06:	4630      	mov	r0, r6
 800fd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd0c:	4e2e      	ldr	r6, [pc, #184]	; (800fdc8 <_malloc_r+0xe4>)
 800fd0e:	f000 fbfd 	bl	801050c <__malloc_lock>
 800fd12:	6833      	ldr	r3, [r6, #0]
 800fd14:	461c      	mov	r4, r3
 800fd16:	bb34      	cbnz	r4, 800fd66 <_malloc_r+0x82>
 800fd18:	4629      	mov	r1, r5
 800fd1a:	4638      	mov	r0, r7
 800fd1c:	f7ff ffc2 	bl	800fca4 <sbrk_aligned>
 800fd20:	1c43      	adds	r3, r0, #1
 800fd22:	4604      	mov	r4, r0
 800fd24:	d14d      	bne.n	800fdc2 <_malloc_r+0xde>
 800fd26:	6834      	ldr	r4, [r6, #0]
 800fd28:	4626      	mov	r6, r4
 800fd2a:	2e00      	cmp	r6, #0
 800fd2c:	d140      	bne.n	800fdb0 <_malloc_r+0xcc>
 800fd2e:	6823      	ldr	r3, [r4, #0]
 800fd30:	4631      	mov	r1, r6
 800fd32:	4638      	mov	r0, r7
 800fd34:	eb04 0803 	add.w	r8, r4, r3
 800fd38:	f000 fb36 	bl	80103a8 <_sbrk_r>
 800fd3c:	4580      	cmp	r8, r0
 800fd3e:	d13a      	bne.n	800fdb6 <_malloc_r+0xd2>
 800fd40:	6821      	ldr	r1, [r4, #0]
 800fd42:	3503      	adds	r5, #3
 800fd44:	1a6d      	subs	r5, r5, r1
 800fd46:	f025 0503 	bic.w	r5, r5, #3
 800fd4a:	3508      	adds	r5, #8
 800fd4c:	2d0c      	cmp	r5, #12
 800fd4e:	bf38      	it	cc
 800fd50:	250c      	movcc	r5, #12
 800fd52:	4629      	mov	r1, r5
 800fd54:	4638      	mov	r0, r7
 800fd56:	f7ff ffa5 	bl	800fca4 <sbrk_aligned>
 800fd5a:	3001      	adds	r0, #1
 800fd5c:	d02b      	beq.n	800fdb6 <_malloc_r+0xd2>
 800fd5e:	6823      	ldr	r3, [r4, #0]
 800fd60:	442b      	add	r3, r5
 800fd62:	6023      	str	r3, [r4, #0]
 800fd64:	e00e      	b.n	800fd84 <_malloc_r+0xa0>
 800fd66:	6822      	ldr	r2, [r4, #0]
 800fd68:	1b52      	subs	r2, r2, r5
 800fd6a:	d41e      	bmi.n	800fdaa <_malloc_r+0xc6>
 800fd6c:	2a0b      	cmp	r2, #11
 800fd6e:	d916      	bls.n	800fd9e <_malloc_r+0xba>
 800fd70:	1961      	adds	r1, r4, r5
 800fd72:	42a3      	cmp	r3, r4
 800fd74:	6025      	str	r5, [r4, #0]
 800fd76:	bf18      	it	ne
 800fd78:	6059      	strne	r1, [r3, #4]
 800fd7a:	6863      	ldr	r3, [r4, #4]
 800fd7c:	bf08      	it	eq
 800fd7e:	6031      	streq	r1, [r6, #0]
 800fd80:	5162      	str	r2, [r4, r5]
 800fd82:	604b      	str	r3, [r1, #4]
 800fd84:	4638      	mov	r0, r7
 800fd86:	f104 060b 	add.w	r6, r4, #11
 800fd8a:	f000 fbc5 	bl	8010518 <__malloc_unlock>
 800fd8e:	f026 0607 	bic.w	r6, r6, #7
 800fd92:	1d23      	adds	r3, r4, #4
 800fd94:	1af2      	subs	r2, r6, r3
 800fd96:	d0b6      	beq.n	800fd06 <_malloc_r+0x22>
 800fd98:	1b9b      	subs	r3, r3, r6
 800fd9a:	50a3      	str	r3, [r4, r2]
 800fd9c:	e7b3      	b.n	800fd06 <_malloc_r+0x22>
 800fd9e:	6862      	ldr	r2, [r4, #4]
 800fda0:	42a3      	cmp	r3, r4
 800fda2:	bf0c      	ite	eq
 800fda4:	6032      	streq	r2, [r6, #0]
 800fda6:	605a      	strne	r2, [r3, #4]
 800fda8:	e7ec      	b.n	800fd84 <_malloc_r+0xa0>
 800fdaa:	4623      	mov	r3, r4
 800fdac:	6864      	ldr	r4, [r4, #4]
 800fdae:	e7b2      	b.n	800fd16 <_malloc_r+0x32>
 800fdb0:	4634      	mov	r4, r6
 800fdb2:	6876      	ldr	r6, [r6, #4]
 800fdb4:	e7b9      	b.n	800fd2a <_malloc_r+0x46>
 800fdb6:	230c      	movs	r3, #12
 800fdb8:	603b      	str	r3, [r7, #0]
 800fdba:	4638      	mov	r0, r7
 800fdbc:	f000 fbac 	bl	8010518 <__malloc_unlock>
 800fdc0:	e7a1      	b.n	800fd06 <_malloc_r+0x22>
 800fdc2:	6025      	str	r5, [r4, #0]
 800fdc4:	e7de      	b.n	800fd84 <_malloc_r+0xa0>
 800fdc6:	bf00      	nop
 800fdc8:	20008924 	.word	0x20008924

0800fdcc <__sfputc_r>:
 800fdcc:	6893      	ldr	r3, [r2, #8]
 800fdce:	3b01      	subs	r3, #1
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	b410      	push	{r4}
 800fdd4:	6093      	str	r3, [r2, #8]
 800fdd6:	da08      	bge.n	800fdea <__sfputc_r+0x1e>
 800fdd8:	6994      	ldr	r4, [r2, #24]
 800fdda:	42a3      	cmp	r3, r4
 800fddc:	db01      	blt.n	800fde2 <__sfputc_r+0x16>
 800fdde:	290a      	cmp	r1, #10
 800fde0:	d103      	bne.n	800fdea <__sfputc_r+0x1e>
 800fde2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fde6:	f7ff bbf9 	b.w	800f5dc <__swbuf_r>
 800fdea:	6813      	ldr	r3, [r2, #0]
 800fdec:	1c58      	adds	r0, r3, #1
 800fdee:	6010      	str	r0, [r2, #0]
 800fdf0:	7019      	strb	r1, [r3, #0]
 800fdf2:	4608      	mov	r0, r1
 800fdf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdf8:	4770      	bx	lr

0800fdfa <__sfputs_r>:
 800fdfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdfc:	4606      	mov	r6, r0
 800fdfe:	460f      	mov	r7, r1
 800fe00:	4614      	mov	r4, r2
 800fe02:	18d5      	adds	r5, r2, r3
 800fe04:	42ac      	cmp	r4, r5
 800fe06:	d101      	bne.n	800fe0c <__sfputs_r+0x12>
 800fe08:	2000      	movs	r0, #0
 800fe0a:	e007      	b.n	800fe1c <__sfputs_r+0x22>
 800fe0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe10:	463a      	mov	r2, r7
 800fe12:	4630      	mov	r0, r6
 800fe14:	f7ff ffda 	bl	800fdcc <__sfputc_r>
 800fe18:	1c43      	adds	r3, r0, #1
 800fe1a:	d1f3      	bne.n	800fe04 <__sfputs_r+0xa>
 800fe1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe20 <_vfiprintf_r>:
 800fe20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe24:	460d      	mov	r5, r1
 800fe26:	b09d      	sub	sp, #116	; 0x74
 800fe28:	4614      	mov	r4, r2
 800fe2a:	4698      	mov	r8, r3
 800fe2c:	4606      	mov	r6, r0
 800fe2e:	b118      	cbz	r0, 800fe38 <_vfiprintf_r+0x18>
 800fe30:	6983      	ldr	r3, [r0, #24]
 800fe32:	b90b      	cbnz	r3, 800fe38 <_vfiprintf_r+0x18>
 800fe34:	f7ff fdca 	bl	800f9cc <__sinit>
 800fe38:	4b89      	ldr	r3, [pc, #548]	; (8010060 <_vfiprintf_r+0x240>)
 800fe3a:	429d      	cmp	r5, r3
 800fe3c:	d11b      	bne.n	800fe76 <_vfiprintf_r+0x56>
 800fe3e:	6875      	ldr	r5, [r6, #4]
 800fe40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe42:	07d9      	lsls	r1, r3, #31
 800fe44:	d405      	bmi.n	800fe52 <_vfiprintf_r+0x32>
 800fe46:	89ab      	ldrh	r3, [r5, #12]
 800fe48:	059a      	lsls	r2, r3, #22
 800fe4a:	d402      	bmi.n	800fe52 <_vfiprintf_r+0x32>
 800fe4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe4e:	f7ff fe6d 	bl	800fb2c <__retarget_lock_acquire_recursive>
 800fe52:	89ab      	ldrh	r3, [r5, #12]
 800fe54:	071b      	lsls	r3, r3, #28
 800fe56:	d501      	bpl.n	800fe5c <_vfiprintf_r+0x3c>
 800fe58:	692b      	ldr	r3, [r5, #16]
 800fe5a:	b9eb      	cbnz	r3, 800fe98 <_vfiprintf_r+0x78>
 800fe5c:	4629      	mov	r1, r5
 800fe5e:	4630      	mov	r0, r6
 800fe60:	f7ff fc0e 	bl	800f680 <__swsetup_r>
 800fe64:	b1c0      	cbz	r0, 800fe98 <_vfiprintf_r+0x78>
 800fe66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe68:	07dc      	lsls	r4, r3, #31
 800fe6a:	d50e      	bpl.n	800fe8a <_vfiprintf_r+0x6a>
 800fe6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe70:	b01d      	add	sp, #116	; 0x74
 800fe72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe76:	4b7b      	ldr	r3, [pc, #492]	; (8010064 <_vfiprintf_r+0x244>)
 800fe78:	429d      	cmp	r5, r3
 800fe7a:	d101      	bne.n	800fe80 <_vfiprintf_r+0x60>
 800fe7c:	68b5      	ldr	r5, [r6, #8]
 800fe7e:	e7df      	b.n	800fe40 <_vfiprintf_r+0x20>
 800fe80:	4b79      	ldr	r3, [pc, #484]	; (8010068 <_vfiprintf_r+0x248>)
 800fe82:	429d      	cmp	r5, r3
 800fe84:	bf08      	it	eq
 800fe86:	68f5      	ldreq	r5, [r6, #12]
 800fe88:	e7da      	b.n	800fe40 <_vfiprintf_r+0x20>
 800fe8a:	89ab      	ldrh	r3, [r5, #12]
 800fe8c:	0598      	lsls	r0, r3, #22
 800fe8e:	d4ed      	bmi.n	800fe6c <_vfiprintf_r+0x4c>
 800fe90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe92:	f7ff fe4c 	bl	800fb2e <__retarget_lock_release_recursive>
 800fe96:	e7e9      	b.n	800fe6c <_vfiprintf_r+0x4c>
 800fe98:	2300      	movs	r3, #0
 800fe9a:	9309      	str	r3, [sp, #36]	; 0x24
 800fe9c:	2320      	movs	r3, #32
 800fe9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fea2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fea6:	2330      	movs	r3, #48	; 0x30
 800fea8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801006c <_vfiprintf_r+0x24c>
 800feac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800feb0:	f04f 0901 	mov.w	r9, #1
 800feb4:	4623      	mov	r3, r4
 800feb6:	469a      	mov	sl, r3
 800feb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800febc:	b10a      	cbz	r2, 800fec2 <_vfiprintf_r+0xa2>
 800febe:	2a25      	cmp	r2, #37	; 0x25
 800fec0:	d1f9      	bne.n	800feb6 <_vfiprintf_r+0x96>
 800fec2:	ebba 0b04 	subs.w	fp, sl, r4
 800fec6:	d00b      	beq.n	800fee0 <_vfiprintf_r+0xc0>
 800fec8:	465b      	mov	r3, fp
 800feca:	4622      	mov	r2, r4
 800fecc:	4629      	mov	r1, r5
 800fece:	4630      	mov	r0, r6
 800fed0:	f7ff ff93 	bl	800fdfa <__sfputs_r>
 800fed4:	3001      	adds	r0, #1
 800fed6:	f000 80aa 	beq.w	801002e <_vfiprintf_r+0x20e>
 800feda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fedc:	445a      	add	r2, fp
 800fede:	9209      	str	r2, [sp, #36]	; 0x24
 800fee0:	f89a 3000 	ldrb.w	r3, [sl]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	f000 80a2 	beq.w	801002e <_vfiprintf_r+0x20e>
 800feea:	2300      	movs	r3, #0
 800feec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fef4:	f10a 0a01 	add.w	sl, sl, #1
 800fef8:	9304      	str	r3, [sp, #16]
 800fefa:	9307      	str	r3, [sp, #28]
 800fefc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff00:	931a      	str	r3, [sp, #104]	; 0x68
 800ff02:	4654      	mov	r4, sl
 800ff04:	2205      	movs	r2, #5
 800ff06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff0a:	4858      	ldr	r0, [pc, #352]	; (801006c <_vfiprintf_r+0x24c>)
 800ff0c:	f7f0 f998 	bl	8000240 <memchr>
 800ff10:	9a04      	ldr	r2, [sp, #16]
 800ff12:	b9d8      	cbnz	r0, 800ff4c <_vfiprintf_r+0x12c>
 800ff14:	06d1      	lsls	r1, r2, #27
 800ff16:	bf44      	itt	mi
 800ff18:	2320      	movmi	r3, #32
 800ff1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff1e:	0713      	lsls	r3, r2, #28
 800ff20:	bf44      	itt	mi
 800ff22:	232b      	movmi	r3, #43	; 0x2b
 800ff24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff28:	f89a 3000 	ldrb.w	r3, [sl]
 800ff2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ff2e:	d015      	beq.n	800ff5c <_vfiprintf_r+0x13c>
 800ff30:	9a07      	ldr	r2, [sp, #28]
 800ff32:	4654      	mov	r4, sl
 800ff34:	2000      	movs	r0, #0
 800ff36:	f04f 0c0a 	mov.w	ip, #10
 800ff3a:	4621      	mov	r1, r4
 800ff3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff40:	3b30      	subs	r3, #48	; 0x30
 800ff42:	2b09      	cmp	r3, #9
 800ff44:	d94e      	bls.n	800ffe4 <_vfiprintf_r+0x1c4>
 800ff46:	b1b0      	cbz	r0, 800ff76 <_vfiprintf_r+0x156>
 800ff48:	9207      	str	r2, [sp, #28]
 800ff4a:	e014      	b.n	800ff76 <_vfiprintf_r+0x156>
 800ff4c:	eba0 0308 	sub.w	r3, r0, r8
 800ff50:	fa09 f303 	lsl.w	r3, r9, r3
 800ff54:	4313      	orrs	r3, r2
 800ff56:	9304      	str	r3, [sp, #16]
 800ff58:	46a2      	mov	sl, r4
 800ff5a:	e7d2      	b.n	800ff02 <_vfiprintf_r+0xe2>
 800ff5c:	9b03      	ldr	r3, [sp, #12]
 800ff5e:	1d19      	adds	r1, r3, #4
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	9103      	str	r1, [sp, #12]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	bfbb      	ittet	lt
 800ff68:	425b      	neglt	r3, r3
 800ff6a:	f042 0202 	orrlt.w	r2, r2, #2
 800ff6e:	9307      	strge	r3, [sp, #28]
 800ff70:	9307      	strlt	r3, [sp, #28]
 800ff72:	bfb8      	it	lt
 800ff74:	9204      	strlt	r2, [sp, #16]
 800ff76:	7823      	ldrb	r3, [r4, #0]
 800ff78:	2b2e      	cmp	r3, #46	; 0x2e
 800ff7a:	d10c      	bne.n	800ff96 <_vfiprintf_r+0x176>
 800ff7c:	7863      	ldrb	r3, [r4, #1]
 800ff7e:	2b2a      	cmp	r3, #42	; 0x2a
 800ff80:	d135      	bne.n	800ffee <_vfiprintf_r+0x1ce>
 800ff82:	9b03      	ldr	r3, [sp, #12]
 800ff84:	1d1a      	adds	r2, r3, #4
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	9203      	str	r2, [sp, #12]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	bfb8      	it	lt
 800ff8e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ff92:	3402      	adds	r4, #2
 800ff94:	9305      	str	r3, [sp, #20]
 800ff96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801007c <_vfiprintf_r+0x25c>
 800ff9a:	7821      	ldrb	r1, [r4, #0]
 800ff9c:	2203      	movs	r2, #3
 800ff9e:	4650      	mov	r0, sl
 800ffa0:	f7f0 f94e 	bl	8000240 <memchr>
 800ffa4:	b140      	cbz	r0, 800ffb8 <_vfiprintf_r+0x198>
 800ffa6:	2340      	movs	r3, #64	; 0x40
 800ffa8:	eba0 000a 	sub.w	r0, r0, sl
 800ffac:	fa03 f000 	lsl.w	r0, r3, r0
 800ffb0:	9b04      	ldr	r3, [sp, #16]
 800ffb2:	4303      	orrs	r3, r0
 800ffb4:	3401      	adds	r4, #1
 800ffb6:	9304      	str	r3, [sp, #16]
 800ffb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffbc:	482c      	ldr	r0, [pc, #176]	; (8010070 <_vfiprintf_r+0x250>)
 800ffbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ffc2:	2206      	movs	r2, #6
 800ffc4:	f7f0 f93c 	bl	8000240 <memchr>
 800ffc8:	2800      	cmp	r0, #0
 800ffca:	d03f      	beq.n	801004c <_vfiprintf_r+0x22c>
 800ffcc:	4b29      	ldr	r3, [pc, #164]	; (8010074 <_vfiprintf_r+0x254>)
 800ffce:	bb1b      	cbnz	r3, 8010018 <_vfiprintf_r+0x1f8>
 800ffd0:	9b03      	ldr	r3, [sp, #12]
 800ffd2:	3307      	adds	r3, #7
 800ffd4:	f023 0307 	bic.w	r3, r3, #7
 800ffd8:	3308      	adds	r3, #8
 800ffda:	9303      	str	r3, [sp, #12]
 800ffdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffde:	443b      	add	r3, r7
 800ffe0:	9309      	str	r3, [sp, #36]	; 0x24
 800ffe2:	e767      	b.n	800feb4 <_vfiprintf_r+0x94>
 800ffe4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffe8:	460c      	mov	r4, r1
 800ffea:	2001      	movs	r0, #1
 800ffec:	e7a5      	b.n	800ff3a <_vfiprintf_r+0x11a>
 800ffee:	2300      	movs	r3, #0
 800fff0:	3401      	adds	r4, #1
 800fff2:	9305      	str	r3, [sp, #20]
 800fff4:	4619      	mov	r1, r3
 800fff6:	f04f 0c0a 	mov.w	ip, #10
 800fffa:	4620      	mov	r0, r4
 800fffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010000:	3a30      	subs	r2, #48	; 0x30
 8010002:	2a09      	cmp	r2, #9
 8010004:	d903      	bls.n	801000e <_vfiprintf_r+0x1ee>
 8010006:	2b00      	cmp	r3, #0
 8010008:	d0c5      	beq.n	800ff96 <_vfiprintf_r+0x176>
 801000a:	9105      	str	r1, [sp, #20]
 801000c:	e7c3      	b.n	800ff96 <_vfiprintf_r+0x176>
 801000e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010012:	4604      	mov	r4, r0
 8010014:	2301      	movs	r3, #1
 8010016:	e7f0      	b.n	800fffa <_vfiprintf_r+0x1da>
 8010018:	ab03      	add	r3, sp, #12
 801001a:	9300      	str	r3, [sp, #0]
 801001c:	462a      	mov	r2, r5
 801001e:	4b16      	ldr	r3, [pc, #88]	; (8010078 <_vfiprintf_r+0x258>)
 8010020:	a904      	add	r1, sp, #16
 8010022:	4630      	mov	r0, r6
 8010024:	f3af 8000 	nop.w
 8010028:	4607      	mov	r7, r0
 801002a:	1c78      	adds	r0, r7, #1
 801002c:	d1d6      	bne.n	800ffdc <_vfiprintf_r+0x1bc>
 801002e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010030:	07d9      	lsls	r1, r3, #31
 8010032:	d405      	bmi.n	8010040 <_vfiprintf_r+0x220>
 8010034:	89ab      	ldrh	r3, [r5, #12]
 8010036:	059a      	lsls	r2, r3, #22
 8010038:	d402      	bmi.n	8010040 <_vfiprintf_r+0x220>
 801003a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801003c:	f7ff fd77 	bl	800fb2e <__retarget_lock_release_recursive>
 8010040:	89ab      	ldrh	r3, [r5, #12]
 8010042:	065b      	lsls	r3, r3, #25
 8010044:	f53f af12 	bmi.w	800fe6c <_vfiprintf_r+0x4c>
 8010048:	9809      	ldr	r0, [sp, #36]	; 0x24
 801004a:	e711      	b.n	800fe70 <_vfiprintf_r+0x50>
 801004c:	ab03      	add	r3, sp, #12
 801004e:	9300      	str	r3, [sp, #0]
 8010050:	462a      	mov	r2, r5
 8010052:	4b09      	ldr	r3, [pc, #36]	; (8010078 <_vfiprintf_r+0x258>)
 8010054:	a904      	add	r1, sp, #16
 8010056:	4630      	mov	r0, r6
 8010058:	f000 f880 	bl	801015c <_printf_i>
 801005c:	e7e4      	b.n	8010028 <_vfiprintf_r+0x208>
 801005e:	bf00      	nop
 8010060:	080131cc 	.word	0x080131cc
 8010064:	080131ec 	.word	0x080131ec
 8010068:	080131ac 	.word	0x080131ac
 801006c:	0801320c 	.word	0x0801320c
 8010070:	08013216 	.word	0x08013216
 8010074:	00000000 	.word	0x00000000
 8010078:	0800fdfb 	.word	0x0800fdfb
 801007c:	08013212 	.word	0x08013212

08010080 <_printf_common>:
 8010080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010084:	4616      	mov	r6, r2
 8010086:	4699      	mov	r9, r3
 8010088:	688a      	ldr	r2, [r1, #8]
 801008a:	690b      	ldr	r3, [r1, #16]
 801008c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010090:	4293      	cmp	r3, r2
 8010092:	bfb8      	it	lt
 8010094:	4613      	movlt	r3, r2
 8010096:	6033      	str	r3, [r6, #0]
 8010098:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801009c:	4607      	mov	r7, r0
 801009e:	460c      	mov	r4, r1
 80100a0:	b10a      	cbz	r2, 80100a6 <_printf_common+0x26>
 80100a2:	3301      	adds	r3, #1
 80100a4:	6033      	str	r3, [r6, #0]
 80100a6:	6823      	ldr	r3, [r4, #0]
 80100a8:	0699      	lsls	r1, r3, #26
 80100aa:	bf42      	ittt	mi
 80100ac:	6833      	ldrmi	r3, [r6, #0]
 80100ae:	3302      	addmi	r3, #2
 80100b0:	6033      	strmi	r3, [r6, #0]
 80100b2:	6825      	ldr	r5, [r4, #0]
 80100b4:	f015 0506 	ands.w	r5, r5, #6
 80100b8:	d106      	bne.n	80100c8 <_printf_common+0x48>
 80100ba:	f104 0a19 	add.w	sl, r4, #25
 80100be:	68e3      	ldr	r3, [r4, #12]
 80100c0:	6832      	ldr	r2, [r6, #0]
 80100c2:	1a9b      	subs	r3, r3, r2
 80100c4:	42ab      	cmp	r3, r5
 80100c6:	dc26      	bgt.n	8010116 <_printf_common+0x96>
 80100c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80100cc:	1e13      	subs	r3, r2, #0
 80100ce:	6822      	ldr	r2, [r4, #0]
 80100d0:	bf18      	it	ne
 80100d2:	2301      	movne	r3, #1
 80100d4:	0692      	lsls	r2, r2, #26
 80100d6:	d42b      	bmi.n	8010130 <_printf_common+0xb0>
 80100d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80100dc:	4649      	mov	r1, r9
 80100de:	4638      	mov	r0, r7
 80100e0:	47c0      	blx	r8
 80100e2:	3001      	adds	r0, #1
 80100e4:	d01e      	beq.n	8010124 <_printf_common+0xa4>
 80100e6:	6823      	ldr	r3, [r4, #0]
 80100e8:	68e5      	ldr	r5, [r4, #12]
 80100ea:	6832      	ldr	r2, [r6, #0]
 80100ec:	f003 0306 	and.w	r3, r3, #6
 80100f0:	2b04      	cmp	r3, #4
 80100f2:	bf08      	it	eq
 80100f4:	1aad      	subeq	r5, r5, r2
 80100f6:	68a3      	ldr	r3, [r4, #8]
 80100f8:	6922      	ldr	r2, [r4, #16]
 80100fa:	bf0c      	ite	eq
 80100fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010100:	2500      	movne	r5, #0
 8010102:	4293      	cmp	r3, r2
 8010104:	bfc4      	itt	gt
 8010106:	1a9b      	subgt	r3, r3, r2
 8010108:	18ed      	addgt	r5, r5, r3
 801010a:	2600      	movs	r6, #0
 801010c:	341a      	adds	r4, #26
 801010e:	42b5      	cmp	r5, r6
 8010110:	d11a      	bne.n	8010148 <_printf_common+0xc8>
 8010112:	2000      	movs	r0, #0
 8010114:	e008      	b.n	8010128 <_printf_common+0xa8>
 8010116:	2301      	movs	r3, #1
 8010118:	4652      	mov	r2, sl
 801011a:	4649      	mov	r1, r9
 801011c:	4638      	mov	r0, r7
 801011e:	47c0      	blx	r8
 8010120:	3001      	adds	r0, #1
 8010122:	d103      	bne.n	801012c <_printf_common+0xac>
 8010124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801012c:	3501      	adds	r5, #1
 801012e:	e7c6      	b.n	80100be <_printf_common+0x3e>
 8010130:	18e1      	adds	r1, r4, r3
 8010132:	1c5a      	adds	r2, r3, #1
 8010134:	2030      	movs	r0, #48	; 0x30
 8010136:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801013a:	4422      	add	r2, r4
 801013c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010144:	3302      	adds	r3, #2
 8010146:	e7c7      	b.n	80100d8 <_printf_common+0x58>
 8010148:	2301      	movs	r3, #1
 801014a:	4622      	mov	r2, r4
 801014c:	4649      	mov	r1, r9
 801014e:	4638      	mov	r0, r7
 8010150:	47c0      	blx	r8
 8010152:	3001      	adds	r0, #1
 8010154:	d0e6      	beq.n	8010124 <_printf_common+0xa4>
 8010156:	3601      	adds	r6, #1
 8010158:	e7d9      	b.n	801010e <_printf_common+0x8e>
	...

0801015c <_printf_i>:
 801015c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010160:	7e0f      	ldrb	r7, [r1, #24]
 8010162:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010164:	2f78      	cmp	r7, #120	; 0x78
 8010166:	4691      	mov	r9, r2
 8010168:	4680      	mov	r8, r0
 801016a:	460c      	mov	r4, r1
 801016c:	469a      	mov	sl, r3
 801016e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010172:	d807      	bhi.n	8010184 <_printf_i+0x28>
 8010174:	2f62      	cmp	r7, #98	; 0x62
 8010176:	d80a      	bhi.n	801018e <_printf_i+0x32>
 8010178:	2f00      	cmp	r7, #0
 801017a:	f000 80d8 	beq.w	801032e <_printf_i+0x1d2>
 801017e:	2f58      	cmp	r7, #88	; 0x58
 8010180:	f000 80a3 	beq.w	80102ca <_printf_i+0x16e>
 8010184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801018c:	e03a      	b.n	8010204 <_printf_i+0xa8>
 801018e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010192:	2b15      	cmp	r3, #21
 8010194:	d8f6      	bhi.n	8010184 <_printf_i+0x28>
 8010196:	a101      	add	r1, pc, #4	; (adr r1, 801019c <_printf_i+0x40>)
 8010198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801019c:	080101f5 	.word	0x080101f5
 80101a0:	08010209 	.word	0x08010209
 80101a4:	08010185 	.word	0x08010185
 80101a8:	08010185 	.word	0x08010185
 80101ac:	08010185 	.word	0x08010185
 80101b0:	08010185 	.word	0x08010185
 80101b4:	08010209 	.word	0x08010209
 80101b8:	08010185 	.word	0x08010185
 80101bc:	08010185 	.word	0x08010185
 80101c0:	08010185 	.word	0x08010185
 80101c4:	08010185 	.word	0x08010185
 80101c8:	08010315 	.word	0x08010315
 80101cc:	08010239 	.word	0x08010239
 80101d0:	080102f7 	.word	0x080102f7
 80101d4:	08010185 	.word	0x08010185
 80101d8:	08010185 	.word	0x08010185
 80101dc:	08010337 	.word	0x08010337
 80101e0:	08010185 	.word	0x08010185
 80101e4:	08010239 	.word	0x08010239
 80101e8:	08010185 	.word	0x08010185
 80101ec:	08010185 	.word	0x08010185
 80101f0:	080102ff 	.word	0x080102ff
 80101f4:	682b      	ldr	r3, [r5, #0]
 80101f6:	1d1a      	adds	r2, r3, #4
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	602a      	str	r2, [r5, #0]
 80101fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010204:	2301      	movs	r3, #1
 8010206:	e0a3      	b.n	8010350 <_printf_i+0x1f4>
 8010208:	6820      	ldr	r0, [r4, #0]
 801020a:	6829      	ldr	r1, [r5, #0]
 801020c:	0606      	lsls	r6, r0, #24
 801020e:	f101 0304 	add.w	r3, r1, #4
 8010212:	d50a      	bpl.n	801022a <_printf_i+0xce>
 8010214:	680e      	ldr	r6, [r1, #0]
 8010216:	602b      	str	r3, [r5, #0]
 8010218:	2e00      	cmp	r6, #0
 801021a:	da03      	bge.n	8010224 <_printf_i+0xc8>
 801021c:	232d      	movs	r3, #45	; 0x2d
 801021e:	4276      	negs	r6, r6
 8010220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010224:	485e      	ldr	r0, [pc, #376]	; (80103a0 <_printf_i+0x244>)
 8010226:	230a      	movs	r3, #10
 8010228:	e019      	b.n	801025e <_printf_i+0x102>
 801022a:	680e      	ldr	r6, [r1, #0]
 801022c:	602b      	str	r3, [r5, #0]
 801022e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010232:	bf18      	it	ne
 8010234:	b236      	sxthne	r6, r6
 8010236:	e7ef      	b.n	8010218 <_printf_i+0xbc>
 8010238:	682b      	ldr	r3, [r5, #0]
 801023a:	6820      	ldr	r0, [r4, #0]
 801023c:	1d19      	adds	r1, r3, #4
 801023e:	6029      	str	r1, [r5, #0]
 8010240:	0601      	lsls	r1, r0, #24
 8010242:	d501      	bpl.n	8010248 <_printf_i+0xec>
 8010244:	681e      	ldr	r6, [r3, #0]
 8010246:	e002      	b.n	801024e <_printf_i+0xf2>
 8010248:	0646      	lsls	r6, r0, #25
 801024a:	d5fb      	bpl.n	8010244 <_printf_i+0xe8>
 801024c:	881e      	ldrh	r6, [r3, #0]
 801024e:	4854      	ldr	r0, [pc, #336]	; (80103a0 <_printf_i+0x244>)
 8010250:	2f6f      	cmp	r7, #111	; 0x6f
 8010252:	bf0c      	ite	eq
 8010254:	2308      	moveq	r3, #8
 8010256:	230a      	movne	r3, #10
 8010258:	2100      	movs	r1, #0
 801025a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801025e:	6865      	ldr	r5, [r4, #4]
 8010260:	60a5      	str	r5, [r4, #8]
 8010262:	2d00      	cmp	r5, #0
 8010264:	bfa2      	ittt	ge
 8010266:	6821      	ldrge	r1, [r4, #0]
 8010268:	f021 0104 	bicge.w	r1, r1, #4
 801026c:	6021      	strge	r1, [r4, #0]
 801026e:	b90e      	cbnz	r6, 8010274 <_printf_i+0x118>
 8010270:	2d00      	cmp	r5, #0
 8010272:	d04d      	beq.n	8010310 <_printf_i+0x1b4>
 8010274:	4615      	mov	r5, r2
 8010276:	fbb6 f1f3 	udiv	r1, r6, r3
 801027a:	fb03 6711 	mls	r7, r3, r1, r6
 801027e:	5dc7      	ldrb	r7, [r0, r7]
 8010280:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010284:	4637      	mov	r7, r6
 8010286:	42bb      	cmp	r3, r7
 8010288:	460e      	mov	r6, r1
 801028a:	d9f4      	bls.n	8010276 <_printf_i+0x11a>
 801028c:	2b08      	cmp	r3, #8
 801028e:	d10b      	bne.n	80102a8 <_printf_i+0x14c>
 8010290:	6823      	ldr	r3, [r4, #0]
 8010292:	07de      	lsls	r6, r3, #31
 8010294:	d508      	bpl.n	80102a8 <_printf_i+0x14c>
 8010296:	6923      	ldr	r3, [r4, #16]
 8010298:	6861      	ldr	r1, [r4, #4]
 801029a:	4299      	cmp	r1, r3
 801029c:	bfde      	ittt	le
 801029e:	2330      	movle	r3, #48	; 0x30
 80102a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80102a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80102a8:	1b52      	subs	r2, r2, r5
 80102aa:	6122      	str	r2, [r4, #16]
 80102ac:	f8cd a000 	str.w	sl, [sp]
 80102b0:	464b      	mov	r3, r9
 80102b2:	aa03      	add	r2, sp, #12
 80102b4:	4621      	mov	r1, r4
 80102b6:	4640      	mov	r0, r8
 80102b8:	f7ff fee2 	bl	8010080 <_printf_common>
 80102bc:	3001      	adds	r0, #1
 80102be:	d14c      	bne.n	801035a <_printf_i+0x1fe>
 80102c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102c4:	b004      	add	sp, #16
 80102c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102ca:	4835      	ldr	r0, [pc, #212]	; (80103a0 <_printf_i+0x244>)
 80102cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80102d0:	6829      	ldr	r1, [r5, #0]
 80102d2:	6823      	ldr	r3, [r4, #0]
 80102d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80102d8:	6029      	str	r1, [r5, #0]
 80102da:	061d      	lsls	r5, r3, #24
 80102dc:	d514      	bpl.n	8010308 <_printf_i+0x1ac>
 80102de:	07df      	lsls	r7, r3, #31
 80102e0:	bf44      	itt	mi
 80102e2:	f043 0320 	orrmi.w	r3, r3, #32
 80102e6:	6023      	strmi	r3, [r4, #0]
 80102e8:	b91e      	cbnz	r6, 80102f2 <_printf_i+0x196>
 80102ea:	6823      	ldr	r3, [r4, #0]
 80102ec:	f023 0320 	bic.w	r3, r3, #32
 80102f0:	6023      	str	r3, [r4, #0]
 80102f2:	2310      	movs	r3, #16
 80102f4:	e7b0      	b.n	8010258 <_printf_i+0xfc>
 80102f6:	6823      	ldr	r3, [r4, #0]
 80102f8:	f043 0320 	orr.w	r3, r3, #32
 80102fc:	6023      	str	r3, [r4, #0]
 80102fe:	2378      	movs	r3, #120	; 0x78
 8010300:	4828      	ldr	r0, [pc, #160]	; (80103a4 <_printf_i+0x248>)
 8010302:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010306:	e7e3      	b.n	80102d0 <_printf_i+0x174>
 8010308:	0659      	lsls	r1, r3, #25
 801030a:	bf48      	it	mi
 801030c:	b2b6      	uxthmi	r6, r6
 801030e:	e7e6      	b.n	80102de <_printf_i+0x182>
 8010310:	4615      	mov	r5, r2
 8010312:	e7bb      	b.n	801028c <_printf_i+0x130>
 8010314:	682b      	ldr	r3, [r5, #0]
 8010316:	6826      	ldr	r6, [r4, #0]
 8010318:	6961      	ldr	r1, [r4, #20]
 801031a:	1d18      	adds	r0, r3, #4
 801031c:	6028      	str	r0, [r5, #0]
 801031e:	0635      	lsls	r5, r6, #24
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	d501      	bpl.n	8010328 <_printf_i+0x1cc>
 8010324:	6019      	str	r1, [r3, #0]
 8010326:	e002      	b.n	801032e <_printf_i+0x1d2>
 8010328:	0670      	lsls	r0, r6, #25
 801032a:	d5fb      	bpl.n	8010324 <_printf_i+0x1c8>
 801032c:	8019      	strh	r1, [r3, #0]
 801032e:	2300      	movs	r3, #0
 8010330:	6123      	str	r3, [r4, #16]
 8010332:	4615      	mov	r5, r2
 8010334:	e7ba      	b.n	80102ac <_printf_i+0x150>
 8010336:	682b      	ldr	r3, [r5, #0]
 8010338:	1d1a      	adds	r2, r3, #4
 801033a:	602a      	str	r2, [r5, #0]
 801033c:	681d      	ldr	r5, [r3, #0]
 801033e:	6862      	ldr	r2, [r4, #4]
 8010340:	2100      	movs	r1, #0
 8010342:	4628      	mov	r0, r5
 8010344:	f7ef ff7c 	bl	8000240 <memchr>
 8010348:	b108      	cbz	r0, 801034e <_printf_i+0x1f2>
 801034a:	1b40      	subs	r0, r0, r5
 801034c:	6060      	str	r0, [r4, #4]
 801034e:	6863      	ldr	r3, [r4, #4]
 8010350:	6123      	str	r3, [r4, #16]
 8010352:	2300      	movs	r3, #0
 8010354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010358:	e7a8      	b.n	80102ac <_printf_i+0x150>
 801035a:	6923      	ldr	r3, [r4, #16]
 801035c:	462a      	mov	r2, r5
 801035e:	4649      	mov	r1, r9
 8010360:	4640      	mov	r0, r8
 8010362:	47d0      	blx	sl
 8010364:	3001      	adds	r0, #1
 8010366:	d0ab      	beq.n	80102c0 <_printf_i+0x164>
 8010368:	6823      	ldr	r3, [r4, #0]
 801036a:	079b      	lsls	r3, r3, #30
 801036c:	d413      	bmi.n	8010396 <_printf_i+0x23a>
 801036e:	68e0      	ldr	r0, [r4, #12]
 8010370:	9b03      	ldr	r3, [sp, #12]
 8010372:	4298      	cmp	r0, r3
 8010374:	bfb8      	it	lt
 8010376:	4618      	movlt	r0, r3
 8010378:	e7a4      	b.n	80102c4 <_printf_i+0x168>
 801037a:	2301      	movs	r3, #1
 801037c:	4632      	mov	r2, r6
 801037e:	4649      	mov	r1, r9
 8010380:	4640      	mov	r0, r8
 8010382:	47d0      	blx	sl
 8010384:	3001      	adds	r0, #1
 8010386:	d09b      	beq.n	80102c0 <_printf_i+0x164>
 8010388:	3501      	adds	r5, #1
 801038a:	68e3      	ldr	r3, [r4, #12]
 801038c:	9903      	ldr	r1, [sp, #12]
 801038e:	1a5b      	subs	r3, r3, r1
 8010390:	42ab      	cmp	r3, r5
 8010392:	dcf2      	bgt.n	801037a <_printf_i+0x21e>
 8010394:	e7eb      	b.n	801036e <_printf_i+0x212>
 8010396:	2500      	movs	r5, #0
 8010398:	f104 0619 	add.w	r6, r4, #25
 801039c:	e7f5      	b.n	801038a <_printf_i+0x22e>
 801039e:	bf00      	nop
 80103a0:	0801321d 	.word	0x0801321d
 80103a4:	0801322e 	.word	0x0801322e

080103a8 <_sbrk_r>:
 80103a8:	b538      	push	{r3, r4, r5, lr}
 80103aa:	4d06      	ldr	r5, [pc, #24]	; (80103c4 <_sbrk_r+0x1c>)
 80103ac:	2300      	movs	r3, #0
 80103ae:	4604      	mov	r4, r0
 80103b0:	4608      	mov	r0, r1
 80103b2:	602b      	str	r3, [r5, #0]
 80103b4:	f7f0 fc6c 	bl	8000c90 <_sbrk>
 80103b8:	1c43      	adds	r3, r0, #1
 80103ba:	d102      	bne.n	80103c2 <_sbrk_r+0x1a>
 80103bc:	682b      	ldr	r3, [r5, #0]
 80103be:	b103      	cbz	r3, 80103c2 <_sbrk_r+0x1a>
 80103c0:	6023      	str	r3, [r4, #0]
 80103c2:	bd38      	pop	{r3, r4, r5, pc}
 80103c4:	2000891c 	.word	0x2000891c

080103c8 <__sread>:
 80103c8:	b510      	push	{r4, lr}
 80103ca:	460c      	mov	r4, r1
 80103cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103d0:	f000 f8a8 	bl	8010524 <_read_r>
 80103d4:	2800      	cmp	r0, #0
 80103d6:	bfab      	itete	ge
 80103d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80103da:	89a3      	ldrhlt	r3, [r4, #12]
 80103dc:	181b      	addge	r3, r3, r0
 80103de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80103e2:	bfac      	ite	ge
 80103e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80103e6:	81a3      	strhlt	r3, [r4, #12]
 80103e8:	bd10      	pop	{r4, pc}

080103ea <__swrite>:
 80103ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103ee:	461f      	mov	r7, r3
 80103f0:	898b      	ldrh	r3, [r1, #12]
 80103f2:	05db      	lsls	r3, r3, #23
 80103f4:	4605      	mov	r5, r0
 80103f6:	460c      	mov	r4, r1
 80103f8:	4616      	mov	r6, r2
 80103fa:	d505      	bpl.n	8010408 <__swrite+0x1e>
 80103fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010400:	2302      	movs	r3, #2
 8010402:	2200      	movs	r2, #0
 8010404:	f000 f870 	bl	80104e8 <_lseek_r>
 8010408:	89a3      	ldrh	r3, [r4, #12]
 801040a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801040e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010412:	81a3      	strh	r3, [r4, #12]
 8010414:	4632      	mov	r2, r6
 8010416:	463b      	mov	r3, r7
 8010418:	4628      	mov	r0, r5
 801041a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801041e:	f000 b817 	b.w	8010450 <_write_r>

08010422 <__sseek>:
 8010422:	b510      	push	{r4, lr}
 8010424:	460c      	mov	r4, r1
 8010426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801042a:	f000 f85d 	bl	80104e8 <_lseek_r>
 801042e:	1c43      	adds	r3, r0, #1
 8010430:	89a3      	ldrh	r3, [r4, #12]
 8010432:	bf15      	itete	ne
 8010434:	6560      	strne	r0, [r4, #84]	; 0x54
 8010436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801043a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801043e:	81a3      	strheq	r3, [r4, #12]
 8010440:	bf18      	it	ne
 8010442:	81a3      	strhne	r3, [r4, #12]
 8010444:	bd10      	pop	{r4, pc}

08010446 <__sclose>:
 8010446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801044a:	f000 b81b 	b.w	8010484 <_close_r>
	...

08010450 <_write_r>:
 8010450:	b538      	push	{r3, r4, r5, lr}
 8010452:	4d07      	ldr	r5, [pc, #28]	; (8010470 <_write_r+0x20>)
 8010454:	4604      	mov	r4, r0
 8010456:	4608      	mov	r0, r1
 8010458:	4611      	mov	r1, r2
 801045a:	2200      	movs	r2, #0
 801045c:	602a      	str	r2, [r5, #0]
 801045e:	461a      	mov	r2, r3
 8010460:	f7f0 f8c0 	bl	80005e4 <_write>
 8010464:	1c43      	adds	r3, r0, #1
 8010466:	d102      	bne.n	801046e <_write_r+0x1e>
 8010468:	682b      	ldr	r3, [r5, #0]
 801046a:	b103      	cbz	r3, 801046e <_write_r+0x1e>
 801046c:	6023      	str	r3, [r4, #0]
 801046e:	bd38      	pop	{r3, r4, r5, pc}
 8010470:	2000891c 	.word	0x2000891c

08010474 <abort>:
 8010474:	b508      	push	{r3, lr}
 8010476:	2006      	movs	r0, #6
 8010478:	f000 f88e 	bl	8010598 <raise>
 801047c:	2001      	movs	r0, #1
 801047e:	f7f0 fbab 	bl	8000bd8 <_exit>
	...

08010484 <_close_r>:
 8010484:	b538      	push	{r3, r4, r5, lr}
 8010486:	4d06      	ldr	r5, [pc, #24]	; (80104a0 <_close_r+0x1c>)
 8010488:	2300      	movs	r3, #0
 801048a:	4604      	mov	r4, r0
 801048c:	4608      	mov	r0, r1
 801048e:	602b      	str	r3, [r5, #0]
 8010490:	f7f0 fbc9 	bl	8000c26 <_close>
 8010494:	1c43      	adds	r3, r0, #1
 8010496:	d102      	bne.n	801049e <_close_r+0x1a>
 8010498:	682b      	ldr	r3, [r5, #0]
 801049a:	b103      	cbz	r3, 801049e <_close_r+0x1a>
 801049c:	6023      	str	r3, [r4, #0]
 801049e:	bd38      	pop	{r3, r4, r5, pc}
 80104a0:	2000891c 	.word	0x2000891c

080104a4 <_fstat_r>:
 80104a4:	b538      	push	{r3, r4, r5, lr}
 80104a6:	4d07      	ldr	r5, [pc, #28]	; (80104c4 <_fstat_r+0x20>)
 80104a8:	2300      	movs	r3, #0
 80104aa:	4604      	mov	r4, r0
 80104ac:	4608      	mov	r0, r1
 80104ae:	4611      	mov	r1, r2
 80104b0:	602b      	str	r3, [r5, #0]
 80104b2:	f7f0 fbc4 	bl	8000c3e <_fstat>
 80104b6:	1c43      	adds	r3, r0, #1
 80104b8:	d102      	bne.n	80104c0 <_fstat_r+0x1c>
 80104ba:	682b      	ldr	r3, [r5, #0]
 80104bc:	b103      	cbz	r3, 80104c0 <_fstat_r+0x1c>
 80104be:	6023      	str	r3, [r4, #0]
 80104c0:	bd38      	pop	{r3, r4, r5, pc}
 80104c2:	bf00      	nop
 80104c4:	2000891c 	.word	0x2000891c

080104c8 <_isatty_r>:
 80104c8:	b538      	push	{r3, r4, r5, lr}
 80104ca:	4d06      	ldr	r5, [pc, #24]	; (80104e4 <_isatty_r+0x1c>)
 80104cc:	2300      	movs	r3, #0
 80104ce:	4604      	mov	r4, r0
 80104d0:	4608      	mov	r0, r1
 80104d2:	602b      	str	r3, [r5, #0]
 80104d4:	f7f0 fbc3 	bl	8000c5e <_isatty>
 80104d8:	1c43      	adds	r3, r0, #1
 80104da:	d102      	bne.n	80104e2 <_isatty_r+0x1a>
 80104dc:	682b      	ldr	r3, [r5, #0]
 80104de:	b103      	cbz	r3, 80104e2 <_isatty_r+0x1a>
 80104e0:	6023      	str	r3, [r4, #0]
 80104e2:	bd38      	pop	{r3, r4, r5, pc}
 80104e4:	2000891c 	.word	0x2000891c

080104e8 <_lseek_r>:
 80104e8:	b538      	push	{r3, r4, r5, lr}
 80104ea:	4d07      	ldr	r5, [pc, #28]	; (8010508 <_lseek_r+0x20>)
 80104ec:	4604      	mov	r4, r0
 80104ee:	4608      	mov	r0, r1
 80104f0:	4611      	mov	r1, r2
 80104f2:	2200      	movs	r2, #0
 80104f4:	602a      	str	r2, [r5, #0]
 80104f6:	461a      	mov	r2, r3
 80104f8:	f7f0 fbbc 	bl	8000c74 <_lseek>
 80104fc:	1c43      	adds	r3, r0, #1
 80104fe:	d102      	bne.n	8010506 <_lseek_r+0x1e>
 8010500:	682b      	ldr	r3, [r5, #0]
 8010502:	b103      	cbz	r3, 8010506 <_lseek_r+0x1e>
 8010504:	6023      	str	r3, [r4, #0]
 8010506:	bd38      	pop	{r3, r4, r5, pc}
 8010508:	2000891c 	.word	0x2000891c

0801050c <__malloc_lock>:
 801050c:	4801      	ldr	r0, [pc, #4]	; (8010514 <__malloc_lock+0x8>)
 801050e:	f7ff bb0d 	b.w	800fb2c <__retarget_lock_acquire_recursive>
 8010512:	bf00      	nop
 8010514:	20008920 	.word	0x20008920

08010518 <__malloc_unlock>:
 8010518:	4801      	ldr	r0, [pc, #4]	; (8010520 <__malloc_unlock+0x8>)
 801051a:	f7ff bb08 	b.w	800fb2e <__retarget_lock_release_recursive>
 801051e:	bf00      	nop
 8010520:	20008920 	.word	0x20008920

08010524 <_read_r>:
 8010524:	b538      	push	{r3, r4, r5, lr}
 8010526:	4d07      	ldr	r5, [pc, #28]	; (8010544 <_read_r+0x20>)
 8010528:	4604      	mov	r4, r0
 801052a:	4608      	mov	r0, r1
 801052c:	4611      	mov	r1, r2
 801052e:	2200      	movs	r2, #0
 8010530:	602a      	str	r2, [r5, #0]
 8010532:	461a      	mov	r2, r3
 8010534:	f7f0 fb5a 	bl	8000bec <_read>
 8010538:	1c43      	adds	r3, r0, #1
 801053a:	d102      	bne.n	8010542 <_read_r+0x1e>
 801053c:	682b      	ldr	r3, [r5, #0]
 801053e:	b103      	cbz	r3, 8010542 <_read_r+0x1e>
 8010540:	6023      	str	r3, [r4, #0]
 8010542:	bd38      	pop	{r3, r4, r5, pc}
 8010544:	2000891c 	.word	0x2000891c

08010548 <_raise_r>:
 8010548:	291f      	cmp	r1, #31
 801054a:	b538      	push	{r3, r4, r5, lr}
 801054c:	4604      	mov	r4, r0
 801054e:	460d      	mov	r5, r1
 8010550:	d904      	bls.n	801055c <_raise_r+0x14>
 8010552:	2316      	movs	r3, #22
 8010554:	6003      	str	r3, [r0, #0]
 8010556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801055a:	bd38      	pop	{r3, r4, r5, pc}
 801055c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801055e:	b112      	cbz	r2, 8010566 <_raise_r+0x1e>
 8010560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010564:	b94b      	cbnz	r3, 801057a <_raise_r+0x32>
 8010566:	4620      	mov	r0, r4
 8010568:	f000 f830 	bl	80105cc <_getpid_r>
 801056c:	462a      	mov	r2, r5
 801056e:	4601      	mov	r1, r0
 8010570:	4620      	mov	r0, r4
 8010572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010576:	f000 b817 	b.w	80105a8 <_kill_r>
 801057a:	2b01      	cmp	r3, #1
 801057c:	d00a      	beq.n	8010594 <_raise_r+0x4c>
 801057e:	1c59      	adds	r1, r3, #1
 8010580:	d103      	bne.n	801058a <_raise_r+0x42>
 8010582:	2316      	movs	r3, #22
 8010584:	6003      	str	r3, [r0, #0]
 8010586:	2001      	movs	r0, #1
 8010588:	e7e7      	b.n	801055a <_raise_r+0x12>
 801058a:	2400      	movs	r4, #0
 801058c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010590:	4628      	mov	r0, r5
 8010592:	4798      	blx	r3
 8010594:	2000      	movs	r0, #0
 8010596:	e7e0      	b.n	801055a <_raise_r+0x12>

08010598 <raise>:
 8010598:	4b02      	ldr	r3, [pc, #8]	; (80105a4 <raise+0xc>)
 801059a:	4601      	mov	r1, r0
 801059c:	6818      	ldr	r0, [r3, #0]
 801059e:	f7ff bfd3 	b.w	8010548 <_raise_r>
 80105a2:	bf00      	nop
 80105a4:	2000002c 	.word	0x2000002c

080105a8 <_kill_r>:
 80105a8:	b538      	push	{r3, r4, r5, lr}
 80105aa:	4d07      	ldr	r5, [pc, #28]	; (80105c8 <_kill_r+0x20>)
 80105ac:	2300      	movs	r3, #0
 80105ae:	4604      	mov	r4, r0
 80105b0:	4608      	mov	r0, r1
 80105b2:	4611      	mov	r1, r2
 80105b4:	602b      	str	r3, [r5, #0]
 80105b6:	f7f0 fafd 	bl	8000bb4 <_kill>
 80105ba:	1c43      	adds	r3, r0, #1
 80105bc:	d102      	bne.n	80105c4 <_kill_r+0x1c>
 80105be:	682b      	ldr	r3, [r5, #0]
 80105c0:	b103      	cbz	r3, 80105c4 <_kill_r+0x1c>
 80105c2:	6023      	str	r3, [r4, #0]
 80105c4:	bd38      	pop	{r3, r4, r5, pc}
 80105c6:	bf00      	nop
 80105c8:	2000891c 	.word	0x2000891c

080105cc <_getpid_r>:
 80105cc:	f7f0 baea 	b.w	8000ba4 <_getpid>

080105d0 <_init>:
 80105d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105d2:	bf00      	nop
 80105d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105d6:	bc08      	pop	{r3}
 80105d8:	469e      	mov	lr, r3
 80105da:	4770      	bx	lr

080105dc <_fini>:
 80105dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105de:	bf00      	nop
 80105e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105e2:	bc08      	pop	{r3}
 80105e4:	469e      	mov	lr, r3
 80105e6:	4770      	bx	lr
