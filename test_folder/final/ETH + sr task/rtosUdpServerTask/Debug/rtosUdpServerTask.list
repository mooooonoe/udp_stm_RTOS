
rtosUdpServerTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015cd4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f20  08015ed4  08015ed4  00025ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018df4  08018df4  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  08018df4  08018df4  00028df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018dfc  08018dfc  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018dfc  08018dfc  00028dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018e00  08018e00  00028e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08018e04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  08018e98  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  08018f38  00030134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00017a10  200001d4  08018fd8  000301d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20017be4  08018fd8  00037be4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00036e51  00000000  00000000  00030202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000083f8  00000000  00000000  00067053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002610  00000000  00000000  0006f450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002430  00000000  00000000  00071a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a62c  00000000  00000000  00073e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003c8cc  00000000  00000000  000ae4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001229fe  00000000  00000000  000ead88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0020d786  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a7a8  00000000  00000000  0020d7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .stab         00000024  00000000  00000000  00217f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      0000004e  00000000  00000000  00217fa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08015ebc 	.word	0x08015ebc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08015ebc 	.word	0x08015ebc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
  /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  //turn on red led when detects stack overflow
 80005ee:	2201      	movs	r2, #1
 80005f0:	2120      	movs	r1, #32
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <vApplicationStackOverflowHook+0x1c>)
 80005f4:	f002 fde4 	bl	80031c0 <HAL_GPIO_WritePin>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40020000 	.word	0x40020000

08000604 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4a07      	ldr	r2, [pc, #28]	; (8000630 <vApplicationGetIdleTaskMemory+0x2c>)
 8000614:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <vApplicationGetIdleTaskMemory+0x30>)
 800061a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000622:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	200001f4 	.word	0x200001f4
 8000634:	200002a8 	.word	0x200002a8

08000638 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000638:	b5b0      	push	{r4, r5, r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MX_FREERTOS_Init+0x30>)
 8000640:	1d3c      	adds	r4, r7, #4
 8000642:	461d      	mov	r5, r3
 8000644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000648:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f006 f9ed 	bl	8006a34 <osThreadCreate>
 800065a:	4603      	mov	r3, r0
 800065c:	4a03      	ldr	r2, [pc, #12]	; (800066c <MX_FREERTOS_Init+0x34>)
 800065e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000660:	bf00      	nop
 8000662:	3720      	adds	r7, #32
 8000664:	46bd      	mov	sp, r7
 8000666:	bdb0      	pop	{r4, r5, r7, pc}
 8000668:	08015ee0 	.word	0x08015ee0
 800066c:	200001f0 	.word	0x200001f0

08000670 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000678:	f005 fb6a 	bl	8005d50 <MX_LWIP_Init>

  udp_echoserver_init();
 800067c:	f000 fd16 	bl	80010ac <udp_echoserver_init>


  /* Infinite loop */
  for (;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000680:	2120      	movs	r1, #32
 8000682:	4804      	ldr	r0, [pc, #16]	; (8000694 <StartDefaultTask+0x24>)
 8000684:	f002 fdb5 	bl	80031f2 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000688:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800068c:	f006 fa1e 	bl	8006acc <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000690:	e7f6      	b.n	8000680 <StartDefaultTask+0x10>
 8000692:	bf00      	nop
 8000694:	40020000 	.word	0x40020000

08000698 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	; 0x30
 800069c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b50      	ldr	r3, [pc, #320]	; (80007f0 <MX_GPIO_Init+0x158>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a4f      	ldr	r2, [pc, #316]	; (80007f0 <MX_GPIO_Init+0x158>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b4d      	ldr	r3, [pc, #308]	; (80007f0 <MX_GPIO_Init+0x158>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	61bb      	str	r3, [r7, #24]
 80006c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	4b4a      	ldr	r3, [pc, #296]	; (80007f0 <MX_GPIO_Init+0x158>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a49      	ldr	r2, [pc, #292]	; (80007f0 <MX_GPIO_Init+0x158>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b47      	ldr	r3, [pc, #284]	; (80007f0 <MX_GPIO_Init+0x158>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b44      	ldr	r3, [pc, #272]	; (80007f0 <MX_GPIO_Init+0x158>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a43      	ldr	r2, [pc, #268]	; (80007f0 <MX_GPIO_Init+0x158>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b41      	ldr	r3, [pc, #260]	; (80007f0 <MX_GPIO_Init+0x158>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b3e      	ldr	r3, [pc, #248]	; (80007f0 <MX_GPIO_Init+0x158>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a3d      	ldr	r2, [pc, #244]	; (80007f0 <MX_GPIO_Init+0x158>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b3b      	ldr	r3, [pc, #236]	; (80007f0 <MX_GPIO_Init+0x158>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	4b38      	ldr	r3, [pc, #224]	; (80007f0 <MX_GPIO_Init+0x158>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a37      	ldr	r2, [pc, #220]	; (80007f0 <MX_GPIO_Init+0x158>)
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b35      	ldr	r3, [pc, #212]	; (80007f0 <MX_GPIO_Init+0x158>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0308 	and.w	r3, r3, #8
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000726:	4b32      	ldr	r3, [pc, #200]	; (80007f0 <MX_GPIO_Init+0x158>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a31      	ldr	r2, [pc, #196]	; (80007f0 <MX_GPIO_Init+0x158>)
 800072c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <MX_GPIO_Init+0x158>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	482c      	ldr	r0, [pc, #176]	; (80007f4 <MX_GPIO_Init+0x15c>)
 8000744:	f002 fd3c 	bl	80031c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f244 0101 	movw	r1, #16385	; 0x4001
 800074e:	482a      	ldr	r0, [pc, #168]	; (80007f8 <MX_GPIO_Init+0x160>)
 8000750:	f002 fd36 	bl	80031c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2140      	movs	r1, #64	; 0x40
 8000758:	4828      	ldr	r0, [pc, #160]	; (80007fc <MX_GPIO_Init+0x164>)
 800075a:	f002 fd31 	bl	80031c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800075e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000764:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4822      	ldr	r0, [pc, #136]	; (8000800 <MX_GPIO_Init+0x168>)
 8000776:	f002 fb77 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800077a:	2320      	movs	r3, #32
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4818      	ldr	r0, [pc, #96]	; (80007f4 <MX_GPIO_Init+0x15c>)
 8000792:	f002 fb69 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000796:	f244 0301 	movw	r3, #16385	; 0x4001
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <MX_GPIO_Init+0x160>)
 80007b0:	f002 fb5a 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007b4:	2340      	movs	r3, #64	; 0x40
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	480c      	ldr	r0, [pc, #48]	; (80007fc <MX_GPIO_Init+0x164>)
 80007cc:	f002 fb4c 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_GPIO_Init+0x164>)
 80007e4:	f002 fb40 	bl	8002e68 <HAL_GPIO_Init>

}
 80007e8:	bf00      	nop
 80007ea:	3730      	adds	r7, #48	; 0x30
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40020400 	.word	0x40020400
 80007fc:	40021800 	.word	0x40021800
 8000800:	40020800 	.word	0x40020800

08000804 <_write>:
//PCD_HandleTypeDef hpcd_USB_OTG_FS;
extern UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	b29a      	uxth	r2, r3
 8000814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	4804      	ldr	r0, [pc, #16]	; (800082c <_write+0x28>)
 800081c:	f004 fa9e 	bl	8004d5c <HAL_UART_Transmit>
    return len;
 8000820:	687b      	ldr	r3, [r7, #4]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200007a0 	.word	0x200007a0

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000834:	f000 ff7d 	bl	8001732 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000838:	f000 f814 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083c:	f7ff ff2c 	bl	8000698 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000840:	f000 fccc 	bl	80011dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000844:	f000 fd9e 	bl	8001384 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 8000848:	f000 fc98 	bl	800117c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("hello rtos\n");
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <main+0x30>)
 800084e:	f014 fb0f 	bl	8014e70 <puts>
//  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  USER_THREADS();
 8000852:	f000 fa17 	bl	8000c84 <USER_THREADS>
  MX_FREERTOS_Init();
 8000856:	f7ff feef 	bl	8000638 <MX_FREERTOS_Init>


  /* Start scheduler */
  osKernelStart();
 800085a:	f006 f8d4 	bl	8006a06 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085e:	e7fe      	b.n	800085e <main+0x2e>
 8000860:	08015efc 	.word	0x08015efc

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2234      	movs	r2, #52	; 0x34
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f014 f98d 	bl	8014b92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000888:	f002 fe08 	bl	800349c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <SystemClock_Config+0xd0>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a28      	ldr	r2, [pc, #160]	; (8000934 <SystemClock_Config+0xd0>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <SystemClock_Config+0xd0>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008a4:	4b24      	ldr	r3, [pc, #144]	; (8000938 <SystemClock_Config+0xd4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008ac:	4a22      	ldr	r2, [pc, #136]	; (8000938 <SystemClock_Config+0xd4>)
 80008ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <SystemClock_Config+0xd4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ca:	2302      	movs	r3, #2
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008d4:	2304      	movs	r3, #4
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008d8:	23a8      	movs	r3, #168	; 0xa8
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008dc:	2302      	movs	r3, #2
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008e0:	2307      	movs	r3, #7
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fde5 	bl	80034bc <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008f8:	f000 f832 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	230f      	movs	r3, #15
 80008fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2302      	movs	r3, #2
 8000902:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000908:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800090c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800090e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000912:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	2105      	movs	r1, #5
 800091a:	4618      	mov	r0, r3
 800091c:	f003 f87c 	bl	8003a18 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000926:	f000 f81b 	bl	8000960 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3750      	adds	r7, #80	; 0x50
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d101      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800094e:	f000 fefd 	bl	800174c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40001000 	.word	0x40001000

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <HAL_MspInit+0x4c>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	210f      	movs	r1, #15
 80009a6:	f06f 0001 	mvn.w	r0, #1
 80009aa:	f000 ffcb 	bl	8001944 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08e      	sub	sp, #56	; 0x38
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009cc:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <HAL_InitTick+0xe0>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	4a32      	ldr	r2, [pc, #200]	; (8000a9c <HAL_InitTick+0xe0>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
 80009d8:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <HAL_InitTick+0xe0>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	f003 0310 	and.w	r3, r3, #16
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e4:	f107 0210 	add.w	r2, r7, #16
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4611      	mov	r1, r2
 80009ee:	4618      	mov	r0, r3
 80009f0:	f003 fa38 	bl	8003e64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009f4:	6a3b      	ldr	r3, [r7, #32]
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d103      	bne.n	8000a06 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009fe:	f003 fa09 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 8000a02:	6378      	str	r0, [r7, #52]	; 0x34
 8000a04:	e004      	b.n	8000a10 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a06:	f003 fa05 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <HAL_InitTick+0xe4>)
 8000a14:	fba2 2303 	umull	r2, r3, r2, r3
 8000a18:	0c9b      	lsrs	r3, r3, #18
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <HAL_InitTick+0xe8>)
 8000a20:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <HAL_InitTick+0xe8>)
 8000a26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a2a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a2c:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <HAL_InitTick+0xe8>)
 8000a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a30:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <HAL_InitTick+0xe8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <HAL_InitTick+0xe8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <HAL_InitTick+0xe8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a44:	4817      	ldr	r0, [pc, #92]	; (8000aa4 <HAL_InitTick+0xe8>)
 8000a46:	f003 fe67 	bl	8004718 <HAL_TIM_Base_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d11b      	bne.n	8000a90 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a58:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <HAL_InitTick+0xe8>)
 8000a5a:	f003 febf 	bl	80047dc <HAL_TIM_Base_Start_IT>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d111      	bne.n	8000a90 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a6c:	2036      	movs	r0, #54	; 0x36
 8000a6e:	f000 ff85 	bl	800197c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b0f      	cmp	r3, #15
 8000a76:	d808      	bhi.n	8000a8a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	2036      	movs	r0, #54	; 0x36
 8000a7e:	f000 ff61 	bl	8001944 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_InitTick+0xf0>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	e002      	b.n	8000a90 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3738      	adds	r7, #56	; 0x38
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	431bde83 	.word	0x431bde83
 8000aa4:	200006a8 	.word	0x200006a8
 8000aa8:	40001000 	.word	0x40001000
 8000aac:	20000004 	.word	0x20000004

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <UsageFault_Handler+0x4>

08000ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <TIM6_DAC_IRQHandler+0x10>)
 8000ae2:	f003 fef3 	bl	80048cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200006a8 	.word	0x200006a8

08000af0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <ETH_IRQHandler+0x10>)
 8000af6:	f001 fadd 	bl	80020b4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200056ec 	.word	0x200056ec

08000b04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return 1;
 8000b08:	2301      	movs	r3, #1
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <_kill>:

int _kill(int pid, int sig)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <_kill+0x20>)
 8000b20:	2216      	movs	r2, #22
 8000b22:	601a      	str	r2, [r3, #0]
  return -1;
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	20017be0 	.word	0x20017be0

08000b38 <_exit>:

void _exit (int status)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ffe5 	bl	8000b14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b4a:	e7fe      	b.n	8000b4a <_exit+0x12>

08000b4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	e00a      	b.n	8000b74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b5e:	f3af 8000 	nop.w
 8000b62:	4601      	mov	r1, r0
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	60ba      	str	r2, [r7, #8]
 8000b6a:	b2ca      	uxtb	r2, r1
 8000b6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dbf0      	blt.n	8000b5e <_read+0x12>
  }

  return len;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bae:	605a      	str	r2, [r3, #4]
  return 0;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <_isatty>:

int _isatty(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d205      	bcs.n	8000c2c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <_sbrk+0x6c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c2a:	e009      	b.n	8000c40 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <_sbrk+0x64>)
 8000c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	371c      	adds	r7, #28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	20080000 	.word	0x20080000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	200006f4 	.word	0x200006f4
 8000c58:	20017be8 	.word	0x20017be8
 8000c5c:	20017be0 	.word	0x20017be0

08000c60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <SystemInit+0x20>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <SystemInit+0x20>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <USER_THREADS>:
QueueHandle_t 	   sdata_qid;

/*-----------------------------------------------------------*/

void USER_THREADS( void )
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af02      	add	r7, sp, #8
#ifdef CMSIS_OS
	osThreadDef(defaultTask, TaskMain, osPriorityNormal, 0, 256);
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
#else
	/* Create one of the two tasks. */
	xTaskCreate(	(TaskFunction_t)mainTask,		/* Pointer to the function that implements the task. */
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <USER_THREADS+0x24>)
 8000c8c:	9301      	str	r3, [sp, #4]
 8000c8e:	2314      	movs	r3, #20
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	2300      	movs	r3, #0
 8000c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c98:	4904      	ldr	r1, [pc, #16]	; (8000cac <USER_THREADS+0x28>)
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <USER_THREADS+0x2c>)
 8000c9c:	f007 fb7d 	bl	800839a <xTaskCreate>
					256,		/* Stack depth - most small microcontrollers will use much less stack than this. */
					NULL,		/* We are not using the task parameter. */
					MAIN_PRIO,	/* This task will run at this priority */
					&xHandleMain );		/* We are not using the task handle. */
#endif
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200006f8 	.word	0x200006f8
 8000cac:	08015f08 	.word	0x08015f08
 8000cb0:	08000cb5 	.word	0x08000cb5

08000cb4 <mainTask>:
/*-----------------------------------------------------------*/

void mainTask( void *pvParameters )
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	6078      	str	r0, [r7, #4]
	/* TODO #1:
		create a event flag
	    use group_id */
	srand(time(NULL));
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f014 fa29 	bl	8015114 <time>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f014 f8d9 	bl	8014e80 <srand>
#if 1
	sync_id= xEventGroupCreate();
 8000cce:	f006 f90d 	bl	8006eec <xEventGroupCreate>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <mainTask+0xbc>)
 8000cd6:	6013      	str	r3, [r2, #0]
	if (sync_id == NULL) {
 8000cd8:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <mainTask+0xbc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <mainTask+0x32>
		printf("xEventGroupCreate error found\n");
 8000ce0:	4824      	ldr	r0, [pc, #144]	; (8000d74 <mainTask+0xc0>)
 8000ce2:	f014 f8c5 	bl	8014e70 <puts>
	}
	sdata_qid = xQueueCreate( QUEUE_LENGTH, QUEUE_ITEM_SIZE );
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	210c      	movs	r1, #12
 8000cea:	2005      	movs	r0, #5
 8000cec:	f006 fc40 	bl	8007570 <xQueueGenericCreate>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4a21      	ldr	r2, [pc, #132]	; (8000d78 <mainTask+0xc4>)
 8000cf4:	6013      	str	r3, [r2, #0]
	if (sdata_qid == NULL) printf("xQueueCreate error found\n");
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <mainTask+0xc4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d102      	bne.n	8000d04 <mainTask+0x50>
 8000cfe:	481f      	ldr	r0, [pc, #124]	; (8000d7c <mainTask+0xc8>)
 8000d00:	f014 f8b6 	bl	8014e70 <puts>
#endif // TODO #1

	/* Create the other task in exactly the same way. */
	xTaskCreate(	(TaskFunction_t)syncTask,		/* Pointer to the function that implements the task. */
 8000d04:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <mainTask+0xcc>)
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	2305      	movs	r3, #5
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d12:	491c      	ldr	r1, [pc, #112]	; (8000d84 <mainTask+0xd0>)
 8000d14:	481c      	ldr	r0, [pc, #112]	; (8000d88 <mainTask+0xd4>)
 8000d16:	f007 fb40 	bl	800839a <xTaskCreate>
					"syncTask",	/* Text name for the task.  This is to facilitate debugging only. */
					256,		/* Stack depth - most small microcontrollers will use much less stack than this. */
					NULL,		/* We are not using the task parameter. */
					SYNC_PRIO,	/* This task will run at this priority */
					&xHandleSync );		/* We are not using the task handle. */
	xTaskCreate(	(TaskFunction_t)gen1Task,		/* Pointer to the function that implements the task. */
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <mainTask+0xd8>)
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	2308      	movs	r3, #8
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d28:	4919      	ldr	r1, [pc, #100]	; (8000d90 <mainTask+0xdc>)
 8000d2a:	481a      	ldr	r0, [pc, #104]	; (8000d94 <mainTask+0xe0>)
 8000d2c:	f007 fb35 	bl	800839a <xTaskCreate>
					"gen1Task",	/* Text name for the task.  This is to facilitate debugging only. */
					256,		/* Stack depth - most small microcontrollers will use much less stack than this. */
					NULL,		/* We are not using the task parameter. */
					GEN1_PRIO,	/* This task will run at this priority */
					&xHandleGen1 );		/* We are not using the task handle. */
	xTaskCreate(	(TaskFunction_t)gen2Task,		/* Pointer to the function that implements the task. */
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <mainTask+0xe4>)
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	2308      	movs	r3, #8
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d3e:	4917      	ldr	r1, [pc, #92]	; (8000d9c <mainTask+0xe8>)
 8000d40:	4817      	ldr	r0, [pc, #92]	; (8000da0 <mainTask+0xec>)
 8000d42:	f007 fb2a 	bl	800839a <xTaskCreate>
					256,		/* Stack depth - most small microcontrollers will use much less stack than this. */
					NULL,		/* We are not using the task parameter. */
					GEN2_PRIO,	/* This task will run at this priority */
					&xHandleGen2 );		/* We are not using the task handle. */

	xTaskCreate(	(TaskFunction_t)rxTask,		/* Pointer to the function that implements the task. */
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <mainTask+0xf0>)
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2309      	movs	r3, #9
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d54:	4914      	ldr	r1, [pc, #80]	; (8000da8 <mainTask+0xf4>)
 8000d56:	4815      	ldr	r0, [pc, #84]	; (8000dac <mainTask+0xf8>)
 8000d58:	f007 fb1f 	bl	800839a <xTaskCreate>
					256,		/* Stack depth - most small microcontrollers will use much less stack than this. */
					NULL,		/* We are not using the task parameter. */
					RX_PRIO,	/* This task will run at this priority */
					&xHandleRx );		/* We are not using the task handle. */

	vTaskDelete (xHandleMain);
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <mainTask+0xfc>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f007 fc71 	bl	8008648 <vTaskDelete>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000070c 	.word	0x2000070c
 8000d74:	08015f14 	.word	0x08015f14
 8000d78:	20000714 	.word	0x20000714
 8000d7c:	08015f34 	.word	0x08015f34
 8000d80:	200006fc 	.word	0x200006fc
 8000d84:	08015f50 	.word	0x08015f50
 8000d88:	08000db5 	.word	0x08000db5
 8000d8c:	20000700 	.word	0x20000700
 8000d90:	08015f5c 	.word	0x08015f5c
 8000d94:	08000df9 	.word	0x08000df9
 8000d98:	20000704 	.word	0x20000704
 8000d9c:	08015f68 	.word	0x08015f68
 8000da0:	08000ea9 	.word	0x08000ea9
 8000da4:	20000708 	.word	0x20000708
 8000da8:	08015f74 	.word	0x08015f74
 8000dac:	08000f59 	.word	0x08000f59
 8000db0:	200006f8 	.word	0x200006f8

08000db4 <syncTask>:
/*-----------------------------------------------------------*/


void syncTask( void *pvParameters )
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	for(;;) {
#if 1
	printf("S "); fflush(stdout);
 8000dbc:	480a      	ldr	r0, [pc, #40]	; (8000de8 <syncTask+0x34>)
 8000dbe:	f013 ffd1 	bl	8014d64 <iprintf>
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <syncTask+0x38>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f013 fd7b 	bl	80148c4 <fflush>
	uxBits = xEventGroupSetBits(
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <syncTask+0x3c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f006 f979 	bl	80070cc <xEventGroupSetBits>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <syncTask+0x40>)
 8000dde:	6013      	str	r3, [r2, #0]
			sync_id, /* The event group being updated. */
			SYNC_SIGNAL_OK);/* The bits being set. */

#endif // TODO #2
	vTaskDelay (pdMS_TO_TICKS (100));
 8000de0:	2064      	movs	r0, #100	; 0x64
 8000de2:	f007 fcc3 	bl	800876c <vTaskDelay>
	printf("S "); fflush(stdout);
 8000de6:	e7e9      	b.n	8000dbc <syncTask+0x8>
 8000de8:	08015f7c 	.word	0x08015f7c
 8000dec:	20000030 	.word	0x20000030
 8000df0:	2000070c 	.word	0x2000070c
 8000df4:	20000710 	.word	0x20000710

08000df8 <gen1Task>:
}



void gen1Task( void *pvParameters )
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af02      	add	r7, sp, #8
 8000dfe:	6078      	str	r0, [r7, #4]
	//EventBits_t uxBits;

	/* Print out the name of this task. */
	//TickType_t = uint32_t
	SensorData sensor1_data;
	sensor1_data.info = 1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]

	for(;;) {
#if 1
	uxBits = xEventGroupWaitBits(sync_id	  ,
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <gen1Task+0x94>)
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	2201      	movs	r2, #1
 8000e12:	2101      	movs	r1, #1
 8000e14:	f006 f884 	bl	8006f20 <xEventGroupWaitBits>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4a1d      	ldr	r2, [pc, #116]	; (8000e90 <gen1Task+0x98>)
 8000e1c:	6013      	str	r3, [r2, #0]
								SYNC_SIGNAL_OK,
								pdTRUE	      ,
								pdFALSE	      ,
								portMAX_DELAY);
	if((uxBits & SYNC_SIGNAL_OK) == SYNC_SIGNAL_OK) {
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <gen1Task+0x98>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0ec      	beq.n	8000e04 <gen1Task+0xc>
		printf("* ");fflush(stdout);
 8000e2a:	481a      	ldr	r0, [pc, #104]	; (8000e94 <gen1Task+0x9c>)
 8000e2c:	f013 ff9a 	bl	8014d64 <iprintf>
 8000e30:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <gen1Task+0xa0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f013 fd44 	bl	80148c4 <fflush>
		//send Queue, info(1 or 2), time, distance
		sensor1_data.time = xTaskGetTickCount();
 8000e3c:	f007 fde6 	bl	8008a0c <xTaskGetTickCount>
 8000e40:	4603      	mov	r3, r0
 8000e42:	613b      	str	r3, [r7, #16]
		sensor1_data.data = rand()%101;
 8000e44:	f014 f84a 	bl	8014edc <rand>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <gen1Task+0xa4>)
 8000e4c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e50:	1119      	asrs	r1, r3, #4
 8000e52:	17d3      	asrs	r3, r2, #31
 8000e54:	1acb      	subs	r3, r1, r3
 8000e56:	2165      	movs	r1, #101	; 0x65
 8000e58:	fb01 f303 	mul.w	r3, r1, r3
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	617b      	str	r3, [r7, #20]
		if(xQueueSendToBack(sdata_qid, &sensor1_data,10) != pdPASS )
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <gen1Task+0xa8>)
 8000e62:	6818      	ldr	r0, [r3, #0]
 8000e64:	f107 010c 	add.w	r1, r7, #12
 8000e68:	2300      	movs	r3, #0
 8000e6a:	220a      	movs	r2, #10
 8000e6c:	f006 fc2e 	bl	80076cc <xQueueGenericSend>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d0c6      	beq.n	8000e04 <gen1Task+0xc>
		{
			printf("1sF\n");fflush(stdout);
 8000e76:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <gen1Task+0xac>)
 8000e78:	f013 fffa 	bl	8014e70 <puts>
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <gen1Task+0xa0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f013 fd1e 	bl	80148c4 <fflush>
	uxBits = xEventGroupWaitBits(sync_id	  ,
 8000e88:	e7bc      	b.n	8000e04 <gen1Task+0xc>
 8000e8a:	bf00      	nop
 8000e8c:	2000070c 	.word	0x2000070c
 8000e90:	20000710 	.word	0x20000710
 8000e94:	08015f80 	.word	0x08015f80
 8000e98:	20000030 	.word	0x20000030
 8000e9c:	288df0cb 	.word	0x288df0cb
 8000ea0:	20000714 	.word	0x20000714
 8000ea4:	08015f84 	.word	0x08015f84

08000ea8 <gen2Task>:
	}
}


void gen2Task( void *pvParameters )
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	6078      	str	r0, [r7, #4]
	SensorData sensor2_data;
	sensor2_data.info = 2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	60fb      	str	r3, [r7, #12]
	for(;;) {
#if 1
	uxBits = xEventGroupWaitBits(sync_id	  ,
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <gen2Task+0x94>)
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	f006 f82c 	bl	8006f20 <xEventGroupWaitBits>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <gen2Task+0x98>)
 8000ecc:	6013      	str	r3, [r2, #0]
								SYNC_SIGNAL_OK,
								pdTRUE	      ,
								pdFALSE	      ,
								portMAX_DELAY);

		if((uxBits & SYNC_SIGNAL_OK) == SYNC_SIGNAL_OK) {
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <gen2Task+0x98>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0ec      	beq.n	8000eb4 <gen2Task+0xc>
			//			vTaskDelay(pdMS_TO_TICKS(500));
			// send Queue
			printf(". ");fflush(stdout);
 8000eda:	481a      	ldr	r0, [pc, #104]	; (8000f44 <gen2Task+0x9c>)
 8000edc:	f013 ff42 	bl	8014d64 <iprintf>
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <gen2Task+0xa0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f013 fcec 	bl	80148c4 <fflush>
			sensor2_data.time = xTaskGetTickCount();
 8000eec:	f007 fd8e 	bl	8008a0c <xTaskGetTickCount>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	613b      	str	r3, [r7, #16]
			sensor2_data.data = rand()%101;
 8000ef4:	f013 fff2 	bl	8014edc <rand>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <gen2Task+0xa4>)
 8000efc:	fb83 1302 	smull	r1, r3, r3, r2
 8000f00:	1119      	asrs	r1, r3, #4
 8000f02:	17d3      	asrs	r3, r2, #31
 8000f04:	1acb      	subs	r3, r1, r3
 8000f06:	2165      	movs	r1, #101	; 0x65
 8000f08:	fb01 f303 	mul.w	r3, r1, r3
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
			if(xQueueSendToBack(sdata_qid, &sensor2_data,10) != pdPASS)
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <gen2Task+0xa8>)
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	f107 010c 	add.w	r1, r7, #12
 8000f18:	2300      	movs	r3, #0
 8000f1a:	220a      	movs	r2, #10
 8000f1c:	f006 fbd6 	bl	80076cc <xQueueGenericSend>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d0c6      	beq.n	8000eb4 <gen2Task+0xc>
			{
				printf("2sF\n");fflush(stdout);
 8000f26:	480b      	ldr	r0, [pc, #44]	; (8000f54 <gen2Task+0xac>)
 8000f28:	f013 ffa2 	bl	8014e70 <puts>
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <gen2Task+0xa0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f013 fcc6 	bl	80148c4 <fflush>
	uxBits = xEventGroupWaitBits(sync_id	  ,
 8000f38:	e7bc      	b.n	8000eb4 <gen2Task+0xc>
 8000f3a:	bf00      	nop
 8000f3c:	2000070c 	.word	0x2000070c
 8000f40:	20000710 	.word	0x20000710
 8000f44:	08015f88 	.word	0x08015f88
 8000f48:	20000030 	.word	0x20000030
 8000f4c:	288df0cb 	.word	0x288df0cb
 8000f50:	20000714 	.word	0x20000714
 8000f54:	08015f8c 	.word	0x08015f8c

08000f58 <rxTask>:

#endif
	}
}

void rxTask(void *pvParameters){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b0a8      	sub	sp, #160	; 0xa0
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	6078      	str	r0, [r7, #4]
	char str[100];
	int		   time_diff;
	int 	   min_dis_info;

	for(;;){
		if(uxQueueMessagesWaiting(sdata_qid) >= 2){
 8000f60:	4b4c      	ldr	r3, [pc, #304]	; (8001094 <rxTask+0x13c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f007 f86d 	bl	8008044 <uxQueueMessagesWaiting>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	f240 808c 	bls.w	800108a <rxTask+0x132>
			if(xQueueReceive(sdata_qid, &s1, portMAX_DELAY)!=pdPASS){
 8000f72:	4b48      	ldr	r3, [pc, #288]	; (8001094 <rxTask+0x13c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000f7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f006 fde0 	bl	8007b44 <xQueueReceive>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d008      	beq.n	8000f9c <rxTask+0x44>
				printf("frF\n");fflush(stdout);
 8000f8a:	4843      	ldr	r0, [pc, #268]	; (8001098 <rxTask+0x140>)
 8000f8c:	f013 ff70 	bl	8014e70 <puts>
 8000f90:	4b42      	ldr	r3, [pc, #264]	; (800109c <rxTask+0x144>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f013 fc94 	bl	80148c4 <fflush>
			}
			if(xQueueReceive(sdata_qid, &s2, portMAX_DELAY)!=pdPASS){
 8000f9c:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <rxTask+0x13c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f006 fdcb 	bl	8007b44 <xQueueReceive>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d008      	beq.n	8000fc6 <rxTask+0x6e>
				printf("srF\n");fflush(stdout);
 8000fb4:	483a      	ldr	r0, [pc, #232]	; (80010a0 <rxTask+0x148>)
 8000fb6:	f013 ff5b 	bl	8014e70 <puts>
 8000fba:	4b38      	ldr	r3, [pc, #224]	; (800109c <rxTask+0x144>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f013 fc7f 	bl	80148c4 <fflush>
			}
		// sensor matching
		if(s1.info == 1){
 8000fc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d108      	bne.n	8000fde <rxTask+0x86>
			ps1 = &s1;
 8000fcc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			ps2 = &s2;
 8000fd4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000fdc:	e007      	b.n	8000fee <rxTask+0x96>
		}else{
			ps1 = &s2;
 8000fde:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			ps2 = &s1;
 8000fe6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		}
		// smaller distance value sensor info
		if(ps1->data - ps2->data >= 0){
 8000fee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0f      	blt.n	8001020 <rxTask+0xc8>
			if(ps1->data == ps2->data) min_dis_info = 0;
 8001000:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	429a      	cmp	r2, r3
 800100e:	d103      	bne.n	8001018 <rxTask+0xc0>
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001016:	e006      	b.n	8001026 <rxTask+0xce>
			else 					   min_dis_info = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800101e:	e002      	b.n	8001026 <rxTask+0xce>
		}else{
			min_dis_info = 1;
 8001020:	2301      	movs	r3, #1
 8001022:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		}
		// time diff calculate(tickcount)
		time_diff = (ps1->time >= ps2->time) ? (ps1->time - ps2->time) : (ps2->time - ps1->time);
 8001026:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	d307      	bcc.n	8001046 <rxTask+0xee>
 8001036:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	e006      	b.n	8001054 <rxTask+0xfc>
 8001046:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		sprintf(str,"%d / %d / %d -> %d\n\r",time_diff, ps1->data, ps2->data, min_dis_info);
 8001058:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800105c:	6899      	ldr	r1, [r3, #8]
 800105e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f107 000c 	add.w	r0, r7, #12
 8001068:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800106c:	9201      	str	r2, [sp, #4]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	460b      	mov	r3, r1
 8001072:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001076:	490b      	ldr	r1, [pc, #44]	; (80010a4 <rxTask+0x14c>)
 8001078:	f013 ffe8 	bl	801504c <siprintf>
		printf("%s",str);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4619      	mov	r1, r3
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <rxTask+0x150>)
 8001084:	f013 fe6e 	bl	8014d64 <iprintf>
 8001088:	e76a      	b.n	8000f60 <rxTask+0x8>
		}
		else{
			vTaskDelay(pdMS_TO_TICKS(100));
 800108a:	2064      	movs	r0, #100	; 0x64
 800108c:	f007 fb6e 	bl	800876c <vTaskDelay>
		if(uxQueueMessagesWaiting(sdata_qid) >= 2){
 8001090:	e766      	b.n	8000f60 <rxTask+0x8>
 8001092:	bf00      	nop
 8001094:	20000714 	.word	0x20000714
 8001098:	08015f90 	.word	0x08015f90
 800109c:	20000030 	.word	0x20000030
 80010a0:	08015f94 	.word	0x08015f94
 80010a4:	08015f98 	.word	0x08015f98
 80010a8:	08015fb0 	.word	0x08015fb0

080010ac <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 80010b2:	f010 fe91 	bl	8011dd8 <udp_new>
 80010b6:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d013      	beq.n	80010e6 <udp_echoserver_init+0x3a>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 80010be:	2207      	movs	r2, #7
 80010c0:	490b      	ldr	r1, [pc, #44]	; (80010f0 <udp_echoserver_init+0x44>)
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f010 fd9e 	bl	8011c04 <udp_bind>
 80010c8:	4603      	mov	r3, r0
 80010ca:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 80010cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d105      	bne.n	80010e0 <udp_echoserver_init+0x34>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 80010d4:	2200      	movs	r2, #0
 80010d6:	4907      	ldr	r1, [pc, #28]	; (80010f4 <udp_echoserver_init+0x48>)
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f010 fe1b 	bl	8011d14 <udp_recv>
      else
      {
        udp_remove(upcb);
      }
   }
}
 80010de:	e002      	b.n	80010e6 <udp_echoserver_init+0x3a>
        udp_remove(upcb);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f010 fe37 	bl	8011d54 <udp_remove>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	08018c90 	.word	0x08018c90
 80010f4:	080010f9 	.word	0x080010f9

080010f8 <udp_echoserver_receive_callback>:
//  pbuf_free(p);
//
//}

void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	603b      	str	r3, [r7, #0]
    printf("udp_echoserver_receive_callback\n");
 8001106:	4819      	ldr	r0, [pc, #100]	; (800116c <udp_echoserver_receive_callback+0x74>)
 8001108:	f013 feb2 	bl	8014e70 <puts>

    if (p != NULL) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d028      	beq.n	8001164 <udp_echoserver_receive_callback+0x6c>
        /* 수신된 데이터 터미널(UART) 출력 */
        printf("Received UDP packet from %s:%d\n", ipaddr_ntoa(addr), port);
 8001112:	6838      	ldr	r0, [r7, #0]
 8001114:	f012 fa5a 	bl	80135cc <ip4addr_ntoa>
 8001118:	4601      	mov	r1, r0
 800111a:	8c3b      	ldrh	r3, [r7, #32]
 800111c:	461a      	mov	r2, r3
 800111e:	4814      	ldr	r0, [pc, #80]	; (8001170 <udp_echoserver_receive_callback+0x78>)
 8001120:	f013 fe20 	bl	8014d64 <iprintf>
        printf("Data (%d bytes): %.*s\n", p->len, p->len, (char *)p->payload);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	895b      	ldrh	r3, [r3, #10]
 8001128:	4619      	mov	r1, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	895b      	ldrh	r3, [r3, #10]
 800112e:	461a      	mov	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	480f      	ldr	r0, [pc, #60]	; (8001174 <udp_echoserver_receive_callback+0x7c>)
 8001136:	f013 fe15 	bl	8014d64 <iprintf>

        /* UDP 응답 보내기 */
        err_t err = udp_sendto(upcb, p, addr, port);
 800113a:	8c3b      	ldrh	r3, [r7, #32]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	68b8      	ldr	r0, [r7, #8]
 8001142:	f010 fba9 	bl	8011898 <udp_sendto>
 8001146:	4603      	mov	r3, r0
 8001148:	75fb      	strb	r3, [r7, #23]
        if (err != ERR_OK) {
 800114a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <udp_echoserver_receive_callback+0x66>
            printf("udp_sendto failed! Error code: %d\n", err);
 8001152:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001156:	4619      	mov	r1, r3
 8001158:	4807      	ldr	r0, [pc, #28]	; (8001178 <udp_echoserver_receive_callback+0x80>)
 800115a:	f013 fe03 	bl	8014d64 <iprintf>
        }

        /* 수신된 패킷 메모리 해제 */
        pbuf_free(p);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f00a fc58 	bl	800ba14 <pbuf_free>
    }
}
 8001164:	bf00      	nop
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	08015fb4 	.word	0x08015fb4
 8001170:	08015fd4 	.word	0x08015fd4
 8001174:	08015ff4 	.word	0x08015ff4
 8001178:	0801600c 	.word	0x0801600c

0800117c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 8001182:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <MX_USART1_UART_Init+0x5c>)
 8001184:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 80011c0:	f003 fd7e 	bl	8004cc0 <HAL_UART_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011ca:	f7ff fbc9 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000718 	.word	0x20000718
 80011d8:	40011000 	.word	0x40011000

080011dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_USART3_UART_Init+0x58>)
 80011e2:	4a15      	ldr	r2, [pc, #84]	; (8001238 <MX_USART3_UART_Init+0x5c>)
 80011e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_USART3_UART_Init+0x58>)
 80011e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_USART3_UART_Init+0x58>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_USART3_UART_Init+0x58>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_USART3_UART_Init+0x58>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_USART3_UART_Init+0x58>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_USART3_UART_Init+0x58>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_USART3_UART_Init+0x58>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_USART3_UART_Init+0x58>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_USART3_UART_Init+0x58>)
 800121a:	2200      	movs	r2, #0
 800121c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_USART3_UART_Init+0x58>)
 8001220:	f003 fd4e 	bl	8004cc0 <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800122a:	f7ff fb99 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200007a0 	.word	0x200007a0
 8001238:	40004800 	.word	0x40004800

0800123c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0b0      	sub	sp, #192	; 0xc0
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	2290      	movs	r2, #144	; 0x90
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f013 fc98 	bl	8014b92 <memset>
  if(uartHandle->Instance==USART1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a42      	ldr	r2, [pc, #264]	; (8001370 <HAL_UART_MspInit+0x134>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d13b      	bne.n	80012e4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800126c:	2340      	movs	r3, #64	; 0x40
 800126e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001270:	2300      	movs	r3, #0
 8001272:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4618      	mov	r0, r3
 800127a:	f002 fe25 	bl	8003ec8 <HAL_RCCEx_PeriphCLKConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001284:	f7ff fb6c 	bl	8000960 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001288:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <HAL_UART_MspInit+0x138>)
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	4a39      	ldr	r2, [pc, #228]	; (8001374 <HAL_UART_MspInit+0x138>)
 800128e:	f043 0310 	orr.w	r3, r3, #16
 8001292:	6453      	str	r3, [r2, #68]	; 0x44
 8001294:	4b37      	ldr	r3, [pc, #220]	; (8001374 <HAL_UART_MspInit+0x138>)
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	4b34      	ldr	r3, [pc, #208]	; (8001374 <HAL_UART_MspInit+0x138>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	4a33      	ldr	r2, [pc, #204]	; (8001374 <HAL_UART_MspInit+0x138>)
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	6313      	str	r3, [r2, #48]	; 0x30
 80012ac:	4b31      	ldr	r3, [pc, #196]	; (8001374 <HAL_UART_MspInit+0x138>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012b8:	23c0      	movs	r3, #192	; 0xc0
 80012ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012d0:	2307      	movs	r3, #7
 80012d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012da:	4619      	mov	r1, r3
 80012dc:	4826      	ldr	r0, [pc, #152]	; (8001378 <HAL_UART_MspInit+0x13c>)
 80012de:	f001 fdc3 	bl	8002e68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012e2:	e041      	b.n	8001368 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART3)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a24      	ldr	r2, [pc, #144]	; (800137c <HAL_UART_MspInit+0x140>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d13c      	bne.n	8001368 <HAL_UART_MspInit+0x12c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 fde3 	bl	8003ec8 <HAL_RCCEx_PeriphCLKConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001308:	f7ff fb2a 	bl	8000960 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_UART_MspInit+0x138>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a18      	ldr	r2, [pc, #96]	; (8001374 <HAL_UART_MspInit+0x138>)
 8001312:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_UART_MspInit+0x138>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_UART_MspInit+0x138>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	4a12      	ldr	r2, [pc, #72]	; (8001374 <HAL_UART_MspInit+0x138>)
 800132a:	f043 0308 	orr.w	r3, r3, #8
 800132e:	6313      	str	r3, [r2, #48]	; 0x30
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_UART_MspInit+0x138>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800133c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001350:	2303      	movs	r3, #3
 8001352:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001356:	2307      	movs	r3, #7
 8001358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001360:	4619      	mov	r1, r3
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <HAL_UART_MspInit+0x144>)
 8001364:	f001 fd80 	bl	8002e68 <HAL_GPIO_Init>
}
 8001368:	bf00      	nop
 800136a:	37c0      	adds	r7, #192	; 0xc0
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40011000 	.word	0x40011000
 8001374:	40023800 	.word	0x40023800
 8001378:	40020400 	.word	0x40020400
 800137c:	40004800 	.word	0x40004800
 8001380:	40020c00 	.word	0x40020c00

08001384 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800138a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800138e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001392:	2206      	movs	r2, #6
 8001394:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001398:	2202      	movs	r2, #2
 800139a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a4:	2202      	movs	r2, #2
 80013a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013bc:	2201      	movs	r2, #1
 80013be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c8:	f001 ff2d 	bl	8003226 <HAL_PCD_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013d2:	f7ff fac5 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000828 	.word	0x20000828

080013e0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b0ae      	sub	sp, #184	; 0xb8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2290      	movs	r2, #144	; 0x90
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f013 fbc6 	bl	8014b92 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800140e:	d159      	bne.n	80014c4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001410:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001414:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4618      	mov	r0, r3
 8001422:	f002 fd51 	bl	8003ec8 <HAL_RCCEx_PeriphCLKConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800142c:	f7ff fa98 	bl	8000960 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b26      	ldr	r3, [pc, #152]	; (80014cc <HAL_PCD_MspInit+0xec>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	4a25      	ldr	r2, [pc, #148]	; (80014cc <HAL_PCD_MspInit+0xec>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6313      	str	r3, [r2, #48]	; 0x30
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <HAL_PCD_MspInit+0xec>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001448:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800144c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001462:	230a      	movs	r3, #10
 8001464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800146c:	4619      	mov	r1, r3
 800146e:	4818      	ldr	r0, [pc, #96]	; (80014d0 <HAL_PCD_MspInit+0xf0>)
 8001470:	f001 fcfa 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001474:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001478:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800148c:	4619      	mov	r1, r3
 800148e:	4810      	ldr	r0, [pc, #64]	; (80014d0 <HAL_PCD_MspInit+0xf0>)
 8001490:	f001 fcea 	bl	8002e68 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_PCD_MspInit+0xec>)
 8001496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001498:	4a0c      	ldr	r2, [pc, #48]	; (80014cc <HAL_PCD_MspInit+0xec>)
 800149a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149e:	6353      	str	r3, [r2, #52]	; 0x34
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_PCD_MspInit+0xec>)
 80014a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <HAL_PCD_MspInit+0xec>)
 80014ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b0:	4a06      	ldr	r2, [pc, #24]	; (80014cc <HAL_PCD_MspInit+0xec>)
 80014b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b6:	6453      	str	r3, [r2, #68]	; 0x44
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <HAL_PCD_MspInit+0xec>)
 80014ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80014c4:	bf00      	nop
 80014c6:	37b8      	adds	r7, #184	; 0xb8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800150c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014d8:	f7ff fbc2 	bl	8000c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	; (8001514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	; (8001520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001502:	f013 fae7 	bl	8014ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff f993 	bl	8000830 <main>
  bx  lr    
 800150a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800150c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001518:	08018e04 	.word	0x08018e04
  ldr r2, =_sbss
 800151c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001520:	20017be4 	.word	0x20017be4

08001524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC_IRQHandler>

08001526 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00b      	beq.n	800154e <LAN8742_RegisterBusIO+0x28>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d007      	beq.n	800154e <LAN8742_RegisterBusIO+0x28>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <LAN8742_RegisterBusIO+0x28>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d102      	bne.n	8001554 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001552:	e014      	b.n	800157e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d139      	bne.n	800161a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2220      	movs	r2, #32
 80015b8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e01c      	b.n	80015fa <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	f107 020c 	add.w	r2, r7, #12
 80015c8:	2112      	movs	r1, #18
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	4798      	blx	r3
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	da03      	bge.n	80015dc <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80015d4:	f06f 0304 	mvn.w	r3, #4
 80015d8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80015da:	e00b      	b.n	80015f4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 031f 	and.w	r3, r3, #31
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d105      	bne.n	80015f4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
         break;
 80015f2:	e005      	b.n	8001600 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3301      	adds	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b1f      	cmp	r3, #31
 80015fe:	d9df      	bls.n	80015c0 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b1f      	cmp	r3, #31
 8001606:	d902      	bls.n	800160e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001608:	f06f 0302 	mvn.w	r3, #2
 800160c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800161a:	693b      	ldr	r3, [r7, #16]
 }
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6810      	ldr	r0, [r2, #0]
 8001638:	f107 020c 	add.w	r2, r7, #12
 800163c:	2101      	movs	r1, #1
 800163e:	4798      	blx	r3
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	da02      	bge.n	800164c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001646:	f06f 0304 	mvn.w	r3, #4
 800164a:	e06e      	b.n	800172a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6810      	ldr	r0, [r2, #0]
 8001654:	f107 020c 	add.w	r2, r7, #12
 8001658:	2101      	movs	r1, #1
 800165a:	4798      	blx	r3
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	da02      	bge.n	8001668 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001662:	f06f 0304 	mvn.w	r3, #4
 8001666:	e060      	b.n	800172a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001672:	2301      	movs	r3, #1
 8001674:	e059      	b.n	800172a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6810      	ldr	r0, [r2, #0]
 800167e:	f107 020c 	add.w	r2, r7, #12
 8001682:	2100      	movs	r1, #0
 8001684:	4798      	blx	r3
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	da02      	bge.n	8001692 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800168c:	f06f 0304 	mvn.w	r3, #4
 8001690:	e04b      	b.n	800172a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d11b      	bne.n	80016d4 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <LAN8742_GetLinkState+0x90>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80016b0:	2302      	movs	r3, #2
 80016b2:	e03a      	b.n	800172a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80016be:	2303      	movs	r3, #3
 80016c0:	e033      	b.n	800172a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80016cc:	2304      	movs	r3, #4
 80016ce:	e02c      	b.n	800172a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80016d0:	2305      	movs	r3, #5
 80016d2:	e02a      	b.n	800172a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6810      	ldr	r0, [r2, #0]
 80016dc:	f107 020c 	add.w	r2, r7, #12
 80016e0:	211f      	movs	r1, #31
 80016e2:	4798      	blx	r3
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	da02      	bge.n	80016f0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80016ea:	f06f 0304 	mvn.w	r3, #4
 80016ee:	e01c      	b.n	800172a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80016fa:	2306      	movs	r3, #6
 80016fc:	e015      	b.n	800172a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f003 031c 	and.w	r3, r3, #28
 8001704:	2b18      	cmp	r3, #24
 8001706:	d101      	bne.n	800170c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001708:	2302      	movs	r3, #2
 800170a:	e00e      	b.n	800172a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 031c 	and.w	r3, r3, #28
 8001712:	2b08      	cmp	r3, #8
 8001714:	d101      	bne.n	800171a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001716:	2303      	movs	r3, #3
 8001718:	e007      	b.n	800172a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f003 031c 	and.w	r3, r3, #28
 8001720:	2b14      	cmp	r3, #20
 8001722:	d101      	bne.n	8001728 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001724:	2304      	movs	r3, #4
 8001726:	e000      	b.n	800172a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001728:	2305      	movs	r3, #5
    }
  }
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001736:	2003      	movs	r0, #3
 8001738:	f000 f8f9 	bl	800192e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173c:	200f      	movs	r0, #15
 800173e:	f7ff f93d 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001742:	f7ff f913 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008
 8001770:	20000d08 	.word	0x20000d08

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000d08 	.word	0x20000d08

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_Delay+0x44>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <__NVIC_SetPriorityGrouping+0x40>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001802:	4a04      	ldr	r2, [pc, #16]	; (8001814 <__NVIC_SetPriorityGrouping+0x40>)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	60d3      	str	r3, [r2, #12]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00
 8001818:	05fa0000 	.word	0x05fa0000

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ff4c 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001956:	f7ff ff61 	bl	800181c <__NVIC_GetPriorityGrouping>
 800195a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	6978      	ldr	r0, [r7, #20]
 8001962:	f7ff ffb1 	bl	80018c8 <NVIC_EncodePriority>
 8001966:	4602      	mov	r2, r0
 8001968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff ff80 	bl	8001874 <__NVIC_SetPriority>
}
 8001974:	bf00      	nop
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff54 	bl	8001838 <__NVIC_EnableIRQ>
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e086      	b.n	8001ab8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d106      	bne.n	80019c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2223      	movs	r2, #35	; 0x23
 80019b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f004 fddf 	bl	8006580 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	4b3f      	ldr	r3, [pc, #252]	; (8001ac0 <HAL_ETH_Init+0x128>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	4a3e      	ldr	r2, [pc, #248]	; (8001ac0 <HAL_ETH_Init+0x128>)
 80019c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019cc:	6453      	str	r3, [r2, #68]	; 0x44
 80019ce:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <HAL_ETH_Init+0x128>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019da:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <HAL_ETH_Init+0x12c>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4a39      	ldr	r2, [pc, #228]	; (8001ac4 <HAL_ETH_Init+0x12c>)
 80019e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019e4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019e6:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <HAL_ETH_Init+0x12c>)
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	4935      	ldr	r1, [pc, #212]	; (8001ac4 <HAL_ETH_Init+0x12c>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80019f4:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <HAL_ETH_Init+0x12c>)
 80019f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a10:	f7ff feb0 	bl	8001774 <HAL_GetTick>
 8001a14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a16:	e011      	b.n	8001a3c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a18:	f7ff feac 	bl	8001774 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a26:	d909      	bls.n	8001a3c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	22e0      	movs	r2, #224	; 0xe0
 8001a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e03d      	b.n	8001ab8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1e4      	bne.n	8001a18 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 ff4e 	bl	80028f0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 fff9 	bl	8002a4c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f001 f84f 	bl	8002afe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	461a      	mov	r2, r3
 8001a66:	2100      	movs	r1, #0
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 ffb7 	bl	80029dc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001a7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_ETH_Init+0x130>)
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001aa2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2210      	movs	r2, #16
 8001ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40013800 	.word	0x40013800
 8001ac8:	00020060 	.word	0x00020060

08001acc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ada:	2b10      	cmp	r3, #16
 8001adc:	d15f      	bne.n	8001b9e <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2223      	movs	r2, #35	; 0x23
 8001ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2204      	movs	r2, #4
 8001af0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f9f6 	bl	8001ee4 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b00:	2001      	movs	r0, #1
 8001b02:	f7ff fe43 	bl	800178c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b24:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b3c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fd73 	bl	800262a <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0208 	orr.w	r2, r2, #8
 8001b52:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f7ff fe15 	bl	800178c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0204 	orr.w	r2, r2, #4
 8001b78:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b82:	69d9      	ldr	r1, [r3, #28]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <HAL_ETH_Start_IT+0xdc>)
 8001b8a:	430b      	orrs	r3, r1
 8001b8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b90:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2223      	movs	r2, #35	; 0x23
 8001b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e000      	b.n	8001ba0 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
  }
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	0001a0c1 	.word	0x0001a0c1

08001bac <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bba:	2b23      	cmp	r3, #35	; 0x23
 8001bbc:	d16e      	bne.n	8001c9c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2223      	movs	r2, #35	; 0x23
 8001bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bce:	69d9      	ldr	r1, [r3, #28]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <HAL_ETH_Stop_IT+0xfc>)
 8001bd6:	400b      	ands	r3, r1
 8001bd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bdc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bf0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bf4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	f023 0302 	bic.w	r3, r3, #2
 8001c08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c0c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0204 	bic.w	r2, r2, #4
 8001c1c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f7ff fdb0 	bl	800178c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 fcf8 	bl	800262a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0208 	bic.w	r2, r2, #8
 8001c48:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c52:	2001      	movs	r0, #1
 8001c54:	f7ff fd9a 	bl	800178c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	e00e      	b.n	8001c84 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	3212      	adds	r2, #18
 8001c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c70:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d9ed      	bls.n	8001c66 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2210      	movs	r2, #16
 8001c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e000      	b.n	8001c9e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
  }
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	fffe5f3e 	.word	0xfffe5f3e

08001cac <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc2:	f043 0201 	orr.w	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e045      	b.n	8001d5c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cd6:	2b23      	cmp	r3, #35	; 0x23
 8001cd8:	d13f      	bne.n	8001d5a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	6839      	ldr	r1, [r7, #0]
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 ff78 	bl	8002bdc <ETH_Prepare_Tx_Descriptors>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf8:	f043 0202 	orr.w	r2, r3, #2
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e02a      	b.n	8001d5c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d06:	f3bf 8f4f 	dsb	sy
}
 8001d0a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d904      	bls.n	8001d28 <HAL_ETH_Transmit_IT+0x7c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	1f1a      	subs	r2, r3, #4
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00d      	beq.n	8001d56 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d42:	461a      	mov	r2, r3
 8001d44:	2304      	movs	r3, #4
 8001d46:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d50:	461a      	mov	r2, r3
 8001d52:	2300      	movs	r3, #0
 8001d54:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e000      	b.n	8001d5c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
  }
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	f043 0201 	orr.w	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0a4      	b.n	8001eda <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d96:	2b23      	cmp	r3, #35	; 0x23
 8001d98:	d001      	beq.n	8001d9e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e09d      	b.n	8001eda <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	3212      	adds	r2, #18
 8001daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dae:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001db4:	f1c3 0304 	rsb	r3, r3, #4
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001dba:	e066      	b.n	8001e8a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	69da      	ldr	r2, [r3, #28]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d103      	bne.n	8001dec <HAL_ETH_ReadData+0x88>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d03c      	beq.n	8001e66 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	0c1b      	lsrs	r3, r3, #16
 8001e0a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001e0e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001e24:	2301      	movs	r3, #1
 8001e26:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001e40:	461a      	mov	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	f004 fd67 	bl	8006918 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	441a      	add	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	2200      	movs	r2, #0
 8001e64:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d902      	bls.n	8001e78 <HAL_ETH_ReadData+0x114>
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3b04      	subs	r3, #4
 8001e76:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	3212      	adds	r2, #18
 8001e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e82:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	3301      	adds	r3, #1
 8001e88:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	db06      	blt.n	8001ea0 <HAL_ETH_ReadData+0x13c>
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d202      	bcs.n	8001ea0 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001e9a:	7cfb      	ldrb	r3, [r7, #19]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d08d      	beq.n	8001dbc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	441a      	add	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f815 	bl	8001ee4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001ec0:	7cfb      	ldrb	r3, [r7, #19]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d108      	bne.n	8001ed8 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e000      	b.n	8001eda <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ef8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69fa      	ldr	r2, [r7, #28]
 8001efe:	3212      	adds	r2, #18
 8001f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f04:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f0a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001f0c:	e042      	b.n	8001f94 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d112      	bne.n	8001f3c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001f16:	f107 0308 	add.w	r3, r7, #8
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 fccc 	bl	80068b8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d102      	bne.n	8001f2c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	74fb      	strb	r3, [r7, #19]
 8001f2a:	e007      	b.n	8001f3c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	461a      	mov	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001f3c:	7cfb      	ldrb	r3, [r7, #19]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d028      	beq.n	8001f94 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d106      	bne.n	8001f58 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <ETH_UpdateDescriptor+0x104>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	6053      	str	r3, [r2, #4]
 8001f56:	e005      	b.n	8001f64 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	3301      	adds	r3, #1
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d902      	bls.n	8001f82 <ETH_UpdateDescriptor+0x9e>
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	3212      	adds	r2, #18
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <ETH_UpdateDescriptor+0xbc>
 8001f9a:	7cfb      	ldrb	r3, [r7, #19]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1b6      	bne.n	8001f0e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d01a      	beq.n	8001fe0 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3301      	adds	r3, #1
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001fb4:	f3bf 8f5f 	dmb	sy
}
 8001fb8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6919      	ldr	r1, [r3, #16]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	18ca      	adds	r2, r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd2:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	80004000 	.word	0x80004000

08001fec <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3318      	adds	r3, #24
 8001ff8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002006:	2301      	movs	r3, #1
 8002008:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800200a:	e047      	b.n	800209c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800200c:	2301      	movs	r3, #1
 800200e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3b01      	subs	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	3304      	adds	r3, #4
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10a      	bne.n	800203c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	3301      	adds	r3, #1
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d902      	bls.n	8002038 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	3b04      	subs	r3, #4
 8002036:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800203c:	7bbb      	ldrb	r3, [r7, #14]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d02c      	beq.n	800209c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68d9      	ldr	r1, [r3, #12]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	440b      	add	r3, r1
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	db1f      	blt.n	8002098 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	3304      	adds	r3, #4
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4618      	mov	r0, r3
 8002066:	f004 fc99 	bl	800699c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	3304      	adds	r3, #4
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	3301      	adds	r3, #1
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d902      	bls.n	800208a <HAL_ETH_ReleaseTxPacket+0x9e>
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	3b04      	subs	r3, #4
 8002088:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c
 8002096:	e001      	b.n	800209c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <HAL_ETH_ReleaseTxPacket+0xbc>
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1b1      	bne.n	800200c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80020dc:	4b4b      	ldr	r3, [pc, #300]	; (800220c <HAL_ETH_IRQHandler+0x158>)
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00e      	beq.n	800210a <HAL_ETH_IRQHandler+0x56>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fe:	461a      	mov	r2, r3
 8002100:	4b43      	ldr	r3, [pc, #268]	; (8002210 <HAL_ETH_IRQHandler+0x15c>)
 8002102:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f003 ff9f 	bl	8006048 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00f      	beq.n	8002134 <HAL_ETH_IRQHandler+0x80>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002126:	461a      	mov	r2, r3
 8002128:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800212c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f003 ff9a 	bl	8006068 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d042      	beq.n	80021c4 <HAL_ETH_IRQHandler+0x110>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d03d      	beq.n	80021c4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	f043 0208 	orr.w	r2, r3, #8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01a      	beq.n	8002198 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	4b29      	ldr	r3, [pc, #164]	; (8002214 <HAL_ETH_IRQHandler+0x160>)
 800216e:	4013      	ands	r3, r2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002188:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800218c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	22e0      	movs	r2, #224	; 0xe0
 8002192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002196:	e012      	b.n	80021be <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a0:	695a      	ldr	r2, [r3, #20]
 80021a2:	f248 6380 	movw	r3, #34432	; 0x8680
 80021a6:	4013      	ands	r3, r2
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b6:	461a      	mov	r2, r3
 80021b8:	f248 6380 	movw	r3, #34432	; 0x8680
 80021bc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f003 ff62 	bl	8006088 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00e      	beq.n	80021ec <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f81a 	bl	8002218 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d006      	beq.n	8002204 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_ETH_IRQHandler+0x158>)
 80021f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80021fc:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f814 	bl	800222c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002204:	bf00      	nop
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40013c00 	.word	0x40013c00
 8002210:	00010040 	.word	0x00010040
 8002214:	007e2000 	.word	0x007e2000

08002218 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 031c 	and.w	r3, r3, #28
 800225c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	02db      	lsls	r3, r3, #11
 8002262:	b29b      	uxth	r3, r3
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4313      	orrs	r3, r2
 8002268:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	019b      	lsls	r3, r3, #6
 800226e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f023 0302 	bic.w	r3, r3, #2
 800227e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002290:	f7ff fa70 	bl	8001774 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002296:	e00d      	b.n	80022b4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002298:	f7ff fa6c 	bl	8001774 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a6:	d301      	bcc.n	80022ac <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e010      	b.n	80022ce <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1ec      	bne.n	8002298 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f003 031c 	and.w	r3, r3, #28
 80022f2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	02db      	lsls	r3, r3, #11
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	019b      	lsls	r3, r3, #6
 8002304:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4313      	orrs	r3, r2
 800230c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002330:	f7ff fa20 	bl	8001774 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002336:	e00d      	b.n	8002354 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002338:	f7ff fa1c 	bl	8001774 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002346:	d301      	bcc.n	800234c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e009      	b.n	8002360 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1ec      	bne.n	8002338 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0e6      	b.n	800254a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf14      	ite	ne
 800238a:	2301      	movne	r3, #1
 800238c:	2300      	moveq	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf0c      	ite	eq
 80023b4:	2301      	moveq	r3, #1
 80023b6:	2300      	movne	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf14      	ite	ne
 80023d0:	2301      	movne	r3, #1
 80023d2:	2300      	moveq	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	bf0c      	ite	eq
 80023ea:	2301      	moveq	r3, #1
 80023ec:	2300      	movne	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf14      	ite	ne
 8002404:	2301      	movne	r3, #1
 8002406:	2300      	moveq	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002436:	2b00      	cmp	r3, #0
 8002438:	bf0c      	ite	eq
 800243a:	2301      	moveq	r3, #1
 800243c:	2300      	movne	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246a:	2b00      	cmp	r3, #0
 800246c:	bf14      	ite	ne
 800246e:	2301      	movne	r3, #1
 8002470:	2300      	moveq	r3, #0
 8002472:	b2db      	uxtb	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002492:	2b00      	cmp	r3, #0
 8002494:	bf14      	ite	ne
 8002496:	2301      	movne	r3, #1
 8002498:	2300      	moveq	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bf0c      	ite	eq
 80024e6:	2301      	moveq	r3, #1
 80024e8:	2300      	movne	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	461a      	mov	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	0c1b      	lsrs	r3, r3, #16
 800250a:	b29a      	uxth	r2, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	bf14      	ite	ne
 800251e:	2301      	movne	r3, #1
 8002520:	2300      	moveq	r3, #0
 8002522:	b2db      	uxtb	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002536:	2b00      	cmp	r3, #0
 8002538:	bf14      	ite	ne
 800253a:	2301      	movne	r3, #1
 800253c:	2300      	moveq	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e00b      	b.n	8002582 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002570:	2b10      	cmp	r3, #16
 8002572:	d105      	bne.n	8002580 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002574:	6839      	ldr	r1, [r7, #0]
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f87c 	bl	8002674 <ETH_SetMACConfig>

    return HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	e000      	b.n	8002582 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
  }
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 031c 	bic.w	r3, r3, #28
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80025a4:	f001 fc2a 	bl	8003dfc <HAL_RCC_GetHCLKFreq>
 80025a8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4a14      	ldr	r2, [pc, #80]	; (8002600 <HAL_ETH_SetMDIOClockRange+0x74>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d804      	bhi.n	80025bc <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f043 0308 	orr.w	r3, r3, #8
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	e019      	b.n	80025f0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4a11      	ldr	r2, [pc, #68]	; (8002604 <HAL_ETH_SetMDIOClockRange+0x78>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d204      	bcs.n	80025ce <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f043 030c 	orr.w	r3, r3, #12
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	e010      	b.n	80025f0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	4a0d      	ldr	r2, [pc, #52]	; (8002608 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d90c      	bls.n	80025f0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	4a0c      	ldr	r2, [pc, #48]	; (800260c <HAL_ETH_SetMDIOClockRange+0x80>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d804      	bhi.n	80025e8 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f043 0304 	orr.w	r3, r3, #4
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	e003      	b.n	80025f0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f043 0310 	orr.w	r3, r3, #16
 80025ee:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	611a      	str	r2, [r3, #16]
}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	02160ebf 	.word	0x02160ebf
 8002604:	03938700 	.word	0x03938700
 8002608:	05f5e0ff 	.word	0x05f5e0ff
 800260c:	08f0d17f 	.word	0x08f0d17f

08002610 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002648:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800264c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800265a:	2001      	movs	r0, #1
 800265c:	f7ff f896 	bl	800178c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800266a:	6193      	str	r3, [r2, #24]
}
 800266c:	bf00      	nop
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <ETH_SetMACConfig+0x164>)
 800268a:	4013      	ands	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	7b9b      	ldrb	r3, [r3, #14]
 8002692:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	7c12      	ldrb	r2, [r2, #16]
 8002698:	2a00      	cmp	r2, #0
 800269a:	d102      	bne.n	80026a2 <ETH_SetMACConfig+0x2e>
 800269c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80026a0:	e000      	b.n	80026a4 <ETH_SetMACConfig+0x30>
 80026a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80026a4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	7c52      	ldrb	r2, [r2, #17]
 80026aa:	2a00      	cmp	r2, #0
 80026ac:	d102      	bne.n	80026b4 <ETH_SetMACConfig+0x40>
 80026ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80026b2:	e000      	b.n	80026b6 <ETH_SetMACConfig+0x42>
 80026b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026b6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	7fdb      	ldrb	r3, [r3, #31]
 80026c2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80026c4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	7f92      	ldrb	r2, [r2, #30]
 80026d0:	2a00      	cmp	r2, #0
 80026d2:	d102      	bne.n	80026da <ETH_SetMACConfig+0x66>
 80026d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026d8:	e000      	b.n	80026dc <ETH_SetMACConfig+0x68>
 80026da:	2200      	movs	r2, #0
                        macconf->Speed |
 80026dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	7f1b      	ldrb	r3, [r3, #28]
 80026e2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026e4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	791b      	ldrb	r3, [r3, #4]
 80026f0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026fa:	2a00      	cmp	r2, #0
 80026fc:	d102      	bne.n	8002704 <ETH_SetMACConfig+0x90>
 80026fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002702:	e000      	b.n	8002706 <ETH_SetMACConfig+0x92>
 8002704:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002706:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	7bdb      	ldrb	r3, [r3, #15]
 800270c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800270e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002714:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800271c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800271e:	4313      	orrs	r3, r2
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002736:	2001      	movs	r0, #1
 8002738:	f7ff f828 	bl	800178c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002752:	4013      	ands	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002762:	2a00      	cmp	r2, #0
 8002764:	d101      	bne.n	800276a <ETH_SetMACConfig+0xf6>
 8002766:	2280      	movs	r2, #128	; 0x80
 8002768:	e000      	b.n	800276c <ETH_SetMACConfig+0xf8>
 800276a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800276c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002772:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800277a:	2a01      	cmp	r2, #1
 800277c:	d101      	bne.n	8002782 <ETH_SetMACConfig+0x10e>
 800277e:	2208      	movs	r2, #8
 8002780:	e000      	b.n	8002784 <ETH_SetMACConfig+0x110>
 8002782:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002784:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800278c:	2a01      	cmp	r2, #1
 800278e:	d101      	bne.n	8002794 <ETH_SetMACConfig+0x120>
 8002790:	2204      	movs	r2, #4
 8002792:	e000      	b.n	8002796 <ETH_SetMACConfig+0x122>
 8002794:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002796:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800279e:	2a01      	cmp	r2, #1
 80027a0:	d101      	bne.n	80027a6 <ETH_SetMACConfig+0x132>
 80027a2:	2202      	movs	r2, #2
 80027a4:	e000      	b.n	80027a8 <ETH_SetMACConfig+0x134>
 80027a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027a8:	4313      	orrs	r3, r2
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027c0:	2001      	movs	r0, #1
 80027c2:	f7fe ffe3 	bl	800178c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	619a      	str	r2, [r3, #24]
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	fd20810f 	.word	0xfd20810f

080027dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4b3d      	ldr	r3, [pc, #244]	; (80028ec <ETH_SetDMAConfig+0x110>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	7b1b      	ldrb	r3, [r3, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d102      	bne.n	8002808 <ETH_SetDMAConfig+0x2c>
 8002802:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002806:	e000      	b.n	800280a <ETH_SetDMAConfig+0x2e>
 8002808:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	7b5b      	ldrb	r3, [r3, #13]
 800280e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002810:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	7f52      	ldrb	r2, [r2, #29]
 8002816:	2a00      	cmp	r2, #0
 8002818:	d102      	bne.n	8002820 <ETH_SetDMAConfig+0x44>
 800281a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800281e:	e000      	b.n	8002822 <ETH_SetDMAConfig+0x46>
 8002820:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002822:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	7b9b      	ldrb	r3, [r3, #14]
 8002828:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800282a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002830:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	7f1b      	ldrb	r3, [r3, #28]
 8002836:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002838:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	7f9b      	ldrb	r3, [r3, #30]
 800283e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002840:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002846:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800284e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002850:	4313      	orrs	r3, r2
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002860:	461a      	mov	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002872:	2001      	movs	r0, #1
 8002874:	f7fe ff8a 	bl	800178c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002880:	461a      	mov	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	791b      	ldrb	r3, [r3, #4]
 800288a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002890:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002896:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800289c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028a4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80028a6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028ae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028b4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028c2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028d0:	2001      	movs	r0, #1
 80028d2:	f7fe ff5b 	bl	800178c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028de:	461a      	mov	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	f8de3f23 	.word	0xf8de3f23

080028f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b0a6      	sub	sp, #152	; 0x98
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80028f8:	2301      	movs	r3, #1
 80028fa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80028fe:	2301      	movs	r3, #1
 8002900:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002904:	2300      	movs	r3, #0
 8002906:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800290e:	2301      	movs	r3, #1
 8002910:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800291a:	2301      	movs	r3, #1
 800291c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002920:	2301      	movs	r3, #1
 8002922:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002926:	2300      	movs	r3, #0
 8002928:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800292c:	2300      	movs	r3, #0
 800292e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002932:	2300      	movs	r3, #0
 8002934:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800293c:	2300      	movs	r3, #0
 800293e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002940:	2300      	movs	r3, #0
 8002942:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002946:	2300      	movs	r3, #0
 8002948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800295c:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800295e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002962:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800296a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800296e:	4619      	mov	r1, r3
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff fe7f 	bl	8002674 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002976:	2301      	movs	r3, #1
 8002978:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800297a:	2301      	movs	r3, #1
 800297c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800297e:	2301      	movs	r3, #1
 8002980:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002984:	2301      	movs	r3, #1
 8002986:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002992:	2300      	movs	r3, #0
 8002994:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002998:	2300      	movs	r3, #0
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800299c:	2301      	movs	r3, #1
 800299e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80029a2:	2301      	movs	r3, #1
 80029a4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029aa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029b0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029b6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029c6:	f107 0308 	add.w	r3, r7, #8
 80029ca:	4619      	mov	r1, r3
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff05 	bl	80027dc <ETH_SetDMAConfig>
}
 80029d2:	bf00      	nop
 80029d4:	3798      	adds	r7, #152	; 0x98
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3305      	adds	r3, #5
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	3204      	adds	r2, #4
 80029f4:	7812      	ldrb	r2, [r2, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <ETH_MACAddressConfig+0x68>)
 80029fe:	4413      	add	r3, r2
 8002a00:	461a      	mov	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3303      	adds	r3, #3
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	061a      	lsls	r2, r3, #24
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3302      	adds	r3, #2
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	4313      	orrs	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	7812      	ldrb	r2, [r2, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <ETH_MACAddressConfig+0x6c>)
 8002a2e:	4413      	add	r3, r2
 8002a30:	461a      	mov	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	6013      	str	r3, [r2, #0]
}
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40028040 	.word	0x40028040
 8002a48:	40028044 	.word	0x40028044

08002a4c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e03e      	b.n	8002ad8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68d9      	ldr	r1, [r3, #12]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2200      	movs	r2, #0
 8002a76:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2200      	movs	r2, #0
 8002a82:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	3206      	adds	r2, #6
 8002a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d80c      	bhi.n	8002abc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68d9      	ldr	r1, [r3, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	440b      	add	r3, r1
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	e004      	b.n	8002ac6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d9bd      	bls.n	8002a5a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af0:	611a      	str	r2, [r3, #16]
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	e048      	b.n	8002b9e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6919      	ldr	r1, [r3, #16]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2200      	movs	r2, #0
 8002b28:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b48:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b62:	68b9      	ldr	r1, [r7, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	3212      	adds	r2, #18
 8002b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d80c      	bhi.n	8002b8e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6919      	ldr	r1, [r3, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	461a      	mov	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	60da      	str	r2, [r3, #12]
 8002b8c:	e004      	b.n	8002b98 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	461a      	mov	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d9b3      	bls.n	8002b0c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bce:	60da      	str	r2, [r3, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b091      	sub	sp, #68	; 0x44
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3318      	adds	r3, #24
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c06:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c1e:	d007      	beq.n	8002c30 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c24:	3304      	adds	r3, #4
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002c30:	2302      	movs	r3, #2
 8002c32:	e111      	b.n	8002e58 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c36:	3301      	adds	r3, #1
 8002c38:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c42:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	4b86      	ldr	r3, [pc, #536]	; (8002e64 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4e:	6852      	ldr	r2, [r2, #4]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d008      	beq.n	8002c74 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c72:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002cb6:	e082      	b.n	8002dbe <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d006      	beq.n	8002cd8 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e005      	b.n	8002ce4 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d902      	bls.n	8002cf6 <ETH_Prepare_Tx_Descriptors+0x11a>
 8002cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf2:	3b04      	subs	r3, #4
 8002cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d0c:	d007      	beq.n	8002d1e <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d12:	3304      	adds	r3, #4
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d029      	beq.n	8002d72 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d2a:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d30:	e019      	b.n	8002d66 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002d32:	f3bf 8f5f 	dmb	sy
}
 8002d36:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d46:	3301      	adds	r3, #1
 8002d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d902      	bls.n	8002d56 <ETH_Prepare_Tx_Descriptors+0x17a>
 8002d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d52:	3b04      	subs	r3, #4
 8002d54:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d62:	3301      	adds	r3, #1
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d3e1      	bcc.n	8002d32 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e072      	b.n	8002e58 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d80:	3301      	adds	r3, #1
 8002d82:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	4b32      	ldr	r3, [pc, #200]	; (8002e64 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d9e:	6852      	ldr	r2, [r2, #4]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	3301      	adds	r3, #1
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002dac:	f3bf 8f5f 	dmb	sy
}
 8002db0:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f47f af78 	bne.w	8002cb8 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e005      	b.n	8002de8 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	6a3a      	ldr	r2, [r7, #32]
 8002df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002dfe:	f3bf 8f5f 	dmb	sy
}
 8002e02:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e18:	3304      	adds	r3, #4
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e24:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e26:	f3ef 8310 	mrs	r3, PRIMASK
 8002e2a:	613b      	str	r3, [r7, #16]
  return(result);
 8002e2c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002e2e:	61fb      	str	r3, [r7, #28]
 8002e30:	2301      	movs	r3, #1
 8002e32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f383 8810 	msr	PRIMASK, r3
}
 8002e3a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e42:	4413      	add	r3, r2
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	629a      	str	r2, [r3, #40]	; 0x28
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	f383 8810 	msr	PRIMASK, r3
}
 8002e54:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3744      	adds	r7, #68	; 0x44
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	ffffe000 	.word	0xffffe000

08002e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	e175      	b.n	8003174 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e88:	2201      	movs	r2, #1
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	f040 8164 	bne.w	800316e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d005      	beq.n	8002ebe <HAL_GPIO_Init+0x56>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d130      	bne.n	8002f20 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	2203      	movs	r2, #3
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f003 0201 	and.w	r2, r3, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d017      	beq.n	8002f5c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	2203      	movs	r2, #3
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d123      	bne.n	8002fb0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	08da      	lsrs	r2, r3, #3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3208      	adds	r2, #8
 8002f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	220f      	movs	r2, #15
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	08da      	lsrs	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3208      	adds	r2, #8
 8002faa:	69b9      	ldr	r1, [r7, #24]
 8002fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0203 	and.w	r2, r3, #3
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80be 	beq.w	800316e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff2:	4b66      	ldr	r3, [pc, #408]	; (800318c <HAL_GPIO_Init+0x324>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	4a65      	ldr	r2, [pc, #404]	; (800318c <HAL_GPIO_Init+0x324>)
 8002ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffe:	4b63      	ldr	r3, [pc, #396]	; (800318c <HAL_GPIO_Init+0x324>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800300a:	4a61      	ldr	r2, [pc, #388]	; (8003190 <HAL_GPIO_Init+0x328>)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	089b      	lsrs	r3, r3, #2
 8003010:	3302      	adds	r3, #2
 8003012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	220f      	movs	r2, #15
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a58      	ldr	r2, [pc, #352]	; (8003194 <HAL_GPIO_Init+0x32c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d037      	beq.n	80030a6 <HAL_GPIO_Init+0x23e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a57      	ldr	r2, [pc, #348]	; (8003198 <HAL_GPIO_Init+0x330>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d031      	beq.n	80030a2 <HAL_GPIO_Init+0x23a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a56      	ldr	r2, [pc, #344]	; (800319c <HAL_GPIO_Init+0x334>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d02b      	beq.n	800309e <HAL_GPIO_Init+0x236>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a55      	ldr	r2, [pc, #340]	; (80031a0 <HAL_GPIO_Init+0x338>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d025      	beq.n	800309a <HAL_GPIO_Init+0x232>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a54      	ldr	r2, [pc, #336]	; (80031a4 <HAL_GPIO_Init+0x33c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01f      	beq.n	8003096 <HAL_GPIO_Init+0x22e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a53      	ldr	r2, [pc, #332]	; (80031a8 <HAL_GPIO_Init+0x340>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d019      	beq.n	8003092 <HAL_GPIO_Init+0x22a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a52      	ldr	r2, [pc, #328]	; (80031ac <HAL_GPIO_Init+0x344>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d013      	beq.n	800308e <HAL_GPIO_Init+0x226>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a51      	ldr	r2, [pc, #324]	; (80031b0 <HAL_GPIO_Init+0x348>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00d      	beq.n	800308a <HAL_GPIO_Init+0x222>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a50      	ldr	r2, [pc, #320]	; (80031b4 <HAL_GPIO_Init+0x34c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d007      	beq.n	8003086 <HAL_GPIO_Init+0x21e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a4f      	ldr	r2, [pc, #316]	; (80031b8 <HAL_GPIO_Init+0x350>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d101      	bne.n	8003082 <HAL_GPIO_Init+0x21a>
 800307e:	2309      	movs	r3, #9
 8003080:	e012      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 8003082:	230a      	movs	r3, #10
 8003084:	e010      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 8003086:	2308      	movs	r3, #8
 8003088:	e00e      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 800308a:	2307      	movs	r3, #7
 800308c:	e00c      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 800308e:	2306      	movs	r3, #6
 8003090:	e00a      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 8003092:	2305      	movs	r3, #5
 8003094:	e008      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 8003096:	2304      	movs	r3, #4
 8003098:	e006      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 800309a:	2303      	movs	r3, #3
 800309c:	e004      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 800309e:	2302      	movs	r3, #2
 80030a0:	e002      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 80030a6:	2300      	movs	r3, #0
 80030a8:	69fa      	ldr	r2, [r7, #28]
 80030aa:	f002 0203 	and.w	r2, r2, #3
 80030ae:	0092      	lsls	r2, r2, #2
 80030b0:	4093      	lsls	r3, r2
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030b8:	4935      	ldr	r1, [pc, #212]	; (8003190 <HAL_GPIO_Init+0x328>)
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	3302      	adds	r3, #2
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030c6:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <HAL_GPIO_Init+0x354>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ea:	4a34      	ldr	r2, [pc, #208]	; (80031bc <HAL_GPIO_Init+0x354>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030f0:	4b32      	ldr	r3, [pc, #200]	; (80031bc <HAL_GPIO_Init+0x354>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003114:	4a29      	ldr	r2, [pc, #164]	; (80031bc <HAL_GPIO_Init+0x354>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800311a:	4b28      	ldr	r3, [pc, #160]	; (80031bc <HAL_GPIO_Init+0x354>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800313e:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <HAL_GPIO_Init+0x354>)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003144:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <HAL_GPIO_Init+0x354>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003168:	4a14      	ldr	r2, [pc, #80]	; (80031bc <HAL_GPIO_Init+0x354>)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3301      	adds	r3, #1
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	2b0f      	cmp	r3, #15
 8003178:	f67f ae86 	bls.w	8002e88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	3724      	adds	r7, #36	; 0x24
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	40013800 	.word	0x40013800
 8003194:	40020000 	.word	0x40020000
 8003198:	40020400 	.word	0x40020400
 800319c:	40020800 	.word	0x40020800
 80031a0:	40020c00 	.word	0x40020c00
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40021400 	.word	0x40021400
 80031ac:	40021800 	.word	0x40021800
 80031b0:	40021c00 	.word	0x40021c00
 80031b4:	40022000 	.word	0x40022000
 80031b8:	40022400 	.word	0x40022400
 80031bc:	40013c00 	.word	0x40013c00

080031c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	807b      	strh	r3, [r7, #2]
 80031cc:	4613      	mov	r3, r2
 80031ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031d0:	787b      	ldrb	r3, [r7, #1]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031d6:	887a      	ldrh	r2, [r7, #2]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031dc:	e003      	b.n	80031e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031de:	887b      	ldrh	r3, [r7, #2]
 80031e0:	041a      	lsls	r2, r3, #16
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	619a      	str	r2, [r3, #24]
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b085      	sub	sp, #20
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	460b      	mov	r3, r1
 80031fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003204:	887a      	ldrh	r2, [r7, #2]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4013      	ands	r3, r2
 800320a:	041a      	lsls	r2, r3, #16
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	43d9      	mvns	r1, r3
 8003210:	887b      	ldrh	r3, [r7, #2]
 8003212:	400b      	ands	r3, r1
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	619a      	str	r2, [r3, #24]
}
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af02      	add	r7, sp, #8
 800322c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e108      	b.n	800344a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fe f8c4 	bl	80013e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2203      	movs	r2, #3
 800325c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003266:	d102      	bne.n	800326e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f002 fad6 	bl	8005824 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7c1a      	ldrb	r2, [r3, #16]
 8003280:	f88d 2000 	strb.w	r2, [sp]
 8003284:	3304      	adds	r3, #4
 8003286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003288:	f002 fa72 	bl	8005770 <USB_CoreInit>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2202      	movs	r2, #2
 8003296:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e0d5      	b.n	800344a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f002 face 	bl	8005846 <USB_SetCurrentMode>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0c6      	b.n	800344a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]
 80032c0:	e04a      	b.n	8003358 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	3315      	adds	r3, #21
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	3314      	adds	r3, #20
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032ea:	7bfa      	ldrb	r2, [r7, #15]
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	b298      	uxth	r0, r3
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	332e      	adds	r3, #46	; 0x2e
 80032fe:	4602      	mov	r2, r0
 8003300:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	3318      	adds	r3, #24
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	331c      	adds	r3, #28
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800332a:	7bfa      	ldrb	r2, [r7, #15]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	3320      	adds	r3, #32
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	3324      	adds	r3, #36	; 0x24
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	3301      	adds	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	791b      	ldrb	r3, [r3, #4]
 800335c:	7bfa      	ldrb	r2, [r7, #15]
 800335e:	429a      	cmp	r2, r3
 8003360:	d3af      	bcc.n	80032c2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
 8003366:	e044      	b.n	80033f2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	f203 2355 	addw	r3, r3, #597	; 0x255
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800337e:	7bfa      	ldrb	r2, [r7, #15]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003390:	7bfa      	ldrb	r2, [r7, #15]
 8003392:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003394:	7bfa      	ldrb	r2, [r7, #15]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80033a6:	2200      	movs	r2, #0
 80033a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033d6:	7bfa      	ldrb	r2, [r7, #15]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	3301      	adds	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	791b      	ldrb	r3, [r3, #4]
 80033f6:	7bfa      	ldrb	r2, [r7, #15]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d3b5      	bcc.n	8003368 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7c1a      	ldrb	r2, [r3, #16]
 8003404:	f88d 2000 	strb.w	r2, [sp]
 8003408:	3304      	adds	r3, #4
 800340a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800340c:	f002 fa68 	bl	80058e0 <USB_DevInit>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e013      	b.n	800344a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	7b1b      	ldrb	r3, [r3, #12]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d102      	bne.n	800343e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f80b 	bl	8003454 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f002 fc23 	bl	8005c8e <USB_DevDisconnect>

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_PCDEx_ActivateLPM+0x44>)
 8003484:	4313      	orrs	r3, r2
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	10000003 	.word	0x10000003

0800349c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034aa:	6013      	str	r3, [r2, #0]
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40007000 	.word	0x40007000

080034bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80034c4:	2300      	movs	r3, #0
 80034c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e29b      	b.n	8003a0a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8087 	beq.w	80035ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034e0:	4b96      	ldr	r3, [pc, #600]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d00c      	beq.n	8003506 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ec:	4b93      	ldr	r3, [pc, #588]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 030c 	and.w	r3, r3, #12
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d112      	bne.n	800351e <HAL_RCC_OscConfig+0x62>
 80034f8:	4b90      	ldr	r3, [pc, #576]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003504:	d10b      	bne.n	800351e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003506:	4b8d      	ldr	r3, [pc, #564]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d06c      	beq.n	80035ec <HAL_RCC_OscConfig+0x130>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d168      	bne.n	80035ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e275      	b.n	8003a0a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003526:	d106      	bne.n	8003536 <HAL_RCC_OscConfig+0x7a>
 8003528:	4b84      	ldr	r3, [pc, #528]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a83      	ldr	r2, [pc, #524]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800352e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	e02e      	b.n	8003594 <HAL_RCC_OscConfig+0xd8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x9c>
 800353e:	4b7f      	ldr	r3, [pc, #508]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a7e      	ldr	r2, [pc, #504]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b7c      	ldr	r3, [pc, #496]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a7b      	ldr	r2, [pc, #492]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e01d      	b.n	8003594 <HAL_RCC_OscConfig+0xd8>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0xc0>
 8003562:	4b76      	ldr	r3, [pc, #472]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a75      	ldr	r2, [pc, #468]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b73      	ldr	r3, [pc, #460]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a72      	ldr	r2, [pc, #456]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0xd8>
 800357c:	4b6f      	ldr	r3, [pc, #444]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a6e      	ldr	r2, [pc, #440]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b6c      	ldr	r3, [pc, #432]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a6b      	ldr	r2, [pc, #428]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe f8ea 	bl	8001774 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fe f8e6 	bl	8001774 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e229      	b.n	8003a0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b61      	ldr	r3, [pc, #388]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0xe8>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fe f8d6 	bl	8001774 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fe f8d2 	bl	8001774 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e215      	b.n	8003a0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	4b57      	ldr	r3, [pc, #348]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x110>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d069      	beq.n	80036ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035fa:	4b50      	ldr	r3, [pc, #320]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003606:	4b4d      	ldr	r3, [pc, #308]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b08      	cmp	r3, #8
 8003610:	d11c      	bne.n	800364c <HAL_RCC_OscConfig+0x190>
 8003612:	4b4a      	ldr	r3, [pc, #296]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d116      	bne.n	800364c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361e:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_RCC_OscConfig+0x17a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d001      	beq.n	8003636 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e1e9      	b.n	8003a0a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b41      	ldr	r3, [pc, #260]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	493d      	ldr	r1, [pc, #244]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	e040      	b.n	80036ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d023      	beq.n	800369c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003654:	4b39      	ldr	r3, [pc, #228]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a38      	ldr	r2, [pc, #224]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe f888 	bl	8001774 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003668:	f7fe f884 	bl	8001774 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e1c7      	b.n	8003a0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367a:	4b30      	ldr	r3, [pc, #192]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003686:	4b2d      	ldr	r3, [pc, #180]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4929      	ldr	r1, [pc, #164]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]
 800369a:	e018      	b.n	80036ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369c:	4b27      	ldr	r3, [pc, #156]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a26      	ldr	r2, [pc, #152]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fe f864 	bl	8001774 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b0:	f7fe f860 	bl	8001774 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e1a3      	b.n	8003a0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c2:	4b1e      	ldr	r3, [pc, #120]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d038      	beq.n	800374c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d019      	beq.n	8003716 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e2:	4b16      	ldr	r3, [pc, #88]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80036e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ee:	f7fe f841 	bl	8001774 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f6:	f7fe f83d 	bl	8001774 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e180      	b.n	8003a0a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003708:	4b0c      	ldr	r3, [pc, #48]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800370a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x23a>
 8003714:	e01a      	b.n	800374c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003716:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371a:	4a08      	ldr	r2, [pc, #32]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003722:	f7fe f827 	bl	8001774 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372a:	f7fe f823 	bl	8001774 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d903      	bls.n	8003740 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e166      	b.n	8003a0a <HAL_RCC_OscConfig+0x54e>
 800373c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003740:	4b92      	ldr	r3, [pc, #584]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 8003742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1ee      	bne.n	800372a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80a4 	beq.w	80038a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375a:	4b8c      	ldr	r3, [pc, #560]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10d      	bne.n	8003782 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	4b89      	ldr	r3, [pc, #548]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	4a88      	ldr	r2, [pc, #544]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	; 0x40
 8003772:	4b86      	ldr	r3, [pc, #536]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377e:	2301      	movs	r3, #1
 8003780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003782:	4b83      	ldr	r3, [pc, #524]	; (8003990 <HAL_RCC_OscConfig+0x4d4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d118      	bne.n	80037c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800378e:	4b80      	ldr	r3, [pc, #512]	; (8003990 <HAL_RCC_OscConfig+0x4d4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7f      	ldr	r2, [pc, #508]	; (8003990 <HAL_RCC_OscConfig+0x4d4>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379a:	f7fd ffeb 	bl	8001774 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a2:	f7fd ffe7 	bl	8001774 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b64      	cmp	r3, #100	; 0x64
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e12a      	b.n	8003a0a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b4:	4b76      	ldr	r3, [pc, #472]	; (8003990 <HAL_RCC_OscConfig+0x4d4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x31a>
 80037c8:	4b70      	ldr	r3, [pc, #448]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	4a6f      	ldr	r2, [pc, #444]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6713      	str	r3, [r2, #112]	; 0x70
 80037d4:	e02d      	b.n	8003832 <HAL_RCC_OscConfig+0x376>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x33c>
 80037de:	4b6b      	ldr	r3, [pc, #428]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	4a6a      	ldr	r2, [pc, #424]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ea:	4b68      	ldr	r3, [pc, #416]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	4a67      	ldr	r2, [pc, #412]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 80037f0:	f023 0304 	bic.w	r3, r3, #4
 80037f4:	6713      	str	r3, [r2, #112]	; 0x70
 80037f6:	e01c      	b.n	8003832 <HAL_RCC_OscConfig+0x376>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	d10c      	bne.n	800381a <HAL_RCC_OscConfig+0x35e>
 8003800:	4b62      	ldr	r3, [pc, #392]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a61      	ldr	r2, [pc, #388]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 8003806:	f043 0304 	orr.w	r3, r3, #4
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
 800380c:	4b5f      	ldr	r3, [pc, #380]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a5e      	ldr	r2, [pc, #376]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
 8003818:	e00b      	b.n	8003832 <HAL_RCC_OscConfig+0x376>
 800381a:	4b5c      	ldr	r3, [pc, #368]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a5b      	ldr	r2, [pc, #364]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	6713      	str	r3, [r2, #112]	; 0x70
 8003826:	4b59      	ldr	r3, [pc, #356]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	4a58      	ldr	r2, [pc, #352]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 800382c:	f023 0304 	bic.w	r3, r3, #4
 8003830:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d015      	beq.n	8003866 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383a:	f7fd ff9b 	bl	8001774 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003840:	e00a      	b.n	8003858 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fd ff97 	bl	8001774 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e0d8      	b.n	8003a0a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003858:	4b4c      	ldr	r3, [pc, #304]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ee      	beq.n	8003842 <HAL_RCC_OscConfig+0x386>
 8003864:	e014      	b.n	8003890 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003866:	f7fd ff85 	bl	8001774 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fd ff81 	bl	8001774 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e0c2      	b.n	8003a0a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003884:	4b41      	ldr	r3, [pc, #260]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1ee      	bne.n	800386e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003890:	7dfb      	ldrb	r3, [r7, #23]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d105      	bne.n	80038a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003896:	4b3d      	ldr	r3, [pc, #244]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	4a3c      	ldr	r2, [pc, #240]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 800389c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 80ae 	beq.w	8003a08 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038ac:	4b37      	ldr	r3, [pc, #220]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d06d      	beq.n	8003994 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d14b      	bne.n	8003958 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c0:	4b32      	ldr	r3, [pc, #200]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a31      	ldr	r2, [pc, #196]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 80038c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fd ff52 	bl	8001774 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d4:	f7fd ff4e 	bl	8001774 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e091      	b.n	8003a0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e6:	4b29      	ldr	r3, [pc, #164]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69da      	ldr	r2, [r3, #28]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	019b      	lsls	r3, r3, #6
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	3b01      	subs	r3, #1
 800390c:	041b      	lsls	r3, r3, #16
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	071b      	lsls	r3, r3, #28
 800391e:	491b      	ldr	r1, [pc, #108]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003924:	4b19      	ldr	r3, [pc, #100]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a18      	ldr	r2, [pc, #96]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 800392a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800392e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7fd ff20 	bl	8001774 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003938:	f7fd ff1c 	bl	8001774 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e05f      	b.n	8003a0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394a:	4b10      	ldr	r3, [pc, #64]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x47c>
 8003956:	e057      	b.n	8003a08 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0b      	ldr	r2, [pc, #44]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 800395e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fd ff06 	bl	8001774 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396c:	f7fd ff02 	bl	8001774 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e045      	b.n	8003a0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397e:	4b03      	ldr	r3, [pc, #12]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x4b0>
 800398a:	e03d      	b.n	8003a08 <HAL_RCC_OscConfig+0x54c>
 800398c:	40023800 	.word	0x40023800
 8003990:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003994:	4b1f      	ldr	r3, [pc, #124]	; (8003a14 <HAL_RCC_OscConfig+0x558>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d030      	beq.n	8003a04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d129      	bne.n	8003a04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d122      	bne.n	8003a04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039c4:	4013      	ands	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d119      	bne.n	8003a04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	3b01      	subs	r3, #1
 80039de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d10f      	bne.n	8003a04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d107      	bne.n	8003a04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800

08003a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0d0      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a30:	4b6a      	ldr	r3, [pc, #424]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d910      	bls.n	8003a60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b67      	ldr	r3, [pc, #412]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 020f 	bic.w	r2, r3, #15
 8003a46:	4965      	ldr	r1, [pc, #404]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b63      	ldr	r3, [pc, #396]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0b8      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d020      	beq.n	8003aae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a78:	4b59      	ldr	r3, [pc, #356]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4a58      	ldr	r2, [pc, #352]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a90:	4b53      	ldr	r3, [pc, #332]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4a52      	ldr	r2, [pc, #328]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a9c:	4b50      	ldr	r3, [pc, #320]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	494d      	ldr	r1, [pc, #308]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d040      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d107      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac2:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d115      	bne.n	8003afa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e07f      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ada:	4b41      	ldr	r3, [pc, #260]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e073      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aea:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e06b      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afa:	4b39      	ldr	r3, [pc, #228]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f023 0203 	bic.w	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4936      	ldr	r1, [pc, #216]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b0c:	f7fd fe32 	bl	8001774 <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b14:	f7fd fe2e 	bl	8001774 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e053      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 020c 	and.w	r2, r3, #12
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d1eb      	bne.n	8003b14 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d210      	bcs.n	8003b6c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 020f 	bic.w	r2, r3, #15
 8003b52:	4922      	ldr	r1, [pc, #136]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e032      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b78:	4b19      	ldr	r3, [pc, #100]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4916      	ldr	r1, [pc, #88]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b96:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	490e      	ldr	r1, [pc, #56]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003baa:	f000 f821 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	490a      	ldr	r1, [pc, #40]	; (8003be4 <HAL_RCC_ClockConfig+0x1cc>)
 8003bbc:	5ccb      	ldrb	r3, [r1, r3]
 8003bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc2:	4a09      	ldr	r2, [pc, #36]	; (8003be8 <HAL_RCC_ClockConfig+0x1d0>)
 8003bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <HAL_RCC_ClockConfig+0x1d4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fc fef6 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40023c00 	.word	0x40023c00
 8003be0:	40023800 	.word	0x40023800
 8003be4:	08018b5c 	.word	0x08018b5c
 8003be8:	20000000 	.word	0x20000000
 8003bec:	20000004 	.word	0x20000004

08003bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf4:	b094      	sub	sp, #80	; 0x50
 8003bf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c00:	2300      	movs	r3, #0
 8003c02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c08:	4b79      	ldr	r3, [pc, #484]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d00d      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0x40>
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	f200 80e1 	bhi.w	8003ddc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x34>
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d003      	beq.n	8003c2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c22:	e0db      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c24:	4b73      	ldr	r3, [pc, #460]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c28:	e0db      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c2a:	4b73      	ldr	r3, [pc, #460]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c2e:	e0d8      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c30:	4b6f      	ldr	r3, [pc, #444]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c38:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c3a:	4b6d      	ldr	r3, [pc, #436]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d063      	beq.n	8003d0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c46:	4b6a      	ldr	r3, [pc, #424]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	099b      	lsrs	r3, r3, #6
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c58:	633b      	str	r3, [r7, #48]	; 0x30
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c62:	4622      	mov	r2, r4
 8003c64:	462b      	mov	r3, r5
 8003c66:	f04f 0000 	mov.w	r0, #0
 8003c6a:	f04f 0100 	mov.w	r1, #0
 8003c6e:	0159      	lsls	r1, r3, #5
 8003c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c74:	0150      	lsls	r0, r2, #5
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	1a51      	subs	r1, r2, r1
 8003c7e:	6139      	str	r1, [r7, #16]
 8003c80:	4629      	mov	r1, r5
 8003c82:	eb63 0301 	sbc.w	r3, r3, r1
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c94:	4659      	mov	r1, fp
 8003c96:	018b      	lsls	r3, r1, #6
 8003c98:	4651      	mov	r1, sl
 8003c9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c9e:	4651      	mov	r1, sl
 8003ca0:	018a      	lsls	r2, r1, #6
 8003ca2:	4651      	mov	r1, sl
 8003ca4:	ebb2 0801 	subs.w	r8, r2, r1
 8003ca8:	4659      	mov	r1, fp
 8003caa:	eb63 0901 	sbc.w	r9, r3, r1
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cc2:	4690      	mov	r8, r2
 8003cc4:	4699      	mov	r9, r3
 8003cc6:	4623      	mov	r3, r4
 8003cc8:	eb18 0303 	adds.w	r3, r8, r3
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	462b      	mov	r3, r5
 8003cd0:	eb49 0303 	adc.w	r3, r9, r3
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	024b      	lsls	r3, r1, #9
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cec:	4621      	mov	r1, r4
 8003cee:	024a      	lsls	r2, r1, #9
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d00:	f7fc faee 	bl	80002e0 <__aeabi_uldivmod>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4613      	mov	r3, r2
 8003d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d0c:	e058      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0e:	4b38      	ldr	r3, [pc, #224]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	099b      	lsrs	r3, r3, #6
 8003d14:	2200      	movs	r2, #0
 8003d16:	4618      	mov	r0, r3
 8003d18:	4611      	mov	r1, r2
 8003d1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d1e:	623b      	str	r3, [r7, #32]
 8003d20:	2300      	movs	r3, #0
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
 8003d24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d28:	4642      	mov	r2, r8
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	f04f 0000 	mov.w	r0, #0
 8003d30:	f04f 0100 	mov.w	r1, #0
 8003d34:	0159      	lsls	r1, r3, #5
 8003d36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d3a:	0150      	lsls	r0, r2, #5
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4641      	mov	r1, r8
 8003d42:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d46:	4649      	mov	r1, r9
 8003d48:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d60:	ebb2 040a 	subs.w	r4, r2, sl
 8003d64:	eb63 050b 	sbc.w	r5, r3, fp
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	00eb      	lsls	r3, r5, #3
 8003d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d76:	00e2      	lsls	r2, r4, #3
 8003d78:	4614      	mov	r4, r2
 8003d7a:	461d      	mov	r5, r3
 8003d7c:	4643      	mov	r3, r8
 8003d7e:	18e3      	adds	r3, r4, r3
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	464b      	mov	r3, r9
 8003d84:	eb45 0303 	adc.w	r3, r5, r3
 8003d88:	607b      	str	r3, [r7, #4]
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d96:	4629      	mov	r1, r5
 8003d98:	028b      	lsls	r3, r1, #10
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003da0:	4621      	mov	r1, r4
 8003da2:	028a      	lsls	r2, r1, #10
 8003da4:	4610      	mov	r0, r2
 8003da6:	4619      	mov	r1, r3
 8003da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003daa:	2200      	movs	r2, #0
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	61fa      	str	r2, [r7, #28]
 8003db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003db4:	f7fc fa94 	bl	80002e0 <__aeabi_uldivmod>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003dd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dda:	e002      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ddc:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3750      	adds	r7, #80	; 0x50
 8003de8:	46bd      	mov	sp, r7
 8003dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dee:	bf00      	nop
 8003df0:	40023800 	.word	0x40023800
 8003df4:	00f42400 	.word	0x00f42400
 8003df8:	007a1200 	.word	0x007a1200

08003dfc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e00:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e02:	681b      	ldr	r3, [r3, #0]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	20000000 	.word	0x20000000

08003e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e18:	f7ff fff0 	bl	8003dfc <HAL_RCC_GetHCLKFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	0a9b      	lsrs	r3, r3, #10
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4903      	ldr	r1, [pc, #12]	; (8003e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40023800 	.word	0x40023800
 8003e38:	08018b6c 	.word	0x08018b6c

08003e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e40:	f7ff ffdc 	bl	8003dfc <HAL_RCC_GetHCLKFreq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	0b5b      	lsrs	r3, r3, #13
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4903      	ldr	r1, [pc, #12]	; (8003e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e52:	5ccb      	ldrb	r3, [r1, r3]
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	08018b6c 	.word	0x08018b6c

08003e64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	220f      	movs	r2, #15
 8003e72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e74:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0203 	and.w	r2, r3, #3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	08db      	lsrs	r3, r3, #3
 8003e9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ea6:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <HAL_RCC_GetClockConfig+0x60>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 020f 	and.w	r2, r3, #15
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	601a      	str	r2, [r3, #0]
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40023c00 	.word	0x40023c00

08003ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d012      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ef0:	4b69      	ldr	r3, [pc, #420]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4a68      	ldr	r2, [pc, #416]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003efa:	6093      	str	r3, [r2, #8]
 8003efc:	4b66      	ldr	r3, [pc, #408]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f04:	4964      	ldr	r1, [pc, #400]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d017      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f22:	4b5d      	ldr	r3, [pc, #372]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f30:	4959      	ldr	r1, [pc, #356]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f40:	d101      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d017      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f5e:	4b4e      	ldr	r3, [pc, #312]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	494a      	ldr	r1, [pc, #296]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 808b 	beq.w	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fac:	4b3a      	ldr	r3, [pc, #232]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	4a39      	ldr	r2, [pc, #228]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb8:	4b37      	ldr	r3, [pc, #220]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fc4:	4b35      	ldr	r3, [pc, #212]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a34      	ldr	r2, [pc, #208]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd0:	f7fd fbd0 	bl	8001774 <HAL_GetTick>
 8003fd4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd8:	f7fd fbcc 	bl	8001774 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b64      	cmp	r3, #100	; 0x64
 8003fe4:	d901      	bls.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e38f      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fea:	4b2c      	ldr	r3, [pc, #176]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ff6:	4b28      	ldr	r3, [pc, #160]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d035      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	429a      	cmp	r2, r3
 8004012:	d02e      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004014:	4b20      	ldr	r3, [pc, #128]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800401e:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004028:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800402a:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a1a      	ldr	r2, [pc, #104]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004034:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004036:	4a18      	ldr	r2, [pc, #96]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800403c:	4b16      	ldr	r3, [pc, #88]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b01      	cmp	r3, #1
 8004046:	d114      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fd fb94 	bl	8001774 <HAL_GetTick>
 800404c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404e:	e00a      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f7fd fb90 	bl	8001774 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e351      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004066:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0ee      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800407e:	d111      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800408c:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800408e:	400b      	ands	r3, r1
 8004090:	4901      	ldr	r1, [pc, #4]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
 8004096:	e00b      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004098:	40023800 	.word	0x40023800
 800409c:	40007000 	.word	0x40007000
 80040a0:	0ffffcff 	.word	0x0ffffcff
 80040a4:	4bac      	ldr	r3, [pc, #688]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4aab      	ldr	r2, [pc, #684]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040ae:	6093      	str	r3, [r2, #8]
 80040b0:	4ba9      	ldr	r3, [pc, #676]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040bc:	49a6      	ldr	r1, [pc, #664]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d010      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040ce:	4ba2      	ldr	r3, [pc, #648]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d4:	4aa0      	ldr	r2, [pc, #640]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040de:	4b9e      	ldr	r3, [pc, #632]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	499b      	ldr	r1, [pc, #620]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040fc:	4b96      	ldr	r3, [pc, #600]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800410a:	4993      	ldr	r1, [pc, #588]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800411e:	4b8e      	ldr	r3, [pc, #568]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004124:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800412c:	498a      	ldr	r1, [pc, #552]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004140:	4b85      	ldr	r3, [pc, #532]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004146:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414e:	4982      	ldr	r1, [pc, #520]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004162:	4b7d      	ldr	r3, [pc, #500]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	4979      	ldr	r1, [pc, #484]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004184:	4b74      	ldr	r3, [pc, #464]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	f023 0203 	bic.w	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	4971      	ldr	r1, [pc, #452]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041a6:	4b6c      	ldr	r3, [pc, #432]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	f023 020c 	bic.w	r2, r3, #12
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b4:	4968      	ldr	r1, [pc, #416]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041c8:	4b63      	ldr	r3, [pc, #396]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	4960      	ldr	r1, [pc, #384]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041ea:	4b5b      	ldr	r3, [pc, #364]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f8:	4957      	ldr	r1, [pc, #348]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800420c:	4b52      	ldr	r3, [pc, #328]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421a:	494f      	ldr	r1, [pc, #316]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800422e:	4b4a      	ldr	r3, [pc, #296]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004234:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	4946      	ldr	r1, [pc, #280]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004250:	4b41      	ldr	r3, [pc, #260]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425e:	493e      	ldr	r1, [pc, #248]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004272:	4b39      	ldr	r3, [pc, #228]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004278:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004280:	4935      	ldr	r1, [pc, #212]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004294:	4b30      	ldr	r3, [pc, #192]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042a2:	492d      	ldr	r1, [pc, #180]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d011      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042b6:	4b28      	ldr	r3, [pc, #160]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042c4:	4924      	ldr	r1, [pc, #144]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d4:	d101      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042d6:	2301      	movs	r3, #1
 80042d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004304:	4914      	ldr	r1, [pc, #80]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004328:	490b      	ldr	r1, [pc, #44]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00f      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800434c:	4902      	ldr	r1, [pc, #8]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004354:	e002      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004356:	bf00      	nop
 8004358:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00b      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004368:	4b8a      	ldr	r3, [pc, #552]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800436e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	4986      	ldr	r1, [pc, #536]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00b      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800438c:	4b81      	ldr	r3, [pc, #516]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004392:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800439c:	497d      	ldr	r1, [pc, #500]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d006      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80d6 	beq.w	8004564 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043b8:	4b76      	ldr	r3, [pc, #472]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a75      	ldr	r2, [pc, #468]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c4:	f7fd f9d6 	bl	8001774 <HAL_GetTick>
 80043c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043cc:	f7fd f9d2 	bl	8001774 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	; 0x64
 80043d8:	d901      	bls.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e195      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043de:	4b6d      	ldr	r3, [pc, #436]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d021      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d11d      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043fe:	4b65      	ldr	r3, [pc, #404]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800440c:	4b61      	ldr	r3, [pc, #388]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800440e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004412:	0e1b      	lsrs	r3, r3, #24
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	019a      	lsls	r2, r3, #6
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	431a      	orrs	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	061b      	lsls	r3, r3, #24
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	071b      	lsls	r3, r3, #28
 8004432:	4958      	ldr	r1, [pc, #352]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d004      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004458:	2b00      	cmp	r3, #0
 800445a:	d02e      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004464:	d129      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004466:	4b4b      	ldr	r3, [pc, #300]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004474:	4b47      	ldr	r3, [pc, #284]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447a:	0f1b      	lsrs	r3, r3, #28
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	019a      	lsls	r2, r3, #6
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	431a      	orrs	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	071b      	lsls	r3, r3, #28
 800449a:	493e      	ldr	r1, [pc, #248]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044a2:	4b3c      	ldr	r3, [pc, #240]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a8:	f023 021f 	bic.w	r2, r3, #31
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	3b01      	subs	r3, #1
 80044b2:	4938      	ldr	r1, [pc, #224]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d01d      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044c6:	4b33      	ldr	r3, [pc, #204]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044cc:	0e1b      	lsrs	r3, r3, #24
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044d4:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044da:	0f1b      	lsrs	r3, r3, #28
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	019a      	lsls	r2, r3, #6
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	431a      	orrs	r2, r3
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	431a      	orrs	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	071b      	lsls	r3, r3, #28
 80044fa:	4926      	ldr	r1, [pc, #152]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d011      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	019a      	lsls	r2, r3, #6
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	061b      	lsls	r3, r3, #24
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	071b      	lsls	r3, r3, #28
 800452a:	491a      	ldr	r1, [pc, #104]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004532:	4b18      	ldr	r3, [pc, #96]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a17      	ldr	r2, [pc, #92]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004538:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800453c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800453e:	f7fd f919 	bl	8001774 <HAL_GetTick>
 8004542:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004544:	e008      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004546:	f7fd f915 	bl	8001774 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b64      	cmp	r3, #100	; 0x64
 8004552:	d901      	bls.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e0d8      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b01      	cmp	r3, #1
 8004568:	f040 80ce 	bne.w	8004708 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a08      	ldr	r2, [pc, #32]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004578:	f7fd f8fc 	bl	8001774 <HAL_GetTick>
 800457c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800457e:	e00b      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004580:	f7fd f8f8 	bl	8001774 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	; 0x64
 800458c:	d904      	bls.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e0bb      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004592:	bf00      	nop
 8004594:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004598:	4b5e      	ldr	r3, [pc, #376]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045a4:	d0ec      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d02e      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d12a      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045ce:	4b51      	ldr	r3, [pc, #324]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	0c1b      	lsrs	r3, r3, #16
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045dc:	4b4d      	ldr	r3, [pc, #308]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	0f1b      	lsrs	r3, r3, #28
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	019a      	lsls	r2, r3, #6
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	041b      	lsls	r3, r3, #16
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	061b      	lsls	r3, r3, #24
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	071b      	lsls	r3, r3, #28
 8004602:	4944      	ldr	r1, [pc, #272]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800460a:	4b42      	ldr	r3, [pc, #264]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800460c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004610:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	3b01      	subs	r3, #1
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	493d      	ldr	r1, [pc, #244]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d022      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004638:	d11d      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800463a:	4b36      	ldr	r3, [pc, #216]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	0e1b      	lsrs	r3, r3, #24
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004648:	4b32      	ldr	r3, [pc, #200]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	0f1b      	lsrs	r3, r3, #28
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	019a      	lsls	r2, r3, #6
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	431a      	orrs	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	061b      	lsls	r3, r3, #24
 8004668:	431a      	orrs	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	071b      	lsls	r3, r3, #28
 800466e:	4929      	ldr	r1, [pc, #164]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d028      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004682:	4b24      	ldr	r3, [pc, #144]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	0e1b      	lsrs	r3, r3, #24
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004690:	4b20      	ldr	r3, [pc, #128]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	019a      	lsls	r2, r3, #6
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	041b      	lsls	r3, r3, #16
 80046a8:	431a      	orrs	r2, r3
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	061b      	lsls	r3, r3, #24
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	071b      	lsls	r3, r3, #28
 80046b6:	4917      	ldr	r1, [pc, #92]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046be:	4b15      	ldr	r3, [pc, #84]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	4911      	ldr	r1, [pc, #68]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046d4:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a0e      	ldr	r2, [pc, #56]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e0:	f7fd f848 	bl	8001774 <HAL_GetTick>
 80046e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046e8:	f7fd f844 	bl	8001774 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	; 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e007      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004706:	d1ef      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40023800 	.word	0x40023800

08004718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e049      	b.n	80047be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f841 	bl	80047c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f000 f9e8 	bl	8004b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
	...

080047dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d001      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e054      	b.n	800489e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a26      	ldr	r2, [pc, #152]	; (80048ac <HAL_TIM_Base_Start_IT+0xd0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d022      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481e:	d01d      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a22      	ldr	r2, [pc, #136]	; (80048b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d018      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a21      	ldr	r2, [pc, #132]	; (80048b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d013      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1f      	ldr	r2, [pc, #124]	; (80048b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00e      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1e      	ldr	r2, [pc, #120]	; (80048bc <HAL_TIM_Base_Start_IT+0xe0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d009      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1c      	ldr	r2, [pc, #112]	; (80048c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d004      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1b      	ldr	r2, [pc, #108]	; (80048c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d115      	bne.n	8004888 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	4b19      	ldr	r3, [pc, #100]	; (80048c8 <HAL_TIM_Base_Start_IT+0xec>)
 8004864:	4013      	ands	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b06      	cmp	r3, #6
 800486c:	d015      	beq.n	800489a <HAL_TIM_Base_Start_IT+0xbe>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004874:	d011      	beq.n	800489a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0201 	orr.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004886:	e008      	b.n	800489a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	e000      	b.n	800489c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40010000 	.word	0x40010000
 80048b0:	40000400 	.word	0x40000400
 80048b4:	40000800 	.word	0x40000800
 80048b8:	40000c00 	.word	0x40000c00
 80048bc:	40010400 	.word	0x40010400
 80048c0:	40014000 	.word	0x40014000
 80048c4:	40001800 	.word	0x40001800
 80048c8:	00010007 	.word	0x00010007

080048cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d020      	beq.n	8004930 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01b      	beq.n	8004930 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0202 	mvn.w	r2, #2
 8004900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f8e9 	bl	8004aee <HAL_TIM_IC_CaptureCallback>
 800491c:	e005      	b.n	800492a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f8db 	bl	8004ada <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f8ec 	bl	8004b02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	d020      	beq.n	800497c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01b      	beq.n	800497c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0204 	mvn.w	r2, #4
 800494c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f8c3 	bl	8004aee <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f8b5 	bl	8004ada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f8c6 	bl	8004b02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d020      	beq.n	80049c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01b      	beq.n	80049c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0208 	mvn.w	r2, #8
 8004998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2204      	movs	r2, #4
 800499e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f89d 	bl	8004aee <HAL_TIM_IC_CaptureCallback>
 80049b4:	e005      	b.n	80049c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f88f 	bl	8004ada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f8a0 	bl	8004b02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d020      	beq.n	8004a14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01b      	beq.n	8004a14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0210 	mvn.w	r2, #16
 80049e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2208      	movs	r2, #8
 80049ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f877 	bl	8004aee <HAL_TIM_IC_CaptureCallback>
 8004a00:	e005      	b.n	8004a0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f869 	bl	8004ada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f87a 	bl	8004b02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00c      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0201 	mvn.w	r2, #1
 8004a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fb ff82 	bl	800093c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d104      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00c      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f919 	bl	8004c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00c      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f911 	bl	8004cac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00c      	beq.n	8004aae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f834 	bl	8004b16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00c      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f06f 0220 	mvn.w	r2, #32
 8004aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f8d9 	bl	8004c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a46      	ldr	r2, [pc, #280]	; (8004c58 <TIM_Base_SetConfig+0x12c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d013      	beq.n	8004b6c <TIM_Base_SetConfig+0x40>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4a:	d00f      	beq.n	8004b6c <TIM_Base_SetConfig+0x40>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a43      	ldr	r2, [pc, #268]	; (8004c5c <TIM_Base_SetConfig+0x130>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00b      	beq.n	8004b6c <TIM_Base_SetConfig+0x40>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a42      	ldr	r2, [pc, #264]	; (8004c60 <TIM_Base_SetConfig+0x134>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d007      	beq.n	8004b6c <TIM_Base_SetConfig+0x40>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a41      	ldr	r2, [pc, #260]	; (8004c64 <TIM_Base_SetConfig+0x138>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d003      	beq.n	8004b6c <TIM_Base_SetConfig+0x40>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a40      	ldr	r2, [pc, #256]	; (8004c68 <TIM_Base_SetConfig+0x13c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d108      	bne.n	8004b7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a35      	ldr	r2, [pc, #212]	; (8004c58 <TIM_Base_SetConfig+0x12c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d02b      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8c:	d027      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a32      	ldr	r2, [pc, #200]	; (8004c5c <TIM_Base_SetConfig+0x130>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d023      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a31      	ldr	r2, [pc, #196]	; (8004c60 <TIM_Base_SetConfig+0x134>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d01f      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a30      	ldr	r2, [pc, #192]	; (8004c64 <TIM_Base_SetConfig+0x138>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d01b      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a2f      	ldr	r2, [pc, #188]	; (8004c68 <TIM_Base_SetConfig+0x13c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d017      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a2e      	ldr	r2, [pc, #184]	; (8004c6c <TIM_Base_SetConfig+0x140>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a2d      	ldr	r2, [pc, #180]	; (8004c70 <TIM_Base_SetConfig+0x144>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00f      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a2c      	ldr	r2, [pc, #176]	; (8004c74 <TIM_Base_SetConfig+0x148>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00b      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2b      	ldr	r2, [pc, #172]	; (8004c78 <TIM_Base_SetConfig+0x14c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d007      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a2a      	ldr	r2, [pc, #168]	; (8004c7c <TIM_Base_SetConfig+0x150>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d003      	beq.n	8004bde <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a29      	ldr	r2, [pc, #164]	; (8004c80 <TIM_Base_SetConfig+0x154>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d108      	bne.n	8004bf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a10      	ldr	r2, [pc, #64]	; (8004c58 <TIM_Base_SetConfig+0x12c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d003      	beq.n	8004c24 <TIM_Base_SetConfig+0xf8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a12      	ldr	r2, [pc, #72]	; (8004c68 <TIM_Base_SetConfig+0x13c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d103      	bne.n	8004c2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d105      	bne.n	8004c4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f023 0201 	bic.w	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	611a      	str	r2, [r3, #16]
  }
}
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40010000 	.word	0x40010000
 8004c5c:	40000400 	.word	0x40000400
 8004c60:	40000800 	.word	0x40000800
 8004c64:	40000c00 	.word	0x40000c00
 8004c68:	40010400 	.word	0x40010400
 8004c6c:	40014000 	.word	0x40014000
 8004c70:	40014400 	.word	0x40014400
 8004c74:	40014800 	.word	0x40014800
 8004c78:	40001800 	.word	0x40001800
 8004c7c:	40001c00 	.word	0x40001c00
 8004c80:	40002000 	.word	0x40002000

08004c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e040      	b.n	8004d54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fc faaa 	bl	800123c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2224      	movs	r2, #36	; 0x24
 8004cec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0201 	bic.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fb16 	bl	8005338 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f8af 	bl	8004e70 <UART_SetConfig>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e01b      	b.n	8004d54 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fb95 	bl	800547c <UART_CheckIdleState>
 8004d52:	4603      	mov	r3, r0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08a      	sub	sp, #40	; 0x28
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d177      	bne.n	8004e64 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_UART_Transmit+0x24>
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e070      	b.n	8004e66 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2221      	movs	r2, #33	; 0x21
 8004d90:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d92:	f7fc fcef 	bl	8001774 <HAL_GetTick>
 8004d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	88fa      	ldrh	r2, [r7, #6]
 8004d9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	88fa      	ldrh	r2, [r7, #6]
 8004da4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db0:	d108      	bne.n	8004dc4 <HAL_UART_Transmit+0x68>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d104      	bne.n	8004dc4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	e003      	b.n	8004dcc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dcc:	e02f      	b.n	8004e2e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2180      	movs	r1, #128	; 0x80
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fbf7 	bl	80055cc <UART_WaitOnFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d004      	beq.n	8004dee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e03b      	b.n	8004e66 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	3302      	adds	r3, #2
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	e007      	b.n	8004e1c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	781a      	ldrb	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1c9      	bne.n	8004dce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2200      	movs	r2, #0
 8004e42:	2140      	movs	r1, #64	; 0x40
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 fbc1 	bl	80055cc <UART_WaitOnFlagUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e005      	b.n	8004e66 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e000      	b.n	8004e66 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e64:	2302      	movs	r3, #2
  }
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	4ba6      	ldr	r3, [pc, #664]	; (8005134 <UART_SetConfig+0x2c4>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	6979      	ldr	r1, [r7, #20]
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a94      	ldr	r2, [pc, #592]	; (8005138 <UART_SetConfig+0x2c8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d120      	bne.n	8004f2e <UART_SetConfig+0xbe>
 8004eec:	4b93      	ldr	r3, [pc, #588]	; (800513c <UART_SetConfig+0x2cc>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d816      	bhi.n	8004f28 <UART_SetConfig+0xb8>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <UART_SetConfig+0x90>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f11 	.word	0x08004f11
 8004f04:	08004f1d 	.word	0x08004f1d
 8004f08:	08004f17 	.word	0x08004f17
 8004f0c:	08004f23 	.word	0x08004f23
 8004f10:	2301      	movs	r3, #1
 8004f12:	77fb      	strb	r3, [r7, #31]
 8004f14:	e150      	b.n	80051b8 <UART_SetConfig+0x348>
 8004f16:	2302      	movs	r3, #2
 8004f18:	77fb      	strb	r3, [r7, #31]
 8004f1a:	e14d      	b.n	80051b8 <UART_SetConfig+0x348>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	77fb      	strb	r3, [r7, #31]
 8004f20:	e14a      	b.n	80051b8 <UART_SetConfig+0x348>
 8004f22:	2308      	movs	r3, #8
 8004f24:	77fb      	strb	r3, [r7, #31]
 8004f26:	e147      	b.n	80051b8 <UART_SetConfig+0x348>
 8004f28:	2310      	movs	r3, #16
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e144      	b.n	80051b8 <UART_SetConfig+0x348>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a83      	ldr	r2, [pc, #524]	; (8005140 <UART_SetConfig+0x2d0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d132      	bne.n	8004f9e <UART_SetConfig+0x12e>
 8004f38:	4b80      	ldr	r3, [pc, #512]	; (800513c <UART_SetConfig+0x2cc>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b0c      	cmp	r3, #12
 8004f44:	d828      	bhi.n	8004f98 <UART_SetConfig+0x128>
 8004f46:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <UART_SetConfig+0xdc>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004f81 	.word	0x08004f81
 8004f50:	08004f99 	.word	0x08004f99
 8004f54:	08004f99 	.word	0x08004f99
 8004f58:	08004f99 	.word	0x08004f99
 8004f5c:	08004f8d 	.word	0x08004f8d
 8004f60:	08004f99 	.word	0x08004f99
 8004f64:	08004f99 	.word	0x08004f99
 8004f68:	08004f99 	.word	0x08004f99
 8004f6c:	08004f87 	.word	0x08004f87
 8004f70:	08004f99 	.word	0x08004f99
 8004f74:	08004f99 	.word	0x08004f99
 8004f78:	08004f99 	.word	0x08004f99
 8004f7c:	08004f93 	.word	0x08004f93
 8004f80:	2300      	movs	r3, #0
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e118      	b.n	80051b8 <UART_SetConfig+0x348>
 8004f86:	2302      	movs	r3, #2
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	e115      	b.n	80051b8 <UART_SetConfig+0x348>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e112      	b.n	80051b8 <UART_SetConfig+0x348>
 8004f92:	2308      	movs	r3, #8
 8004f94:	77fb      	strb	r3, [r7, #31]
 8004f96:	e10f      	b.n	80051b8 <UART_SetConfig+0x348>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	77fb      	strb	r3, [r7, #31]
 8004f9c:	e10c      	b.n	80051b8 <UART_SetConfig+0x348>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a68      	ldr	r2, [pc, #416]	; (8005144 <UART_SetConfig+0x2d4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d120      	bne.n	8004fea <UART_SetConfig+0x17a>
 8004fa8:	4b64      	ldr	r3, [pc, #400]	; (800513c <UART_SetConfig+0x2cc>)
 8004faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fb2:	2b30      	cmp	r3, #48	; 0x30
 8004fb4:	d013      	beq.n	8004fde <UART_SetConfig+0x16e>
 8004fb6:	2b30      	cmp	r3, #48	; 0x30
 8004fb8:	d814      	bhi.n	8004fe4 <UART_SetConfig+0x174>
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d009      	beq.n	8004fd2 <UART_SetConfig+0x162>
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d810      	bhi.n	8004fe4 <UART_SetConfig+0x174>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <UART_SetConfig+0x15c>
 8004fc6:	2b10      	cmp	r3, #16
 8004fc8:	d006      	beq.n	8004fd8 <UART_SetConfig+0x168>
 8004fca:	e00b      	b.n	8004fe4 <UART_SetConfig+0x174>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	e0f2      	b.n	80051b8 <UART_SetConfig+0x348>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	77fb      	strb	r3, [r7, #31]
 8004fd6:	e0ef      	b.n	80051b8 <UART_SetConfig+0x348>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	77fb      	strb	r3, [r7, #31]
 8004fdc:	e0ec      	b.n	80051b8 <UART_SetConfig+0x348>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	77fb      	strb	r3, [r7, #31]
 8004fe2:	e0e9      	b.n	80051b8 <UART_SetConfig+0x348>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	77fb      	strb	r3, [r7, #31]
 8004fe8:	e0e6      	b.n	80051b8 <UART_SetConfig+0x348>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a56      	ldr	r2, [pc, #344]	; (8005148 <UART_SetConfig+0x2d8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d120      	bne.n	8005036 <UART_SetConfig+0x1c6>
 8004ff4:	4b51      	ldr	r3, [pc, #324]	; (800513c <UART_SetConfig+0x2cc>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8005000:	d013      	beq.n	800502a <UART_SetConfig+0x1ba>
 8005002:	2bc0      	cmp	r3, #192	; 0xc0
 8005004:	d814      	bhi.n	8005030 <UART_SetConfig+0x1c0>
 8005006:	2b80      	cmp	r3, #128	; 0x80
 8005008:	d009      	beq.n	800501e <UART_SetConfig+0x1ae>
 800500a:	2b80      	cmp	r3, #128	; 0x80
 800500c:	d810      	bhi.n	8005030 <UART_SetConfig+0x1c0>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <UART_SetConfig+0x1a8>
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	d006      	beq.n	8005024 <UART_SetConfig+0x1b4>
 8005016:	e00b      	b.n	8005030 <UART_SetConfig+0x1c0>
 8005018:	2300      	movs	r3, #0
 800501a:	77fb      	strb	r3, [r7, #31]
 800501c:	e0cc      	b.n	80051b8 <UART_SetConfig+0x348>
 800501e:	2302      	movs	r3, #2
 8005020:	77fb      	strb	r3, [r7, #31]
 8005022:	e0c9      	b.n	80051b8 <UART_SetConfig+0x348>
 8005024:	2304      	movs	r3, #4
 8005026:	77fb      	strb	r3, [r7, #31]
 8005028:	e0c6      	b.n	80051b8 <UART_SetConfig+0x348>
 800502a:	2308      	movs	r3, #8
 800502c:	77fb      	strb	r3, [r7, #31]
 800502e:	e0c3      	b.n	80051b8 <UART_SetConfig+0x348>
 8005030:	2310      	movs	r3, #16
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e0c0      	b.n	80051b8 <UART_SetConfig+0x348>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a44      	ldr	r2, [pc, #272]	; (800514c <UART_SetConfig+0x2dc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d125      	bne.n	800508c <UART_SetConfig+0x21c>
 8005040:	4b3e      	ldr	r3, [pc, #248]	; (800513c <UART_SetConfig+0x2cc>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800504e:	d017      	beq.n	8005080 <UART_SetConfig+0x210>
 8005050:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005054:	d817      	bhi.n	8005086 <UART_SetConfig+0x216>
 8005056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505a:	d00b      	beq.n	8005074 <UART_SetConfig+0x204>
 800505c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005060:	d811      	bhi.n	8005086 <UART_SetConfig+0x216>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <UART_SetConfig+0x1fe>
 8005066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800506a:	d006      	beq.n	800507a <UART_SetConfig+0x20a>
 800506c:	e00b      	b.n	8005086 <UART_SetConfig+0x216>
 800506e:	2300      	movs	r3, #0
 8005070:	77fb      	strb	r3, [r7, #31]
 8005072:	e0a1      	b.n	80051b8 <UART_SetConfig+0x348>
 8005074:	2302      	movs	r3, #2
 8005076:	77fb      	strb	r3, [r7, #31]
 8005078:	e09e      	b.n	80051b8 <UART_SetConfig+0x348>
 800507a:	2304      	movs	r3, #4
 800507c:	77fb      	strb	r3, [r7, #31]
 800507e:	e09b      	b.n	80051b8 <UART_SetConfig+0x348>
 8005080:	2308      	movs	r3, #8
 8005082:	77fb      	strb	r3, [r7, #31]
 8005084:	e098      	b.n	80051b8 <UART_SetConfig+0x348>
 8005086:	2310      	movs	r3, #16
 8005088:	77fb      	strb	r3, [r7, #31]
 800508a:	e095      	b.n	80051b8 <UART_SetConfig+0x348>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a2f      	ldr	r2, [pc, #188]	; (8005150 <UART_SetConfig+0x2e0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d125      	bne.n	80050e2 <UART_SetConfig+0x272>
 8005096:	4b29      	ldr	r3, [pc, #164]	; (800513c <UART_SetConfig+0x2cc>)
 8005098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050a4:	d017      	beq.n	80050d6 <UART_SetConfig+0x266>
 80050a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050aa:	d817      	bhi.n	80050dc <UART_SetConfig+0x26c>
 80050ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b0:	d00b      	beq.n	80050ca <UART_SetConfig+0x25a>
 80050b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b6:	d811      	bhi.n	80050dc <UART_SetConfig+0x26c>
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <UART_SetConfig+0x254>
 80050bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c0:	d006      	beq.n	80050d0 <UART_SetConfig+0x260>
 80050c2:	e00b      	b.n	80050dc <UART_SetConfig+0x26c>
 80050c4:	2301      	movs	r3, #1
 80050c6:	77fb      	strb	r3, [r7, #31]
 80050c8:	e076      	b.n	80051b8 <UART_SetConfig+0x348>
 80050ca:	2302      	movs	r3, #2
 80050cc:	77fb      	strb	r3, [r7, #31]
 80050ce:	e073      	b.n	80051b8 <UART_SetConfig+0x348>
 80050d0:	2304      	movs	r3, #4
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e070      	b.n	80051b8 <UART_SetConfig+0x348>
 80050d6:	2308      	movs	r3, #8
 80050d8:	77fb      	strb	r3, [r7, #31]
 80050da:	e06d      	b.n	80051b8 <UART_SetConfig+0x348>
 80050dc:	2310      	movs	r3, #16
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e06a      	b.n	80051b8 <UART_SetConfig+0x348>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1b      	ldr	r2, [pc, #108]	; (8005154 <UART_SetConfig+0x2e4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d138      	bne.n	800515e <UART_SetConfig+0x2ee>
 80050ec:	4b13      	ldr	r3, [pc, #76]	; (800513c <UART_SetConfig+0x2cc>)
 80050ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80050f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050fa:	d017      	beq.n	800512c <UART_SetConfig+0x2bc>
 80050fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005100:	d82a      	bhi.n	8005158 <UART_SetConfig+0x2e8>
 8005102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005106:	d00b      	beq.n	8005120 <UART_SetConfig+0x2b0>
 8005108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800510c:	d824      	bhi.n	8005158 <UART_SetConfig+0x2e8>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <UART_SetConfig+0x2aa>
 8005112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005116:	d006      	beq.n	8005126 <UART_SetConfig+0x2b6>
 8005118:	e01e      	b.n	8005158 <UART_SetConfig+0x2e8>
 800511a:	2300      	movs	r3, #0
 800511c:	77fb      	strb	r3, [r7, #31]
 800511e:	e04b      	b.n	80051b8 <UART_SetConfig+0x348>
 8005120:	2302      	movs	r3, #2
 8005122:	77fb      	strb	r3, [r7, #31]
 8005124:	e048      	b.n	80051b8 <UART_SetConfig+0x348>
 8005126:	2304      	movs	r3, #4
 8005128:	77fb      	strb	r3, [r7, #31]
 800512a:	e045      	b.n	80051b8 <UART_SetConfig+0x348>
 800512c:	2308      	movs	r3, #8
 800512e:	77fb      	strb	r3, [r7, #31]
 8005130:	e042      	b.n	80051b8 <UART_SetConfig+0x348>
 8005132:	bf00      	nop
 8005134:	efff69f3 	.word	0xefff69f3
 8005138:	40011000 	.word	0x40011000
 800513c:	40023800 	.word	0x40023800
 8005140:	40004400 	.word	0x40004400
 8005144:	40004800 	.word	0x40004800
 8005148:	40004c00 	.word	0x40004c00
 800514c:	40005000 	.word	0x40005000
 8005150:	40011400 	.word	0x40011400
 8005154:	40007800 	.word	0x40007800
 8005158:	2310      	movs	r3, #16
 800515a:	77fb      	strb	r3, [r7, #31]
 800515c:	e02c      	b.n	80051b8 <UART_SetConfig+0x348>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a72      	ldr	r2, [pc, #456]	; (800532c <UART_SetConfig+0x4bc>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d125      	bne.n	80051b4 <UART_SetConfig+0x344>
 8005168:	4b71      	ldr	r3, [pc, #452]	; (8005330 <UART_SetConfig+0x4c0>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005172:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005176:	d017      	beq.n	80051a8 <UART_SetConfig+0x338>
 8005178:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800517c:	d817      	bhi.n	80051ae <UART_SetConfig+0x33e>
 800517e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005182:	d00b      	beq.n	800519c <UART_SetConfig+0x32c>
 8005184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005188:	d811      	bhi.n	80051ae <UART_SetConfig+0x33e>
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <UART_SetConfig+0x326>
 800518e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005192:	d006      	beq.n	80051a2 <UART_SetConfig+0x332>
 8005194:	e00b      	b.n	80051ae <UART_SetConfig+0x33e>
 8005196:	2300      	movs	r3, #0
 8005198:	77fb      	strb	r3, [r7, #31]
 800519a:	e00d      	b.n	80051b8 <UART_SetConfig+0x348>
 800519c:	2302      	movs	r3, #2
 800519e:	77fb      	strb	r3, [r7, #31]
 80051a0:	e00a      	b.n	80051b8 <UART_SetConfig+0x348>
 80051a2:	2304      	movs	r3, #4
 80051a4:	77fb      	strb	r3, [r7, #31]
 80051a6:	e007      	b.n	80051b8 <UART_SetConfig+0x348>
 80051a8:	2308      	movs	r3, #8
 80051aa:	77fb      	strb	r3, [r7, #31]
 80051ac:	e004      	b.n	80051b8 <UART_SetConfig+0x348>
 80051ae:	2310      	movs	r3, #16
 80051b0:	77fb      	strb	r3, [r7, #31]
 80051b2:	e001      	b.n	80051b8 <UART_SetConfig+0x348>
 80051b4:	2310      	movs	r3, #16
 80051b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c0:	d15b      	bne.n	800527a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80051c2:	7ffb      	ldrb	r3, [r7, #31]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d828      	bhi.n	800521a <UART_SetConfig+0x3aa>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x360>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051f5 	.word	0x080051f5
 80051d4:	080051fd 	.word	0x080051fd
 80051d8:	08005205 	.word	0x08005205
 80051dc:	0800521b 	.word	0x0800521b
 80051e0:	0800520b 	.word	0x0800520b
 80051e4:	0800521b 	.word	0x0800521b
 80051e8:	0800521b 	.word	0x0800521b
 80051ec:	0800521b 	.word	0x0800521b
 80051f0:	08005213 	.word	0x08005213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f4:	f7fe fe0e 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 80051f8:	61b8      	str	r0, [r7, #24]
        break;
 80051fa:	e013      	b.n	8005224 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051fc:	f7fe fe1e 	bl	8003e3c <HAL_RCC_GetPCLK2Freq>
 8005200:	61b8      	str	r0, [r7, #24]
        break;
 8005202:	e00f      	b.n	8005224 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005204:	4b4b      	ldr	r3, [pc, #300]	; (8005334 <UART_SetConfig+0x4c4>)
 8005206:	61bb      	str	r3, [r7, #24]
        break;
 8005208:	e00c      	b.n	8005224 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800520a:	f7fe fcf1 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 800520e:	61b8      	str	r0, [r7, #24]
        break;
 8005210:	e008      	b.n	8005224 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005216:	61bb      	str	r3, [r7, #24]
        break;
 8005218:	e004      	b.n	8005224 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	77bb      	strb	r3, [r7, #30]
        break;
 8005222:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d074      	beq.n	8005314 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	005a      	lsls	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	085b      	lsrs	r3, r3, #1
 8005234:	441a      	add	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	fbb2 f3f3 	udiv	r3, r2, r3
 800523e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b0f      	cmp	r3, #15
 8005244:	d916      	bls.n	8005274 <UART_SetConfig+0x404>
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524c:	d212      	bcs.n	8005274 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	b29b      	uxth	r3, r3
 8005252:	f023 030f 	bic.w	r3, r3, #15
 8005256:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	b29b      	uxth	r3, r3
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	b29a      	uxth	r2, r3
 8005264:	89fb      	ldrh	r3, [r7, #14]
 8005266:	4313      	orrs	r3, r2
 8005268:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	89fa      	ldrh	r2, [r7, #14]
 8005270:	60da      	str	r2, [r3, #12]
 8005272:	e04f      	b.n	8005314 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	77bb      	strb	r3, [r7, #30]
 8005278:	e04c      	b.n	8005314 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800527a:	7ffb      	ldrb	r3, [r7, #31]
 800527c:	2b08      	cmp	r3, #8
 800527e:	d828      	bhi.n	80052d2 <UART_SetConfig+0x462>
 8005280:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <UART_SetConfig+0x418>)
 8005282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005286:	bf00      	nop
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052bd 	.word	0x080052bd
 8005294:	080052d3 	.word	0x080052d3
 8005298:	080052c3 	.word	0x080052c3
 800529c:	080052d3 	.word	0x080052d3
 80052a0:	080052d3 	.word	0x080052d3
 80052a4:	080052d3 	.word	0x080052d3
 80052a8:	080052cb 	.word	0x080052cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ac:	f7fe fdb2 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 80052b0:	61b8      	str	r0, [r7, #24]
        break;
 80052b2:	e013      	b.n	80052dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b4:	f7fe fdc2 	bl	8003e3c <HAL_RCC_GetPCLK2Freq>
 80052b8:	61b8      	str	r0, [r7, #24]
        break;
 80052ba:	e00f      	b.n	80052dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052bc:	4b1d      	ldr	r3, [pc, #116]	; (8005334 <UART_SetConfig+0x4c4>)
 80052be:	61bb      	str	r3, [r7, #24]
        break;
 80052c0:	e00c      	b.n	80052dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c2:	f7fe fc95 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 80052c6:	61b8      	str	r0, [r7, #24]
        break;
 80052c8:	e008      	b.n	80052dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ce:	61bb      	str	r3, [r7, #24]
        break;
 80052d0:	e004      	b.n	80052dc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	77bb      	strb	r3, [r7, #30]
        break;
 80052da:	bf00      	nop
    }

    if (pclk != 0U)
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d018      	beq.n	8005314 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	085a      	lsrs	r2, r3, #1
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	441a      	add	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b0f      	cmp	r3, #15
 80052fa:	d909      	bls.n	8005310 <UART_SetConfig+0x4a0>
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005302:	d205      	bcs.n	8005310 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	b29a      	uxth	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60da      	str	r2, [r3, #12]
 800530e:	e001      	b.n	8005314 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005320:	7fbb      	ldrb	r3, [r7, #30]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40007c00 	.word	0x40007c00
 8005330:	40023800 	.word	0x40023800
 8005334:	00f42400 	.word	0x00f42400

08005338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01a      	beq.n	800544e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005436:	d10a      	bne.n	800544e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	605a      	str	r2, [r3, #4]
  }
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b098      	sub	sp, #96	; 0x60
 8005480:	af02      	add	r7, sp, #8
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800548c:	f7fc f972 	bl	8001774 <HAL_GetTick>
 8005490:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b08      	cmp	r3, #8
 800549e:	d12e      	bne.n	80054fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a8:	2200      	movs	r2, #0
 80054aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f88c 	bl	80055cc <UART_WaitOnFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d021      	beq.n	80054fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ce:	653b      	str	r3, [r7, #80]	; 0x50
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d8:	647b      	str	r3, [r7, #68]	; 0x44
 80054da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e6      	bne.n	80054ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e062      	b.n	80055c4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b04      	cmp	r3, #4
 800550a:	d149      	bne.n	80055a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800550c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005514:	2200      	movs	r2, #0
 8005516:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f856 	bl	80055cc <UART_WaitOnFlagUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d03c      	beq.n	80055a0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	623b      	str	r3, [r7, #32]
   return(result);
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800553a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005544:	633b      	str	r3, [r7, #48]	; 0x30
 8005546:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800554a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e6      	bne.n	8005526 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3308      	adds	r3, #8
 800555e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	60fb      	str	r3, [r7, #12]
   return(result);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0301 	bic.w	r3, r3, #1
 800556e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3308      	adds	r3, #8
 8005576:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005578:	61fa      	str	r2, [r7, #28]
 800557a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	69b9      	ldr	r1, [r7, #24]
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	617b      	str	r3, [r7, #20]
   return(result);
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e5      	bne.n	8005558 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e011      	b.n	80055c4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3758      	adds	r7, #88	; 0x58
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	4613      	mov	r3, r2
 80055da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055dc:	e04f      	b.n	800567e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055e4:	d04b      	beq.n	800567e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e6:	f7fc f8c5 	bl	8001774 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d302      	bcc.n	80055fc <UART_WaitOnFlagUntilTimeout+0x30>
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e04e      	b.n	800569e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	d037      	beq.n	800567e <UART_WaitOnFlagUntilTimeout+0xb2>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b80      	cmp	r3, #128	; 0x80
 8005612:	d034      	beq.n	800567e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d031      	beq.n	800567e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b08      	cmp	r3, #8
 8005626:	d110      	bne.n	800564a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2208      	movs	r2, #8
 800562e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f838 	bl	80056a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2208      	movs	r2, #8
 800563a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e029      	b.n	800569e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005658:	d111      	bne.n	800567e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005662:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 f81e 	bl	80056a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2220      	movs	r2, #32
 800566e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e00f      	b.n	800569e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4013      	ands	r3, r2
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	429a      	cmp	r2, r3
 800568c:	bf0c      	ite	eq
 800568e:	2301      	moveq	r3, #1
 8005690:	2300      	movne	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	429a      	cmp	r2, r3
 800569a:	d0a0      	beq.n	80055de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b095      	sub	sp, #84	; 0x54
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056cc:	643b      	str	r3, [r7, #64]	; 0x40
 80056ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e6      	bne.n	80056ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3308      	adds	r3, #8
 80056e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f023 0301 	bic.w	r3, r3, #1
 80056f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3308      	adds	r3, #8
 80056fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005700:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e5      	bne.n	80056e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005718:	2b01      	cmp	r3, #1
 800571a:	d118      	bne.n	800574e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	60bb      	str	r3, [r7, #8]
   return(result);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f023 0310 	bic.w	r3, r3, #16
 8005730:	647b      	str	r3, [r7, #68]	; 0x44
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6979      	ldr	r1, [r7, #20]
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	613b      	str	r3, [r7, #16]
   return(result);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e6      	bne.n	800571c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005762:	bf00      	nop
 8005764:	3754      	adds	r7, #84	; 0x54
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005770:	b084      	sub	sp, #16
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	f107 001c 	add.w	r0, r7, #28
 800577e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005782:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005786:	2b01      	cmp	r3, #1
 8005788:	d121      	bne.n	80057ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	4b21      	ldr	r3, [pc, #132]	; (8005820 <USB_CoreInit+0xb0>)
 800579c:	4013      	ands	r3, r2
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d105      	bne.n	80057c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fa92 	bl	8005cec <USB_CoreReset>
 80057c8:	4603      	mov	r3, r0
 80057ca:	73fb      	strb	r3, [r7, #15]
 80057cc:	e010      	b.n	80057f0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fa86 	bl	8005cec <USB_CoreReset>
 80057e0:	4603      	mov	r3, r0
 80057e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80057f0:	7fbb      	ldrb	r3, [r7, #30]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d10b      	bne.n	800580e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f043 0206 	orr.w	r2, r3, #6
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f043 0220 	orr.w	r2, r3, #32
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800580e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800581a:	b004      	add	sp, #16
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	ffbdffbf 	.word	0xffbdffbf

08005824 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f023 0201 	bic.w	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	460b      	mov	r3, r1
 8005850:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005862:	78fb      	ldrb	r3, [r7, #3]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d115      	bne.n	8005894 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005874:	200a      	movs	r0, #10
 8005876:	f7fb ff89 	bl	800178c <HAL_Delay>
      ms += 10U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	330a      	adds	r3, #10
 800587e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fa25 	bl	8005cd0 <USB_GetMode>
 8005886:	4603      	mov	r3, r0
 8005888:	2b01      	cmp	r3, #1
 800588a:	d01e      	beq.n	80058ca <USB_SetCurrentMode+0x84>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2bc7      	cmp	r3, #199	; 0xc7
 8005890:	d9f0      	bls.n	8005874 <USB_SetCurrentMode+0x2e>
 8005892:	e01a      	b.n	80058ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d115      	bne.n	80058c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058a6:	200a      	movs	r0, #10
 80058a8:	f7fb ff70 	bl	800178c <HAL_Delay>
      ms += 10U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	330a      	adds	r3, #10
 80058b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fa0c 	bl	8005cd0 <USB_GetMode>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <USB_SetCurrentMode+0x84>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2bc7      	cmp	r3, #199	; 0xc7
 80058c2:	d9f0      	bls.n	80058a6 <USB_SetCurrentMode+0x60>
 80058c4:	e001      	b.n	80058ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e005      	b.n	80058d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2bc8      	cmp	r3, #200	; 0xc8
 80058ce:	d101      	bne.n	80058d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058e0:	b084      	sub	sp, #16
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b086      	sub	sp, #24
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058fa:	2300      	movs	r3, #0
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	e009      	b.n	8005914 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	3340      	adds	r3, #64	; 0x40
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	2200      	movs	r2, #0
 800590c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	3301      	adds	r3, #1
 8005912:	613b      	str	r3, [r7, #16]
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2b0e      	cmp	r3, #14
 8005918:	d9f2      	bls.n	8005900 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800591a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800591e:	2b00      	cmp	r3, #0
 8005920:	d11c      	bne.n	800595c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005930:	f043 0302 	orr.w	r3, r3, #2
 8005934:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e005      	b.n	8005968 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800596e:	461a      	mov	r2, r3
 8005970:	2300      	movs	r3, #0
 8005972:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005974:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005978:	2b01      	cmp	r3, #1
 800597a:	d10d      	bne.n	8005998 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800597c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005980:	2b00      	cmp	r3, #0
 8005982:	d104      	bne.n	800598e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005984:	2100      	movs	r1, #0
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f968 	bl	8005c5c <USB_SetDevSpeed>
 800598c:	e008      	b.n	80059a0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800598e:	2101      	movs	r1, #1
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f963 	bl	8005c5c <USB_SetDevSpeed>
 8005996:	e003      	b.n	80059a0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005998:	2103      	movs	r1, #3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f95e 	bl	8005c5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059a0:	2110      	movs	r1, #16
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f8fa 	bl	8005b9c <USB_FlushTxFifo>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f924 	bl	8005c00 <USB_FlushRxFifo>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c8:	461a      	mov	r2, r3
 80059ca:	2300      	movs	r3, #0
 80059cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d4:	461a      	mov	r2, r3
 80059d6:	2300      	movs	r3, #0
 80059d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e0:	461a      	mov	r2, r3
 80059e2:	2300      	movs	r3, #0
 80059e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059e6:	2300      	movs	r3, #0
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	e043      	b.n	8005a74 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a02:	d118      	bne.n	8005a36 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10a      	bne.n	8005a20 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a16:	461a      	mov	r2, r3
 8005a18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	e013      	b.n	8005a48 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	e008      	b.n	8005a48 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a42:	461a      	mov	r2, r3
 8005a44:	2300      	movs	r3, #0
 8005a46:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	461a      	mov	r2, r3
 8005a56:	2300      	movs	r3, #0
 8005a58:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a66:	461a      	mov	r2, r3
 8005a68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	3301      	adds	r3, #1
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a78:	461a      	mov	r2, r3
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d3b5      	bcc.n	80059ec <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a80:	2300      	movs	r3, #0
 8005a82:	613b      	str	r3, [r7, #16]
 8005a84:	e043      	b.n	8005b0e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a9c:	d118      	bne.n	8005ad0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10a      	bne.n	8005aba <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	e013      	b.n	8005ae2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	e008      	b.n	8005ae2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005adc:	461a      	mov	r2, r3
 8005ade:	2300      	movs	r3, #0
 8005ae0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aee:	461a      	mov	r2, r3
 8005af0:	2300      	movs	r3, #0
 8005af2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b00:	461a      	mov	r2, r3
 8005b02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b12:	461a      	mov	r2, r3
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d3b5      	bcc.n	8005a86 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b2c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b3a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d105      	bne.n	8005b50 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	f043 0210 	orr.w	r2, r3, #16
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699a      	ldr	r2, [r3, #24]
 8005b54:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <USB_DevInit+0x2b4>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b5c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	f043 0208 	orr.w	r2, r3, #8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d105      	bne.n	8005b84 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699a      	ldr	r2, [r3, #24]
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <USB_DevInit+0x2b8>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b90:	b004      	add	sp, #16
 8005b92:	4770      	bx	lr
 8005b94:	803c3800 	.word	0x803c3800
 8005b98:	40000004 	.word	0x40000004

08005b9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3301      	adds	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005bb6:	d901      	bls.n	8005bbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e01b      	b.n	8005bf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	daf2      	bge.n	8005baa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	019b      	lsls	r3, r3, #6
 8005bcc:	f043 0220 	orr.w	r2, r3, #32
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005be0:	d901      	bls.n	8005be6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e006      	b.n	8005bf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	d0f0      	beq.n	8005bd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005c18:	d901      	bls.n	8005c1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e018      	b.n	8005c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	daf2      	bge.n	8005c0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2210      	movs	r2, #16
 8005c2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3301      	adds	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005c3c:	d901      	bls.n	8005c42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e006      	b.n	8005c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0310 	and.w	r3, r3, #16
 8005c4a:	2b10      	cmp	r3, #16
 8005c4c:	d0f0      	beq.n	8005c30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	68f9      	ldr	r1, [r7, #12]
 8005c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b085      	sub	sp, #20
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ca8:	f023 0303 	bic.w	r3, r3, #3
 8005cac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cbc:	f043 0302 	orr.w	r3, r3, #2
 8005cc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	f003 0301 	and.w	r3, r3, #1
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d04:	d901      	bls.n	8005d0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e01b      	b.n	8005d42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	daf2      	bge.n	8005cf8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f043 0201 	orr.w	r2, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3301      	adds	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d2e:	d901      	bls.n	8005d34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e006      	b.n	8005d42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d0f0      	beq.n	8005d22 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
	...

08005d50 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005d50:	b5b0      	push	{r4, r5, r7, lr}
 8005d52:	b08c      	sub	sp, #48	; 0x30
 8005d54:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005d56:	4b96      	ldr	r3, [pc, #600]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005d58:	22c0      	movs	r2, #192	; 0xc0
 8005d5a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005d5c:	4b94      	ldr	r3, [pc, #592]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005d5e:	22a8      	movs	r2, #168	; 0xa8
 8005d60:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8005d62:	4b93      	ldr	r3, [pc, #588]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005d64:	2201      	movs	r2, #1
 8005d66:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 3;
 8005d68:	4b91      	ldr	r3, [pc, #580]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005d6a:	2203      	movs	r2, #3
 8005d6c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005d6e:	4b91      	ldr	r3, [pc, #580]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005d70:	22ff      	movs	r2, #255	; 0xff
 8005d72:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005d74:	4b8f      	ldr	r3, [pc, #572]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005d76:	22ff      	movs	r2, #255	; 0xff
 8005d78:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005d7a:	4b8e      	ldr	r3, [pc, #568]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005d7c:	22ff      	movs	r2, #255	; 0xff
 8005d7e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005d80:	4b8c      	ldr	r3, [pc, #560]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005d86:	4b8c      	ldr	r3, [pc, #560]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005d88:	22c0      	movs	r2, #192	; 0xc0
 8005d8a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005d8c:	4b8a      	ldr	r3, [pc, #552]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005d8e:	22a8      	movs	r2, #168	; 0xa8
 8005d90:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8005d92:	4b89      	ldr	r3, [pc, #548]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005d98:	4b87      	ldr	r3, [pc, #540]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005d9e:	2100      	movs	r1, #0
 8005da0:	2000      	movs	r0, #0
 8005da2:	f004 f9fb 	bl	800a19c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005da6:	4b82      	ldr	r3, [pc, #520]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	061a      	lsls	r2, r3, #24
 8005dac:	4b80      	ldr	r3, [pc, #512]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	041b      	lsls	r3, r3, #16
 8005db2:	431a      	orrs	r2, r3
 8005db4:	4b7e      	ldr	r3, [pc, #504]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005db6:	789b      	ldrb	r3, [r3, #2]
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	4a7c      	ldr	r2, [pc, #496]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005dbe:	78d2      	ldrb	r2, [r2, #3]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	061a      	lsls	r2, r3, #24
 8005dc4:	4b7a      	ldr	r3, [pc, #488]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	0619      	lsls	r1, r3, #24
 8005dca:	4b79      	ldr	r3, [pc, #484]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005dcc:	785b      	ldrb	r3, [r3, #1]
 8005dce:	041b      	lsls	r3, r3, #16
 8005dd0:	4319      	orrs	r1, r3
 8005dd2:	4b77      	ldr	r3, [pc, #476]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005dd4:	789b      	ldrb	r3, [r3, #2]
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	4975      	ldr	r1, [pc, #468]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005ddc:	78c9      	ldrb	r1, [r1, #3]
 8005dde:	430b      	orrs	r3, r1
 8005de0:	021b      	lsls	r3, r3, #8
 8005de2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005de6:	431a      	orrs	r2, r3
 8005de8:	4b71      	ldr	r3, [pc, #452]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	0619      	lsls	r1, r3, #24
 8005dee:	4b70      	ldr	r3, [pc, #448]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	041b      	lsls	r3, r3, #16
 8005df4:	4319      	orrs	r1, r3
 8005df6:	4b6e      	ldr	r3, [pc, #440]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005df8:	789b      	ldrb	r3, [r3, #2]
 8005dfa:	021b      	lsls	r3, r3, #8
 8005dfc:	430b      	orrs	r3, r1
 8005dfe:	496c      	ldr	r1, [pc, #432]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005e00:	78c9      	ldrb	r1, [r1, #3]
 8005e02:	430b      	orrs	r3, r1
 8005e04:	0a1b      	lsrs	r3, r3, #8
 8005e06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	4b68      	ldr	r3, [pc, #416]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	0619      	lsls	r1, r3, #24
 8005e12:	4b67      	ldr	r3, [pc, #412]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005e14:	785b      	ldrb	r3, [r3, #1]
 8005e16:	041b      	lsls	r3, r3, #16
 8005e18:	4319      	orrs	r1, r3
 8005e1a:	4b65      	ldr	r3, [pc, #404]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005e1c:	789b      	ldrb	r3, [r3, #2]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	430b      	orrs	r3, r1
 8005e22:	4963      	ldr	r1, [pc, #396]	; (8005fb0 <MX_LWIP_Init+0x260>)
 8005e24:	78c9      	ldrb	r1, [r1, #3]
 8005e26:	430b      	orrs	r3, r1
 8005e28:	0e1b      	lsrs	r3, r3, #24
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	4a63      	ldr	r2, [pc, #396]	; (8005fbc <MX_LWIP_Init+0x26c>)
 8005e2e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005e30:	4b60      	ldr	r3, [pc, #384]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	061a      	lsls	r2, r3, #24
 8005e36:	4b5f      	ldr	r3, [pc, #380]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005e38:	785b      	ldrb	r3, [r3, #1]
 8005e3a:	041b      	lsls	r3, r3, #16
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	4b5d      	ldr	r3, [pc, #372]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005e40:	789b      	ldrb	r3, [r3, #2]
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	4313      	orrs	r3, r2
 8005e46:	4a5b      	ldr	r2, [pc, #364]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005e48:	78d2      	ldrb	r2, [r2, #3]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	061a      	lsls	r2, r3, #24
 8005e4e:	4b59      	ldr	r3, [pc, #356]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	0619      	lsls	r1, r3, #24
 8005e54:	4b57      	ldr	r3, [pc, #348]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	041b      	lsls	r3, r3, #16
 8005e5a:	4319      	orrs	r1, r3
 8005e5c:	4b55      	ldr	r3, [pc, #340]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005e5e:	789b      	ldrb	r3, [r3, #2]
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	430b      	orrs	r3, r1
 8005e64:	4953      	ldr	r1, [pc, #332]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005e66:	78c9      	ldrb	r1, [r1, #3]
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e70:	431a      	orrs	r2, r3
 8005e72:	4b50      	ldr	r3, [pc, #320]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	0619      	lsls	r1, r3, #24
 8005e78:	4b4e      	ldr	r3, [pc, #312]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	041b      	lsls	r3, r3, #16
 8005e7e:	4319      	orrs	r1, r3
 8005e80:	4b4c      	ldr	r3, [pc, #304]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005e82:	789b      	ldrb	r3, [r3, #2]
 8005e84:	021b      	lsls	r3, r3, #8
 8005e86:	430b      	orrs	r3, r1
 8005e88:	494a      	ldr	r1, [pc, #296]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005e8a:	78c9      	ldrb	r1, [r1, #3]
 8005e8c:	430b      	orrs	r3, r1
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e94:	431a      	orrs	r2, r3
 8005e96:	4b47      	ldr	r3, [pc, #284]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	0619      	lsls	r1, r3, #24
 8005e9c:	4b45      	ldr	r3, [pc, #276]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005e9e:	785b      	ldrb	r3, [r3, #1]
 8005ea0:	041b      	lsls	r3, r3, #16
 8005ea2:	4319      	orrs	r1, r3
 8005ea4:	4b43      	ldr	r3, [pc, #268]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005ea6:	789b      	ldrb	r3, [r3, #2]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	430b      	orrs	r3, r1
 8005eac:	4941      	ldr	r1, [pc, #260]	; (8005fb4 <MX_LWIP_Init+0x264>)
 8005eae:	78c9      	ldrb	r1, [r1, #3]
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	0e1b      	lsrs	r3, r3, #24
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	4a42      	ldr	r2, [pc, #264]	; (8005fc0 <MX_LWIP_Init+0x270>)
 8005eb8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005eba:	4b3f      	ldr	r3, [pc, #252]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	061a      	lsls	r2, r3, #24
 8005ec0:	4b3d      	ldr	r3, [pc, #244]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005ec2:	785b      	ldrb	r3, [r3, #1]
 8005ec4:	041b      	lsls	r3, r3, #16
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	4b3b      	ldr	r3, [pc, #236]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005eca:	789b      	ldrb	r3, [r3, #2]
 8005ecc:	021b      	lsls	r3, r3, #8
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	4a39      	ldr	r2, [pc, #228]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005ed2:	78d2      	ldrb	r2, [r2, #3]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	061a      	lsls	r2, r3, #24
 8005ed8:	4b37      	ldr	r3, [pc, #220]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	0619      	lsls	r1, r3, #24
 8005ede:	4b36      	ldr	r3, [pc, #216]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005ee0:	785b      	ldrb	r3, [r3, #1]
 8005ee2:	041b      	lsls	r3, r3, #16
 8005ee4:	4319      	orrs	r1, r3
 8005ee6:	4b34      	ldr	r3, [pc, #208]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005ee8:	789b      	ldrb	r3, [r3, #2]
 8005eea:	021b      	lsls	r3, r3, #8
 8005eec:	430b      	orrs	r3, r1
 8005eee:	4932      	ldr	r1, [pc, #200]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005ef0:	78c9      	ldrb	r1, [r1, #3]
 8005ef2:	430b      	orrs	r3, r1
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005efa:	431a      	orrs	r2, r3
 8005efc:	4b2e      	ldr	r3, [pc, #184]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	0619      	lsls	r1, r3, #24
 8005f02:	4b2d      	ldr	r3, [pc, #180]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005f04:	785b      	ldrb	r3, [r3, #1]
 8005f06:	041b      	lsls	r3, r3, #16
 8005f08:	4319      	orrs	r1, r3
 8005f0a:	4b2b      	ldr	r3, [pc, #172]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005f0c:	789b      	ldrb	r3, [r3, #2]
 8005f0e:	021b      	lsls	r3, r3, #8
 8005f10:	430b      	orrs	r3, r1
 8005f12:	4929      	ldr	r1, [pc, #164]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005f14:	78c9      	ldrb	r1, [r1, #3]
 8005f16:	430b      	orrs	r3, r1
 8005f18:	0a1b      	lsrs	r3, r3, #8
 8005f1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	4b25      	ldr	r3, [pc, #148]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	0619      	lsls	r1, r3, #24
 8005f26:	4b24      	ldr	r3, [pc, #144]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005f28:	785b      	ldrb	r3, [r3, #1]
 8005f2a:	041b      	lsls	r3, r3, #16
 8005f2c:	4319      	orrs	r1, r3
 8005f2e:	4b22      	ldr	r3, [pc, #136]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005f30:	789b      	ldrb	r3, [r3, #2]
 8005f32:	021b      	lsls	r3, r3, #8
 8005f34:	430b      	orrs	r3, r1
 8005f36:	4920      	ldr	r1, [pc, #128]	; (8005fb8 <MX_LWIP_Init+0x268>)
 8005f38:	78c9      	ldrb	r1, [r1, #3]
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	0e1b      	lsrs	r3, r3, #24
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	4a20      	ldr	r2, [pc, #128]	; (8005fc4 <MX_LWIP_Init+0x274>)
 8005f42:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005f44:	4b20      	ldr	r3, [pc, #128]	; (8005fc8 <MX_LWIP_Init+0x278>)
 8005f46:	9302      	str	r3, [sp, #8]
 8005f48:	4b20      	ldr	r3, [pc, #128]	; (8005fcc <MX_LWIP_Init+0x27c>)
 8005f4a:	9301      	str	r3, [sp, #4]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	4b1c      	ldr	r3, [pc, #112]	; (8005fc4 <MX_LWIP_Init+0x274>)
 8005f52:	4a1b      	ldr	r2, [pc, #108]	; (8005fc0 <MX_LWIP_Init+0x270>)
 8005f54:	4919      	ldr	r1, [pc, #100]	; (8005fbc <MX_LWIP_Init+0x26c>)
 8005f56:	481e      	ldr	r0, [pc, #120]	; (8005fd0 <MX_LWIP_Init+0x280>)
 8005f58:	f004 feea 	bl	800ad30 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005f5c:	481c      	ldr	r0, [pc, #112]	; (8005fd0 <MX_LWIP_Init+0x280>)
 8005f5e:	f005 f899 	bl	800b094 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005f62:	4b1b      	ldr	r3, [pc, #108]	; (8005fd0 <MX_LWIP_Init+0x280>)
 8005f64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f68:	089b      	lsrs	r3, r3, #2
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005f74:	4816      	ldr	r0, [pc, #88]	; (8005fd0 <MX_LWIP_Init+0x280>)
 8005f76:	f005 f89d 	bl	800b0b4 <netif_set_up>
 8005f7a:	e002      	b.n	8005f82 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005f7c:	4814      	ldr	r0, [pc, #80]	; (8005fd0 <MX_LWIP_Init+0x280>)
 8005f7e:	f005 f905 	bl	800b18c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005f82:	4914      	ldr	r1, [pc, #80]	; (8005fd4 <MX_LWIP_Init+0x284>)
 8005f84:	4812      	ldr	r0, [pc, #72]	; (8005fd0 <MX_LWIP_Init+0x280>)
 8005f86:	f005 f997 	bl	800b2b8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8005f8a:	4b13      	ldr	r3, [pc, #76]	; (8005fd8 <MX_LWIP_Init+0x288>)
 8005f8c:	1d3c      	adds	r4, r7, #4
 8005f8e:	461d      	mov	r5, r3
 8005f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005f98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8005f9c:	1d3b      	adds	r3, r7, #4
 8005f9e:	490c      	ldr	r1, [pc, #48]	; (8005fd0 <MX_LWIP_Init+0x280>)
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fd47 	bl	8006a34 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005fa6:	bf00      	nop
 8005fa8:	3720      	adds	r7, #32
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bdb0      	pop	{r4, r5, r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000d4c 	.word	0x20000d4c
 8005fb4:	20000d50 	.word	0x20000d50
 8005fb8:	20000d54 	.word	0x20000d54
 8005fbc:	20000d40 	.word	0x20000d40
 8005fc0:	20000d44 	.word	0x20000d44
 8005fc4:	20000d48 	.word	0x20000d48
 8005fc8:	0800a0d9 	.word	0x0800a0d9
 8005fcc:	080064d5 	.word	0x080064d5
 8005fd0:	20000d0c 	.word	0x20000d0c
 8005fd4:	08005fdd 	.word	0x08005fdd
 8005fd8:	08016038 	.word	0x08016038

08005fdc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8006002:	2320      	movs	r3, #32
 8006004:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006006:	f3bf 8f4f 	dsb	sy
}
 800600a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800600c:	e00b      	b.n	8006026 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800600e:	4a0d      	ldr	r2, [pc, #52]	; (8006044 <SCB_InvalidateDCache_by_Addr+0x54>)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4413      	add	r3, r2
 800601c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	dcf0      	bgt.n	800600e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800602c:	f3bf 8f4f 	dsb	sy
}
 8006030:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006032:	f3bf 8f6f 	isb	sy
}
 8006036:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8006038:	bf00      	nop
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	e000ed00 	.word	0xe000ed00

08006048 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8006050:	4b04      	ldr	r3, [pc, #16]	; (8006064 <HAL_ETH_RxCpltCallback+0x1c>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fe37 	bl	8006cc8 <osSemaphoreRelease>
}
 800605a:	bf00      	nop
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	200056e4 	.word	0x200056e4

08006068 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8006070:	4b04      	ldr	r3, [pc, #16]	; (8006084 <HAL_ETH_TxCpltCallback+0x1c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f000 fe27 	bl	8006cc8 <osSemaphoreRelease>
}
 800607a:	bf00      	nop
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	200056e8 	.word	0x200056e8

08006088 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7fc fabd 	bl	8002610 <HAL_ETH_GetDMAError>
 8006096:	4603      	mov	r3, r0
 8006098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609c:	2b80      	cmp	r3, #128	; 0x80
 800609e:	d104      	bne.n	80060aa <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80060a0:	4b04      	ldr	r3, [pc, #16]	; (80060b4 <HAL_ETH_ErrorCallback+0x2c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 fe0f 	bl	8006cc8 <osSemaphoreRelease>
  }
}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	200056e4 	.word	0x200056e4

080060b8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80060b8:	b5b0      	push	{r4, r5, r7, lr}
 80060ba:	b0a8      	sub	sp, #160	; 0xa0
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 80060cc:	2300      	movs	r3, #0
 80060ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 80060d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060d6:	2264      	movs	r2, #100	; 0x64
 80060d8:	2100      	movs	r1, #0
 80060da:	4618      	mov	r0, r3
 80060dc:	f00e fd59 	bl	8014b92 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80060e0:	4b85      	ldr	r3, [pc, #532]	; (80062f8 <low_level_init+0x240>)
 80060e2:	4a86      	ldr	r2, [pc, #536]	; (80062fc <low_level_init+0x244>)
 80060e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80060e6:	2300      	movs	r3, #0
 80060e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 80060ec:	2380      	movs	r3, #128	; 0x80
 80060ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 80060f2:	23e1      	movs	r3, #225	; 0xe1
 80060f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 80060f8:	2300      	movs	r3, #0
 80060fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 80060fe:	2300      	movs	r3, #0
 8006100:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8006104:	2300      	movs	r3, #0
 8006106:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800610a:	4a7b      	ldr	r2, [pc, #492]	; (80062f8 <low_level_init+0x240>)
 800610c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006110:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006112:	4b79      	ldr	r3, [pc, #484]	; (80062f8 <low_level_init+0x240>)
 8006114:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006118:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800611a:	4b77      	ldr	r3, [pc, #476]	; (80062f8 <low_level_init+0x240>)
 800611c:	4a78      	ldr	r2, [pc, #480]	; (8006300 <low_level_init+0x248>)
 800611e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006120:	4b75      	ldr	r3, [pc, #468]	; (80062f8 <low_level_init+0x240>)
 8006122:	4a78      	ldr	r2, [pc, #480]	; (8006304 <low_level_init+0x24c>)
 8006124:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006126:	4b74      	ldr	r3, [pc, #464]	; (80062f8 <low_level_init+0x240>)
 8006128:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800612c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800612e:	4872      	ldr	r0, [pc, #456]	; (80062f8 <low_level_init+0x240>)
 8006130:	f7fb fc32 	bl	8001998 <HAL_ETH_Init>
 8006134:	4603      	mov	r3, r0
 8006136:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800613a:	2238      	movs	r2, #56	; 0x38
 800613c:	2100      	movs	r1, #0
 800613e:	4872      	ldr	r0, [pc, #456]	; (8006308 <low_level_init+0x250>)
 8006140:	f00e fd27 	bl	8014b92 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006144:	4b70      	ldr	r3, [pc, #448]	; (8006308 <low_level_init+0x250>)
 8006146:	2221      	movs	r2, #33	; 0x21
 8006148:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800614a:	4b6f      	ldr	r3, [pc, #444]	; (8006308 <low_level_init+0x250>)
 800614c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006150:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006152:	4b6d      	ldr	r3, [pc, #436]	; (8006308 <low_level_init+0x250>)
 8006154:	2200      	movs	r2, #0
 8006156:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006158:	486c      	ldr	r0, [pc, #432]	; (800630c <low_level_init+0x254>)
 800615a:	f004 fca3 	bl	800aaa4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2206      	movs	r2, #6
 8006162:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006166:	4b64      	ldr	r3, [pc, #400]	; (80062f8 <low_level_init+0x240>)
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	781a      	ldrb	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006172:	4b61      	ldr	r3, [pc, #388]	; (80062f8 <low_level_init+0x240>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	785a      	ldrb	r2, [r3, #1]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800617e:	4b5e      	ldr	r3, [pc, #376]	; (80062f8 <low_level_init+0x240>)
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	789a      	ldrb	r2, [r3, #2]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800618a:	4b5b      	ldr	r3, [pc, #364]	; (80062f8 <low_level_init+0x240>)
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	78da      	ldrb	r2, [r3, #3]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006196:	4b58      	ldr	r3, [pc, #352]	; (80062f8 <low_level_init+0x240>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	791a      	ldrb	r2, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80061a2:	4b55      	ldr	r3, [pc, #340]	; (80062f8 <low_level_init+0x240>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	795a      	ldrb	r2, [r3, #5]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80061b4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061bc:	f043 030a 	orr.w	r3, r3, #10
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 80061c8:	2203      	movs	r2, #3
 80061ca:	2100      	movs	r1, #0
 80061cc:	2001      	movs	r0, #1
 80061ce:	f001 f9cf 	bl	8007570 <xQueueGenericCreate>
 80061d2:	4603      	mov	r3, r0
 80061d4:	4a4e      	ldr	r2, [pc, #312]	; (8006310 <low_level_init+0x258>)
 80061d6:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 80061d8:	2203      	movs	r2, #3
 80061da:	2100      	movs	r1, #0
 80061dc:	2001      	movs	r0, #1
 80061de:	f001 f9c7 	bl	8007570 <xQueueGenericCreate>
 80061e2:	4603      	mov	r3, r0
 80061e4:	4a4b      	ldr	r2, [pc, #300]	; (8006314 <low_level_init+0x25c>)
 80061e6:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80061e8:	4b4b      	ldr	r3, [pc, #300]	; (8006318 <low_level_init+0x260>)
 80061ea:	f107 0408 	add.w	r4, r7, #8
 80061ee:	461d      	mov	r5, r3
 80061f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80061f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80061fc:	f107 0308 	add.w	r3, r7, #8
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fc16 	bl	8006a34 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006208:	4944      	ldr	r1, [pc, #272]	; (800631c <low_level_init+0x264>)
 800620a:	4845      	ldr	r0, [pc, #276]	; (8006320 <low_level_init+0x268>)
 800620c:	f7fb f98b 	bl	8001526 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8006210:	4843      	ldr	r0, [pc, #268]	; (8006320 <low_level_init+0x268>)
 8006212:	f7fb f9ba 	bl	800158a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006216:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800621a:	2b00      	cmp	r3, #0
 800621c:	d165      	bne.n	80062ea <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800621e:	4840      	ldr	r0, [pc, #256]	; (8006320 <low_level_init+0x268>)
 8006220:	f7fb fa00 	bl	8001624 <LAN8742_GetLinkState>
 8006224:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006228:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800622c:	2b01      	cmp	r3, #1
 800622e:	dc06      	bgt.n	800623e <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f005 f811 	bl	800b258 <netif_set_link_down>
      netif_set_down(netif);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f004 ffa8 	bl	800b18c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800623c:	e057      	b.n	80062ee <low_level_init+0x236>
      switch (PHYLinkState)
 800623e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006242:	3b02      	subs	r3, #2
 8006244:	2b03      	cmp	r3, #3
 8006246:	d82b      	bhi.n	80062a0 <low_level_init+0x1e8>
 8006248:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <low_level_init+0x198>)
 800624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624e:	bf00      	nop
 8006250:	08006261 	.word	0x08006261
 8006254:	08006273 	.word	0x08006273
 8006258:	08006283 	.word	0x08006283
 800625c:	08006293 	.word	0x08006293
        duplex = ETH_FULLDUPLEX_MODE;
 8006260:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8006268:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800626c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006270:	e01f      	b.n	80062b2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8006272:	2300      	movs	r3, #0
 8006274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8006278:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800627c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006280:	e017      	b.n	80062b2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8006282:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006286:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800628a:	2300      	movs	r3, #0
 800628c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006290:	e00f      	b.n	80062b2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8006292:	2300      	movs	r3, #0
 8006294:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8006298:	2300      	movs	r3, #0
 800629a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800629e:	e008      	b.n	80062b2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80062a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80062a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80062b0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80062b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062b6:	4619      	mov	r1, r3
 80062b8:	480f      	ldr	r0, [pc, #60]	; (80062f8 <low_level_init+0x240>)
 80062ba:	f7fc f855 	bl	8002368 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80062be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062c2:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 80062c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062c8:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80062ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062ce:	4619      	mov	r1, r3
 80062d0:	4809      	ldr	r0, [pc, #36]	; (80062f8 <low_level_init+0x240>)
 80062d2:	f7fc f940 	bl	8002556 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80062d6:	4808      	ldr	r0, [pc, #32]	; (80062f8 <low_level_init+0x240>)
 80062d8:	f7fb fbf8 	bl	8001acc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f004 fee9 	bl	800b0b4 <netif_set_up>
    netif_set_link_up(netif);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f004 ff84 	bl	800b1f0 <netif_set_link_up>
}
 80062e8:	e001      	b.n	80062ee <low_level_init+0x236>
    Error_Handler();
 80062ea:	f7fa fb39 	bl	8000960 <Error_Handler>
}
 80062ee:	bf00      	nop
 80062f0:	37a0      	adds	r7, #160	; 0xa0
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bdb0      	pop	{r4, r5, r7, pc}
 80062f6:	bf00      	nop
 80062f8:	200056ec 	.word	0x200056ec
 80062fc:	40028000 	.word	0x40028000
 8006300:	20000134 	.word	0x20000134
 8006304:	20000094 	.word	0x20000094
 8006308:	2000579c 	.word	0x2000579c
 800630c:	08018b74 	.word	0x08018b74
 8006310:	200056e4 	.word	0x200056e4
 8006314:	200056e8 	.word	0x200056e8
 8006318:	0801605c 	.word	0x0801605c
 800631c:	2000000c 	.word	0x2000000c
 8006320:	200057d4 	.word	0x200057d4

08006324 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b092      	sub	sp, #72	; 0x48
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8006332:	2300      	movs	r3, #0
 8006334:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800633c:	f107 030c 	add.w	r3, r7, #12
 8006340:	2230      	movs	r2, #48	; 0x30
 8006342:	2100      	movs	r1, #0
 8006344:	4618      	mov	r0, r3
 8006346:	f00e fc24 	bl	8014b92 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800634a:	f107 030c 	add.w	r3, r7, #12
 800634e:	2230      	movs	r2, #48	; 0x30
 8006350:	2100      	movs	r1, #0
 8006352:	4618      	mov	r0, r3
 8006354:	f00e fc1d 	bl	8014b92 <memset>

  for(q = p; q != NULL; q = q->next)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	643b      	str	r3, [r7, #64]	; 0x40
 800635c:	e045      	b.n	80063ea <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800635e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006360:	2b03      	cmp	r3, #3
 8006362:	d902      	bls.n	800636a <low_level_output+0x46>
      return ERR_IF;
 8006364:	f06f 030b 	mvn.w	r3, #11
 8006368:	e065      	b.n	8006436 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800636a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800636c:	6859      	ldr	r1, [r3, #4]
 800636e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006370:	4613      	mov	r3, r2
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	4413      	add	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	3348      	adds	r3, #72	; 0x48
 800637a:	443b      	add	r3, r7
 800637c:	3b3c      	subs	r3, #60	; 0x3c
 800637e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006382:	895b      	ldrh	r3, [r3, #10]
 8006384:	4619      	mov	r1, r3
 8006386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006388:	4613      	mov	r3, r2
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	3348      	adds	r3, #72	; 0x48
 8006392:	443b      	add	r3, r7
 8006394:	3b38      	subs	r3, #56	; 0x38
 8006396:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800639a:	2b00      	cmp	r3, #0
 800639c:	d011      	beq.n	80063c2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800639e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a0:	1e5a      	subs	r2, r3, #1
 80063a2:	f107 000c 	add.w	r0, r7, #12
 80063a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063a8:	460b      	mov	r3, r1
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	440b      	add	r3, r1
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	18c1      	adds	r1, r0, r3
 80063b2:	4613      	mov	r3, r2
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	4413      	add	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	3348      	adds	r3, #72	; 0x48
 80063bc:	443b      	add	r3, r7
 80063be:	3b34      	subs	r3, #52	; 0x34
 80063c0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80063c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d109      	bne.n	80063de <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80063ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063cc:	4613      	mov	r3, r2
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	3348      	adds	r3, #72	; 0x48
 80063d6:	443b      	add	r3, r7
 80063d8:	3b34      	subs	r3, #52	; 0x34
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]
    }

    i++;
 80063de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e0:	3301      	adds	r3, #1
 80063e2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80063e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	643b      	str	r3, [r7, #64]	; 0x40
 80063ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1b6      	bne.n	800635e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	891b      	ldrh	r3, [r3, #8]
 80063f4:	461a      	mov	r2, r3
 80063f6:	4b12      	ldr	r3, [pc, #72]	; (8006440 <low_level_output+0x11c>)
 80063f8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80063fa:	4a11      	ldr	r2, [pc, #68]	; (8006440 <low_level_output+0x11c>)
 80063fc:	f107 030c 	add.w	r3, r7, #12
 8006400:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006402:	4a0f      	ldr	r2, [pc, #60]	; (8006440 <low_level_output+0x11c>)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8006408:	6838      	ldr	r0, [r7, #0]
 800640a:	f005 fba9 	bl	800bb60 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800640e:	490c      	ldr	r1, [pc, #48]	; (8006440 <low_level_output+0x11c>)
 8006410:	480c      	ldr	r0, [pc, #48]	; (8006444 <low_level_output+0x120>)
 8006412:	f7fb fc4b 	bl	8001cac <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8006416:	bf00      	nop
 8006418:	4b0b      	ldr	r3, [pc, #44]	; (8006448 <low_level_output+0x124>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006420:	4618      	mov	r0, r3
 8006422:	f000 fc03 	bl	8006c2c <osSemaphoreWait>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1f5      	bne.n	8006418 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800642c:	4805      	ldr	r0, [pc, #20]	; (8006444 <low_level_output+0x120>)
 800642e:	f7fb fddd 	bl	8001fec <HAL_ETH_ReleaseTxPacket>

  return errval;
 8006432:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006436:	4618      	mov	r0, r3
 8006438:	3748      	adds	r7, #72	; 0x48
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	2000579c 	.word	0x2000579c
 8006444:	200056ec 	.word	0x200056ec
 8006448:	200056e8 	.word	0x200056e8

0800644c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006458:	4b07      	ldr	r3, [pc, #28]	; (8006478 <low_level_input+0x2c>)
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d105      	bne.n	800646c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006460:	f107 030c 	add.w	r3, r7, #12
 8006464:	4619      	mov	r1, r3
 8006466:	4805      	ldr	r0, [pc, #20]	; (800647c <low_level_input+0x30>)
 8006468:	f7fb fc7c 	bl	8001d64 <HAL_ETH_ReadData>
  }

  return p;
 800646c:	68fb      	ldr	r3, [r7, #12]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	200056e0 	.word	0x200056e0
 800647c:	200056ec 	.word	0x200056ec

08006480 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006488:	2300      	movs	r3, #0
 800648a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006490:	4b0f      	ldr	r3, [pc, #60]	; (80064d0 <ethernetif_input+0x50>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006498:	4618      	mov	r0, r3
 800649a:	f000 fbc7 	bl	8006c2c <osSemaphoreWait>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f5      	bne.n	8006490 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80064a4:	68b8      	ldr	r0, [r7, #8]
 80064a6:	f7ff ffd1 	bl	800644c <low_level_input>
 80064aa:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	4798      	blx	r3
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f005 faa6 	bl	800ba14 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1ea      	bne.n	80064a4 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80064ce:	e7df      	b.n	8006490 <ethernetif_input+0x10>
 80064d0:	200056e4 	.word	0x200056e4

080064d4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <ethernetif_init+0x1c>
 80064e2:	4b0e      	ldr	r3, [pc, #56]	; (800651c <ethernetif_init+0x48>)
 80064e4:	f240 12ef 	movw	r2, #495	; 0x1ef
 80064e8:	490d      	ldr	r1, [pc, #52]	; (8006520 <ethernetif_init+0x4c>)
 80064ea:	480e      	ldr	r0, [pc, #56]	; (8006524 <ethernetif_init+0x50>)
 80064ec:	f00e fc3a 	bl	8014d64 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2273      	movs	r2, #115	; 0x73
 80064f4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2274      	movs	r2, #116	; 0x74
 80064fc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a09      	ldr	r2, [pc, #36]	; (8006528 <ethernetif_init+0x54>)
 8006504:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a08      	ldr	r2, [pc, #32]	; (800652c <ethernetif_init+0x58>)
 800650a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff fdd3 	bl	80060b8 <low_level_init>

  return ERR_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	08016078 	.word	0x08016078
 8006520:	08016094 	.word	0x08016094
 8006524:	080160a4 	.word	0x080160a4
 8006528:	08012701 	.word	0x08012701
 800652c:	08006325 	.word	0x08006325

08006530 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800653c:	68f9      	ldr	r1, [r7, #12]
 800653e:	4809      	ldr	r0, [pc, #36]	; (8006564 <pbuf_free_custom+0x34>)
 8006540:	f004 fba0 	bl	800ac84 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006544:	4b08      	ldr	r3, [pc, #32]	; (8006568 <pbuf_free_custom+0x38>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d107      	bne.n	800655c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800654c:	4b06      	ldr	r3, [pc, #24]	; (8006568 <pbuf_free_custom+0x38>)
 800654e:	2200      	movs	r2, #0
 8006550:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006552:	4b06      	ldr	r3, [pc, #24]	; (800656c <pbuf_free_custom+0x3c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fbb6 	bl	8006cc8 <osSemaphoreRelease>
  }
}
 800655c:	bf00      	nop
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	08018b74 	.word	0x08018b74
 8006568:	200056e0 	.word	0x200056e0
 800656c:	200056e4 	.word	0x200056e4

08006570 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006574:	f7fb f8fe 	bl	8001774 <HAL_GetTick>
 8006578:	4603      	mov	r3, r0
}
 800657a:	4618      	mov	r0, r3
 800657c:	bd80      	pop	{r7, pc}
	...

08006580 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08e      	sub	sp, #56	; 0x38
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	605a      	str	r2, [r3, #4]
 8006592:	609a      	str	r2, [r3, #8]
 8006594:	60da      	str	r2, [r3, #12]
 8006596:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a52      	ldr	r2, [pc, #328]	; (80066e8 <HAL_ETH_MspInit+0x168>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	f040 809e 	bne.w	80066e0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80065a4:	4b51      	ldr	r3, [pc, #324]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	4a50      	ldr	r2, [pc, #320]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 80065aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80065ae:	6313      	str	r3, [r2, #48]	; 0x30
 80065b0:	4b4e      	ldr	r3, [pc, #312]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b8:	623b      	str	r3, [r7, #32]
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	4b4b      	ldr	r3, [pc, #300]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 80065be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c0:	4a4a      	ldr	r2, [pc, #296]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 80065c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065c6:	6313      	str	r3, [r2, #48]	; 0x30
 80065c8:	4b48      	ldr	r3, [pc, #288]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 80065ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065d0:	61fb      	str	r3, [r7, #28]
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	4b45      	ldr	r3, [pc, #276]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 80065d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d8:	4a44      	ldr	r2, [pc, #272]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 80065da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065de:	6313      	str	r3, [r2, #48]	; 0x30
 80065e0:	4b42      	ldr	r3, [pc, #264]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065ec:	4b3f      	ldr	r3, [pc, #252]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 80065ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f0:	4a3e      	ldr	r2, [pc, #248]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 80065f2:	f043 0304 	orr.w	r3, r3, #4
 80065f6:	6313      	str	r3, [r2, #48]	; 0x30
 80065f8:	4b3c      	ldr	r3, [pc, #240]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 80065fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006604:	4b39      	ldr	r3, [pc, #228]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006608:	4a38      	ldr	r2, [pc, #224]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 800660a:	f043 0301 	orr.w	r3, r3, #1
 800660e:	6313      	str	r3, [r2, #48]	; 0x30
 8006610:	4b36      	ldr	r3, [pc, #216]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800661c:	4b33      	ldr	r3, [pc, #204]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 800661e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006620:	4a32      	ldr	r2, [pc, #200]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 8006622:	f043 0302 	orr.w	r3, r3, #2
 8006626:	6313      	str	r3, [r2, #48]	; 0x30
 8006628:	4b30      	ldr	r3, [pc, #192]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006634:	4b2d      	ldr	r3, [pc, #180]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 8006636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006638:	4a2c      	ldr	r2, [pc, #176]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 800663a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800663e:	6313      	str	r3, [r2, #48]	; 0x30
 8006640:	4b2a      	ldr	r3, [pc, #168]	; (80066ec <HAL_ETH_MspInit+0x16c>)
 8006642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800664c:	2332      	movs	r3, #50	; 0x32
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006650:	2302      	movs	r3, #2
 8006652:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006654:	2300      	movs	r3, #0
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006658:	2303      	movs	r3, #3
 800665a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800665c:	230b      	movs	r3, #11
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006664:	4619      	mov	r1, r3
 8006666:	4822      	ldr	r0, [pc, #136]	; (80066f0 <HAL_ETH_MspInit+0x170>)
 8006668:	f7fc fbfe 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800666c:	2386      	movs	r3, #134	; 0x86
 800666e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006670:	2302      	movs	r3, #2
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006674:	2300      	movs	r3, #0
 8006676:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006678:	2303      	movs	r3, #3
 800667a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800667c:	230b      	movs	r3, #11
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006684:	4619      	mov	r1, r3
 8006686:	481b      	ldr	r0, [pc, #108]	; (80066f4 <HAL_ETH_MspInit+0x174>)
 8006688:	f7fc fbee 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800668c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006692:	2302      	movs	r3, #2
 8006694:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006696:	2300      	movs	r3, #0
 8006698:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800669a:	2303      	movs	r3, #3
 800669c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800669e:	230b      	movs	r3, #11
 80066a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80066a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066a6:	4619      	mov	r1, r3
 80066a8:	4813      	ldr	r0, [pc, #76]	; (80066f8 <HAL_ETH_MspInit+0x178>)
 80066aa:	f7fc fbdd 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80066ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80066b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066b4:	2302      	movs	r3, #2
 80066b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b8:	2300      	movs	r3, #0
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066bc:	2303      	movs	r3, #3
 80066be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80066c0:	230b      	movs	r3, #11
 80066c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80066c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066c8:	4619      	mov	r1, r3
 80066ca:	480c      	ldr	r0, [pc, #48]	; (80066fc <HAL_ETH_MspInit+0x17c>)
 80066cc:	f7fc fbcc 	bl	8002e68 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80066d0:	2200      	movs	r2, #0
 80066d2:	2105      	movs	r1, #5
 80066d4:	203d      	movs	r0, #61	; 0x3d
 80066d6:	f7fb f935 	bl	8001944 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80066da:	203d      	movs	r0, #61	; 0x3d
 80066dc:	f7fb f94e 	bl	800197c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80066e0:	bf00      	nop
 80066e2:	3738      	adds	r7, #56	; 0x38
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40028000 	.word	0x40028000
 80066ec:	40023800 	.word	0x40023800
 80066f0:	40020800 	.word	0x40020800
 80066f4:	40020000 	.word	0x40020000
 80066f8:	40020400 	.word	0x40020400
 80066fc:	40021800 	.word	0x40021800

08006700 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006704:	4802      	ldr	r0, [pc, #8]	; (8006710 <ETH_PHY_IO_Init+0x10>)
 8006706:	f7fb ff41 	bl	800258c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	bd80      	pop	{r7, pc}
 8006710:	200056ec 	.word	0x200056ec

08006714 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
  return 0;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	68f9      	ldr	r1, [r7, #12]
 8006736:	4807      	ldr	r0, [pc, #28]	; (8006754 <ETH_PHY_IO_ReadReg+0x30>)
 8006738:	f7fb fd82 	bl	8002240 <HAL_ETH_ReadPHYRegister>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006746:	e000      	b.n	800674a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	200056ec 	.word	0x200056ec

08006758 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	68f9      	ldr	r1, [r7, #12]
 800676a:	4807      	ldr	r0, [pc, #28]	; (8006788 <ETH_PHY_IO_WriteReg+0x30>)
 800676c:	f7fb fdb3 	bl	80022d6 <HAL_ETH_WritePHYRegister>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800677a:	e000      	b.n	800677e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	200056ec 	.word	0x200056ec

0800678c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006790:	f7fa fff0 	bl	8001774 <HAL_GetTick>
 8006794:	4603      	mov	r3, r0
}
 8006796:	4618      	mov	r0, r3
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b0a0      	sub	sp, #128	; 0x80
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80067a4:	f107 0308 	add.w	r3, r7, #8
 80067a8:	2264      	movs	r2, #100	; 0x64
 80067aa:	2100      	movs	r1, #0
 80067ac:	4618      	mov	r0, r3
 80067ae:	f00e f9f0 	bl	8014b92 <memset>
  int32_t PHYLinkState = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067ba:	2300      	movs	r3, #0
 80067bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80067be:	2300      	movs	r3, #0
 80067c0:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80067c6:	483a      	ldr	r0, [pc, #232]	; (80068b0 <ethernet_link_thread+0x114>)
 80067c8:	f7fa ff2c 	bl	8001624 <LAN8742_GetLinkState>
 80067cc:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80067ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067d4:	089b      	lsrs	r3, r3, #2
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00c      	beq.n	80067fa <ethernet_link_thread+0x5e>
 80067e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	dc09      	bgt.n	80067fa <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80067e6:	4833      	ldr	r0, [pc, #204]	; (80068b4 <ethernet_link_thread+0x118>)
 80067e8:	f7fb f9e0 	bl	8001bac <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80067ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80067ee:	f004 fccd 	bl	800b18c <netif_set_down>
    netif_set_link_down(netif);
 80067f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80067f4:	f004 fd30 	bl	800b258 <netif_set_link_down>
 80067f8:	e055      	b.n	80068a6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80067fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d14e      	bne.n	80068a6 <ethernet_link_thread+0x10a>
 8006808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800680a:	2b01      	cmp	r3, #1
 800680c:	dd4b      	ble.n	80068a6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800680e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006810:	3b02      	subs	r3, #2
 8006812:	2b03      	cmp	r3, #3
 8006814:	d82a      	bhi.n	800686c <ethernet_link_thread+0xd0>
 8006816:	a201      	add	r2, pc, #4	; (adr r2, 800681c <ethernet_link_thread+0x80>)
 8006818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681c:	0800682d 	.word	0x0800682d
 8006820:	0800683f 	.word	0x0800683f
 8006824:	0800684f 	.word	0x0800684f
 8006828:	0800685f 	.word	0x0800685f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800682c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006830:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006832:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006836:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006838:	2301      	movs	r3, #1
 800683a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800683c:	e017      	b.n	800686e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800683e:	2300      	movs	r3, #0
 8006840:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006842:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006846:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006848:	2301      	movs	r3, #1
 800684a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800684c:	e00f      	b.n	800686e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800684e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006852:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006854:	2300      	movs	r3, #0
 8006856:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006858:	2301      	movs	r3, #1
 800685a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800685c:	e007      	b.n	800686e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800685e:	2300      	movs	r3, #0
 8006860:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006862:	2300      	movs	r3, #0
 8006864:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006866:	2301      	movs	r3, #1
 8006868:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800686a:	e000      	b.n	800686e <ethernet_link_thread+0xd2>
    default:
      break;
 800686c:	bf00      	nop
    }

    if(linkchanged)
 800686e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006870:	2b00      	cmp	r3, #0
 8006872:	d018      	beq.n	80068a6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006874:	f107 0308 	add.w	r3, r7, #8
 8006878:	4619      	mov	r1, r3
 800687a:	480e      	ldr	r0, [pc, #56]	; (80068b4 <ethernet_link_thread+0x118>)
 800687c:	f7fb fd74 	bl	8002368 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006882:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006884:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006886:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006888:	f107 0308 	add.w	r3, r7, #8
 800688c:	4619      	mov	r1, r3
 800688e:	4809      	ldr	r0, [pc, #36]	; (80068b4 <ethernet_link_thread+0x118>)
 8006890:	f7fb fe61 	bl	8002556 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006894:	4807      	ldr	r0, [pc, #28]	; (80068b4 <ethernet_link_thread+0x118>)
 8006896:	f7fb f919 	bl	8001acc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800689a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800689c:	f004 fc0a 	bl	800b0b4 <netif_set_up>
      netif_set_link_up(netif);
 80068a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80068a2:	f004 fca5 	bl	800b1f0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80068a6:	2064      	movs	r0, #100	; 0x64
 80068a8:	f000 f910 	bl	8006acc <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80068ac:	e78b      	b.n	80067c6 <ethernet_link_thread+0x2a>
 80068ae:	bf00      	nop
 80068b0:	200057d4 	.word	0x200057d4
 80068b4:	200056ec 	.word	0x200056ec

080068b8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af02      	add	r7, sp, #8
 80068be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80068c0:	4812      	ldr	r0, [pc, #72]	; (800690c <HAL_ETH_RxAllocateCallback+0x54>)
 80068c2:	f004 f96b 	bl	800ab9c <memp_malloc_pool>
 80068c6:	60f8      	str	r0, [r7, #12]
  if (p)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d014      	beq.n	80068f8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f103 0220 	add.w	r2, r3, #32
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4a0d      	ldr	r2, [pc, #52]	; (8006910 <HAL_ETH_RxAllocateCallback+0x58>)
 80068dc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80068e6:	9201      	str	r2, [sp, #4]
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2241      	movs	r2, #65	; 0x41
 80068ee:	2100      	movs	r1, #0
 80068f0:	2000      	movs	r0, #0
 80068f2:	f004 fed5 	bl	800b6a0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80068f6:	e005      	b.n	8006904 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80068f8:	4b06      	ldr	r3, [pc, #24]	; (8006914 <HAL_ETH_RxAllocateCallback+0x5c>)
 80068fa:	2201      	movs	r2, #1
 80068fc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]
}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	08018b74 	.word	0x08018b74
 8006910:	08006531 	.word	0x08006531
 8006914:	200056e0 	.word	0x200056e0

08006918 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800692e:	2300      	movs	r3, #0
 8006930:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3b20      	subs	r3, #32
 8006936:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	2200      	movs	r2, #0
 8006942:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	887a      	ldrh	r2, [r7, #2]
 8006948:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d103      	bne.n	800695a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	69fa      	ldr	r2, [r7, #28]
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	e003      	b.n	8006962 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69fa      	ldr	r2, [r7, #28]
 8006960:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	69fa      	ldr	r2, [r7, #28]
 8006966:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	61fb      	str	r3, [r7, #28]
 800696e:	e009      	b.n	8006984 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	891a      	ldrh	r2, [r3, #8]
 8006974:	887b      	ldrh	r3, [r7, #2]
 8006976:	4413      	add	r3, r2
 8006978:	b29a      	uxth	r2, r3
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	61fb      	str	r3, [r7, #28]
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f2      	bne.n	8006970 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800698a:	887b      	ldrh	r3, [r7, #2]
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff fb2e 	bl	8005ff0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006994:	bf00      	nop
 8006996:	3720      	adds	r7, #32
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f005 f835 	bl	800ba14 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b085      	sub	sp, #20
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	4603      	mov	r3, r0
 80069ba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80069c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069c4:	2b84      	cmp	r3, #132	; 0x84
 80069c6:	d005      	beq.n	80069d4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80069c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	3303      	adds	r3, #3
 80069d2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80069d4:	68fb      	ldr	r3, [r7, #12]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069e8:	f3ef 8305 	mrs	r3, IPSR
 80069ec:	607b      	str	r3, [r7, #4]
  return(result);
 80069ee:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	bf14      	ite	ne
 80069f4:	2301      	movne	r3, #1
 80069f6:	2300      	moveq	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006a0a:	f001 fee5 	bl	80087d8 <vTaskStartScheduler>
  
  return osOK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006a18:	f7ff ffe3 	bl	80069e2 <inHandlerMode>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006a22:	f002 f803 	bl	8008a2c <xTaskGetTickCountFromISR>
 8006a26:	4603      	mov	r3, r0
 8006a28:	e002      	b.n	8006a30 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006a2a:	f001 ffef 	bl	8008a0c <xTaskGetTickCount>
 8006a2e:	4603      	mov	r3, r0
  }
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a36:	b089      	sub	sp, #36	; 0x24
 8006a38:	af04      	add	r7, sp, #16
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d020      	beq.n	8006a88 <osThreadCreate+0x54>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d01c      	beq.n	8006a88 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685c      	ldr	r4, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681d      	ldr	r5, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691e      	ldr	r6, [r3, #16]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff ffa6 	bl	80069b2 <makeFreeRtosPriority>
 8006a66:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a70:	9202      	str	r2, [sp, #8]
 8006a72:	9301      	str	r3, [sp, #4]
 8006a74:	9100      	str	r1, [sp, #0]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	4632      	mov	r2, r6
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f001 fc29 	bl	80082d4 <xTaskCreateStatic>
 8006a82:	4603      	mov	r3, r0
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	e01c      	b.n	8006ac2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685c      	ldr	r4, [r3, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a94:	b29e      	uxth	r6, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7ff ff88 	bl	80069b2 <makeFreeRtosPriority>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	f107 030c 	add.w	r3, r7, #12
 8006aa8:	9301      	str	r3, [sp, #4]
 8006aaa:	9200      	str	r2, [sp, #0]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	4632      	mov	r2, r6
 8006ab0:	4629      	mov	r1, r5
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f001 fc71 	bl	800839a <xTaskCreate>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d001      	beq.n	8006ac2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e000      	b.n	8006ac4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006acc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <osDelay+0x16>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	e000      	b.n	8006ae4 <osDelay+0x18>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f001 fe41 	bl	800876c <vTaskDelay>
  
  return osOK;
 8006aea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d007      	beq.n	8006b14 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	f000 fdc3 	bl	8007696 <xQueueCreateMutexStatic>
 8006b10:	4603      	mov	r3, r0
 8006b12:	e003      	b.n	8006b1c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006b14:	2001      	movs	r0, #1
 8006b16:	f000 fda6 	bl	8007666 <xQueueCreateMutex>
 8006b1a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <osMutexWait+0x18>
    return osErrorParameter;
 8006b38:	2380      	movs	r3, #128	; 0x80
 8006b3a:	e03a      	b.n	8006bb2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b46:	d103      	bne.n	8006b50 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b4c:	60fb      	str	r3, [r7, #12]
 8006b4e:	e009      	b.n	8006b64 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d006      	beq.n	8006b64 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <osMutexWait+0x40>
      ticks = 1;
 8006b60:	2301      	movs	r3, #1
 8006b62:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006b64:	f7ff ff3d 	bl	80069e2 <inHandlerMode>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d017      	beq.n	8006b9e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006b6e:	f107 0308 	add.w	r3, r7, #8
 8006b72:	461a      	mov	r2, r3
 8006b74:	2100      	movs	r1, #0
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 f9de 	bl	8007f38 <xQueueReceiveFromISR>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d001      	beq.n	8006b86 <osMutexWait+0x62>
      return osErrorOS;
 8006b82:	23ff      	movs	r3, #255	; 0xff
 8006b84:	e015      	b.n	8006bb2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d011      	beq.n	8006bb0 <osMutexWait+0x8c>
 8006b8c:	4b0b      	ldr	r3, [pc, #44]	; (8006bbc <osMutexWait+0x98>)
 8006b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	e008      	b.n	8006bb0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006b9e:	68f9      	ldr	r1, [r7, #12]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 f8b5 	bl	8007d10 <xQueueSemaphoreTake>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d001      	beq.n	8006bb0 <osMutexWait+0x8c>
    return osErrorOS;
 8006bac:	23ff      	movs	r3, #255	; 0xff
 8006bae:	e000      	b.n	8006bb2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	e000ed04 	.word	0xe000ed04

08006bc0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006bd0:	f7ff ff07 	bl	80069e2 <inHandlerMode>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d016      	beq.n	8006c08 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006bda:	f107 0308 	add.w	r3, r7, #8
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 ff19 	bl	8007a18 <xQueueGiveFromISR>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d001      	beq.n	8006bf0 <osMutexRelease+0x30>
      return osErrorOS;
 8006bec:	23ff      	movs	r3, #255	; 0xff
 8006bee:	e017      	b.n	8006c20 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d013      	beq.n	8006c1e <osMutexRelease+0x5e>
 8006bf6:	4b0c      	ldr	r3, [pc, #48]	; (8006c28 <osMutexRelease+0x68>)
 8006bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	e00a      	b.n	8006c1e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006c08:	2300      	movs	r3, #0
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fd5c 	bl	80076cc <xQueueGenericSend>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d001      	beq.n	8006c1e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006c1a:	23ff      	movs	r3, #255	; 0xff
 8006c1c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	e000ed04 	.word	0xe000ed04

08006c2c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006c36:	2300      	movs	r3, #0
 8006c38:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	e03a      	b.n	8006cba <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c4e:	d103      	bne.n	8006c58 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	e009      	b.n	8006c6c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d006      	beq.n	8006c6c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <osSemaphoreWait+0x40>
      ticks = 1;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006c6c:	f7ff feb9 	bl	80069e2 <inHandlerMode>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d017      	beq.n	8006ca6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006c76:	f107 0308 	add.w	r3, r7, #8
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 f95a 	bl	8007f38 <xQueueReceiveFromISR>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d001      	beq.n	8006c8e <osSemaphoreWait+0x62>
      return osErrorOS;
 8006c8a:	23ff      	movs	r3, #255	; 0xff
 8006c8c:	e015      	b.n	8006cba <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d011      	beq.n	8006cb8 <osSemaphoreWait+0x8c>
 8006c94:	4b0b      	ldr	r3, [pc, #44]	; (8006cc4 <osSemaphoreWait+0x98>)
 8006c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	e008      	b.n	8006cb8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006ca6:	68f9      	ldr	r1, [r7, #12]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 f831 	bl	8007d10 <xQueueSemaphoreTake>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d001      	beq.n	8006cb8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006cb4:	23ff      	movs	r3, #255	; 0xff
 8006cb6:	e000      	b.n	8006cba <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	e000ed04 	.word	0xe000ed04

08006cc8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006cd8:	f7ff fe83 	bl	80069e2 <inHandlerMode>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d016      	beq.n	8006d10 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006ce2:	f107 0308 	add.w	r3, r7, #8
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fe95 	bl	8007a18 <xQueueGiveFromISR>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d001      	beq.n	8006cf8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006cf4:	23ff      	movs	r3, #255	; 0xff
 8006cf6:	e017      	b.n	8006d28 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d013      	beq.n	8006d26 <osSemaphoreRelease+0x5e>
 8006cfe:	4b0c      	ldr	r3, [pc, #48]	; (8006d30 <osSemaphoreRelease+0x68>)
 8006d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	e00a      	b.n	8006d26 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006d10:	2300      	movs	r3, #0
 8006d12:	2200      	movs	r2, #0
 8006d14:	2100      	movs	r1, #0
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fcd8 	bl	80076cc <xQueueGenericSend>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d001      	beq.n	8006d26 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006d22:	23ff      	movs	r3, #255	; 0xff
 8006d24:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006d26:	68fb      	ldr	r3, [r7, #12]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	e000ed04 	.word	0xe000ed04

08006d34 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006d34:	b590      	push	{r4, r7, lr}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d011      	beq.n	8006d6a <osMessageCreate+0x36>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00d      	beq.n	8006d6a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6859      	ldr	r1, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689a      	ldr	r2, [r3, #8]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	2400      	movs	r4, #0
 8006d60:	9400      	str	r4, [sp, #0]
 8006d62:	f000 fb83 	bl	800746c <xQueueGenericCreateStatic>
 8006d66:	4603      	mov	r3, r0
 8006d68:	e008      	b.n	8006d7c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6818      	ldr	r0, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	4619      	mov	r1, r3
 8006d76:	f000 fbfb 	bl	8007570 <xQueueGenericCreate>
 8006d7a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd90      	pop	{r4, r7, pc}

08006d84 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006d90:	2300      	movs	r3, #0
 8006d92:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <osMessagePut+0x1e>
    ticks = 1;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006da2:	f7ff fe1e 	bl	80069e2 <inHandlerMode>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d018      	beq.n	8006dde <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006dac:	f107 0210 	add.w	r2, r7, #16
 8006db0:	f107 0108 	add.w	r1, r7, #8
 8006db4:	2300      	movs	r3, #0
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 fd8e 	bl	80078d8 <xQueueGenericSendFromISR>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d001      	beq.n	8006dc6 <osMessagePut+0x42>
      return osErrorOS;
 8006dc2:	23ff      	movs	r3, #255	; 0xff
 8006dc4:	e018      	b.n	8006df8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d014      	beq.n	8006df6 <osMessagePut+0x72>
 8006dcc:	4b0c      	ldr	r3, [pc, #48]	; (8006e00 <osMessagePut+0x7c>)
 8006dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	e00b      	b.n	8006df6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006dde:	f107 0108 	add.w	r1, r7, #8
 8006de2:	2300      	movs	r3, #0
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 fc70 	bl	80076cc <xQueueGenericSend>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d001      	beq.n	8006df6 <osMessagePut+0x72>
      return osErrorOS;
 8006df2:	23ff      	movs	r3, #255	; 0xff
 8006df4:	e000      	b.n	8006df8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	e000ed04 	.word	0xe000ed04

08006e04 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006e04:	b590      	push	{r4, r7, lr}
 8006e06:	b08b      	sub	sp, #44	; 0x2c
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006e14:	2300      	movs	r3, #0
 8006e16:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10a      	bne.n	8006e34 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006e1e:	2380      	movs	r3, #128	; 0x80
 8006e20:	617b      	str	r3, [r7, #20]
    return event;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	461c      	mov	r4, r3
 8006e26:	f107 0314 	add.w	r3, r7, #20
 8006e2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e32:	e054      	b.n	8006ede <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006e34:	2300      	movs	r3, #0
 8006e36:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e42:	d103      	bne.n	8006e4c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
 8006e4a:	e009      	b.n	8006e60 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d006      	beq.n	8006e60 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <osMessageGet+0x5c>
      ticks = 1;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006e60:	f7ff fdbf 	bl	80069e2 <inHandlerMode>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d01c      	beq.n	8006ea4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006e6a:	f107 0220 	add.w	r2, r7, #32
 8006e6e:	f107 0314 	add.w	r3, r7, #20
 8006e72:	3304      	adds	r3, #4
 8006e74:	4619      	mov	r1, r3
 8006e76:	68b8      	ldr	r0, [r7, #8]
 8006e78:	f001 f85e 	bl	8007f38 <xQueueReceiveFromISR>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d102      	bne.n	8006e88 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006e82:	2310      	movs	r3, #16
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	e001      	b.n	8006e8c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006e8c:	6a3b      	ldr	r3, [r7, #32]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d01d      	beq.n	8006ece <osMessageGet+0xca>
 8006e92:	4b15      	ldr	r3, [pc, #84]	; (8006ee8 <osMessageGet+0xe4>)
 8006e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	e014      	b.n	8006ece <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006ea4:	f107 0314 	add.w	r3, r7, #20
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eac:	4619      	mov	r1, r3
 8006eae:	68b8      	ldr	r0, [r7, #8]
 8006eb0:	f000 fe48 	bl	8007b44 <xQueueReceive>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d102      	bne.n	8006ec0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006eba:	2310      	movs	r3, #16
 8006ebc:	617b      	str	r3, [r7, #20]
 8006ebe:	e006      	b.n	8006ece <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <osMessageGet+0xc6>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	e000      	b.n	8006ecc <osMessageGet+0xc8>
 8006eca:	2340      	movs	r3, #64	; 0x40
 8006ecc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	461c      	mov	r4, r3
 8006ed2:	f107 0314 	add.w	r3, r7, #20
 8006ed6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006eda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	372c      	adds	r7, #44	; 0x2c
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd90      	pop	{r4, r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006ef2:	201c      	movs	r0, #28
 8006ef4:	f002 fe16 	bl	8009b24 <pvPortMalloc>
 8006ef8:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00a      	beq.n	8006f16 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 f98f 	bl	800722e <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006f16:	687b      	ldr	r3, [r7, #4]
	}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b090      	sub	sp, #64	; 0x40
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006f36:	2300      	movs	r3, #0
 8006f38:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10c      	bne.n	8006f5a <xEventGroupWaitBits+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f44:	b672      	cpsid	i
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	b662      	cpsie	i
 8006f54:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f56:	bf00      	nop
 8006f58:	e7fe      	b.n	8006f58 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00c      	beq.n	8006f7e <xEventGroupWaitBits+0x5e>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	b672      	cpsid	i
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	b662      	cpsie	i
 8006f78:	61fb      	str	r3, [r7, #28]
}
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10c      	bne.n	8006f9e <xEventGroupWaitBits+0x7e>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f88:	b672      	cpsid	i
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	b662      	cpsie	i
 8006f98:	61bb      	str	r3, [r7, #24]
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <xEventGroupWaitBits+0x7c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f9e:	f002 f92f 	bl	8009200 <xTaskGetSchedulerState>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d102      	bne.n	8006fae <xEventGroupWaitBits+0x8e>
 8006fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <xEventGroupWaitBits+0x92>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <xEventGroupWaitBits+0x94>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10c      	bne.n	8006fd2 <xEventGroupWaitBits+0xb2>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	b672      	cpsid	i
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	b662      	cpsie	i
 8006fcc:	617b      	str	r3, [r7, #20]
}
 8006fce:	bf00      	nop
 8006fd0:	e7fe      	b.n	8006fd0 <xEventGroupWaitBits+0xb0>
	}
	#endif

	vTaskSuspendAll();
 8006fd2:	f001 fc6f 	bl	80088b4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	68b9      	ldr	r1, [r7, #8]
 8006fe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fe2:	f000 f902 	bl	80071ea <prvTestWaitCondition>
 8006fe6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8006fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00e      	beq.n	800700c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d028      	beq.n	800704e <xEventGroupWaitBits+0x12e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	43db      	mvns	r3, r3
 8007004:	401a      	ands	r2, r3
 8007006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	e020      	b.n	800704e <xEventGroupWaitBits+0x12e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800700c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800700e:	2b00      	cmp	r3, #0
 8007010:	d104      	bne.n	800701c <xEventGroupWaitBits+0xfc>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8007016:	2301      	movs	r3, #1
 8007018:	633b      	str	r3, [r7, #48]	; 0x30
 800701a:	e018      	b.n	800704e <xEventGroupWaitBits+0x12e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <xEventGroupWaitBits+0x10a>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007028:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <xEventGroupWaitBits+0x118>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007036:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703a:	1d18      	adds	r0, r3, #4
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007040:	4313      	orrs	r3, r2
 8007042:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007044:	4619      	mov	r1, r3
 8007046:	f001 fe6d 	bl	8008d24 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800704e:	f001 fc3f 	bl	80088d0 <xTaskResumeAll>
 8007052:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007056:	2b00      	cmp	r3, #0
 8007058:	d031      	beq.n	80070be <xEventGroupWaitBits+0x19e>
	{
		if( xAlreadyYielded == pdFALSE )
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	2b00      	cmp	r3, #0
 800705e:	d107      	bne.n	8007070 <xEventGroupWaitBits+0x150>
		{
			portYIELD_WITHIN_API();
 8007060:	4b19      	ldr	r3, [pc, #100]	; (80070c8 <xEventGroupWaitBits+0x1a8>)
 8007062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007070:	f002 fa8c 	bl	800958c <uxTaskResetEventItemValue>
 8007074:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8007076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d11a      	bne.n	80070b6 <xEventGroupWaitBits+0x196>
		{
			taskENTER_CRITICAL();
 8007080:	f002 fc24 	bl	80098cc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	68b9      	ldr	r1, [r7, #8]
 800708e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007090:	f000 f8ab 	bl	80071ea <prvTestWaitCondition>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d009      	beq.n	80070ae <xEventGroupWaitBits+0x18e>
				{
					if( xClearOnExit != pdFALSE )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d006      	beq.n	80070ae <xEventGroupWaitBits+0x18e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80070a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	43db      	mvns	r3, r3
 80070a8:	401a      	ands	r2, r3
 80070aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ac:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80070ae:	2301      	movs	r3, #1
 80070b0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80070b2:	f002 fc3f 	bl	8009934 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80070b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80070bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80070be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3740      	adds	r7, #64	; 0x40
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	e000ed04 	.word	0xe000ed04

080070cc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08e      	sub	sp, #56	; 0x38
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80070d6:	2300      	movs	r3, #0
 80070d8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80070de:	2300      	movs	r3, #0
 80070e0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10c      	bne.n	8007102 <xEventGroupSetBits+0x36>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	b672      	cpsid	i
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	b662      	cpsie	i
 80070fc:	613b      	str	r3, [r7, #16]
}
 80070fe:	bf00      	nop
 8007100:	e7fe      	b.n	8007100 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00c      	beq.n	8007126 <xEventGroupSetBits+0x5a>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	b672      	cpsid	i
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	b662      	cpsie	i
 8007120:	60fb      	str	r3, [r7, #12]
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	3304      	adds	r3, #4
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	3308      	adds	r3, #8
 8007130:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007132:	f001 fbbf 	bl	80088b4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	431a      	orrs	r2, r3
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007148:	e03c      	b.n	80071c4 <xEventGroupSetBits+0xf8>
		{
			pxNext = listGET_NEXT( pxListItem );
 800714a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007156:	2300      	movs	r3, #0
 8007158:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007160:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007168:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d108      	bne.n	8007186 <xEventGroupSetBits+0xba>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	4013      	ands	r3, r2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00b      	beq.n	8007198 <xEventGroupSetBits+0xcc>
				{
					xMatchFound = pdTRUE;
 8007180:	2301      	movs	r3, #1
 8007182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007184:	e008      	b.n	8007198 <xEventGroupSetBits+0xcc>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	4013      	ands	r3, r2
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	429a      	cmp	r2, r3
 8007192:	d101      	bne.n	8007198 <xEventGroupSetBits+0xcc>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007194:	2301      	movs	r3, #1
 8007196:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719a:	2b00      	cmp	r3, #0
 800719c:	d010      	beq.n	80071c0 <xEventGroupSetBits+0xf4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <xEventGroupSetBits+0xe4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80071a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071b8:	4619      	mov	r1, r3
 80071ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80071bc:	f001 fe56 	bl	8008e6c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80071c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d1be      	bne.n	800714a <xEventGroupSetBits+0x7e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d2:	43db      	mvns	r3, r3
 80071d4:	401a      	ands	r2, r3
 80071d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80071da:	f001 fb79 	bl	80088d0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e0:	681b      	ldr	r3, [r3, #0]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3738      	adds	r7, #56	; 0x38
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80071ea:	b480      	push	{r7}
 80071ec:	b087      	sub	sp, #28
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80071f6:	2300      	movs	r3, #0
 80071f8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d107      	bne.n	8007210 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	4013      	ands	r3, r2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800720a:	2301      	movs	r3, #1
 800720c:	617b      	str	r3, [r7, #20]
 800720e:	e007      	b.n	8007220 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	4013      	ands	r3, r2
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	429a      	cmp	r2, r3
 800721a:	d101      	bne.n	8007220 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800721c:	2301      	movs	r3, #1
 800721e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007220:	697b      	ldr	r3, [r7, #20]
}
 8007222:	4618      	mov	r0, r3
 8007224:	371c      	adds	r7, #28
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f103 0208 	add.w	r2, r3, #8
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007246:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f103 0208 	add.w	r2, r3, #8
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f103 0208 	add.w	r2, r3, #8
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	601a      	str	r2, [r3, #0]
}
 80072c4:	bf00      	nop
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072e6:	d103      	bne.n	80072f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	e00c      	b.n	800730a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3308      	adds	r3, #8
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	e002      	b.n	80072fe <vListInsert+0x2e>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	429a      	cmp	r2, r3
 8007308:	d2f6      	bcs.n	80072f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	601a      	str	r2, [r3, #0]
}
 8007336:	bf00      	nop
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007342:	b480      	push	{r7}
 8007344:	b085      	sub	sp, #20
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	6892      	ldr	r2, [r2, #8]
 8007358:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6852      	ldr	r2, [r2, #4]
 8007362:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	429a      	cmp	r2, r3
 800736c:	d103      	bne.n	8007376 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	1e5a      	subs	r2, r3, #1
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
	...

08007398 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10c      	bne.n	80073c6 <xQueueGenericReset+0x2e>
	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	b672      	cpsid	i
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	b662      	cpsie	i
 80073c0:	60bb      	str	r3, [r7, #8]
}
 80073c2:	bf00      	nop
 80073c4:	e7fe      	b.n	80073c4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80073c6:	f002 fa81 	bl	80098cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d2:	68f9      	ldr	r1, [r7, #12]
 80073d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073d6:	fb01 f303 	mul.w	r3, r1, r3
 80073da:	441a      	add	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f6:	3b01      	subs	r3, #1
 80073f8:	68f9      	ldr	r1, [r7, #12]
 80073fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073fc:	fb01 f303 	mul.w	r3, r1, r3
 8007400:	441a      	add	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	22ff      	movs	r2, #255	; 0xff
 800740a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	22ff      	movs	r2, #255	; 0xff
 8007412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d114      	bne.n	8007446 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01a      	beq.n	800745a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3310      	adds	r3, #16
 8007428:	4618      	mov	r0, r3
 800742a:	f001 fcbb 	bl	8008da4 <xTaskRemoveFromEventList>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d012      	beq.n	800745a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007434:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <xQueueGenericReset+0xd0>)
 8007436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	e009      	b.n	800745a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3310      	adds	r3, #16
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff feef 	bl	800722e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3324      	adds	r3, #36	; 0x24
 8007454:	4618      	mov	r0, r3
 8007456:	f7ff feea 	bl	800722e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800745a:	f002 fa6b 	bl	8009934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800745e:	2301      	movs	r3, #1
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	e000ed04 	.word	0xe000ed04

0800746c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08e      	sub	sp, #56	; 0x38
 8007470:	af02      	add	r7, sp, #8
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10c      	bne.n	800749a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	b672      	cpsid	i
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	b662      	cpsie	i
 8007494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10c      	bne.n	80074ba <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	b672      	cpsid	i
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	b662      	cpsie	i
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074b6:	bf00      	nop
 80074b8:	e7fe      	b.n	80074b8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <xQueueGenericCreateStatic+0x5a>
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <xQueueGenericCreateStatic+0x5e>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <xQueueGenericCreateStatic+0x60>
 80074ca:	2300      	movs	r3, #0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10c      	bne.n	80074ea <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	b672      	cpsid	i
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	b662      	cpsie	i
 80074e4:	623b      	str	r3, [r7, #32]
}
 80074e6:	bf00      	nop
 80074e8:	e7fe      	b.n	80074e8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d102      	bne.n	80074f6 <xQueueGenericCreateStatic+0x8a>
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <xQueueGenericCreateStatic+0x8e>
 80074f6:	2301      	movs	r3, #1
 80074f8:	e000      	b.n	80074fc <xQueueGenericCreateStatic+0x90>
 80074fa:	2300      	movs	r3, #0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10c      	bne.n	800751a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	b672      	cpsid	i
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	b662      	cpsie	i
 8007514:	61fb      	str	r3, [r7, #28]
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800751a:	2348      	movs	r3, #72	; 0x48
 800751c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2b48      	cmp	r3, #72	; 0x48
 8007522:	d00c      	beq.n	800753e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	b672      	cpsid	i
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	b662      	cpsie	i
 8007538:	61bb      	str	r3, [r7, #24]
}
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800753e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00d      	beq.n	8007566 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007552:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	4613      	mov	r3, r2
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	68b9      	ldr	r1, [r7, #8]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 f847 	bl	80075f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007568:	4618      	mov	r0, r3
 800756a:	3730      	adds	r7, #48	; 0x30
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007570:	b580      	push	{r7, lr}
 8007572:	b08a      	sub	sp, #40	; 0x28
 8007574:	af02      	add	r7, sp, #8
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	4613      	mov	r3, r2
 800757c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10c      	bne.n	800759e <xQueueGenericCreate+0x2e>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007588:	b672      	cpsid	i
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	b662      	cpsie	i
 8007598:	613b      	str	r3, [r7, #16]
}
 800759a:	bf00      	nop
 800759c:	e7fe      	b.n	800759c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d102      	bne.n	80075aa <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	61fb      	str	r3, [r7, #28]
 80075a8:	e004      	b.n	80075b4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	fb02 f303 	mul.w	r3, r2, r3
 80075b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	3348      	adds	r3, #72	; 0x48
 80075b8:	4618      	mov	r0, r3
 80075ba:	f002 fab3 	bl	8009b24 <pvPortMalloc>
 80075be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d011      	beq.n	80075ea <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	3348      	adds	r3, #72	; 0x48
 80075ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075d8:	79fa      	ldrb	r2, [r7, #7]
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	4613      	mov	r3, r2
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	68b9      	ldr	r1, [r7, #8]
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f805 	bl	80075f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80075ea:	69bb      	ldr	r3, [r7, #24]
	}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3720      	adds	r7, #32
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d103      	bne.n	8007610 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e002      	b.n	8007616 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007622:	2101      	movs	r1, #1
 8007624:	69b8      	ldr	r0, [r7, #24]
 8007626:	f7ff feb7 	bl	8007398 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800762a:	bf00      	nop
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00e      	beq.n	800765e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007652:	2300      	movs	r3, #0
 8007654:	2200      	movs	r2, #0
 8007656:	2100      	movs	r1, #0
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f837 	bl	80076cc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007666:	b580      	push	{r7, lr}
 8007668:	b086      	sub	sp, #24
 800766a:	af00      	add	r7, sp, #0
 800766c:	4603      	mov	r3, r0
 800766e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007670:	2301      	movs	r3, #1
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	2300      	movs	r3, #0
 8007676:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	461a      	mov	r2, r3
 800767c:	6939      	ldr	r1, [r7, #16]
 800767e:	6978      	ldr	r0, [r7, #20]
 8007680:	f7ff ff76 	bl	8007570 <xQueueGenericCreate>
 8007684:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f7ff ffd3 	bl	8007632 <prvInitialiseMutex>

		return xNewQueue;
 800768c:	68fb      	ldr	r3, [r7, #12]
	}
 800768e:	4618      	mov	r0, r3
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007696:	b580      	push	{r7, lr}
 8007698:	b088      	sub	sp, #32
 800769a:	af02      	add	r7, sp, #8
 800769c:	4603      	mov	r3, r0
 800769e:	6039      	str	r1, [r7, #0]
 80076a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80076a2:	2301      	movs	r3, #1
 80076a4:	617b      	str	r3, [r7, #20]
 80076a6:	2300      	movs	r3, #0
 80076a8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80076aa:	79fb      	ldrb	r3, [r7, #7]
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2200      	movs	r2, #0
 80076b2:	6939      	ldr	r1, [r7, #16]
 80076b4:	6978      	ldr	r0, [r7, #20]
 80076b6:	f7ff fed9 	bl	800746c <xQueueGenericCreateStatic>
 80076ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7ff ffb8 	bl	8007632 <prvInitialiseMutex>

		return xNewQueue;
 80076c2:	68fb      	ldr	r3, [r7, #12]
	}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3718      	adds	r7, #24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08e      	sub	sp, #56	; 0x38
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80076da:	2300      	movs	r3, #0
 80076dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10c      	bne.n	8007702 <xQueueGenericSend+0x36>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	b672      	cpsid	i
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	b662      	cpsie	i
 80076fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076fe:	bf00      	nop
 8007700:	e7fe      	b.n	8007700 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d103      	bne.n	8007710 <xQueueGenericSend+0x44>
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <xQueueGenericSend+0x48>
 8007710:	2301      	movs	r3, #1
 8007712:	e000      	b.n	8007716 <xQueueGenericSend+0x4a>
 8007714:	2300      	movs	r3, #0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10c      	bne.n	8007734 <xQueueGenericSend+0x68>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	b672      	cpsid	i
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	b662      	cpsie	i
 800772e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007730:	bf00      	nop
 8007732:	e7fe      	b.n	8007732 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	2b02      	cmp	r3, #2
 8007738:	d103      	bne.n	8007742 <xQueueGenericSend+0x76>
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773e:	2b01      	cmp	r3, #1
 8007740:	d101      	bne.n	8007746 <xQueueGenericSend+0x7a>
 8007742:	2301      	movs	r3, #1
 8007744:	e000      	b.n	8007748 <xQueueGenericSend+0x7c>
 8007746:	2300      	movs	r3, #0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10c      	bne.n	8007766 <xQueueGenericSend+0x9a>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	b672      	cpsid	i
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	b662      	cpsie	i
 8007760:	623b      	str	r3, [r7, #32]
}
 8007762:	bf00      	nop
 8007764:	e7fe      	b.n	8007764 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007766:	f001 fd4b 	bl	8009200 <xTaskGetSchedulerState>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d102      	bne.n	8007776 <xQueueGenericSend+0xaa>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <xQueueGenericSend+0xae>
 8007776:	2301      	movs	r3, #1
 8007778:	e000      	b.n	800777c <xQueueGenericSend+0xb0>
 800777a:	2300      	movs	r3, #0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10c      	bne.n	800779a <xQueueGenericSend+0xce>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	b672      	cpsid	i
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	b662      	cpsie	i
 8007794:	61fb      	str	r3, [r7, #28]
}
 8007796:	bf00      	nop
 8007798:	e7fe      	b.n	8007798 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800779a:	f002 f897 	bl	80098cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d302      	bcc.n	80077b0 <xQueueGenericSend+0xe4>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d129      	bne.n	8007804 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077b6:	f000 fc7d 	bl	80080b4 <prvCopyDataToQueue>
 80077ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d010      	beq.n	80077e6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	3324      	adds	r3, #36	; 0x24
 80077c8:	4618      	mov	r0, r3
 80077ca:	f001 faeb 	bl	8008da4 <xTaskRemoveFromEventList>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d013      	beq.n	80077fc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80077d4:	4b3f      	ldr	r3, [pc, #252]	; (80078d4 <xQueueGenericSend+0x208>)
 80077d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	e00a      	b.n	80077fc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d007      	beq.n	80077fc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80077ec:	4b39      	ldr	r3, [pc, #228]	; (80078d4 <xQueueGenericSend+0x208>)
 80077ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80077fc:	f002 f89a 	bl	8009934 <vPortExitCritical>
				return pdPASS;
 8007800:	2301      	movs	r3, #1
 8007802:	e063      	b.n	80078cc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d103      	bne.n	8007812 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800780a:	f002 f893 	bl	8009934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800780e:	2300      	movs	r3, #0
 8007810:	e05c      	b.n	80078cc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007814:	2b00      	cmp	r3, #0
 8007816:	d106      	bne.n	8007826 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007818:	f107 0314 	add.w	r3, r7, #20
 800781c:	4618      	mov	r0, r3
 800781e:	f001 fb8b 	bl	8008f38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007822:	2301      	movs	r3, #1
 8007824:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007826:	f002 f885 	bl	8009934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800782a:	f001 f843 	bl	80088b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800782e:	f002 f84d 	bl	80098cc <vPortEnterCritical>
 8007832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007838:	b25b      	sxtb	r3, r3
 800783a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800783e:	d103      	bne.n	8007848 <xQueueGenericSend+0x17c>
 8007840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800784e:	b25b      	sxtb	r3, r3
 8007850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007854:	d103      	bne.n	800785e <xQueueGenericSend+0x192>
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800785e:	f002 f869 	bl	8009934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007862:	1d3a      	adds	r2, r7, #4
 8007864:	f107 0314 	add.w	r3, r7, #20
 8007868:	4611      	mov	r1, r2
 800786a:	4618      	mov	r0, r3
 800786c:	f001 fb7a 	bl	8008f64 <xTaskCheckForTimeOut>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d124      	bne.n	80078c0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007878:	f000 fd14 	bl	80082a4 <prvIsQueueFull>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d018      	beq.n	80078b4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	3310      	adds	r3, #16
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	4611      	mov	r1, r2
 800788a:	4618      	mov	r0, r3
 800788c:	f001 fa24 	bl	8008cd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007892:	f000 fc9f 	bl	80081d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007896:	f001 f81b 	bl	80088d0 <xTaskResumeAll>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	f47f af7c 	bne.w	800779a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80078a2:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <xQueueGenericSend+0x208>)
 80078a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	e772      	b.n	800779a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80078b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078b6:	f000 fc8d 	bl	80081d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078ba:	f001 f809 	bl	80088d0 <xTaskResumeAll>
 80078be:	e76c      	b.n	800779a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80078c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078c2:	f000 fc87 	bl	80081d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078c6:	f001 f803 	bl	80088d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80078ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3738      	adds	r7, #56	; 0x38
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	e000ed04 	.word	0xe000ed04

080078d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08e      	sub	sp, #56	; 0x38
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10c      	bne.n	800790a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	b672      	cpsid	i
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	b662      	cpsie	i
 8007904:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007906:	bf00      	nop
 8007908:	e7fe      	b.n	8007908 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d103      	bne.n	8007918 <xQueueGenericSendFromISR+0x40>
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <xQueueGenericSendFromISR+0x44>
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <xQueueGenericSendFromISR+0x46>
 800791c:	2300      	movs	r3, #0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10c      	bne.n	800793c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	b672      	cpsid	i
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	b662      	cpsie	i
 8007936:	623b      	str	r3, [r7, #32]
}
 8007938:	bf00      	nop
 800793a:	e7fe      	b.n	800793a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b02      	cmp	r3, #2
 8007940:	d103      	bne.n	800794a <xQueueGenericSendFromISR+0x72>
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007946:	2b01      	cmp	r3, #1
 8007948:	d101      	bne.n	800794e <xQueueGenericSendFromISR+0x76>
 800794a:	2301      	movs	r3, #1
 800794c:	e000      	b.n	8007950 <xQueueGenericSendFromISR+0x78>
 800794e:	2300      	movs	r3, #0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10c      	bne.n	800796e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	b672      	cpsid	i
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	b662      	cpsie	i
 8007968:	61fb      	str	r3, [r7, #28]
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800796e:	f002 f895 	bl	8009a9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007972:	f3ef 8211 	mrs	r2, BASEPRI
 8007976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797a:	b672      	cpsid	i
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	b662      	cpsie	i
 800798a:	61ba      	str	r2, [r7, #24]
 800798c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800798e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007990:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799a:	429a      	cmp	r2, r3
 800799c:	d302      	bcc.n	80079a4 <xQueueGenericSendFromISR+0xcc>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d12c      	bne.n	80079fe <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	68b9      	ldr	r1, [r7, #8]
 80079b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079b4:	f000 fb7e 	bl	80080b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80079bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079c0:	d112      	bne.n	80079e8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d016      	beq.n	80079f8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	3324      	adds	r3, #36	; 0x24
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 f9e8 	bl	8008da4 <xTaskRemoveFromEventList>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00e      	beq.n	80079f8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00b      	beq.n	80079f8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	e007      	b.n	80079f8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079ec:	3301      	adds	r3, #1
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	b25a      	sxtb	r2, r3
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80079f8:	2301      	movs	r3, #1
 80079fa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80079fc:	e001      	b.n	8007a02 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	637b      	str	r3, [r7, #52]	; 0x34
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3738      	adds	r7, #56	; 0x38
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b08e      	sub	sp, #56	; 0x38
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10c      	bne.n	8007a46 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	b672      	cpsid	i
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	b662      	cpsie	i
 8007a40:	623b      	str	r3, [r7, #32]
}
 8007a42:	bf00      	nop
 8007a44:	e7fe      	b.n	8007a44 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00c      	beq.n	8007a68 <xQueueGiveFromISR+0x50>
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	b672      	cpsid	i
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	b662      	cpsie	i
 8007a62:	61fb      	str	r3, [r7, #28]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d103      	bne.n	8007a78 <xQueueGiveFromISR+0x60>
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <xQueueGiveFromISR+0x64>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e000      	b.n	8007a7e <xQueueGiveFromISR+0x66>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10c      	bne.n	8007a9c <xQueueGiveFromISR+0x84>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	b672      	cpsid	i
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	b662      	cpsie	i
 8007a96:	61bb      	str	r3, [r7, #24]
}
 8007a98:	bf00      	nop
 8007a9a:	e7fe      	b.n	8007a9a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a9c:	f001 fffe 	bl	8009a9c <vPortValidateInterruptPriority>
	__asm volatile
 8007aa0:	f3ef 8211 	mrs	r2, BASEPRI
 8007aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa8:	b672      	cpsid	i
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	b662      	cpsie	i
 8007ab8:	617a      	str	r2, [r7, #20]
 8007aba:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007abc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007abe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d22b      	bcs.n	8007b28 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ae2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aea:	d112      	bne.n	8007b12 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d016      	beq.n	8007b22 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	3324      	adds	r3, #36	; 0x24
 8007af8:	4618      	mov	r0, r3
 8007afa:	f001 f953 	bl	8008da4 <xTaskRemoveFromEventList>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00e      	beq.n	8007b22 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00b      	beq.n	8007b22 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	e007      	b.n	8007b22 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b16:	3301      	adds	r3, #1
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	b25a      	sxtb	r2, r3
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b22:	2301      	movs	r3, #1
 8007b24:	637b      	str	r3, [r7, #52]	; 0x34
 8007b26:	e001      	b.n	8007b2c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f383 8811 	msr	BASEPRI, r3
}
 8007b36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3738      	adds	r7, #56	; 0x38
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
	...

08007b44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08c      	sub	sp, #48	; 0x30
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b50:	2300      	movs	r3, #0
 8007b52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10c      	bne.n	8007b78 <xQueueReceive+0x34>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	b672      	cpsid	i
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	b662      	cpsie	i
 8007b72:	623b      	str	r3, [r7, #32]
}
 8007b74:	bf00      	nop
 8007b76:	e7fe      	b.n	8007b76 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d103      	bne.n	8007b86 <xQueueReceive+0x42>
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <xQueueReceive+0x46>
 8007b86:	2301      	movs	r3, #1
 8007b88:	e000      	b.n	8007b8c <xQueueReceive+0x48>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10c      	bne.n	8007baa <xQueueReceive+0x66>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	b672      	cpsid	i
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	b662      	cpsie	i
 8007ba4:	61fb      	str	r3, [r7, #28]
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007baa:	f001 fb29 	bl	8009200 <xTaskGetSchedulerState>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d102      	bne.n	8007bba <xQueueReceive+0x76>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <xQueueReceive+0x7a>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e000      	b.n	8007bc0 <xQueueReceive+0x7c>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10c      	bne.n	8007bde <xQueueReceive+0x9a>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	b672      	cpsid	i
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	b662      	cpsie	i
 8007bd8:	61bb      	str	r3, [r7, #24]
}
 8007bda:	bf00      	nop
 8007bdc:	e7fe      	b.n	8007bdc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bde:	f001 fe75 	bl	80098cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d01f      	beq.n	8007c2e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bee:	68b9      	ldr	r1, [r7, #8]
 8007bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf2:	f000 fac9 	bl	8008188 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf8:	1e5a      	subs	r2, r3, #1
 8007bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00f      	beq.n	8007c26 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	3310      	adds	r3, #16
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f001 f8ca 	bl	8008da4 <xTaskRemoveFromEventList>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d007      	beq.n	8007c26 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c16:	4b3d      	ldr	r3, [pc, #244]	; (8007d0c <xQueueReceive+0x1c8>)
 8007c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c26:	f001 fe85 	bl	8009934 <vPortExitCritical>
				return pdPASS;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e069      	b.n	8007d02 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d103      	bne.n	8007c3c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c34:	f001 fe7e 	bl	8009934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	e062      	b.n	8007d02 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d106      	bne.n	8007c50 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c42:	f107 0310 	add.w	r3, r7, #16
 8007c46:	4618      	mov	r0, r3
 8007c48:	f001 f976 	bl	8008f38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c50:	f001 fe70 	bl	8009934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c54:	f000 fe2e 	bl	80088b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c58:	f001 fe38 	bl	80098cc <vPortEnterCritical>
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c62:	b25b      	sxtb	r3, r3
 8007c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c68:	d103      	bne.n	8007c72 <xQueueReceive+0x12e>
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c78:	b25b      	sxtb	r3, r3
 8007c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c7e:	d103      	bne.n	8007c88 <xQueueReceive+0x144>
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c88:	f001 fe54 	bl	8009934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c8c:	1d3a      	adds	r2, r7, #4
 8007c8e:	f107 0310 	add.w	r3, r7, #16
 8007c92:	4611      	mov	r1, r2
 8007c94:	4618      	mov	r0, r3
 8007c96:	f001 f965 	bl	8008f64 <xTaskCheckForTimeOut>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d123      	bne.n	8007ce8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca2:	f000 fae9 	bl	8008278 <prvIsQueueEmpty>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d017      	beq.n	8007cdc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	3324      	adds	r3, #36	; 0x24
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f001 f80f 	bl	8008cd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cbc:	f000 fa8a 	bl	80081d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cc0:	f000 fe06 	bl	80088d0 <xTaskResumeAll>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d189      	bne.n	8007bde <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007cca:	4b10      	ldr	r3, [pc, #64]	; (8007d0c <xQueueReceive+0x1c8>)
 8007ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cd0:	601a      	str	r2, [r3, #0]
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	e780      	b.n	8007bde <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cde:	f000 fa79 	bl	80081d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ce2:	f000 fdf5 	bl	80088d0 <xTaskResumeAll>
 8007ce6:	e77a      	b.n	8007bde <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cea:	f000 fa73 	bl	80081d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cee:	f000 fdef 	bl	80088d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf4:	f000 fac0 	bl	8008278 <prvIsQueueEmpty>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f43f af6f 	beq.w	8007bde <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3730      	adds	r7, #48	; 0x30
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	e000ed04 	.word	0xe000ed04

08007d10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08e      	sub	sp, #56	; 0x38
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10c      	bne.n	8007d46 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	b672      	cpsid	i
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	b662      	cpsie	i
 8007d40:	623b      	str	r3, [r7, #32]
}
 8007d42:	bf00      	nop
 8007d44:	e7fe      	b.n	8007d44 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00c      	beq.n	8007d68 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	b672      	cpsid	i
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	b662      	cpsie	i
 8007d62:	61fb      	str	r3, [r7, #28]
}
 8007d64:	bf00      	nop
 8007d66:	e7fe      	b.n	8007d66 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d68:	f001 fa4a 	bl	8009200 <xTaskGetSchedulerState>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d102      	bne.n	8007d78 <xQueueSemaphoreTake+0x68>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <xQueueSemaphoreTake+0x6c>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e000      	b.n	8007d7e <xQueueSemaphoreTake+0x6e>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10c      	bne.n	8007d9c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	b672      	cpsid	i
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	b662      	cpsie	i
 8007d96:	61bb      	str	r3, [r7, #24]
}
 8007d98:	bf00      	nop
 8007d9a:	e7fe      	b.n	8007d9a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d9c:	f001 fd96 	bl	80098cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d024      	beq.n	8007df6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	1e5a      	subs	r2, r3, #1
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d104      	bne.n	8007dc6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007dbc:	f001 fbfe 	bl	80095bc <pvTaskIncrementMutexHeldCount>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00f      	beq.n	8007dee <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd0:	3310      	adds	r3, #16
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 ffe6 	bl	8008da4 <xTaskRemoveFromEventList>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d007      	beq.n	8007dee <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007dde:	4b55      	ldr	r3, [pc, #340]	; (8007f34 <xQueueSemaphoreTake+0x224>)
 8007de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007dee:	f001 fda1 	bl	8009934 <vPortExitCritical>
				return pdPASS;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e099      	b.n	8007f2a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d113      	bne.n	8007e24 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00c      	beq.n	8007e1c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e06:	b672      	cpsid	i
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	b662      	cpsie	i
 8007e16:	617b      	str	r3, [r7, #20]
}
 8007e18:	bf00      	nop
 8007e1a:	e7fe      	b.n	8007e1a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007e1c:	f001 fd8a 	bl	8009934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e20:	2300      	movs	r3, #0
 8007e22:	e082      	b.n	8007f2a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d106      	bne.n	8007e38 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e2a:	f107 030c 	add.w	r3, r7, #12
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f001 f882 	bl	8008f38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e34:	2301      	movs	r3, #1
 8007e36:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e38:	f001 fd7c 	bl	8009934 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e3c:	f000 fd3a 	bl	80088b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e40:	f001 fd44 	bl	80098cc <vPortEnterCritical>
 8007e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e4a:	b25b      	sxtb	r3, r3
 8007e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e50:	d103      	bne.n	8007e5a <xQueueSemaphoreTake+0x14a>
 8007e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e60:	b25b      	sxtb	r3, r3
 8007e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e66:	d103      	bne.n	8007e70 <xQueueSemaphoreTake+0x160>
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e70:	f001 fd60 	bl	8009934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e74:	463a      	mov	r2, r7
 8007e76:	f107 030c 	add.w	r3, r7, #12
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 f871 	bl	8008f64 <xTaskCheckForTimeOut>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d132      	bne.n	8007eee <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e8a:	f000 f9f5 	bl	8008278 <prvIsQueueEmpty>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d026      	beq.n	8007ee2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d109      	bne.n	8007eb0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007e9c:	f001 fd16 	bl	80098cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f001 f9c9 	bl	800923c <xTaskPriorityInherit>
 8007eaa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007eac:	f001 fd42 	bl	8009934 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	3324      	adds	r3, #36	; 0x24
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 ff0d 	bl	8008cd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ec0:	f000 f988 	bl	80081d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ec4:	f000 fd04 	bl	80088d0 <xTaskResumeAll>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f47f af66 	bne.w	8007d9c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007ed0:	4b18      	ldr	r3, [pc, #96]	; (8007f34 <xQueueSemaphoreTake+0x224>)
 8007ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	e75c      	b.n	8007d9c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007ee2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ee4:	f000 f976 	bl	80081d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ee8:	f000 fcf2 	bl	80088d0 <xTaskResumeAll>
 8007eec:	e756      	b.n	8007d9c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007eee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ef0:	f000 f970 	bl	80081d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ef4:	f000 fcec 	bl	80088d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ef8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007efa:	f000 f9bd 	bl	8008278 <prvIsQueueEmpty>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f43f af4b 	beq.w	8007d9c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00d      	beq.n	8007f28 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007f0c:	f001 fcde 	bl	80098cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007f10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f12:	f000 f8b7 	bl	8008084 <prvGetDisinheritPriorityAfterTimeout>
 8007f16:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f001 fa96 	bl	8009450 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007f24:	f001 fd06 	bl	8009934 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3738      	adds	r7, #56	; 0x38
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	e000ed04 	.word	0xe000ed04

08007f38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08e      	sub	sp, #56	; 0x38
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10c      	bne.n	8007f68 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	b672      	cpsid	i
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	b662      	cpsie	i
 8007f62:	623b      	str	r3, [r7, #32]
}
 8007f64:	bf00      	nop
 8007f66:	e7fe      	b.n	8007f66 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d103      	bne.n	8007f76 <xQueueReceiveFromISR+0x3e>
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <xQueueReceiveFromISR+0x42>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <xQueueReceiveFromISR+0x44>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10c      	bne.n	8007f9a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	b672      	cpsid	i
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	b662      	cpsie	i
 8007f94:	61fb      	str	r3, [r7, #28]
}
 8007f96:	bf00      	nop
 8007f98:	e7fe      	b.n	8007f98 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f9a:	f001 fd7f 	bl	8009a9c <vPortValidateInterruptPriority>
	__asm volatile
 8007f9e:	f3ef 8211 	mrs	r2, BASEPRI
 8007fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa6:	b672      	cpsid	i
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	b662      	cpsie	i
 8007fb6:	61ba      	str	r2, [r7, #24]
 8007fb8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007fba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d02f      	beq.n	800802a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fd4:	68b9      	ldr	r1, [r7, #8]
 8007fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fd8:	f000 f8d6 	bl	8008188 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fde:	1e5a      	subs	r2, r3, #1
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007fe4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fec:	d112      	bne.n	8008014 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d016      	beq.n	8008024 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	3310      	adds	r3, #16
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 fed2 	bl	8008da4 <xTaskRemoveFromEventList>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00e      	beq.n	8008024 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	e007      	b.n	8008024 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008018:	3301      	adds	r3, #1
 800801a:	b2db      	uxtb	r3, r3
 800801c:	b25a      	sxtb	r2, r3
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008024:	2301      	movs	r3, #1
 8008026:	637b      	str	r3, [r7, #52]	; 0x34
 8008028:	e001      	b.n	800802e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800802a:	2300      	movs	r3, #0
 800802c:	637b      	str	r3, [r7, #52]	; 0x34
 800802e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008030:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	f383 8811 	msr	BASEPRI, r3
}
 8008038:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800803a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800803c:	4618      	mov	r0, r3
 800803e:	3738      	adds	r7, #56	; 0x38
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10c      	bne.n	800806c <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	b672      	cpsid	i
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	b662      	cpsie	i
 8008066:	60bb      	str	r3, [r7, #8]
}
 8008068:	bf00      	nop
 800806a:	e7fe      	b.n	800806a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800806c:	f001 fc2e 	bl	80098cc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008074:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008076:	f001 fc5d 	bl	8009934 <vPortExitCritical>

	return uxReturn;
 800807a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	2b00      	cmp	r3, #0
 8008092:	d006      	beq.n	80080a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f1c3 0307 	rsb	r3, r3, #7
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	e001      	b.n	80080a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80080a6:	68fb      	ldr	r3, [r7, #12]
	}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80080c0:	2300      	movs	r3, #0
 80080c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10d      	bne.n	80080ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d14d      	bne.n	8008176 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 f92c 	bl	800933c <xTaskPriorityDisinherit>
 80080e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	609a      	str	r2, [r3, #8]
 80080ec:	e043      	b.n	8008176 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d119      	bne.n	8008128 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6858      	ldr	r0, [r3, #4]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fc:	461a      	mov	r2, r3
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	f00c fd1f 	bl	8014b42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	685a      	ldr	r2, [r3, #4]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810c:	441a      	add	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	685a      	ldr	r2, [r3, #4]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	429a      	cmp	r2, r3
 800811c:	d32b      	bcc.n	8008176 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	605a      	str	r2, [r3, #4]
 8008126:	e026      	b.n	8008176 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	68d8      	ldr	r0, [r3, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008130:	461a      	mov	r2, r3
 8008132:	68b9      	ldr	r1, [r7, #8]
 8008134:	f00c fd05 	bl	8014b42 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	68da      	ldr	r2, [r3, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008140:	425b      	negs	r3, r3
 8008142:	441a      	add	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	429a      	cmp	r2, r3
 8008152:	d207      	bcs.n	8008164 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	689a      	ldr	r2, [r3, #8]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815c:	425b      	negs	r3, r3
 800815e:	441a      	add	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b02      	cmp	r3, #2
 8008168:	d105      	bne.n	8008176 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	3b01      	subs	r3, #1
 8008174:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	1c5a      	adds	r2, r3, #1
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800817e:	697b      	ldr	r3, [r7, #20]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3718      	adds	r7, #24
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	2b00      	cmp	r3, #0
 8008198:	d018      	beq.n	80081cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a2:	441a      	add	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68da      	ldr	r2, [r3, #12]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d303      	bcc.n	80081bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	68d9      	ldr	r1, [r3, #12]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c4:	461a      	mov	r2, r3
 80081c6:	6838      	ldr	r0, [r7, #0]
 80081c8:	f00c fcbb 	bl	8014b42 <memcpy>
	}
}
 80081cc:	bf00      	nop
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80081dc:	f001 fb76 	bl	80098cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081e8:	e011      	b.n	800820e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d012      	beq.n	8008218 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	3324      	adds	r3, #36	; 0x24
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 fdd4 	bl	8008da4 <xTaskRemoveFromEventList>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008202:	f000 ff15 	bl	8009030 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	3b01      	subs	r3, #1
 800820a:	b2db      	uxtb	r3, r3
 800820c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800820e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008212:	2b00      	cmp	r3, #0
 8008214:	dce9      	bgt.n	80081ea <prvUnlockQueue+0x16>
 8008216:	e000      	b.n	800821a <prvUnlockQueue+0x46>
					break;
 8008218:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	22ff      	movs	r2, #255	; 0xff
 800821e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008222:	f001 fb87 	bl	8009934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008226:	f001 fb51 	bl	80098cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008230:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008232:	e011      	b.n	8008258 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d012      	beq.n	8008262 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	3310      	adds	r3, #16
 8008240:	4618      	mov	r0, r3
 8008242:	f000 fdaf 	bl	8008da4 <xTaskRemoveFromEventList>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800824c:	f000 fef0 	bl	8009030 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	3b01      	subs	r3, #1
 8008254:	b2db      	uxtb	r3, r3
 8008256:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008258:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800825c:	2b00      	cmp	r3, #0
 800825e:	dce9      	bgt.n	8008234 <prvUnlockQueue+0x60>
 8008260:	e000      	b.n	8008264 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008262:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	22ff      	movs	r2, #255	; 0xff
 8008268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800826c:	f001 fb62 	bl	8009934 <vPortExitCritical>
}
 8008270:	bf00      	nop
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008280:	f001 fb24 	bl	80098cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008288:	2b00      	cmp	r3, #0
 800828a:	d102      	bne.n	8008292 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800828c:	2301      	movs	r3, #1
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	e001      	b.n	8008296 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008292:	2300      	movs	r3, #0
 8008294:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008296:	f001 fb4d 	bl	8009934 <vPortExitCritical>

	return xReturn;
 800829a:	68fb      	ldr	r3, [r7, #12]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082ac:	f001 fb0e 	bl	80098cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d102      	bne.n	80082c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80082bc:	2301      	movs	r3, #1
 80082be:	60fb      	str	r3, [r7, #12]
 80082c0:	e001      	b.n	80082c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80082c2:	2300      	movs	r3, #0
 80082c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082c6:	f001 fb35 	bl	8009934 <vPortExitCritical>

	return xReturn;
 80082ca:	68fb      	ldr	r3, [r7, #12]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08e      	sub	sp, #56	; 0x38
 80082d8:	af04      	add	r7, sp, #16
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
 80082e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80082e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10c      	bne.n	8008302 <xTaskCreateStatic+0x2e>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	b672      	cpsid	i
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	b662      	cpsie	i
 80082fc:	623b      	str	r3, [r7, #32]
}
 80082fe:	bf00      	nop
 8008300:	e7fe      	b.n	8008300 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10c      	bne.n	8008322 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830c:	b672      	cpsid	i
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	b662      	cpsie	i
 800831c:	61fb      	str	r3, [r7, #28]
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008322:	23b4      	movs	r3, #180	; 0xb4
 8008324:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	2bb4      	cmp	r3, #180	; 0xb4
 800832a:	d00c      	beq.n	8008346 <xTaskCreateStatic+0x72>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	b672      	cpsid	i
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	b662      	cpsie	i
 8008340:	61bb      	str	r3, [r7, #24]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008346:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834a:	2b00      	cmp	r3, #0
 800834c:	d01e      	beq.n	800838c <xTaskCreateStatic+0xb8>
 800834e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008350:	2b00      	cmp	r3, #0
 8008352:	d01b      	beq.n	800838c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800835c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	2202      	movs	r2, #2
 8008362:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008366:	2300      	movs	r3, #0
 8008368:	9303      	str	r3, [sp, #12]
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	9302      	str	r3, [sp, #8]
 800836e:	f107 0314 	add.w	r3, r7, #20
 8008372:	9301      	str	r3, [sp, #4]
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	68b9      	ldr	r1, [r7, #8]
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 f850 	bl	8008424 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008386:	f000 f8f5 	bl	8008574 <prvAddNewTaskToReadyList>
 800838a:	e001      	b.n	8008390 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800838c:	2300      	movs	r3, #0
 800838e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008390:	697b      	ldr	r3, [r7, #20]
	}
 8008392:	4618      	mov	r0, r3
 8008394:	3728      	adds	r7, #40	; 0x28
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800839a:	b580      	push	{r7, lr}
 800839c:	b08c      	sub	sp, #48	; 0x30
 800839e:	af04      	add	r7, sp, #16
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	60b9      	str	r1, [r7, #8]
 80083a4:	603b      	str	r3, [r7, #0]
 80083a6:	4613      	mov	r3, r2
 80083a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80083aa:	88fb      	ldrh	r3, [r7, #6]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 fbb8 	bl	8009b24 <pvPortMalloc>
 80083b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00e      	beq.n	80083da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80083bc:	20b4      	movs	r0, #180	; 0xb4
 80083be:	f001 fbb1 	bl	8009b24 <pvPortMalloc>
 80083c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d003      	beq.n	80083d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	697a      	ldr	r2, [r7, #20]
 80083ce:	631a      	str	r2, [r3, #48]	; 0x30
 80083d0:	e005      	b.n	80083de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80083d2:	6978      	ldr	r0, [r7, #20]
 80083d4:	f001 fc70 	bl	8009cb8 <vPortFree>
 80083d8:	e001      	b.n	80083de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80083da:	2300      	movs	r3, #0
 80083dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d017      	beq.n	8008414 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083ec:	88fa      	ldrh	r2, [r7, #6]
 80083ee:	2300      	movs	r3, #0
 80083f0:	9303      	str	r3, [sp, #12]
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	9302      	str	r3, [sp, #8]
 80083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	68b9      	ldr	r1, [r7, #8]
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 f80e 	bl	8008424 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008408:	69f8      	ldr	r0, [r7, #28]
 800840a:	f000 f8b3 	bl	8008574 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800840e:	2301      	movs	r3, #1
 8008410:	61bb      	str	r3, [r7, #24]
 8008412:	e002      	b.n	800841a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008418:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800841a:	69bb      	ldr	r3, [r7, #24]
	}
 800841c:	4618      	mov	r0, r3
 800841e:	3720      	adds	r7, #32
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b088      	sub	sp, #32
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
 8008430:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	461a      	mov	r2, r3
 800843c:	21a5      	movs	r1, #165	; 0xa5
 800843e:	f00c fba8 	bl	8014b92 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008446:	6879      	ldr	r1, [r7, #4]
 8008448:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800844c:	440b      	add	r3, r1
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	f023 0307 	bic.w	r3, r3, #7
 800845a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	f003 0307 	and.w	r3, r3, #7
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00c      	beq.n	8008480 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846a:	b672      	cpsid	i
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	b662      	cpsie	i
 800847a:	617b      	str	r3, [r7, #20]
}
 800847c:	bf00      	nop
 800847e:	e7fe      	b.n	800847e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d01f      	beq.n	80084c6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008486:	2300      	movs	r3, #0
 8008488:	61fb      	str	r3, [r7, #28]
 800848a:	e012      	b.n	80084b2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	4413      	add	r3, r2
 8008492:	7819      	ldrb	r1, [r3, #0]
 8008494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	4413      	add	r3, r2
 800849a:	3334      	adds	r3, #52	; 0x34
 800849c:	460a      	mov	r2, r1
 800849e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	4413      	add	r3, r2
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d006      	beq.n	80084ba <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	3301      	adds	r3, #1
 80084b0:	61fb      	str	r3, [r7, #28]
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	2b0f      	cmp	r3, #15
 80084b6:	d9e9      	bls.n	800848c <prvInitialiseNewTask+0x68>
 80084b8:	e000      	b.n	80084bc <prvInitialiseNewTask+0x98>
			{
				break;
 80084ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084c4:	e003      	b.n	80084ce <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d0:	2b06      	cmp	r3, #6
 80084d2:	d901      	bls.n	80084d8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084d4:	2306      	movs	r3, #6
 80084d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	2200      	movs	r2, #0
 80084e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	3304      	adds	r3, #4
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fe febd 	bl	800726e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	3318      	adds	r3, #24
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fe feb8 	bl	800726e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008502:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008506:	f1c3 0207 	rsb	r2, r3, #7
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008512:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	2200      	movs	r2, #0
 8008518:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	2200      	movs	r2, #0
 8008520:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	334c      	adds	r3, #76	; 0x4c
 8008528:	2260      	movs	r2, #96	; 0x60
 800852a:	2100      	movs	r1, #0
 800852c:	4618      	mov	r0, r3
 800852e:	f00c fb30 	bl	8014b92 <memset>
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	4a0c      	ldr	r2, [pc, #48]	; (8008568 <prvInitialiseNewTask+0x144>)
 8008536:	651a      	str	r2, [r3, #80]	; 0x50
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	4a0c      	ldr	r2, [pc, #48]	; (800856c <prvInitialiseNewTask+0x148>)
 800853c:	655a      	str	r2, [r3, #84]	; 0x54
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	4a0b      	ldr	r2, [pc, #44]	; (8008570 <prvInitialiseNewTask+0x14c>)
 8008542:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	68f9      	ldr	r1, [r7, #12]
 8008548:	69b8      	ldr	r0, [r7, #24]
 800854a:	f001 f8b1 	bl	80096b0 <pxPortInitialiseStack>
 800854e:	4602      	mov	r2, r0
 8008550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008552:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800855a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800855e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008560:	bf00      	nop
 8008562:	3720      	adds	r7, #32
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	08018ccc 	.word	0x08018ccc
 800856c:	08018cec 	.word	0x08018cec
 8008570:	08018cac 	.word	0x08018cac

08008574 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800857c:	f001 f9a6 	bl	80098cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008580:	4b2a      	ldr	r3, [pc, #168]	; (800862c <prvAddNewTaskToReadyList+0xb8>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3301      	adds	r3, #1
 8008586:	4a29      	ldr	r2, [pc, #164]	; (800862c <prvAddNewTaskToReadyList+0xb8>)
 8008588:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800858a:	4b29      	ldr	r3, [pc, #164]	; (8008630 <prvAddNewTaskToReadyList+0xbc>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d109      	bne.n	80085a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008592:	4a27      	ldr	r2, [pc, #156]	; (8008630 <prvAddNewTaskToReadyList+0xbc>)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008598:	4b24      	ldr	r3, [pc, #144]	; (800862c <prvAddNewTaskToReadyList+0xb8>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d110      	bne.n	80085c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085a0:	f000 fd6a 	bl	8009078 <prvInitialiseTaskLists>
 80085a4:	e00d      	b.n	80085c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085a6:	4b23      	ldr	r3, [pc, #140]	; (8008634 <prvAddNewTaskToReadyList+0xc0>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d109      	bne.n	80085c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085ae:	4b20      	ldr	r3, [pc, #128]	; (8008630 <prvAddNewTaskToReadyList+0xbc>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d802      	bhi.n	80085c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085bc:	4a1c      	ldr	r2, [pc, #112]	; (8008630 <prvAddNewTaskToReadyList+0xbc>)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085c2:	4b1d      	ldr	r3, [pc, #116]	; (8008638 <prvAddNewTaskToReadyList+0xc4>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3301      	adds	r3, #1
 80085c8:	4a1b      	ldr	r2, [pc, #108]	; (8008638 <prvAddNewTaskToReadyList+0xc4>)
 80085ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d0:	2201      	movs	r2, #1
 80085d2:	409a      	lsls	r2, r3
 80085d4:	4b19      	ldr	r3, [pc, #100]	; (800863c <prvAddNewTaskToReadyList+0xc8>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4313      	orrs	r3, r2
 80085da:	4a18      	ldr	r2, [pc, #96]	; (800863c <prvAddNewTaskToReadyList+0xc8>)
 80085dc:	6013      	str	r3, [r2, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e2:	4613      	mov	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4a15      	ldr	r2, [pc, #84]	; (8008640 <prvAddNewTaskToReadyList+0xcc>)
 80085ec:	441a      	add	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	3304      	adds	r3, #4
 80085f2:	4619      	mov	r1, r3
 80085f4:	4610      	mov	r0, r2
 80085f6:	f7fe fe47 	bl	8007288 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085fa:	f001 f99b 	bl	8009934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085fe:	4b0d      	ldr	r3, [pc, #52]	; (8008634 <prvAddNewTaskToReadyList+0xc0>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00e      	beq.n	8008624 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008606:	4b0a      	ldr	r3, [pc, #40]	; (8008630 <prvAddNewTaskToReadyList+0xbc>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008610:	429a      	cmp	r2, r3
 8008612:	d207      	bcs.n	8008624 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008614:	4b0b      	ldr	r3, [pc, #44]	; (8008644 <prvAddNewTaskToReadyList+0xd0>)
 8008616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	200058f4 	.word	0x200058f4
 8008630:	200057f4 	.word	0x200057f4
 8008634:	20005900 	.word	0x20005900
 8008638:	20005910 	.word	0x20005910
 800863c:	200058fc 	.word	0x200058fc
 8008640:	200057f8 	.word	0x200057f8
 8008644:	e000ed04 	.word	0xe000ed04

08008648 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008650:	f001 f93c 	bl	80098cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d102      	bne.n	8008660 <vTaskDelete+0x18>
 800865a:	4b3a      	ldr	r3, [pc, #232]	; (8008744 <vTaskDelete+0xfc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	e000      	b.n	8008662 <vTaskDelete+0x1a>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	3304      	adds	r3, #4
 8008668:	4618      	mov	r0, r3
 800866a:	f7fe fe6a 	bl	8007342 <uxListRemove>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d115      	bne.n	80086a0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008678:	4933      	ldr	r1, [pc, #204]	; (8008748 <vTaskDelete+0x100>)
 800867a:	4613      	mov	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4413      	add	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	440b      	add	r3, r1
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10a      	bne.n	80086a0 <vTaskDelete+0x58>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868e:	2201      	movs	r2, #1
 8008690:	fa02 f303 	lsl.w	r3, r2, r3
 8008694:	43da      	mvns	r2, r3
 8008696:	4b2d      	ldr	r3, [pc, #180]	; (800874c <vTaskDelete+0x104>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4013      	ands	r3, r2
 800869c:	4a2b      	ldr	r2, [pc, #172]	; (800874c <vTaskDelete+0x104>)
 800869e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d004      	beq.n	80086b2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3318      	adds	r3, #24
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fe fe48 	bl	8007342 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80086b2:	4b27      	ldr	r3, [pc, #156]	; (8008750 <vTaskDelete+0x108>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3301      	adds	r3, #1
 80086b8:	4a25      	ldr	r2, [pc, #148]	; (8008750 <vTaskDelete+0x108>)
 80086ba:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80086bc:	4b21      	ldr	r3, [pc, #132]	; (8008744 <vTaskDelete+0xfc>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d10b      	bne.n	80086de <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3304      	adds	r3, #4
 80086ca:	4619      	mov	r1, r3
 80086cc:	4821      	ldr	r0, [pc, #132]	; (8008754 <vTaskDelete+0x10c>)
 80086ce:	f7fe fddb 	bl	8007288 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80086d2:	4b21      	ldr	r3, [pc, #132]	; (8008758 <vTaskDelete+0x110>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3301      	adds	r3, #1
 80086d8:	4a1f      	ldr	r2, [pc, #124]	; (8008758 <vTaskDelete+0x110>)
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	e009      	b.n	80086f2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80086de:	4b1f      	ldr	r3, [pc, #124]	; (800875c <vTaskDelete+0x114>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	4a1d      	ldr	r2, [pc, #116]	; (800875c <vTaskDelete+0x114>)
 80086e6:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 fd33 	bl	8009154 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80086ee:	f000 fd67 	bl	80091c0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80086f2:	f001 f91f 	bl	8009934 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80086f6:	4b1a      	ldr	r3, [pc, #104]	; (8008760 <vTaskDelete+0x118>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d01d      	beq.n	800873a <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 80086fe:	4b11      	ldr	r3, [pc, #68]	; (8008744 <vTaskDelete+0xfc>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	429a      	cmp	r2, r3
 8008706:	d118      	bne.n	800873a <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008708:	4b16      	ldr	r3, [pc, #88]	; (8008764 <vTaskDelete+0x11c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00c      	beq.n	800872a <vTaskDelete+0xe2>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	b672      	cpsid	i
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	b662      	cpsie	i
 8008724:	60bb      	str	r3, [r7, #8]
}
 8008726:	bf00      	nop
 8008728:	e7fe      	b.n	8008728 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800872a:	4b0f      	ldr	r3, [pc, #60]	; (8008768 <vTaskDelete+0x120>)
 800872c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800873a:	bf00      	nop
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	200057f4 	.word	0x200057f4
 8008748:	200057f8 	.word	0x200057f8
 800874c:	200058fc 	.word	0x200058fc
 8008750:	20005910 	.word	0x20005910
 8008754:	200058c8 	.word	0x200058c8
 8008758:	200058dc 	.word	0x200058dc
 800875c:	200058f4 	.word	0x200058f4
 8008760:	20005900 	.word	0x20005900
 8008764:	2000591c 	.word	0x2000591c
 8008768:	e000ed04 	.word	0xe000ed04

0800876c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008774:	2300      	movs	r3, #0
 8008776:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d019      	beq.n	80087b2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800877e:	4b14      	ldr	r3, [pc, #80]	; (80087d0 <vTaskDelay+0x64>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00c      	beq.n	80087a0 <vTaskDelay+0x34>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878a:	b672      	cpsid	i
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	b662      	cpsie	i
 800879a:	60bb      	str	r3, [r7, #8]
}
 800879c:	bf00      	nop
 800879e:	e7fe      	b.n	800879e <vTaskDelay+0x32>
			vTaskSuspendAll();
 80087a0:	f000 f888 	bl	80088b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087a4:	2100      	movs	r1, #0
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 ff1c 	bl	80095e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087ac:	f000 f890 	bl	80088d0 <xTaskResumeAll>
 80087b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d107      	bne.n	80087c8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80087b8:	4b06      	ldr	r3, [pc, #24]	; (80087d4 <vTaskDelay+0x68>)
 80087ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087c8:	bf00      	nop
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	2000591c 	.word	0x2000591c
 80087d4:	e000ed04 	.word	0xe000ed04

080087d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b08a      	sub	sp, #40	; 0x28
 80087dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087de:	2300      	movs	r3, #0
 80087e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087e2:	2300      	movs	r3, #0
 80087e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087e6:	463a      	mov	r2, r7
 80087e8:	1d39      	adds	r1, r7, #4
 80087ea:	f107 0308 	add.w	r3, r7, #8
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7f7 ff08 	bl	8000604 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	9202      	str	r2, [sp, #8]
 80087fc:	9301      	str	r3, [sp, #4]
 80087fe:	2300      	movs	r3, #0
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	2300      	movs	r3, #0
 8008804:	460a      	mov	r2, r1
 8008806:	4923      	ldr	r1, [pc, #140]	; (8008894 <vTaskStartScheduler+0xbc>)
 8008808:	4823      	ldr	r0, [pc, #140]	; (8008898 <vTaskStartScheduler+0xc0>)
 800880a:	f7ff fd63 	bl	80082d4 <xTaskCreateStatic>
 800880e:	4603      	mov	r3, r0
 8008810:	4a22      	ldr	r2, [pc, #136]	; (800889c <vTaskStartScheduler+0xc4>)
 8008812:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008814:	4b21      	ldr	r3, [pc, #132]	; (800889c <vTaskStartScheduler+0xc4>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800881c:	2301      	movs	r3, #1
 800881e:	617b      	str	r3, [r7, #20]
 8008820:	e001      	b.n	8008826 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008822:	2300      	movs	r3, #0
 8008824:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d11d      	bne.n	8008868 <vTaskStartScheduler+0x90>
	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	b672      	cpsid	i
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	b662      	cpsie	i
 8008840:	613b      	str	r3, [r7, #16]
}
 8008842:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008844:	4b16      	ldr	r3, [pc, #88]	; (80088a0 <vTaskStartScheduler+0xc8>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	334c      	adds	r3, #76	; 0x4c
 800884a:	4a16      	ldr	r2, [pc, #88]	; (80088a4 <vTaskStartScheduler+0xcc>)
 800884c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800884e:	4b16      	ldr	r3, [pc, #88]	; (80088a8 <vTaskStartScheduler+0xd0>)
 8008850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008854:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008856:	4b15      	ldr	r3, [pc, #84]	; (80088ac <vTaskStartScheduler+0xd4>)
 8008858:	2201      	movs	r2, #1
 800885a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800885c:	4b14      	ldr	r3, [pc, #80]	; (80088b0 <vTaskStartScheduler+0xd8>)
 800885e:	2200      	movs	r2, #0
 8008860:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008862:	f000 ffb5 	bl	80097d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008866:	e010      	b.n	800888a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800886e:	d10c      	bne.n	800888a <vTaskStartScheduler+0xb2>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	b672      	cpsid	i
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	b662      	cpsie	i
 8008884:	60fb      	str	r3, [r7, #12]
}
 8008886:	bf00      	nop
 8008888:	e7fe      	b.n	8008888 <vTaskStartScheduler+0xb0>
}
 800888a:	bf00      	nop
 800888c:	3718      	adds	r7, #24
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	080160cc 	.word	0x080160cc
 8008898:	08009049 	.word	0x08009049
 800889c:	20005918 	.word	0x20005918
 80088a0:	200057f4 	.word	0x200057f4
 80088a4:	20000030 	.word	0x20000030
 80088a8:	20005914 	.word	0x20005914
 80088ac:	20005900 	.word	0x20005900
 80088b0:	200058f8 	.word	0x200058f8

080088b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088b4:	b480      	push	{r7}
 80088b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80088b8:	4b04      	ldr	r3, [pc, #16]	; (80088cc <vTaskSuspendAll+0x18>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3301      	adds	r3, #1
 80088be:	4a03      	ldr	r2, [pc, #12]	; (80088cc <vTaskSuspendAll+0x18>)
 80088c0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80088c2:	bf00      	nop
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	2000591c 	.word	0x2000591c

080088d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088d6:	2300      	movs	r3, #0
 80088d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088da:	2300      	movs	r3, #0
 80088dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088de:	4b42      	ldr	r3, [pc, #264]	; (80089e8 <xTaskResumeAll+0x118>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10c      	bne.n	8008900 <xTaskResumeAll+0x30>
	__asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ea:	b672      	cpsid	i
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	b662      	cpsie	i
 80088fa:	603b      	str	r3, [r7, #0]
}
 80088fc:	bf00      	nop
 80088fe:	e7fe      	b.n	80088fe <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008900:	f000 ffe4 	bl	80098cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008904:	4b38      	ldr	r3, [pc, #224]	; (80089e8 <xTaskResumeAll+0x118>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3b01      	subs	r3, #1
 800890a:	4a37      	ldr	r2, [pc, #220]	; (80089e8 <xTaskResumeAll+0x118>)
 800890c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800890e:	4b36      	ldr	r3, [pc, #216]	; (80089e8 <xTaskResumeAll+0x118>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d161      	bne.n	80089da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008916:	4b35      	ldr	r3, [pc, #212]	; (80089ec <xTaskResumeAll+0x11c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d05d      	beq.n	80089da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800891e:	e02e      	b.n	800897e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008920:	4b33      	ldr	r3, [pc, #204]	; (80089f0 <xTaskResumeAll+0x120>)
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3318      	adds	r3, #24
 800892c:	4618      	mov	r0, r3
 800892e:	f7fe fd08 	bl	8007342 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	3304      	adds	r3, #4
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe fd03 	bl	8007342 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008940:	2201      	movs	r2, #1
 8008942:	409a      	lsls	r2, r3
 8008944:	4b2b      	ldr	r3, [pc, #172]	; (80089f4 <xTaskResumeAll+0x124>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4313      	orrs	r3, r2
 800894a:	4a2a      	ldr	r2, [pc, #168]	; (80089f4 <xTaskResumeAll+0x124>)
 800894c:	6013      	str	r3, [r2, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008952:	4613      	mov	r3, r2
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4413      	add	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4a27      	ldr	r2, [pc, #156]	; (80089f8 <xTaskResumeAll+0x128>)
 800895c:	441a      	add	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3304      	adds	r3, #4
 8008962:	4619      	mov	r1, r3
 8008964:	4610      	mov	r0, r2
 8008966:	f7fe fc8f 	bl	8007288 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896e:	4b23      	ldr	r3, [pc, #140]	; (80089fc <xTaskResumeAll+0x12c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008974:	429a      	cmp	r2, r3
 8008976:	d302      	bcc.n	800897e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008978:	4b21      	ldr	r3, [pc, #132]	; (8008a00 <xTaskResumeAll+0x130>)
 800897a:	2201      	movs	r2, #1
 800897c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800897e:	4b1c      	ldr	r3, [pc, #112]	; (80089f0 <xTaskResumeAll+0x120>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1cc      	bne.n	8008920 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800898c:	f000 fc18 	bl	80091c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008990:	4b1c      	ldr	r3, [pc, #112]	; (8008a04 <xTaskResumeAll+0x134>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d010      	beq.n	80089be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800899c:	f000 f858 	bl	8008a50 <xTaskIncrementTick>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80089a6:	4b16      	ldr	r3, [pc, #88]	; (8008a00 <xTaskResumeAll+0x130>)
 80089a8:	2201      	movs	r2, #1
 80089aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	3b01      	subs	r3, #1
 80089b0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1f1      	bne.n	800899c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80089b8:	4b12      	ldr	r3, [pc, #72]	; (8008a04 <xTaskResumeAll+0x134>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089be:	4b10      	ldr	r3, [pc, #64]	; (8008a00 <xTaskResumeAll+0x130>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d009      	beq.n	80089da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089c6:	2301      	movs	r3, #1
 80089c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089ca:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <xTaskResumeAll+0x138>)
 80089cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d0:	601a      	str	r2, [r3, #0]
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089da:	f000 ffab 	bl	8009934 <vPortExitCritical>

	return xAlreadyYielded;
 80089de:	68bb      	ldr	r3, [r7, #8]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	2000591c 	.word	0x2000591c
 80089ec:	200058f4 	.word	0x200058f4
 80089f0:	200058b4 	.word	0x200058b4
 80089f4:	200058fc 	.word	0x200058fc
 80089f8:	200057f8 	.word	0x200057f8
 80089fc:	200057f4 	.word	0x200057f4
 8008a00:	20005908 	.word	0x20005908
 8008a04:	20005904 	.word	0x20005904
 8008a08:	e000ed04 	.word	0xe000ed04

08008a0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a12:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <xTaskGetTickCount+0x1c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a18:	687b      	ldr	r3, [r7, #4]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	200058f8 	.word	0x200058f8

08008a2c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a32:	f001 f833 	bl	8009a9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008a36:	2300      	movs	r3, #0
 8008a38:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008a3a:	4b04      	ldr	r3, [pc, #16]	; (8008a4c <xTaskGetTickCountFromISR+0x20>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a40:	683b      	ldr	r3, [r7, #0]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	200058f8 	.word	0x200058f8

08008a50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a56:	2300      	movs	r3, #0
 8008a58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a5a:	4b4f      	ldr	r3, [pc, #316]	; (8008b98 <xTaskIncrementTick+0x148>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f040 808a 	bne.w	8008b78 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a64:	4b4d      	ldr	r3, [pc, #308]	; (8008b9c <xTaskIncrementTick+0x14c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a6c:	4a4b      	ldr	r2, [pc, #300]	; (8008b9c <xTaskIncrementTick+0x14c>)
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d122      	bne.n	8008abe <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a78:	4b49      	ldr	r3, [pc, #292]	; (8008ba0 <xTaskIncrementTick+0x150>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00c      	beq.n	8008a9c <xTaskIncrementTick+0x4c>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a86:	b672      	cpsid	i
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	b662      	cpsie	i
 8008a96:	603b      	str	r3, [r7, #0]
}
 8008a98:	bf00      	nop
 8008a9a:	e7fe      	b.n	8008a9a <xTaskIncrementTick+0x4a>
 8008a9c:	4b40      	ldr	r3, [pc, #256]	; (8008ba0 <xTaskIncrementTick+0x150>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	4b40      	ldr	r3, [pc, #256]	; (8008ba4 <xTaskIncrementTick+0x154>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a3e      	ldr	r2, [pc, #248]	; (8008ba0 <xTaskIncrementTick+0x150>)
 8008aa8:	6013      	str	r3, [r2, #0]
 8008aaa:	4a3e      	ldr	r2, [pc, #248]	; (8008ba4 <xTaskIncrementTick+0x154>)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	4b3d      	ldr	r3, [pc, #244]	; (8008ba8 <xTaskIncrementTick+0x158>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	4a3c      	ldr	r2, [pc, #240]	; (8008ba8 <xTaskIncrementTick+0x158>)
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	f000 fb81 	bl	80091c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008abe:	4b3b      	ldr	r3, [pc, #236]	; (8008bac <xTaskIncrementTick+0x15c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d348      	bcc.n	8008b5a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ac8:	4b35      	ldr	r3, [pc, #212]	; (8008ba0 <xTaskIncrementTick+0x150>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d104      	bne.n	8008adc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ad2:	4b36      	ldr	r3, [pc, #216]	; (8008bac <xTaskIncrementTick+0x15c>)
 8008ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ad8:	601a      	str	r2, [r3, #0]
					break;
 8008ada:	e03e      	b.n	8008b5a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008adc:	4b30      	ldr	r3, [pc, #192]	; (8008ba0 <xTaskIncrementTick+0x150>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d203      	bcs.n	8008afc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008af4:	4a2d      	ldr	r2, [pc, #180]	; (8008bac <xTaskIncrementTick+0x15c>)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008afa:	e02e      	b.n	8008b5a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	3304      	adds	r3, #4
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fe fc1e 	bl	8007342 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d004      	beq.n	8008b18 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	3318      	adds	r3, #24
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fe fc15 	bl	8007342 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	409a      	lsls	r2, r3
 8008b20:	4b23      	ldr	r3, [pc, #140]	; (8008bb0 <xTaskIncrementTick+0x160>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	4a22      	ldr	r2, [pc, #136]	; (8008bb0 <xTaskIncrementTick+0x160>)
 8008b28:	6013      	str	r3, [r2, #0]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2e:	4613      	mov	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4a1f      	ldr	r2, [pc, #124]	; (8008bb4 <xTaskIncrementTick+0x164>)
 8008b38:	441a      	add	r2, r3
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	4619      	mov	r1, r3
 8008b40:	4610      	mov	r0, r2
 8008b42:	f7fe fba1 	bl	8007288 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4a:	4b1b      	ldr	r3, [pc, #108]	; (8008bb8 <xTaskIncrementTick+0x168>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d3b9      	bcc.n	8008ac8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008b54:	2301      	movs	r3, #1
 8008b56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b58:	e7b6      	b.n	8008ac8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b5a:	4b17      	ldr	r3, [pc, #92]	; (8008bb8 <xTaskIncrementTick+0x168>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b60:	4914      	ldr	r1, [pc, #80]	; (8008bb4 <xTaskIncrementTick+0x164>)
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	440b      	add	r3, r1
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d907      	bls.n	8008b82 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8008b72:	2301      	movs	r3, #1
 8008b74:	617b      	str	r3, [r7, #20]
 8008b76:	e004      	b.n	8008b82 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008b78:	4b10      	ldr	r3, [pc, #64]	; (8008bbc <xTaskIncrementTick+0x16c>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	4a0f      	ldr	r2, [pc, #60]	; (8008bbc <xTaskIncrementTick+0x16c>)
 8008b80:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008b82:	4b0f      	ldr	r3, [pc, #60]	; (8008bc0 <xTaskIncrementTick+0x170>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008b8e:	697b      	ldr	r3, [r7, #20]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3718      	adds	r7, #24
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	2000591c 	.word	0x2000591c
 8008b9c:	200058f8 	.word	0x200058f8
 8008ba0:	200058ac 	.word	0x200058ac
 8008ba4:	200058b0 	.word	0x200058b0
 8008ba8:	2000590c 	.word	0x2000590c
 8008bac:	20005914 	.word	0x20005914
 8008bb0:	200058fc 	.word	0x200058fc
 8008bb4:	200057f8 	.word	0x200057f8
 8008bb8:	200057f4 	.word	0x200057f4
 8008bbc:	20005904 	.word	0x20005904
 8008bc0:	20005908 	.word	0x20005908

08008bc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b088      	sub	sp, #32
 8008bc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bca:	4b3d      	ldr	r3, [pc, #244]	; (8008cc0 <vTaskSwitchContext+0xfc>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008bd2:	4b3c      	ldr	r3, [pc, #240]	; (8008cc4 <vTaskSwitchContext+0x100>)
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bd8:	e06d      	b.n	8008cb6 <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 8008bda:	4b3a      	ldr	r3, [pc, #232]	; (8008cc4 <vTaskSwitchContext+0x100>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008be0:	4b39      	ldr	r3, [pc, #228]	; (8008cc8 <vTaskSwitchContext+0x104>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be6:	61fb      	str	r3, [r7, #28]
 8008be8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008bec:	61bb      	str	r3, [r7, #24]
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	69ba      	ldr	r2, [r7, #24]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d111      	bne.n	8008c1c <vTaskSwitchContext+0x58>
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d10b      	bne.n	8008c1c <vTaskSwitchContext+0x58>
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	3308      	adds	r3, #8
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	69ba      	ldr	r2, [r7, #24]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d105      	bne.n	8008c1c <vTaskSwitchContext+0x58>
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	330c      	adds	r3, #12
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	69ba      	ldr	r2, [r7, #24]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d008      	beq.n	8008c2e <vTaskSwitchContext+0x6a>
 8008c1c:	4b2a      	ldr	r3, [pc, #168]	; (8008cc8 <vTaskSwitchContext+0x104>)
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	4b29      	ldr	r3, [pc, #164]	; (8008cc8 <vTaskSwitchContext+0x104>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3334      	adds	r3, #52	; 0x34
 8008c26:	4619      	mov	r1, r3
 8008c28:	4610      	mov	r0, r2
 8008c2a:	f7f7 fcdb 	bl	80005e4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c2e:	4b27      	ldr	r3, [pc, #156]	; (8008ccc <vTaskSwitchContext+0x108>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	fab3 f383 	clz	r3, r3
 8008c3a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008c3c:	7afb      	ldrb	r3, [r7, #11]
 8008c3e:	f1c3 031f 	rsb	r3, r3, #31
 8008c42:	617b      	str	r3, [r7, #20]
 8008c44:	4922      	ldr	r1, [pc, #136]	; (8008cd0 <vTaskSwitchContext+0x10c>)
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	440b      	add	r3, r1
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10c      	bne.n	8008c72 <vTaskSwitchContext+0xae>
	__asm volatile
 8008c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5c:	b672      	cpsid	i
 8008c5e:	f383 8811 	msr	BASEPRI, r3
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	b662      	cpsie	i
 8008c6c:	607b      	str	r3, [r7, #4]
}
 8008c6e:	bf00      	nop
 8008c70:	e7fe      	b.n	8008c70 <vTaskSwitchContext+0xac>
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	4613      	mov	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4413      	add	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	4a14      	ldr	r2, [pc, #80]	; (8008cd0 <vTaskSwitchContext+0x10c>)
 8008c7e:	4413      	add	r3, r2
 8008c80:	613b      	str	r3, [r7, #16]
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	605a      	str	r2, [r3, #4]
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	3308      	adds	r3, #8
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d104      	bne.n	8008ca2 <vTaskSwitchContext+0xde>
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	605a      	str	r2, [r3, #4]
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	4a07      	ldr	r2, [pc, #28]	; (8008cc8 <vTaskSwitchContext+0x104>)
 8008caa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cac:	4b06      	ldr	r3, [pc, #24]	; (8008cc8 <vTaskSwitchContext+0x104>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	334c      	adds	r3, #76	; 0x4c
 8008cb2:	4a08      	ldr	r2, [pc, #32]	; (8008cd4 <vTaskSwitchContext+0x110>)
 8008cb4:	6013      	str	r3, [r2, #0]
}
 8008cb6:	bf00      	nop
 8008cb8:	3720      	adds	r7, #32
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	2000591c 	.word	0x2000591c
 8008cc4:	20005908 	.word	0x20005908
 8008cc8:	200057f4 	.word	0x200057f4
 8008ccc:	200058fc 	.word	0x200058fc
 8008cd0:	200057f8 	.word	0x200057f8
 8008cd4:	20000030 	.word	0x20000030

08008cd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10c      	bne.n	8008d02 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cec:	b672      	cpsid	i
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	b662      	cpsie	i
 8008cfc:	60fb      	str	r3, [r7, #12]
}
 8008cfe:	bf00      	nop
 8008d00:	e7fe      	b.n	8008d00 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d02:	4b07      	ldr	r3, [pc, #28]	; (8008d20 <vTaskPlaceOnEventList+0x48>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3318      	adds	r3, #24
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7fe fae0 	bl	80072d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d10:	2101      	movs	r1, #1
 8008d12:	6838      	ldr	r0, [r7, #0]
 8008d14:	f000 fc66 	bl	80095e4 <prvAddCurrentTaskToDelayedList>
}
 8008d18:	bf00      	nop
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	200057f4 	.word	0x200057f4

08008d24 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10c      	bne.n	8008d50 <vTaskPlaceOnUnorderedEventList+0x2c>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3a:	b672      	cpsid	i
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	b662      	cpsie	i
 8008d4a:	617b      	str	r3, [r7, #20]
}
 8008d4c:	bf00      	nop
 8008d4e:	e7fe      	b.n	8008d4e <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008d50:	4b12      	ldr	r3, [pc, #72]	; (8008d9c <vTaskPlaceOnUnorderedEventList+0x78>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10c      	bne.n	8008d72 <vTaskPlaceOnUnorderedEventList+0x4e>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	b672      	cpsid	i
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	b662      	cpsie	i
 8008d6c:	613b      	str	r3, [r7, #16]
}
 8008d6e:	bf00      	nop
 8008d70:	e7fe      	b.n	8008d70 <vTaskPlaceOnUnorderedEventList+0x4c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008d72:	4b0b      	ldr	r3, [pc, #44]	; (8008da0 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008d7c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d7e:	4b08      	ldr	r3, [pc, #32]	; (8008da0 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3318      	adds	r3, #24
 8008d84:	4619      	mov	r1, r3
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f7fe fa7e 	bl	8007288 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fc28 	bl	80095e4 <prvAddCurrentTaskToDelayedList>
}
 8008d94:	bf00      	nop
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	2000591c 	.word	0x2000591c
 8008da0:	200057f4 	.word	0x200057f4

08008da4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10c      	bne.n	8008dd4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	b672      	cpsid	i
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	b662      	cpsie	i
 8008dce:	60fb      	str	r3, [r7, #12]
}
 8008dd0:	bf00      	nop
 8008dd2:	e7fe      	b.n	8008dd2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	3318      	adds	r3, #24
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fe fab2 	bl	8007342 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dde:	4b1d      	ldr	r3, [pc, #116]	; (8008e54 <xTaskRemoveFromEventList+0xb0>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d11c      	bne.n	8008e20 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	3304      	adds	r3, #4
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fe faa9 	bl	8007342 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	2201      	movs	r2, #1
 8008df6:	409a      	lsls	r2, r3
 8008df8:	4b17      	ldr	r3, [pc, #92]	; (8008e58 <xTaskRemoveFromEventList+0xb4>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	4a16      	ldr	r2, [pc, #88]	; (8008e58 <xTaskRemoveFromEventList+0xb4>)
 8008e00:	6013      	str	r3, [r2, #0]
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e06:	4613      	mov	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4a13      	ldr	r2, [pc, #76]	; (8008e5c <xTaskRemoveFromEventList+0xb8>)
 8008e10:	441a      	add	r2, r3
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	3304      	adds	r3, #4
 8008e16:	4619      	mov	r1, r3
 8008e18:	4610      	mov	r0, r2
 8008e1a:	f7fe fa35 	bl	8007288 <vListInsertEnd>
 8008e1e:	e005      	b.n	8008e2c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	3318      	adds	r3, #24
 8008e24:	4619      	mov	r1, r3
 8008e26:	480e      	ldr	r0, [pc, #56]	; (8008e60 <xTaskRemoveFromEventList+0xbc>)
 8008e28:	f7fe fa2e 	bl	8007288 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e30:	4b0c      	ldr	r3, [pc, #48]	; (8008e64 <xTaskRemoveFromEventList+0xc0>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d905      	bls.n	8008e46 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e3e:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <xTaskRemoveFromEventList+0xc4>)
 8008e40:	2201      	movs	r2, #1
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	e001      	b.n	8008e4a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008e46:	2300      	movs	r3, #0
 8008e48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e4a:	697b      	ldr	r3, [r7, #20]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3718      	adds	r7, #24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	2000591c 	.word	0x2000591c
 8008e58:	200058fc 	.word	0x200058fc
 8008e5c:	200057f8 	.word	0x200057f8
 8008e60:	200058b4 	.word	0x200058b4
 8008e64:	200057f4 	.word	0x200057f4
 8008e68:	20005908 	.word	0x20005908

08008e6c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b086      	sub	sp, #24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8008e76:	4b2b      	ldr	r3, [pc, #172]	; (8008f24 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10c      	bne.n	8008e98 <vTaskRemoveFromUnorderedEventList+0x2c>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	b672      	cpsid	i
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	b662      	cpsie	i
 8008e92:	613b      	str	r3, [r7, #16]
}
 8008e94:	bf00      	nop
 8008e96:	e7fe      	b.n	8008e96 <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10c      	bne.n	8008ec8 <vTaskRemoveFromUnorderedEventList+0x5c>
	__asm volatile
 8008eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb2:	b672      	cpsid	i
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	b662      	cpsie	i
 8008ec2:	60fb      	str	r3, [r7, #12]
}
 8008ec4:	bf00      	nop
 8008ec6:	e7fe      	b.n	8008ec6 <vTaskRemoveFromUnorderedEventList+0x5a>
	( void ) uxListRemove( pxEventListItem );
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f7fe fa3a 	bl	8007342 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe fa35 	bl	8007342 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008edc:	2201      	movs	r2, #1
 8008ede:	409a      	lsls	r2, r3
 8008ee0:	4b11      	ldr	r3, [pc, #68]	; (8008f28 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	4a10      	ldr	r2, [pc, #64]	; (8008f28 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008ee8:	6013      	str	r3, [r2, #0]
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eee:	4613      	mov	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4a0d      	ldr	r2, [pc, #52]	; (8008f2c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8008ef8:	441a      	add	r2, r3
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	3304      	adds	r3, #4
 8008efe:	4619      	mov	r1, r3
 8008f00:	4610      	mov	r0, r2
 8008f02:	f7fe f9c1 	bl	8007288 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0a:	4b09      	ldr	r3, [pc, #36]	; (8008f30 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d902      	bls.n	8008f1a <vTaskRemoveFromUnorderedEventList+0xae>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008f14:	4b07      	ldr	r3, [pc, #28]	; (8008f34 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8008f16:	2201      	movs	r2, #1
 8008f18:	601a      	str	r2, [r3, #0]
	}
}
 8008f1a:	bf00      	nop
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	2000591c 	.word	0x2000591c
 8008f28:	200058fc 	.word	0x200058fc
 8008f2c:	200057f8 	.word	0x200057f8
 8008f30:	200057f4 	.word	0x200057f4
 8008f34:	20005908 	.word	0x20005908

08008f38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f40:	4b06      	ldr	r3, [pc, #24]	; (8008f5c <vTaskInternalSetTimeOutState+0x24>)
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f48:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <vTaskInternalSetTimeOutState+0x28>)
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	605a      	str	r2, [r3, #4]
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	2000590c 	.word	0x2000590c
 8008f60:	200058f8 	.word	0x200058f8

08008f64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10c      	bne.n	8008f8e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	b672      	cpsid	i
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	b662      	cpsie	i
 8008f88:	613b      	str	r3, [r7, #16]
}
 8008f8a:	bf00      	nop
 8008f8c:	e7fe      	b.n	8008f8c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10c      	bne.n	8008fae <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	b672      	cpsid	i
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	b662      	cpsie	i
 8008fa8:	60fb      	str	r3, [r7, #12]
}
 8008faa:	bf00      	nop
 8008fac:	e7fe      	b.n	8008fac <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008fae:	f000 fc8d 	bl	80098cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008fb2:	4b1d      	ldr	r3, [pc, #116]	; (8009028 <xTaskCheckForTimeOut+0xc4>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	69ba      	ldr	r2, [r7, #24]
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fca:	d102      	bne.n	8008fd2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	61fb      	str	r3, [r7, #28]
 8008fd0:	e023      	b.n	800901a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	4b15      	ldr	r3, [pc, #84]	; (800902c <xTaskCheckForTimeOut+0xc8>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d007      	beq.n	8008fee <xTaskCheckForTimeOut+0x8a>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	69ba      	ldr	r2, [r7, #24]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d302      	bcc.n	8008fee <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	61fb      	str	r3, [r7, #28]
 8008fec:	e015      	b.n	800901a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	697a      	ldr	r2, [r7, #20]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d20b      	bcs.n	8009010 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	1ad2      	subs	r2, r2, r3
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7ff ff97 	bl	8008f38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800900a:	2300      	movs	r3, #0
 800900c:	61fb      	str	r3, [r7, #28]
 800900e:	e004      	b.n	800901a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	2200      	movs	r2, #0
 8009014:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009016:	2301      	movs	r3, #1
 8009018:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800901a:	f000 fc8b 	bl	8009934 <vPortExitCritical>

	return xReturn;
 800901e:	69fb      	ldr	r3, [r7, #28]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3720      	adds	r7, #32
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	200058f8 	.word	0x200058f8
 800902c:	2000590c 	.word	0x2000590c

08009030 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009030:	b480      	push	{r7}
 8009032:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009034:	4b03      	ldr	r3, [pc, #12]	; (8009044 <vTaskMissedYield+0x14>)
 8009036:	2201      	movs	r2, #1
 8009038:	601a      	str	r2, [r3, #0]
}
 800903a:	bf00      	nop
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	20005908 	.word	0x20005908

08009048 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009050:	f000 f852 	bl	80090f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009054:	4b06      	ldr	r3, [pc, #24]	; (8009070 <prvIdleTask+0x28>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d9f9      	bls.n	8009050 <prvIdleTask+0x8>
			{
				taskYIELD();
 800905c:	4b05      	ldr	r3, [pc, #20]	; (8009074 <prvIdleTask+0x2c>)
 800905e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800906c:	e7f0      	b.n	8009050 <prvIdleTask+0x8>
 800906e:	bf00      	nop
 8009070:	200057f8 	.word	0x200057f8
 8009074:	e000ed04 	.word	0xe000ed04

08009078 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800907e:	2300      	movs	r3, #0
 8009080:	607b      	str	r3, [r7, #4]
 8009082:	e00c      	b.n	800909e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	4613      	mov	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	4a12      	ldr	r2, [pc, #72]	; (80090d8 <prvInitialiseTaskLists+0x60>)
 8009090:	4413      	add	r3, r2
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe f8cb 	bl	800722e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	3301      	adds	r3, #1
 800909c:	607b      	str	r3, [r7, #4]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b06      	cmp	r3, #6
 80090a2:	d9ef      	bls.n	8009084 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090a4:	480d      	ldr	r0, [pc, #52]	; (80090dc <prvInitialiseTaskLists+0x64>)
 80090a6:	f7fe f8c2 	bl	800722e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090aa:	480d      	ldr	r0, [pc, #52]	; (80090e0 <prvInitialiseTaskLists+0x68>)
 80090ac:	f7fe f8bf 	bl	800722e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090b0:	480c      	ldr	r0, [pc, #48]	; (80090e4 <prvInitialiseTaskLists+0x6c>)
 80090b2:	f7fe f8bc 	bl	800722e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090b6:	480c      	ldr	r0, [pc, #48]	; (80090e8 <prvInitialiseTaskLists+0x70>)
 80090b8:	f7fe f8b9 	bl	800722e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090bc:	480b      	ldr	r0, [pc, #44]	; (80090ec <prvInitialiseTaskLists+0x74>)
 80090be:	f7fe f8b6 	bl	800722e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090c2:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <prvInitialiseTaskLists+0x78>)
 80090c4:	4a05      	ldr	r2, [pc, #20]	; (80090dc <prvInitialiseTaskLists+0x64>)
 80090c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090c8:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <prvInitialiseTaskLists+0x7c>)
 80090ca:	4a05      	ldr	r2, [pc, #20]	; (80090e0 <prvInitialiseTaskLists+0x68>)
 80090cc:	601a      	str	r2, [r3, #0]
}
 80090ce:	bf00      	nop
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	200057f8 	.word	0x200057f8
 80090dc:	20005884 	.word	0x20005884
 80090e0:	20005898 	.word	0x20005898
 80090e4:	200058b4 	.word	0x200058b4
 80090e8:	200058c8 	.word	0x200058c8
 80090ec:	200058e0 	.word	0x200058e0
 80090f0:	200058ac 	.word	0x200058ac
 80090f4:	200058b0 	.word	0x200058b0

080090f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090fe:	e019      	b.n	8009134 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009100:	f000 fbe4 	bl	80098cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009104:	4b10      	ldr	r3, [pc, #64]	; (8009148 <prvCheckTasksWaitingTermination+0x50>)
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	3304      	adds	r3, #4
 8009110:	4618      	mov	r0, r3
 8009112:	f7fe f916 	bl	8007342 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009116:	4b0d      	ldr	r3, [pc, #52]	; (800914c <prvCheckTasksWaitingTermination+0x54>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3b01      	subs	r3, #1
 800911c:	4a0b      	ldr	r2, [pc, #44]	; (800914c <prvCheckTasksWaitingTermination+0x54>)
 800911e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009120:	4b0b      	ldr	r3, [pc, #44]	; (8009150 <prvCheckTasksWaitingTermination+0x58>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3b01      	subs	r3, #1
 8009126:	4a0a      	ldr	r2, [pc, #40]	; (8009150 <prvCheckTasksWaitingTermination+0x58>)
 8009128:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800912a:	f000 fc03 	bl	8009934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f810 	bl	8009154 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009134:	4b06      	ldr	r3, [pc, #24]	; (8009150 <prvCheckTasksWaitingTermination+0x58>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e1      	bne.n	8009100 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	200058c8 	.word	0x200058c8
 800914c:	200058f4 	.word	0x200058f4
 8009150:	200058dc 	.word	0x200058dc

08009154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	334c      	adds	r3, #76	; 0x4c
 8009160:	4618      	mov	r0, r3
 8009162:	f00b ff07 	bl	8014f74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800916c:	2b00      	cmp	r3, #0
 800916e:	d108      	bne.n	8009182 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009174:	4618      	mov	r0, r3
 8009176:	f000 fd9f 	bl	8009cb8 <vPortFree>
				vPortFree( pxTCB );
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fd9c 	bl	8009cb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009180:	e01a      	b.n	80091b8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009188:	2b01      	cmp	r3, #1
 800918a:	d103      	bne.n	8009194 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fd93 	bl	8009cb8 <vPortFree>
	}
 8009192:	e011      	b.n	80091b8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800919a:	2b02      	cmp	r3, #2
 800919c:	d00c      	beq.n	80091b8 <prvDeleteTCB+0x64>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	b672      	cpsid	i
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	b662      	cpsie	i
 80091b2:	60fb      	str	r3, [r7, #12]
}
 80091b4:	bf00      	nop
 80091b6:	e7fe      	b.n	80091b6 <prvDeleteTCB+0x62>
	}
 80091b8:	bf00      	nop
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091c6:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <prvResetNextTaskUnblockTime+0x38>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d104      	bne.n	80091da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091d0:	4b0a      	ldr	r3, [pc, #40]	; (80091fc <prvResetNextTaskUnblockTime+0x3c>)
 80091d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091d8:	e008      	b.n	80091ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091da:	4b07      	ldr	r3, [pc, #28]	; (80091f8 <prvResetNextTaskUnblockTime+0x38>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	4a04      	ldr	r2, [pc, #16]	; (80091fc <prvResetNextTaskUnblockTime+0x3c>)
 80091ea:	6013      	str	r3, [r2, #0]
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	200058ac 	.word	0x200058ac
 80091fc:	20005914 	.word	0x20005914

08009200 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009206:	4b0b      	ldr	r3, [pc, #44]	; (8009234 <xTaskGetSchedulerState+0x34>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d102      	bne.n	8009214 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800920e:	2301      	movs	r3, #1
 8009210:	607b      	str	r3, [r7, #4]
 8009212:	e008      	b.n	8009226 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009214:	4b08      	ldr	r3, [pc, #32]	; (8009238 <xTaskGetSchedulerState+0x38>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d102      	bne.n	8009222 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800921c:	2302      	movs	r3, #2
 800921e:	607b      	str	r3, [r7, #4]
 8009220:	e001      	b.n	8009226 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009222:	2300      	movs	r3, #0
 8009224:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009226:	687b      	ldr	r3, [r7, #4]
	}
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	20005900 	.word	0x20005900
 8009238:	2000591c 	.word	0x2000591c

0800923c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009248:	2300      	movs	r3, #0
 800924a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d069      	beq.n	8009326 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009256:	4b36      	ldr	r3, [pc, #216]	; (8009330 <xTaskPriorityInherit+0xf4>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925c:	429a      	cmp	r2, r3
 800925e:	d259      	bcs.n	8009314 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	2b00      	cmp	r3, #0
 8009266:	db06      	blt.n	8009276 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009268:	4b31      	ldr	r3, [pc, #196]	; (8009330 <xTaskPriorityInherit+0xf4>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926e:	f1c3 0207 	rsb	r2, r3, #7
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	6959      	ldr	r1, [r3, #20]
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927e:	4613      	mov	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4a2b      	ldr	r2, [pc, #172]	; (8009334 <xTaskPriorityInherit+0xf8>)
 8009288:	4413      	add	r3, r2
 800928a:	4299      	cmp	r1, r3
 800928c:	d13a      	bne.n	8009304 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	3304      	adds	r3, #4
 8009292:	4618      	mov	r0, r3
 8009294:	f7fe f855 	bl	8007342 <uxListRemove>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d115      	bne.n	80092ca <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a2:	4924      	ldr	r1, [pc, #144]	; (8009334 <xTaskPriorityInherit+0xf8>)
 80092a4:	4613      	mov	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	440b      	add	r3, r1
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10a      	bne.n	80092ca <xTaskPriorityInherit+0x8e>
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	2201      	movs	r2, #1
 80092ba:	fa02 f303 	lsl.w	r3, r2, r3
 80092be:	43da      	mvns	r2, r3
 80092c0:	4b1d      	ldr	r3, [pc, #116]	; (8009338 <xTaskPriorityInherit+0xfc>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4013      	ands	r3, r2
 80092c6:	4a1c      	ldr	r2, [pc, #112]	; (8009338 <xTaskPriorityInherit+0xfc>)
 80092c8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092ca:	4b19      	ldr	r3, [pc, #100]	; (8009330 <xTaskPriorityInherit+0xf4>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d8:	2201      	movs	r2, #1
 80092da:	409a      	lsls	r2, r3
 80092dc:	4b16      	ldr	r3, [pc, #88]	; (8009338 <xTaskPriorityInherit+0xfc>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	4a15      	ldr	r2, [pc, #84]	; (8009338 <xTaskPriorityInherit+0xfc>)
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ea:	4613      	mov	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4a10      	ldr	r2, [pc, #64]	; (8009334 <xTaskPriorityInherit+0xf8>)
 80092f4:	441a      	add	r2, r3
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	3304      	adds	r3, #4
 80092fa:	4619      	mov	r1, r3
 80092fc:	4610      	mov	r0, r2
 80092fe:	f7fd ffc3 	bl	8007288 <vListInsertEnd>
 8009302:	e004      	b.n	800930e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009304:	4b0a      	ldr	r3, [pc, #40]	; (8009330 <xTaskPriorityInherit+0xf4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800930e:	2301      	movs	r3, #1
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	e008      	b.n	8009326 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009318:	4b05      	ldr	r3, [pc, #20]	; (8009330 <xTaskPriorityInherit+0xf4>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931e:	429a      	cmp	r2, r3
 8009320:	d201      	bcs.n	8009326 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009322:	2301      	movs	r3, #1
 8009324:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009326:	68fb      	ldr	r3, [r7, #12]
	}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	200057f4 	.word	0x200057f4
 8009334:	200057f8 	.word	0x200057f8
 8009338:	200058fc 	.word	0x200058fc

0800933c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009348:	2300      	movs	r3, #0
 800934a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d072      	beq.n	8009438 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009352:	4b3c      	ldr	r3, [pc, #240]	; (8009444 <xTaskPriorityDisinherit+0x108>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	429a      	cmp	r2, r3
 800935a:	d00c      	beq.n	8009376 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800935c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009360:	b672      	cpsid	i
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	b662      	cpsie	i
 8009370:	60fb      	str	r3, [r7, #12]
}
 8009372:	bf00      	nop
 8009374:	e7fe      	b.n	8009374 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10c      	bne.n	8009398 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009382:	b672      	cpsid	i
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	b662      	cpsie	i
 8009392:	60bb      	str	r3, [r7, #8]
}
 8009394:	bf00      	nop
 8009396:	e7fe      	b.n	8009396 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800939c:	1e5a      	subs	r2, r3, #1
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d044      	beq.n	8009438 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d140      	bne.n	8009438 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	3304      	adds	r3, #4
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fd ffc1 	bl	8007342 <uxListRemove>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d115      	bne.n	80093f2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ca:	491f      	ldr	r1, [pc, #124]	; (8009448 <xTaskPriorityDisinherit+0x10c>)
 80093cc:	4613      	mov	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	4413      	add	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	440b      	add	r3, r1
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10a      	bne.n	80093f2 <xTaskPriorityDisinherit+0xb6>
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e0:	2201      	movs	r2, #1
 80093e2:	fa02 f303 	lsl.w	r3, r2, r3
 80093e6:	43da      	mvns	r2, r3
 80093e8:	4b18      	ldr	r3, [pc, #96]	; (800944c <xTaskPriorityDisinherit+0x110>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4013      	ands	r3, r2
 80093ee:	4a17      	ldr	r2, [pc, #92]	; (800944c <xTaskPriorityDisinherit+0x110>)
 80093f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fe:	f1c3 0207 	rsb	r2, r3, #7
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940a:	2201      	movs	r2, #1
 800940c:	409a      	lsls	r2, r3
 800940e:	4b0f      	ldr	r3, [pc, #60]	; (800944c <xTaskPriorityDisinherit+0x110>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4313      	orrs	r3, r2
 8009414:	4a0d      	ldr	r2, [pc, #52]	; (800944c <xTaskPriorityDisinherit+0x110>)
 8009416:	6013      	str	r3, [r2, #0]
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941c:	4613      	mov	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4a08      	ldr	r2, [pc, #32]	; (8009448 <xTaskPriorityDisinherit+0x10c>)
 8009426:	441a      	add	r2, r3
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	3304      	adds	r3, #4
 800942c:	4619      	mov	r1, r3
 800942e:	4610      	mov	r0, r2
 8009430:	f7fd ff2a 	bl	8007288 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009434:	2301      	movs	r3, #1
 8009436:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009438:	697b      	ldr	r3, [r7, #20]
	}
 800943a:	4618      	mov	r0, r3
 800943c:	3718      	adds	r7, #24
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	200057f4 	.word	0x200057f4
 8009448:	200057f8 	.word	0x200057f8
 800944c:	200058fc 	.word	0x200058fc

08009450 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009450:	b580      	push	{r7, lr}
 8009452:	b088      	sub	sp, #32
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800945e:	2301      	movs	r3, #1
 8009460:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	f000 8087 	beq.w	8009578 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800946e:	2b00      	cmp	r3, #0
 8009470:	d10c      	bne.n	800948c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8009472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009476:	b672      	cpsid	i
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	b662      	cpsie	i
 8009486:	60fb      	str	r3, [r7, #12]
}
 8009488:	bf00      	nop
 800948a:	e7fe      	b.n	800948a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009490:	683a      	ldr	r2, [r7, #0]
 8009492:	429a      	cmp	r2, r3
 8009494:	d902      	bls.n	800949c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	61fb      	str	r3, [r7, #28]
 800949a:	e002      	b.n	80094a2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a6:	69fa      	ldr	r2, [r7, #28]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d065      	beq.n	8009578 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d160      	bne.n	8009578 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80094b6:	4b32      	ldr	r3, [pc, #200]	; (8009580 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d10c      	bne.n	80094da <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	b672      	cpsid	i
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	b662      	cpsie	i
 80094d4:	60bb      	str	r3, [r7, #8]
}
 80094d6:	bf00      	nop
 80094d8:	e7fe      	b.n	80094d8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094de:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	69fa      	ldr	r2, [r7, #28]
 80094e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	db04      	blt.n	80094f8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	f1c3 0207 	rsb	r2, r3, #7
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	6959      	ldr	r1, [r3, #20]
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	4613      	mov	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4a1f      	ldr	r2, [pc, #124]	; (8009584 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009508:	4413      	add	r3, r2
 800950a:	4299      	cmp	r1, r3
 800950c:	d134      	bne.n	8009578 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	3304      	adds	r3, #4
 8009512:	4618      	mov	r0, r3
 8009514:	f7fd ff15 	bl	8007342 <uxListRemove>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d115      	bne.n	800954a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009522:	4918      	ldr	r1, [pc, #96]	; (8009584 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009524:	4613      	mov	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	440b      	add	r3, r1
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10a      	bne.n	800954a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009538:	2201      	movs	r2, #1
 800953a:	fa02 f303 	lsl.w	r3, r2, r3
 800953e:	43da      	mvns	r2, r3
 8009540:	4b11      	ldr	r3, [pc, #68]	; (8009588 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4013      	ands	r3, r2
 8009546:	4a10      	ldr	r2, [pc, #64]	; (8009588 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009548:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954e:	2201      	movs	r2, #1
 8009550:	409a      	lsls	r2, r3
 8009552:	4b0d      	ldr	r3, [pc, #52]	; (8009588 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4313      	orrs	r3, r2
 8009558:	4a0b      	ldr	r2, [pc, #44]	; (8009588 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800955a:	6013      	str	r3, [r2, #0]
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4a06      	ldr	r2, [pc, #24]	; (8009584 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800956a:	441a      	add	r2, r3
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	3304      	adds	r3, #4
 8009570:	4619      	mov	r1, r3
 8009572:	4610      	mov	r0, r2
 8009574:	f7fd fe88 	bl	8007288 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009578:	bf00      	nop
 800957a:	3720      	adds	r7, #32
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	200057f4 	.word	0x200057f4
 8009584:	200057f8 	.word	0x200057f8
 8009588:	200058fc 	.word	0x200058fc

0800958c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009592:	4b09      	ldr	r3, [pc, #36]	; (80095b8 <uxTaskResetEventItemValue+0x2c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800959a:	4b07      	ldr	r3, [pc, #28]	; (80095b8 <uxTaskResetEventItemValue+0x2c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a0:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <uxTaskResetEventItemValue+0x2c>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f1c2 0207 	rsb	r2, r2, #7
 80095a8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80095aa:	687b      	ldr	r3, [r7, #4]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	200057f4 	.word	0x200057f4

080095bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80095c0:	4b07      	ldr	r3, [pc, #28]	; (80095e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d004      	beq.n	80095d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80095c8:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095ce:	3201      	adds	r2, #1
 80095d0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80095d2:	4b03      	ldr	r3, [pc, #12]	; (80095e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80095d4:	681b      	ldr	r3, [r3, #0]
	}
 80095d6:	4618      	mov	r0, r3
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	200057f4 	.word	0x200057f4

080095e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095ee:	4b29      	ldr	r3, [pc, #164]	; (8009694 <prvAddCurrentTaskToDelayedList+0xb0>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095f4:	4b28      	ldr	r3, [pc, #160]	; (8009698 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3304      	adds	r3, #4
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fd fea1 	bl	8007342 <uxListRemove>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10b      	bne.n	800961e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009606:	4b24      	ldr	r3, [pc, #144]	; (8009698 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960c:	2201      	movs	r2, #1
 800960e:	fa02 f303 	lsl.w	r3, r2, r3
 8009612:	43da      	mvns	r2, r3
 8009614:	4b21      	ldr	r3, [pc, #132]	; (800969c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4013      	ands	r3, r2
 800961a:	4a20      	ldr	r2, [pc, #128]	; (800969c <prvAddCurrentTaskToDelayedList+0xb8>)
 800961c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009624:	d10a      	bne.n	800963c <prvAddCurrentTaskToDelayedList+0x58>
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d007      	beq.n	800963c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800962c:	4b1a      	ldr	r3, [pc, #104]	; (8009698 <prvAddCurrentTaskToDelayedList+0xb4>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	3304      	adds	r3, #4
 8009632:	4619      	mov	r1, r3
 8009634:	481a      	ldr	r0, [pc, #104]	; (80096a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009636:	f7fd fe27 	bl	8007288 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800963a:	e026      	b.n	800968a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4413      	add	r3, r2
 8009642:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009644:	4b14      	ldr	r3, [pc, #80]	; (8009698 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	429a      	cmp	r2, r3
 8009652:	d209      	bcs.n	8009668 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009654:	4b13      	ldr	r3, [pc, #76]	; (80096a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	4b0f      	ldr	r3, [pc, #60]	; (8009698 <prvAddCurrentTaskToDelayedList+0xb4>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3304      	adds	r3, #4
 800965e:	4619      	mov	r1, r3
 8009660:	4610      	mov	r0, r2
 8009662:	f7fd fe35 	bl	80072d0 <vListInsert>
}
 8009666:	e010      	b.n	800968a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009668:	4b0f      	ldr	r3, [pc, #60]	; (80096a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	4b0a      	ldr	r3, [pc, #40]	; (8009698 <prvAddCurrentTaskToDelayedList+0xb4>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3304      	adds	r3, #4
 8009672:	4619      	mov	r1, r3
 8009674:	4610      	mov	r0, r2
 8009676:	f7fd fe2b 	bl	80072d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800967a:	4b0c      	ldr	r3, [pc, #48]	; (80096ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	429a      	cmp	r2, r3
 8009682:	d202      	bcs.n	800968a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009684:	4a09      	ldr	r2, [pc, #36]	; (80096ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	6013      	str	r3, [r2, #0]
}
 800968a:	bf00      	nop
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	200058f8 	.word	0x200058f8
 8009698:	200057f4 	.word	0x200057f4
 800969c:	200058fc 	.word	0x200058fc
 80096a0:	200058e0 	.word	0x200058e0
 80096a4:	200058b0 	.word	0x200058b0
 80096a8:	200058ac 	.word	0x200058ac
 80096ac:	20005914 	.word	0x20005914

080096b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3b04      	subs	r3, #4
 80096c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	3b04      	subs	r3, #4
 80096ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	f023 0201 	bic.w	r2, r3, #1
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	3b04      	subs	r3, #4
 80096de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096e0:	4a0c      	ldr	r2, [pc, #48]	; (8009714 <pxPortInitialiseStack+0x64>)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	3b14      	subs	r3, #20
 80096ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	3b04      	subs	r3, #4
 80096f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f06f 0202 	mvn.w	r2, #2
 80096fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	3b20      	subs	r3, #32
 8009704:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009706:	68fb      	ldr	r3, [r7, #12]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	08009719 	.word	0x08009719

08009718 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800971e:	2300      	movs	r3, #0
 8009720:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009722:	4b14      	ldr	r3, [pc, #80]	; (8009774 <prvTaskExitError+0x5c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800972a:	d00c      	beq.n	8009746 <prvTaskExitError+0x2e>
	__asm volatile
 800972c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009730:	b672      	cpsid	i
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	b662      	cpsie	i
 8009740:	60fb      	str	r3, [r7, #12]
}
 8009742:	bf00      	nop
 8009744:	e7fe      	b.n	8009744 <prvTaskExitError+0x2c>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974a:	b672      	cpsid	i
 800974c:	f383 8811 	msr	BASEPRI, r3
 8009750:	f3bf 8f6f 	isb	sy
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	b662      	cpsie	i
 800975a:	60bb      	str	r3, [r7, #8]
}
 800975c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800975e:	bf00      	nop
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d0fc      	beq.n	8009760 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009766:	bf00      	nop
 8009768:	bf00      	nop
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	20000020 	.word	0x20000020
	...

08009780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009780:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <pxCurrentTCBConst2>)
 8009782:	6819      	ldr	r1, [r3, #0]
 8009784:	6808      	ldr	r0, [r1, #0]
 8009786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978a:	f380 8809 	msr	PSP, r0
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f04f 0000 	mov.w	r0, #0
 8009796:	f380 8811 	msr	BASEPRI, r0
 800979a:	4770      	bx	lr
 800979c:	f3af 8000 	nop.w

080097a0 <pxCurrentTCBConst2>:
 80097a0:	200057f4 	.word	0x200057f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop

080097a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097a8:	4808      	ldr	r0, [pc, #32]	; (80097cc <prvPortStartFirstTask+0x24>)
 80097aa:	6800      	ldr	r0, [r0, #0]
 80097ac:	6800      	ldr	r0, [r0, #0]
 80097ae:	f380 8808 	msr	MSP, r0
 80097b2:	f04f 0000 	mov.w	r0, #0
 80097b6:	f380 8814 	msr	CONTROL, r0
 80097ba:	b662      	cpsie	i
 80097bc:	b661      	cpsie	f
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	df00      	svc	0
 80097c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097ca:	bf00      	nop
 80097cc:	e000ed08 	.word	0xe000ed08

080097d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097d6:	4b37      	ldr	r3, [pc, #220]	; (80098b4 <xPortStartScheduler+0xe4>)
 80097d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	22ff      	movs	r2, #255	; 0xff
 80097e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097f0:	78fb      	ldrb	r3, [r7, #3]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	4b2f      	ldr	r3, [pc, #188]	; (80098b8 <xPortStartScheduler+0xe8>)
 80097fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097fe:	4b2f      	ldr	r3, [pc, #188]	; (80098bc <xPortStartScheduler+0xec>)
 8009800:	2207      	movs	r2, #7
 8009802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009804:	e009      	b.n	800981a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009806:	4b2d      	ldr	r3, [pc, #180]	; (80098bc <xPortStartScheduler+0xec>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3b01      	subs	r3, #1
 800980c:	4a2b      	ldr	r2, [pc, #172]	; (80098bc <xPortStartScheduler+0xec>)
 800980e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009810:	78fb      	ldrb	r3, [r7, #3]
 8009812:	b2db      	uxtb	r3, r3
 8009814:	005b      	lsls	r3, r3, #1
 8009816:	b2db      	uxtb	r3, r3
 8009818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800981a:	78fb      	ldrb	r3, [r7, #3]
 800981c:	b2db      	uxtb	r3, r3
 800981e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009822:	2b80      	cmp	r3, #128	; 0x80
 8009824:	d0ef      	beq.n	8009806 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009826:	4b25      	ldr	r3, [pc, #148]	; (80098bc <xPortStartScheduler+0xec>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f1c3 0307 	rsb	r3, r3, #7
 800982e:	2b04      	cmp	r3, #4
 8009830:	d00c      	beq.n	800984c <xPortStartScheduler+0x7c>
	__asm volatile
 8009832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009836:	b672      	cpsid	i
 8009838:	f383 8811 	msr	BASEPRI, r3
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	b662      	cpsie	i
 8009846:	60bb      	str	r3, [r7, #8]
}
 8009848:	bf00      	nop
 800984a:	e7fe      	b.n	800984a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800984c:	4b1b      	ldr	r3, [pc, #108]	; (80098bc <xPortStartScheduler+0xec>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	021b      	lsls	r3, r3, #8
 8009852:	4a1a      	ldr	r2, [pc, #104]	; (80098bc <xPortStartScheduler+0xec>)
 8009854:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009856:	4b19      	ldr	r3, [pc, #100]	; (80098bc <xPortStartScheduler+0xec>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800985e:	4a17      	ldr	r2, [pc, #92]	; (80098bc <xPortStartScheduler+0xec>)
 8009860:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	b2da      	uxtb	r2, r3
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800986a:	4b15      	ldr	r3, [pc, #84]	; (80098c0 <xPortStartScheduler+0xf0>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a14      	ldr	r2, [pc, #80]	; (80098c0 <xPortStartScheduler+0xf0>)
 8009870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009874:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009876:	4b12      	ldr	r3, [pc, #72]	; (80098c0 <xPortStartScheduler+0xf0>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a11      	ldr	r2, [pc, #68]	; (80098c0 <xPortStartScheduler+0xf0>)
 800987c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009880:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009882:	f000 f8dd 	bl	8009a40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009886:	4b0f      	ldr	r3, [pc, #60]	; (80098c4 <xPortStartScheduler+0xf4>)
 8009888:	2200      	movs	r2, #0
 800988a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800988c:	f000 f8fc 	bl	8009a88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009890:	4b0d      	ldr	r3, [pc, #52]	; (80098c8 <xPortStartScheduler+0xf8>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a0c      	ldr	r2, [pc, #48]	; (80098c8 <xPortStartScheduler+0xf8>)
 8009896:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800989a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800989c:	f7ff ff84 	bl	80097a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098a0:	f7ff f990 	bl	8008bc4 <vTaskSwitchContext>
	prvTaskExitError();
 80098a4:	f7ff ff38 	bl	8009718 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	e000e400 	.word	0xe000e400
 80098b8:	20005920 	.word	0x20005920
 80098bc:	20005924 	.word	0x20005924
 80098c0:	e000ed20 	.word	0xe000ed20
 80098c4:	20000020 	.word	0x20000020
 80098c8:	e000ef34 	.word	0xe000ef34

080098cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	b672      	cpsid	i
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	b662      	cpsie	i
 80098e6:	607b      	str	r3, [r7, #4]
}
 80098e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098ea:	4b10      	ldr	r3, [pc, #64]	; (800992c <vPortEnterCritical+0x60>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	3301      	adds	r3, #1
 80098f0:	4a0e      	ldr	r2, [pc, #56]	; (800992c <vPortEnterCritical+0x60>)
 80098f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098f4:	4b0d      	ldr	r3, [pc, #52]	; (800992c <vPortEnterCritical+0x60>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d111      	bne.n	8009920 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098fc:	4b0c      	ldr	r3, [pc, #48]	; (8009930 <vPortEnterCritical+0x64>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00c      	beq.n	8009920 <vPortEnterCritical+0x54>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990a:	b672      	cpsid	i
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	b662      	cpsie	i
 800991a:	603b      	str	r3, [r7, #0]
}
 800991c:	bf00      	nop
 800991e:	e7fe      	b.n	800991e <vPortEnterCritical+0x52>
	}
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	20000020 	.word	0x20000020
 8009930:	e000ed04 	.word	0xe000ed04

08009934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800993a:	4b13      	ldr	r3, [pc, #76]	; (8009988 <vPortExitCritical+0x54>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10c      	bne.n	800995c <vPortExitCritical+0x28>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009946:	b672      	cpsid	i
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	b662      	cpsie	i
 8009956:	607b      	str	r3, [r7, #4]
}
 8009958:	bf00      	nop
 800995a:	e7fe      	b.n	800995a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800995c:	4b0a      	ldr	r3, [pc, #40]	; (8009988 <vPortExitCritical+0x54>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3b01      	subs	r3, #1
 8009962:	4a09      	ldr	r2, [pc, #36]	; (8009988 <vPortExitCritical+0x54>)
 8009964:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009966:	4b08      	ldr	r3, [pc, #32]	; (8009988 <vPortExitCritical+0x54>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d105      	bne.n	800997a <vPortExitCritical+0x46>
 800996e:	2300      	movs	r3, #0
 8009970:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	f383 8811 	msr	BASEPRI, r3
}
 8009978:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800997a:	bf00      	nop
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	20000020 	.word	0x20000020
 800998c:	00000000 	.word	0x00000000

08009990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009990:	f3ef 8009 	mrs	r0, PSP
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	4b15      	ldr	r3, [pc, #84]	; (80099f0 <pxCurrentTCBConst>)
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	f01e 0f10 	tst.w	lr, #16
 80099a0:	bf08      	it	eq
 80099a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099aa:	6010      	str	r0, [r2, #0]
 80099ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80099b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80099b4:	b672      	cpsid	i
 80099b6:	f380 8811 	msr	BASEPRI, r0
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	b662      	cpsie	i
 80099c4:	f7ff f8fe 	bl	8008bc4 <vTaskSwitchContext>
 80099c8:	f04f 0000 	mov.w	r0, #0
 80099cc:	f380 8811 	msr	BASEPRI, r0
 80099d0:	bc09      	pop	{r0, r3}
 80099d2:	6819      	ldr	r1, [r3, #0]
 80099d4:	6808      	ldr	r0, [r1, #0]
 80099d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099da:	f01e 0f10 	tst.w	lr, #16
 80099de:	bf08      	it	eq
 80099e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099e4:	f380 8809 	msr	PSP, r0
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop

080099f0 <pxCurrentTCBConst>:
 80099f0:	200057f4 	.word	0x200057f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099f4:	bf00      	nop
 80099f6:	bf00      	nop

080099f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a02:	b672      	cpsid	i
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	b662      	cpsie	i
 8009a12:	607b      	str	r3, [r7, #4]
}
 8009a14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a16:	f7ff f81b 	bl	8008a50 <xTaskIncrementTick>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d003      	beq.n	8009a28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a20:	4b06      	ldr	r3, [pc, #24]	; (8009a3c <SysTick_Handler+0x44>)
 8009a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a26:	601a      	str	r2, [r3, #0]
 8009a28:	2300      	movs	r3, #0
 8009a2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	f383 8811 	msr	BASEPRI, r3
}
 8009a32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a34:	bf00      	nop
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	e000ed04 	.word	0xe000ed04

08009a40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a40:	b480      	push	{r7}
 8009a42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a44:	4b0b      	ldr	r3, [pc, #44]	; (8009a74 <vPortSetupTimerInterrupt+0x34>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a4a:	4b0b      	ldr	r3, [pc, #44]	; (8009a78 <vPortSetupTimerInterrupt+0x38>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a50:	4b0a      	ldr	r3, [pc, #40]	; (8009a7c <vPortSetupTimerInterrupt+0x3c>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a0a      	ldr	r2, [pc, #40]	; (8009a80 <vPortSetupTimerInterrupt+0x40>)
 8009a56:	fba2 2303 	umull	r2, r3, r2, r3
 8009a5a:	099b      	lsrs	r3, r3, #6
 8009a5c:	4a09      	ldr	r2, [pc, #36]	; (8009a84 <vPortSetupTimerInterrupt+0x44>)
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a62:	4b04      	ldr	r3, [pc, #16]	; (8009a74 <vPortSetupTimerInterrupt+0x34>)
 8009a64:	2207      	movs	r2, #7
 8009a66:	601a      	str	r2, [r3, #0]
}
 8009a68:	bf00      	nop
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	e000e010 	.word	0xe000e010
 8009a78:	e000e018 	.word	0xe000e018
 8009a7c:	20000000 	.word	0x20000000
 8009a80:	10624dd3 	.word	0x10624dd3
 8009a84:	e000e014 	.word	0xe000e014

08009a88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a98 <vPortEnableVFP+0x10>
 8009a8c:	6801      	ldr	r1, [r0, #0]
 8009a8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a92:	6001      	str	r1, [r0, #0]
 8009a94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a96:	bf00      	nop
 8009a98:	e000ed88 	.word	0xe000ed88

08009a9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009aa2:	f3ef 8305 	mrs	r3, IPSR
 8009aa6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2b0f      	cmp	r3, #15
 8009aac:	d916      	bls.n	8009adc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009aae:	4a19      	ldr	r2, [pc, #100]	; (8009b14 <vPortValidateInterruptPriority+0x78>)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ab8:	4b17      	ldr	r3, [pc, #92]	; (8009b18 <vPortValidateInterruptPriority+0x7c>)
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	7afa      	ldrb	r2, [r7, #11]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d20c      	bcs.n	8009adc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac6:	b672      	cpsid	i
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	b662      	cpsie	i
 8009ad6:	607b      	str	r3, [r7, #4]
}
 8009ad8:	bf00      	nop
 8009ada:	e7fe      	b.n	8009ada <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009adc:	4b0f      	ldr	r3, [pc, #60]	; (8009b1c <vPortValidateInterruptPriority+0x80>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ae4:	4b0e      	ldr	r3, [pc, #56]	; (8009b20 <vPortValidateInterruptPriority+0x84>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d90c      	bls.n	8009b06 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	b672      	cpsid	i
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	b662      	cpsie	i
 8009b00:	603b      	str	r3, [r7, #0]
}
 8009b02:	bf00      	nop
 8009b04:	e7fe      	b.n	8009b04 <vPortValidateInterruptPriority+0x68>
	}
 8009b06:	bf00      	nop
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	e000e3f0 	.word	0xe000e3f0
 8009b18:	20005920 	.word	0x20005920
 8009b1c:	e000ed0c 	.word	0xe000ed0c
 8009b20:	20005924 	.word	0x20005924

08009b24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b08a      	sub	sp, #40	; 0x28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b30:	f7fe fec0 	bl	80088b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b34:	4b5b      	ldr	r3, [pc, #364]	; (8009ca4 <pvPortMalloc+0x180>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b3c:	f000 f91a 	bl	8009d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b40:	4b59      	ldr	r3, [pc, #356]	; (8009ca8 <pvPortMalloc+0x184>)
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4013      	ands	r3, r2
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f040 8092 	bne.w	8009c72 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d01f      	beq.n	8009b94 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009b54:	2208      	movs	r2, #8
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4413      	add	r3, r2
 8009b5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f003 0307 	and.w	r3, r3, #7
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d016      	beq.n	8009b94 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f023 0307 	bic.w	r3, r3, #7
 8009b6c:	3308      	adds	r3, #8
 8009b6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f003 0307 	and.w	r3, r3, #7
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00c      	beq.n	8009b94 <pvPortMalloc+0x70>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7e:	b672      	cpsid	i
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	b662      	cpsie	i
 8009b8e:	617b      	str	r3, [r7, #20]
}
 8009b90:	bf00      	nop
 8009b92:	e7fe      	b.n	8009b92 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d06b      	beq.n	8009c72 <pvPortMalloc+0x14e>
 8009b9a:	4b44      	ldr	r3, [pc, #272]	; (8009cac <pvPortMalloc+0x188>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d866      	bhi.n	8009c72 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ba4:	4b42      	ldr	r3, [pc, #264]	; (8009cb0 <pvPortMalloc+0x18c>)
 8009ba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ba8:	4b41      	ldr	r3, [pc, #260]	; (8009cb0 <pvPortMalloc+0x18c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bae:	e004      	b.n	8009bba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d903      	bls.n	8009bcc <pvPortMalloc+0xa8>
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1f1      	bne.n	8009bb0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009bcc:	4b35      	ldr	r3, [pc, #212]	; (8009ca4 <pvPortMalloc+0x180>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d04d      	beq.n	8009c72 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009bd6:	6a3b      	ldr	r3, [r7, #32]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2208      	movs	r2, #8
 8009bdc:	4413      	add	r3, r2
 8009bde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	6a3b      	ldr	r3, [r7, #32]
 8009be6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	1ad2      	subs	r2, r2, r3
 8009bf0:	2308      	movs	r3, #8
 8009bf2:	005b      	lsls	r3, r3, #1
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d921      	bls.n	8009c3c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	f003 0307 	and.w	r3, r3, #7
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00c      	beq.n	8009c24 <pvPortMalloc+0x100>
	__asm volatile
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	b672      	cpsid	i
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	b662      	cpsie	i
 8009c1e:	613b      	str	r3, [r7, #16]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	685a      	ldr	r2, [r3, #4]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	1ad2      	subs	r2, r2, r3
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c36:	69b8      	ldr	r0, [r7, #24]
 8009c38:	f000 f8fe 	bl	8009e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c3c:	4b1b      	ldr	r3, [pc, #108]	; (8009cac <pvPortMalloc+0x188>)
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	4a19      	ldr	r2, [pc, #100]	; (8009cac <pvPortMalloc+0x188>)
 8009c48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c4a:	4b18      	ldr	r3, [pc, #96]	; (8009cac <pvPortMalloc+0x188>)
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	4b19      	ldr	r3, [pc, #100]	; (8009cb4 <pvPortMalloc+0x190>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d203      	bcs.n	8009c5e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c56:	4b15      	ldr	r3, [pc, #84]	; (8009cac <pvPortMalloc+0x188>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a16      	ldr	r2, [pc, #88]	; (8009cb4 <pvPortMalloc+0x190>)
 8009c5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	4b11      	ldr	r3, [pc, #68]	; (8009ca8 <pvPortMalloc+0x184>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	431a      	orrs	r2, r3
 8009c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c72:	f7fe fe2d 	bl	80088d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	f003 0307 	and.w	r3, r3, #7
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00c      	beq.n	8009c9a <pvPortMalloc+0x176>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	b672      	cpsid	i
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	b662      	cpsie	i
 8009c94:	60fb      	str	r3, [r7, #12]
}
 8009c96:	bf00      	nop
 8009c98:	e7fe      	b.n	8009c98 <pvPortMalloc+0x174>
	return pvReturn;
 8009c9a:	69fb      	ldr	r3, [r7, #28]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3728      	adds	r7, #40	; 0x28
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	20013930 	.word	0x20013930
 8009ca8:	2001393c 	.word	0x2001393c
 8009cac:	20013934 	.word	0x20013934
 8009cb0:	20013928 	.word	0x20013928
 8009cb4:	20013938 	.word	0x20013938

08009cb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d04c      	beq.n	8009d64 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009cca:	2308      	movs	r3, #8
 8009ccc:	425b      	negs	r3, r3
 8009cce:	697a      	ldr	r2, [r7, #20]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	685a      	ldr	r2, [r3, #4]
 8009cdc:	4b23      	ldr	r3, [pc, #140]	; (8009d6c <vPortFree+0xb4>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10c      	bne.n	8009d00 <vPortFree+0x48>
	__asm volatile
 8009ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cea:	b672      	cpsid	i
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	b662      	cpsie	i
 8009cfa:	60fb      	str	r3, [r7, #12]
}
 8009cfc:	bf00      	nop
 8009cfe:	e7fe      	b.n	8009cfe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00c      	beq.n	8009d22 <vPortFree+0x6a>
	__asm volatile
 8009d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0c:	b672      	cpsid	i
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	b662      	cpsie	i
 8009d1c:	60bb      	str	r3, [r7, #8]
}
 8009d1e:	bf00      	nop
 8009d20:	e7fe      	b.n	8009d20 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	685a      	ldr	r2, [r3, #4]
 8009d26:	4b11      	ldr	r3, [pc, #68]	; (8009d6c <vPortFree+0xb4>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4013      	ands	r3, r2
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d019      	beq.n	8009d64 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d115      	bne.n	8009d64 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	685a      	ldr	r2, [r3, #4]
 8009d3c:	4b0b      	ldr	r3, [pc, #44]	; (8009d6c <vPortFree+0xb4>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	43db      	mvns	r3, r3
 8009d42:	401a      	ands	r2, r3
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d48:	f7fe fdb4 	bl	80088b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	685a      	ldr	r2, [r3, #4]
 8009d50:	4b07      	ldr	r3, [pc, #28]	; (8009d70 <vPortFree+0xb8>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4413      	add	r3, r2
 8009d56:	4a06      	ldr	r2, [pc, #24]	; (8009d70 <vPortFree+0xb8>)
 8009d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d5a:	6938      	ldr	r0, [r7, #16]
 8009d5c:	f000 f86c 	bl	8009e38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009d60:	f7fe fdb6 	bl	80088d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d64:	bf00      	nop
 8009d66:	3718      	adds	r7, #24
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	2001393c 	.word	0x2001393c
 8009d70:	20013934 	.word	0x20013934

08009d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d7a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8009d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d80:	4b27      	ldr	r3, [pc, #156]	; (8009e20 <prvHeapInit+0xac>)
 8009d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f003 0307 	and.w	r3, r3, #7
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00c      	beq.n	8009da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	3307      	adds	r3, #7
 8009d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f023 0307 	bic.w	r3, r3, #7
 8009d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	4a1f      	ldr	r2, [pc, #124]	; (8009e20 <prvHeapInit+0xac>)
 8009da4:	4413      	add	r3, r2
 8009da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009dac:	4a1d      	ldr	r2, [pc, #116]	; (8009e24 <prvHeapInit+0xb0>)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009db2:	4b1c      	ldr	r3, [pc, #112]	; (8009e24 <prvHeapInit+0xb0>)
 8009db4:	2200      	movs	r2, #0
 8009db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009dc0:	2208      	movs	r2, #8
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	1a9b      	subs	r3, r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f023 0307 	bic.w	r3, r3, #7
 8009dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	4a15      	ldr	r2, [pc, #84]	; (8009e28 <prvHeapInit+0xb4>)
 8009dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009dd6:	4b14      	ldr	r3, [pc, #80]	; (8009e28 <prvHeapInit+0xb4>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009dde:	4b12      	ldr	r3, [pc, #72]	; (8009e28 <prvHeapInit+0xb4>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2200      	movs	r2, #0
 8009de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	1ad2      	subs	r2, r2, r3
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009df4:	4b0c      	ldr	r3, [pc, #48]	; (8009e28 <prvHeapInit+0xb4>)
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	4a0a      	ldr	r2, [pc, #40]	; (8009e2c <prvHeapInit+0xb8>)
 8009e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	4a09      	ldr	r2, [pc, #36]	; (8009e30 <prvHeapInit+0xbc>)
 8009e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e0c:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <prvHeapInit+0xc0>)
 8009e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e12:	601a      	str	r2, [r3, #0]
}
 8009e14:	bf00      	nop
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr
 8009e20:	20005928 	.word	0x20005928
 8009e24:	20013928 	.word	0x20013928
 8009e28:	20013930 	.word	0x20013930
 8009e2c:	20013938 	.word	0x20013938
 8009e30:	20013934 	.word	0x20013934
 8009e34:	2001393c 	.word	0x2001393c

08009e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e40:	4b28      	ldr	r3, [pc, #160]	; (8009ee4 <prvInsertBlockIntoFreeList+0xac>)
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	e002      	b.n	8009e4c <prvInsertBlockIntoFreeList+0x14>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60fb      	str	r3, [r7, #12]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d8f7      	bhi.n	8009e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	4413      	add	r3, r2
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d108      	bne.n	8009e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	685a      	ldr	r2, [r3, #4]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	441a      	add	r2, r3
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	441a      	add	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d118      	bne.n	8009ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	4b15      	ldr	r3, [pc, #84]	; (8009ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d00d      	beq.n	8009eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	441a      	add	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	e008      	b.n	8009ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009eb6:	4b0c      	ldr	r3, [pc, #48]	; (8009ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	e003      	b.n	8009ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d002      	beq.n	8009ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ed6:	bf00      	nop
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	20013928 	.word	0x20013928
 8009ee8:	20013930 	.word	0x20013930

08009eec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009ef6:	f007 fad5 	bl	80114a4 <sys_timeouts_sleeptime>
 8009efa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f02:	d10b      	bne.n	8009f1c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009f04:	4813      	ldr	r0, [pc, #76]	; (8009f54 <tcpip_timeouts_mbox_fetch+0x68>)
 8009f06:	f00a fbca 	bl	801469e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f00a fb3c 	bl	801458c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009f14:	480f      	ldr	r0, [pc, #60]	; (8009f54 <tcpip_timeouts_mbox_fetch+0x68>)
 8009f16:	f00a fbb3 	bl	8014680 <sys_mutex_lock>
    return;
 8009f1a:	e018      	b.n	8009f4e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d102      	bne.n	8009f28 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009f22:	f007 fa85 	bl	8011430 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009f26:	e7e6      	b.n	8009ef6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009f28:	480a      	ldr	r0, [pc, #40]	; (8009f54 <tcpip_timeouts_mbox_fetch+0x68>)
 8009f2a:	f00a fbb8 	bl	801469e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f00a fb2a 	bl	801458c <sys_arch_mbox_fetch>
 8009f38:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009f3a:	4806      	ldr	r0, [pc, #24]	; (8009f54 <tcpip_timeouts_mbox_fetch+0x68>)
 8009f3c:	f00a fba0 	bl	8014680 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f46:	d102      	bne.n	8009f4e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009f48:	f007 fa72 	bl	8011430 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009f4c:	e7d3      	b.n	8009ef6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	2001394c 	.word	0x2001394c

08009f58 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009f60:	4810      	ldr	r0, [pc, #64]	; (8009fa4 <tcpip_thread+0x4c>)
 8009f62:	f00a fb8d 	bl	8014680 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009f66:	4b10      	ldr	r3, [pc, #64]	; (8009fa8 <tcpip_thread+0x50>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d005      	beq.n	8009f7a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009f6e:	4b0e      	ldr	r3, [pc, #56]	; (8009fa8 <tcpip_thread+0x50>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a0e      	ldr	r2, [pc, #56]	; (8009fac <tcpip_thread+0x54>)
 8009f74:	6812      	ldr	r2, [r2, #0]
 8009f76:	4610      	mov	r0, r2
 8009f78:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009f7a:	f107 030c 	add.w	r3, r7, #12
 8009f7e:	4619      	mov	r1, r3
 8009f80:	480b      	ldr	r0, [pc, #44]	; (8009fb0 <tcpip_thread+0x58>)
 8009f82:	f7ff ffb3 	bl	8009eec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d106      	bne.n	8009f9a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009f8c:	4b09      	ldr	r3, [pc, #36]	; (8009fb4 <tcpip_thread+0x5c>)
 8009f8e:	2291      	movs	r2, #145	; 0x91
 8009f90:	4909      	ldr	r1, [pc, #36]	; (8009fb8 <tcpip_thread+0x60>)
 8009f92:	480a      	ldr	r0, [pc, #40]	; (8009fbc <tcpip_thread+0x64>)
 8009f94:	f00a fee6 	bl	8014d64 <iprintf>
      continue;
 8009f98:	e003      	b.n	8009fa2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 f80f 	bl	8009fc0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009fa2:	e7ea      	b.n	8009f7a <tcpip_thread+0x22>
 8009fa4:	2001394c 	.word	0x2001394c
 8009fa8:	20013940 	.word	0x20013940
 8009fac:	20013944 	.word	0x20013944
 8009fb0:	20013948 	.word	0x20013948
 8009fb4:	080160d4 	.word	0x080160d4
 8009fb8:	08016104 	.word	0x08016104
 8009fbc:	08016124 	.word	0x08016124

08009fc0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d026      	beq.n	800a01e <tcpip_thread_handle_msg+0x5e>
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	dc2b      	bgt.n	800a02c <tcpip_thread_handle_msg+0x6c>
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <tcpip_thread_handle_msg+0x1e>
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d015      	beq.n	800a008 <tcpip_thread_handle_msg+0x48>
 8009fdc:	e026      	b.n	800a02c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	6850      	ldr	r0, [r2, #4]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	6892      	ldr	r2, [r2, #8]
 8009fea:	4611      	mov	r1, r2
 8009fec:	4798      	blx	r3
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d004      	beq.n	8009ffe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f001 fd0b 	bl	800ba14 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	2009      	movs	r0, #9
 800a002:	f000 fe63 	bl	800accc <memp_free>
      break;
 800a006:	e018      	b.n	800a03a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	6892      	ldr	r2, [r2, #8]
 800a010:	4610      	mov	r0, r2
 800a012:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a014:	6879      	ldr	r1, [r7, #4]
 800a016:	2008      	movs	r0, #8
 800a018:	f000 fe58 	bl	800accc <memp_free>
      break;
 800a01c:	e00d      	b.n	800a03a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	6892      	ldr	r2, [r2, #8]
 800a026:	4610      	mov	r0, r2
 800a028:	4798      	blx	r3
      break;
 800a02a:	e006      	b.n	800a03a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a02c:	4b05      	ldr	r3, [pc, #20]	; (800a044 <tcpip_thread_handle_msg+0x84>)
 800a02e:	22cf      	movs	r2, #207	; 0xcf
 800a030:	4905      	ldr	r1, [pc, #20]	; (800a048 <tcpip_thread_handle_msg+0x88>)
 800a032:	4806      	ldr	r0, [pc, #24]	; (800a04c <tcpip_thread_handle_msg+0x8c>)
 800a034:	f00a fe96 	bl	8014d64 <iprintf>
      break;
 800a038:	bf00      	nop
  }
}
 800a03a:	bf00      	nop
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	080160d4 	.word	0x080160d4
 800a048:	08016104 	.word	0x08016104
 800a04c:	08016124 	.word	0x08016124

0800a050 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a05c:	481a      	ldr	r0, [pc, #104]	; (800a0c8 <tcpip_inpkt+0x78>)
 800a05e:	f00a fad4 	bl	801460a <sys_mbox_valid>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d105      	bne.n	800a074 <tcpip_inpkt+0x24>
 800a068:	4b18      	ldr	r3, [pc, #96]	; (800a0cc <tcpip_inpkt+0x7c>)
 800a06a:	22fc      	movs	r2, #252	; 0xfc
 800a06c:	4918      	ldr	r1, [pc, #96]	; (800a0d0 <tcpip_inpkt+0x80>)
 800a06e:	4819      	ldr	r0, [pc, #100]	; (800a0d4 <tcpip_inpkt+0x84>)
 800a070:	f00a fe78 	bl	8014d64 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a074:	2009      	movs	r0, #9
 800a076:	f000 fdb3 	bl	800abe0 <memp_malloc>
 800a07a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d102      	bne.n	800a088 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a086:	e01a      	b.n	800a0be <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2200      	movs	r2, #0
 800a08c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a0a0:	6979      	ldr	r1, [r7, #20]
 800a0a2:	4809      	ldr	r0, [pc, #36]	; (800a0c8 <tcpip_inpkt+0x78>)
 800a0a4:	f00a fa58 	bl	8014558 <sys_mbox_trypost>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d006      	beq.n	800a0bc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a0ae:	6979      	ldr	r1, [r7, #20]
 800a0b0:	2009      	movs	r0, #9
 800a0b2:	f000 fe0b 	bl	800accc <memp_free>
    return ERR_MEM;
 800a0b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0ba:	e000      	b.n	800a0be <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a0bc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3718      	adds	r7, #24
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	20013948 	.word	0x20013948
 800a0cc:	080160d4 	.word	0x080160d4
 800a0d0:	0801614c 	.word	0x0801614c
 800a0d4:	08016124 	.word	0x08016124

0800a0d8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a0e8:	f003 0318 	and.w	r3, r3, #24
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d006      	beq.n	800a0fe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a0f0:	4a08      	ldr	r2, [pc, #32]	; (800a114 <tcpip_input+0x3c>)
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f7ff ffab 	bl	800a050 <tcpip_inpkt>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	e005      	b.n	800a10a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a0fe:	4a06      	ldr	r2, [pc, #24]	; (800a118 <tcpip_input+0x40>)
 800a100:	6839      	ldr	r1, [r7, #0]
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7ff ffa4 	bl	800a050 <tcpip_inpkt>
 800a108:	4603      	mov	r3, r0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	08014369 	.word	0x08014369
 800a118:	08013151 	.word	0x08013151

0800a11c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a126:	4819      	ldr	r0, [pc, #100]	; (800a18c <tcpip_try_callback+0x70>)
 800a128:	f00a fa6f 	bl	801460a <sys_mbox_valid>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d106      	bne.n	800a140 <tcpip_try_callback+0x24>
 800a132:	4b17      	ldr	r3, [pc, #92]	; (800a190 <tcpip_try_callback+0x74>)
 800a134:	f240 125d 	movw	r2, #349	; 0x15d
 800a138:	4916      	ldr	r1, [pc, #88]	; (800a194 <tcpip_try_callback+0x78>)
 800a13a:	4817      	ldr	r0, [pc, #92]	; (800a198 <tcpip_try_callback+0x7c>)
 800a13c:	f00a fe12 	bl	8014d64 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a140:	2008      	movs	r0, #8
 800a142:	f000 fd4d 	bl	800abe0 <memp_malloc>
 800a146:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d102      	bne.n	800a154 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a14e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a152:	e017      	b.n	800a184 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2201      	movs	r2, #1
 800a158:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	683a      	ldr	r2, [r7, #0]
 800a164:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a166:	68f9      	ldr	r1, [r7, #12]
 800a168:	4808      	ldr	r0, [pc, #32]	; (800a18c <tcpip_try_callback+0x70>)
 800a16a:	f00a f9f5 	bl	8014558 <sys_mbox_trypost>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d006      	beq.n	800a182 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a174:	68f9      	ldr	r1, [r7, #12]
 800a176:	2008      	movs	r0, #8
 800a178:	f000 fda8 	bl	800accc <memp_free>
    return ERR_MEM;
 800a17c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a180:	e000      	b.n	800a184 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	20013948 	.word	0x20013948
 800a190:	080160d4 	.word	0x080160d4
 800a194:	0801614c 	.word	0x0801614c
 800a198:	08016124 	.word	0x08016124

0800a19c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af02      	add	r7, sp, #8
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a1a6:	f000 f871 	bl	800a28c <lwip_init>

  tcpip_init_done = initfunc;
 800a1aa:	4a17      	ldr	r2, [pc, #92]	; (800a208 <tcpip_init+0x6c>)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a1b0:	4a16      	ldr	r2, [pc, #88]	; (800a20c <tcpip_init+0x70>)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a1b6:	2106      	movs	r1, #6
 800a1b8:	4815      	ldr	r0, [pc, #84]	; (800a210 <tcpip_init+0x74>)
 800a1ba:	f00a f9ab 	bl	8014514 <sys_mbox_new>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d006      	beq.n	800a1d2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a1c4:	4b13      	ldr	r3, [pc, #76]	; (800a214 <tcpip_init+0x78>)
 800a1c6:	f240 2261 	movw	r2, #609	; 0x261
 800a1ca:	4913      	ldr	r1, [pc, #76]	; (800a218 <tcpip_init+0x7c>)
 800a1cc:	4813      	ldr	r0, [pc, #76]	; (800a21c <tcpip_init+0x80>)
 800a1ce:	f00a fdc9 	bl	8014d64 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a1d2:	4813      	ldr	r0, [pc, #76]	; (800a220 <tcpip_init+0x84>)
 800a1d4:	f00a fa38 	bl	8014648 <sys_mutex_new>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d006      	beq.n	800a1ec <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a1de:	4b0d      	ldr	r3, [pc, #52]	; (800a214 <tcpip_init+0x78>)
 800a1e0:	f240 2265 	movw	r2, #613	; 0x265
 800a1e4:	490f      	ldr	r1, [pc, #60]	; (800a224 <tcpip_init+0x88>)
 800a1e6:	480d      	ldr	r0, [pc, #52]	; (800a21c <tcpip_init+0x80>)
 800a1e8:	f00a fdbc 	bl	8014d64 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	490c      	ldr	r1, [pc, #48]	; (800a228 <tcpip_init+0x8c>)
 800a1f8:	480c      	ldr	r0, [pc, #48]	; (800a22c <tcpip_init+0x90>)
 800a1fa:	f00a fa5d 	bl	80146b8 <sys_thread_new>
}
 800a1fe:	bf00      	nop
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20013940 	.word	0x20013940
 800a20c:	20013944 	.word	0x20013944
 800a210:	20013948 	.word	0x20013948
 800a214:	080160d4 	.word	0x080160d4
 800a218:	0801615c 	.word	0x0801615c
 800a21c:	08016124 	.word	0x08016124
 800a220:	2001394c 	.word	0x2001394c
 800a224:	08016180 	.word	0x08016180
 800a228:	08009f59 	.word	0x08009f59
 800a22c:	080161a4 	.word	0x080161a4

0800a230 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	4603      	mov	r3, r0
 800a238:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a23a:	88fb      	ldrh	r3, [r7, #6]
 800a23c:	021b      	lsls	r3, r3, #8
 800a23e:	b21a      	sxth	r2, r3
 800a240:	88fb      	ldrh	r3, [r7, #6]
 800a242:	0a1b      	lsrs	r3, r3, #8
 800a244:	b29b      	uxth	r3, r3
 800a246:	b21b      	sxth	r3, r3
 800a248:	4313      	orrs	r3, r2
 800a24a:	b21b      	sxth	r3, r3
 800a24c:	b29b      	uxth	r3, r3
}
 800a24e:	4618      	mov	r0, r3
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	061a      	lsls	r2, r3, #24
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	021b      	lsls	r3, r3, #8
 800a26a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a26e:	431a      	orrs	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	0a1b      	lsrs	r3, r3, #8
 800a274:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a278:	431a      	orrs	r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	0e1b      	lsrs	r3, r3, #24
 800a27e:	4313      	orrs	r3, r2
}
 800a280:	4618      	mov	r0, r3
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a296:	f00a f9c9 	bl	801462c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a29a:	f000 f8d5 	bl	800a448 <mem_init>
  memp_init();
 800a29e:	f000 fc31 	bl	800ab04 <memp_init>
  pbuf_init();
  netif_init();
 800a2a2:	f000 fd3d 	bl	800ad20 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a2a6:	f007 f935 	bl	8011514 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a2aa:	f001 fe5d 	bl	800bf68 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a2ae:	f007 f877 	bl	80113a0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a2b2:	bf00      	nop
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
	...

0800a2bc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <ptr_to_mem+0x20>)
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	88fb      	ldrh	r3, [r7, #6]
 800a2cc:	4413      	add	r3, r2
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	2001497c 	.word	0x2001497c

0800a2e0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a2e8:	4b05      	ldr	r3, [pc, #20]	; (800a300 <mem_to_ptr+0x20>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	b29b      	uxth	r3, r3
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	2001497c 	.word	0x2001497c

0800a304 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a304:	b590      	push	{r4, r7, lr}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a30c:	4b45      	ldr	r3, [pc, #276]	; (800a424 <plug_holes+0x120>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	429a      	cmp	r2, r3
 800a314:	d206      	bcs.n	800a324 <plug_holes+0x20>
 800a316:	4b44      	ldr	r3, [pc, #272]	; (800a428 <plug_holes+0x124>)
 800a318:	f240 12df 	movw	r2, #479	; 0x1df
 800a31c:	4943      	ldr	r1, [pc, #268]	; (800a42c <plug_holes+0x128>)
 800a31e:	4844      	ldr	r0, [pc, #272]	; (800a430 <plug_holes+0x12c>)
 800a320:	f00a fd20 	bl	8014d64 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a324:	4b43      	ldr	r3, [pc, #268]	; (800a434 <plug_holes+0x130>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d306      	bcc.n	800a33c <plug_holes+0x38>
 800a32e:	4b3e      	ldr	r3, [pc, #248]	; (800a428 <plug_holes+0x124>)
 800a330:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a334:	4940      	ldr	r1, [pc, #256]	; (800a438 <plug_holes+0x134>)
 800a336:	483e      	ldr	r0, [pc, #248]	; (800a430 <plug_holes+0x12c>)
 800a338:	f00a fd14 	bl	8014d64 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	791b      	ldrb	r3, [r3, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d006      	beq.n	800a352 <plug_holes+0x4e>
 800a344:	4b38      	ldr	r3, [pc, #224]	; (800a428 <plug_holes+0x124>)
 800a346:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a34a:	493c      	ldr	r1, [pc, #240]	; (800a43c <plug_holes+0x138>)
 800a34c:	4838      	ldr	r0, [pc, #224]	; (800a430 <plug_holes+0x12c>)
 800a34e:	f00a fd09 	bl	8014d64 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	881b      	ldrh	r3, [r3, #0]
 800a356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a35a:	d906      	bls.n	800a36a <plug_holes+0x66>
 800a35c:	4b32      	ldr	r3, [pc, #200]	; (800a428 <plug_holes+0x124>)
 800a35e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a362:	4937      	ldr	r1, [pc, #220]	; (800a440 <plug_holes+0x13c>)
 800a364:	4832      	ldr	r0, [pc, #200]	; (800a430 <plug_holes+0x12c>)
 800a366:	f00a fcfd 	bl	8014d64 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	881b      	ldrh	r3, [r3, #0]
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff ffa4 	bl	800a2bc <ptr_to_mem>
 800a374:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d024      	beq.n	800a3c8 <plug_holes+0xc4>
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	791b      	ldrb	r3, [r3, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d120      	bne.n	800a3c8 <plug_holes+0xc4>
 800a386:	4b2b      	ldr	r3, [pc, #172]	; (800a434 <plug_holes+0x130>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d01b      	beq.n	800a3c8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a390:	4b2c      	ldr	r3, [pc, #176]	; (800a444 <plug_holes+0x140>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	429a      	cmp	r2, r3
 800a398:	d102      	bne.n	800a3a0 <plug_holes+0x9c>
      lfree = mem;
 800a39a:	4a2a      	ldr	r2, [pc, #168]	; (800a444 <plug_holes+0x140>)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	881a      	ldrh	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	881b      	ldrh	r3, [r3, #0]
 800a3ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3b0:	d00a      	beq.n	800a3c8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	881b      	ldrh	r3, [r3, #0]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7ff ff80 	bl	800a2bc <ptr_to_mem>
 800a3bc:	4604      	mov	r4, r0
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7ff ff8e 	bl	800a2e0 <mem_to_ptr>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	885b      	ldrh	r3, [r3, #2]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7ff ff75 	bl	800a2bc <ptr_to_mem>
 800a3d2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a3d4:	68ba      	ldr	r2, [r7, #8]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d01f      	beq.n	800a41c <plug_holes+0x118>
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	791b      	ldrb	r3, [r3, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d11b      	bne.n	800a41c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a3e4:	4b17      	ldr	r3, [pc, #92]	; (800a444 <plug_holes+0x140>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d102      	bne.n	800a3f4 <plug_holes+0xf0>
      lfree = pmem;
 800a3ee:	4a15      	ldr	r2, [pc, #84]	; (800a444 <plug_holes+0x140>)
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	881a      	ldrh	r2, [r3, #0]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	881b      	ldrh	r3, [r3, #0]
 800a400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a404:	d00a      	beq.n	800a41c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	881b      	ldrh	r3, [r3, #0]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff ff56 	bl	800a2bc <ptr_to_mem>
 800a410:	4604      	mov	r4, r0
 800a412:	68b8      	ldr	r0, [r7, #8]
 800a414:	f7ff ff64 	bl	800a2e0 <mem_to_ptr>
 800a418:	4603      	mov	r3, r0
 800a41a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a41c:	bf00      	nop
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	bd90      	pop	{r4, r7, pc}
 800a424:	2001497c 	.word	0x2001497c
 800a428:	080161b4 	.word	0x080161b4
 800a42c:	080161e4 	.word	0x080161e4
 800a430:	080161fc 	.word	0x080161fc
 800a434:	20014980 	.word	0x20014980
 800a438:	08016224 	.word	0x08016224
 800a43c:	08016240 	.word	0x08016240
 800a440:	0801625c 	.word	0x0801625c
 800a444:	20014988 	.word	0x20014988

0800a448 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a44e:	4b1f      	ldr	r3, [pc, #124]	; (800a4cc <mem_init+0x84>)
 800a450:	3303      	adds	r3, #3
 800a452:	f023 0303 	bic.w	r3, r3, #3
 800a456:	461a      	mov	r2, r3
 800a458:	4b1d      	ldr	r3, [pc, #116]	; (800a4d0 <mem_init+0x88>)
 800a45a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a45c:	4b1c      	ldr	r3, [pc, #112]	; (800a4d0 <mem_init+0x88>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a468:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a476:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a47a:	f7ff ff1f 	bl	800a2bc <ptr_to_mem>
 800a47e:	4603      	mov	r3, r0
 800a480:	4a14      	ldr	r2, [pc, #80]	; (800a4d4 <mem_init+0x8c>)
 800a482:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a484:	4b13      	ldr	r3, [pc, #76]	; (800a4d4 <mem_init+0x8c>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2201      	movs	r2, #1
 800a48a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a48c:	4b11      	ldr	r3, [pc, #68]	; (800a4d4 <mem_init+0x8c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a494:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a496:	4b0f      	ldr	r3, [pc, #60]	; (800a4d4 <mem_init+0x8c>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a49e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a4a0:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <mem_init+0x88>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a0c      	ldr	r2, [pc, #48]	; (800a4d8 <mem_init+0x90>)
 800a4a6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a4a8:	480c      	ldr	r0, [pc, #48]	; (800a4dc <mem_init+0x94>)
 800a4aa:	f00a f8cd 	bl	8014648 <sys_mutex_new>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d006      	beq.n	800a4c2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a4b4:	4b0a      	ldr	r3, [pc, #40]	; (800a4e0 <mem_init+0x98>)
 800a4b6:	f240 221f 	movw	r2, #543	; 0x21f
 800a4ba:	490a      	ldr	r1, [pc, #40]	; (800a4e4 <mem_init+0x9c>)
 800a4bc:	480a      	ldr	r0, [pc, #40]	; (800a4e8 <mem_init+0xa0>)
 800a4be:	f00a fc51 	bl	8014d64 <iprintf>
  }
}
 800a4c2:	bf00      	nop
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	20013968 	.word	0x20013968
 800a4d0:	2001497c 	.word	0x2001497c
 800a4d4:	20014980 	.word	0x20014980
 800a4d8:	20014988 	.word	0x20014988
 800a4dc:	20014984 	.word	0x20014984
 800a4e0:	080161b4 	.word	0x080161b4
 800a4e4:	08016288 	.word	0x08016288
 800a4e8:	080161fc 	.word	0x080161fc

0800a4ec <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7ff fef3 	bl	800a2e0 <mem_to_ptr>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	881b      	ldrh	r3, [r3, #0]
 800a502:	4618      	mov	r0, r3
 800a504:	f7ff feda 	bl	800a2bc <ptr_to_mem>
 800a508:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	885b      	ldrh	r3, [r3, #2]
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff fed4 	bl	800a2bc <ptr_to_mem>
 800a514:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a51e:	d818      	bhi.n	800a552 <mem_link_valid+0x66>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	885b      	ldrh	r3, [r3, #2]
 800a524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a528:	d813      	bhi.n	800a552 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a52e:	8afa      	ldrh	r2, [r7, #22]
 800a530:	429a      	cmp	r2, r3
 800a532:	d004      	beq.n	800a53e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	881b      	ldrh	r3, [r3, #0]
 800a538:	8afa      	ldrh	r2, [r7, #22]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d109      	bne.n	800a552 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a53e:	4b08      	ldr	r3, [pc, #32]	; (800a560 <mem_link_valid+0x74>)
 800a540:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a542:	693a      	ldr	r2, [r7, #16]
 800a544:	429a      	cmp	r2, r3
 800a546:	d006      	beq.n	800a556 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	885b      	ldrh	r3, [r3, #2]
 800a54c:	8afa      	ldrh	r2, [r7, #22]
 800a54e:	429a      	cmp	r2, r3
 800a550:	d001      	beq.n	800a556 <mem_link_valid+0x6a>
    return 0;
 800a552:	2300      	movs	r3, #0
 800a554:	e000      	b.n	800a558 <mem_link_valid+0x6c>
  }
  return 1;
 800a556:	2301      	movs	r3, #1
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3718      	adds	r7, #24
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	20014980 	.word	0x20014980

0800a564 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b088      	sub	sp, #32
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d070      	beq.n	800a654 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f003 0303 	and.w	r3, r3, #3
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00d      	beq.n	800a598 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a57c:	4b37      	ldr	r3, [pc, #220]	; (800a65c <mem_free+0xf8>)
 800a57e:	f240 2273 	movw	r2, #627	; 0x273
 800a582:	4937      	ldr	r1, [pc, #220]	; (800a660 <mem_free+0xfc>)
 800a584:	4837      	ldr	r0, [pc, #220]	; (800a664 <mem_free+0x100>)
 800a586:	f00a fbed 	bl	8014d64 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a58a:	f00a f8bb 	bl	8014704 <sys_arch_protect>
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f00a f8c5 	bl	8014720 <sys_arch_unprotect>
    return;
 800a596:	e05e      	b.n	800a656 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	3b08      	subs	r3, #8
 800a59c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a59e:	4b32      	ldr	r3, [pc, #200]	; (800a668 <mem_free+0x104>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	69fa      	ldr	r2, [r7, #28]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d306      	bcc.n	800a5b6 <mem_free+0x52>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f103 020c 	add.w	r2, r3, #12
 800a5ae:	4b2f      	ldr	r3, [pc, #188]	; (800a66c <mem_free+0x108>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d90d      	bls.n	800a5d2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a5b6:	4b29      	ldr	r3, [pc, #164]	; (800a65c <mem_free+0xf8>)
 800a5b8:	f240 227f 	movw	r2, #639	; 0x27f
 800a5bc:	492c      	ldr	r1, [pc, #176]	; (800a670 <mem_free+0x10c>)
 800a5be:	4829      	ldr	r0, [pc, #164]	; (800a664 <mem_free+0x100>)
 800a5c0:	f00a fbd0 	bl	8014d64 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a5c4:	f00a f89e 	bl	8014704 <sys_arch_protect>
 800a5c8:	6138      	str	r0, [r7, #16]
 800a5ca:	6938      	ldr	r0, [r7, #16]
 800a5cc:	f00a f8a8 	bl	8014720 <sys_arch_unprotect>
    return;
 800a5d0:	e041      	b.n	800a656 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a5d2:	4828      	ldr	r0, [pc, #160]	; (800a674 <mem_free+0x110>)
 800a5d4:	f00a f854 	bl	8014680 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	791b      	ldrb	r3, [r3, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d110      	bne.n	800a602 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a5e0:	4b1e      	ldr	r3, [pc, #120]	; (800a65c <mem_free+0xf8>)
 800a5e2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a5e6:	4924      	ldr	r1, [pc, #144]	; (800a678 <mem_free+0x114>)
 800a5e8:	481e      	ldr	r0, [pc, #120]	; (800a664 <mem_free+0x100>)
 800a5ea:	f00a fbbb 	bl	8014d64 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a5ee:	4821      	ldr	r0, [pc, #132]	; (800a674 <mem_free+0x110>)
 800a5f0:	f00a f855 	bl	801469e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a5f4:	f00a f886 	bl	8014704 <sys_arch_protect>
 800a5f8:	6178      	str	r0, [r7, #20]
 800a5fa:	6978      	ldr	r0, [r7, #20]
 800a5fc:	f00a f890 	bl	8014720 <sys_arch_unprotect>
    return;
 800a600:	e029      	b.n	800a656 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a602:	69f8      	ldr	r0, [r7, #28]
 800a604:	f7ff ff72 	bl	800a4ec <mem_link_valid>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d110      	bne.n	800a630 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a60e:	4b13      	ldr	r3, [pc, #76]	; (800a65c <mem_free+0xf8>)
 800a610:	f240 2295 	movw	r2, #661	; 0x295
 800a614:	4919      	ldr	r1, [pc, #100]	; (800a67c <mem_free+0x118>)
 800a616:	4813      	ldr	r0, [pc, #76]	; (800a664 <mem_free+0x100>)
 800a618:	f00a fba4 	bl	8014d64 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a61c:	4815      	ldr	r0, [pc, #84]	; (800a674 <mem_free+0x110>)
 800a61e:	f00a f83e 	bl	801469e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a622:	f00a f86f 	bl	8014704 <sys_arch_protect>
 800a626:	61b8      	str	r0, [r7, #24]
 800a628:	69b8      	ldr	r0, [r7, #24]
 800a62a:	f00a f879 	bl	8014720 <sys_arch_unprotect>
    return;
 800a62e:	e012      	b.n	800a656 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	2200      	movs	r2, #0
 800a634:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a636:	4b12      	ldr	r3, [pc, #72]	; (800a680 <mem_free+0x11c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	69fa      	ldr	r2, [r7, #28]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d202      	bcs.n	800a646 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a640:	4a0f      	ldr	r2, [pc, #60]	; (800a680 <mem_free+0x11c>)
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a646:	69f8      	ldr	r0, [r7, #28]
 800a648:	f7ff fe5c 	bl	800a304 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a64c:	4809      	ldr	r0, [pc, #36]	; (800a674 <mem_free+0x110>)
 800a64e:	f00a f826 	bl	801469e <sys_mutex_unlock>
 800a652:	e000      	b.n	800a656 <mem_free+0xf2>
    return;
 800a654:	bf00      	nop
}
 800a656:	3720      	adds	r7, #32
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	080161b4 	.word	0x080161b4
 800a660:	080162a4 	.word	0x080162a4
 800a664:	080161fc 	.word	0x080161fc
 800a668:	2001497c 	.word	0x2001497c
 800a66c:	20014980 	.word	0x20014980
 800a670:	080162c8 	.word	0x080162c8
 800a674:	20014984 	.word	0x20014984
 800a678:	080162e4 	.word	0x080162e4
 800a67c:	0801630c 	.word	0x0801630c
 800a680:	20014988 	.word	0x20014988

0800a684 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b088      	sub	sp, #32
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	460b      	mov	r3, r1
 800a68e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a690:	887b      	ldrh	r3, [r7, #2]
 800a692:	3303      	adds	r3, #3
 800a694:	b29b      	uxth	r3, r3
 800a696:	f023 0303 	bic.w	r3, r3, #3
 800a69a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a69c:	8bfb      	ldrh	r3, [r7, #30]
 800a69e:	2b0b      	cmp	r3, #11
 800a6a0:	d801      	bhi.n	800a6a6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a6a2:	230c      	movs	r3, #12
 800a6a4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a6a6:	8bfb      	ldrh	r3, [r7, #30]
 800a6a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6ac:	d803      	bhi.n	800a6b6 <mem_trim+0x32>
 800a6ae:	8bfa      	ldrh	r2, [r7, #30]
 800a6b0:	887b      	ldrh	r3, [r7, #2]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d201      	bcs.n	800a6ba <mem_trim+0x36>
    return NULL;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	e0d8      	b.n	800a86c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a6ba:	4b6e      	ldr	r3, [pc, #440]	; (800a874 <mem_trim+0x1f0>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d304      	bcc.n	800a6ce <mem_trim+0x4a>
 800a6c4:	4b6c      	ldr	r3, [pc, #432]	; (800a878 <mem_trim+0x1f4>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d306      	bcc.n	800a6dc <mem_trim+0x58>
 800a6ce:	4b6b      	ldr	r3, [pc, #428]	; (800a87c <mem_trim+0x1f8>)
 800a6d0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a6d4:	496a      	ldr	r1, [pc, #424]	; (800a880 <mem_trim+0x1fc>)
 800a6d6:	486b      	ldr	r0, [pc, #428]	; (800a884 <mem_trim+0x200>)
 800a6d8:	f00a fb44 	bl	8014d64 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a6dc:	4b65      	ldr	r3, [pc, #404]	; (800a874 <mem_trim+0x1f0>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d304      	bcc.n	800a6f0 <mem_trim+0x6c>
 800a6e6:	4b64      	ldr	r3, [pc, #400]	; (800a878 <mem_trim+0x1f4>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d307      	bcc.n	800a700 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a6f0:	f00a f808 	bl	8014704 <sys_arch_protect>
 800a6f4:	60b8      	str	r0, [r7, #8]
 800a6f6:	68b8      	ldr	r0, [r7, #8]
 800a6f8:	f00a f812 	bl	8014720 <sys_arch_unprotect>
    return rmem;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	e0b5      	b.n	800a86c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	3b08      	subs	r3, #8
 800a704:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a706:	69b8      	ldr	r0, [r7, #24]
 800a708:	f7ff fdea 	bl	800a2e0 <mem_to_ptr>
 800a70c:	4603      	mov	r3, r0
 800a70e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	881a      	ldrh	r2, [r3, #0]
 800a714:	8afb      	ldrh	r3, [r7, #22]
 800a716:	1ad3      	subs	r3, r2, r3
 800a718:	b29b      	uxth	r3, r3
 800a71a:	3b08      	subs	r3, #8
 800a71c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a71e:	8bfa      	ldrh	r2, [r7, #30]
 800a720:	8abb      	ldrh	r3, [r7, #20]
 800a722:	429a      	cmp	r2, r3
 800a724:	d906      	bls.n	800a734 <mem_trim+0xb0>
 800a726:	4b55      	ldr	r3, [pc, #340]	; (800a87c <mem_trim+0x1f8>)
 800a728:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a72c:	4956      	ldr	r1, [pc, #344]	; (800a888 <mem_trim+0x204>)
 800a72e:	4855      	ldr	r0, [pc, #340]	; (800a884 <mem_trim+0x200>)
 800a730:	f00a fb18 	bl	8014d64 <iprintf>
  if (newsize > size) {
 800a734:	8bfa      	ldrh	r2, [r7, #30]
 800a736:	8abb      	ldrh	r3, [r7, #20]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d901      	bls.n	800a740 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a73c:	2300      	movs	r3, #0
 800a73e:	e095      	b.n	800a86c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a740:	8bfa      	ldrh	r2, [r7, #30]
 800a742:	8abb      	ldrh	r3, [r7, #20]
 800a744:	429a      	cmp	r2, r3
 800a746:	d101      	bne.n	800a74c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	e08f      	b.n	800a86c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a74c:	484f      	ldr	r0, [pc, #316]	; (800a88c <mem_trim+0x208>)
 800a74e:	f009 ff97 	bl	8014680 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	881b      	ldrh	r3, [r3, #0]
 800a756:	4618      	mov	r0, r3
 800a758:	f7ff fdb0 	bl	800a2bc <ptr_to_mem>
 800a75c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	791b      	ldrb	r3, [r3, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d13f      	bne.n	800a7e6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	881b      	ldrh	r3, [r3, #0]
 800a76a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a76e:	d106      	bne.n	800a77e <mem_trim+0xfa>
 800a770:	4b42      	ldr	r3, [pc, #264]	; (800a87c <mem_trim+0x1f8>)
 800a772:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a776:	4946      	ldr	r1, [pc, #280]	; (800a890 <mem_trim+0x20c>)
 800a778:	4842      	ldr	r0, [pc, #264]	; (800a884 <mem_trim+0x200>)
 800a77a:	f00a faf3 	bl	8014d64 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	881b      	ldrh	r3, [r3, #0]
 800a782:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a784:	8afa      	ldrh	r2, [r7, #22]
 800a786:	8bfb      	ldrh	r3, [r7, #30]
 800a788:	4413      	add	r3, r2
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	3308      	adds	r3, #8
 800a78e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a790:	4b40      	ldr	r3, [pc, #256]	; (800a894 <mem_trim+0x210>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	693a      	ldr	r2, [r7, #16]
 800a796:	429a      	cmp	r2, r3
 800a798:	d106      	bne.n	800a7a8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a79a:	89fb      	ldrh	r3, [r7, #14]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7ff fd8d 	bl	800a2bc <ptr_to_mem>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	4a3b      	ldr	r2, [pc, #236]	; (800a894 <mem_trim+0x210>)
 800a7a6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a7a8:	89fb      	ldrh	r3, [r7, #14]
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7ff fd86 	bl	800a2bc <ptr_to_mem>
 800a7b0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	89ba      	ldrh	r2, [r7, #12]
 800a7bc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	8afa      	ldrh	r2, [r7, #22]
 800a7c2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	89fa      	ldrh	r2, [r7, #14]
 800a7c8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7d2:	d047      	beq.n	800a864 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	881b      	ldrh	r3, [r3, #0]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff fd6f 	bl	800a2bc <ptr_to_mem>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	89fb      	ldrh	r3, [r7, #14]
 800a7e2:	8053      	strh	r3, [r2, #2]
 800a7e4:	e03e      	b.n	800a864 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a7e6:	8bfb      	ldrh	r3, [r7, #30]
 800a7e8:	f103 0214 	add.w	r2, r3, #20
 800a7ec:	8abb      	ldrh	r3, [r7, #20]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d838      	bhi.n	800a864 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a7f2:	8afa      	ldrh	r2, [r7, #22]
 800a7f4:	8bfb      	ldrh	r3, [r7, #30]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	3308      	adds	r3, #8
 800a7fc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	881b      	ldrh	r3, [r3, #0]
 800a802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a806:	d106      	bne.n	800a816 <mem_trim+0x192>
 800a808:	4b1c      	ldr	r3, [pc, #112]	; (800a87c <mem_trim+0x1f8>)
 800a80a:	f240 3216 	movw	r2, #790	; 0x316
 800a80e:	4920      	ldr	r1, [pc, #128]	; (800a890 <mem_trim+0x20c>)
 800a810:	481c      	ldr	r0, [pc, #112]	; (800a884 <mem_trim+0x200>)
 800a812:	f00a faa7 	bl	8014d64 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a816:	89fb      	ldrh	r3, [r7, #14]
 800a818:	4618      	mov	r0, r3
 800a81a:	f7ff fd4f 	bl	800a2bc <ptr_to_mem>
 800a81e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a820:	4b1c      	ldr	r3, [pc, #112]	; (800a894 <mem_trim+0x210>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	429a      	cmp	r2, r3
 800a828:	d202      	bcs.n	800a830 <mem_trim+0x1ac>
      lfree = mem2;
 800a82a:	4a1a      	ldr	r2, [pc, #104]	; (800a894 <mem_trim+0x210>)
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	2200      	movs	r2, #0
 800a834:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	881a      	ldrh	r2, [r3, #0]
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	8afa      	ldrh	r2, [r7, #22]
 800a842:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	89fa      	ldrh	r2, [r7, #14]
 800a848:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a852:	d007      	beq.n	800a864 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	4618      	mov	r0, r3
 800a85a:	f7ff fd2f 	bl	800a2bc <ptr_to_mem>
 800a85e:	4602      	mov	r2, r0
 800a860:	89fb      	ldrh	r3, [r7, #14]
 800a862:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a864:	4809      	ldr	r0, [pc, #36]	; (800a88c <mem_trim+0x208>)
 800a866:	f009 ff1a 	bl	801469e <sys_mutex_unlock>
  return rmem;
 800a86a:	687b      	ldr	r3, [r7, #4]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3720      	adds	r7, #32
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	2001497c 	.word	0x2001497c
 800a878:	20014980 	.word	0x20014980
 800a87c:	080161b4 	.word	0x080161b4
 800a880:	08016340 	.word	0x08016340
 800a884:	080161fc 	.word	0x080161fc
 800a888:	08016358 	.word	0x08016358
 800a88c:	20014984 	.word	0x20014984
 800a890:	08016378 	.word	0x08016378
 800a894:	20014988 	.word	0x20014988

0800a898 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b088      	sub	sp, #32
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a8a2:	88fb      	ldrh	r3, [r7, #6]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d101      	bne.n	800a8ac <mem_malloc+0x14>
    return NULL;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	e0e2      	b.n	800aa72 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a8ac:	88fb      	ldrh	r3, [r7, #6]
 800a8ae:	3303      	adds	r3, #3
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	f023 0303 	bic.w	r3, r3, #3
 800a8b6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a8b8:	8bbb      	ldrh	r3, [r7, #28]
 800a8ba:	2b0b      	cmp	r3, #11
 800a8bc:	d801      	bhi.n	800a8c2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a8be:	230c      	movs	r3, #12
 800a8c0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a8c2:	8bbb      	ldrh	r3, [r7, #28]
 800a8c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8c8:	d803      	bhi.n	800a8d2 <mem_malloc+0x3a>
 800a8ca:	8bba      	ldrh	r2, [r7, #28]
 800a8cc:	88fb      	ldrh	r3, [r7, #6]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d201      	bcs.n	800a8d6 <mem_malloc+0x3e>
    return NULL;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	e0cd      	b.n	800aa72 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a8d6:	4869      	ldr	r0, [pc, #420]	; (800aa7c <mem_malloc+0x1e4>)
 800a8d8:	f009 fed2 	bl	8014680 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a8dc:	4b68      	ldr	r3, [pc, #416]	; (800aa80 <mem_malloc+0x1e8>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7ff fcfd 	bl	800a2e0 <mem_to_ptr>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	83fb      	strh	r3, [r7, #30]
 800a8ea:	e0b7      	b.n	800aa5c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a8ec:	8bfb      	ldrh	r3, [r7, #30]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7ff fce4 	bl	800a2bc <ptr_to_mem>
 800a8f4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	791b      	ldrb	r3, [r3, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f040 80a7 	bne.w	800aa4e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	881b      	ldrh	r3, [r3, #0]
 800a904:	461a      	mov	r2, r3
 800a906:	8bfb      	ldrh	r3, [r7, #30]
 800a908:	1ad3      	subs	r3, r2, r3
 800a90a:	f1a3 0208 	sub.w	r2, r3, #8
 800a90e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a910:	429a      	cmp	r2, r3
 800a912:	f0c0 809c 	bcc.w	800aa4e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	461a      	mov	r2, r3
 800a91c:	8bfb      	ldrh	r3, [r7, #30]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	f1a3 0208 	sub.w	r2, r3, #8
 800a924:	8bbb      	ldrh	r3, [r7, #28]
 800a926:	3314      	adds	r3, #20
 800a928:	429a      	cmp	r2, r3
 800a92a:	d333      	bcc.n	800a994 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a92c:	8bfa      	ldrh	r2, [r7, #30]
 800a92e:	8bbb      	ldrh	r3, [r7, #28]
 800a930:	4413      	add	r3, r2
 800a932:	b29b      	uxth	r3, r3
 800a934:	3308      	adds	r3, #8
 800a936:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a938:	8a7b      	ldrh	r3, [r7, #18]
 800a93a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a93e:	d106      	bne.n	800a94e <mem_malloc+0xb6>
 800a940:	4b50      	ldr	r3, [pc, #320]	; (800aa84 <mem_malloc+0x1ec>)
 800a942:	f240 3287 	movw	r2, #903	; 0x387
 800a946:	4950      	ldr	r1, [pc, #320]	; (800aa88 <mem_malloc+0x1f0>)
 800a948:	4850      	ldr	r0, [pc, #320]	; (800aa8c <mem_malloc+0x1f4>)
 800a94a:	f00a fa0b 	bl	8014d64 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a94e:	8a7b      	ldrh	r3, [r7, #18]
 800a950:	4618      	mov	r0, r3
 800a952:	f7ff fcb3 	bl	800a2bc <ptr_to_mem>
 800a956:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	881a      	ldrh	r2, [r3, #0]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	8bfa      	ldrh	r2, [r7, #30]
 800a96a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	8a7a      	ldrh	r2, [r7, #18]
 800a970:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	2201      	movs	r2, #1
 800a976:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	881b      	ldrh	r3, [r3, #0]
 800a97c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a980:	d00b      	beq.n	800a99a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	881b      	ldrh	r3, [r3, #0]
 800a986:	4618      	mov	r0, r3
 800a988:	f7ff fc98 	bl	800a2bc <ptr_to_mem>
 800a98c:	4602      	mov	r2, r0
 800a98e:	8a7b      	ldrh	r3, [r7, #18]
 800a990:	8053      	strh	r3, [r2, #2]
 800a992:	e002      	b.n	800a99a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	2201      	movs	r2, #1
 800a998:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a99a:	4b39      	ldr	r3, [pc, #228]	; (800aa80 <mem_malloc+0x1e8>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d127      	bne.n	800a9f4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a9a4:	4b36      	ldr	r3, [pc, #216]	; (800aa80 <mem_malloc+0x1e8>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a9aa:	e005      	b.n	800a9b8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	881b      	ldrh	r3, [r3, #0]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7ff fc83 	bl	800a2bc <ptr_to_mem>
 800a9b6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	791b      	ldrb	r3, [r3, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d004      	beq.n	800a9ca <mem_malloc+0x132>
 800a9c0:	4b33      	ldr	r3, [pc, #204]	; (800aa90 <mem_malloc+0x1f8>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	69ba      	ldr	r2, [r7, #24]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d1f0      	bne.n	800a9ac <mem_malloc+0x114>
          }
          lfree = cur;
 800a9ca:	4a2d      	ldr	r2, [pc, #180]	; (800aa80 <mem_malloc+0x1e8>)
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a9d0:	4b2b      	ldr	r3, [pc, #172]	; (800aa80 <mem_malloc+0x1e8>)
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	4b2e      	ldr	r3, [pc, #184]	; (800aa90 <mem_malloc+0x1f8>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d00b      	beq.n	800a9f4 <mem_malloc+0x15c>
 800a9dc:	4b28      	ldr	r3, [pc, #160]	; (800aa80 <mem_malloc+0x1e8>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	791b      	ldrb	r3, [r3, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d006      	beq.n	800a9f4 <mem_malloc+0x15c>
 800a9e6:	4b27      	ldr	r3, [pc, #156]	; (800aa84 <mem_malloc+0x1ec>)
 800a9e8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a9ec:	4929      	ldr	r1, [pc, #164]	; (800aa94 <mem_malloc+0x1fc>)
 800a9ee:	4827      	ldr	r0, [pc, #156]	; (800aa8c <mem_malloc+0x1f4>)
 800a9f0:	f00a f9b8 	bl	8014d64 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a9f4:	4821      	ldr	r0, [pc, #132]	; (800aa7c <mem_malloc+0x1e4>)
 800a9f6:	f009 fe52 	bl	801469e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a9fa:	8bba      	ldrh	r2, [r7, #28]
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	4413      	add	r3, r2
 800aa00:	3308      	adds	r3, #8
 800aa02:	4a23      	ldr	r2, [pc, #140]	; (800aa90 <mem_malloc+0x1f8>)
 800aa04:	6812      	ldr	r2, [r2, #0]
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d906      	bls.n	800aa18 <mem_malloc+0x180>
 800aa0a:	4b1e      	ldr	r3, [pc, #120]	; (800aa84 <mem_malloc+0x1ec>)
 800aa0c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800aa10:	4921      	ldr	r1, [pc, #132]	; (800aa98 <mem_malloc+0x200>)
 800aa12:	481e      	ldr	r0, [pc, #120]	; (800aa8c <mem_malloc+0x1f4>)
 800aa14:	f00a f9a6 	bl	8014d64 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	f003 0303 	and.w	r3, r3, #3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d006      	beq.n	800aa30 <mem_malloc+0x198>
 800aa22:	4b18      	ldr	r3, [pc, #96]	; (800aa84 <mem_malloc+0x1ec>)
 800aa24:	f240 32bb 	movw	r2, #955	; 0x3bb
 800aa28:	491c      	ldr	r1, [pc, #112]	; (800aa9c <mem_malloc+0x204>)
 800aa2a:	4818      	ldr	r0, [pc, #96]	; (800aa8c <mem_malloc+0x1f4>)
 800aa2c:	f00a f99a 	bl	8014d64 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	f003 0303 	and.w	r3, r3, #3
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d006      	beq.n	800aa48 <mem_malloc+0x1b0>
 800aa3a:	4b12      	ldr	r3, [pc, #72]	; (800aa84 <mem_malloc+0x1ec>)
 800aa3c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800aa40:	4917      	ldr	r1, [pc, #92]	; (800aaa0 <mem_malloc+0x208>)
 800aa42:	4812      	ldr	r0, [pc, #72]	; (800aa8c <mem_malloc+0x1f4>)
 800aa44:	f00a f98e 	bl	8014d64 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	3308      	adds	r3, #8
 800aa4c:	e011      	b.n	800aa72 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800aa4e:	8bfb      	ldrh	r3, [r7, #30]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7ff fc33 	bl	800a2bc <ptr_to_mem>
 800aa56:	4603      	mov	r3, r0
 800aa58:	881b      	ldrh	r3, [r3, #0]
 800aa5a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800aa5c:	8bfa      	ldrh	r2, [r7, #30]
 800aa5e:	8bbb      	ldrh	r3, [r7, #28]
 800aa60:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800aa64:	429a      	cmp	r2, r3
 800aa66:	f4ff af41 	bcc.w	800a8ec <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800aa6a:	4804      	ldr	r0, [pc, #16]	; (800aa7c <mem_malloc+0x1e4>)
 800aa6c:	f009 fe17 	bl	801469e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3720      	adds	r7, #32
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	20014984 	.word	0x20014984
 800aa80:	20014988 	.word	0x20014988
 800aa84:	080161b4 	.word	0x080161b4
 800aa88:	08016378 	.word	0x08016378
 800aa8c:	080161fc 	.word	0x080161fc
 800aa90:	20014980 	.word	0x20014980
 800aa94:	0801638c 	.word	0x0801638c
 800aa98:	080163a8 	.word	0x080163a8
 800aa9c:	080163d8 	.word	0x080163d8
 800aaa0:	08016408 	.word	0x08016408

0800aaa4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	2200      	movs	r2, #0
 800aab2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	3303      	adds	r3, #3
 800aaba:	f023 0303 	bic.w	r3, r3, #3
 800aabe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800aac0:	2300      	movs	r3, #0
 800aac2:	60fb      	str	r3, [r7, #12]
 800aac4:	e011      	b.n	800aaea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	881b      	ldrh	r3, [r3, #0]
 800aadc:	461a      	mov	r2, r3
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	4413      	add	r3, r2
 800aae2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	3301      	adds	r3, #1
 800aae8:	60fb      	str	r3, [r7, #12]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	885b      	ldrh	r3, [r3, #2]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	dbe7      	blt.n	800aac6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800aaf6:	bf00      	nop
 800aaf8:	bf00      	nop
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	80fb      	strh	r3, [r7, #6]
 800ab0e:	e009      	b.n	800ab24 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ab10:	88fb      	ldrh	r3, [r7, #6]
 800ab12:	4a08      	ldr	r2, [pc, #32]	; (800ab34 <memp_init+0x30>)
 800ab14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7ff ffc3 	bl	800aaa4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ab1e:	88fb      	ldrh	r3, [r7, #6]
 800ab20:	3301      	adds	r3, #1
 800ab22:	80fb      	strh	r3, [r7, #6]
 800ab24:	88fb      	ldrh	r3, [r7, #6]
 800ab26:	2b0c      	cmp	r3, #12
 800ab28:	d9f2      	bls.n	800ab10 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ab2a:	bf00      	nop
 800ab2c:	bf00      	nop
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	08018c1c 	.word	0x08018c1c

0800ab38 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ab40:	f009 fde0 	bl	8014704 <sys_arch_protect>
 800ab44:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d015      	beq.n	800ab80 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	6812      	ldr	r2, [r2, #0]
 800ab5c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	f003 0303 	and.w	r3, r3, #3
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d006      	beq.n	800ab76 <do_memp_malloc_pool+0x3e>
 800ab68:	4b09      	ldr	r3, [pc, #36]	; (800ab90 <do_memp_malloc_pool+0x58>)
 800ab6a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ab6e:	4909      	ldr	r1, [pc, #36]	; (800ab94 <do_memp_malloc_pool+0x5c>)
 800ab70:	4809      	ldr	r0, [pc, #36]	; (800ab98 <do_memp_malloc_pool+0x60>)
 800ab72:	f00a f8f7 	bl	8014d64 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f009 fdd2 	bl	8014720 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	e003      	b.n	800ab88 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f009 fdcd 	bl	8014720 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	0801642c 	.word	0x0801642c
 800ab94:	0801645c 	.word	0x0801645c
 800ab98:	08016480 	.word	0x08016480

0800ab9c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d106      	bne.n	800abb8 <memp_malloc_pool+0x1c>
 800abaa:	4b0a      	ldr	r3, [pc, #40]	; (800abd4 <memp_malloc_pool+0x38>)
 800abac:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800abb0:	4909      	ldr	r1, [pc, #36]	; (800abd8 <memp_malloc_pool+0x3c>)
 800abb2:	480a      	ldr	r0, [pc, #40]	; (800abdc <memp_malloc_pool+0x40>)
 800abb4:	f00a f8d6 	bl	8014d64 <iprintf>
  if (desc == NULL) {
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d101      	bne.n	800abc2 <memp_malloc_pool+0x26>
    return NULL;
 800abbe:	2300      	movs	r3, #0
 800abc0:	e003      	b.n	800abca <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7ff ffb8 	bl	800ab38 <do_memp_malloc_pool>
 800abc8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3708      	adds	r7, #8
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	0801642c 	.word	0x0801642c
 800abd8:	080164a8 	.word	0x080164a8
 800abdc:	08016480 	.word	0x08016480

0800abe0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	4603      	mov	r3, r0
 800abe8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800abea:	79fb      	ldrb	r3, [r7, #7]
 800abec:	2b0c      	cmp	r3, #12
 800abee:	d908      	bls.n	800ac02 <memp_malloc+0x22>
 800abf0:	4b0a      	ldr	r3, [pc, #40]	; (800ac1c <memp_malloc+0x3c>)
 800abf2:	f240 1257 	movw	r2, #343	; 0x157
 800abf6:	490a      	ldr	r1, [pc, #40]	; (800ac20 <memp_malloc+0x40>)
 800abf8:	480a      	ldr	r0, [pc, #40]	; (800ac24 <memp_malloc+0x44>)
 800abfa:	f00a f8b3 	bl	8014d64 <iprintf>
 800abfe:	2300      	movs	r3, #0
 800ac00:	e008      	b.n	800ac14 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ac02:	79fb      	ldrb	r3, [r7, #7]
 800ac04:	4a08      	ldr	r2, [pc, #32]	; (800ac28 <memp_malloc+0x48>)
 800ac06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7ff ff94 	bl	800ab38 <do_memp_malloc_pool>
 800ac10:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ac12:	68fb      	ldr	r3, [r7, #12]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	0801642c 	.word	0x0801642c
 800ac20:	080164bc 	.word	0x080164bc
 800ac24:	08016480 	.word	0x08016480
 800ac28:	08018c1c 	.word	0x08018c1c

0800ac2c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	f003 0303 	and.w	r3, r3, #3
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d006      	beq.n	800ac4e <do_memp_free_pool+0x22>
 800ac40:	4b0d      	ldr	r3, [pc, #52]	; (800ac78 <do_memp_free_pool+0x4c>)
 800ac42:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ac46:	490d      	ldr	r1, [pc, #52]	; (800ac7c <do_memp_free_pool+0x50>)
 800ac48:	480d      	ldr	r0, [pc, #52]	; (800ac80 <do_memp_free_pool+0x54>)
 800ac4a:	f00a f88b 	bl	8014d64 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ac52:	f009 fd57 	bl	8014704 <sys_arch_protect>
 800ac56:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ac6a:	68b8      	ldr	r0, [r7, #8]
 800ac6c:	f009 fd58 	bl	8014720 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ac70:	bf00      	nop
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	0801642c 	.word	0x0801642c
 800ac7c:	080164dc 	.word	0x080164dc
 800ac80:	08016480 	.word	0x08016480

0800ac84 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d106      	bne.n	800aca2 <memp_free_pool+0x1e>
 800ac94:	4b0a      	ldr	r3, [pc, #40]	; (800acc0 <memp_free_pool+0x3c>)
 800ac96:	f240 1295 	movw	r2, #405	; 0x195
 800ac9a:	490a      	ldr	r1, [pc, #40]	; (800acc4 <memp_free_pool+0x40>)
 800ac9c:	480a      	ldr	r0, [pc, #40]	; (800acc8 <memp_free_pool+0x44>)
 800ac9e:	f00a f861 	bl	8014d64 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d007      	beq.n	800acb8 <memp_free_pool+0x34>
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d004      	beq.n	800acb8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800acae:	6839      	ldr	r1, [r7, #0]
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f7ff ffbb 	bl	800ac2c <do_memp_free_pool>
 800acb6:	e000      	b.n	800acba <memp_free_pool+0x36>
    return;
 800acb8:	bf00      	nop
}
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	0801642c 	.word	0x0801642c
 800acc4:	080164a8 	.word	0x080164a8
 800acc8:	08016480 	.word	0x08016480

0800accc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	4603      	mov	r3, r0
 800acd4:	6039      	str	r1, [r7, #0]
 800acd6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800acd8:	79fb      	ldrb	r3, [r7, #7]
 800acda:	2b0c      	cmp	r3, #12
 800acdc:	d907      	bls.n	800acee <memp_free+0x22>
 800acde:	4b0c      	ldr	r3, [pc, #48]	; (800ad10 <memp_free+0x44>)
 800ace0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ace4:	490b      	ldr	r1, [pc, #44]	; (800ad14 <memp_free+0x48>)
 800ace6:	480c      	ldr	r0, [pc, #48]	; (800ad18 <memp_free+0x4c>)
 800ace8:	f00a f83c 	bl	8014d64 <iprintf>
 800acec:	e00c      	b.n	800ad08 <memp_free+0x3c>

  if (mem == NULL) {
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d008      	beq.n	800ad06 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800acf4:	79fb      	ldrb	r3, [r7, #7]
 800acf6:	4a09      	ldr	r2, [pc, #36]	; (800ad1c <memp_free+0x50>)
 800acf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7ff ff94 	bl	800ac2c <do_memp_free_pool>
 800ad04:	e000      	b.n	800ad08 <memp_free+0x3c>
    return;
 800ad06:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	0801642c 	.word	0x0801642c
 800ad14:	080164fc 	.word	0x080164fc
 800ad18:	08016480 	.word	0x08016480
 800ad1c:	08018c1c 	.word	0x08018c1c

0800ad20 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ad20:	b480      	push	{r7}
 800ad22:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ad24:	bf00      	nop
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
	...

0800ad30 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
 800ad3c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d108      	bne.n	800ad56 <netif_add+0x26>
 800ad44:	4b57      	ldr	r3, [pc, #348]	; (800aea4 <netif_add+0x174>)
 800ad46:	f240 1227 	movw	r2, #295	; 0x127
 800ad4a:	4957      	ldr	r1, [pc, #348]	; (800aea8 <netif_add+0x178>)
 800ad4c:	4857      	ldr	r0, [pc, #348]	; (800aeac <netif_add+0x17c>)
 800ad4e:	f00a f809 	bl	8014d64 <iprintf>
 800ad52:	2300      	movs	r3, #0
 800ad54:	e0a2      	b.n	800ae9c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ad56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d108      	bne.n	800ad6e <netif_add+0x3e>
 800ad5c:	4b51      	ldr	r3, [pc, #324]	; (800aea4 <netif_add+0x174>)
 800ad5e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ad62:	4953      	ldr	r1, [pc, #332]	; (800aeb0 <netif_add+0x180>)
 800ad64:	4851      	ldr	r0, [pc, #324]	; (800aeac <netif_add+0x17c>)
 800ad66:	f009 fffd 	bl	8014d64 <iprintf>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	e096      	b.n	800ae9c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d101      	bne.n	800ad78 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ad74:	4b4f      	ldr	r3, [pc, #316]	; (800aeb4 <netif_add+0x184>)
 800ad76:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d101      	bne.n	800ad82 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ad7e:	4b4d      	ldr	r3, [pc, #308]	; (800aeb4 <netif_add+0x184>)
 800ad80:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d101      	bne.n	800ad8c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ad88:	4b4a      	ldr	r3, [pc, #296]	; (800aeb4 <netif_add+0x184>)
 800ad8a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	4a45      	ldr	r2, [pc, #276]	; (800aeb8 <netif_add+0x188>)
 800ada2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2200      	movs	r2, #0
 800ada8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6a3a      	ldr	r2, [r7, #32]
 800adbc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800adbe:	4b3f      	ldr	r3, [pc, #252]	; (800aebc <netif_add+0x18c>)
 800adc0:	781a      	ldrb	r2, [r3, #0]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adcc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	68b9      	ldr	r1, [r7, #8]
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f000 f913 	bl	800b000 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	4798      	blx	r3
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <netif_add+0xba>
    return NULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	e058      	b.n	800ae9c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800adf0:	2bff      	cmp	r3, #255	; 0xff
 800adf2:	d103      	bne.n	800adfc <netif_add+0xcc>
        netif->num = 0;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800adfc:	2300      	movs	r3, #0
 800adfe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ae00:	4b2f      	ldr	r3, [pc, #188]	; (800aec0 <netif_add+0x190>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	617b      	str	r3, [r7, #20]
 800ae06:	e02b      	b.n	800ae60 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d106      	bne.n	800ae1e <netif_add+0xee>
 800ae10:	4b24      	ldr	r3, [pc, #144]	; (800aea4 <netif_add+0x174>)
 800ae12:	f240 128b 	movw	r2, #395	; 0x18b
 800ae16:	492b      	ldr	r1, [pc, #172]	; (800aec4 <netif_add+0x194>)
 800ae18:	4824      	ldr	r0, [pc, #144]	; (800aeac <netif_add+0x17c>)
 800ae1a:	f009 ffa3 	bl	8014d64 <iprintf>
        num_netifs++;
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	3301      	adds	r3, #1
 800ae22:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	2bff      	cmp	r3, #255	; 0xff
 800ae28:	dd06      	ble.n	800ae38 <netif_add+0x108>
 800ae2a:	4b1e      	ldr	r3, [pc, #120]	; (800aea4 <netif_add+0x174>)
 800ae2c:	f240 128d 	movw	r2, #397	; 0x18d
 800ae30:	4925      	ldr	r1, [pc, #148]	; (800aec8 <netif_add+0x198>)
 800ae32:	481e      	ldr	r0, [pc, #120]	; (800aeac <netif_add+0x17c>)
 800ae34:	f009 ff96 	bl	8014d64 <iprintf>
        if (netif2->num == netif->num) {
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d108      	bne.n	800ae5a <netif_add+0x12a>
          netif->num++;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae4e:	3301      	adds	r3, #1
 800ae50:	b2da      	uxtb	r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ae58:	e005      	b.n	800ae66 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	617b      	str	r3, [r7, #20]
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1d0      	bne.n	800ae08 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1be      	bne.n	800adea <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae72:	2bfe      	cmp	r3, #254	; 0xfe
 800ae74:	d103      	bne.n	800ae7e <netif_add+0x14e>
    netif_num = 0;
 800ae76:	4b11      	ldr	r3, [pc, #68]	; (800aebc <netif_add+0x18c>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	701a      	strb	r2, [r3, #0]
 800ae7c:	e006      	b.n	800ae8c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae84:	3301      	adds	r3, #1
 800ae86:	b2da      	uxtb	r2, r3
 800ae88:	4b0c      	ldr	r3, [pc, #48]	; (800aebc <netif_add+0x18c>)
 800ae8a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ae8c:	4b0c      	ldr	r3, [pc, #48]	; (800aec0 <netif_add+0x190>)
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ae94:	4a0a      	ldr	r2, [pc, #40]	; (800aec0 <netif_add+0x190>)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3718      	adds	r7, #24
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	08016518 	.word	0x08016518
 800aea8:	080165ac 	.word	0x080165ac
 800aeac:	08016568 	.word	0x08016568
 800aeb0:	080165c8 	.word	0x080165c8
 800aeb4:	08018c90 	.word	0x08018c90
 800aeb8:	0800b2db 	.word	0x0800b2db
 800aebc:	20017a60 	.word	0x20017a60
 800aec0:	20017a58 	.word	0x20017a58
 800aec4:	080165ec 	.word	0x080165ec
 800aec8:	08016600 	.word	0x08016600

0800aecc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800aed6:	6839      	ldr	r1, [r7, #0]
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f002 fb8d 	bl	800d5f8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f006 ff91 	bl	8011e08 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800aee6:	bf00      	nop
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
	...

0800aef0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d106      	bne.n	800af10 <netif_do_set_ipaddr+0x20>
 800af02:	4b1d      	ldr	r3, [pc, #116]	; (800af78 <netif_do_set_ipaddr+0x88>)
 800af04:	f240 12cb 	movw	r2, #459	; 0x1cb
 800af08:	491c      	ldr	r1, [pc, #112]	; (800af7c <netif_do_set_ipaddr+0x8c>)
 800af0a:	481d      	ldr	r0, [pc, #116]	; (800af80 <netif_do_set_ipaddr+0x90>)
 800af0c:	f009 ff2a 	bl	8014d64 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d106      	bne.n	800af24 <netif_do_set_ipaddr+0x34>
 800af16:	4b18      	ldr	r3, [pc, #96]	; (800af78 <netif_do_set_ipaddr+0x88>)
 800af18:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800af1c:	4917      	ldr	r1, [pc, #92]	; (800af7c <netif_do_set_ipaddr+0x8c>)
 800af1e:	4818      	ldr	r0, [pc, #96]	; (800af80 <netif_do_set_ipaddr+0x90>)
 800af20:	f009 ff20 	bl	8014d64 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	3304      	adds	r3, #4
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d01c      	beq.n	800af6c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	3304      	adds	r3, #4
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800af42:	f107 0314 	add.w	r3, r7, #20
 800af46:	4619      	mov	r1, r3
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7ff ffbf 	bl	800aecc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d002      	beq.n	800af5a <netif_do_set_ipaddr+0x6a>
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	e000      	b.n	800af5c <netif_do_set_ipaddr+0x6c>
 800af5a:	2300      	movs	r3, #0
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800af60:	2101      	movs	r1, #1
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f000 f8d2 	bl	800b10c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800af68:	2301      	movs	r3, #1
 800af6a:	e000      	b.n	800af6e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	08016518 	.word	0x08016518
 800af7c:	08016630 	.word	0x08016630
 800af80:	08016568 	.word	0x08016568

0800af84 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	3308      	adds	r3, #8
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d00a      	beq.n	800afb4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d002      	beq.n	800afaa <netif_do_set_netmask+0x26>
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	e000      	b.n	800afac <netif_do_set_netmask+0x28>
 800afaa:	2300      	movs	r3, #0
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800afb0:	2301      	movs	r3, #1
 800afb2:	e000      	b.n	800afb6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800afc2:	b480      	push	{r7}
 800afc4:	b085      	sub	sp, #20
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	60f8      	str	r0, [r7, #12]
 800afca:	60b9      	str	r1, [r7, #8]
 800afcc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	330c      	adds	r3, #12
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d00a      	beq.n	800aff2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d002      	beq.n	800afe8 <netif_do_set_gw+0x26>
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	e000      	b.n	800afea <netif_do_set_gw+0x28>
 800afe8:	2300      	movs	r3, #0
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800afee:	2301      	movs	r3, #1
 800aff0:	e000      	b.n	800aff4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800aff2:	2300      	movs	r3, #0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3714      	adds	r7, #20
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b088      	sub	sp, #32
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]
 800b00c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b00e:	2300      	movs	r3, #0
 800b010:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b012:	2300      	movs	r3, #0
 800b014:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b01c:	4b1c      	ldr	r3, [pc, #112]	; (800b090 <netif_set_addr+0x90>)
 800b01e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d101      	bne.n	800b02a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b026:	4b1a      	ldr	r3, [pc, #104]	; (800b090 <netif_set_addr+0x90>)
 800b028:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b030:	4b17      	ldr	r3, [pc, #92]	; (800b090 <netif_set_addr+0x90>)
 800b032:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d003      	beq.n	800b042 <netif_set_addr+0x42>
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d101      	bne.n	800b046 <netif_set_addr+0x46>
 800b042:	2301      	movs	r3, #1
 800b044:	e000      	b.n	800b048 <netif_set_addr+0x48>
 800b046:	2300      	movs	r3, #0
 800b048:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d006      	beq.n	800b05e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b050:	f107 0310 	add.w	r3, r7, #16
 800b054:	461a      	mov	r2, r3
 800b056:	68b9      	ldr	r1, [r7, #8]
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f7ff ff49 	bl	800aef0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b05e:	69fa      	ldr	r2, [r7, #28]
 800b060:	6879      	ldr	r1, [r7, #4]
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f7ff ff8e 	bl	800af84 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b068:	69ba      	ldr	r2, [r7, #24]
 800b06a:	6839      	ldr	r1, [r7, #0]
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f7ff ffa8 	bl	800afc2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d106      	bne.n	800b086 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b078:	f107 0310 	add.w	r3, r7, #16
 800b07c:	461a      	mov	r2, r3
 800b07e:	68b9      	ldr	r1, [r7, #8]
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7ff ff35 	bl	800aef0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b086:	bf00      	nop
 800b088:	3720      	adds	r7, #32
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	08018c90 	.word	0x08018c90

0800b094 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b09c:	4a04      	ldr	r2, [pc, #16]	; (800b0b0 <netif_set_default+0x1c>)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b0a2:	bf00      	nop
 800b0a4:	370c      	adds	r7, #12
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	20017a5c 	.word	0x20017a5c

0800b0b4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d107      	bne.n	800b0d2 <netif_set_up+0x1e>
 800b0c2:	4b0f      	ldr	r3, [pc, #60]	; (800b100 <netif_set_up+0x4c>)
 800b0c4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b0c8:	490e      	ldr	r1, [pc, #56]	; (800b104 <netif_set_up+0x50>)
 800b0ca:	480f      	ldr	r0, [pc, #60]	; (800b108 <netif_set_up+0x54>)
 800b0cc:	f009 fe4a 	bl	8014d64 <iprintf>
 800b0d0:	e013      	b.n	800b0fa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0d8:	f003 0301 	and.w	r3, r3, #1
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10c      	bne.n	800b0fa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0e6:	f043 0301 	orr.w	r3, r3, #1
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b0f2:	2103      	movs	r1, #3
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 f809 	bl	800b10c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b0fa:	3708      	adds	r7, #8
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	08016518 	.word	0x08016518
 800b104:	080166a0 	.word	0x080166a0
 800b108:	08016568 	.word	0x08016568

0800b10c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	460b      	mov	r3, r1
 800b116:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d106      	bne.n	800b12c <netif_issue_reports+0x20>
 800b11e:	4b18      	ldr	r3, [pc, #96]	; (800b180 <netif_issue_reports+0x74>)
 800b120:	f240 326d 	movw	r2, #877	; 0x36d
 800b124:	4917      	ldr	r1, [pc, #92]	; (800b184 <netif_issue_reports+0x78>)
 800b126:	4818      	ldr	r0, [pc, #96]	; (800b188 <netif_issue_reports+0x7c>)
 800b128:	f009 fe1c 	bl	8014d64 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b132:	f003 0304 	and.w	r3, r3, #4
 800b136:	2b00      	cmp	r3, #0
 800b138:	d01e      	beq.n	800b178 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b140:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b144:	2b00      	cmp	r3, #0
 800b146:	d017      	beq.n	800b178 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b148:	78fb      	ldrb	r3, [r7, #3]
 800b14a:	f003 0301 	and.w	r3, r3, #1
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d013      	beq.n	800b17a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	3304      	adds	r3, #4
 800b156:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00e      	beq.n	800b17a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b162:	f003 0308 	and.w	r3, r3, #8
 800b166:	2b00      	cmp	r3, #0
 800b168:	d007      	beq.n	800b17a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	3304      	adds	r3, #4
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f007 fdb3 	bl	8012cdc <etharp_request>
 800b176:	e000      	b.n	800b17a <netif_issue_reports+0x6e>
    return;
 800b178:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	08016518 	.word	0x08016518
 800b184:	080166bc 	.word	0x080166bc
 800b188:	08016568 	.word	0x08016568

0800b18c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d107      	bne.n	800b1aa <netif_set_down+0x1e>
 800b19a:	4b12      	ldr	r3, [pc, #72]	; (800b1e4 <netif_set_down+0x58>)
 800b19c:	f240 329b 	movw	r2, #923	; 0x39b
 800b1a0:	4911      	ldr	r1, [pc, #68]	; (800b1e8 <netif_set_down+0x5c>)
 800b1a2:	4812      	ldr	r0, [pc, #72]	; (800b1ec <netif_set_down+0x60>)
 800b1a4:	f009 fdde 	bl	8014d64 <iprintf>
 800b1a8:	e019      	b.n	800b1de <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1b0:	f003 0301 	and.w	r3, r3, #1
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d012      	beq.n	800b1de <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1be:	f023 0301 	bic.w	r3, r3, #1
 800b1c2:	b2da      	uxtb	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1d0:	f003 0308 	and.w	r3, r3, #8
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d002      	beq.n	800b1de <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f007 f93d 	bl	8012458 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b1de:	3708      	adds	r7, #8
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	08016518 	.word	0x08016518
 800b1e8:	080166e0 	.word	0x080166e0
 800b1ec:	08016568 	.word	0x08016568

0800b1f0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d107      	bne.n	800b20e <netif_set_link_up+0x1e>
 800b1fe:	4b13      	ldr	r3, [pc, #76]	; (800b24c <netif_set_link_up+0x5c>)
 800b200:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b204:	4912      	ldr	r1, [pc, #72]	; (800b250 <netif_set_link_up+0x60>)
 800b206:	4813      	ldr	r0, [pc, #76]	; (800b254 <netif_set_link_up+0x64>)
 800b208:	f009 fdac 	bl	8014d64 <iprintf>
 800b20c:	e01b      	b.n	800b246 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b214:	f003 0304 	and.w	r3, r3, #4
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d114      	bne.n	800b246 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b222:	f043 0304 	orr.w	r3, r3, #4
 800b226:	b2da      	uxtb	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b22e:	2103      	movs	r1, #3
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f7ff ff6b 	bl	800b10c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	69db      	ldr	r3, [r3, #28]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d003      	beq.n	800b246 <netif_set_link_up+0x56>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	69db      	ldr	r3, [r3, #28]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	08016518 	.word	0x08016518
 800b250:	08016700 	.word	0x08016700
 800b254:	08016568 	.word	0x08016568

0800b258 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d107      	bne.n	800b276 <netif_set_link_down+0x1e>
 800b266:	4b11      	ldr	r3, [pc, #68]	; (800b2ac <netif_set_link_down+0x54>)
 800b268:	f240 4206 	movw	r2, #1030	; 0x406
 800b26c:	4910      	ldr	r1, [pc, #64]	; (800b2b0 <netif_set_link_down+0x58>)
 800b26e:	4811      	ldr	r0, [pc, #68]	; (800b2b4 <netif_set_link_down+0x5c>)
 800b270:	f009 fd78 	bl	8014d64 <iprintf>
 800b274:	e017      	b.n	800b2a6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b27c:	f003 0304 	and.w	r3, r3, #4
 800b280:	2b00      	cmp	r3, #0
 800b282:	d010      	beq.n	800b2a6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b28a:	f023 0304 	bic.w	r3, r3, #4
 800b28e:	b2da      	uxtb	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	69db      	ldr	r3, [r3, #28]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d003      	beq.n	800b2a6 <netif_set_link_down+0x4e>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	69db      	ldr	r3, [r3, #28]
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	08016518 	.word	0x08016518
 800b2b0:	08016724 	.word	0x08016724
 800b2b4:	08016568 	.word	0x08016568

0800b2b8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	61da      	str	r2, [r3, #28]
  }
}
 800b2ce:	bf00      	nop
 800b2d0:	370c      	adds	r7, #12
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr

0800b2da <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b2da:	b480      	push	{r7}
 800b2dc:	b085      	sub	sp, #20
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	60f8      	str	r0, [r7, #12]
 800b2e2:	60b9      	str	r1, [r7, #8]
 800b2e4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b2e6:	f06f 030b 	mvn.w	r3, #11
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3714      	adds	r7, #20
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
	...

0800b2f8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	4603      	mov	r3, r0
 800b300:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b302:	79fb      	ldrb	r3, [r7, #7]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d013      	beq.n	800b330 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b308:	4b0d      	ldr	r3, [pc, #52]	; (800b340 <netif_get_by_index+0x48>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	60fb      	str	r3, [r7, #12]
 800b30e:	e00c      	b.n	800b32a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b316:	3301      	adds	r3, #1
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	79fa      	ldrb	r2, [r7, #7]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d101      	bne.n	800b324 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	e006      	b.n	800b332 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	60fb      	str	r3, [r7, #12]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1ef      	bne.n	800b310 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3714      	adds	r7, #20
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	20017a58 	.word	0x20017a58

0800b344 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b34a:	f009 f9db 	bl	8014704 <sys_arch_protect>
 800b34e:	6038      	str	r0, [r7, #0]
 800b350:	4b0d      	ldr	r3, [pc, #52]	; (800b388 <pbuf_free_ooseq+0x44>)
 800b352:	2200      	movs	r2, #0
 800b354:	701a      	strb	r2, [r3, #0]
 800b356:	6838      	ldr	r0, [r7, #0]
 800b358:	f009 f9e2 	bl	8014720 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b35c:	4b0b      	ldr	r3, [pc, #44]	; (800b38c <pbuf_free_ooseq+0x48>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	607b      	str	r3, [r7, #4]
 800b362:	e00a      	b.n	800b37a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d003      	beq.n	800b374 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f002 f981 	bl	800d674 <tcp_free_ooseq>
      return;
 800b372:	e005      	b.n	800b380 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	607b      	str	r3, [r7, #4]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1f1      	bne.n	800b364 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	20017a61 	.word	0x20017a61
 800b38c:	20017a70 	.word	0x20017a70

0800b390 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b398:	f7ff ffd4 	bl	800b344 <pbuf_free_ooseq>
}
 800b39c:	bf00      	nop
 800b39e:	3708      	adds	r7, #8
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b3aa:	f009 f9ab 	bl	8014704 <sys_arch_protect>
 800b3ae:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b3b0:	4b0f      	ldr	r3, [pc, #60]	; (800b3f0 <pbuf_pool_is_empty+0x4c>)
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b3b6:	4b0e      	ldr	r3, [pc, #56]	; (800b3f0 <pbuf_pool_is_empty+0x4c>)
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f009 f9af 	bl	8014720 <sys_arch_unprotect>

  if (!queued) {
 800b3c2:	78fb      	ldrb	r3, [r7, #3]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d10f      	bne.n	800b3e8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	480a      	ldr	r0, [pc, #40]	; (800b3f4 <pbuf_pool_is_empty+0x50>)
 800b3cc:	f7fe fea6 	bl	800a11c <tcpip_try_callback>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d008      	beq.n	800b3e8 <pbuf_pool_is_empty+0x44>
 800b3d6:	f009 f995 	bl	8014704 <sys_arch_protect>
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	4b04      	ldr	r3, [pc, #16]	; (800b3f0 <pbuf_pool_is_empty+0x4c>)
 800b3de:	2200      	movs	r2, #0
 800b3e0:	701a      	strb	r2, [r3, #0]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f009 f99c 	bl	8014720 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b3e8:	bf00      	nop
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	20017a61 	.word	0x20017a61
 800b3f4:	0800b391 	.word	0x0800b391

0800b3f8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	4611      	mov	r1, r2
 800b404:	461a      	mov	r2, r3
 800b406:	460b      	mov	r3, r1
 800b408:	80fb      	strh	r3, [r7, #6]
 800b40a:	4613      	mov	r3, r2
 800b40c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2200      	movs	r2, #0
 800b412:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	68ba      	ldr	r2, [r7, #8]
 800b418:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	88fa      	ldrh	r2, [r7, #6]
 800b41e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	88ba      	ldrh	r2, [r7, #4]
 800b424:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b426:	8b3b      	ldrh	r3, [r7, #24]
 800b428:	b2da      	uxtb	r2, r3
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	7f3a      	ldrb	r2, [r7, #28]
 800b432:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2201      	movs	r2, #1
 800b438:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2200      	movs	r2, #0
 800b43e:	73da      	strb	r2, [r3, #15]
}
 800b440:	bf00      	nop
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b08c      	sub	sp, #48	; 0x30
 800b450:	af02      	add	r7, sp, #8
 800b452:	4603      	mov	r3, r0
 800b454:	71fb      	strb	r3, [r7, #7]
 800b456:	460b      	mov	r3, r1
 800b458:	80bb      	strh	r3, [r7, #4]
 800b45a:	4613      	mov	r3, r2
 800b45c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b45e:	79fb      	ldrb	r3, [r7, #7]
 800b460:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b462:	887b      	ldrh	r3, [r7, #2]
 800b464:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b468:	d07f      	beq.n	800b56a <pbuf_alloc+0x11e>
 800b46a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b46e:	f300 80c8 	bgt.w	800b602 <pbuf_alloc+0x1b6>
 800b472:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b476:	d010      	beq.n	800b49a <pbuf_alloc+0x4e>
 800b478:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b47c:	f300 80c1 	bgt.w	800b602 <pbuf_alloc+0x1b6>
 800b480:	2b01      	cmp	r3, #1
 800b482:	d002      	beq.n	800b48a <pbuf_alloc+0x3e>
 800b484:	2b41      	cmp	r3, #65	; 0x41
 800b486:	f040 80bc 	bne.w	800b602 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b48a:	887a      	ldrh	r2, [r7, #2]
 800b48c:	88bb      	ldrh	r3, [r7, #4]
 800b48e:	4619      	mov	r1, r3
 800b490:	2000      	movs	r0, #0
 800b492:	f000 f8d1 	bl	800b638 <pbuf_alloc_reference>
 800b496:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b498:	e0bd      	b.n	800b616 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b49a:	2300      	movs	r3, #0
 800b49c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b4a2:	88bb      	ldrh	r3, [r7, #4]
 800b4a4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b4a6:	200c      	movs	r0, #12
 800b4a8:	f7ff fb9a 	bl	800abe0 <memp_malloc>
 800b4ac:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d109      	bne.n	800b4c8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b4b4:	f7ff ff76 	bl	800b3a4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d002      	beq.n	800b4c4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b4be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4c0:	f000 faa8 	bl	800ba14 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	e0a7      	b.n	800b618 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b4c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4ca:	3303      	adds	r3, #3
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	f023 0303 	bic.w	r3, r3, #3
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	8b7a      	ldrh	r2, [r7, #26]
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	bf28      	it	cs
 800b4e0:	4613      	movcs	r3, r2
 800b4e2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b4e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4e6:	3310      	adds	r3, #16
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	3303      	adds	r3, #3
 800b4ee:	f023 0303 	bic.w	r3, r3, #3
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	89f9      	ldrh	r1, [r7, #14]
 800b4f6:	8b7a      	ldrh	r2, [r7, #26]
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	9301      	str	r3, [sp, #4]
 800b4fc:	887b      	ldrh	r3, [r7, #2]
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	460b      	mov	r3, r1
 800b502:	4601      	mov	r1, r0
 800b504:	6938      	ldr	r0, [r7, #16]
 800b506:	f7ff ff77 	bl	800b3f8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	f003 0303 	and.w	r3, r3, #3
 800b512:	2b00      	cmp	r3, #0
 800b514:	d006      	beq.n	800b524 <pbuf_alloc+0xd8>
 800b516:	4b42      	ldr	r3, [pc, #264]	; (800b620 <pbuf_alloc+0x1d4>)
 800b518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b51c:	4941      	ldr	r1, [pc, #260]	; (800b624 <pbuf_alloc+0x1d8>)
 800b51e:	4842      	ldr	r0, [pc, #264]	; (800b628 <pbuf_alloc+0x1dc>)
 800b520:	f009 fc20 	bl	8014d64 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b524:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b526:	3303      	adds	r3, #3
 800b528:	f023 0303 	bic.w	r3, r3, #3
 800b52c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b530:	d106      	bne.n	800b540 <pbuf_alloc+0xf4>
 800b532:	4b3b      	ldr	r3, [pc, #236]	; (800b620 <pbuf_alloc+0x1d4>)
 800b534:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b538:	493c      	ldr	r1, [pc, #240]	; (800b62c <pbuf_alloc+0x1e0>)
 800b53a:	483b      	ldr	r0, [pc, #236]	; (800b628 <pbuf_alloc+0x1dc>)
 800b53c:	f009 fc12 	bl	8014d64 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b542:	2b00      	cmp	r3, #0
 800b544:	d102      	bne.n	800b54c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	627b      	str	r3, [r7, #36]	; 0x24
 800b54a:	e002      	b.n	800b552 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	693a      	ldr	r2, [r7, #16]
 800b550:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b556:	8b7a      	ldrh	r2, [r7, #26]
 800b558:	89fb      	ldrh	r3, [r7, #14]
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b562:	8b7b      	ldrh	r3, [r7, #26]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d19e      	bne.n	800b4a6 <pbuf_alloc+0x5a>
      break;
 800b568:	e055      	b.n	800b616 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b56a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b56c:	3303      	adds	r3, #3
 800b56e:	b29b      	uxth	r3, r3
 800b570:	f023 0303 	bic.w	r3, r3, #3
 800b574:	b29a      	uxth	r2, r3
 800b576:	88bb      	ldrh	r3, [r7, #4]
 800b578:	3303      	adds	r3, #3
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	f023 0303 	bic.w	r3, r3, #3
 800b580:	b29b      	uxth	r3, r3
 800b582:	4413      	add	r3, r2
 800b584:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b586:	8b3b      	ldrh	r3, [r7, #24]
 800b588:	3310      	adds	r3, #16
 800b58a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b58c:	8b3a      	ldrh	r2, [r7, #24]
 800b58e:	88bb      	ldrh	r3, [r7, #4]
 800b590:	3303      	adds	r3, #3
 800b592:	f023 0303 	bic.w	r3, r3, #3
 800b596:	429a      	cmp	r2, r3
 800b598:	d306      	bcc.n	800b5a8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b59a:	8afa      	ldrh	r2, [r7, #22]
 800b59c:	88bb      	ldrh	r3, [r7, #4]
 800b59e:	3303      	adds	r3, #3
 800b5a0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d201      	bcs.n	800b5ac <pbuf_alloc+0x160>
        return NULL;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	e035      	b.n	800b618 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b5ac:	8afb      	ldrh	r3, [r7, #22]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7ff f972 	bl	800a898 <mem_malloc>
 800b5b4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d101      	bne.n	800b5c0 <pbuf_alloc+0x174>
        return NULL;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	e02b      	b.n	800b618 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b5c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5c2:	3310      	adds	r3, #16
 800b5c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5c6:	4413      	add	r3, r2
 800b5c8:	3303      	adds	r3, #3
 800b5ca:	f023 0303 	bic.w	r3, r3, #3
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	88b9      	ldrh	r1, [r7, #4]
 800b5d2:	88ba      	ldrh	r2, [r7, #4]
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	9301      	str	r3, [sp, #4]
 800b5d8:	887b      	ldrh	r3, [r7, #2]
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	4601      	mov	r1, r0
 800b5e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5e2:	f7ff ff09 	bl	800b3f8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f003 0303 	and.w	r3, r3, #3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d010      	beq.n	800b614 <pbuf_alloc+0x1c8>
 800b5f2:	4b0b      	ldr	r3, [pc, #44]	; (800b620 <pbuf_alloc+0x1d4>)
 800b5f4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b5f8:	490d      	ldr	r1, [pc, #52]	; (800b630 <pbuf_alloc+0x1e4>)
 800b5fa:	480b      	ldr	r0, [pc, #44]	; (800b628 <pbuf_alloc+0x1dc>)
 800b5fc:	f009 fbb2 	bl	8014d64 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b600:	e008      	b.n	800b614 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b602:	4b07      	ldr	r3, [pc, #28]	; (800b620 <pbuf_alloc+0x1d4>)
 800b604:	f240 1227 	movw	r2, #295	; 0x127
 800b608:	490a      	ldr	r1, [pc, #40]	; (800b634 <pbuf_alloc+0x1e8>)
 800b60a:	4807      	ldr	r0, [pc, #28]	; (800b628 <pbuf_alloc+0x1dc>)
 800b60c:	f009 fbaa 	bl	8014d64 <iprintf>
      return NULL;
 800b610:	2300      	movs	r3, #0
 800b612:	e001      	b.n	800b618 <pbuf_alloc+0x1cc>
      break;
 800b614:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3728      	adds	r7, #40	; 0x28
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	08016748 	.word	0x08016748
 800b624:	08016778 	.word	0x08016778
 800b628:	080167a8 	.word	0x080167a8
 800b62c:	080167d0 	.word	0x080167d0
 800b630:	08016804 	.word	0x08016804
 800b634:	08016830 	.word	0x08016830

0800b638 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b086      	sub	sp, #24
 800b63c:	af02      	add	r7, sp, #8
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	460b      	mov	r3, r1
 800b642:	807b      	strh	r3, [r7, #2]
 800b644:	4613      	mov	r3, r2
 800b646:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b648:	883b      	ldrh	r3, [r7, #0]
 800b64a:	2b41      	cmp	r3, #65	; 0x41
 800b64c:	d009      	beq.n	800b662 <pbuf_alloc_reference+0x2a>
 800b64e:	883b      	ldrh	r3, [r7, #0]
 800b650:	2b01      	cmp	r3, #1
 800b652:	d006      	beq.n	800b662 <pbuf_alloc_reference+0x2a>
 800b654:	4b0f      	ldr	r3, [pc, #60]	; (800b694 <pbuf_alloc_reference+0x5c>)
 800b656:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b65a:	490f      	ldr	r1, [pc, #60]	; (800b698 <pbuf_alloc_reference+0x60>)
 800b65c:	480f      	ldr	r0, [pc, #60]	; (800b69c <pbuf_alloc_reference+0x64>)
 800b65e:	f009 fb81 	bl	8014d64 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b662:	200b      	movs	r0, #11
 800b664:	f7ff fabc 	bl	800abe0 <memp_malloc>
 800b668:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d101      	bne.n	800b674 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b670:	2300      	movs	r3, #0
 800b672:	e00b      	b.n	800b68c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b674:	8879      	ldrh	r1, [r7, #2]
 800b676:	887a      	ldrh	r2, [r7, #2]
 800b678:	2300      	movs	r3, #0
 800b67a:	9301      	str	r3, [sp, #4]
 800b67c:	883b      	ldrh	r3, [r7, #0]
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	460b      	mov	r3, r1
 800b682:	6879      	ldr	r1, [r7, #4]
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	f7ff feb7 	bl	800b3f8 <pbuf_init_alloced_pbuf>
  return p;
 800b68a:	68fb      	ldr	r3, [r7, #12]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	08016748 	.word	0x08016748
 800b698:	0801684c 	.word	0x0801684c
 800b69c:	080167a8 	.word	0x080167a8

0800b6a0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b088      	sub	sp, #32
 800b6a4:	af02      	add	r7, sp, #8
 800b6a6:	607b      	str	r3, [r7, #4]
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	73fb      	strb	r3, [r7, #15]
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	81bb      	strh	r3, [r7, #12]
 800b6b0:	4613      	mov	r3, r2
 800b6b2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b6b4:	7bfb      	ldrb	r3, [r7, #15]
 800b6b6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b6b8:	8a7b      	ldrh	r3, [r7, #18]
 800b6ba:	3303      	adds	r3, #3
 800b6bc:	f023 0203 	bic.w	r2, r3, #3
 800b6c0:	89bb      	ldrh	r3, [r7, #12]
 800b6c2:	441a      	add	r2, r3
 800b6c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d901      	bls.n	800b6ce <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	e018      	b.n	800b700 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b6ce:	6a3b      	ldr	r3, [r7, #32]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d007      	beq.n	800b6e4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b6d4:	8a7b      	ldrh	r3, [r7, #18]
 800b6d6:	3303      	adds	r3, #3
 800b6d8:	f023 0303 	bic.w	r3, r3, #3
 800b6dc:	6a3a      	ldr	r2, [r7, #32]
 800b6de:	4413      	add	r3, r2
 800b6e0:	617b      	str	r3, [r7, #20]
 800b6e2:	e001      	b.n	800b6e8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	89b9      	ldrh	r1, [r7, #12]
 800b6ec:	89ba      	ldrh	r2, [r7, #12]
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	9301      	str	r3, [sp, #4]
 800b6f2:	897b      	ldrh	r3, [r7, #10]
 800b6f4:	9300      	str	r3, [sp, #0]
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	6979      	ldr	r1, [r7, #20]
 800b6fa:	f7ff fe7d 	bl	800b3f8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b6fe:	687b      	ldr	r3, [r7, #4]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	460b      	mov	r3, r1
 800b712:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d106      	bne.n	800b728 <pbuf_realloc+0x20>
 800b71a:	4b3a      	ldr	r3, [pc, #232]	; (800b804 <pbuf_realloc+0xfc>)
 800b71c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b720:	4939      	ldr	r1, [pc, #228]	; (800b808 <pbuf_realloc+0x100>)
 800b722:	483a      	ldr	r0, [pc, #232]	; (800b80c <pbuf_realloc+0x104>)
 800b724:	f009 fb1e 	bl	8014d64 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	891b      	ldrh	r3, [r3, #8]
 800b72c:	887a      	ldrh	r2, [r7, #2]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d263      	bcs.n	800b7fa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	891a      	ldrh	r2, [r3, #8]
 800b736:	887b      	ldrh	r3, [r7, #2]
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b73c:	887b      	ldrh	r3, [r7, #2]
 800b73e:	817b      	strh	r3, [r7, #10]
  q = p;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b744:	e018      	b.n	800b778 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	895b      	ldrh	r3, [r3, #10]
 800b74a:	897a      	ldrh	r2, [r7, #10]
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	891a      	ldrh	r2, [r3, #8]
 800b754:	893b      	ldrh	r3, [r7, #8]
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	b29a      	uxth	r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d106      	bne.n	800b778 <pbuf_realloc+0x70>
 800b76a:	4b26      	ldr	r3, [pc, #152]	; (800b804 <pbuf_realloc+0xfc>)
 800b76c:	f240 12af 	movw	r2, #431	; 0x1af
 800b770:	4927      	ldr	r1, [pc, #156]	; (800b810 <pbuf_realloc+0x108>)
 800b772:	4826      	ldr	r0, [pc, #152]	; (800b80c <pbuf_realloc+0x104>)
 800b774:	f009 faf6 	bl	8014d64 <iprintf>
  while (rem_len > q->len) {
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	895b      	ldrh	r3, [r3, #10]
 800b77c:	897a      	ldrh	r2, [r7, #10]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d8e1      	bhi.n	800b746 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	7b1b      	ldrb	r3, [r3, #12]
 800b786:	f003 030f 	and.w	r3, r3, #15
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d121      	bne.n	800b7d2 <pbuf_realloc+0xca>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	895b      	ldrh	r3, [r3, #10]
 800b792:	897a      	ldrh	r2, [r7, #10]
 800b794:	429a      	cmp	r2, r3
 800b796:	d01c      	beq.n	800b7d2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	7b5b      	ldrb	r3, [r3, #13]
 800b79c:	f003 0302 	and.w	r3, r3, #2
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d116      	bne.n	800b7d2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	685a      	ldr	r2, [r3, #4]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	b29a      	uxth	r2, r3
 800b7ae:	897b      	ldrh	r3, [r7, #10]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f7fe ff64 	bl	800a684 <mem_trim>
 800b7bc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d106      	bne.n	800b7d2 <pbuf_realloc+0xca>
 800b7c4:	4b0f      	ldr	r3, [pc, #60]	; (800b804 <pbuf_realloc+0xfc>)
 800b7c6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b7ca:	4912      	ldr	r1, [pc, #72]	; (800b814 <pbuf_realloc+0x10c>)
 800b7cc:	480f      	ldr	r0, [pc, #60]	; (800b80c <pbuf_realloc+0x104>)
 800b7ce:	f009 fac9 	bl	8014d64 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	897a      	ldrh	r2, [r7, #10]
 800b7d6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	895a      	ldrh	r2, [r3, #10]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d004      	beq.n	800b7f2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f000 f911 	bl	800ba14 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	601a      	str	r2, [r3, #0]
 800b7f8:	e000      	b.n	800b7fc <pbuf_realloc+0xf4>
    return;
 800b7fa:	bf00      	nop

}
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	08016748 	.word	0x08016748
 800b808:	08016860 	.word	0x08016860
 800b80c:	080167a8 	.word	0x080167a8
 800b810:	08016878 	.word	0x08016878
 800b814:	08016890 	.word	0x08016890

0800b818 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b086      	sub	sp, #24
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	4613      	mov	r3, r2
 800b824:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d106      	bne.n	800b83a <pbuf_add_header_impl+0x22>
 800b82c:	4b2b      	ldr	r3, [pc, #172]	; (800b8dc <pbuf_add_header_impl+0xc4>)
 800b82e:	f240 12df 	movw	r2, #479	; 0x1df
 800b832:	492b      	ldr	r1, [pc, #172]	; (800b8e0 <pbuf_add_header_impl+0xc8>)
 800b834:	482b      	ldr	r0, [pc, #172]	; (800b8e4 <pbuf_add_header_impl+0xcc>)
 800b836:	f009 fa95 	bl	8014d64 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d003      	beq.n	800b848 <pbuf_add_header_impl+0x30>
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b846:	d301      	bcc.n	800b84c <pbuf_add_header_impl+0x34>
    return 1;
 800b848:	2301      	movs	r3, #1
 800b84a:	e043      	b.n	800b8d4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d101      	bne.n	800b856 <pbuf_add_header_impl+0x3e>
    return 0;
 800b852:	2300      	movs	r3, #0
 800b854:	e03e      	b.n	800b8d4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	891a      	ldrh	r2, [r3, #8]
 800b85e:	8a7b      	ldrh	r3, [r7, #18]
 800b860:	4413      	add	r3, r2
 800b862:	b29b      	uxth	r3, r3
 800b864:	8a7a      	ldrh	r2, [r7, #18]
 800b866:	429a      	cmp	r2, r3
 800b868:	d901      	bls.n	800b86e <pbuf_add_header_impl+0x56>
    return 1;
 800b86a:	2301      	movs	r3, #1
 800b86c:	e032      	b.n	800b8d4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	7b1b      	ldrb	r3, [r3, #12]
 800b872:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b874:	8a3b      	ldrh	r3, [r7, #16]
 800b876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00c      	beq.n	800b898 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	685a      	ldr	r2, [r3, #4]
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	425b      	negs	r3, r3
 800b886:	4413      	add	r3, r2
 800b888:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	3310      	adds	r3, #16
 800b88e:	697a      	ldr	r2, [r7, #20]
 800b890:	429a      	cmp	r2, r3
 800b892:	d20d      	bcs.n	800b8b0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b894:	2301      	movs	r3, #1
 800b896:	e01d      	b.n	800b8d4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b898:	79fb      	ldrb	r3, [r7, #7]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d006      	beq.n	800b8ac <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	685a      	ldr	r2, [r3, #4]
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	425b      	negs	r3, r3
 800b8a6:	4413      	add	r3, r2
 800b8a8:	617b      	str	r3, [r7, #20]
 800b8aa:	e001      	b.n	800b8b0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e011      	b.n	800b8d4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	697a      	ldr	r2, [r7, #20]
 800b8b4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	895a      	ldrh	r2, [r3, #10]
 800b8ba:	8a7b      	ldrh	r3, [r7, #18]
 800b8bc:	4413      	add	r3, r2
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	891a      	ldrh	r2, [r3, #8]
 800b8c8:	8a7b      	ldrh	r3, [r7, #18]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	b29a      	uxth	r2, r3
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	811a      	strh	r2, [r3, #8]


  return 0;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3718      	adds	r7, #24
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	08016748 	.word	0x08016748
 800b8e0:	080168ac 	.word	0x080168ac
 800b8e4:	080167a8 	.word	0x080167a8

0800b8e8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	6839      	ldr	r1, [r7, #0]
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f7ff ff8e 	bl	800b818 <pbuf_add_header_impl>
 800b8fc:	4603      	mov	r3, r0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3708      	adds	r7, #8
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
	...

0800b908 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d106      	bne.n	800b926 <pbuf_remove_header+0x1e>
 800b918:	4b20      	ldr	r3, [pc, #128]	; (800b99c <pbuf_remove_header+0x94>)
 800b91a:	f240 224b 	movw	r2, #587	; 0x24b
 800b91e:	4920      	ldr	r1, [pc, #128]	; (800b9a0 <pbuf_remove_header+0x98>)
 800b920:	4820      	ldr	r0, [pc, #128]	; (800b9a4 <pbuf_remove_header+0x9c>)
 800b922:	f009 fa1f 	bl	8014d64 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d003      	beq.n	800b934 <pbuf_remove_header+0x2c>
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b932:	d301      	bcc.n	800b938 <pbuf_remove_header+0x30>
    return 1;
 800b934:	2301      	movs	r3, #1
 800b936:	e02c      	b.n	800b992 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <pbuf_remove_header+0x3a>
    return 0;
 800b93e:	2300      	movs	r3, #0
 800b940:	e027      	b.n	800b992 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	895b      	ldrh	r3, [r3, #10]
 800b94a:	89fa      	ldrh	r2, [r7, #14]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d908      	bls.n	800b962 <pbuf_remove_header+0x5a>
 800b950:	4b12      	ldr	r3, [pc, #72]	; (800b99c <pbuf_remove_header+0x94>)
 800b952:	f240 2255 	movw	r2, #597	; 0x255
 800b956:	4914      	ldr	r1, [pc, #80]	; (800b9a8 <pbuf_remove_header+0xa0>)
 800b958:	4812      	ldr	r0, [pc, #72]	; (800b9a4 <pbuf_remove_header+0x9c>)
 800b95a:	f009 fa03 	bl	8014d64 <iprintf>
 800b95e:	2301      	movs	r3, #1
 800b960:	e017      	b.n	800b992 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685a      	ldr	r2, [r3, #4]
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	441a      	add	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	895a      	ldrh	r2, [r3, #10]
 800b978:	89fb      	ldrh	r3, [r7, #14]
 800b97a:	1ad3      	subs	r3, r2, r3
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	891a      	ldrh	r2, [r3, #8]
 800b986:	89fb      	ldrh	r3, [r7, #14]
 800b988:	1ad3      	subs	r3, r2, r3
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	08016748 	.word	0x08016748
 800b9a0:	080168ac 	.word	0x080168ac
 800b9a4:	080167a8 	.word	0x080167a8
 800b9a8:	080168b8 	.word	0x080168b8

0800b9ac <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	807b      	strh	r3, [r7, #2]
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b9bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	da08      	bge.n	800b9d6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b9c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9c8:	425b      	negs	r3, r3
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f7ff ff9b 	bl	800b908 <pbuf_remove_header>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	e007      	b.n	800b9e6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b9d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9da:	787a      	ldrb	r2, [r7, #1]
 800b9dc:	4619      	mov	r1, r3
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f7ff ff1a 	bl	800b818 <pbuf_add_header_impl>
 800b9e4:	4603      	mov	r3, r0
  }
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3708      	adds	r7, #8
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b082      	sub	sp, #8
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b9fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	4619      	mov	r1, r3
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f7ff ffd2 	bl	800b9ac <pbuf_header_impl>
 800ba08:	4603      	mov	r3, r0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b088      	sub	sp, #32
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10b      	bne.n	800ba3a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d106      	bne.n	800ba36 <pbuf_free+0x22>
 800ba28:	4b3b      	ldr	r3, [pc, #236]	; (800bb18 <pbuf_free+0x104>)
 800ba2a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ba2e:	493b      	ldr	r1, [pc, #236]	; (800bb1c <pbuf_free+0x108>)
 800ba30:	483b      	ldr	r0, [pc, #236]	; (800bb20 <pbuf_free+0x10c>)
 800ba32:	f009 f997 	bl	8014d64 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	e069      	b.n	800bb0e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ba3e:	e062      	b.n	800bb06 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ba40:	f008 fe60 	bl	8014704 <sys_arch_protect>
 800ba44:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	7b9b      	ldrb	r3, [r3, #14]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d106      	bne.n	800ba5c <pbuf_free+0x48>
 800ba4e:	4b32      	ldr	r3, [pc, #200]	; (800bb18 <pbuf_free+0x104>)
 800ba50:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ba54:	4933      	ldr	r1, [pc, #204]	; (800bb24 <pbuf_free+0x110>)
 800ba56:	4832      	ldr	r0, [pc, #200]	; (800bb20 <pbuf_free+0x10c>)
 800ba58:	f009 f984 	bl	8014d64 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	7b9b      	ldrb	r3, [r3, #14]
 800ba60:	3b01      	subs	r3, #1
 800ba62:	b2da      	uxtb	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	739a      	strb	r2, [r3, #14]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	7b9b      	ldrb	r3, [r3, #14]
 800ba6c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ba6e:	69b8      	ldr	r0, [r7, #24]
 800ba70:	f008 fe56 	bl	8014720 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ba74:	7dfb      	ldrb	r3, [r7, #23]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d143      	bne.n	800bb02 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	7b1b      	ldrb	r3, [r3, #12]
 800ba84:	f003 030f 	and.w	r3, r3, #15
 800ba88:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	7b5b      	ldrb	r3, [r3, #13]
 800ba8e:	f003 0302 	and.w	r3, r3, #2
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d011      	beq.n	800baba <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d106      	bne.n	800bab0 <pbuf_free+0x9c>
 800baa2:	4b1d      	ldr	r3, [pc, #116]	; (800bb18 <pbuf_free+0x104>)
 800baa4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800baa8:	491f      	ldr	r1, [pc, #124]	; (800bb28 <pbuf_free+0x114>)
 800baaa:	481d      	ldr	r0, [pc, #116]	; (800bb20 <pbuf_free+0x10c>)
 800baac:	f009 f95a 	bl	8014d64 <iprintf>
        pc->custom_free_function(p);
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	691b      	ldr	r3, [r3, #16]
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	4798      	blx	r3
 800bab8:	e01d      	b.n	800baf6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800baba:	7bfb      	ldrb	r3, [r7, #15]
 800babc:	2b02      	cmp	r3, #2
 800babe:	d104      	bne.n	800baca <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bac0:	6879      	ldr	r1, [r7, #4]
 800bac2:	200c      	movs	r0, #12
 800bac4:	f7ff f902 	bl	800accc <memp_free>
 800bac8:	e015      	b.n	800baf6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800baca:	7bfb      	ldrb	r3, [r7, #15]
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d104      	bne.n	800bada <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bad0:	6879      	ldr	r1, [r7, #4]
 800bad2:	200b      	movs	r0, #11
 800bad4:	f7ff f8fa 	bl	800accc <memp_free>
 800bad8:	e00d      	b.n	800baf6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bada:	7bfb      	ldrb	r3, [r7, #15]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d103      	bne.n	800bae8 <pbuf_free+0xd4>
          mem_free(p);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7fe fd3f 	bl	800a564 <mem_free>
 800bae6:	e006      	b.n	800baf6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bae8:	4b0b      	ldr	r3, [pc, #44]	; (800bb18 <pbuf_free+0x104>)
 800baea:	f240 320f 	movw	r2, #783	; 0x30f
 800baee:	490f      	ldr	r1, [pc, #60]	; (800bb2c <pbuf_free+0x118>)
 800baf0:	480b      	ldr	r0, [pc, #44]	; (800bb20 <pbuf_free+0x10c>)
 800baf2:	f009 f937 	bl	8014d64 <iprintf>
        }
      }
      count++;
 800baf6:	7ffb      	ldrb	r3, [r7, #31]
 800baf8:	3301      	adds	r3, #1
 800bafa:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	607b      	str	r3, [r7, #4]
 800bb00:	e001      	b.n	800bb06 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bb02:	2300      	movs	r3, #0
 800bb04:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d199      	bne.n	800ba40 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bb0c:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3720      	adds	r7, #32
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	08016748 	.word	0x08016748
 800bb1c:	080168ac 	.word	0x080168ac
 800bb20:	080167a8 	.word	0x080167a8
 800bb24:	080168d8 	.word	0x080168d8
 800bb28:	080168f0 	.word	0x080168f0
 800bb2c:	08016914 	.word	0x08016914

0800bb30 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bb3c:	e005      	b.n	800bb4a <pbuf_clen+0x1a>
    ++len;
 800bb3e:	89fb      	ldrh	r3, [r7, #14]
 800bb40:	3301      	adds	r3, #1
 800bb42:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d1f6      	bne.n	800bb3e <pbuf_clen+0xe>
  }
  return len;
 800bb50:	89fb      	ldrh	r3, [r7, #14]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3714      	adds	r7, #20
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
	...

0800bb60 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d016      	beq.n	800bb9c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bb6e:	f008 fdc9 	bl	8014704 <sys_arch_protect>
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	7b9b      	ldrb	r3, [r3, #14]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	b2da      	uxtb	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	739a      	strb	r2, [r3, #14]
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f008 fdcd 	bl	8014720 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	7b9b      	ldrb	r3, [r3, #14]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d106      	bne.n	800bb9c <pbuf_ref+0x3c>
 800bb8e:	4b05      	ldr	r3, [pc, #20]	; (800bba4 <pbuf_ref+0x44>)
 800bb90:	f240 3242 	movw	r2, #834	; 0x342
 800bb94:	4904      	ldr	r1, [pc, #16]	; (800bba8 <pbuf_ref+0x48>)
 800bb96:	4805      	ldr	r0, [pc, #20]	; (800bbac <pbuf_ref+0x4c>)
 800bb98:	f009 f8e4 	bl	8014d64 <iprintf>
  }
}
 800bb9c:	bf00      	nop
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	08016748 	.word	0x08016748
 800bba8:	08016928 	.word	0x08016928
 800bbac:	080167a8 	.word	0x080167a8

0800bbb0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <pbuf_cat+0x16>
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d107      	bne.n	800bbd6 <pbuf_cat+0x26>
 800bbc6:	4b20      	ldr	r3, [pc, #128]	; (800bc48 <pbuf_cat+0x98>)
 800bbc8:	f240 3259 	movw	r2, #857	; 0x359
 800bbcc:	491f      	ldr	r1, [pc, #124]	; (800bc4c <pbuf_cat+0x9c>)
 800bbce:	4820      	ldr	r0, [pc, #128]	; (800bc50 <pbuf_cat+0xa0>)
 800bbd0:	f009 f8c8 	bl	8014d64 <iprintf>
 800bbd4:	e034      	b.n	800bc40 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	60fb      	str	r3, [r7, #12]
 800bbda:	e00a      	b.n	800bbf2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	891a      	ldrh	r2, [r3, #8]
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	891b      	ldrh	r3, [r3, #8]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	60fb      	str	r3, [r7, #12]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1f0      	bne.n	800bbdc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	891a      	ldrh	r2, [r3, #8]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	895b      	ldrh	r3, [r3, #10]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d006      	beq.n	800bc14 <pbuf_cat+0x64>
 800bc06:	4b10      	ldr	r3, [pc, #64]	; (800bc48 <pbuf_cat+0x98>)
 800bc08:	f240 3262 	movw	r2, #866	; 0x362
 800bc0c:	4911      	ldr	r1, [pc, #68]	; (800bc54 <pbuf_cat+0xa4>)
 800bc0e:	4810      	ldr	r0, [pc, #64]	; (800bc50 <pbuf_cat+0xa0>)
 800bc10:	f009 f8a8 	bl	8014d64 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d006      	beq.n	800bc2a <pbuf_cat+0x7a>
 800bc1c:	4b0a      	ldr	r3, [pc, #40]	; (800bc48 <pbuf_cat+0x98>)
 800bc1e:	f240 3263 	movw	r2, #867	; 0x363
 800bc22:	490d      	ldr	r1, [pc, #52]	; (800bc58 <pbuf_cat+0xa8>)
 800bc24:	480a      	ldr	r0, [pc, #40]	; (800bc50 <pbuf_cat+0xa0>)
 800bc26:	f009 f89d 	bl	8014d64 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	891a      	ldrh	r2, [r3, #8]
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	891b      	ldrh	r3, [r3, #8]
 800bc32:	4413      	add	r3, r2
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	683a      	ldr	r2, [r7, #0]
 800bc3e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	08016748 	.word	0x08016748
 800bc4c:	0801693c 	.word	0x0801693c
 800bc50:	080167a8 	.word	0x080167a8
 800bc54:	08016974 	.word	0x08016974
 800bc58:	080169a4 	.word	0x080169a4

0800bc5c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bc66:	6839      	ldr	r1, [r7, #0]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7ff ffa1 	bl	800bbb0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bc6e:	6838      	ldr	r0, [r7, #0]
 800bc70:	f7ff ff76 	bl	800bb60 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bc74:	bf00      	nop
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b086      	sub	sp, #24
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bc86:	2300      	movs	r3, #0
 800bc88:	617b      	str	r3, [r7, #20]
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d008      	beq.n	800bca6 <pbuf_copy+0x2a>
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d005      	beq.n	800bca6 <pbuf_copy+0x2a>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	891a      	ldrh	r2, [r3, #8]
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	891b      	ldrh	r3, [r3, #8]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d209      	bcs.n	800bcba <pbuf_copy+0x3e>
 800bca6:	4b57      	ldr	r3, [pc, #348]	; (800be04 <pbuf_copy+0x188>)
 800bca8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bcac:	4956      	ldr	r1, [pc, #344]	; (800be08 <pbuf_copy+0x18c>)
 800bcae:	4857      	ldr	r0, [pc, #348]	; (800be0c <pbuf_copy+0x190>)
 800bcb0:	f009 f858 	bl	8014d64 <iprintf>
 800bcb4:	f06f 030f 	mvn.w	r3, #15
 800bcb8:	e09f      	b.n	800bdfa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	895b      	ldrh	r3, [r3, #10]
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	1ad2      	subs	r2, r2, r3
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	895b      	ldrh	r3, [r3, #10]
 800bcc8:	4619      	mov	r1, r3
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	1acb      	subs	r3, r1, r3
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d306      	bcc.n	800bce0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	895b      	ldrh	r3, [r3, #10]
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	1ad3      	subs	r3, r2, r3
 800bcdc:	60fb      	str	r3, [r7, #12]
 800bcde:	e005      	b.n	800bcec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	895b      	ldrh	r3, [r3, #10]
 800bce4:	461a      	mov	r2, r3
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	1ad3      	subs	r3, r2, r3
 800bcea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	685a      	ldr	r2, [r3, #4]
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	18d0      	adds	r0, r2, r3
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	685a      	ldr	r2, [r3, #4]
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	f008 ff1f 	bl	8014b42 <memcpy>
    offset_to += len;
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	4413      	add	r3, r2
 800bd0a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bd0c:	693a      	ldr	r2, [r7, #16]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	4413      	add	r3, r2
 800bd12:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	895b      	ldrh	r3, [r3, #10]
 800bd18:	461a      	mov	r2, r3
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d906      	bls.n	800bd2e <pbuf_copy+0xb2>
 800bd20:	4b38      	ldr	r3, [pc, #224]	; (800be04 <pbuf_copy+0x188>)
 800bd22:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bd26:	493a      	ldr	r1, [pc, #232]	; (800be10 <pbuf_copy+0x194>)
 800bd28:	4838      	ldr	r0, [pc, #224]	; (800be0c <pbuf_copy+0x190>)
 800bd2a:	f009 f81b 	bl	8014d64 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	895b      	ldrh	r3, [r3, #10]
 800bd32:	461a      	mov	r2, r3
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d906      	bls.n	800bd48 <pbuf_copy+0xcc>
 800bd3a:	4b32      	ldr	r3, [pc, #200]	; (800be04 <pbuf_copy+0x188>)
 800bd3c:	f240 32da 	movw	r2, #986	; 0x3da
 800bd40:	4934      	ldr	r1, [pc, #208]	; (800be14 <pbuf_copy+0x198>)
 800bd42:	4832      	ldr	r0, [pc, #200]	; (800be0c <pbuf_copy+0x190>)
 800bd44:	f009 f80e 	bl	8014d64 <iprintf>
    if (offset_from >= p_from->len) {
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	895b      	ldrh	r3, [r3, #10]
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d304      	bcc.n	800bd5e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bd54:	2300      	movs	r3, #0
 800bd56:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	895b      	ldrh	r3, [r3, #10]
 800bd62:	461a      	mov	r2, r3
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d114      	bne.n	800bd94 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10c      	bne.n	800bd94 <pbuf_copy+0x118>
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d009      	beq.n	800bd94 <pbuf_copy+0x118>
 800bd80:	4b20      	ldr	r3, [pc, #128]	; (800be04 <pbuf_copy+0x188>)
 800bd82:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bd86:	4924      	ldr	r1, [pc, #144]	; (800be18 <pbuf_copy+0x19c>)
 800bd88:	4820      	ldr	r0, [pc, #128]	; (800be0c <pbuf_copy+0x190>)
 800bd8a:	f008 ffeb 	bl	8014d64 <iprintf>
 800bd8e:	f06f 030f 	mvn.w	r3, #15
 800bd92:	e032      	b.n	800bdfa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d013      	beq.n	800bdc2 <pbuf_copy+0x146>
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	895a      	ldrh	r2, [r3, #10]
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	891b      	ldrh	r3, [r3, #8]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d10d      	bne.n	800bdc2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d009      	beq.n	800bdc2 <pbuf_copy+0x146>
 800bdae:	4b15      	ldr	r3, [pc, #84]	; (800be04 <pbuf_copy+0x188>)
 800bdb0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bdb4:	4919      	ldr	r1, [pc, #100]	; (800be1c <pbuf_copy+0x1a0>)
 800bdb6:	4815      	ldr	r0, [pc, #84]	; (800be0c <pbuf_copy+0x190>)
 800bdb8:	f008 ffd4 	bl	8014d64 <iprintf>
 800bdbc:	f06f 0305 	mvn.w	r3, #5
 800bdc0:	e01b      	b.n	800bdfa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d013      	beq.n	800bdf0 <pbuf_copy+0x174>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	895a      	ldrh	r2, [r3, #10]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	891b      	ldrh	r3, [r3, #8]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d10d      	bne.n	800bdf0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d009      	beq.n	800bdf0 <pbuf_copy+0x174>
 800bddc:	4b09      	ldr	r3, [pc, #36]	; (800be04 <pbuf_copy+0x188>)
 800bdde:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bde2:	490e      	ldr	r1, [pc, #56]	; (800be1c <pbuf_copy+0x1a0>)
 800bde4:	4809      	ldr	r0, [pc, #36]	; (800be0c <pbuf_copy+0x190>)
 800bde6:	f008 ffbd 	bl	8014d64 <iprintf>
 800bdea:	f06f 0305 	mvn.w	r3, #5
 800bdee:	e004      	b.n	800bdfa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f47f af61 	bne.w	800bcba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3718      	adds	r7, #24
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	08016748 	.word	0x08016748
 800be08:	080169f0 	.word	0x080169f0
 800be0c:	080167a8 	.word	0x080167a8
 800be10:	08016a20 	.word	0x08016a20
 800be14:	08016a38 	.word	0x08016a38
 800be18:	08016a54 	.word	0x08016a54
 800be1c:	08016a64 	.word	0x08016a64

0800be20 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b088      	sub	sp, #32
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	4611      	mov	r1, r2
 800be2c:	461a      	mov	r2, r3
 800be2e:	460b      	mov	r3, r1
 800be30:	80fb      	strh	r3, [r7, #6]
 800be32:	4613      	mov	r3, r2
 800be34:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800be36:	2300      	movs	r3, #0
 800be38:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800be3a:	2300      	movs	r3, #0
 800be3c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d108      	bne.n	800be56 <pbuf_copy_partial+0x36>
 800be44:	4b2b      	ldr	r3, [pc, #172]	; (800bef4 <pbuf_copy_partial+0xd4>)
 800be46:	f240 420a 	movw	r2, #1034	; 0x40a
 800be4a:	492b      	ldr	r1, [pc, #172]	; (800bef8 <pbuf_copy_partial+0xd8>)
 800be4c:	482b      	ldr	r0, [pc, #172]	; (800befc <pbuf_copy_partial+0xdc>)
 800be4e:	f008 ff89 	bl	8014d64 <iprintf>
 800be52:	2300      	movs	r3, #0
 800be54:	e04a      	b.n	800beec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d108      	bne.n	800be6e <pbuf_copy_partial+0x4e>
 800be5c:	4b25      	ldr	r3, [pc, #148]	; (800bef4 <pbuf_copy_partial+0xd4>)
 800be5e:	f240 420b 	movw	r2, #1035	; 0x40b
 800be62:	4927      	ldr	r1, [pc, #156]	; (800bf00 <pbuf_copy_partial+0xe0>)
 800be64:	4825      	ldr	r0, [pc, #148]	; (800befc <pbuf_copy_partial+0xdc>)
 800be66:	f008 ff7d 	bl	8014d64 <iprintf>
 800be6a:	2300      	movs	r3, #0
 800be6c:	e03e      	b.n	800beec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	61fb      	str	r3, [r7, #28]
 800be72:	e034      	b.n	800bede <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800be74:	88bb      	ldrh	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00a      	beq.n	800be90 <pbuf_copy_partial+0x70>
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	895b      	ldrh	r3, [r3, #10]
 800be7e:	88ba      	ldrh	r2, [r7, #4]
 800be80:	429a      	cmp	r2, r3
 800be82:	d305      	bcc.n	800be90 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	895b      	ldrh	r3, [r3, #10]
 800be88:	88ba      	ldrh	r2, [r7, #4]
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	80bb      	strh	r3, [r7, #4]
 800be8e:	e023      	b.n	800bed8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	895a      	ldrh	r2, [r3, #10]
 800be94:	88bb      	ldrh	r3, [r7, #4]
 800be96:	1ad3      	subs	r3, r2, r3
 800be98:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800be9a:	8b3a      	ldrh	r2, [r7, #24]
 800be9c:	88fb      	ldrh	r3, [r7, #6]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d901      	bls.n	800bea6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bea2:	88fb      	ldrh	r3, [r7, #6]
 800bea4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bea6:	8b7b      	ldrh	r3, [r7, #26]
 800bea8:	68ba      	ldr	r2, [r7, #8]
 800beaa:	18d0      	adds	r0, r2, r3
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	685a      	ldr	r2, [r3, #4]
 800beb0:	88bb      	ldrh	r3, [r7, #4]
 800beb2:	4413      	add	r3, r2
 800beb4:	8b3a      	ldrh	r2, [r7, #24]
 800beb6:	4619      	mov	r1, r3
 800beb8:	f008 fe43 	bl	8014b42 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bebc:	8afa      	ldrh	r2, [r7, #22]
 800bebe:	8b3b      	ldrh	r3, [r7, #24]
 800bec0:	4413      	add	r3, r2
 800bec2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bec4:	8b7a      	ldrh	r2, [r7, #26]
 800bec6:	8b3b      	ldrh	r3, [r7, #24]
 800bec8:	4413      	add	r3, r2
 800beca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800becc:	88fa      	ldrh	r2, [r7, #6]
 800bece:	8b3b      	ldrh	r3, [r7, #24]
 800bed0:	1ad3      	subs	r3, r2, r3
 800bed2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bed4:	2300      	movs	r3, #0
 800bed6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	61fb      	str	r3, [r7, #28]
 800bede:	88fb      	ldrh	r3, [r7, #6]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d002      	beq.n	800beea <pbuf_copy_partial+0xca>
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d1c4      	bne.n	800be74 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800beea:	8afb      	ldrh	r3, [r7, #22]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3720      	adds	r7, #32
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	08016748 	.word	0x08016748
 800bef8:	08016a90 	.word	0x08016a90
 800befc:	080167a8 	.word	0x080167a8
 800bf00:	08016ab0 	.word	0x08016ab0

0800bf04 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	603a      	str	r2, [r7, #0]
 800bf0e:	71fb      	strb	r3, [r7, #7]
 800bf10:	460b      	mov	r3, r1
 800bf12:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	8919      	ldrh	r1, [r3, #8]
 800bf18:	88ba      	ldrh	r2, [r7, #4]
 800bf1a:	79fb      	ldrb	r3, [r7, #7]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7ff fa95 	bl	800b44c <pbuf_alloc>
 800bf22:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d101      	bne.n	800bf2e <pbuf_clone+0x2a>
    return NULL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	e011      	b.n	800bf52 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f7ff fea3 	bl	800bc7c <pbuf_copy>
 800bf36:	4603      	mov	r3, r0
 800bf38:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bf3a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d006      	beq.n	800bf50 <pbuf_clone+0x4c>
 800bf42:	4b06      	ldr	r3, [pc, #24]	; (800bf5c <pbuf_clone+0x58>)
 800bf44:	f240 5224 	movw	r2, #1316	; 0x524
 800bf48:	4905      	ldr	r1, [pc, #20]	; (800bf60 <pbuf_clone+0x5c>)
 800bf4a:	4806      	ldr	r0, [pc, #24]	; (800bf64 <pbuf_clone+0x60>)
 800bf4c:	f008 ff0a 	bl	8014d64 <iprintf>
  return q;
 800bf50:	68fb      	ldr	r3, [r7, #12]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	08016748 	.word	0x08016748
 800bf60:	08016bbc 	.word	0x08016bbc
 800bf64:	080167a8 	.word	0x080167a8

0800bf68 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bf6c:	f008 ffb6 	bl	8014edc <rand>
 800bf70:	4603      	mov	r3, r0
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bf7e:	b29a      	uxth	r2, r3
 800bf80:	4b01      	ldr	r3, [pc, #4]	; (800bf88 <tcp_init+0x20>)
 800bf82:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bf84:	bf00      	nop
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	20000024 	.word	0x20000024

0800bf8c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	7d1b      	ldrb	r3, [r3, #20]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d105      	bne.n	800bfa8 <tcp_free+0x1c>
 800bf9c:	4b06      	ldr	r3, [pc, #24]	; (800bfb8 <tcp_free+0x2c>)
 800bf9e:	22d4      	movs	r2, #212	; 0xd4
 800bfa0:	4906      	ldr	r1, [pc, #24]	; (800bfbc <tcp_free+0x30>)
 800bfa2:	4807      	ldr	r0, [pc, #28]	; (800bfc0 <tcp_free+0x34>)
 800bfa4:	f008 fede 	bl	8014d64 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bfa8:	6879      	ldr	r1, [r7, #4]
 800bfaa:	2001      	movs	r0, #1
 800bfac:	f7fe fe8e 	bl	800accc <memp_free>
}
 800bfb0:	bf00      	nop
 800bfb2:	3708      	adds	r7, #8
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	08016c48 	.word	0x08016c48
 800bfbc:	08016c78 	.word	0x08016c78
 800bfc0:	08016c8c 	.word	0x08016c8c

0800bfc4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	7d1b      	ldrb	r3, [r3, #20]
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d105      	bne.n	800bfe0 <tcp_free_listen+0x1c>
 800bfd4:	4b06      	ldr	r3, [pc, #24]	; (800bff0 <tcp_free_listen+0x2c>)
 800bfd6:	22df      	movs	r2, #223	; 0xdf
 800bfd8:	4906      	ldr	r1, [pc, #24]	; (800bff4 <tcp_free_listen+0x30>)
 800bfda:	4807      	ldr	r0, [pc, #28]	; (800bff8 <tcp_free_listen+0x34>)
 800bfdc:	f008 fec2 	bl	8014d64 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bfe0:	6879      	ldr	r1, [r7, #4]
 800bfe2:	2002      	movs	r0, #2
 800bfe4:	f7fe fe72 	bl	800accc <memp_free>
}
 800bfe8:	bf00      	nop
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	08016c48 	.word	0x08016c48
 800bff4:	08016cb4 	.word	0x08016cb4
 800bff8:	08016c8c 	.word	0x08016c8c

0800bffc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c000:	f000 fea2 	bl	800cd48 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c004:	4b07      	ldr	r3, [pc, #28]	; (800c024 <tcp_tmr+0x28>)
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	3301      	adds	r3, #1
 800c00a:	b2da      	uxtb	r2, r3
 800c00c:	4b05      	ldr	r3, [pc, #20]	; (800c024 <tcp_tmr+0x28>)
 800c00e:	701a      	strb	r2, [r3, #0]
 800c010:	4b04      	ldr	r3, [pc, #16]	; (800c024 <tcp_tmr+0x28>)
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	f003 0301 	and.w	r3, r3, #1
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d001      	beq.n	800c020 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c01c:	f000 fb54 	bl	800c6c8 <tcp_slowtmr>
  }
}
 800c020:	bf00      	nop
 800c022:	bd80      	pop	{r7, pc}
 800c024:	20017a79 	.word	0x20017a79

0800c028 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d105      	bne.n	800c044 <tcp_remove_listener+0x1c>
 800c038:	4b0d      	ldr	r3, [pc, #52]	; (800c070 <tcp_remove_listener+0x48>)
 800c03a:	22ff      	movs	r2, #255	; 0xff
 800c03c:	490d      	ldr	r1, [pc, #52]	; (800c074 <tcp_remove_listener+0x4c>)
 800c03e:	480e      	ldr	r0, [pc, #56]	; (800c078 <tcp_remove_listener+0x50>)
 800c040:	f008 fe90 	bl	8014d64 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	60fb      	str	r3, [r7, #12]
 800c048:	e00a      	b.n	800c060 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c04e:	683a      	ldr	r2, [r7, #0]
 800c050:	429a      	cmp	r2, r3
 800c052:	d102      	bne.n	800c05a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2200      	movs	r2, #0
 800c058:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	60fb      	str	r3, [r7, #12]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d1f1      	bne.n	800c04a <tcp_remove_listener+0x22>
    }
  }
}
 800c066:	bf00      	nop
 800c068:	bf00      	nop
 800c06a:	3710      	adds	r7, #16
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	08016c48 	.word	0x08016c48
 800c074:	08016cd0 	.word	0x08016cd0
 800c078:	08016c8c 	.word	0x08016c8c

0800c07c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d106      	bne.n	800c098 <tcp_listen_closed+0x1c>
 800c08a:	4b14      	ldr	r3, [pc, #80]	; (800c0dc <tcp_listen_closed+0x60>)
 800c08c:	f240 1211 	movw	r2, #273	; 0x111
 800c090:	4913      	ldr	r1, [pc, #76]	; (800c0e0 <tcp_listen_closed+0x64>)
 800c092:	4814      	ldr	r0, [pc, #80]	; (800c0e4 <tcp_listen_closed+0x68>)
 800c094:	f008 fe66 	bl	8014d64 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	7d1b      	ldrb	r3, [r3, #20]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d006      	beq.n	800c0ae <tcp_listen_closed+0x32>
 800c0a0:	4b0e      	ldr	r3, [pc, #56]	; (800c0dc <tcp_listen_closed+0x60>)
 800c0a2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c0a6:	4910      	ldr	r1, [pc, #64]	; (800c0e8 <tcp_listen_closed+0x6c>)
 800c0a8:	480e      	ldr	r0, [pc, #56]	; (800c0e4 <tcp_listen_closed+0x68>)
 800c0aa:	f008 fe5b 	bl	8014d64 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	60fb      	str	r3, [r7, #12]
 800c0b2:	e00b      	b.n	800c0cc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c0b4:	4a0d      	ldr	r2, [pc, #52]	; (800c0ec <tcp_listen_closed+0x70>)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	6879      	ldr	r1, [r7, #4]
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7ff ffb1 	bl	800c028 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	60fb      	str	r3, [r7, #12]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2b03      	cmp	r3, #3
 800c0d0:	d9f0      	bls.n	800c0b4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c0d2:	bf00      	nop
 800c0d4:	bf00      	nop
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	08016c48 	.word	0x08016c48
 800c0e0:	08016cf8 	.word	0x08016cf8
 800c0e4:	08016c8c 	.word	0x08016c8c
 800c0e8:	08016d04 	.word	0x08016d04
 800c0ec:	08018c68 	.word	0x08018c68

0800c0f0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c0f0:	b5b0      	push	{r4, r5, r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af04      	add	r7, sp, #16
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d106      	bne.n	800c110 <tcp_close_shutdown+0x20>
 800c102:	4b63      	ldr	r3, [pc, #396]	; (800c290 <tcp_close_shutdown+0x1a0>)
 800c104:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c108:	4962      	ldr	r1, [pc, #392]	; (800c294 <tcp_close_shutdown+0x1a4>)
 800c10a:	4863      	ldr	r0, [pc, #396]	; (800c298 <tcp_close_shutdown+0x1a8>)
 800c10c:	f008 fe2a 	bl	8014d64 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c110:	78fb      	ldrb	r3, [r7, #3]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d066      	beq.n	800c1e4 <tcp_close_shutdown+0xf4>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	7d1b      	ldrb	r3, [r3, #20]
 800c11a:	2b04      	cmp	r3, #4
 800c11c:	d003      	beq.n	800c126 <tcp_close_shutdown+0x36>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	7d1b      	ldrb	r3, [r3, #20]
 800c122:	2b07      	cmp	r3, #7
 800c124:	d15e      	bne.n	800c1e4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d104      	bne.n	800c138 <tcp_close_shutdown+0x48>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c132:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c136:	d055      	beq.n	800c1e4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	8b5b      	ldrh	r3, [r3, #26]
 800c13c:	f003 0310 	and.w	r3, r3, #16
 800c140:	2b00      	cmp	r3, #0
 800c142:	d106      	bne.n	800c152 <tcp_close_shutdown+0x62>
 800c144:	4b52      	ldr	r3, [pc, #328]	; (800c290 <tcp_close_shutdown+0x1a0>)
 800c146:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c14a:	4954      	ldr	r1, [pc, #336]	; (800c29c <tcp_close_shutdown+0x1ac>)
 800c14c:	4852      	ldr	r0, [pc, #328]	; (800c298 <tcp_close_shutdown+0x1a8>)
 800c14e:	f008 fe09 	bl	8014d64 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c15a:	687d      	ldr	r5, [r7, #4]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	3304      	adds	r3, #4
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	8ad2      	ldrh	r2, [r2, #22]
 800c164:	6879      	ldr	r1, [r7, #4]
 800c166:	8b09      	ldrh	r1, [r1, #24]
 800c168:	9102      	str	r1, [sp, #8]
 800c16a:	9201      	str	r2, [sp, #4]
 800c16c:	9300      	str	r3, [sp, #0]
 800c16e:	462b      	mov	r3, r5
 800c170:	4622      	mov	r2, r4
 800c172:	4601      	mov	r1, r0
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f004 fe91 	bl	8010e9c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f001 f8c6 	bl	800d30c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c180:	4b47      	ldr	r3, [pc, #284]	; (800c2a0 <tcp_close_shutdown+0x1b0>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	429a      	cmp	r2, r3
 800c188:	d105      	bne.n	800c196 <tcp_close_shutdown+0xa6>
 800c18a:	4b45      	ldr	r3, [pc, #276]	; (800c2a0 <tcp_close_shutdown+0x1b0>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	4a43      	ldr	r2, [pc, #268]	; (800c2a0 <tcp_close_shutdown+0x1b0>)
 800c192:	6013      	str	r3, [r2, #0]
 800c194:	e013      	b.n	800c1be <tcp_close_shutdown+0xce>
 800c196:	4b42      	ldr	r3, [pc, #264]	; (800c2a0 <tcp_close_shutdown+0x1b0>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	60fb      	str	r3, [r7, #12]
 800c19c:	e00c      	b.n	800c1b8 <tcp_close_shutdown+0xc8>
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d104      	bne.n	800c1b2 <tcp_close_shutdown+0xc2>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	68da      	ldr	r2, [r3, #12]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	60da      	str	r2, [r3, #12]
 800c1b0:	e005      	b.n	800c1be <tcp_close_shutdown+0xce>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	60fb      	str	r3, [r7, #12]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1ef      	bne.n	800c19e <tcp_close_shutdown+0xae>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	60da      	str	r2, [r3, #12]
 800c1c4:	4b37      	ldr	r3, [pc, #220]	; (800c2a4 <tcp_close_shutdown+0x1b4>)
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c1ca:	4b37      	ldr	r3, [pc, #220]	; (800c2a8 <tcp_close_shutdown+0x1b8>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d102      	bne.n	800c1da <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c1d4:	f003 fd5e 	bl	800fc94 <tcp_trigger_input_pcb_close>
 800c1d8:	e002      	b.n	800c1e0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7ff fed6 	bl	800bf8c <tcp_free>
      }
      return ERR_OK;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	e050      	b.n	800c286 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	7d1b      	ldrb	r3, [r3, #20]
 800c1e8:	2b02      	cmp	r3, #2
 800c1ea:	d03b      	beq.n	800c264 <tcp_close_shutdown+0x174>
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	dc44      	bgt.n	800c27a <tcp_close_shutdown+0x18a>
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d002      	beq.n	800c1fa <tcp_close_shutdown+0x10a>
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d02a      	beq.n	800c24e <tcp_close_shutdown+0x15e>
 800c1f8:	e03f      	b.n	800c27a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	8adb      	ldrh	r3, [r3, #22]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d021      	beq.n	800c246 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c202:	4b2a      	ldr	r3, [pc, #168]	; (800c2ac <tcp_close_shutdown+0x1bc>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d105      	bne.n	800c218 <tcp_close_shutdown+0x128>
 800c20c:	4b27      	ldr	r3, [pc, #156]	; (800c2ac <tcp_close_shutdown+0x1bc>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	4a26      	ldr	r2, [pc, #152]	; (800c2ac <tcp_close_shutdown+0x1bc>)
 800c214:	6013      	str	r3, [r2, #0]
 800c216:	e013      	b.n	800c240 <tcp_close_shutdown+0x150>
 800c218:	4b24      	ldr	r3, [pc, #144]	; (800c2ac <tcp_close_shutdown+0x1bc>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	60bb      	str	r3, [r7, #8]
 800c21e:	e00c      	b.n	800c23a <tcp_close_shutdown+0x14a>
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	429a      	cmp	r2, r3
 800c228:	d104      	bne.n	800c234 <tcp_close_shutdown+0x144>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	68da      	ldr	r2, [r3, #12]
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	60da      	str	r2, [r3, #12]
 800c232:	e005      	b.n	800c240 <tcp_close_shutdown+0x150>
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	60bb      	str	r3, [r7, #8]
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1ef      	bne.n	800c220 <tcp_close_shutdown+0x130>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f7ff fea0 	bl	800bf8c <tcp_free>
      break;
 800c24c:	e01a      	b.n	800c284 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7ff ff14 	bl	800c07c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c254:	6879      	ldr	r1, [r7, #4]
 800c256:	4816      	ldr	r0, [pc, #88]	; (800c2b0 <tcp_close_shutdown+0x1c0>)
 800c258:	f001 f8a8 	bl	800d3ac <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f7ff feb1 	bl	800bfc4 <tcp_free_listen>
      break;
 800c262:	e00f      	b.n	800c284 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c264:	6879      	ldr	r1, [r7, #4]
 800c266:	480e      	ldr	r0, [pc, #56]	; (800c2a0 <tcp_close_shutdown+0x1b0>)
 800c268:	f001 f8a0 	bl	800d3ac <tcp_pcb_remove>
 800c26c:	4b0d      	ldr	r3, [pc, #52]	; (800c2a4 <tcp_close_shutdown+0x1b4>)
 800c26e:	2201      	movs	r2, #1
 800c270:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f7ff fe8a 	bl	800bf8c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c278:	e004      	b.n	800c284 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 f81a 	bl	800c2b4 <tcp_close_shutdown_fin>
 800c280:	4603      	mov	r3, r0
 800c282:	e000      	b.n	800c286 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bdb0      	pop	{r4, r5, r7, pc}
 800c28e:	bf00      	nop
 800c290:	08016c48 	.word	0x08016c48
 800c294:	08016d1c 	.word	0x08016d1c
 800c298:	08016c8c 	.word	0x08016c8c
 800c29c:	08016d3c 	.word	0x08016d3c
 800c2a0:	20017a70 	.word	0x20017a70
 800c2a4:	20017a78 	.word	0x20017a78
 800c2a8:	20017ab0 	.word	0x20017ab0
 800c2ac:	20017a68 	.word	0x20017a68
 800c2b0:	20017a6c 	.word	0x20017a6c

0800c2b4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d106      	bne.n	800c2d0 <tcp_close_shutdown_fin+0x1c>
 800c2c2:	4b2e      	ldr	r3, [pc, #184]	; (800c37c <tcp_close_shutdown_fin+0xc8>)
 800c2c4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c2c8:	492d      	ldr	r1, [pc, #180]	; (800c380 <tcp_close_shutdown_fin+0xcc>)
 800c2ca:	482e      	ldr	r0, [pc, #184]	; (800c384 <tcp_close_shutdown_fin+0xd0>)
 800c2cc:	f008 fd4a 	bl	8014d64 <iprintf>

  switch (pcb->state) {
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	7d1b      	ldrb	r3, [r3, #20]
 800c2d4:	2b07      	cmp	r3, #7
 800c2d6:	d020      	beq.n	800c31a <tcp_close_shutdown_fin+0x66>
 800c2d8:	2b07      	cmp	r3, #7
 800c2da:	dc2b      	bgt.n	800c334 <tcp_close_shutdown_fin+0x80>
 800c2dc:	2b03      	cmp	r3, #3
 800c2de:	d002      	beq.n	800c2e6 <tcp_close_shutdown_fin+0x32>
 800c2e0:	2b04      	cmp	r3, #4
 800c2e2:	d00d      	beq.n	800c300 <tcp_close_shutdown_fin+0x4c>
 800c2e4:	e026      	b.n	800c334 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f003 fee6 	bl	80100b8 <tcp_send_fin>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c2f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d11f      	bne.n	800c338 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2205      	movs	r2, #5
 800c2fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c2fe:	e01b      	b.n	800c338 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f003 fed9 	bl	80100b8 <tcp_send_fin>
 800c306:	4603      	mov	r3, r0
 800c308:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c30a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d114      	bne.n	800c33c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2205      	movs	r2, #5
 800c316:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c318:	e010      	b.n	800c33c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f003 fecc 	bl	80100b8 <tcp_send_fin>
 800c320:	4603      	mov	r3, r0
 800c322:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d109      	bne.n	800c340 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2209      	movs	r2, #9
 800c330:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c332:	e005      	b.n	800c340 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	e01c      	b.n	800c372 <tcp_close_shutdown_fin+0xbe>
      break;
 800c338:	bf00      	nop
 800c33a:	e002      	b.n	800c342 <tcp_close_shutdown_fin+0x8e>
      break;
 800c33c:	bf00      	nop
 800c33e:	e000      	b.n	800c342 <tcp_close_shutdown_fin+0x8e>
      break;
 800c340:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d103      	bne.n	800c352 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f003 fff2 	bl	8010334 <tcp_output>
 800c350:	e00d      	b.n	800c36e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c35a:	d108      	bne.n	800c36e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	8b5b      	ldrh	r3, [r3, #26]
 800c360:	f043 0308 	orr.w	r3, r3, #8
 800c364:	b29a      	uxth	r2, r3
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c36a:	2300      	movs	r3, #0
 800c36c:	e001      	b.n	800c372 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c36e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c372:	4618      	mov	r0, r3
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	08016c48 	.word	0x08016c48
 800c380:	08016cf8 	.word	0x08016cf8
 800c384:	08016c8c 	.word	0x08016c8c

0800c388 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d109      	bne.n	800c3aa <tcp_close+0x22>
 800c396:	4b0f      	ldr	r3, [pc, #60]	; (800c3d4 <tcp_close+0x4c>)
 800c398:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c39c:	490e      	ldr	r1, [pc, #56]	; (800c3d8 <tcp_close+0x50>)
 800c39e:	480f      	ldr	r0, [pc, #60]	; (800c3dc <tcp_close+0x54>)
 800c3a0:	f008 fce0 	bl	8014d64 <iprintf>
 800c3a4:	f06f 030f 	mvn.w	r3, #15
 800c3a8:	e00f      	b.n	800c3ca <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	7d1b      	ldrb	r3, [r3, #20]
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d006      	beq.n	800c3c0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	8b5b      	ldrh	r3, [r3, #26]
 800c3b6:	f043 0310 	orr.w	r3, r3, #16
 800c3ba:	b29a      	uxth	r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c3c0:	2101      	movs	r1, #1
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f7ff fe94 	bl	800c0f0 <tcp_close_shutdown>
 800c3c8:	4603      	mov	r3, r0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3708      	adds	r7, #8
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	08016c48 	.word	0x08016c48
 800c3d8:	08016d58 	.word	0x08016d58
 800c3dc:	08016c8c 	.word	0x08016c8c

0800c3e0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b08e      	sub	sp, #56	; 0x38
 800c3e4:	af04      	add	r7, sp, #16
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d107      	bne.n	800c400 <tcp_abandon+0x20>
 800c3f0:	4b52      	ldr	r3, [pc, #328]	; (800c53c <tcp_abandon+0x15c>)
 800c3f2:	f240 223d 	movw	r2, #573	; 0x23d
 800c3f6:	4952      	ldr	r1, [pc, #328]	; (800c540 <tcp_abandon+0x160>)
 800c3f8:	4852      	ldr	r0, [pc, #328]	; (800c544 <tcp_abandon+0x164>)
 800c3fa:	f008 fcb3 	bl	8014d64 <iprintf>
 800c3fe:	e099      	b.n	800c534 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	7d1b      	ldrb	r3, [r3, #20]
 800c404:	2b01      	cmp	r3, #1
 800c406:	d106      	bne.n	800c416 <tcp_abandon+0x36>
 800c408:	4b4c      	ldr	r3, [pc, #304]	; (800c53c <tcp_abandon+0x15c>)
 800c40a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c40e:	494e      	ldr	r1, [pc, #312]	; (800c548 <tcp_abandon+0x168>)
 800c410:	484c      	ldr	r0, [pc, #304]	; (800c544 <tcp_abandon+0x164>)
 800c412:	f008 fca7 	bl	8014d64 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	7d1b      	ldrb	r3, [r3, #20]
 800c41a:	2b0a      	cmp	r3, #10
 800c41c:	d107      	bne.n	800c42e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c41e:	6879      	ldr	r1, [r7, #4]
 800c420:	484a      	ldr	r0, [pc, #296]	; (800c54c <tcp_abandon+0x16c>)
 800c422:	f000 ffc3 	bl	800d3ac <tcp_pcb_remove>
    tcp_free(pcb);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f7ff fdb0 	bl	800bf8c <tcp_free>
 800c42c:	e082      	b.n	800c534 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c432:	2300      	movs	r3, #0
 800c434:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c43a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c440:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c448:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	7d1b      	ldrb	r3, [r3, #20]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d126      	bne.n	800c4a6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	8adb      	ldrh	r3, [r3, #22]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d02e      	beq.n	800c4be <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c460:	4b3b      	ldr	r3, [pc, #236]	; (800c550 <tcp_abandon+0x170>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	429a      	cmp	r2, r3
 800c468:	d105      	bne.n	800c476 <tcp_abandon+0x96>
 800c46a:	4b39      	ldr	r3, [pc, #228]	; (800c550 <tcp_abandon+0x170>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	4a37      	ldr	r2, [pc, #220]	; (800c550 <tcp_abandon+0x170>)
 800c472:	6013      	str	r3, [r2, #0]
 800c474:	e013      	b.n	800c49e <tcp_abandon+0xbe>
 800c476:	4b36      	ldr	r3, [pc, #216]	; (800c550 <tcp_abandon+0x170>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	61fb      	str	r3, [r7, #28]
 800c47c:	e00c      	b.n	800c498 <tcp_abandon+0xb8>
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	429a      	cmp	r2, r3
 800c486:	d104      	bne.n	800c492 <tcp_abandon+0xb2>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	68da      	ldr	r2, [r3, #12]
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	60da      	str	r2, [r3, #12]
 800c490:	e005      	b.n	800c49e <tcp_abandon+0xbe>
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	61fb      	str	r3, [r7, #28]
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1ef      	bne.n	800c47e <tcp_abandon+0x9e>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	60da      	str	r2, [r3, #12]
 800c4a4:	e00b      	b.n	800c4be <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	8adb      	ldrh	r3, [r3, #22]
 800c4ae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c4b0:	6879      	ldr	r1, [r7, #4]
 800c4b2:	4828      	ldr	r0, [pc, #160]	; (800c554 <tcp_abandon+0x174>)
 800c4b4:	f000 ff7a 	bl	800d3ac <tcp_pcb_remove>
 800c4b8:	4b27      	ldr	r3, [pc, #156]	; (800c558 <tcp_abandon+0x178>)
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d004      	beq.n	800c4d0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f000 fd1c 	bl	800cf08 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d004      	beq.n	800c4e2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f000 fd13 	bl	800cf08 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d004      	beq.n	800c4f4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 fd0a 	bl	800cf08 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00e      	beq.n	800c518 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c4fa:	6879      	ldr	r1, [r7, #4]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	3304      	adds	r3, #4
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	8b12      	ldrh	r2, [r2, #24]
 800c504:	9202      	str	r2, [sp, #8]
 800c506:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c508:	9201      	str	r2, [sp, #4]
 800c50a:	9300      	str	r3, [sp, #0]
 800c50c:	460b      	mov	r3, r1
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	69b9      	ldr	r1, [r7, #24]
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f004 fcc2 	bl	8010e9c <tcp_rst>
    }
    last_state = pcb->state;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	7d1b      	ldrb	r3, [r3, #20]
 800c51c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f7ff fd34 	bl	800bf8c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d004      	beq.n	800c534 <tcp_abandon+0x154>
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	f06f 010c 	mvn.w	r1, #12
 800c530:	68f8      	ldr	r0, [r7, #12]
 800c532:	4798      	blx	r3
  }
}
 800c534:	3728      	adds	r7, #40	; 0x28
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	08016c48 	.word	0x08016c48
 800c540:	08016d8c 	.word	0x08016d8c
 800c544:	08016c8c 	.word	0x08016c8c
 800c548:	08016da8 	.word	0x08016da8
 800c54c:	20017a74 	.word	0x20017a74
 800c550:	20017a68 	.word	0x20017a68
 800c554:	20017a70 	.word	0x20017a70
 800c558:	20017a78 	.word	0x20017a78

0800c55c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c564:	2101      	movs	r1, #1
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f7ff ff3a 	bl	800c3e0 <tcp_abandon>
}
 800c56c:	bf00      	nop
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d106      	bne.n	800c590 <tcp_update_rcv_ann_wnd+0x1c>
 800c582:	4b25      	ldr	r3, [pc, #148]	; (800c618 <tcp_update_rcv_ann_wnd+0xa4>)
 800c584:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c588:	4924      	ldr	r1, [pc, #144]	; (800c61c <tcp_update_rcv_ann_wnd+0xa8>)
 800c58a:	4825      	ldr	r0, [pc, #148]	; (800c620 <tcp_update_rcv_ann_wnd+0xac>)
 800c58c:	f008 fbea 	bl	8014d64 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c598:	4413      	add	r3, r2
 800c59a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c5a4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c5a8:	bf28      	it	cs
 800c5aa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c5ae:	b292      	uxth	r2, r2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	1ad3      	subs	r3, r2, r3
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	db08      	blt.n	800c5cc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	e020      	b.n	800c60e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	dd03      	ble.n	800c5e2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c5e0:	e014      	b.n	800c60c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5f4:	d306      	bcc.n	800c604 <tcp_update_rcv_ann_wnd+0x90>
 800c5f6:	4b08      	ldr	r3, [pc, #32]	; (800c618 <tcp_update_rcv_ann_wnd+0xa4>)
 800c5f8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c5fc:	4909      	ldr	r1, [pc, #36]	; (800c624 <tcp_update_rcv_ann_wnd+0xb0>)
 800c5fe:	4808      	ldr	r0, [pc, #32]	; (800c620 <tcp_update_rcv_ann_wnd+0xac>)
 800c600:	f008 fbb0 	bl	8014d64 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	b29a      	uxth	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c60c:	2300      	movs	r3, #0
  }
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3710      	adds	r7, #16
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	08016c48 	.word	0x08016c48
 800c61c:	08016ea4 	.word	0x08016ea4
 800c620:	08016c8c 	.word	0x08016c8c
 800c624:	08016ec8 	.word	0x08016ec8

0800c628 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	460b      	mov	r3, r1
 800c632:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d107      	bne.n	800c64a <tcp_recved+0x22>
 800c63a:	4b1f      	ldr	r3, [pc, #124]	; (800c6b8 <tcp_recved+0x90>)
 800c63c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c640:	491e      	ldr	r1, [pc, #120]	; (800c6bc <tcp_recved+0x94>)
 800c642:	481f      	ldr	r0, [pc, #124]	; (800c6c0 <tcp_recved+0x98>)
 800c644:	f008 fb8e 	bl	8014d64 <iprintf>
 800c648:	e032      	b.n	800c6b0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	7d1b      	ldrb	r3, [r3, #20]
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d106      	bne.n	800c660 <tcp_recved+0x38>
 800c652:	4b19      	ldr	r3, [pc, #100]	; (800c6b8 <tcp_recved+0x90>)
 800c654:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c658:	491a      	ldr	r1, [pc, #104]	; (800c6c4 <tcp_recved+0x9c>)
 800c65a:	4819      	ldr	r0, [pc, #100]	; (800c6c0 <tcp_recved+0x98>)
 800c65c:	f008 fb82 	bl	8014d64 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c664:	887b      	ldrh	r3, [r7, #2]
 800c666:	4413      	add	r3, r2
 800c668:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c66a:	89fb      	ldrh	r3, [r7, #14]
 800c66c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c670:	d804      	bhi.n	800c67c <tcp_recved+0x54>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c676:	89fa      	ldrh	r2, [r7, #14]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d204      	bcs.n	800c686 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c682:	851a      	strh	r2, [r3, #40]	; 0x28
 800c684:	e002      	b.n	800c68c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	89fa      	ldrh	r2, [r7, #14]
 800c68a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7ff ff71 	bl	800c574 <tcp_update_rcv_ann_wnd>
 800c692:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c69a:	d309      	bcc.n	800c6b0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	8b5b      	ldrh	r3, [r3, #26]
 800c6a0:	f043 0302 	orr.w	r3, r3, #2
 800c6a4:	b29a      	uxth	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f003 fe42 	bl	8010334 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	08016c48 	.word	0x08016c48
 800c6bc:	08016ee4 	.word	0x08016ee4
 800c6c0:	08016c8c 	.word	0x08016c8c
 800c6c4:	08016efc 	.word	0x08016efc

0800c6c8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c6c8:	b5b0      	push	{r4, r5, r7, lr}
 800c6ca:	b090      	sub	sp, #64	; 0x40
 800c6cc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c6d4:	4b94      	ldr	r3, [pc, #592]	; (800c928 <tcp_slowtmr+0x260>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	3301      	adds	r3, #1
 800c6da:	4a93      	ldr	r2, [pc, #588]	; (800c928 <tcp_slowtmr+0x260>)
 800c6dc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c6de:	4b93      	ldr	r3, [pc, #588]	; (800c92c <tcp_slowtmr+0x264>)
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	b2da      	uxtb	r2, r3
 800c6e6:	4b91      	ldr	r3, [pc, #580]	; (800c92c <tcp_slowtmr+0x264>)
 800c6e8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c6ee:	4b90      	ldr	r3, [pc, #576]	; (800c930 <tcp_slowtmr+0x268>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c6f4:	e29d      	b.n	800cc32 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f8:	7d1b      	ldrb	r3, [r3, #20]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d106      	bne.n	800c70c <tcp_slowtmr+0x44>
 800c6fe:	4b8d      	ldr	r3, [pc, #564]	; (800c934 <tcp_slowtmr+0x26c>)
 800c700:	f240 42be 	movw	r2, #1214	; 0x4be
 800c704:	498c      	ldr	r1, [pc, #560]	; (800c938 <tcp_slowtmr+0x270>)
 800c706:	488d      	ldr	r0, [pc, #564]	; (800c93c <tcp_slowtmr+0x274>)
 800c708:	f008 fb2c 	bl	8014d64 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70e:	7d1b      	ldrb	r3, [r3, #20]
 800c710:	2b01      	cmp	r3, #1
 800c712:	d106      	bne.n	800c722 <tcp_slowtmr+0x5a>
 800c714:	4b87      	ldr	r3, [pc, #540]	; (800c934 <tcp_slowtmr+0x26c>)
 800c716:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c71a:	4989      	ldr	r1, [pc, #548]	; (800c940 <tcp_slowtmr+0x278>)
 800c71c:	4887      	ldr	r0, [pc, #540]	; (800c93c <tcp_slowtmr+0x274>)
 800c71e:	f008 fb21 	bl	8014d64 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c724:	7d1b      	ldrb	r3, [r3, #20]
 800c726:	2b0a      	cmp	r3, #10
 800c728:	d106      	bne.n	800c738 <tcp_slowtmr+0x70>
 800c72a:	4b82      	ldr	r3, [pc, #520]	; (800c934 <tcp_slowtmr+0x26c>)
 800c72c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c730:	4984      	ldr	r1, [pc, #528]	; (800c944 <tcp_slowtmr+0x27c>)
 800c732:	4882      	ldr	r0, [pc, #520]	; (800c93c <tcp_slowtmr+0x274>)
 800c734:	f008 fb16 	bl	8014d64 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73a:	7f9a      	ldrb	r2, [r3, #30]
 800c73c:	4b7b      	ldr	r3, [pc, #492]	; (800c92c <tcp_slowtmr+0x264>)
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	429a      	cmp	r2, r3
 800c742:	d105      	bne.n	800c750 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c746:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c74e:	e270      	b.n	800cc32 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c750:	4b76      	ldr	r3, [pc, #472]	; (800c92c <tcp_slowtmr+0x264>)
 800c752:	781a      	ldrb	r2, [r3, #0]
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c756:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c758:	2300      	movs	r3, #0
 800c75a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c75e:	2300      	movs	r3, #0
 800c760:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c766:	7d1b      	ldrb	r3, [r3, #20]
 800c768:	2b02      	cmp	r3, #2
 800c76a:	d10a      	bne.n	800c782 <tcp_slowtmr+0xba>
 800c76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c772:	2b05      	cmp	r3, #5
 800c774:	d905      	bls.n	800c782 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c77a:	3301      	adds	r3, #1
 800c77c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c780:	e11e      	b.n	800c9c0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c784:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c788:	2b0b      	cmp	r3, #11
 800c78a:	d905      	bls.n	800c798 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c790:	3301      	adds	r3, #1
 800c792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c796:	e113      	b.n	800c9c0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d075      	beq.n	800c88e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d006      	beq.n	800c7b8 <tcp_slowtmr+0xf0>
 800c7aa:	4b62      	ldr	r3, [pc, #392]	; (800c934 <tcp_slowtmr+0x26c>)
 800c7ac:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c7b0:	4965      	ldr	r1, [pc, #404]	; (800c948 <tcp_slowtmr+0x280>)
 800c7b2:	4862      	ldr	r0, [pc, #392]	; (800c93c <tcp_slowtmr+0x274>)
 800c7b4:	f008 fad6 	bl	8014d64 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d106      	bne.n	800c7ce <tcp_slowtmr+0x106>
 800c7c0:	4b5c      	ldr	r3, [pc, #368]	; (800c934 <tcp_slowtmr+0x26c>)
 800c7c2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c7c6:	4961      	ldr	r1, [pc, #388]	; (800c94c <tcp_slowtmr+0x284>)
 800c7c8:	485c      	ldr	r0, [pc, #368]	; (800c93c <tcp_slowtmr+0x274>)
 800c7ca:	f008 facb 	bl	8014d64 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c7d4:	2b0b      	cmp	r3, #11
 800c7d6:	d905      	bls.n	800c7e4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c7d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7dc:	3301      	adds	r3, #1
 800c7de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c7e2:	e0ed      	b.n	800c9c0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c7ea:	3b01      	subs	r3, #1
 800c7ec:	4a58      	ldr	r2, [pc, #352]	; (800c950 <tcp_slowtmr+0x288>)
 800c7ee:	5cd3      	ldrb	r3, [r2, r3]
 800c7f0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c7f8:	7c7a      	ldrb	r2, [r7, #17]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d907      	bls.n	800c80e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c800:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c804:	3301      	adds	r3, #1
 800c806:	b2da      	uxtb	r2, r3
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c810:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c814:	7c7a      	ldrb	r2, [r7, #17]
 800c816:	429a      	cmp	r2, r3
 800c818:	f200 80d2 	bhi.w	800c9c0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c81c:	2301      	movs	r3, #1
 800c81e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c822:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c826:	2b00      	cmp	r3, #0
 800c828:	d108      	bne.n	800c83c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c82a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c82c:	f004 fc2a 	bl	8011084 <tcp_zero_window_probe>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d014      	beq.n	800c860 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c836:	2300      	movs	r3, #0
 800c838:	623b      	str	r3, [r7, #32]
 800c83a:	e011      	b.n	800c860 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c842:	4619      	mov	r1, r3
 800c844:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c846:	f003 faef 	bl	800fe28 <tcp_split_unsent_seg>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d107      	bne.n	800c860 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c850:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c852:	f003 fd6f 	bl	8010334 <tcp_output>
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d101      	bne.n	800c860 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c860:	6a3b      	ldr	r3, [r7, #32]
 800c862:	2b00      	cmp	r3, #0
 800c864:	f000 80ac 	beq.w	800c9c0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c872:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c876:	2b06      	cmp	r3, #6
 800c878:	f200 80a2 	bhi.w	800c9c0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c882:	3301      	adds	r3, #1
 800c884:	b2da      	uxtb	r2, r3
 800c886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c888:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c88c:	e098      	b.n	800c9c0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c890:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c894:	2b00      	cmp	r3, #0
 800c896:	db0f      	blt.n	800c8b8 <tcp_slowtmr+0x1f0>
 800c898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c89e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d008      	beq.n	800c8b8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	b21a      	sxth	r2, r3
 800c8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ba:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	db7b      	blt.n	800c9c0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c8c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8ca:	f004 f825 	bl	8010918 <tcp_rexmit_rto_prepare>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d007      	beq.n	800c8e4 <tcp_slowtmr+0x21c>
 800c8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d171      	bne.n	800c9c0 <tcp_slowtmr+0x2f8>
 800c8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d06d      	beq.n	800c9c0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e6:	7d1b      	ldrb	r3, [r3, #20]
 800c8e8:	2b02      	cmp	r3, #2
 800c8ea:	d03a      	beq.n	800c962 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8f2:	2b0c      	cmp	r3, #12
 800c8f4:	bf28      	it	cs
 800c8f6:	230c      	movcs	r3, #12
 800c8f8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c900:	10db      	asrs	r3, r3, #3
 800c902:	b21b      	sxth	r3, r3
 800c904:	461a      	mov	r2, r3
 800c906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c908:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c90c:	4413      	add	r3, r2
 800c90e:	7efa      	ldrb	r2, [r7, #27]
 800c910:	4910      	ldr	r1, [pc, #64]	; (800c954 <tcp_slowtmr+0x28c>)
 800c912:	5c8a      	ldrb	r2, [r1, r2]
 800c914:	4093      	lsls	r3, r2
 800c916:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c91e:	4293      	cmp	r3, r2
 800c920:	dc1a      	bgt.n	800c958 <tcp_slowtmr+0x290>
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	b21a      	sxth	r2, r3
 800c926:	e019      	b.n	800c95c <tcp_slowtmr+0x294>
 800c928:	20017a64 	.word	0x20017a64
 800c92c:	20017a7a 	.word	0x20017a7a
 800c930:	20017a70 	.word	0x20017a70
 800c934:	08016c48 	.word	0x08016c48
 800c938:	08016f8c 	.word	0x08016f8c
 800c93c:	08016c8c 	.word	0x08016c8c
 800c940:	08016fb8 	.word	0x08016fb8
 800c944:	08016fe4 	.word	0x08016fe4
 800c948:	08017014 	.word	0x08017014
 800c94c:	08017048 	.word	0x08017048
 800c950:	08018c60 	.word	0x08018c60
 800c954:	08018c50 	.word	0x08018c50
 800c958:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c964:	2200      	movs	r2, #0
 800c966:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c970:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c974:	4293      	cmp	r3, r2
 800c976:	bf28      	it	cs
 800c978:	4613      	movcs	r3, r2
 800c97a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c97c:	8a7b      	ldrh	r3, [r7, #18]
 800c97e:	085b      	lsrs	r3, r3, #1
 800c980:	b29a      	uxth	r2, r3
 800c982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c984:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c990:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c992:	005b      	lsls	r3, r3, #1
 800c994:	b29b      	uxth	r3, r3
 800c996:	429a      	cmp	r2, r3
 800c998:	d206      	bcs.n	800c9a8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c99e:	005b      	lsls	r3, r3, #1
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9aa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c9ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9bc:	f004 f81c 	bl	80109f8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c2:	7d1b      	ldrb	r3, [r3, #20]
 800c9c4:	2b06      	cmp	r3, #6
 800c9c6:	d111      	bne.n	800c9ec <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ca:	8b5b      	ldrh	r3, [r3, #26]
 800c9cc:	f003 0310 	and.w	r3, r3, #16
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d00b      	beq.n	800c9ec <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c9d4:	4b9c      	ldr	r3, [pc, #624]	; (800cc48 <tcp_slowtmr+0x580>)
 800c9d6:	681a      	ldr	r2, [r3, #0]
 800c9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9da:	6a1b      	ldr	r3, [r3, #32]
 800c9dc:	1ad3      	subs	r3, r2, r3
 800c9de:	2b28      	cmp	r3, #40	; 0x28
 800c9e0:	d904      	bls.n	800c9ec <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c9e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ee:	7a5b      	ldrb	r3, [r3, #9]
 800c9f0:	f003 0308 	and.w	r3, r3, #8
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d04a      	beq.n	800ca8e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c9fc:	2b04      	cmp	r3, #4
 800c9fe:	d003      	beq.n	800ca08 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ca00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca02:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ca04:	2b07      	cmp	r3, #7
 800ca06:	d142      	bne.n	800ca8e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca08:	4b8f      	ldr	r3, [pc, #572]	; (800cc48 <tcp_slowtmr+0x580>)
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0e:	6a1b      	ldr	r3, [r3, #32]
 800ca10:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ca12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca14:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ca18:	4b8c      	ldr	r3, [pc, #560]	; (800cc4c <tcp_slowtmr+0x584>)
 800ca1a:	440b      	add	r3, r1
 800ca1c:	498c      	ldr	r1, [pc, #560]	; (800cc50 <tcp_slowtmr+0x588>)
 800ca1e:	fba1 1303 	umull	r1, r3, r1, r3
 800ca22:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d90a      	bls.n	800ca3e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ca28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ca32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca36:	3301      	adds	r3, #1
 800ca38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ca3c:	e027      	b.n	800ca8e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca3e:	4b82      	ldr	r3, [pc, #520]	; (800cc48 <tcp_slowtmr+0x580>)
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca44:	6a1b      	ldr	r3, [r3, #32]
 800ca46:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ca48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ca4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca50:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ca54:	4618      	mov	r0, r3
 800ca56:	4b7f      	ldr	r3, [pc, #508]	; (800cc54 <tcp_slowtmr+0x58c>)
 800ca58:	fb00 f303 	mul.w	r3, r0, r3
 800ca5c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ca5e:	497c      	ldr	r1, [pc, #496]	; (800cc50 <tcp_slowtmr+0x588>)
 800ca60:	fba1 1303 	umull	r1, r3, r1, r3
 800ca64:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d911      	bls.n	800ca8e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800ca6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca6c:	f004 faca 	bl	8011004 <tcp_keepalive>
 800ca70:	4603      	mov	r3, r0
 800ca72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ca76:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d107      	bne.n	800ca8e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800ca7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca80:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ca84:	3301      	adds	r3, #1
 800ca86:	b2da      	uxtb	r2, r3
 800ca88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ca8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d011      	beq.n	800caba <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ca96:	4b6c      	ldr	r3, [pc, #432]	; (800cc48 <tcp_slowtmr+0x580>)
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9c:	6a1b      	ldr	r3, [r3, #32]
 800ca9e:	1ad2      	subs	r2, r2, r3
 800caa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800caa6:	4619      	mov	r1, r3
 800caa8:	460b      	mov	r3, r1
 800caaa:	005b      	lsls	r3, r3, #1
 800caac:	440b      	add	r3, r1
 800caae:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d302      	bcc.n	800caba <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cab4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cab6:	f000 fddd 	bl	800d674 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800caba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabc:	7d1b      	ldrb	r3, [r3, #20]
 800cabe:	2b03      	cmp	r3, #3
 800cac0:	d10b      	bne.n	800cada <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cac2:	4b61      	ldr	r3, [pc, #388]	; (800cc48 <tcp_slowtmr+0x580>)
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac8:	6a1b      	ldr	r3, [r3, #32]
 800caca:	1ad3      	subs	r3, r2, r3
 800cacc:	2b28      	cmp	r3, #40	; 0x28
 800cace:	d904      	bls.n	800cada <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cad4:	3301      	adds	r3, #1
 800cad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cadc:	7d1b      	ldrb	r3, [r3, #20]
 800cade:	2b09      	cmp	r3, #9
 800cae0:	d10b      	bne.n	800cafa <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cae2:	4b59      	ldr	r3, [pc, #356]	; (800cc48 <tcp_slowtmr+0x580>)
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae8:	6a1b      	ldr	r3, [r3, #32]
 800caea:	1ad3      	subs	r3, r2, r3
 800caec:	2bf0      	cmp	r3, #240	; 0xf0
 800caee:	d904      	bls.n	800cafa <tcp_slowtmr+0x432>
        ++pcb_remove;
 800caf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caf4:	3301      	adds	r3, #1
 800caf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cafa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d060      	beq.n	800cbc4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb08:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cb0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb0c:	f000 fbfe 	bl	800d30c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d010      	beq.n	800cb38 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cb16:	4b50      	ldr	r3, [pc, #320]	; (800cc58 <tcp_slowtmr+0x590>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d106      	bne.n	800cb2e <tcp_slowtmr+0x466>
 800cb20:	4b4e      	ldr	r3, [pc, #312]	; (800cc5c <tcp_slowtmr+0x594>)
 800cb22:	f240 526d 	movw	r2, #1389	; 0x56d
 800cb26:	494e      	ldr	r1, [pc, #312]	; (800cc60 <tcp_slowtmr+0x598>)
 800cb28:	484e      	ldr	r0, [pc, #312]	; (800cc64 <tcp_slowtmr+0x59c>)
 800cb2a:	f008 f91b 	bl	8014d64 <iprintf>
        prev->next = pcb->next;
 800cb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb30:	68da      	ldr	r2, [r3, #12]
 800cb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb34:	60da      	str	r2, [r3, #12]
 800cb36:	e00f      	b.n	800cb58 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cb38:	4b47      	ldr	r3, [pc, #284]	; (800cc58 <tcp_slowtmr+0x590>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d006      	beq.n	800cb50 <tcp_slowtmr+0x488>
 800cb42:	4b46      	ldr	r3, [pc, #280]	; (800cc5c <tcp_slowtmr+0x594>)
 800cb44:	f240 5271 	movw	r2, #1393	; 0x571
 800cb48:	4947      	ldr	r1, [pc, #284]	; (800cc68 <tcp_slowtmr+0x5a0>)
 800cb4a:	4846      	ldr	r0, [pc, #280]	; (800cc64 <tcp_slowtmr+0x59c>)
 800cb4c:	f008 f90a 	bl	8014d64 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb52:	68db      	ldr	r3, [r3, #12]
 800cb54:	4a40      	ldr	r2, [pc, #256]	; (800cc58 <tcp_slowtmr+0x590>)
 800cb56:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cb58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d013      	beq.n	800cb88 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb62:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb66:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cb68:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6c:	3304      	adds	r3, #4
 800cb6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb70:	8ad2      	ldrh	r2, [r2, #22]
 800cb72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb74:	8b09      	ldrh	r1, [r1, #24]
 800cb76:	9102      	str	r1, [sp, #8]
 800cb78:	9201      	str	r2, [sp, #4]
 800cb7a:	9300      	str	r3, [sp, #0]
 800cb7c:	462b      	mov	r3, r5
 800cb7e:	4622      	mov	r2, r4
 800cb80:	4601      	mov	r1, r0
 800cb82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb84:	f004 f98a 	bl	8010e9c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8a:	691b      	ldr	r3, [r3, #16]
 800cb8c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb90:	7d1b      	ldrb	r3, [r3, #20]
 800cb92:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb96:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cb9e:	6838      	ldr	r0, [r7, #0]
 800cba0:	f7ff f9f4 	bl	800bf8c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800cba4:	4b31      	ldr	r3, [pc, #196]	; (800cc6c <tcp_slowtmr+0x5a4>)
 800cba6:	2200      	movs	r2, #0
 800cba8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d004      	beq.n	800cbba <tcp_slowtmr+0x4f2>
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f06f 010c 	mvn.w	r1, #12
 800cbb6:	68b8      	ldr	r0, [r7, #8]
 800cbb8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cbba:	4b2c      	ldr	r3, [pc, #176]	; (800cc6c <tcp_slowtmr+0x5a4>)
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d037      	beq.n	800cc32 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800cbc2:	e592      	b.n	800c6ea <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800cbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd0:	7f1b      	ldrb	r3, [r3, #28]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbdc:	7f1a      	ldrb	r2, [r3, #28]
 800cbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe0:	7f5b      	ldrb	r3, [r3, #29]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d325      	bcc.n	800cc32 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800cbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe8:	2200      	movs	r2, #0
 800cbea:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cbec:	4b1f      	ldr	r3, [pc, #124]	; (800cc6c <tcp_slowtmr+0x5a4>)
 800cbee:	2200      	movs	r2, #0
 800cbf0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00b      	beq.n	800cc14 <tcp_slowtmr+0x54c>
 800cbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc04:	6912      	ldr	r2, [r2, #16]
 800cc06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc08:	4610      	mov	r0, r2
 800cc0a:	4798      	blx	r3
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cc12:	e002      	b.n	800cc1a <tcp_slowtmr+0x552>
 800cc14:	2300      	movs	r3, #0
 800cc16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cc1a:	4b14      	ldr	r3, [pc, #80]	; (800cc6c <tcp_slowtmr+0x5a4>)
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d000      	beq.n	800cc24 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800cc22:	e562      	b.n	800c6ea <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cc24:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d102      	bne.n	800cc32 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800cc2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc2e:	f003 fb81 	bl	8010334 <tcp_output>
  while (pcb != NULL) {
 800cc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f47f ad5e 	bne.w	800c6f6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cc3e:	4b0c      	ldr	r3, [pc, #48]	; (800cc70 <tcp_slowtmr+0x5a8>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cc44:	e069      	b.n	800cd1a <tcp_slowtmr+0x652>
 800cc46:	bf00      	nop
 800cc48:	20017a64 	.word	0x20017a64
 800cc4c:	000a4cb8 	.word	0x000a4cb8
 800cc50:	10624dd3 	.word	0x10624dd3
 800cc54:	000124f8 	.word	0x000124f8
 800cc58:	20017a70 	.word	0x20017a70
 800cc5c:	08016c48 	.word	0x08016c48
 800cc60:	08017080 	.word	0x08017080
 800cc64:	08016c8c 	.word	0x08016c8c
 800cc68:	080170ac 	.word	0x080170ac
 800cc6c:	20017a78 	.word	0x20017a78
 800cc70:	20017a74 	.word	0x20017a74
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc76:	7d1b      	ldrb	r3, [r3, #20]
 800cc78:	2b0a      	cmp	r3, #10
 800cc7a:	d006      	beq.n	800cc8a <tcp_slowtmr+0x5c2>
 800cc7c:	4b2b      	ldr	r3, [pc, #172]	; (800cd2c <tcp_slowtmr+0x664>)
 800cc7e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cc82:	492b      	ldr	r1, [pc, #172]	; (800cd30 <tcp_slowtmr+0x668>)
 800cc84:	482b      	ldr	r0, [pc, #172]	; (800cd34 <tcp_slowtmr+0x66c>)
 800cc86:	f008 f86d 	bl	8014d64 <iprintf>
    pcb_remove = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cc90:	4b29      	ldr	r3, [pc, #164]	; (800cd38 <tcp_slowtmr+0x670>)
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc96:	6a1b      	ldr	r3, [r3, #32]
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	2bf0      	cmp	r3, #240	; 0xf0
 800cc9c:	d904      	bls.n	800cca8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cc9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cca2:	3301      	adds	r3, #1
 800cca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d02f      	beq.n	800cd10 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ccb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccb2:	f000 fb2b 	bl	800d30c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ccb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d010      	beq.n	800ccde <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ccbc:	4b1f      	ldr	r3, [pc, #124]	; (800cd3c <tcp_slowtmr+0x674>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d106      	bne.n	800ccd4 <tcp_slowtmr+0x60c>
 800ccc6:	4b19      	ldr	r3, [pc, #100]	; (800cd2c <tcp_slowtmr+0x664>)
 800ccc8:	f240 52af 	movw	r2, #1455	; 0x5af
 800cccc:	491c      	ldr	r1, [pc, #112]	; (800cd40 <tcp_slowtmr+0x678>)
 800ccce:	4819      	ldr	r0, [pc, #100]	; (800cd34 <tcp_slowtmr+0x66c>)
 800ccd0:	f008 f848 	bl	8014d64 <iprintf>
        prev->next = pcb->next;
 800ccd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd6:	68da      	ldr	r2, [r3, #12]
 800ccd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccda:	60da      	str	r2, [r3, #12]
 800ccdc:	e00f      	b.n	800ccfe <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ccde:	4b17      	ldr	r3, [pc, #92]	; (800cd3c <tcp_slowtmr+0x674>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d006      	beq.n	800ccf6 <tcp_slowtmr+0x62e>
 800cce8:	4b10      	ldr	r3, [pc, #64]	; (800cd2c <tcp_slowtmr+0x664>)
 800ccea:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ccee:	4915      	ldr	r1, [pc, #84]	; (800cd44 <tcp_slowtmr+0x67c>)
 800ccf0:	4810      	ldr	r0, [pc, #64]	; (800cd34 <tcp_slowtmr+0x66c>)
 800ccf2:	f008 f837 	bl	8014d64 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ccf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	4a10      	ldr	r2, [pc, #64]	; (800cd3c <tcp_slowtmr+0x674>)
 800ccfc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ccfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd00:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cd08:	69f8      	ldr	r0, [r7, #28]
 800cd0a:	f7ff f93f 	bl	800bf8c <tcp_free>
 800cd0e:	e004      	b.n	800cd1a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd12:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d1a9      	bne.n	800cc74 <tcp_slowtmr+0x5ac>
    }
  }
}
 800cd20:	bf00      	nop
 800cd22:	bf00      	nop
 800cd24:	3730      	adds	r7, #48	; 0x30
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bdb0      	pop	{r4, r5, r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	08016c48 	.word	0x08016c48
 800cd30:	080170d8 	.word	0x080170d8
 800cd34:	08016c8c 	.word	0x08016c8c
 800cd38:	20017a64 	.word	0x20017a64
 800cd3c:	20017a74 	.word	0x20017a74
 800cd40:	08017108 	.word	0x08017108
 800cd44:	08017130 	.word	0x08017130

0800cd48 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cd4e:	4b2d      	ldr	r3, [pc, #180]	; (800ce04 <tcp_fasttmr+0xbc>)
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	3301      	adds	r3, #1
 800cd54:	b2da      	uxtb	r2, r3
 800cd56:	4b2b      	ldr	r3, [pc, #172]	; (800ce04 <tcp_fasttmr+0xbc>)
 800cd58:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cd5a:	4b2b      	ldr	r3, [pc, #172]	; (800ce08 <tcp_fasttmr+0xc0>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cd60:	e048      	b.n	800cdf4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	7f9a      	ldrb	r2, [r3, #30]
 800cd66:	4b27      	ldr	r3, [pc, #156]	; (800ce04 <tcp_fasttmr+0xbc>)
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d03f      	beq.n	800cdee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cd6e:	4b25      	ldr	r3, [pc, #148]	; (800ce04 <tcp_fasttmr+0xbc>)
 800cd70:	781a      	ldrb	r2, [r3, #0]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	8b5b      	ldrh	r3, [r3, #26]
 800cd7a:	f003 0301 	and.w	r3, r3, #1
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d010      	beq.n	800cda4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	8b5b      	ldrh	r3, [r3, #26]
 800cd86:	f043 0302 	orr.w	r3, r3, #2
 800cd8a:	b29a      	uxth	r2, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f003 facf 	bl	8010334 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	8b5b      	ldrh	r3, [r3, #26]
 800cd9a:	f023 0303 	bic.w	r3, r3, #3
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	8b5b      	ldrh	r3, [r3, #26]
 800cda8:	f003 0308 	and.w	r3, r3, #8
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d009      	beq.n	800cdc4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	8b5b      	ldrh	r3, [r3, #26]
 800cdb4:	f023 0308 	bic.w	r3, r3, #8
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7ff fa78 	bl	800c2b4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00a      	beq.n	800cde8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cdd2:	4b0e      	ldr	r3, [pc, #56]	; (800ce0c <tcp_fasttmr+0xc4>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 f819 	bl	800ce10 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cdde:	4b0b      	ldr	r3, [pc, #44]	; (800ce0c <tcp_fasttmr+0xc4>)
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d000      	beq.n	800cde8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cde6:	e7b8      	b.n	800cd5a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	607b      	str	r3, [r7, #4]
 800cdec:	e002      	b.n	800cdf4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	68db      	ldr	r3, [r3, #12]
 800cdf2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d1b3      	bne.n	800cd62 <tcp_fasttmr+0x1a>
    }
  }
}
 800cdfa:	bf00      	nop
 800cdfc:	bf00      	nop
 800cdfe:	3708      	adds	r7, #8
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	20017a7a 	.word	0x20017a7a
 800ce08:	20017a70 	.word	0x20017a70
 800ce0c:	20017a78 	.word	0x20017a78

0800ce10 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ce10:	b590      	push	{r4, r7, lr}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d109      	bne.n	800ce32 <tcp_process_refused_data+0x22>
 800ce1e:	4b37      	ldr	r3, [pc, #220]	; (800cefc <tcp_process_refused_data+0xec>)
 800ce20:	f240 6209 	movw	r2, #1545	; 0x609
 800ce24:	4936      	ldr	r1, [pc, #216]	; (800cf00 <tcp_process_refused_data+0xf0>)
 800ce26:	4837      	ldr	r0, [pc, #220]	; (800cf04 <tcp_process_refused_data+0xf4>)
 800ce28:	f007 ff9c 	bl	8014d64 <iprintf>
 800ce2c:	f06f 030f 	mvn.w	r3, #15
 800ce30:	e060      	b.n	800cef4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce36:	7b5b      	ldrb	r3, [r3, #13]
 800ce38:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce3e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2200      	movs	r2, #0
 800ce44:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00b      	beq.n	800ce68 <tcp_process_refused_data+0x58>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6918      	ldr	r0, [r3, #16]
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	6879      	ldr	r1, [r7, #4]
 800ce60:	47a0      	blx	r4
 800ce62:	4603      	mov	r3, r0
 800ce64:	73fb      	strb	r3, [r7, #15]
 800ce66:	e007      	b.n	800ce78 <tcp_process_refused_data+0x68>
 800ce68:	2300      	movs	r3, #0
 800ce6a:	68ba      	ldr	r2, [r7, #8]
 800ce6c:	6879      	ldr	r1, [r7, #4]
 800ce6e:	2000      	movs	r0, #0
 800ce70:	f000 f8a4 	bl	800cfbc <tcp_recv_null>
 800ce74:	4603      	mov	r3, r0
 800ce76:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ce78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d12a      	bne.n	800ced6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ce80:	7bbb      	ldrb	r3, [r7, #14]
 800ce82:	f003 0320 	and.w	r3, r3, #32
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d033      	beq.n	800cef2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce8e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ce92:	d005      	beq.n	800cea0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce98:	3301      	adds	r3, #1
 800ce9a:	b29a      	uxth	r2, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00b      	beq.n	800cec2 <tcp_process_refused_data+0xb2>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6918      	ldr	r0, [r3, #16]
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	6879      	ldr	r1, [r7, #4]
 800ceba:	47a0      	blx	r4
 800cebc:	4603      	mov	r3, r0
 800cebe:	73fb      	strb	r3, [r7, #15]
 800cec0:	e001      	b.n	800cec6 <tcp_process_refused_data+0xb6>
 800cec2:	2300      	movs	r3, #0
 800cec4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ceca:	f113 0f0d 	cmn.w	r3, #13
 800cece:	d110      	bne.n	800cef2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ced0:	f06f 030c 	mvn.w	r3, #12
 800ced4:	e00e      	b.n	800cef4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ced6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ceda:	f113 0f0d 	cmn.w	r3, #13
 800cede:	d102      	bne.n	800cee6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cee0:	f06f 030c 	mvn.w	r3, #12
 800cee4:	e006      	b.n	800cef4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	68ba      	ldr	r2, [r7, #8]
 800ceea:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ceec:	f06f 0304 	mvn.w	r3, #4
 800cef0:	e000      	b.n	800cef4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3714      	adds	r7, #20
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd90      	pop	{r4, r7, pc}
 800cefc:	08016c48 	.word	0x08016c48
 800cf00:	08017158 	.word	0x08017158
 800cf04:	08016c8c 	.word	0x08016c8c

0800cf08 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cf10:	e007      	b.n	800cf22 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f000 f80a 	bl	800cf32 <tcp_seg_free>
    seg = next;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1f4      	bne.n	800cf12 <tcp_segs_free+0xa>
  }
}
 800cf28:	bf00      	nop
 800cf2a:	bf00      	nop
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b082      	sub	sp, #8
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d00c      	beq.n	800cf5a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d004      	beq.n	800cf52 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7fe fd61 	bl	800ba14 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cf52:	6879      	ldr	r1, [r7, #4]
 800cf54:	2003      	movs	r0, #3
 800cf56:	f7fd feb9 	bl	800accc <memp_free>
  }
}
 800cf5a:	bf00      	nop
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
	...

0800cf64 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d106      	bne.n	800cf80 <tcp_seg_copy+0x1c>
 800cf72:	4b0f      	ldr	r3, [pc, #60]	; (800cfb0 <tcp_seg_copy+0x4c>)
 800cf74:	f240 6282 	movw	r2, #1666	; 0x682
 800cf78:	490e      	ldr	r1, [pc, #56]	; (800cfb4 <tcp_seg_copy+0x50>)
 800cf7a:	480f      	ldr	r0, [pc, #60]	; (800cfb8 <tcp_seg_copy+0x54>)
 800cf7c:	f007 fef2 	bl	8014d64 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cf80:	2003      	movs	r0, #3
 800cf82:	f7fd fe2d 	bl	800abe0 <memp_malloc>
 800cf86:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d101      	bne.n	800cf92 <tcp_seg_copy+0x2e>
    return NULL;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	e00a      	b.n	800cfa8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cf92:	2210      	movs	r2, #16
 800cf94:	6879      	ldr	r1, [r7, #4]
 800cf96:	68f8      	ldr	r0, [r7, #12]
 800cf98:	f007 fdd3 	bl	8014b42 <memcpy>
  pbuf_ref(cseg->p);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7fe fddd 	bl	800bb60 <pbuf_ref>
  return cseg;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	08016c48 	.word	0x08016c48
 800cfb4:	0801719c 	.word	0x0801719c
 800cfb8:	08016c8c 	.word	0x08016c8c

0800cfbc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	607a      	str	r2, [r7, #4]
 800cfc8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d109      	bne.n	800cfe4 <tcp_recv_null+0x28>
 800cfd0:	4b12      	ldr	r3, [pc, #72]	; (800d01c <tcp_recv_null+0x60>)
 800cfd2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cfd6:	4912      	ldr	r1, [pc, #72]	; (800d020 <tcp_recv_null+0x64>)
 800cfd8:	4812      	ldr	r0, [pc, #72]	; (800d024 <tcp_recv_null+0x68>)
 800cfda:	f007 fec3 	bl	8014d64 <iprintf>
 800cfde:	f06f 030f 	mvn.w	r3, #15
 800cfe2:	e016      	b.n	800d012 <tcp_recv_null+0x56>

  if (p != NULL) {
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d009      	beq.n	800cffe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	891b      	ldrh	r3, [r3, #8]
 800cfee:	4619      	mov	r1, r3
 800cff0:	68b8      	ldr	r0, [r7, #8]
 800cff2:	f7ff fb19 	bl	800c628 <tcp_recved>
    pbuf_free(p);
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f7fe fd0c 	bl	800ba14 <pbuf_free>
 800cffc:	e008      	b.n	800d010 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cffe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d104      	bne.n	800d010 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d006:	68b8      	ldr	r0, [r7, #8]
 800d008:	f7ff f9be 	bl	800c388 <tcp_close>
 800d00c:	4603      	mov	r3, r0
 800d00e:	e000      	b.n	800d012 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d010:	2300      	movs	r3, #0
}
 800d012:	4618      	mov	r0, r3
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	08016c48 	.word	0x08016c48
 800d020:	080171b8 	.word	0x080171b8
 800d024:	08016c8c 	.word	0x08016c8c

0800d028 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b086      	sub	sp, #24
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	4603      	mov	r3, r0
 800d030:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d036:	2b00      	cmp	r3, #0
 800d038:	db01      	blt.n	800d03e <tcp_kill_prio+0x16>
 800d03a:	79fb      	ldrb	r3, [r7, #7]
 800d03c:	e000      	b.n	800d040 <tcp_kill_prio+0x18>
 800d03e:	237f      	movs	r3, #127	; 0x7f
 800d040:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d042:	7afb      	ldrb	r3, [r7, #11]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d034      	beq.n	800d0b2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d048:	7afb      	ldrb	r3, [r7, #11]
 800d04a:	3b01      	subs	r3, #1
 800d04c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d04e:	2300      	movs	r3, #0
 800d050:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d052:	2300      	movs	r3, #0
 800d054:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d056:	4b19      	ldr	r3, [pc, #100]	; (800d0bc <tcp_kill_prio+0x94>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	617b      	str	r3, [r7, #20]
 800d05c:	e01f      	b.n	800d09e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	7d5b      	ldrb	r3, [r3, #21]
 800d062:	7afa      	ldrb	r2, [r7, #11]
 800d064:	429a      	cmp	r2, r3
 800d066:	d80c      	bhi.n	800d082 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d06c:	7afa      	ldrb	r2, [r7, #11]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d112      	bne.n	800d098 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d072:	4b13      	ldr	r3, [pc, #76]	; (800d0c0 <tcp_kill_prio+0x98>)
 800d074:	681a      	ldr	r2, [r3, #0]
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	6a1b      	ldr	r3, [r3, #32]
 800d07a:	1ad3      	subs	r3, r2, r3
 800d07c:	68fa      	ldr	r2, [r7, #12]
 800d07e:	429a      	cmp	r2, r3
 800d080:	d80a      	bhi.n	800d098 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d082:	4b0f      	ldr	r3, [pc, #60]	; (800d0c0 <tcp_kill_prio+0x98>)
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	6a1b      	ldr	r3, [r3, #32]
 800d08a:	1ad3      	subs	r3, r2, r3
 800d08c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	7d5b      	ldrb	r3, [r3, #21]
 800d096:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	68db      	ldr	r3, [r3, #12]
 800d09c:	617b      	str	r3, [r7, #20]
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d1dc      	bne.n	800d05e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d004      	beq.n	800d0b4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d0aa:	6938      	ldr	r0, [r7, #16]
 800d0ac:	f7ff fa56 	bl	800c55c <tcp_abort>
 800d0b0:	e000      	b.n	800d0b4 <tcp_kill_prio+0x8c>
    return;
 800d0b2:	bf00      	nop
  }
}
 800d0b4:	3718      	adds	r7, #24
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	20017a70 	.word	0x20017a70
 800d0c0:	20017a64 	.word	0x20017a64

0800d0c4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d0ce:	79fb      	ldrb	r3, [r7, #7]
 800d0d0:	2b08      	cmp	r3, #8
 800d0d2:	d009      	beq.n	800d0e8 <tcp_kill_state+0x24>
 800d0d4:	79fb      	ldrb	r3, [r7, #7]
 800d0d6:	2b09      	cmp	r3, #9
 800d0d8:	d006      	beq.n	800d0e8 <tcp_kill_state+0x24>
 800d0da:	4b1a      	ldr	r3, [pc, #104]	; (800d144 <tcp_kill_state+0x80>)
 800d0dc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d0e0:	4919      	ldr	r1, [pc, #100]	; (800d148 <tcp_kill_state+0x84>)
 800d0e2:	481a      	ldr	r0, [pc, #104]	; (800d14c <tcp_kill_state+0x88>)
 800d0e4:	f007 fe3e 	bl	8014d64 <iprintf>

  inactivity = 0;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0f0:	4b17      	ldr	r3, [pc, #92]	; (800d150 <tcp_kill_state+0x8c>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	617b      	str	r3, [r7, #20]
 800d0f6:	e017      	b.n	800d128 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	7d1b      	ldrb	r3, [r3, #20]
 800d0fc:	79fa      	ldrb	r2, [r7, #7]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d10f      	bne.n	800d122 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d102:	4b14      	ldr	r3, [pc, #80]	; (800d154 <tcp_kill_state+0x90>)
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	6a1b      	ldr	r3, [r3, #32]
 800d10a:	1ad3      	subs	r3, r2, r3
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	429a      	cmp	r2, r3
 800d110:	d807      	bhi.n	800d122 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d112:	4b10      	ldr	r3, [pc, #64]	; (800d154 <tcp_kill_state+0x90>)
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	6a1b      	ldr	r3, [r3, #32]
 800d11a:	1ad3      	subs	r3, r2, r3
 800d11c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	68db      	ldr	r3, [r3, #12]
 800d126:	617b      	str	r3, [r7, #20]
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1e4      	bne.n	800d0f8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d003      	beq.n	800d13c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d134:	2100      	movs	r1, #0
 800d136:	6938      	ldr	r0, [r7, #16]
 800d138:	f7ff f952 	bl	800c3e0 <tcp_abandon>
  }
}
 800d13c:	bf00      	nop
 800d13e:	3718      	adds	r7, #24
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	08016c48 	.word	0x08016c48
 800d148:	080171d4 	.word	0x080171d4
 800d14c:	08016c8c 	.word	0x08016c8c
 800d150:	20017a70 	.word	0x20017a70
 800d154:	20017a64 	.word	0x20017a64

0800d158 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d15e:	2300      	movs	r3, #0
 800d160:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d162:	2300      	movs	r3, #0
 800d164:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d166:	4b12      	ldr	r3, [pc, #72]	; (800d1b0 <tcp_kill_timewait+0x58>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	60fb      	str	r3, [r7, #12]
 800d16c:	e012      	b.n	800d194 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d16e:	4b11      	ldr	r3, [pc, #68]	; (800d1b4 <tcp_kill_timewait+0x5c>)
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	6a1b      	ldr	r3, [r3, #32]
 800d176:	1ad3      	subs	r3, r2, r3
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d807      	bhi.n	800d18e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d17e:	4b0d      	ldr	r3, [pc, #52]	; (800d1b4 <tcp_kill_timewait+0x5c>)
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6a1b      	ldr	r3, [r3, #32]
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	68db      	ldr	r3, [r3, #12]
 800d192:	60fb      	str	r3, [r7, #12]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d1e9      	bne.n	800d16e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d002      	beq.n	800d1a6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d1a0:	68b8      	ldr	r0, [r7, #8]
 800d1a2:	f7ff f9db 	bl	800c55c <tcp_abort>
  }
}
 800d1a6:	bf00      	nop
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	20017a74 	.word	0x20017a74
 800d1b4:	20017a64 	.word	0x20017a64

0800d1b8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d1be:	4b10      	ldr	r3, [pc, #64]	; (800d200 <tcp_handle_closepend+0x48>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d1c4:	e014      	b.n	800d1f0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	68db      	ldr	r3, [r3, #12]
 800d1ca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	8b5b      	ldrh	r3, [r3, #26]
 800d1d0:	f003 0308 	and.w	r3, r3, #8
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d009      	beq.n	800d1ec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	8b5b      	ldrh	r3, [r3, #26]
 800d1dc:	f023 0308 	bic.w	r3, r3, #8
 800d1e0:	b29a      	uxth	r2, r3
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7ff f864 	bl	800c2b4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1e7      	bne.n	800d1c6 <tcp_handle_closepend+0xe>
  }
}
 800d1f6:	bf00      	nop
 800d1f8:	bf00      	nop
 800d1fa:	3708      	adds	r7, #8
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	20017a70 	.word	0x20017a70

0800d204 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	4603      	mov	r3, r0
 800d20c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d20e:	2001      	movs	r0, #1
 800d210:	f7fd fce6 	bl	800abe0 <memp_malloc>
 800d214:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d126      	bne.n	800d26a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d21c:	f7ff ffcc 	bl	800d1b8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d220:	f7ff ff9a 	bl	800d158 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d224:	2001      	movs	r0, #1
 800d226:	f7fd fcdb 	bl	800abe0 <memp_malloc>
 800d22a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d11b      	bne.n	800d26a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d232:	2009      	movs	r0, #9
 800d234:	f7ff ff46 	bl	800d0c4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d238:	2001      	movs	r0, #1
 800d23a:	f7fd fcd1 	bl	800abe0 <memp_malloc>
 800d23e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d111      	bne.n	800d26a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d246:	2008      	movs	r0, #8
 800d248:	f7ff ff3c 	bl	800d0c4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d24c:	2001      	movs	r0, #1
 800d24e:	f7fd fcc7 	bl	800abe0 <memp_malloc>
 800d252:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d107      	bne.n	800d26a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d25a:	79fb      	ldrb	r3, [r7, #7]
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7ff fee3 	bl	800d028 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d262:	2001      	movs	r0, #1
 800d264:	f7fd fcbc 	bl	800abe0 <memp_malloc>
 800d268:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d03f      	beq.n	800d2f0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d270:	229c      	movs	r2, #156	; 0x9c
 800d272:	2100      	movs	r1, #0
 800d274:	68f8      	ldr	r0, [r7, #12]
 800d276:	f007 fc8c 	bl	8014b92 <memset>
    pcb->prio = prio;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	79fa      	ldrb	r2, [r7, #7]
 800d27e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d286:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d290:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	22ff      	movs	r2, #255	; 0xff
 800d29e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d2a6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2206      	movs	r2, #6
 800d2ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2206      	movs	r2, #6
 800d2b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2bc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d2c6:	4b0d      	ldr	r3, [pc, #52]	; (800d2fc <tcp_alloc+0xf8>)
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d2ce:	4b0c      	ldr	r3, [pc, #48]	; (800d300 <tcp_alloc+0xfc>)
 800d2d0:	781a      	ldrb	r2, [r3, #0]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d2dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	4a08      	ldr	r2, [pc, #32]	; (800d304 <tcp_alloc+0x100>)
 800d2e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	4a07      	ldr	r2, [pc, #28]	; (800d308 <tcp_alloc+0x104>)
 800d2ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	20017a64 	.word	0x20017a64
 800d300:	20017a7a 	.word	0x20017a7a
 800d304:	0800cfbd 	.word	0x0800cfbd
 800d308:	006ddd00 	.word	0x006ddd00

0800d30c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d107      	bne.n	800d32a <tcp_pcb_purge+0x1e>
 800d31a:	4b21      	ldr	r3, [pc, #132]	; (800d3a0 <tcp_pcb_purge+0x94>)
 800d31c:	f640 0251 	movw	r2, #2129	; 0x851
 800d320:	4920      	ldr	r1, [pc, #128]	; (800d3a4 <tcp_pcb_purge+0x98>)
 800d322:	4821      	ldr	r0, [pc, #132]	; (800d3a8 <tcp_pcb_purge+0x9c>)
 800d324:	f007 fd1e 	bl	8014d64 <iprintf>
 800d328:	e037      	b.n	800d39a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	7d1b      	ldrb	r3, [r3, #20]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d033      	beq.n	800d39a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d336:	2b0a      	cmp	r3, #10
 800d338:	d02f      	beq.n	800d39a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d02b      	beq.n	800d39a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d346:	2b00      	cmp	r3, #0
 800d348:	d007      	beq.n	800d35a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d34e:	4618      	mov	r0, r3
 800d350:	f7fe fb60 	bl	800ba14 <pbuf_free>
      pcb->refused_data = NULL;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d002      	beq.n	800d368 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 f986 	bl	800d674 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d36e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d374:	4618      	mov	r0, r3
 800d376:	f7ff fdc7 	bl	800cf08 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d37e:	4618      	mov	r0, r3
 800d380:	f7ff fdc2 	bl	800cf08 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	66da      	str	r2, [r3, #108]	; 0x6c
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2200      	movs	r2, #0
 800d396:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d39a:	3708      	adds	r7, #8
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	08016c48 	.word	0x08016c48
 800d3a4:	08017294 	.word	0x08017294
 800d3a8:	08016c8c 	.word	0x08016c8c

0800d3ac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d106      	bne.n	800d3ca <tcp_pcb_remove+0x1e>
 800d3bc:	4b3e      	ldr	r3, [pc, #248]	; (800d4b8 <tcp_pcb_remove+0x10c>)
 800d3be:	f640 0283 	movw	r2, #2179	; 0x883
 800d3c2:	493e      	ldr	r1, [pc, #248]	; (800d4bc <tcp_pcb_remove+0x110>)
 800d3c4:	483e      	ldr	r0, [pc, #248]	; (800d4c0 <tcp_pcb_remove+0x114>)
 800d3c6:	f007 fccd 	bl	8014d64 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d106      	bne.n	800d3de <tcp_pcb_remove+0x32>
 800d3d0:	4b39      	ldr	r3, [pc, #228]	; (800d4b8 <tcp_pcb_remove+0x10c>)
 800d3d2:	f640 0284 	movw	r2, #2180	; 0x884
 800d3d6:	493b      	ldr	r1, [pc, #236]	; (800d4c4 <tcp_pcb_remove+0x118>)
 800d3d8:	4839      	ldr	r0, [pc, #228]	; (800d4c0 <tcp_pcb_remove+0x114>)
 800d3da:	f007 fcc3 	bl	8014d64 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	683a      	ldr	r2, [r7, #0]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d105      	bne.n	800d3f4 <tcp_pcb_remove+0x48>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	68da      	ldr	r2, [r3, #12]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	601a      	str	r2, [r3, #0]
 800d3f2:	e013      	b.n	800d41c <tcp_pcb_remove+0x70>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	60fb      	str	r3, [r7, #12]
 800d3fa:	e00c      	b.n	800d416 <tcp_pcb_remove+0x6a>
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	68db      	ldr	r3, [r3, #12]
 800d400:	683a      	ldr	r2, [r7, #0]
 800d402:	429a      	cmp	r2, r3
 800d404:	d104      	bne.n	800d410 <tcp_pcb_remove+0x64>
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	68da      	ldr	r2, [r3, #12]
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	60da      	str	r2, [r3, #12]
 800d40e:	e005      	b.n	800d41c <tcp_pcb_remove+0x70>
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	60fb      	str	r3, [r7, #12]
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1ef      	bne.n	800d3fc <tcp_pcb_remove+0x50>
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	2200      	movs	r2, #0
 800d420:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d422:	6838      	ldr	r0, [r7, #0]
 800d424:	f7ff ff72 	bl	800d30c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	7d1b      	ldrb	r3, [r3, #20]
 800d42c:	2b0a      	cmp	r3, #10
 800d42e:	d013      	beq.n	800d458 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d434:	2b01      	cmp	r3, #1
 800d436:	d00f      	beq.n	800d458 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	8b5b      	ldrh	r3, [r3, #26]
 800d43c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d440:	2b00      	cmp	r3, #0
 800d442:	d009      	beq.n	800d458 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	8b5b      	ldrh	r3, [r3, #26]
 800d448:	f043 0302 	orr.w	r3, r3, #2
 800d44c:	b29a      	uxth	r2, r3
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d452:	6838      	ldr	r0, [r7, #0]
 800d454:	f002 ff6e 	bl	8010334 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	7d1b      	ldrb	r3, [r3, #20]
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	d020      	beq.n	800d4a2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d464:	2b00      	cmp	r3, #0
 800d466:	d006      	beq.n	800d476 <tcp_pcb_remove+0xca>
 800d468:	4b13      	ldr	r3, [pc, #76]	; (800d4b8 <tcp_pcb_remove+0x10c>)
 800d46a:	f640 0293 	movw	r2, #2195	; 0x893
 800d46e:	4916      	ldr	r1, [pc, #88]	; (800d4c8 <tcp_pcb_remove+0x11c>)
 800d470:	4813      	ldr	r0, [pc, #76]	; (800d4c0 <tcp_pcb_remove+0x114>)
 800d472:	f007 fc77 	bl	8014d64 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d006      	beq.n	800d48c <tcp_pcb_remove+0xe0>
 800d47e:	4b0e      	ldr	r3, [pc, #56]	; (800d4b8 <tcp_pcb_remove+0x10c>)
 800d480:	f640 0294 	movw	r2, #2196	; 0x894
 800d484:	4911      	ldr	r1, [pc, #68]	; (800d4cc <tcp_pcb_remove+0x120>)
 800d486:	480e      	ldr	r0, [pc, #56]	; (800d4c0 <tcp_pcb_remove+0x114>)
 800d488:	f007 fc6c 	bl	8014d64 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d490:	2b00      	cmp	r3, #0
 800d492:	d006      	beq.n	800d4a2 <tcp_pcb_remove+0xf6>
 800d494:	4b08      	ldr	r3, [pc, #32]	; (800d4b8 <tcp_pcb_remove+0x10c>)
 800d496:	f640 0296 	movw	r2, #2198	; 0x896
 800d49a:	490d      	ldr	r1, [pc, #52]	; (800d4d0 <tcp_pcb_remove+0x124>)
 800d49c:	4808      	ldr	r0, [pc, #32]	; (800d4c0 <tcp_pcb_remove+0x114>)
 800d49e:	f007 fc61 	bl	8014d64 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d4ae:	bf00      	nop
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	08016c48 	.word	0x08016c48
 800d4bc:	080172b0 	.word	0x080172b0
 800d4c0:	08016c8c 	.word	0x08016c8c
 800d4c4:	080172cc 	.word	0x080172cc
 800d4c8:	080172ec 	.word	0x080172ec
 800d4cc:	08017304 	.word	0x08017304
 800d4d0:	08017320 	.word	0x08017320

0800d4d4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d106      	bne.n	800d4f0 <tcp_next_iss+0x1c>
 800d4e2:	4b0a      	ldr	r3, [pc, #40]	; (800d50c <tcp_next_iss+0x38>)
 800d4e4:	f640 02af 	movw	r2, #2223	; 0x8af
 800d4e8:	4909      	ldr	r1, [pc, #36]	; (800d510 <tcp_next_iss+0x3c>)
 800d4ea:	480a      	ldr	r0, [pc, #40]	; (800d514 <tcp_next_iss+0x40>)
 800d4ec:	f007 fc3a 	bl	8014d64 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d4f0:	4b09      	ldr	r3, [pc, #36]	; (800d518 <tcp_next_iss+0x44>)
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	4b09      	ldr	r3, [pc, #36]	; (800d51c <tcp_next_iss+0x48>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	4a07      	ldr	r2, [pc, #28]	; (800d518 <tcp_next_iss+0x44>)
 800d4fc:	6013      	str	r3, [r2, #0]
  return iss;
 800d4fe:	4b06      	ldr	r3, [pc, #24]	; (800d518 <tcp_next_iss+0x44>)
 800d500:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d502:	4618      	mov	r0, r3
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	08016c48 	.word	0x08016c48
 800d510:	08017338 	.word	0x08017338
 800d514:	08016c8c 	.word	0x08016c8c
 800d518:	20000028 	.word	0x20000028
 800d51c:	20017a64 	.word	0x20017a64

0800d520 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b086      	sub	sp, #24
 800d524:	af00      	add	r7, sp, #0
 800d526:	4603      	mov	r3, r0
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
 800d52c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d106      	bne.n	800d542 <tcp_eff_send_mss_netif+0x22>
 800d534:	4b14      	ldr	r3, [pc, #80]	; (800d588 <tcp_eff_send_mss_netif+0x68>)
 800d536:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d53a:	4914      	ldr	r1, [pc, #80]	; (800d58c <tcp_eff_send_mss_netif+0x6c>)
 800d53c:	4814      	ldr	r0, [pc, #80]	; (800d590 <tcp_eff_send_mss_netif+0x70>)
 800d53e:	f007 fc11 	bl	8014d64 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d101      	bne.n	800d54c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d548:	89fb      	ldrh	r3, [r7, #14]
 800d54a:	e019      	b.n	800d580 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d550:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d552:	8afb      	ldrh	r3, [r7, #22]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d012      	beq.n	800d57e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d558:	2328      	movs	r3, #40	; 0x28
 800d55a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d55c:	8afa      	ldrh	r2, [r7, #22]
 800d55e:	8abb      	ldrh	r3, [r7, #20]
 800d560:	429a      	cmp	r2, r3
 800d562:	d904      	bls.n	800d56e <tcp_eff_send_mss_netif+0x4e>
 800d564:	8afa      	ldrh	r2, [r7, #22]
 800d566:	8abb      	ldrh	r3, [r7, #20]
 800d568:	1ad3      	subs	r3, r2, r3
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	e000      	b.n	800d570 <tcp_eff_send_mss_netif+0x50>
 800d56e:	2300      	movs	r3, #0
 800d570:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d572:	8a7a      	ldrh	r2, [r7, #18]
 800d574:	89fb      	ldrh	r3, [r7, #14]
 800d576:	4293      	cmp	r3, r2
 800d578:	bf28      	it	cs
 800d57a:	4613      	movcs	r3, r2
 800d57c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d57e:	89fb      	ldrh	r3, [r7, #14]
}
 800d580:	4618      	mov	r0, r3
 800d582:	3718      	adds	r7, #24
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	08016c48 	.word	0x08016c48
 800d58c:	08017354 	.word	0x08017354
 800d590:	08016c8c 	.word	0x08016c8c

0800d594 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d119      	bne.n	800d5dc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d5a8:	4b10      	ldr	r3, [pc, #64]	; (800d5ec <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d5aa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d5ae:	4910      	ldr	r1, [pc, #64]	; (800d5f0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d5b0:	4810      	ldr	r0, [pc, #64]	; (800d5f4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d5b2:	f007 fbd7 	bl	8014d64 <iprintf>

  while (pcb != NULL) {
 800d5b6:	e011      	b.n	800d5dc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681a      	ldr	r2, [r3, #0]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d108      	bne.n	800d5d6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d5ca:	68f8      	ldr	r0, [r7, #12]
 800d5cc:	f7fe ffc6 	bl	800c55c <tcp_abort>
      pcb = next;
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	60fb      	str	r3, [r7, #12]
 800d5d4:	e002      	b.n	800d5dc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d1ea      	bne.n	800d5b8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d5e2:	bf00      	nop
 800d5e4:	bf00      	nop
 800d5e6:	3710      	adds	r7, #16
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	08016c48 	.word	0x08016c48
 800d5f0:	0801737c 	.word	0x0801737c
 800d5f4:	08016c8c 	.word	0x08016c8c

0800d5f8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d02a      	beq.n	800d65e <tcp_netif_ip_addr_changed+0x66>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d026      	beq.n	800d65e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d610:	4b15      	ldr	r3, [pc, #84]	; (800d668 <tcp_netif_ip_addr_changed+0x70>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4619      	mov	r1, r3
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7ff ffbc 	bl	800d594 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d61c:	4b13      	ldr	r3, [pc, #76]	; (800d66c <tcp_netif_ip_addr_changed+0x74>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4619      	mov	r1, r3
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f7ff ffb6 	bl	800d594 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d017      	beq.n	800d65e <tcp_netif_ip_addr_changed+0x66>
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d013      	beq.n	800d65e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d636:	4b0e      	ldr	r3, [pc, #56]	; (800d670 <tcp_netif_ip_addr_changed+0x78>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	60fb      	str	r3, [r7, #12]
 800d63c:	e00c      	b.n	800d658 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	429a      	cmp	r2, r3
 800d648:	d103      	bne.n	800d652 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	60fb      	str	r3, [r7, #12]
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d1ef      	bne.n	800d63e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d65e:	bf00      	nop
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	20017a70 	.word	0x20017a70
 800d66c:	20017a68 	.word	0x20017a68
 800d670:	20017a6c 	.word	0x20017a6c

0800d674 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d680:	2b00      	cmp	r3, #0
 800d682:	d007      	beq.n	800d694 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d688:	4618      	mov	r0, r3
 800d68a:	f7ff fc3d 	bl	800cf08 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2200      	movs	r2, #0
 800d692:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d694:	bf00      	nop
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d69c:	b590      	push	{r4, r7, lr}
 800d69e:	b08d      	sub	sp, #52	; 0x34
 800d6a0:	af04      	add	r7, sp, #16
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d105      	bne.n	800d6b8 <tcp_input+0x1c>
 800d6ac:	4b9b      	ldr	r3, [pc, #620]	; (800d91c <tcp_input+0x280>)
 800d6ae:	2283      	movs	r2, #131	; 0x83
 800d6b0:	499b      	ldr	r1, [pc, #620]	; (800d920 <tcp_input+0x284>)
 800d6b2:	489c      	ldr	r0, [pc, #624]	; (800d924 <tcp_input+0x288>)
 800d6b4:	f007 fb56 	bl	8014d64 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	4a9a      	ldr	r2, [pc, #616]	; (800d928 <tcp_input+0x28c>)
 800d6be:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	895b      	ldrh	r3, [r3, #10]
 800d6c4:	2b13      	cmp	r3, #19
 800d6c6:	f240 83d1 	bls.w	800de6c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d6ca:	4b98      	ldr	r3, [pc, #608]	; (800d92c <tcp_input+0x290>)
 800d6cc:	695b      	ldr	r3, [r3, #20]
 800d6ce:	4a97      	ldr	r2, [pc, #604]	; (800d92c <tcp_input+0x290>)
 800d6d0:	6812      	ldr	r2, [r2, #0]
 800d6d2:	4611      	mov	r1, r2
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f005 ff37 	bl	8013548 <ip4_addr_isbroadcast_u32>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	f040 83c7 	bne.w	800de70 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d6e2:	4b92      	ldr	r3, [pc, #584]	; (800d92c <tcp_input+0x290>)
 800d6e4:	695b      	ldr	r3, [r3, #20]
 800d6e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d6ea:	2be0      	cmp	r3, #224	; 0xe0
 800d6ec:	f000 83c0 	beq.w	800de70 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d6f0:	4b8d      	ldr	r3, [pc, #564]	; (800d928 <tcp_input+0x28c>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	899b      	ldrh	r3, [r3, #12]
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fc fd99 	bl	800a230 <lwip_htons>
 800d6fe:	4603      	mov	r3, r0
 800d700:	0b1b      	lsrs	r3, r3, #12
 800d702:	b29b      	uxth	r3, r3
 800d704:	b2db      	uxtb	r3, r3
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d70a:	7cbb      	ldrb	r3, [r7, #18]
 800d70c:	2b13      	cmp	r3, #19
 800d70e:	f240 83b1 	bls.w	800de74 <tcp_input+0x7d8>
 800d712:	7cbb      	ldrb	r3, [r7, #18]
 800d714:	b29a      	uxth	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	891b      	ldrh	r3, [r3, #8]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	f200 83aa 	bhi.w	800de74 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d720:	7cbb      	ldrb	r3, [r7, #18]
 800d722:	b29b      	uxth	r3, r3
 800d724:	3b14      	subs	r3, #20
 800d726:	b29a      	uxth	r2, r3
 800d728:	4b81      	ldr	r3, [pc, #516]	; (800d930 <tcp_input+0x294>)
 800d72a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d72c:	4b81      	ldr	r3, [pc, #516]	; (800d934 <tcp_input+0x298>)
 800d72e:	2200      	movs	r2, #0
 800d730:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	895a      	ldrh	r2, [r3, #10]
 800d736:	7cbb      	ldrb	r3, [r7, #18]
 800d738:	b29b      	uxth	r3, r3
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d309      	bcc.n	800d752 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d73e:	4b7c      	ldr	r3, [pc, #496]	; (800d930 <tcp_input+0x294>)
 800d740:	881a      	ldrh	r2, [r3, #0]
 800d742:	4b7d      	ldr	r3, [pc, #500]	; (800d938 <tcp_input+0x29c>)
 800d744:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d746:	7cbb      	ldrb	r3, [r7, #18]
 800d748:	4619      	mov	r1, r3
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f7fe f8dc 	bl	800b908 <pbuf_remove_header>
 800d750:	e04e      	b.n	800d7f0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d105      	bne.n	800d766 <tcp_input+0xca>
 800d75a:	4b70      	ldr	r3, [pc, #448]	; (800d91c <tcp_input+0x280>)
 800d75c:	22c2      	movs	r2, #194	; 0xc2
 800d75e:	4977      	ldr	r1, [pc, #476]	; (800d93c <tcp_input+0x2a0>)
 800d760:	4870      	ldr	r0, [pc, #448]	; (800d924 <tcp_input+0x288>)
 800d762:	f007 faff 	bl	8014d64 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d766:	2114      	movs	r1, #20
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f7fe f8cd 	bl	800b908 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	895a      	ldrh	r2, [r3, #10]
 800d772:	4b71      	ldr	r3, [pc, #452]	; (800d938 <tcp_input+0x29c>)
 800d774:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d776:	4b6e      	ldr	r3, [pc, #440]	; (800d930 <tcp_input+0x294>)
 800d778:	881a      	ldrh	r2, [r3, #0]
 800d77a:	4b6f      	ldr	r3, [pc, #444]	; (800d938 <tcp_input+0x29c>)
 800d77c:	881b      	ldrh	r3, [r3, #0]
 800d77e:	1ad3      	subs	r3, r2, r3
 800d780:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d782:	4b6d      	ldr	r3, [pc, #436]	; (800d938 <tcp_input+0x29c>)
 800d784:	881b      	ldrh	r3, [r3, #0]
 800d786:	4619      	mov	r1, r3
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f7fe f8bd 	bl	800b908 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	895b      	ldrh	r3, [r3, #10]
 800d794:	8a3a      	ldrh	r2, [r7, #16]
 800d796:	429a      	cmp	r2, r3
 800d798:	f200 836e 	bhi.w	800de78 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	4a64      	ldr	r2, [pc, #400]	; (800d934 <tcp_input+0x298>)
 800d7a4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	8a3a      	ldrh	r2, [r7, #16]
 800d7ac:	4611      	mov	r1, r2
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7fe f8aa 	bl	800b908 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	891a      	ldrh	r2, [r3, #8]
 800d7b8:	8a3b      	ldrh	r3, [r7, #16]
 800d7ba:	1ad3      	subs	r3, r2, r3
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	895b      	ldrh	r3, [r3, #10]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d005      	beq.n	800d7d6 <tcp_input+0x13a>
 800d7ca:	4b54      	ldr	r3, [pc, #336]	; (800d91c <tcp_input+0x280>)
 800d7cc:	22df      	movs	r2, #223	; 0xdf
 800d7ce:	495c      	ldr	r1, [pc, #368]	; (800d940 <tcp_input+0x2a4>)
 800d7d0:	4854      	ldr	r0, [pc, #336]	; (800d924 <tcp_input+0x288>)
 800d7d2:	f007 fac7 	bl	8014d64 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	891a      	ldrh	r2, [r3, #8]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	891b      	ldrh	r3, [r3, #8]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d005      	beq.n	800d7f0 <tcp_input+0x154>
 800d7e4:	4b4d      	ldr	r3, [pc, #308]	; (800d91c <tcp_input+0x280>)
 800d7e6:	22e0      	movs	r2, #224	; 0xe0
 800d7e8:	4956      	ldr	r1, [pc, #344]	; (800d944 <tcp_input+0x2a8>)
 800d7ea:	484e      	ldr	r0, [pc, #312]	; (800d924 <tcp_input+0x288>)
 800d7ec:	f007 faba 	bl	8014d64 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d7f0:	4b4d      	ldr	r3, [pc, #308]	; (800d928 <tcp_input+0x28c>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	881b      	ldrh	r3, [r3, #0]
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	4a4b      	ldr	r2, [pc, #300]	; (800d928 <tcp_input+0x28c>)
 800d7fa:	6814      	ldr	r4, [r2, #0]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7fc fd17 	bl	800a230 <lwip_htons>
 800d802:	4603      	mov	r3, r0
 800d804:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d806:	4b48      	ldr	r3, [pc, #288]	; (800d928 <tcp_input+0x28c>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	885b      	ldrh	r3, [r3, #2]
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	4a46      	ldr	r2, [pc, #280]	; (800d928 <tcp_input+0x28c>)
 800d810:	6814      	ldr	r4, [r2, #0]
 800d812:	4618      	mov	r0, r3
 800d814:	f7fc fd0c 	bl	800a230 <lwip_htons>
 800d818:	4603      	mov	r3, r0
 800d81a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d81c:	4b42      	ldr	r3, [pc, #264]	; (800d928 <tcp_input+0x28c>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	4a41      	ldr	r2, [pc, #260]	; (800d928 <tcp_input+0x28c>)
 800d824:	6814      	ldr	r4, [r2, #0]
 800d826:	4618      	mov	r0, r3
 800d828:	f7fc fd17 	bl	800a25a <lwip_htonl>
 800d82c:	4603      	mov	r3, r0
 800d82e:	6063      	str	r3, [r4, #4]
 800d830:	6863      	ldr	r3, [r4, #4]
 800d832:	4a45      	ldr	r2, [pc, #276]	; (800d948 <tcp_input+0x2ac>)
 800d834:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d836:	4b3c      	ldr	r3, [pc, #240]	; (800d928 <tcp_input+0x28c>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	689b      	ldr	r3, [r3, #8]
 800d83c:	4a3a      	ldr	r2, [pc, #232]	; (800d928 <tcp_input+0x28c>)
 800d83e:	6814      	ldr	r4, [r2, #0]
 800d840:	4618      	mov	r0, r3
 800d842:	f7fc fd0a 	bl	800a25a <lwip_htonl>
 800d846:	4603      	mov	r3, r0
 800d848:	60a3      	str	r3, [r4, #8]
 800d84a:	68a3      	ldr	r3, [r4, #8]
 800d84c:	4a3f      	ldr	r2, [pc, #252]	; (800d94c <tcp_input+0x2b0>)
 800d84e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d850:	4b35      	ldr	r3, [pc, #212]	; (800d928 <tcp_input+0x28c>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	89db      	ldrh	r3, [r3, #14]
 800d856:	b29b      	uxth	r3, r3
 800d858:	4a33      	ldr	r2, [pc, #204]	; (800d928 <tcp_input+0x28c>)
 800d85a:	6814      	ldr	r4, [r2, #0]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7fc fce7 	bl	800a230 <lwip_htons>
 800d862:	4603      	mov	r3, r0
 800d864:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d866:	4b30      	ldr	r3, [pc, #192]	; (800d928 <tcp_input+0x28c>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	899b      	ldrh	r3, [r3, #12]
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fc fcde 	bl	800a230 <lwip_htons>
 800d874:	4603      	mov	r3, r0
 800d876:	b2db      	uxtb	r3, r3
 800d878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d87c:	b2da      	uxtb	r2, r3
 800d87e:	4b34      	ldr	r3, [pc, #208]	; (800d950 <tcp_input+0x2b4>)
 800d880:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	891a      	ldrh	r2, [r3, #8]
 800d886:	4b33      	ldr	r3, [pc, #204]	; (800d954 <tcp_input+0x2b8>)
 800d888:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d88a:	4b31      	ldr	r3, [pc, #196]	; (800d950 <tcp_input+0x2b4>)
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	f003 0303 	and.w	r3, r3, #3
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00c      	beq.n	800d8b0 <tcp_input+0x214>
    tcplen++;
 800d896:	4b2f      	ldr	r3, [pc, #188]	; (800d954 <tcp_input+0x2b8>)
 800d898:	881b      	ldrh	r3, [r3, #0]
 800d89a:	3301      	adds	r3, #1
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	4b2d      	ldr	r3, [pc, #180]	; (800d954 <tcp_input+0x2b8>)
 800d8a0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	891a      	ldrh	r2, [r3, #8]
 800d8a6:	4b2b      	ldr	r3, [pc, #172]	; (800d954 <tcp_input+0x2b8>)
 800d8a8:	881b      	ldrh	r3, [r3, #0]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	f200 82e6 	bhi.w	800de7c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8b4:	4b28      	ldr	r3, [pc, #160]	; (800d958 <tcp_input+0x2bc>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	61fb      	str	r3, [r7, #28]
 800d8ba:	e09d      	b.n	800d9f8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	7d1b      	ldrb	r3, [r3, #20]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d105      	bne.n	800d8d0 <tcp_input+0x234>
 800d8c4:	4b15      	ldr	r3, [pc, #84]	; (800d91c <tcp_input+0x280>)
 800d8c6:	22fb      	movs	r2, #251	; 0xfb
 800d8c8:	4924      	ldr	r1, [pc, #144]	; (800d95c <tcp_input+0x2c0>)
 800d8ca:	4816      	ldr	r0, [pc, #88]	; (800d924 <tcp_input+0x288>)
 800d8cc:	f007 fa4a 	bl	8014d64 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	7d1b      	ldrb	r3, [r3, #20]
 800d8d4:	2b0a      	cmp	r3, #10
 800d8d6:	d105      	bne.n	800d8e4 <tcp_input+0x248>
 800d8d8:	4b10      	ldr	r3, [pc, #64]	; (800d91c <tcp_input+0x280>)
 800d8da:	22fc      	movs	r2, #252	; 0xfc
 800d8dc:	4920      	ldr	r1, [pc, #128]	; (800d960 <tcp_input+0x2c4>)
 800d8de:	4811      	ldr	r0, [pc, #68]	; (800d924 <tcp_input+0x288>)
 800d8e0:	f007 fa40 	bl	8014d64 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	7d1b      	ldrb	r3, [r3, #20]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d105      	bne.n	800d8f8 <tcp_input+0x25c>
 800d8ec:	4b0b      	ldr	r3, [pc, #44]	; (800d91c <tcp_input+0x280>)
 800d8ee:	22fd      	movs	r2, #253	; 0xfd
 800d8f0:	491c      	ldr	r1, [pc, #112]	; (800d964 <tcp_input+0x2c8>)
 800d8f2:	480c      	ldr	r0, [pc, #48]	; (800d924 <tcp_input+0x288>)
 800d8f4:	f007 fa36 	bl	8014d64 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d8f8:	69fb      	ldr	r3, [r7, #28]
 800d8fa:	7a1b      	ldrb	r3, [r3, #8]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d033      	beq.n	800d968 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	7a1a      	ldrb	r2, [r3, #8]
 800d904:	4b09      	ldr	r3, [pc, #36]	; (800d92c <tcp_input+0x290>)
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d90c:	3301      	adds	r3, #1
 800d90e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d910:	429a      	cmp	r2, r3
 800d912:	d029      	beq.n	800d968 <tcp_input+0x2cc>
      prev = pcb;
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	61bb      	str	r3, [r7, #24]
      continue;
 800d918:	e06b      	b.n	800d9f2 <tcp_input+0x356>
 800d91a:	bf00      	nop
 800d91c:	080173b0 	.word	0x080173b0
 800d920:	080173e4 	.word	0x080173e4
 800d924:	080173fc 	.word	0x080173fc
 800d928:	20017a8c 	.word	0x20017a8c
 800d92c:	20013950 	.word	0x20013950
 800d930:	20017a90 	.word	0x20017a90
 800d934:	20017a94 	.word	0x20017a94
 800d938:	20017a92 	.word	0x20017a92
 800d93c:	08017424 	.word	0x08017424
 800d940:	08017434 	.word	0x08017434
 800d944:	08017440 	.word	0x08017440
 800d948:	20017a9c 	.word	0x20017a9c
 800d94c:	20017aa0 	.word	0x20017aa0
 800d950:	20017aa8 	.word	0x20017aa8
 800d954:	20017aa6 	.word	0x20017aa6
 800d958:	20017a70 	.word	0x20017a70
 800d95c:	08017460 	.word	0x08017460
 800d960:	08017488 	.word	0x08017488
 800d964:	080174b4 	.word	0x080174b4
    }

    if (pcb->remote_port == tcphdr->src &&
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	8b1a      	ldrh	r2, [r3, #24]
 800d96c:	4b72      	ldr	r3, [pc, #456]	; (800db38 <tcp_input+0x49c>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	881b      	ldrh	r3, [r3, #0]
 800d972:	b29b      	uxth	r3, r3
 800d974:	429a      	cmp	r2, r3
 800d976:	d13a      	bne.n	800d9ee <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	8ada      	ldrh	r2, [r3, #22]
 800d97c:	4b6e      	ldr	r3, [pc, #440]	; (800db38 <tcp_input+0x49c>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	885b      	ldrh	r3, [r3, #2]
 800d982:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d984:	429a      	cmp	r2, r3
 800d986:	d132      	bne.n	800d9ee <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	685a      	ldr	r2, [r3, #4]
 800d98c:	4b6b      	ldr	r3, [pc, #428]	; (800db3c <tcp_input+0x4a0>)
 800d98e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d990:	429a      	cmp	r2, r3
 800d992:	d12c      	bne.n	800d9ee <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d994:	69fb      	ldr	r3, [r7, #28]
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	4b68      	ldr	r3, [pc, #416]	; (800db3c <tcp_input+0x4a0>)
 800d99a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d126      	bne.n	800d9ee <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d9a0:	69fb      	ldr	r3, [r7, #28]
 800d9a2:	68db      	ldr	r3, [r3, #12]
 800d9a4:	69fa      	ldr	r2, [r7, #28]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d106      	bne.n	800d9b8 <tcp_input+0x31c>
 800d9aa:	4b65      	ldr	r3, [pc, #404]	; (800db40 <tcp_input+0x4a4>)
 800d9ac:	f240 120d 	movw	r2, #269	; 0x10d
 800d9b0:	4964      	ldr	r1, [pc, #400]	; (800db44 <tcp_input+0x4a8>)
 800d9b2:	4865      	ldr	r0, [pc, #404]	; (800db48 <tcp_input+0x4ac>)
 800d9b4:	f007 f9d6 	bl	8014d64 <iprintf>
      if (prev != NULL) {
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00a      	beq.n	800d9d4 <tcp_input+0x338>
        prev->next = pcb->next;
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	68da      	ldr	r2, [r3, #12]
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d9c6:	4b61      	ldr	r3, [pc, #388]	; (800db4c <tcp_input+0x4b0>)
 800d9c8:	681a      	ldr	r2, [r3, #0]
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d9ce:	4a5f      	ldr	r2, [pc, #380]	; (800db4c <tcp_input+0x4b0>)
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	68db      	ldr	r3, [r3, #12]
 800d9d8:	69fa      	ldr	r2, [r7, #28]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d111      	bne.n	800da02 <tcp_input+0x366>
 800d9de:	4b58      	ldr	r3, [pc, #352]	; (800db40 <tcp_input+0x4a4>)
 800d9e0:	f240 1215 	movw	r2, #277	; 0x115
 800d9e4:	495a      	ldr	r1, [pc, #360]	; (800db50 <tcp_input+0x4b4>)
 800d9e6:	4858      	ldr	r0, [pc, #352]	; (800db48 <tcp_input+0x4ac>)
 800d9e8:	f007 f9bc 	bl	8014d64 <iprintf>
      break;
 800d9ec:	e009      	b.n	800da02 <tcp_input+0x366>
    }
    prev = pcb;
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	61fb      	str	r3, [r7, #28]
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	f47f af5e 	bne.w	800d8bc <tcp_input+0x220>
 800da00:	e000      	b.n	800da04 <tcp_input+0x368>
      break;
 800da02:	bf00      	nop
  }

  if (pcb == NULL) {
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	2b00      	cmp	r3, #0
 800da08:	f040 80aa 	bne.w	800db60 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800da0c:	4b51      	ldr	r3, [pc, #324]	; (800db54 <tcp_input+0x4b8>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	61fb      	str	r3, [r7, #28]
 800da12:	e03f      	b.n	800da94 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800da14:	69fb      	ldr	r3, [r7, #28]
 800da16:	7d1b      	ldrb	r3, [r3, #20]
 800da18:	2b0a      	cmp	r3, #10
 800da1a:	d006      	beq.n	800da2a <tcp_input+0x38e>
 800da1c:	4b48      	ldr	r3, [pc, #288]	; (800db40 <tcp_input+0x4a4>)
 800da1e:	f240 121f 	movw	r2, #287	; 0x11f
 800da22:	494d      	ldr	r1, [pc, #308]	; (800db58 <tcp_input+0x4bc>)
 800da24:	4848      	ldr	r0, [pc, #288]	; (800db48 <tcp_input+0x4ac>)
 800da26:	f007 f99d 	bl	8014d64 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	7a1b      	ldrb	r3, [r3, #8]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d009      	beq.n	800da46 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	7a1a      	ldrb	r2, [r3, #8]
 800da36:	4b41      	ldr	r3, [pc, #260]	; (800db3c <tcp_input+0x4a0>)
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da3e:	3301      	adds	r3, #1
 800da40:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da42:	429a      	cmp	r2, r3
 800da44:	d122      	bne.n	800da8c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800da46:	69fb      	ldr	r3, [r7, #28]
 800da48:	8b1a      	ldrh	r2, [r3, #24]
 800da4a:	4b3b      	ldr	r3, [pc, #236]	; (800db38 <tcp_input+0x49c>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	881b      	ldrh	r3, [r3, #0]
 800da50:	b29b      	uxth	r3, r3
 800da52:	429a      	cmp	r2, r3
 800da54:	d11b      	bne.n	800da8e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	8ada      	ldrh	r2, [r3, #22]
 800da5a:	4b37      	ldr	r3, [pc, #220]	; (800db38 <tcp_input+0x49c>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	885b      	ldrh	r3, [r3, #2]
 800da60:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800da62:	429a      	cmp	r2, r3
 800da64:	d113      	bne.n	800da8e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da66:	69fb      	ldr	r3, [r7, #28]
 800da68:	685a      	ldr	r2, [r3, #4]
 800da6a:	4b34      	ldr	r3, [pc, #208]	; (800db3c <tcp_input+0x4a0>)
 800da6c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800da6e:	429a      	cmp	r2, r3
 800da70:	d10d      	bne.n	800da8e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800da72:	69fb      	ldr	r3, [r7, #28]
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	4b31      	ldr	r3, [pc, #196]	; (800db3c <tcp_input+0x4a0>)
 800da78:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d107      	bne.n	800da8e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800da7e:	69f8      	ldr	r0, [r7, #28]
 800da80:	f000 fb56 	bl	800e130 <tcp_timewait_input>
        }
        pbuf_free(p);
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f7fd ffc5 	bl	800ba14 <pbuf_free>
        return;
 800da8a:	e1fd      	b.n	800de88 <tcp_input+0x7ec>
        continue;
 800da8c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800da8e:	69fb      	ldr	r3, [r7, #28]
 800da90:	68db      	ldr	r3, [r3, #12]
 800da92:	61fb      	str	r3, [r7, #28]
 800da94:	69fb      	ldr	r3, [r7, #28]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d1bc      	bne.n	800da14 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800da9a:	2300      	movs	r3, #0
 800da9c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800da9e:	4b2f      	ldr	r3, [pc, #188]	; (800db5c <tcp_input+0x4c0>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	617b      	str	r3, [r7, #20]
 800daa4:	e02a      	b.n	800dafc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	7a1b      	ldrb	r3, [r3, #8]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00c      	beq.n	800dac8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	7a1a      	ldrb	r2, [r3, #8]
 800dab2:	4b22      	ldr	r3, [pc, #136]	; (800db3c <tcp_input+0x4a0>)
 800dab4:	685b      	ldr	r3, [r3, #4]
 800dab6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800daba:	3301      	adds	r3, #1
 800dabc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d002      	beq.n	800dac8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	61bb      	str	r3, [r7, #24]
        continue;
 800dac6:	e016      	b.n	800daf6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	8ada      	ldrh	r2, [r3, #22]
 800dacc:	4b1a      	ldr	r3, [pc, #104]	; (800db38 <tcp_input+0x49c>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	885b      	ldrh	r3, [r3, #2]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d10c      	bne.n	800daf2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	4b17      	ldr	r3, [pc, #92]	; (800db3c <tcp_input+0x4a0>)
 800dade:	695b      	ldr	r3, [r3, #20]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d00f      	beq.n	800db04 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00d      	beq.n	800db06 <tcp_input+0x46a>
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d009      	beq.n	800db06 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	617b      	str	r3, [r7, #20]
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d1d1      	bne.n	800daa6 <tcp_input+0x40a>
 800db02:	e000      	b.n	800db06 <tcp_input+0x46a>
            break;
 800db04:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d029      	beq.n	800db60 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00a      	beq.n	800db28 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	68da      	ldr	r2, [r3, #12]
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800db1a:	4b10      	ldr	r3, [pc, #64]	; (800db5c <tcp_input+0x4c0>)
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800db22:	4a0e      	ldr	r2, [pc, #56]	; (800db5c <tcp_input+0x4c0>)
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800db28:	6978      	ldr	r0, [r7, #20]
 800db2a:	f000 fa03 	bl	800df34 <tcp_listen_input>
      }
      pbuf_free(p);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f7fd ff70 	bl	800ba14 <pbuf_free>
      return;
 800db34:	e1a8      	b.n	800de88 <tcp_input+0x7ec>
 800db36:	bf00      	nop
 800db38:	20017a8c 	.word	0x20017a8c
 800db3c:	20013950 	.word	0x20013950
 800db40:	080173b0 	.word	0x080173b0
 800db44:	080174dc 	.word	0x080174dc
 800db48:	080173fc 	.word	0x080173fc
 800db4c:	20017a70 	.word	0x20017a70
 800db50:	08017508 	.word	0x08017508
 800db54:	20017a74 	.word	0x20017a74
 800db58:	08017534 	.word	0x08017534
 800db5c:	20017a6c 	.word	0x20017a6c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	2b00      	cmp	r3, #0
 800db64:	f000 8158 	beq.w	800de18 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800db68:	4b95      	ldr	r3, [pc, #596]	; (800ddc0 <tcp_input+0x724>)
 800db6a:	2200      	movs	r2, #0
 800db6c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	891a      	ldrh	r2, [r3, #8]
 800db72:	4b93      	ldr	r3, [pc, #588]	; (800ddc0 <tcp_input+0x724>)
 800db74:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800db76:	4a92      	ldr	r2, [pc, #584]	; (800ddc0 <tcp_input+0x724>)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800db7c:	4b91      	ldr	r3, [pc, #580]	; (800ddc4 <tcp_input+0x728>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4a8f      	ldr	r2, [pc, #572]	; (800ddc0 <tcp_input+0x724>)
 800db82:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800db84:	4b90      	ldr	r3, [pc, #576]	; (800ddc8 <tcp_input+0x72c>)
 800db86:	2200      	movs	r2, #0
 800db88:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800db8a:	4b90      	ldr	r3, [pc, #576]	; (800ddcc <tcp_input+0x730>)
 800db8c:	2200      	movs	r2, #0
 800db8e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800db90:	4b8f      	ldr	r3, [pc, #572]	; (800ddd0 <tcp_input+0x734>)
 800db92:	2200      	movs	r2, #0
 800db94:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800db96:	4b8f      	ldr	r3, [pc, #572]	; (800ddd4 <tcp_input+0x738>)
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	f003 0308 	and.w	r3, r3, #8
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d006      	beq.n	800dbb0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	7b5b      	ldrb	r3, [r3, #13]
 800dba6:	f043 0301 	orr.w	r3, r3, #1
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dbb0:	69fb      	ldr	r3, [r7, #28]
 800dbb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d017      	beq.n	800dbe8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dbb8:	69f8      	ldr	r0, [r7, #28]
 800dbba:	f7ff f929 	bl	800ce10 <tcp_process_refused_data>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	f113 0f0d 	cmn.w	r3, #13
 800dbc4:	d007      	beq.n	800dbd6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00c      	beq.n	800dbe8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dbce:	4b82      	ldr	r3, [pc, #520]	; (800ddd8 <tcp_input+0x73c>)
 800dbd0:	881b      	ldrh	r3, [r3, #0]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d008      	beq.n	800dbe8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	f040 80e3 	bne.w	800dda6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dbe0:	69f8      	ldr	r0, [r7, #28]
 800dbe2:	f003 f9ad 	bl	8010f40 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dbe6:	e0de      	b.n	800dda6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800dbe8:	4a7c      	ldr	r2, [pc, #496]	; (800dddc <tcp_input+0x740>)
 800dbea:	69fb      	ldr	r3, [r7, #28]
 800dbec:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dbee:	69f8      	ldr	r0, [r7, #28]
 800dbf0:	f000 fb18 	bl	800e224 <tcp_process>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dbf8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dbfc:	f113 0f0d 	cmn.w	r3, #13
 800dc00:	f000 80d3 	beq.w	800ddaa <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800dc04:	4b71      	ldr	r3, [pc, #452]	; (800ddcc <tcp_input+0x730>)
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	f003 0308 	and.w	r3, r3, #8
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d015      	beq.n	800dc3c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d008      	beq.n	800dc2c <tcp_input+0x590>
 800dc1a:	69fb      	ldr	r3, [r7, #28]
 800dc1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc20:	69fa      	ldr	r2, [r7, #28]
 800dc22:	6912      	ldr	r2, [r2, #16]
 800dc24:	f06f 010d 	mvn.w	r1, #13
 800dc28:	4610      	mov	r0, r2
 800dc2a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dc2c:	69f9      	ldr	r1, [r7, #28]
 800dc2e:	486c      	ldr	r0, [pc, #432]	; (800dde0 <tcp_input+0x744>)
 800dc30:	f7ff fbbc 	bl	800d3ac <tcp_pcb_remove>
        tcp_free(pcb);
 800dc34:	69f8      	ldr	r0, [r7, #28]
 800dc36:	f7fe f9a9 	bl	800bf8c <tcp_free>
 800dc3a:	e0da      	b.n	800ddf2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dc40:	4b63      	ldr	r3, [pc, #396]	; (800ddd0 <tcp_input+0x734>)
 800dc42:	881b      	ldrh	r3, [r3, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d01d      	beq.n	800dc84 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dc48:	4b61      	ldr	r3, [pc, #388]	; (800ddd0 <tcp_input+0x734>)
 800dc4a:	881b      	ldrh	r3, [r3, #0]
 800dc4c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d00a      	beq.n	800dc6e <tcp_input+0x5d2>
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc5e:	69fa      	ldr	r2, [r7, #28]
 800dc60:	6910      	ldr	r0, [r2, #16]
 800dc62:	89fa      	ldrh	r2, [r7, #14]
 800dc64:	69f9      	ldr	r1, [r7, #28]
 800dc66:	4798      	blx	r3
 800dc68:	4603      	mov	r3, r0
 800dc6a:	74fb      	strb	r3, [r7, #19]
 800dc6c:	e001      	b.n	800dc72 <tcp_input+0x5d6>
 800dc6e:	2300      	movs	r3, #0
 800dc70:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dc72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc76:	f113 0f0d 	cmn.w	r3, #13
 800dc7a:	f000 8098 	beq.w	800ddae <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dc7e:	4b54      	ldr	r3, [pc, #336]	; (800ddd0 <tcp_input+0x734>)
 800dc80:	2200      	movs	r2, #0
 800dc82:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dc84:	69f8      	ldr	r0, [r7, #28]
 800dc86:	f000 f915 	bl	800deb4 <tcp_input_delayed_close>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f040 8090 	bne.w	800ddb2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800dc92:	4b4d      	ldr	r3, [pc, #308]	; (800ddc8 <tcp_input+0x72c>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d041      	beq.n	800dd1e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d006      	beq.n	800dcb0 <tcp_input+0x614>
 800dca2:	4b50      	ldr	r3, [pc, #320]	; (800dde4 <tcp_input+0x748>)
 800dca4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dca8:	494f      	ldr	r1, [pc, #316]	; (800dde8 <tcp_input+0x74c>)
 800dcaa:	4850      	ldr	r0, [pc, #320]	; (800ddec <tcp_input+0x750>)
 800dcac:	f007 f85a 	bl	8014d64 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	8b5b      	ldrh	r3, [r3, #26]
 800dcb4:	f003 0310 	and.w	r3, r3, #16
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d008      	beq.n	800dcce <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800dcbc:	4b42      	ldr	r3, [pc, #264]	; (800ddc8 <tcp_input+0x72c>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fd fea7 	bl	800ba14 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800dcc6:	69f8      	ldr	r0, [r7, #28]
 800dcc8:	f7fe fc48 	bl	800c55c <tcp_abort>
            goto aborted;
 800dccc:	e091      	b.n	800ddf2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800dcce:	69fb      	ldr	r3, [r7, #28]
 800dcd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d00c      	beq.n	800dcf2 <tcp_input+0x656>
 800dcd8:	69fb      	ldr	r3, [r7, #28]
 800dcda:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	6918      	ldr	r0, [r3, #16]
 800dce2:	4b39      	ldr	r3, [pc, #228]	; (800ddc8 <tcp_input+0x72c>)
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	2300      	movs	r3, #0
 800dce8:	69f9      	ldr	r1, [r7, #28]
 800dcea:	47a0      	blx	r4
 800dcec:	4603      	mov	r3, r0
 800dcee:	74fb      	strb	r3, [r7, #19]
 800dcf0:	e008      	b.n	800dd04 <tcp_input+0x668>
 800dcf2:	4b35      	ldr	r3, [pc, #212]	; (800ddc8 <tcp_input+0x72c>)
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	69f9      	ldr	r1, [r7, #28]
 800dcfa:	2000      	movs	r0, #0
 800dcfc:	f7ff f95e 	bl	800cfbc <tcp_recv_null>
 800dd00:	4603      	mov	r3, r0
 800dd02:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800dd04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd08:	f113 0f0d 	cmn.w	r3, #13
 800dd0c:	d053      	beq.n	800ddb6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800dd0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d003      	beq.n	800dd1e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800dd16:	4b2c      	ldr	r3, [pc, #176]	; (800ddc8 <tcp_input+0x72c>)
 800dd18:	681a      	ldr	r2, [r3, #0]
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800dd1e:	4b2b      	ldr	r3, [pc, #172]	; (800ddcc <tcp_input+0x730>)
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	f003 0320 	and.w	r3, r3, #32
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d030      	beq.n	800dd8c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800dd2a:	69fb      	ldr	r3, [r7, #28]
 800dd2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d009      	beq.n	800dd46 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800dd32:	69fb      	ldr	r3, [r7, #28]
 800dd34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd36:	7b5a      	ldrb	r2, [r3, #13]
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd3c:	f042 0220 	orr.w	r2, r2, #32
 800dd40:	b2d2      	uxtb	r2, r2
 800dd42:	735a      	strb	r2, [r3, #13]
 800dd44:	e022      	b.n	800dd8c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dd46:	69fb      	ldr	r3, [r7, #28]
 800dd48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dd4e:	d005      	beq.n	800dd5c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd54:	3301      	adds	r3, #1
 800dd56:	b29a      	uxth	r2, r3
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d00b      	beq.n	800dd7e <tcp_input+0x6e2>
 800dd66:	69fb      	ldr	r3, [r7, #28]
 800dd68:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	6918      	ldr	r0, [r3, #16]
 800dd70:	2300      	movs	r3, #0
 800dd72:	2200      	movs	r2, #0
 800dd74:	69f9      	ldr	r1, [r7, #28]
 800dd76:	47a0      	blx	r4
 800dd78:	4603      	mov	r3, r0
 800dd7a:	74fb      	strb	r3, [r7, #19]
 800dd7c:	e001      	b.n	800dd82 <tcp_input+0x6e6>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dd82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd86:	f113 0f0d 	cmn.w	r3, #13
 800dd8a:	d016      	beq.n	800ddba <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dd8c:	4b13      	ldr	r3, [pc, #76]	; (800dddc <tcp_input+0x740>)
 800dd8e:	2200      	movs	r2, #0
 800dd90:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800dd92:	69f8      	ldr	r0, [r7, #28]
 800dd94:	f000 f88e 	bl	800deb4 <tcp_input_delayed_close>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d128      	bne.n	800ddf0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800dd9e:	69f8      	ldr	r0, [r7, #28]
 800dda0:	f002 fac8 	bl	8010334 <tcp_output>
 800dda4:	e025      	b.n	800ddf2 <tcp_input+0x756>
        goto aborted;
 800dda6:	bf00      	nop
 800dda8:	e023      	b.n	800ddf2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ddaa:	bf00      	nop
 800ddac:	e021      	b.n	800ddf2 <tcp_input+0x756>
              goto aborted;
 800ddae:	bf00      	nop
 800ddb0:	e01f      	b.n	800ddf2 <tcp_input+0x756>
          goto aborted;
 800ddb2:	bf00      	nop
 800ddb4:	e01d      	b.n	800ddf2 <tcp_input+0x756>
            goto aborted;
 800ddb6:	bf00      	nop
 800ddb8:	e01b      	b.n	800ddf2 <tcp_input+0x756>
              goto aborted;
 800ddba:	bf00      	nop
 800ddbc:	e019      	b.n	800ddf2 <tcp_input+0x756>
 800ddbe:	bf00      	nop
 800ddc0:	20017a7c 	.word	0x20017a7c
 800ddc4:	20017a8c 	.word	0x20017a8c
 800ddc8:	20017aac 	.word	0x20017aac
 800ddcc:	20017aa9 	.word	0x20017aa9
 800ddd0:	20017aa4 	.word	0x20017aa4
 800ddd4:	20017aa8 	.word	0x20017aa8
 800ddd8:	20017aa6 	.word	0x20017aa6
 800dddc:	20017ab0 	.word	0x20017ab0
 800dde0:	20017a70 	.word	0x20017a70
 800dde4:	080173b0 	.word	0x080173b0
 800dde8:	08017564 	.word	0x08017564
 800ddec:	080173fc 	.word	0x080173fc
          goto aborted;
 800ddf0:	bf00      	nop
    tcp_input_pcb = NULL;
 800ddf2:	4b27      	ldr	r3, [pc, #156]	; (800de90 <tcp_input+0x7f4>)
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ddf8:	4b26      	ldr	r3, [pc, #152]	; (800de94 <tcp_input+0x7f8>)
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ddfe:	4b26      	ldr	r3, [pc, #152]	; (800de98 <tcp_input+0x7fc>)
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d03f      	beq.n	800de86 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800de06:	4b24      	ldr	r3, [pc, #144]	; (800de98 <tcp_input+0x7fc>)
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7fd fe02 	bl	800ba14 <pbuf_free>
      inseg.p = NULL;
 800de10:	4b21      	ldr	r3, [pc, #132]	; (800de98 <tcp_input+0x7fc>)
 800de12:	2200      	movs	r2, #0
 800de14:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800de16:	e036      	b.n	800de86 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800de18:	4b20      	ldr	r3, [pc, #128]	; (800de9c <tcp_input+0x800>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	899b      	ldrh	r3, [r3, #12]
 800de1e:	b29b      	uxth	r3, r3
 800de20:	4618      	mov	r0, r3
 800de22:	f7fc fa05 	bl	800a230 <lwip_htons>
 800de26:	4603      	mov	r3, r0
 800de28:	b2db      	uxtb	r3, r3
 800de2a:	f003 0304 	and.w	r3, r3, #4
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d118      	bne.n	800de64 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de32:	4b1b      	ldr	r3, [pc, #108]	; (800dea0 <tcp_input+0x804>)
 800de34:	6819      	ldr	r1, [r3, #0]
 800de36:	4b1b      	ldr	r3, [pc, #108]	; (800dea4 <tcp_input+0x808>)
 800de38:	881b      	ldrh	r3, [r3, #0]
 800de3a:	461a      	mov	r2, r3
 800de3c:	4b1a      	ldr	r3, [pc, #104]	; (800dea8 <tcp_input+0x80c>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de42:	4b16      	ldr	r3, [pc, #88]	; (800de9c <tcp_input+0x800>)
 800de44:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de46:	885b      	ldrh	r3, [r3, #2]
 800de48:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de4a:	4a14      	ldr	r2, [pc, #80]	; (800de9c <tcp_input+0x800>)
 800de4c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de4e:	8812      	ldrh	r2, [r2, #0]
 800de50:	b292      	uxth	r2, r2
 800de52:	9202      	str	r2, [sp, #8]
 800de54:	9301      	str	r3, [sp, #4]
 800de56:	4b15      	ldr	r3, [pc, #84]	; (800deac <tcp_input+0x810>)
 800de58:	9300      	str	r3, [sp, #0]
 800de5a:	4b15      	ldr	r3, [pc, #84]	; (800deb0 <tcp_input+0x814>)
 800de5c:	4602      	mov	r2, r0
 800de5e:	2000      	movs	r0, #0
 800de60:	f003 f81c 	bl	8010e9c <tcp_rst>
    pbuf_free(p);
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f7fd fdd5 	bl	800ba14 <pbuf_free>
  return;
 800de6a:	e00c      	b.n	800de86 <tcp_input+0x7ea>
    goto dropped;
 800de6c:	bf00      	nop
 800de6e:	e006      	b.n	800de7e <tcp_input+0x7e2>
    goto dropped;
 800de70:	bf00      	nop
 800de72:	e004      	b.n	800de7e <tcp_input+0x7e2>
    goto dropped;
 800de74:	bf00      	nop
 800de76:	e002      	b.n	800de7e <tcp_input+0x7e2>
      goto dropped;
 800de78:	bf00      	nop
 800de7a:	e000      	b.n	800de7e <tcp_input+0x7e2>
      goto dropped;
 800de7c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f7fd fdc8 	bl	800ba14 <pbuf_free>
 800de84:	e000      	b.n	800de88 <tcp_input+0x7ec>
  return;
 800de86:	bf00      	nop
}
 800de88:	3724      	adds	r7, #36	; 0x24
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd90      	pop	{r4, r7, pc}
 800de8e:	bf00      	nop
 800de90:	20017ab0 	.word	0x20017ab0
 800de94:	20017aac 	.word	0x20017aac
 800de98:	20017a7c 	.word	0x20017a7c
 800de9c:	20017a8c 	.word	0x20017a8c
 800dea0:	20017aa0 	.word	0x20017aa0
 800dea4:	20017aa6 	.word	0x20017aa6
 800dea8:	20017a9c 	.word	0x20017a9c
 800deac:	20013960 	.word	0x20013960
 800deb0:	20013964 	.word	0x20013964

0800deb4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d106      	bne.n	800ded0 <tcp_input_delayed_close+0x1c>
 800dec2:	4b17      	ldr	r3, [pc, #92]	; (800df20 <tcp_input_delayed_close+0x6c>)
 800dec4:	f240 225a 	movw	r2, #602	; 0x25a
 800dec8:	4916      	ldr	r1, [pc, #88]	; (800df24 <tcp_input_delayed_close+0x70>)
 800deca:	4817      	ldr	r0, [pc, #92]	; (800df28 <tcp_input_delayed_close+0x74>)
 800decc:	f006 ff4a 	bl	8014d64 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ded0:	4b16      	ldr	r3, [pc, #88]	; (800df2c <tcp_input_delayed_close+0x78>)
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	f003 0310 	and.w	r3, r3, #16
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d01c      	beq.n	800df16 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	8b5b      	ldrh	r3, [r3, #26]
 800dee0:	f003 0310 	and.w	r3, r3, #16
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d10d      	bne.n	800df04 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800deee:	2b00      	cmp	r3, #0
 800def0:	d008      	beq.n	800df04 <tcp_input_delayed_close+0x50>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	6912      	ldr	r2, [r2, #16]
 800defc:	f06f 010e 	mvn.w	r1, #14
 800df00:	4610      	mov	r0, r2
 800df02:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800df04:	6879      	ldr	r1, [r7, #4]
 800df06:	480a      	ldr	r0, [pc, #40]	; (800df30 <tcp_input_delayed_close+0x7c>)
 800df08:	f7ff fa50 	bl	800d3ac <tcp_pcb_remove>
    tcp_free(pcb);
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f7fe f83d 	bl	800bf8c <tcp_free>
    return 1;
 800df12:	2301      	movs	r3, #1
 800df14:	e000      	b.n	800df18 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800df16:	2300      	movs	r3, #0
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	080173b0 	.word	0x080173b0
 800df24:	08017580 	.word	0x08017580
 800df28:	080173fc 	.word	0x080173fc
 800df2c:	20017aa9 	.word	0x20017aa9
 800df30:	20017a70 	.word	0x20017a70

0800df34 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800df34:	b590      	push	{r4, r7, lr}
 800df36:	b08b      	sub	sp, #44	; 0x2c
 800df38:	af04      	add	r7, sp, #16
 800df3a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800df3c:	4b6f      	ldr	r3, [pc, #444]	; (800e0fc <tcp_listen_input+0x1c8>)
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	f003 0304 	and.w	r3, r3, #4
 800df44:	2b00      	cmp	r3, #0
 800df46:	f040 80d2 	bne.w	800e0ee <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d106      	bne.n	800df5e <tcp_listen_input+0x2a>
 800df50:	4b6b      	ldr	r3, [pc, #428]	; (800e100 <tcp_listen_input+0x1cc>)
 800df52:	f240 2281 	movw	r2, #641	; 0x281
 800df56:	496b      	ldr	r1, [pc, #428]	; (800e104 <tcp_listen_input+0x1d0>)
 800df58:	486b      	ldr	r0, [pc, #428]	; (800e108 <tcp_listen_input+0x1d4>)
 800df5a:	f006 ff03 	bl	8014d64 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800df5e:	4b67      	ldr	r3, [pc, #412]	; (800e0fc <tcp_listen_input+0x1c8>)
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	f003 0310 	and.w	r3, r3, #16
 800df66:	2b00      	cmp	r3, #0
 800df68:	d019      	beq.n	800df9e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df6a:	4b68      	ldr	r3, [pc, #416]	; (800e10c <tcp_listen_input+0x1d8>)
 800df6c:	6819      	ldr	r1, [r3, #0]
 800df6e:	4b68      	ldr	r3, [pc, #416]	; (800e110 <tcp_listen_input+0x1dc>)
 800df70:	881b      	ldrh	r3, [r3, #0]
 800df72:	461a      	mov	r2, r3
 800df74:	4b67      	ldr	r3, [pc, #412]	; (800e114 <tcp_listen_input+0x1e0>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df7a:	4b67      	ldr	r3, [pc, #412]	; (800e118 <tcp_listen_input+0x1e4>)
 800df7c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df7e:	885b      	ldrh	r3, [r3, #2]
 800df80:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df82:	4a65      	ldr	r2, [pc, #404]	; (800e118 <tcp_listen_input+0x1e4>)
 800df84:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df86:	8812      	ldrh	r2, [r2, #0]
 800df88:	b292      	uxth	r2, r2
 800df8a:	9202      	str	r2, [sp, #8]
 800df8c:	9301      	str	r3, [sp, #4]
 800df8e:	4b63      	ldr	r3, [pc, #396]	; (800e11c <tcp_listen_input+0x1e8>)
 800df90:	9300      	str	r3, [sp, #0]
 800df92:	4b63      	ldr	r3, [pc, #396]	; (800e120 <tcp_listen_input+0x1ec>)
 800df94:	4602      	mov	r2, r0
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f002 ff80 	bl	8010e9c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800df9c:	e0a9      	b.n	800e0f2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800df9e:	4b57      	ldr	r3, [pc, #348]	; (800e0fc <tcp_listen_input+0x1c8>)
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	f003 0302 	and.w	r3, r3, #2
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	f000 80a3 	beq.w	800e0f2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	7d5b      	ldrb	r3, [r3, #21]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7ff f927 	bl	800d204 <tcp_alloc>
 800dfb6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d111      	bne.n	800dfe2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	699b      	ldr	r3, [r3, #24]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d00a      	beq.n	800dfdc <tcp_listen_input+0xa8>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	699b      	ldr	r3, [r3, #24]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	6910      	ldr	r0, [r2, #16]
 800dfce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	4798      	blx	r3
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	73bb      	strb	r3, [r7, #14]
      return;
 800dfda:	e08b      	b.n	800e0f4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dfdc:	23f0      	movs	r3, #240	; 0xf0
 800dfde:	73bb      	strb	r3, [r7, #14]
      return;
 800dfe0:	e088      	b.n	800e0f4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800dfe2:	4b50      	ldr	r3, [pc, #320]	; (800e124 <tcp_listen_input+0x1f0>)
 800dfe4:	695a      	ldr	r2, [r3, #20]
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800dfea:	4b4e      	ldr	r3, [pc, #312]	; (800e124 <tcp_listen_input+0x1f0>)
 800dfec:	691a      	ldr	r2, [r3, #16]
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	8ada      	ldrh	r2, [r3, #22]
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800dffa:	4b47      	ldr	r3, [pc, #284]	; (800e118 <tcp_listen_input+0x1e4>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	881b      	ldrh	r3, [r3, #0]
 800e000:	b29a      	uxth	r2, r3
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	2203      	movs	r2, #3
 800e00a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e00c:	4b41      	ldr	r3, [pc, #260]	; (800e114 <tcp_listen_input+0x1e0>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	1c5a      	adds	r2, r3, #1
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e01e:	6978      	ldr	r0, [r7, #20]
 800e020:	f7ff fa58 	bl	800d4d4 <tcp_next_iss>
 800e024:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	693a      	ldr	r2, [r7, #16]
 800e02a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	693a      	ldr	r2, [r7, #16]
 800e030:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	693a      	ldr	r2, [r7, #16]
 800e036:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	693a      	ldr	r2, [r7, #16]
 800e03c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e03e:	4b35      	ldr	r3, [pc, #212]	; (800e114 <tcp_listen_input+0x1e0>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	1e5a      	subs	r2, r3, #1
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	691a      	ldr	r2, [r3, #16]
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	7a5b      	ldrb	r3, [r3, #9]
 800e05a:	f003 030c 	and.w	r3, r3, #12
 800e05e:	b2da      	uxtb	r2, r3
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	7a1a      	ldrb	r2, [r3, #8]
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e06c:	4b2e      	ldr	r3, [pc, #184]	; (800e128 <tcp_listen_input+0x1f4>)
 800e06e:	681a      	ldr	r2, [r3, #0]
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	60da      	str	r2, [r3, #12]
 800e074:	4a2c      	ldr	r2, [pc, #176]	; (800e128 <tcp_listen_input+0x1f4>)
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	6013      	str	r3, [r2, #0]
 800e07a:	f003 f8d1 	bl	8011220 <tcp_timer_needed>
 800e07e:	4b2b      	ldr	r3, [pc, #172]	; (800e12c <tcp_listen_input+0x1f8>)
 800e080:	2201      	movs	r2, #1
 800e082:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e084:	6978      	ldr	r0, [r7, #20]
 800e086:	f001 fd8f 	bl	800fba8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e08a:	4b23      	ldr	r3, [pc, #140]	; (800e118 <tcp_listen_input+0x1e4>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	89db      	ldrh	r3, [r3, #14]
 800e090:	b29a      	uxth	r2, r3
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	3304      	adds	r3, #4
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f004 ffb5 	bl	801301c <ip4_route>
 800e0b2:	4601      	mov	r1, r0
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	3304      	adds	r3, #4
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	f7ff fa30 	bl	800d520 <tcp_eff_send_mss_netif>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e0c8:	2112      	movs	r1, #18
 800e0ca:	6978      	ldr	r0, [r7, #20]
 800e0cc:	f002 f844 	bl	8010158 <tcp_enqueue_flags>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e0d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d004      	beq.n	800e0e6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e0dc:	2100      	movs	r1, #0
 800e0de:	6978      	ldr	r0, [r7, #20]
 800e0e0:	f7fe f97e 	bl	800c3e0 <tcp_abandon>
      return;
 800e0e4:	e006      	b.n	800e0f4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e0e6:	6978      	ldr	r0, [r7, #20]
 800e0e8:	f002 f924 	bl	8010334 <tcp_output>
  return;
 800e0ec:	e001      	b.n	800e0f2 <tcp_listen_input+0x1be>
    return;
 800e0ee:	bf00      	nop
 800e0f0:	e000      	b.n	800e0f4 <tcp_listen_input+0x1c0>
  return;
 800e0f2:	bf00      	nop
}
 800e0f4:	371c      	adds	r7, #28
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd90      	pop	{r4, r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	20017aa8 	.word	0x20017aa8
 800e100:	080173b0 	.word	0x080173b0
 800e104:	080175a8 	.word	0x080175a8
 800e108:	080173fc 	.word	0x080173fc
 800e10c:	20017aa0 	.word	0x20017aa0
 800e110:	20017aa6 	.word	0x20017aa6
 800e114:	20017a9c 	.word	0x20017a9c
 800e118:	20017a8c 	.word	0x20017a8c
 800e11c:	20013960 	.word	0x20013960
 800e120:	20013964 	.word	0x20013964
 800e124:	20013950 	.word	0x20013950
 800e128:	20017a70 	.word	0x20017a70
 800e12c:	20017a78 	.word	0x20017a78

0800e130 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b086      	sub	sp, #24
 800e134:	af04      	add	r7, sp, #16
 800e136:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e138:	4b2f      	ldr	r3, [pc, #188]	; (800e1f8 <tcp_timewait_input+0xc8>)
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	f003 0304 	and.w	r3, r3, #4
 800e140:	2b00      	cmp	r3, #0
 800e142:	d153      	bne.n	800e1ec <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d106      	bne.n	800e158 <tcp_timewait_input+0x28>
 800e14a:	4b2c      	ldr	r3, [pc, #176]	; (800e1fc <tcp_timewait_input+0xcc>)
 800e14c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e150:	492b      	ldr	r1, [pc, #172]	; (800e200 <tcp_timewait_input+0xd0>)
 800e152:	482c      	ldr	r0, [pc, #176]	; (800e204 <tcp_timewait_input+0xd4>)
 800e154:	f006 fe06 	bl	8014d64 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e158:	4b27      	ldr	r3, [pc, #156]	; (800e1f8 <tcp_timewait_input+0xc8>)
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	f003 0302 	and.w	r3, r3, #2
 800e160:	2b00      	cmp	r3, #0
 800e162:	d02a      	beq.n	800e1ba <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e164:	4b28      	ldr	r3, [pc, #160]	; (800e208 <tcp_timewait_input+0xd8>)
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e16c:	1ad3      	subs	r3, r2, r3
 800e16e:	2b00      	cmp	r3, #0
 800e170:	db2d      	blt.n	800e1ce <tcp_timewait_input+0x9e>
 800e172:	4b25      	ldr	r3, [pc, #148]	; (800e208 <tcp_timewait_input+0xd8>)
 800e174:	681a      	ldr	r2, [r3, #0]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17a:	6879      	ldr	r1, [r7, #4]
 800e17c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e17e:	440b      	add	r3, r1
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	2b00      	cmp	r3, #0
 800e184:	dc23      	bgt.n	800e1ce <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e186:	4b21      	ldr	r3, [pc, #132]	; (800e20c <tcp_timewait_input+0xdc>)
 800e188:	6819      	ldr	r1, [r3, #0]
 800e18a:	4b21      	ldr	r3, [pc, #132]	; (800e210 <tcp_timewait_input+0xe0>)
 800e18c:	881b      	ldrh	r3, [r3, #0]
 800e18e:	461a      	mov	r2, r3
 800e190:	4b1d      	ldr	r3, [pc, #116]	; (800e208 <tcp_timewait_input+0xd8>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e196:	4b1f      	ldr	r3, [pc, #124]	; (800e214 <tcp_timewait_input+0xe4>)
 800e198:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e19a:	885b      	ldrh	r3, [r3, #2]
 800e19c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e19e:	4a1d      	ldr	r2, [pc, #116]	; (800e214 <tcp_timewait_input+0xe4>)
 800e1a0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1a2:	8812      	ldrh	r2, [r2, #0]
 800e1a4:	b292      	uxth	r2, r2
 800e1a6:	9202      	str	r2, [sp, #8]
 800e1a8:	9301      	str	r3, [sp, #4]
 800e1aa:	4b1b      	ldr	r3, [pc, #108]	; (800e218 <tcp_timewait_input+0xe8>)
 800e1ac:	9300      	str	r3, [sp, #0]
 800e1ae:	4b1b      	ldr	r3, [pc, #108]	; (800e21c <tcp_timewait_input+0xec>)
 800e1b0:	4602      	mov	r2, r0
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f002 fe72 	bl	8010e9c <tcp_rst>
      return;
 800e1b8:	e01b      	b.n	800e1f2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e1ba:	4b0f      	ldr	r3, [pc, #60]	; (800e1f8 <tcp_timewait_input+0xc8>)
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	f003 0301 	and.w	r3, r3, #1
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d003      	beq.n	800e1ce <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e1c6:	4b16      	ldr	r3, [pc, #88]	; (800e220 <tcp_timewait_input+0xf0>)
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e1ce:	4b10      	ldr	r3, [pc, #64]	; (800e210 <tcp_timewait_input+0xe0>)
 800e1d0:	881b      	ldrh	r3, [r3, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00c      	beq.n	800e1f0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	8b5b      	ldrh	r3, [r3, #26]
 800e1da:	f043 0302 	orr.w	r3, r3, #2
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f002 f8a5 	bl	8010334 <tcp_output>
  }
  return;
 800e1ea:	e001      	b.n	800e1f0 <tcp_timewait_input+0xc0>
    return;
 800e1ec:	bf00      	nop
 800e1ee:	e000      	b.n	800e1f2 <tcp_timewait_input+0xc2>
  return;
 800e1f0:	bf00      	nop
}
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	20017aa8 	.word	0x20017aa8
 800e1fc:	080173b0 	.word	0x080173b0
 800e200:	080175c8 	.word	0x080175c8
 800e204:	080173fc 	.word	0x080173fc
 800e208:	20017a9c 	.word	0x20017a9c
 800e20c:	20017aa0 	.word	0x20017aa0
 800e210:	20017aa6 	.word	0x20017aa6
 800e214:	20017a8c 	.word	0x20017a8c
 800e218:	20013960 	.word	0x20013960
 800e21c:	20013964 	.word	0x20013964
 800e220:	20017a64 	.word	0x20017a64

0800e224 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e224:	b590      	push	{r4, r7, lr}
 800e226:	b08d      	sub	sp, #52	; 0x34
 800e228:	af04      	add	r7, sp, #16
 800e22a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e22c:	2300      	movs	r3, #0
 800e22e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e230:	2300      	movs	r3, #0
 800e232:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d106      	bne.n	800e248 <tcp_process+0x24>
 800e23a:	4b9d      	ldr	r3, [pc, #628]	; (800e4b0 <tcp_process+0x28c>)
 800e23c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e240:	499c      	ldr	r1, [pc, #624]	; (800e4b4 <tcp_process+0x290>)
 800e242:	489d      	ldr	r0, [pc, #628]	; (800e4b8 <tcp_process+0x294>)
 800e244:	f006 fd8e 	bl	8014d64 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e248:	4b9c      	ldr	r3, [pc, #624]	; (800e4bc <tcp_process+0x298>)
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	f003 0304 	and.w	r3, r3, #4
 800e250:	2b00      	cmp	r3, #0
 800e252:	d04e      	beq.n	800e2f2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	7d1b      	ldrb	r3, [r3, #20]
 800e258:	2b02      	cmp	r3, #2
 800e25a:	d108      	bne.n	800e26e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e260:	4b97      	ldr	r3, [pc, #604]	; (800e4c0 <tcp_process+0x29c>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	429a      	cmp	r2, r3
 800e266:	d123      	bne.n	800e2b0 <tcp_process+0x8c>
        acceptable = 1;
 800e268:	2301      	movs	r3, #1
 800e26a:	76fb      	strb	r3, [r7, #27]
 800e26c:	e020      	b.n	800e2b0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e272:	4b94      	ldr	r3, [pc, #592]	; (800e4c4 <tcp_process+0x2a0>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	429a      	cmp	r2, r3
 800e278:	d102      	bne.n	800e280 <tcp_process+0x5c>
        acceptable = 1;
 800e27a:	2301      	movs	r3, #1
 800e27c:	76fb      	strb	r3, [r7, #27]
 800e27e:	e017      	b.n	800e2b0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e280:	4b90      	ldr	r3, [pc, #576]	; (800e4c4 <tcp_process+0x2a0>)
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e288:	1ad3      	subs	r3, r2, r3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	db10      	blt.n	800e2b0 <tcp_process+0x8c>
 800e28e:	4b8d      	ldr	r3, [pc, #564]	; (800e4c4 <tcp_process+0x2a0>)
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e296:	6879      	ldr	r1, [r7, #4]
 800e298:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e29a:	440b      	add	r3, r1
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	dc06      	bgt.n	800e2b0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	8b5b      	ldrh	r3, [r3, #26]
 800e2a6:	f043 0302 	orr.w	r3, r3, #2
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e2b0:	7efb      	ldrb	r3, [r7, #27]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d01b      	beq.n	800e2ee <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	7d1b      	ldrb	r3, [r3, #20]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d106      	bne.n	800e2cc <tcp_process+0xa8>
 800e2be:	4b7c      	ldr	r3, [pc, #496]	; (800e4b0 <tcp_process+0x28c>)
 800e2c0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e2c4:	4980      	ldr	r1, [pc, #512]	; (800e4c8 <tcp_process+0x2a4>)
 800e2c6:	487c      	ldr	r0, [pc, #496]	; (800e4b8 <tcp_process+0x294>)
 800e2c8:	f006 fd4c 	bl	8014d64 <iprintf>
      recv_flags |= TF_RESET;
 800e2cc:	4b7f      	ldr	r3, [pc, #508]	; (800e4cc <tcp_process+0x2a8>)
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	f043 0308 	orr.w	r3, r3, #8
 800e2d4:	b2da      	uxtb	r2, r3
 800e2d6:	4b7d      	ldr	r3, [pc, #500]	; (800e4cc <tcp_process+0x2a8>)
 800e2d8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	8b5b      	ldrh	r3, [r3, #26]
 800e2de:	f023 0301 	bic.w	r3, r3, #1
 800e2e2:	b29a      	uxth	r2, r3
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e2e8:	f06f 030d 	mvn.w	r3, #13
 800e2ec:	e37a      	b.n	800e9e4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	e378      	b.n	800e9e4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e2f2:	4b72      	ldr	r3, [pc, #456]	; (800e4bc <tcp_process+0x298>)
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	f003 0302 	and.w	r3, r3, #2
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d010      	beq.n	800e320 <tcp_process+0xfc>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	7d1b      	ldrb	r3, [r3, #20]
 800e302:	2b02      	cmp	r3, #2
 800e304:	d00c      	beq.n	800e320 <tcp_process+0xfc>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	7d1b      	ldrb	r3, [r3, #20]
 800e30a:	2b03      	cmp	r3, #3
 800e30c:	d008      	beq.n	800e320 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	8b5b      	ldrh	r3, [r3, #26]
 800e312:	f043 0302 	orr.w	r3, r3, #2
 800e316:	b29a      	uxth	r2, r3
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e31c:	2300      	movs	r3, #0
 800e31e:	e361      	b.n	800e9e4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	8b5b      	ldrh	r3, [r3, #26]
 800e324:	f003 0310 	and.w	r3, r3, #16
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d103      	bne.n	800e334 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e32c:	4b68      	ldr	r3, [pc, #416]	; (800e4d0 <tcp_process+0x2ac>)
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2200      	movs	r2, #0
 800e340:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f001 fc2f 	bl	800fba8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	7d1b      	ldrb	r3, [r3, #20]
 800e34e:	3b02      	subs	r3, #2
 800e350:	2b07      	cmp	r3, #7
 800e352:	f200 8337 	bhi.w	800e9c4 <tcp_process+0x7a0>
 800e356:	a201      	add	r2, pc, #4	; (adr r2, 800e35c <tcp_process+0x138>)
 800e358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e35c:	0800e37d 	.word	0x0800e37d
 800e360:	0800e5ad 	.word	0x0800e5ad
 800e364:	0800e725 	.word	0x0800e725
 800e368:	0800e74f 	.word	0x0800e74f
 800e36c:	0800e873 	.word	0x0800e873
 800e370:	0800e725 	.word	0x0800e725
 800e374:	0800e8ff 	.word	0x0800e8ff
 800e378:	0800e98f 	.word	0x0800e98f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e37c:	4b4f      	ldr	r3, [pc, #316]	; (800e4bc <tcp_process+0x298>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	f003 0310 	and.w	r3, r3, #16
 800e384:	2b00      	cmp	r3, #0
 800e386:	f000 80e4 	beq.w	800e552 <tcp_process+0x32e>
 800e38a:	4b4c      	ldr	r3, [pc, #304]	; (800e4bc <tcp_process+0x298>)
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	f003 0302 	and.w	r3, r3, #2
 800e392:	2b00      	cmp	r3, #0
 800e394:	f000 80dd 	beq.w	800e552 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e39c:	1c5a      	adds	r2, r3, #1
 800e39e:	4b48      	ldr	r3, [pc, #288]	; (800e4c0 <tcp_process+0x29c>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	f040 80d5 	bne.w	800e552 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e3a8:	4b46      	ldr	r3, [pc, #280]	; (800e4c4 <tcp_process+0x2a0>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	1c5a      	adds	r2, r3, #1
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e3ba:	4b41      	ldr	r3, [pc, #260]	; (800e4c0 <tcp_process+0x29c>)
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e3c2:	4b44      	ldr	r3, [pc, #272]	; (800e4d4 <tcp_process+0x2b0>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	89db      	ldrh	r3, [r3, #14]
 800e3c8:	b29a      	uxth	r2, r3
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e3dc:	4b39      	ldr	r3, [pc, #228]	; (800e4c4 <tcp_process+0x2a0>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	1e5a      	subs	r2, r3, #1
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2204      	movs	r2, #4
 800e3ea:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	3304      	adds	r3, #4
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f004 fe11 	bl	801301c <ip4_route>
 800e3fa:	4601      	mov	r1, r0
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	3304      	adds	r3, #4
 800e400:	461a      	mov	r2, r3
 800e402:	4620      	mov	r0, r4
 800e404:	f7ff f88c 	bl	800d520 <tcp_eff_send_mss_netif>
 800e408:	4603      	mov	r3, r0
 800e40a:	461a      	mov	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e414:	009a      	lsls	r2, r3, #2
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e41a:	005b      	lsls	r3, r3, #1
 800e41c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e420:	428b      	cmp	r3, r1
 800e422:	bf38      	it	cc
 800e424:	460b      	movcc	r3, r1
 800e426:	429a      	cmp	r2, r3
 800e428:	d204      	bcs.n	800e434 <tcp_process+0x210>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	b29b      	uxth	r3, r3
 800e432:	e00d      	b.n	800e450 <tcp_process+0x22c>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e438:	005b      	lsls	r3, r3, #1
 800e43a:	f241 121c 	movw	r2, #4380	; 0x111c
 800e43e:	4293      	cmp	r3, r2
 800e440:	d904      	bls.n	800e44c <tcp_process+0x228>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e446:	005b      	lsls	r3, r3, #1
 800e448:	b29b      	uxth	r3, r3
 800e44a:	e001      	b.n	800e450 <tcp_process+0x22c>
 800e44c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d106      	bne.n	800e46e <tcp_process+0x24a>
 800e460:	4b13      	ldr	r3, [pc, #76]	; (800e4b0 <tcp_process+0x28c>)
 800e462:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e466:	491c      	ldr	r1, [pc, #112]	; (800e4d8 <tcp_process+0x2b4>)
 800e468:	4813      	ldr	r0, [pc, #76]	; (800e4b8 <tcp_process+0x294>)
 800e46a:	f006 fc7b 	bl	8014d64 <iprintf>
        --pcb->snd_queuelen;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e474:	3b01      	subs	r3, #1
 800e476:	b29a      	uxth	r2, r3
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e482:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e484:	69fb      	ldr	r3, [r7, #28]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d12a      	bne.n	800e4e0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e48e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d106      	bne.n	800e4a4 <tcp_process+0x280>
 800e496:	4b06      	ldr	r3, [pc, #24]	; (800e4b0 <tcp_process+0x28c>)
 800e498:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e49c:	490f      	ldr	r1, [pc, #60]	; (800e4dc <tcp_process+0x2b8>)
 800e49e:	4806      	ldr	r0, [pc, #24]	; (800e4b8 <tcp_process+0x294>)
 800e4a0:	f006 fc60 	bl	8014d64 <iprintf>
          pcb->unsent = rseg->next;
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	66da      	str	r2, [r3, #108]	; 0x6c
 800e4ac:	e01c      	b.n	800e4e8 <tcp_process+0x2c4>
 800e4ae:	bf00      	nop
 800e4b0:	080173b0 	.word	0x080173b0
 800e4b4:	080175e8 	.word	0x080175e8
 800e4b8:	080173fc 	.word	0x080173fc
 800e4bc:	20017aa8 	.word	0x20017aa8
 800e4c0:	20017aa0 	.word	0x20017aa0
 800e4c4:	20017a9c 	.word	0x20017a9c
 800e4c8:	08017604 	.word	0x08017604
 800e4cc:	20017aa9 	.word	0x20017aa9
 800e4d0:	20017a64 	.word	0x20017a64
 800e4d4:	20017a8c 	.word	0x20017a8c
 800e4d8:	08017624 	.word	0x08017624
 800e4dc:	0801763c 	.word	0x0801763c
        } else {
          pcb->unacked = rseg->next;
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e4e8:	69f8      	ldr	r0, [r7, #28]
 800e4ea:	f7fe fd22 	bl	800cf32 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d104      	bne.n	800e500 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4fc:	861a      	strh	r2, [r3, #48]	; 0x30
 800e4fe:	e006      	b.n	800e50e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e514:	2b00      	cmp	r3, #0
 800e516:	d00a      	beq.n	800e52e <tcp_process+0x30a>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	6910      	ldr	r0, [r2, #16]
 800e522:	2200      	movs	r2, #0
 800e524:	6879      	ldr	r1, [r7, #4]
 800e526:	4798      	blx	r3
 800e528:	4603      	mov	r3, r0
 800e52a:	76bb      	strb	r3, [r7, #26]
 800e52c:	e001      	b.n	800e532 <tcp_process+0x30e>
 800e52e:	2300      	movs	r3, #0
 800e530:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e532:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e536:	f113 0f0d 	cmn.w	r3, #13
 800e53a:	d102      	bne.n	800e542 <tcp_process+0x31e>
          return ERR_ABRT;
 800e53c:	f06f 030c 	mvn.w	r3, #12
 800e540:	e250      	b.n	800e9e4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	8b5b      	ldrh	r3, [r3, #26]
 800e546:	f043 0302 	orr.w	r3, r3, #2
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e550:	e23a      	b.n	800e9c8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e552:	4b98      	ldr	r3, [pc, #608]	; (800e7b4 <tcp_process+0x590>)
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	f003 0310 	and.w	r3, r3, #16
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	f000 8234 	beq.w	800e9c8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e560:	4b95      	ldr	r3, [pc, #596]	; (800e7b8 <tcp_process+0x594>)
 800e562:	6819      	ldr	r1, [r3, #0]
 800e564:	4b95      	ldr	r3, [pc, #596]	; (800e7bc <tcp_process+0x598>)
 800e566:	881b      	ldrh	r3, [r3, #0]
 800e568:	461a      	mov	r2, r3
 800e56a:	4b95      	ldr	r3, [pc, #596]	; (800e7c0 <tcp_process+0x59c>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e570:	4b94      	ldr	r3, [pc, #592]	; (800e7c4 <tcp_process+0x5a0>)
 800e572:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e574:	885b      	ldrh	r3, [r3, #2]
 800e576:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e578:	4a92      	ldr	r2, [pc, #584]	; (800e7c4 <tcp_process+0x5a0>)
 800e57a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e57c:	8812      	ldrh	r2, [r2, #0]
 800e57e:	b292      	uxth	r2, r2
 800e580:	9202      	str	r2, [sp, #8]
 800e582:	9301      	str	r3, [sp, #4]
 800e584:	4b90      	ldr	r3, [pc, #576]	; (800e7c8 <tcp_process+0x5a4>)
 800e586:	9300      	str	r3, [sp, #0]
 800e588:	4b90      	ldr	r3, [pc, #576]	; (800e7cc <tcp_process+0x5a8>)
 800e58a:	4602      	mov	r2, r0
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f002 fc85 	bl	8010e9c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e598:	2b05      	cmp	r3, #5
 800e59a:	f200 8215 	bhi.w	800e9c8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f002 fa4f 	bl	8010a48 <tcp_rexmit_rto>
      break;
 800e5aa:	e20d      	b.n	800e9c8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e5ac:	4b81      	ldr	r3, [pc, #516]	; (800e7b4 <tcp_process+0x590>)
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	f003 0310 	and.w	r3, r3, #16
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f000 80a1 	beq.w	800e6fc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e5ba:	4b7f      	ldr	r3, [pc, #508]	; (800e7b8 <tcp_process+0x594>)
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5c2:	1ad3      	subs	r3, r2, r3
 800e5c4:	3b01      	subs	r3, #1
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	db7e      	blt.n	800e6c8 <tcp_process+0x4a4>
 800e5ca:	4b7b      	ldr	r3, [pc, #492]	; (800e7b8 <tcp_process+0x594>)
 800e5cc:	681a      	ldr	r2, [r3, #0]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5d2:	1ad3      	subs	r3, r2, r3
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	dc77      	bgt.n	800e6c8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2204      	movs	r2, #4
 800e5dc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d102      	bne.n	800e5ec <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e5e6:	23fa      	movs	r3, #250	; 0xfa
 800e5e8:	76bb      	strb	r3, [r7, #26]
 800e5ea:	e01d      	b.n	800e628 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5f0:	699b      	ldr	r3, [r3, #24]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d106      	bne.n	800e604 <tcp_process+0x3e0>
 800e5f6:	4b76      	ldr	r3, [pc, #472]	; (800e7d0 <tcp_process+0x5ac>)
 800e5f8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e5fc:	4975      	ldr	r1, [pc, #468]	; (800e7d4 <tcp_process+0x5b0>)
 800e5fe:	4876      	ldr	r0, [pc, #472]	; (800e7d8 <tcp_process+0x5b4>)
 800e600:	f006 fbb0 	bl	8014d64 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e608:	699b      	ldr	r3, [r3, #24]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d00a      	beq.n	800e624 <tcp_process+0x400>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e612:	699b      	ldr	r3, [r3, #24]
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	6910      	ldr	r0, [r2, #16]
 800e618:	2200      	movs	r2, #0
 800e61a:	6879      	ldr	r1, [r7, #4]
 800e61c:	4798      	blx	r3
 800e61e:	4603      	mov	r3, r0
 800e620:	76bb      	strb	r3, [r7, #26]
 800e622:	e001      	b.n	800e628 <tcp_process+0x404>
 800e624:	23f0      	movs	r3, #240	; 0xf0
 800e626:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e628:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00a      	beq.n	800e646 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e630:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e634:	f113 0f0d 	cmn.w	r3, #13
 800e638:	d002      	beq.n	800e640 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f7fd ff8e 	bl	800c55c <tcp_abort>
            }
            return ERR_ABRT;
 800e640:	f06f 030c 	mvn.w	r3, #12
 800e644:	e1ce      	b.n	800e9e4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 fae0 	bl	800ec0c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e64c:	4b63      	ldr	r3, [pc, #396]	; (800e7dc <tcp_process+0x5b8>)
 800e64e:	881b      	ldrh	r3, [r3, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d005      	beq.n	800e660 <tcp_process+0x43c>
            recv_acked--;
 800e654:	4b61      	ldr	r3, [pc, #388]	; (800e7dc <tcp_process+0x5b8>)
 800e656:	881b      	ldrh	r3, [r3, #0]
 800e658:	3b01      	subs	r3, #1
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	4b5f      	ldr	r3, [pc, #380]	; (800e7dc <tcp_process+0x5b8>)
 800e65e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e664:	009a      	lsls	r2, r3, #2
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e66a:	005b      	lsls	r3, r3, #1
 800e66c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e670:	428b      	cmp	r3, r1
 800e672:	bf38      	it	cc
 800e674:	460b      	movcc	r3, r1
 800e676:	429a      	cmp	r2, r3
 800e678:	d204      	bcs.n	800e684 <tcp_process+0x460>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	b29b      	uxth	r3, r3
 800e682:	e00d      	b.n	800e6a0 <tcp_process+0x47c>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e688:	005b      	lsls	r3, r3, #1
 800e68a:	f241 121c 	movw	r2, #4380	; 0x111c
 800e68e:	4293      	cmp	r3, r2
 800e690:	d904      	bls.n	800e69c <tcp_process+0x478>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e696:	005b      	lsls	r3, r3, #1
 800e698:	b29b      	uxth	r3, r3
 800e69a:	e001      	b.n	800e6a0 <tcp_process+0x47c>
 800e69c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e6a6:	4b4e      	ldr	r3, [pc, #312]	; (800e7e0 <tcp_process+0x5bc>)
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	f003 0320 	and.w	r3, r3, #32
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d037      	beq.n	800e722 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	8b5b      	ldrh	r3, [r3, #26]
 800e6b6:	f043 0302 	orr.w	r3, r3, #2
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2207      	movs	r2, #7
 800e6c4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e6c6:	e02c      	b.n	800e722 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6c8:	4b3b      	ldr	r3, [pc, #236]	; (800e7b8 <tcp_process+0x594>)
 800e6ca:	6819      	ldr	r1, [r3, #0]
 800e6cc:	4b3b      	ldr	r3, [pc, #236]	; (800e7bc <tcp_process+0x598>)
 800e6ce:	881b      	ldrh	r3, [r3, #0]
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	4b3b      	ldr	r3, [pc, #236]	; (800e7c0 <tcp_process+0x59c>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6d8:	4b3a      	ldr	r3, [pc, #232]	; (800e7c4 <tcp_process+0x5a0>)
 800e6da:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6dc:	885b      	ldrh	r3, [r3, #2]
 800e6de:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6e0:	4a38      	ldr	r2, [pc, #224]	; (800e7c4 <tcp_process+0x5a0>)
 800e6e2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6e4:	8812      	ldrh	r2, [r2, #0]
 800e6e6:	b292      	uxth	r2, r2
 800e6e8:	9202      	str	r2, [sp, #8]
 800e6ea:	9301      	str	r3, [sp, #4]
 800e6ec:	4b36      	ldr	r3, [pc, #216]	; (800e7c8 <tcp_process+0x5a4>)
 800e6ee:	9300      	str	r3, [sp, #0]
 800e6f0:	4b36      	ldr	r3, [pc, #216]	; (800e7cc <tcp_process+0x5a8>)
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f002 fbd1 	bl	8010e9c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e6fa:	e167      	b.n	800e9cc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e6fc:	4b2d      	ldr	r3, [pc, #180]	; (800e7b4 <tcp_process+0x590>)
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	f003 0302 	and.w	r3, r3, #2
 800e704:	2b00      	cmp	r3, #0
 800e706:	f000 8161 	beq.w	800e9cc <tcp_process+0x7a8>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70e:	1e5a      	subs	r2, r3, #1
 800e710:	4b2b      	ldr	r3, [pc, #172]	; (800e7c0 <tcp_process+0x59c>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	429a      	cmp	r2, r3
 800e716:	f040 8159 	bne.w	800e9cc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f002 f9b6 	bl	8010a8c <tcp_rexmit>
      break;
 800e720:	e154      	b.n	800e9cc <tcp_process+0x7a8>
 800e722:	e153      	b.n	800e9cc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f000 fa71 	bl	800ec0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e72a:	4b2d      	ldr	r3, [pc, #180]	; (800e7e0 <tcp_process+0x5bc>)
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	f003 0320 	and.w	r3, r3, #32
 800e732:	2b00      	cmp	r3, #0
 800e734:	f000 814c 	beq.w	800e9d0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	8b5b      	ldrh	r3, [r3, #26]
 800e73c:	f043 0302 	orr.w	r3, r3, #2
 800e740:	b29a      	uxth	r2, r3
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2207      	movs	r2, #7
 800e74a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e74c:	e140      	b.n	800e9d0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 fa5c 	bl	800ec0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e754:	4b22      	ldr	r3, [pc, #136]	; (800e7e0 <tcp_process+0x5bc>)
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	f003 0320 	and.w	r3, r3, #32
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d071      	beq.n	800e844 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e760:	4b14      	ldr	r3, [pc, #80]	; (800e7b4 <tcp_process+0x590>)
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	f003 0310 	and.w	r3, r3, #16
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d060      	beq.n	800e82e <tcp_process+0x60a>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e770:	4b11      	ldr	r3, [pc, #68]	; (800e7b8 <tcp_process+0x594>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	429a      	cmp	r2, r3
 800e776:	d15a      	bne.n	800e82e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d156      	bne.n	800e82e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	8b5b      	ldrh	r3, [r3, #26]
 800e784:	f043 0302 	orr.w	r3, r3, #2
 800e788:	b29a      	uxth	r2, r3
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f7fe fdbc 	bl	800d30c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e794:	4b13      	ldr	r3, [pc, #76]	; (800e7e4 <tcp_process+0x5c0>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d105      	bne.n	800e7aa <tcp_process+0x586>
 800e79e:	4b11      	ldr	r3, [pc, #68]	; (800e7e4 <tcp_process+0x5c0>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	4a0f      	ldr	r2, [pc, #60]	; (800e7e4 <tcp_process+0x5c0>)
 800e7a6:	6013      	str	r3, [r2, #0]
 800e7a8:	e02e      	b.n	800e808 <tcp_process+0x5e4>
 800e7aa:	4b0e      	ldr	r3, [pc, #56]	; (800e7e4 <tcp_process+0x5c0>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	617b      	str	r3, [r7, #20]
 800e7b0:	e027      	b.n	800e802 <tcp_process+0x5de>
 800e7b2:	bf00      	nop
 800e7b4:	20017aa8 	.word	0x20017aa8
 800e7b8:	20017aa0 	.word	0x20017aa0
 800e7bc:	20017aa6 	.word	0x20017aa6
 800e7c0:	20017a9c 	.word	0x20017a9c
 800e7c4:	20017a8c 	.word	0x20017a8c
 800e7c8:	20013960 	.word	0x20013960
 800e7cc:	20013964 	.word	0x20013964
 800e7d0:	080173b0 	.word	0x080173b0
 800e7d4:	08017650 	.word	0x08017650
 800e7d8:	080173fc 	.word	0x080173fc
 800e7dc:	20017aa4 	.word	0x20017aa4
 800e7e0:	20017aa9 	.word	0x20017aa9
 800e7e4:	20017a70 	.word	0x20017a70
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d104      	bne.n	800e7fc <tcp_process+0x5d8>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	68da      	ldr	r2, [r3, #12]
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	60da      	str	r2, [r3, #12]
 800e7fa:	e005      	b.n	800e808 <tcp_process+0x5e4>
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	617b      	str	r3, [r7, #20]
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d1ef      	bne.n	800e7e8 <tcp_process+0x5c4>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	60da      	str	r2, [r3, #12]
 800e80e:	4b77      	ldr	r3, [pc, #476]	; (800e9ec <tcp_process+0x7c8>)
 800e810:	2201      	movs	r2, #1
 800e812:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	220a      	movs	r2, #10
 800e818:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e81a:	4b75      	ldr	r3, [pc, #468]	; (800e9f0 <tcp_process+0x7cc>)
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	60da      	str	r2, [r3, #12]
 800e822:	4a73      	ldr	r2, [pc, #460]	; (800e9f0 <tcp_process+0x7cc>)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6013      	str	r3, [r2, #0]
 800e828:	f002 fcfa 	bl	8011220 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e82c:	e0d2      	b.n	800e9d4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	8b5b      	ldrh	r3, [r3, #26]
 800e832:	f043 0302 	orr.w	r3, r3, #2
 800e836:	b29a      	uxth	r2, r3
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2208      	movs	r2, #8
 800e840:	751a      	strb	r2, [r3, #20]
      break;
 800e842:	e0c7      	b.n	800e9d4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e844:	4b6b      	ldr	r3, [pc, #428]	; (800e9f4 <tcp_process+0x7d0>)
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	f003 0310 	and.w	r3, r3, #16
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f000 80c1 	beq.w	800e9d4 <tcp_process+0x7b0>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e856:	4b68      	ldr	r3, [pc, #416]	; (800e9f8 <tcp_process+0x7d4>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	f040 80ba 	bne.w	800e9d4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e864:	2b00      	cmp	r3, #0
 800e866:	f040 80b5 	bne.w	800e9d4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2206      	movs	r2, #6
 800e86e:	751a      	strb	r2, [r3, #20]
      break;
 800e870:	e0b0      	b.n	800e9d4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 f9ca 	bl	800ec0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e878:	4b60      	ldr	r3, [pc, #384]	; (800e9fc <tcp_process+0x7d8>)
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	f003 0320 	and.w	r3, r3, #32
 800e880:	2b00      	cmp	r3, #0
 800e882:	f000 80a9 	beq.w	800e9d8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	8b5b      	ldrh	r3, [r3, #26]
 800e88a:	f043 0302 	orr.w	r3, r3, #2
 800e88e:	b29a      	uxth	r2, r3
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7fe fd39 	bl	800d30c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e89a:	4b59      	ldr	r3, [pc, #356]	; (800ea00 <tcp_process+0x7dc>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d105      	bne.n	800e8b0 <tcp_process+0x68c>
 800e8a4:	4b56      	ldr	r3, [pc, #344]	; (800ea00 <tcp_process+0x7dc>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	68db      	ldr	r3, [r3, #12]
 800e8aa:	4a55      	ldr	r2, [pc, #340]	; (800ea00 <tcp_process+0x7dc>)
 800e8ac:	6013      	str	r3, [r2, #0]
 800e8ae:	e013      	b.n	800e8d8 <tcp_process+0x6b4>
 800e8b0:	4b53      	ldr	r3, [pc, #332]	; (800ea00 <tcp_process+0x7dc>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	613b      	str	r3, [r7, #16]
 800e8b6:	e00c      	b.n	800e8d2 <tcp_process+0x6ae>
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d104      	bne.n	800e8cc <tcp_process+0x6a8>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	68da      	ldr	r2, [r3, #12]
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	60da      	str	r2, [r3, #12]
 800e8ca:	e005      	b.n	800e8d8 <tcp_process+0x6b4>
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	68db      	ldr	r3, [r3, #12]
 800e8d0:	613b      	str	r3, [r7, #16]
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d1ef      	bne.n	800e8b8 <tcp_process+0x694>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	60da      	str	r2, [r3, #12]
 800e8de:	4b43      	ldr	r3, [pc, #268]	; (800e9ec <tcp_process+0x7c8>)
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	220a      	movs	r2, #10
 800e8e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e8ea:	4b41      	ldr	r3, [pc, #260]	; (800e9f0 <tcp_process+0x7cc>)
 800e8ec:	681a      	ldr	r2, [r3, #0]
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	60da      	str	r2, [r3, #12]
 800e8f2:	4a3f      	ldr	r2, [pc, #252]	; (800e9f0 <tcp_process+0x7cc>)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6013      	str	r3, [r2, #0]
 800e8f8:	f002 fc92 	bl	8011220 <tcp_timer_needed>
      }
      break;
 800e8fc:	e06c      	b.n	800e9d8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f000 f984 	bl	800ec0c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e904:	4b3b      	ldr	r3, [pc, #236]	; (800e9f4 <tcp_process+0x7d0>)
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	f003 0310 	and.w	r3, r3, #16
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d065      	beq.n	800e9dc <tcp_process+0x7b8>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e914:	4b38      	ldr	r3, [pc, #224]	; (800e9f8 <tcp_process+0x7d4>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	429a      	cmp	r2, r3
 800e91a:	d15f      	bne.n	800e9dc <tcp_process+0x7b8>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e920:	2b00      	cmp	r3, #0
 800e922:	d15b      	bne.n	800e9dc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f7fe fcf1 	bl	800d30c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e92a:	4b35      	ldr	r3, [pc, #212]	; (800ea00 <tcp_process+0x7dc>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	429a      	cmp	r2, r3
 800e932:	d105      	bne.n	800e940 <tcp_process+0x71c>
 800e934:	4b32      	ldr	r3, [pc, #200]	; (800ea00 <tcp_process+0x7dc>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	68db      	ldr	r3, [r3, #12]
 800e93a:	4a31      	ldr	r2, [pc, #196]	; (800ea00 <tcp_process+0x7dc>)
 800e93c:	6013      	str	r3, [r2, #0]
 800e93e:	e013      	b.n	800e968 <tcp_process+0x744>
 800e940:	4b2f      	ldr	r3, [pc, #188]	; (800ea00 <tcp_process+0x7dc>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	60fb      	str	r3, [r7, #12]
 800e946:	e00c      	b.n	800e962 <tcp_process+0x73e>
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	429a      	cmp	r2, r3
 800e950:	d104      	bne.n	800e95c <tcp_process+0x738>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	68da      	ldr	r2, [r3, #12]
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	60da      	str	r2, [r3, #12]
 800e95a:	e005      	b.n	800e968 <tcp_process+0x744>
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	60fb      	str	r3, [r7, #12]
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d1ef      	bne.n	800e948 <tcp_process+0x724>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	60da      	str	r2, [r3, #12]
 800e96e:	4b1f      	ldr	r3, [pc, #124]	; (800e9ec <tcp_process+0x7c8>)
 800e970:	2201      	movs	r2, #1
 800e972:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	220a      	movs	r2, #10
 800e978:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e97a:	4b1d      	ldr	r3, [pc, #116]	; (800e9f0 <tcp_process+0x7cc>)
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	60da      	str	r2, [r3, #12]
 800e982:	4a1b      	ldr	r2, [pc, #108]	; (800e9f0 <tcp_process+0x7cc>)
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6013      	str	r3, [r2, #0]
 800e988:	f002 fc4a 	bl	8011220 <tcp_timer_needed>
      }
      break;
 800e98c:	e026      	b.n	800e9dc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 f93c 	bl	800ec0c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e994:	4b17      	ldr	r3, [pc, #92]	; (800e9f4 <tcp_process+0x7d0>)
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	f003 0310 	and.w	r3, r3, #16
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d01f      	beq.n	800e9e0 <tcp_process+0x7bc>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9a4:	4b14      	ldr	r3, [pc, #80]	; (800e9f8 <tcp_process+0x7d4>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d119      	bne.n	800e9e0 <tcp_process+0x7bc>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d115      	bne.n	800e9e0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e9b4:	4b11      	ldr	r3, [pc, #68]	; (800e9fc <tcp_process+0x7d8>)
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	f043 0310 	orr.w	r3, r3, #16
 800e9bc:	b2da      	uxtb	r2, r3
 800e9be:	4b0f      	ldr	r3, [pc, #60]	; (800e9fc <tcp_process+0x7d8>)
 800e9c0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e9c2:	e00d      	b.n	800e9e0 <tcp_process+0x7bc>
    default:
      break;
 800e9c4:	bf00      	nop
 800e9c6:	e00c      	b.n	800e9e2 <tcp_process+0x7be>
      break;
 800e9c8:	bf00      	nop
 800e9ca:	e00a      	b.n	800e9e2 <tcp_process+0x7be>
      break;
 800e9cc:	bf00      	nop
 800e9ce:	e008      	b.n	800e9e2 <tcp_process+0x7be>
      break;
 800e9d0:	bf00      	nop
 800e9d2:	e006      	b.n	800e9e2 <tcp_process+0x7be>
      break;
 800e9d4:	bf00      	nop
 800e9d6:	e004      	b.n	800e9e2 <tcp_process+0x7be>
      break;
 800e9d8:	bf00      	nop
 800e9da:	e002      	b.n	800e9e2 <tcp_process+0x7be>
      break;
 800e9dc:	bf00      	nop
 800e9de:	e000      	b.n	800e9e2 <tcp_process+0x7be>
      break;
 800e9e0:	bf00      	nop
  }
  return ERR_OK;
 800e9e2:	2300      	movs	r3, #0
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3724      	adds	r7, #36	; 0x24
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd90      	pop	{r4, r7, pc}
 800e9ec:	20017a78 	.word	0x20017a78
 800e9f0:	20017a74 	.word	0x20017a74
 800e9f4:	20017aa8 	.word	0x20017aa8
 800e9f8:	20017aa0 	.word	0x20017aa0
 800e9fc:	20017aa9 	.word	0x20017aa9
 800ea00:	20017a70 	.word	0x20017a70

0800ea04 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ea04:	b590      	push	{r4, r7, lr}
 800ea06:	b085      	sub	sp, #20
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d106      	bne.n	800ea22 <tcp_oos_insert_segment+0x1e>
 800ea14:	4b3b      	ldr	r3, [pc, #236]	; (800eb04 <tcp_oos_insert_segment+0x100>)
 800ea16:	f240 421f 	movw	r2, #1055	; 0x41f
 800ea1a:	493b      	ldr	r1, [pc, #236]	; (800eb08 <tcp_oos_insert_segment+0x104>)
 800ea1c:	483b      	ldr	r0, [pc, #236]	; (800eb0c <tcp_oos_insert_segment+0x108>)
 800ea1e:	f006 f9a1 	bl	8014d64 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	899b      	ldrh	r3, [r3, #12]
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fb fc00 	bl	800a230 <lwip_htons>
 800ea30:	4603      	mov	r3, r0
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	f003 0301 	and.w	r3, r3, #1
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d028      	beq.n	800ea8e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ea3c:	6838      	ldr	r0, [r7, #0]
 800ea3e:	f7fe fa63 	bl	800cf08 <tcp_segs_free>
    next = NULL;
 800ea42:	2300      	movs	r3, #0
 800ea44:	603b      	str	r3, [r7, #0]
 800ea46:	e056      	b.n	800eaf6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	899b      	ldrh	r3, [r3, #12]
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7fb fbed 	bl	800a230 <lwip_htons>
 800ea56:	4603      	mov	r3, r0
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	f003 0301 	and.w	r3, r3, #1
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00d      	beq.n	800ea7e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	68db      	ldr	r3, [r3, #12]
 800ea66:	899b      	ldrh	r3, [r3, #12]
 800ea68:	b29c      	uxth	r4, r3
 800ea6a:	2001      	movs	r0, #1
 800ea6c:	f7fb fbe0 	bl	800a230 <lwip_htons>
 800ea70:	4603      	mov	r3, r0
 800ea72:	461a      	mov	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	68db      	ldr	r3, [r3, #12]
 800ea78:	4322      	orrs	r2, r4
 800ea7a:	b292      	uxth	r2, r2
 800ea7c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	f7fe fa52 	bl	800cf32 <tcp_seg_free>
    while (next &&
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d00e      	beq.n	800eab2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	891b      	ldrh	r3, [r3, #8]
 800ea98:	461a      	mov	r2, r3
 800ea9a:	4b1d      	ldr	r3, [pc, #116]	; (800eb10 <tcp_oos_insert_segment+0x10c>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	441a      	add	r2, r3
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	68db      	ldr	r3, [r3, #12]
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	6839      	ldr	r1, [r7, #0]
 800eaa8:	8909      	ldrh	r1, [r1, #8]
 800eaaa:	440b      	add	r3, r1
 800eaac:	1ad3      	subs	r3, r2, r3
    while (next &&
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	daca      	bge.n	800ea48 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d01e      	beq.n	800eaf6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	891b      	ldrh	r3, [r3, #8]
 800eabc:	461a      	mov	r2, r3
 800eabe:	4b14      	ldr	r3, [pc, #80]	; (800eb10 <tcp_oos_insert_segment+0x10c>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	441a      	add	r2, r3
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	68db      	ldr	r3, [r3, #12]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	1ad3      	subs	r3, r2, r3
    if (next &&
 800eacc:	2b00      	cmp	r3, #0
 800eace:	dd12      	ble.n	800eaf6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	68db      	ldr	r3, [r3, #12]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	b29a      	uxth	r2, r3
 800ead8:	4b0d      	ldr	r3, [pc, #52]	; (800eb10 <tcp_oos_insert_segment+0x10c>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	b29b      	uxth	r3, r3
 800eade:	1ad3      	subs	r3, r2, r3
 800eae0:	b29a      	uxth	r2, r3
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	685a      	ldr	r2, [r3, #4]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	891b      	ldrh	r3, [r3, #8]
 800eaee:	4619      	mov	r1, r3
 800eaf0:	4610      	mov	r0, r2
 800eaf2:	f7fc fe09 	bl	800b708 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	683a      	ldr	r2, [r7, #0]
 800eafa:	601a      	str	r2, [r3, #0]
}
 800eafc:	bf00      	nop
 800eafe:	3714      	adds	r7, #20
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd90      	pop	{r4, r7, pc}
 800eb04:	080173b0 	.word	0x080173b0
 800eb08:	08017670 	.word	0x08017670
 800eb0c:	080173fc 	.word	0x080173fc
 800eb10:	20017a9c 	.word	0x20017a9c

0800eb14 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800eb14:	b5b0      	push	{r4, r5, r7, lr}
 800eb16:	b086      	sub	sp, #24
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	607a      	str	r2, [r7, #4]
 800eb20:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800eb22:	e03e      	b.n	800eba2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7fc fffc 	bl	800bb30 <pbuf_clen>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb42:	8a7a      	ldrh	r2, [r7, #18]
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d906      	bls.n	800eb56 <tcp_free_acked_segments+0x42>
 800eb48:	4b2a      	ldr	r3, [pc, #168]	; (800ebf4 <tcp_free_acked_segments+0xe0>)
 800eb4a:	f240 4257 	movw	r2, #1111	; 0x457
 800eb4e:	492a      	ldr	r1, [pc, #168]	; (800ebf8 <tcp_free_acked_segments+0xe4>)
 800eb50:	482a      	ldr	r0, [pc, #168]	; (800ebfc <tcp_free_acked_segments+0xe8>)
 800eb52:	f006 f907 	bl	8014d64 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800eb5c:	8a7b      	ldrh	r3, [r7, #18]
 800eb5e:	1ad3      	subs	r3, r2, r3
 800eb60:	b29a      	uxth	r2, r3
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	891a      	ldrh	r2, [r3, #8]
 800eb6c:	4b24      	ldr	r3, [pc, #144]	; (800ec00 <tcp_free_acked_segments+0xec>)
 800eb6e:	881b      	ldrh	r3, [r3, #0]
 800eb70:	4413      	add	r3, r2
 800eb72:	b29a      	uxth	r2, r3
 800eb74:	4b22      	ldr	r3, [pc, #136]	; (800ec00 <tcp_free_acked_segments+0xec>)
 800eb76:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800eb78:	6978      	ldr	r0, [r7, #20]
 800eb7a:	f7fe f9da 	bl	800cf32 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d00c      	beq.n	800eba2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d109      	bne.n	800eba2 <tcp_free_acked_segments+0x8e>
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d106      	bne.n	800eba2 <tcp_free_acked_segments+0x8e>
 800eb94:	4b17      	ldr	r3, [pc, #92]	; (800ebf4 <tcp_free_acked_segments+0xe0>)
 800eb96:	f240 4261 	movw	r2, #1121	; 0x461
 800eb9a:	491a      	ldr	r1, [pc, #104]	; (800ec04 <tcp_free_acked_segments+0xf0>)
 800eb9c:	4817      	ldr	r0, [pc, #92]	; (800ebfc <tcp_free_acked_segments+0xe8>)
 800eb9e:	f006 f8e1 	bl	8014d64 <iprintf>
  while (seg_list != NULL &&
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d020      	beq.n	800ebea <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7fb fb53 	bl	800a25a <lwip_htonl>
 800ebb4:	4604      	mov	r4, r0
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	891b      	ldrh	r3, [r3, #8]
 800ebba:	461d      	mov	r5, r3
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	68db      	ldr	r3, [r3, #12]
 800ebc0:	899b      	ldrh	r3, [r3, #12]
 800ebc2:	b29b      	uxth	r3, r3
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7fb fb33 	bl	800a230 <lwip_htons>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	f003 0303 	and.w	r3, r3, #3
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d001      	beq.n	800ebda <tcp_free_acked_segments+0xc6>
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	e000      	b.n	800ebdc <tcp_free_acked_segments+0xc8>
 800ebda:	2300      	movs	r3, #0
 800ebdc:	442b      	add	r3, r5
 800ebde:	18e2      	adds	r2, r4, r3
 800ebe0:	4b09      	ldr	r3, [pc, #36]	; (800ec08 <tcp_free_acked_segments+0xf4>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	dd9c      	ble.n	800eb24 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ebea:	68bb      	ldr	r3, [r7, #8]
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3718      	adds	r7, #24
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bdb0      	pop	{r4, r5, r7, pc}
 800ebf4:	080173b0 	.word	0x080173b0
 800ebf8:	08017698 	.word	0x08017698
 800ebfc:	080173fc 	.word	0x080173fc
 800ec00:	20017aa4 	.word	0x20017aa4
 800ec04:	080176c0 	.word	0x080176c0
 800ec08:	20017aa0 	.word	0x20017aa0

0800ec0c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ec0c:	b5b0      	push	{r4, r5, r7, lr}
 800ec0e:	b094      	sub	sp, #80	; 0x50
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ec14:	2300      	movs	r3, #0
 800ec16:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d106      	bne.n	800ec2c <tcp_receive+0x20>
 800ec1e:	4b91      	ldr	r3, [pc, #580]	; (800ee64 <tcp_receive+0x258>)
 800ec20:	f240 427b 	movw	r2, #1147	; 0x47b
 800ec24:	4990      	ldr	r1, [pc, #576]	; (800ee68 <tcp_receive+0x25c>)
 800ec26:	4891      	ldr	r0, [pc, #580]	; (800ee6c <tcp_receive+0x260>)
 800ec28:	f006 f89c 	bl	8014d64 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	7d1b      	ldrb	r3, [r3, #20]
 800ec30:	2b03      	cmp	r3, #3
 800ec32:	d806      	bhi.n	800ec42 <tcp_receive+0x36>
 800ec34:	4b8b      	ldr	r3, [pc, #556]	; (800ee64 <tcp_receive+0x258>)
 800ec36:	f240 427c 	movw	r2, #1148	; 0x47c
 800ec3a:	498d      	ldr	r1, [pc, #564]	; (800ee70 <tcp_receive+0x264>)
 800ec3c:	488b      	ldr	r0, [pc, #556]	; (800ee6c <tcp_receive+0x260>)
 800ec3e:	f006 f891 	bl	8014d64 <iprintf>

  if (flags & TCP_ACK) {
 800ec42:	4b8c      	ldr	r3, [pc, #560]	; (800ee74 <tcp_receive+0x268>)
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	f003 0310 	and.w	r3, r3, #16
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	f000 8264 	beq.w	800f118 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec56:	461a      	mov	r2, r3
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec5c:	4413      	add	r3, r2
 800ec5e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec64:	4b84      	ldr	r3, [pc, #528]	; (800ee78 <tcp_receive+0x26c>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	1ad3      	subs	r3, r2, r3
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	db1b      	blt.n	800eca6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec72:	4b81      	ldr	r3, [pc, #516]	; (800ee78 <tcp_receive+0x26c>)
 800ec74:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d106      	bne.n	800ec88 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ec7e:	4b7f      	ldr	r3, [pc, #508]	; (800ee7c <tcp_receive+0x270>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	1ad3      	subs	r3, r2, r3
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	db0e      	blt.n	800eca6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ec8c:	4b7b      	ldr	r3, [pc, #492]	; (800ee7c <tcp_receive+0x270>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d125      	bne.n	800ece0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ec94:	4b7a      	ldr	r3, [pc, #488]	; (800ee80 <tcp_receive+0x274>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	89db      	ldrh	r3, [r3, #14]
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d91c      	bls.n	800ece0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800eca6:	4b76      	ldr	r3, [pc, #472]	; (800ee80 <tcp_receive+0x274>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	89db      	ldrh	r3, [r3, #14]
 800ecac:	b29a      	uxth	r2, r3
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d205      	bcs.n	800ecd0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ecd0:	4b69      	ldr	r3, [pc, #420]	; (800ee78 <tcp_receive+0x26c>)
 800ecd2:	681a      	ldr	r2, [r3, #0]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ecd8:	4b68      	ldr	r3, [pc, #416]	; (800ee7c <tcp_receive+0x270>)
 800ecda:	681a      	ldr	r2, [r3, #0]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ece0:	4b66      	ldr	r3, [pc, #408]	; (800ee7c <tcp_receive+0x270>)
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ece8:	1ad3      	subs	r3, r2, r3
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	dc58      	bgt.n	800eda0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ecee:	4b65      	ldr	r3, [pc, #404]	; (800ee84 <tcp_receive+0x278>)
 800ecf0:	881b      	ldrh	r3, [r3, #0]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d14b      	bne.n	800ed8e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecfa:	687a      	ldr	r2, [r7, #4]
 800ecfc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ed00:	4413      	add	r3, r2
 800ed02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d142      	bne.n	800ed8e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	db3d      	blt.n	800ed8e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed16:	4b59      	ldr	r3, [pc, #356]	; (800ee7c <tcp_receive+0x270>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d137      	bne.n	800ed8e <tcp_receive+0x182>
              found_dupack = 1;
 800ed1e:	2301      	movs	r3, #1
 800ed20:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed28:	2bff      	cmp	r3, #255	; 0xff
 800ed2a:	d007      	beq.n	800ed3c <tcp_receive+0x130>
                ++pcb->dupacks;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed32:	3301      	adds	r3, #1
 800ed34:	b2da      	uxtb	r2, r3
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed42:	2b03      	cmp	r3, #3
 800ed44:	d91b      	bls.n	800ed7e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed50:	4413      	add	r3, r2
 800ed52:	b29a      	uxth	r2, r3
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d30a      	bcc.n	800ed74 <tcp_receive+0x168>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed68:	4413      	add	r3, r2
 800ed6a:	b29a      	uxth	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ed72:	e004      	b.n	800ed7e <tcp_receive+0x172>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed84:	2b02      	cmp	r3, #2
 800ed86:	d902      	bls.n	800ed8e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f001 feeb 	bl	8010b64 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ed8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	f040 8161 	bne.w	800f058 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed9e:	e15b      	b.n	800f058 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eda0:	4b36      	ldr	r3, [pc, #216]	; (800ee7c <tcp_receive+0x270>)
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eda8:	1ad3      	subs	r3, r2, r3
 800edaa:	3b01      	subs	r3, #1
 800edac:	2b00      	cmp	r3, #0
 800edae:	f2c0 814e 	blt.w	800f04e <tcp_receive+0x442>
 800edb2:	4b32      	ldr	r3, [pc, #200]	; (800ee7c <tcp_receive+0x270>)
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edba:	1ad3      	subs	r3, r2, r3
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f300 8146 	bgt.w	800f04e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	8b5b      	ldrh	r3, [r3, #26]
 800edc6:	f003 0304 	and.w	r3, r3, #4
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d010      	beq.n	800edf0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	8b5b      	ldrh	r3, [r3, #26]
 800edd2:	f023 0304 	bic.w	r3, r3, #4
 800edd6:	b29a      	uxth	r2, r3
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2200      	movs	r2, #0
 800edec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800edfe:	10db      	asrs	r3, r3, #3
 800ee00:	b21b      	sxth	r3, r3
 800ee02:	b29a      	uxth	r2, r3
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	4413      	add	r3, r2
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	b21a      	sxth	r2, r3
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ee18:	4b18      	ldr	r3, [pc, #96]	; (800ee7c <tcp_receive+0x270>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	1ad3      	subs	r3, r2, r3
 800ee26:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ee30:	4b12      	ldr	r3, [pc, #72]	; (800ee7c <tcp_receive+0x270>)
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	7d1b      	ldrb	r3, [r3, #20]
 800ee3c:	2b03      	cmp	r3, #3
 800ee3e:	f240 8097 	bls.w	800ef70 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d245      	bcs.n	800eede <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	8b5b      	ldrh	r3, [r3, #26]
 800ee56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d014      	beq.n	800ee88 <tcp_receive+0x27c>
 800ee5e:	2301      	movs	r3, #1
 800ee60:	e013      	b.n	800ee8a <tcp_receive+0x27e>
 800ee62:	bf00      	nop
 800ee64:	080173b0 	.word	0x080173b0
 800ee68:	080176e0 	.word	0x080176e0
 800ee6c:	080173fc 	.word	0x080173fc
 800ee70:	080176fc 	.word	0x080176fc
 800ee74:	20017aa8 	.word	0x20017aa8
 800ee78:	20017a9c 	.word	0x20017a9c
 800ee7c:	20017aa0 	.word	0x20017aa0
 800ee80:	20017a8c 	.word	0x20017a8c
 800ee84:	20017aa6 	.word	0x20017aa6
 800ee88:	2302      	movs	r3, #2
 800ee8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ee8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ee92:	b29a      	uxth	r2, r3
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee98:	fb12 f303 	smulbb	r3, r2, r3
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eea0:	4293      	cmp	r3, r2
 800eea2:	bf28      	it	cs
 800eea4:	4613      	movcs	r3, r2
 800eea6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eeae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eeb0:	4413      	add	r3, r2
 800eeb2:	b29a      	uxth	r2, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d309      	bcc.n	800eed2 <tcp_receive+0x2c6>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eec4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eec6:	4413      	add	r3, r2
 800eec8:	b29a      	uxth	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eed0:	e04e      	b.n	800ef70 <tcp_receive+0x364>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eed8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eedc:	e048      	b.n	800ef70 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eee4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eee6:	4413      	add	r3, r2
 800eee8:	b29a      	uxth	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d309      	bcc.n	800ef08 <tcp_receive+0x2fc>
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eefa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eefc:	4413      	add	r3, r2
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ef06:	e004      	b.n	800ef12 <tcp_receive+0x306>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d326      	bcc.n	800ef70 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef2e:	1ad3      	subs	r3, r2, r3
 800ef30:	b29a      	uxth	r2, r3
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef42:	4413      	add	r3, r2
 800ef44:	b29a      	uxth	r2, r3
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d30a      	bcc.n	800ef66 <tcp_receive+0x35a>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef5a:	4413      	add	r3, r2
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ef64:	e004      	b.n	800ef70 <tcp_receive+0x364>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef78:	4a98      	ldr	r2, [pc, #608]	; (800f1dc <tcp_receive+0x5d0>)
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f7ff fdca 	bl	800eb14 <tcp_free_acked_segments>
 800ef80:	4602      	mov	r2, r0
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef8e:	4a94      	ldr	r2, [pc, #592]	; (800f1e0 <tcp_receive+0x5d4>)
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7ff fdbf 	bl	800eb14 <tcp_free_acked_segments>
 800ef96:	4602      	mov	r2, r0
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d104      	bne.n	800efae <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efaa:	861a      	strh	r2, [r3, #48]	; 0x30
 800efac:	e002      	b.n	800efb4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2200      	movs	r2, #0
 800efb2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2200      	movs	r2, #0
 800efb8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d103      	bne.n	800efca <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2200      	movs	r2, #0
 800efc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800efd0:	4b84      	ldr	r3, [pc, #528]	; (800f1e4 <tcp_receive+0x5d8>)
 800efd2:	881b      	ldrh	r3, [r3, #0]
 800efd4:	4413      	add	r3, r2
 800efd6:	b29a      	uxth	r2, r3
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	8b5b      	ldrh	r3, [r3, #26]
 800efe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d035      	beq.n	800f056 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d118      	bne.n	800f024 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d00c      	beq.n	800f014 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f002:	68db      	ldr	r3, [r3, #12]
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	4618      	mov	r0, r3
 800f008:	f7fb f927 	bl	800a25a <lwip_htonl>
 800f00c:	4603      	mov	r3, r0
 800f00e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f010:	2b00      	cmp	r3, #0
 800f012:	dc20      	bgt.n	800f056 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	8b5b      	ldrh	r3, [r3, #26]
 800f018:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f022:	e018      	b.n	800f056 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f02c:	68db      	ldr	r3, [r3, #12]
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	4618      	mov	r0, r3
 800f032:	f7fb f912 	bl	800a25a <lwip_htonl>
 800f036:	4603      	mov	r3, r0
 800f038:	1ae3      	subs	r3, r4, r3
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	dc0b      	bgt.n	800f056 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	8b5b      	ldrh	r3, [r3, #26]
 800f042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f046:	b29a      	uxth	r2, r3
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f04c:	e003      	b.n	800f056 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f001 ff76 	bl	8010f40 <tcp_send_empty_ack>
 800f054:	e000      	b.n	800f058 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f056:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d05b      	beq.n	800f118 <tcp_receive+0x50c>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f064:	4b60      	ldr	r3, [pc, #384]	; (800f1e8 <tcp_receive+0x5dc>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	1ad3      	subs	r3, r2, r3
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	da54      	bge.n	800f118 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f06e:	4b5f      	ldr	r3, [pc, #380]	; (800f1ec <tcp_receive+0x5e0>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	b29a      	uxth	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f078:	b29b      	uxth	r3, r3
 800f07a:	1ad3      	subs	r3, r2, r3
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f082:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f08c:	10db      	asrs	r3, r3, #3
 800f08e:	b21b      	sxth	r3, r3
 800f090:	b29b      	uxth	r3, r3
 800f092:	1ad3      	subs	r3, r2, r3
 800f094:	b29b      	uxth	r3, r3
 800f096:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f0a0:	b29a      	uxth	r2, r3
 800f0a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f0a6:	4413      	add	r3, r2
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	b21a      	sxth	r2, r3
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f0b0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	da05      	bge.n	800f0c4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f0b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f0bc:	425b      	negs	r3, r3
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f0c4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f0ce:	109b      	asrs	r3, r3, #2
 800f0d0:	b21b      	sxth	r3, r3
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	1ad3      	subs	r3, r2, r3
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f0e8:	4413      	add	r3, r2
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	b21a      	sxth	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f0f8:	10db      	asrs	r3, r3, #3
 800f0fa:	b21b      	sxth	r3, r3
 800f0fc:	b29a      	uxth	r2, r3
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f104:	b29b      	uxth	r3, r3
 800f106:	4413      	add	r3, r2
 800f108:	b29b      	uxth	r3, r3
 800f10a:	b21a      	sxth	r2, r3
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2200      	movs	r2, #0
 800f116:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f118:	4b35      	ldr	r3, [pc, #212]	; (800f1f0 <tcp_receive+0x5e4>)
 800f11a:	881b      	ldrh	r3, [r3, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f000 84e2 	beq.w	800fae6 <tcp_receive+0xeda>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	7d1b      	ldrb	r3, [r3, #20]
 800f126:	2b06      	cmp	r3, #6
 800f128:	f200 84dd 	bhi.w	800fae6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f130:	4b30      	ldr	r3, [pc, #192]	; (800f1f4 <tcp_receive+0x5e8>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	1ad3      	subs	r3, r2, r3
 800f136:	3b01      	subs	r3, #1
 800f138:	2b00      	cmp	r3, #0
 800f13a:	f2c0 808f 	blt.w	800f25c <tcp_receive+0x650>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f142:	4b2b      	ldr	r3, [pc, #172]	; (800f1f0 <tcp_receive+0x5e4>)
 800f144:	881b      	ldrh	r3, [r3, #0]
 800f146:	4619      	mov	r1, r3
 800f148:	4b2a      	ldr	r3, [pc, #168]	; (800f1f4 <tcp_receive+0x5e8>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	440b      	add	r3, r1
 800f14e:	1ad3      	subs	r3, r2, r3
 800f150:	3301      	adds	r3, #1
 800f152:	2b00      	cmp	r3, #0
 800f154:	f300 8082 	bgt.w	800f25c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f158:	4b27      	ldr	r3, [pc, #156]	; (800f1f8 <tcp_receive+0x5ec>)
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f162:	4b24      	ldr	r3, [pc, #144]	; (800f1f4 <tcp_receive+0x5e8>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	1ad3      	subs	r3, r2, r3
 800f168:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f16a:	4b23      	ldr	r3, [pc, #140]	; (800f1f8 <tcp_receive+0x5ec>)
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d106      	bne.n	800f180 <tcp_receive+0x574>
 800f172:	4b22      	ldr	r3, [pc, #136]	; (800f1fc <tcp_receive+0x5f0>)
 800f174:	f240 5294 	movw	r2, #1428	; 0x594
 800f178:	4921      	ldr	r1, [pc, #132]	; (800f200 <tcp_receive+0x5f4>)
 800f17a:	4822      	ldr	r0, [pc, #136]	; (800f204 <tcp_receive+0x5f8>)
 800f17c:	f005 fdf2 	bl	8014d64 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f182:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f186:	4293      	cmp	r3, r2
 800f188:	d906      	bls.n	800f198 <tcp_receive+0x58c>
 800f18a:	4b1c      	ldr	r3, [pc, #112]	; (800f1fc <tcp_receive+0x5f0>)
 800f18c:	f240 5295 	movw	r2, #1429	; 0x595
 800f190:	491d      	ldr	r1, [pc, #116]	; (800f208 <tcp_receive+0x5fc>)
 800f192:	481c      	ldr	r0, [pc, #112]	; (800f204 <tcp_receive+0x5f8>)
 800f194:	f005 fde6 	bl	8014d64 <iprintf>
      off = (u16_t)off32;
 800f198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f19e:	4b16      	ldr	r3, [pc, #88]	; (800f1f8 <tcp_receive+0x5ec>)
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	891b      	ldrh	r3, [r3, #8]
 800f1a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d906      	bls.n	800f1ba <tcp_receive+0x5ae>
 800f1ac:	4b13      	ldr	r3, [pc, #76]	; (800f1fc <tcp_receive+0x5f0>)
 800f1ae:	f240 5297 	movw	r2, #1431	; 0x597
 800f1b2:	4916      	ldr	r1, [pc, #88]	; (800f20c <tcp_receive+0x600>)
 800f1b4:	4813      	ldr	r0, [pc, #76]	; (800f204 <tcp_receive+0x5f8>)
 800f1b6:	f005 fdd5 	bl	8014d64 <iprintf>
      inseg.len -= off;
 800f1ba:	4b0f      	ldr	r3, [pc, #60]	; (800f1f8 <tcp_receive+0x5ec>)
 800f1bc:	891a      	ldrh	r2, [r3, #8]
 800f1be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f1c2:	1ad3      	subs	r3, r2, r3
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	4b0c      	ldr	r3, [pc, #48]	; (800f1f8 <tcp_receive+0x5ec>)
 800f1c8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f1ca:	4b0b      	ldr	r3, [pc, #44]	; (800f1f8 <tcp_receive+0x5ec>)
 800f1cc:	685b      	ldr	r3, [r3, #4]
 800f1ce:	891a      	ldrh	r2, [r3, #8]
 800f1d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f1d4:	1ad3      	subs	r3, r2, r3
 800f1d6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f1d8:	e02a      	b.n	800f230 <tcp_receive+0x624>
 800f1da:	bf00      	nop
 800f1dc:	08017718 	.word	0x08017718
 800f1e0:	08017720 	.word	0x08017720
 800f1e4:	20017aa4 	.word	0x20017aa4
 800f1e8:	20017aa0 	.word	0x20017aa0
 800f1ec:	20017a64 	.word	0x20017a64
 800f1f0:	20017aa6 	.word	0x20017aa6
 800f1f4:	20017a9c 	.word	0x20017a9c
 800f1f8:	20017a7c 	.word	0x20017a7c
 800f1fc:	080173b0 	.word	0x080173b0
 800f200:	08017728 	.word	0x08017728
 800f204:	080173fc 	.word	0x080173fc
 800f208:	08017738 	.word	0x08017738
 800f20c:	08017748 	.word	0x08017748
        off -= p->len;
 800f210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f212:	895b      	ldrh	r3, [r3, #10]
 800f214:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f218:	1ad3      	subs	r3, r2, r3
 800f21a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f21e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f220:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f222:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f226:	2200      	movs	r2, #0
 800f228:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f22a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f232:	895b      	ldrh	r3, [r3, #10]
 800f234:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f238:	429a      	cmp	r2, r3
 800f23a:	d8e9      	bhi.n	800f210 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f23c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f240:	4619      	mov	r1, r3
 800f242:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f244:	f7fc fb60 	bl	800b908 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f24c:	4a91      	ldr	r2, [pc, #580]	; (800f494 <tcp_receive+0x888>)
 800f24e:	6013      	str	r3, [r2, #0]
 800f250:	4b91      	ldr	r3, [pc, #580]	; (800f498 <tcp_receive+0x88c>)
 800f252:	68db      	ldr	r3, [r3, #12]
 800f254:	4a8f      	ldr	r2, [pc, #572]	; (800f494 <tcp_receive+0x888>)
 800f256:	6812      	ldr	r2, [r2, #0]
 800f258:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f25a:	e00d      	b.n	800f278 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f25c:	4b8d      	ldr	r3, [pc, #564]	; (800f494 <tcp_receive+0x888>)
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f264:	1ad3      	subs	r3, r2, r3
 800f266:	2b00      	cmp	r3, #0
 800f268:	da06      	bge.n	800f278 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	8b5b      	ldrh	r3, [r3, #26]
 800f26e:	f043 0302 	orr.w	r3, r3, #2
 800f272:	b29a      	uxth	r2, r3
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f278:	4b86      	ldr	r3, [pc, #536]	; (800f494 <tcp_receive+0x888>)
 800f27a:	681a      	ldr	r2, [r3, #0]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f280:	1ad3      	subs	r3, r2, r3
 800f282:	2b00      	cmp	r3, #0
 800f284:	f2c0 842a 	blt.w	800fadc <tcp_receive+0xed0>
 800f288:	4b82      	ldr	r3, [pc, #520]	; (800f494 <tcp_receive+0x888>)
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f290:	6879      	ldr	r1, [r7, #4]
 800f292:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f294:	440b      	add	r3, r1
 800f296:	1ad3      	subs	r3, r2, r3
 800f298:	3301      	adds	r3, #1
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	f300 841e 	bgt.w	800fadc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f2a4:	4b7b      	ldr	r3, [pc, #492]	; (800f494 <tcp_receive+0x888>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	f040 829a 	bne.w	800f7e2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f2ae:	4b7a      	ldr	r3, [pc, #488]	; (800f498 <tcp_receive+0x88c>)
 800f2b0:	891c      	ldrh	r4, [r3, #8]
 800f2b2:	4b79      	ldr	r3, [pc, #484]	; (800f498 <tcp_receive+0x88c>)
 800f2b4:	68db      	ldr	r3, [r3, #12]
 800f2b6:	899b      	ldrh	r3, [r3, #12]
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fa ffb8 	bl	800a230 <lwip_htons>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	b2db      	uxtb	r3, r3
 800f2c4:	f003 0303 	and.w	r3, r3, #3
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d001      	beq.n	800f2d0 <tcp_receive+0x6c4>
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	e000      	b.n	800f2d2 <tcp_receive+0x6c6>
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	4423      	add	r3, r4
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	4b71      	ldr	r3, [pc, #452]	; (800f49c <tcp_receive+0x890>)
 800f2d8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f2de:	4b6f      	ldr	r3, [pc, #444]	; (800f49c <tcp_receive+0x890>)
 800f2e0:	881b      	ldrh	r3, [r3, #0]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d275      	bcs.n	800f3d2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f2e6:	4b6c      	ldr	r3, [pc, #432]	; (800f498 <tcp_receive+0x88c>)
 800f2e8:	68db      	ldr	r3, [r3, #12]
 800f2ea:	899b      	ldrh	r3, [r3, #12]
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fa ff9e 	bl	800a230 <lwip_htons>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	f003 0301 	and.w	r3, r3, #1
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d01f      	beq.n	800f340 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f300:	4b65      	ldr	r3, [pc, #404]	; (800f498 <tcp_receive+0x88c>)
 800f302:	68db      	ldr	r3, [r3, #12]
 800f304:	899b      	ldrh	r3, [r3, #12]
 800f306:	b29b      	uxth	r3, r3
 800f308:	b21b      	sxth	r3, r3
 800f30a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f30e:	b21c      	sxth	r4, r3
 800f310:	4b61      	ldr	r3, [pc, #388]	; (800f498 <tcp_receive+0x88c>)
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	899b      	ldrh	r3, [r3, #12]
 800f316:	b29b      	uxth	r3, r3
 800f318:	4618      	mov	r0, r3
 800f31a:	f7fa ff89 	bl	800a230 <lwip_htons>
 800f31e:	4603      	mov	r3, r0
 800f320:	b2db      	uxtb	r3, r3
 800f322:	b29b      	uxth	r3, r3
 800f324:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f328:	b29b      	uxth	r3, r3
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7fa ff80 	bl	800a230 <lwip_htons>
 800f330:	4603      	mov	r3, r0
 800f332:	b21b      	sxth	r3, r3
 800f334:	4323      	orrs	r3, r4
 800f336:	b21a      	sxth	r2, r3
 800f338:	4b57      	ldr	r3, [pc, #348]	; (800f498 <tcp_receive+0x88c>)
 800f33a:	68db      	ldr	r3, [r3, #12]
 800f33c:	b292      	uxth	r2, r2
 800f33e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f344:	4b54      	ldr	r3, [pc, #336]	; (800f498 <tcp_receive+0x88c>)
 800f346:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f348:	4b53      	ldr	r3, [pc, #332]	; (800f498 <tcp_receive+0x88c>)
 800f34a:	68db      	ldr	r3, [r3, #12]
 800f34c:	899b      	ldrh	r3, [r3, #12]
 800f34e:	b29b      	uxth	r3, r3
 800f350:	4618      	mov	r0, r3
 800f352:	f7fa ff6d 	bl	800a230 <lwip_htons>
 800f356:	4603      	mov	r3, r0
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	f003 0302 	and.w	r3, r3, #2
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d005      	beq.n	800f36e <tcp_receive+0x762>
            inseg.len -= 1;
 800f362:	4b4d      	ldr	r3, [pc, #308]	; (800f498 <tcp_receive+0x88c>)
 800f364:	891b      	ldrh	r3, [r3, #8]
 800f366:	3b01      	subs	r3, #1
 800f368:	b29a      	uxth	r2, r3
 800f36a:	4b4b      	ldr	r3, [pc, #300]	; (800f498 <tcp_receive+0x88c>)
 800f36c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f36e:	4b4a      	ldr	r3, [pc, #296]	; (800f498 <tcp_receive+0x88c>)
 800f370:	685b      	ldr	r3, [r3, #4]
 800f372:	4a49      	ldr	r2, [pc, #292]	; (800f498 <tcp_receive+0x88c>)
 800f374:	8912      	ldrh	r2, [r2, #8]
 800f376:	4611      	mov	r1, r2
 800f378:	4618      	mov	r0, r3
 800f37a:	f7fc f9c5 	bl	800b708 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f37e:	4b46      	ldr	r3, [pc, #280]	; (800f498 <tcp_receive+0x88c>)
 800f380:	891c      	ldrh	r4, [r3, #8]
 800f382:	4b45      	ldr	r3, [pc, #276]	; (800f498 <tcp_receive+0x88c>)
 800f384:	68db      	ldr	r3, [r3, #12]
 800f386:	899b      	ldrh	r3, [r3, #12]
 800f388:	b29b      	uxth	r3, r3
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7fa ff50 	bl	800a230 <lwip_htons>
 800f390:	4603      	mov	r3, r0
 800f392:	b2db      	uxtb	r3, r3
 800f394:	f003 0303 	and.w	r3, r3, #3
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d001      	beq.n	800f3a0 <tcp_receive+0x794>
 800f39c:	2301      	movs	r3, #1
 800f39e:	e000      	b.n	800f3a2 <tcp_receive+0x796>
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	4423      	add	r3, r4
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	4b3d      	ldr	r3, [pc, #244]	; (800f49c <tcp_receive+0x890>)
 800f3a8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f3aa:	4b3c      	ldr	r3, [pc, #240]	; (800f49c <tcp_receive+0x890>)
 800f3ac:	881b      	ldrh	r3, [r3, #0]
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	4b38      	ldr	r3, [pc, #224]	; (800f494 <tcp_receive+0x888>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	441a      	add	r2, r3
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ba:	6879      	ldr	r1, [r7, #4]
 800f3bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f3be:	440b      	add	r3, r1
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d006      	beq.n	800f3d2 <tcp_receive+0x7c6>
 800f3c4:	4b36      	ldr	r3, [pc, #216]	; (800f4a0 <tcp_receive+0x894>)
 800f3c6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f3ca:	4936      	ldr	r1, [pc, #216]	; (800f4a4 <tcp_receive+0x898>)
 800f3cc:	4836      	ldr	r0, [pc, #216]	; (800f4a8 <tcp_receive+0x89c>)
 800f3ce:	f005 fcc9 	bl	8014d64 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	f000 80e7 	beq.w	800f5aa <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f3dc:	4b2e      	ldr	r3, [pc, #184]	; (800f498 <tcp_receive+0x88c>)
 800f3de:	68db      	ldr	r3, [r3, #12]
 800f3e0:	899b      	ldrh	r3, [r3, #12]
 800f3e2:	b29b      	uxth	r3, r3
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7fa ff23 	bl	800a230 <lwip_htons>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	b2db      	uxtb	r3, r3
 800f3ee:	f003 0301 	and.w	r3, r3, #1
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d010      	beq.n	800f418 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f3f6:	e00a      	b.n	800f40e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3fc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f402:	681a      	ldr	r2, [r3, #0]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f408:	68f8      	ldr	r0, [r7, #12]
 800f40a:	f7fd fd92 	bl	800cf32 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f412:	2b00      	cmp	r3, #0
 800f414:	d1f0      	bne.n	800f3f8 <tcp_receive+0x7ec>
 800f416:	e0c8      	b.n	800f5aa <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f41c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f41e:	e052      	b.n	800f4c6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f422:	68db      	ldr	r3, [r3, #12]
 800f424:	899b      	ldrh	r3, [r3, #12]
 800f426:	b29b      	uxth	r3, r3
 800f428:	4618      	mov	r0, r3
 800f42a:	f7fa ff01 	bl	800a230 <lwip_htons>
 800f42e:	4603      	mov	r3, r0
 800f430:	b2db      	uxtb	r3, r3
 800f432:	f003 0301 	and.w	r3, r3, #1
 800f436:	2b00      	cmp	r3, #0
 800f438:	d03d      	beq.n	800f4b6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f43a:	4b17      	ldr	r3, [pc, #92]	; (800f498 <tcp_receive+0x88c>)
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	899b      	ldrh	r3, [r3, #12]
 800f440:	b29b      	uxth	r3, r3
 800f442:	4618      	mov	r0, r3
 800f444:	f7fa fef4 	bl	800a230 <lwip_htons>
 800f448:	4603      	mov	r3, r0
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f450:	2b00      	cmp	r3, #0
 800f452:	d130      	bne.n	800f4b6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f454:	4b10      	ldr	r3, [pc, #64]	; (800f498 <tcp_receive+0x88c>)
 800f456:	68db      	ldr	r3, [r3, #12]
 800f458:	899b      	ldrh	r3, [r3, #12]
 800f45a:	b29c      	uxth	r4, r3
 800f45c:	2001      	movs	r0, #1
 800f45e:	f7fa fee7 	bl	800a230 <lwip_htons>
 800f462:	4603      	mov	r3, r0
 800f464:	461a      	mov	r2, r3
 800f466:	4b0c      	ldr	r3, [pc, #48]	; (800f498 <tcp_receive+0x88c>)
 800f468:	68db      	ldr	r3, [r3, #12]
 800f46a:	4322      	orrs	r2, r4
 800f46c:	b292      	uxth	r2, r2
 800f46e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f470:	4b09      	ldr	r3, [pc, #36]	; (800f498 <tcp_receive+0x88c>)
 800f472:	891c      	ldrh	r4, [r3, #8]
 800f474:	4b08      	ldr	r3, [pc, #32]	; (800f498 <tcp_receive+0x88c>)
 800f476:	68db      	ldr	r3, [r3, #12]
 800f478:	899b      	ldrh	r3, [r3, #12]
 800f47a:	b29b      	uxth	r3, r3
 800f47c:	4618      	mov	r0, r3
 800f47e:	f7fa fed7 	bl	800a230 <lwip_htons>
 800f482:	4603      	mov	r3, r0
 800f484:	b2db      	uxtb	r3, r3
 800f486:	f003 0303 	and.w	r3, r3, #3
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d00e      	beq.n	800f4ac <tcp_receive+0x8a0>
 800f48e:	2301      	movs	r3, #1
 800f490:	e00d      	b.n	800f4ae <tcp_receive+0x8a2>
 800f492:	bf00      	nop
 800f494:	20017a9c 	.word	0x20017a9c
 800f498:	20017a7c 	.word	0x20017a7c
 800f49c:	20017aa6 	.word	0x20017aa6
 800f4a0:	080173b0 	.word	0x080173b0
 800f4a4:	08017758 	.word	0x08017758
 800f4a8:	080173fc 	.word	0x080173fc
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	4423      	add	r3, r4
 800f4b0:	b29a      	uxth	r2, r3
 800f4b2:	4b98      	ldr	r3, [pc, #608]	; (800f714 <tcp_receive+0xb08>)
 800f4b4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f4b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4b8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f4c0:	6938      	ldr	r0, [r7, #16]
 800f4c2:	f7fd fd36 	bl	800cf32 <tcp_seg_free>
            while (next &&
 800f4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d00e      	beq.n	800f4ea <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f4cc:	4b91      	ldr	r3, [pc, #580]	; (800f714 <tcp_receive+0xb08>)
 800f4ce:	881b      	ldrh	r3, [r3, #0]
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	4b91      	ldr	r3, [pc, #580]	; (800f718 <tcp_receive+0xb0c>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	441a      	add	r2, r3
 800f4d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4da:	68db      	ldr	r3, [r3, #12]
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f4e0:	8909      	ldrh	r1, [r1, #8]
 800f4e2:	440b      	add	r3, r1
 800f4e4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	da9a      	bge.n	800f420 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f4ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d059      	beq.n	800f5a4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800f4f0:	4b88      	ldr	r3, [pc, #544]	; (800f714 <tcp_receive+0xb08>)
 800f4f2:	881b      	ldrh	r3, [r3, #0]
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	4b88      	ldr	r3, [pc, #544]	; (800f718 <tcp_receive+0xb0c>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	441a      	add	r2, r3
 800f4fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4fe:	68db      	ldr	r3, [r3, #12]
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f504:	2b00      	cmp	r3, #0
 800f506:	dd4d      	ble.n	800f5a4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f50a:	68db      	ldr	r3, [r3, #12]
 800f50c:	685b      	ldr	r3, [r3, #4]
 800f50e:	b29a      	uxth	r2, r3
 800f510:	4b81      	ldr	r3, [pc, #516]	; (800f718 <tcp_receive+0xb0c>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	b29b      	uxth	r3, r3
 800f516:	1ad3      	subs	r3, r2, r3
 800f518:	b29a      	uxth	r2, r3
 800f51a:	4b80      	ldr	r3, [pc, #512]	; (800f71c <tcp_receive+0xb10>)
 800f51c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f51e:	4b7f      	ldr	r3, [pc, #508]	; (800f71c <tcp_receive+0xb10>)
 800f520:	68db      	ldr	r3, [r3, #12]
 800f522:	899b      	ldrh	r3, [r3, #12]
 800f524:	b29b      	uxth	r3, r3
 800f526:	4618      	mov	r0, r3
 800f528:	f7fa fe82 	bl	800a230 <lwip_htons>
 800f52c:	4603      	mov	r3, r0
 800f52e:	b2db      	uxtb	r3, r3
 800f530:	f003 0302 	and.w	r3, r3, #2
 800f534:	2b00      	cmp	r3, #0
 800f536:	d005      	beq.n	800f544 <tcp_receive+0x938>
                inseg.len -= 1;
 800f538:	4b78      	ldr	r3, [pc, #480]	; (800f71c <tcp_receive+0xb10>)
 800f53a:	891b      	ldrh	r3, [r3, #8]
 800f53c:	3b01      	subs	r3, #1
 800f53e:	b29a      	uxth	r2, r3
 800f540:	4b76      	ldr	r3, [pc, #472]	; (800f71c <tcp_receive+0xb10>)
 800f542:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f544:	4b75      	ldr	r3, [pc, #468]	; (800f71c <tcp_receive+0xb10>)
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	4a74      	ldr	r2, [pc, #464]	; (800f71c <tcp_receive+0xb10>)
 800f54a:	8912      	ldrh	r2, [r2, #8]
 800f54c:	4611      	mov	r1, r2
 800f54e:	4618      	mov	r0, r3
 800f550:	f7fc f8da 	bl	800b708 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f554:	4b71      	ldr	r3, [pc, #452]	; (800f71c <tcp_receive+0xb10>)
 800f556:	891c      	ldrh	r4, [r3, #8]
 800f558:	4b70      	ldr	r3, [pc, #448]	; (800f71c <tcp_receive+0xb10>)
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	899b      	ldrh	r3, [r3, #12]
 800f55e:	b29b      	uxth	r3, r3
 800f560:	4618      	mov	r0, r3
 800f562:	f7fa fe65 	bl	800a230 <lwip_htons>
 800f566:	4603      	mov	r3, r0
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	f003 0303 	and.w	r3, r3, #3
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d001      	beq.n	800f576 <tcp_receive+0x96a>
 800f572:	2301      	movs	r3, #1
 800f574:	e000      	b.n	800f578 <tcp_receive+0x96c>
 800f576:	2300      	movs	r3, #0
 800f578:	4423      	add	r3, r4
 800f57a:	b29a      	uxth	r2, r3
 800f57c:	4b65      	ldr	r3, [pc, #404]	; (800f714 <tcp_receive+0xb08>)
 800f57e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f580:	4b64      	ldr	r3, [pc, #400]	; (800f714 <tcp_receive+0xb08>)
 800f582:	881b      	ldrh	r3, [r3, #0]
 800f584:	461a      	mov	r2, r3
 800f586:	4b64      	ldr	r3, [pc, #400]	; (800f718 <tcp_receive+0xb0c>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	441a      	add	r2, r3
 800f58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f58e:	68db      	ldr	r3, [r3, #12]
 800f590:	685b      	ldr	r3, [r3, #4]
 800f592:	429a      	cmp	r2, r3
 800f594:	d006      	beq.n	800f5a4 <tcp_receive+0x998>
 800f596:	4b62      	ldr	r3, [pc, #392]	; (800f720 <tcp_receive+0xb14>)
 800f598:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f59c:	4961      	ldr	r1, [pc, #388]	; (800f724 <tcp_receive+0xb18>)
 800f59e:	4862      	ldr	r0, [pc, #392]	; (800f728 <tcp_receive+0xb1c>)
 800f5a0:	f005 fbe0 	bl	8014d64 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f5a8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f5aa:	4b5a      	ldr	r3, [pc, #360]	; (800f714 <tcp_receive+0xb08>)
 800f5ac:	881b      	ldrh	r3, [r3, #0]
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	4b59      	ldr	r3, [pc, #356]	; (800f718 <tcp_receive+0xb0c>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	441a      	add	r2, r3
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5be:	4b55      	ldr	r3, [pc, #340]	; (800f714 <tcp_receive+0xb08>)
 800f5c0:	881b      	ldrh	r3, [r3, #0]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d206      	bcs.n	800f5d4 <tcp_receive+0x9c8>
 800f5c6:	4b56      	ldr	r3, [pc, #344]	; (800f720 <tcp_receive+0xb14>)
 800f5c8:	f240 6207 	movw	r2, #1543	; 0x607
 800f5cc:	4957      	ldr	r1, [pc, #348]	; (800f72c <tcp_receive+0xb20>)
 800f5ce:	4856      	ldr	r0, [pc, #344]	; (800f728 <tcp_receive+0xb1c>)
 800f5d0:	f005 fbc8 	bl	8014d64 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5d8:	4b4e      	ldr	r3, [pc, #312]	; (800f714 <tcp_receive+0xb08>)
 800f5da:	881b      	ldrh	r3, [r3, #0]
 800f5dc:	1ad3      	subs	r3, r2, r3
 800f5de:	b29a      	uxth	r2, r3
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f7fc ffc5 	bl	800c574 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f5ea:	4b4c      	ldr	r3, [pc, #304]	; (800f71c <tcp_receive+0xb10>)
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	891b      	ldrh	r3, [r3, #8]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d006      	beq.n	800f602 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800f5f4:	4b49      	ldr	r3, [pc, #292]	; (800f71c <tcp_receive+0xb10>)
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	4a4d      	ldr	r2, [pc, #308]	; (800f730 <tcp_receive+0xb24>)
 800f5fa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f5fc:	4b47      	ldr	r3, [pc, #284]	; (800f71c <tcp_receive+0xb10>)
 800f5fe:	2200      	movs	r2, #0
 800f600:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f602:	4b46      	ldr	r3, [pc, #280]	; (800f71c <tcp_receive+0xb10>)
 800f604:	68db      	ldr	r3, [r3, #12]
 800f606:	899b      	ldrh	r3, [r3, #12]
 800f608:	b29b      	uxth	r3, r3
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7fa fe10 	bl	800a230 <lwip_htons>
 800f610:	4603      	mov	r3, r0
 800f612:	b2db      	uxtb	r3, r3
 800f614:	f003 0301 	and.w	r3, r3, #1
 800f618:	2b00      	cmp	r3, #0
 800f61a:	f000 80b8 	beq.w	800f78e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f61e:	4b45      	ldr	r3, [pc, #276]	; (800f734 <tcp_receive+0xb28>)
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	f043 0320 	orr.w	r3, r3, #32
 800f626:	b2da      	uxtb	r2, r3
 800f628:	4b42      	ldr	r3, [pc, #264]	; (800f734 <tcp_receive+0xb28>)
 800f62a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f62c:	e0af      	b.n	800f78e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f632:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	4a36      	ldr	r2, [pc, #216]	; (800f718 <tcp_receive+0xb0c>)
 800f63e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	891b      	ldrh	r3, [r3, #8]
 800f644:	461c      	mov	r4, r3
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	899b      	ldrh	r3, [r3, #12]
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	4618      	mov	r0, r3
 800f650:	f7fa fdee 	bl	800a230 <lwip_htons>
 800f654:	4603      	mov	r3, r0
 800f656:	b2db      	uxtb	r3, r3
 800f658:	f003 0303 	and.w	r3, r3, #3
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d001      	beq.n	800f664 <tcp_receive+0xa58>
 800f660:	2301      	movs	r3, #1
 800f662:	e000      	b.n	800f666 <tcp_receive+0xa5a>
 800f664:	2300      	movs	r3, #0
 800f666:	191a      	adds	r2, r3, r4
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f66c:	441a      	add	r2, r3
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f676:	461c      	mov	r4, r3
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	891b      	ldrh	r3, [r3, #8]
 800f67c:	461d      	mov	r5, r3
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	68db      	ldr	r3, [r3, #12]
 800f682:	899b      	ldrh	r3, [r3, #12]
 800f684:	b29b      	uxth	r3, r3
 800f686:	4618      	mov	r0, r3
 800f688:	f7fa fdd2 	bl	800a230 <lwip_htons>
 800f68c:	4603      	mov	r3, r0
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	f003 0303 	and.w	r3, r3, #3
 800f694:	2b00      	cmp	r3, #0
 800f696:	d001      	beq.n	800f69c <tcp_receive+0xa90>
 800f698:	2301      	movs	r3, #1
 800f69a:	e000      	b.n	800f69e <tcp_receive+0xa92>
 800f69c:	2300      	movs	r3, #0
 800f69e:	442b      	add	r3, r5
 800f6a0:	429c      	cmp	r4, r3
 800f6a2:	d206      	bcs.n	800f6b2 <tcp_receive+0xaa6>
 800f6a4:	4b1e      	ldr	r3, [pc, #120]	; (800f720 <tcp_receive+0xb14>)
 800f6a6:	f240 622b 	movw	r2, #1579	; 0x62b
 800f6aa:	4923      	ldr	r1, [pc, #140]	; (800f738 <tcp_receive+0xb2c>)
 800f6ac:	481e      	ldr	r0, [pc, #120]	; (800f728 <tcp_receive+0xb1c>)
 800f6ae:	f005 fb59 	bl	8014d64 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	891b      	ldrh	r3, [r3, #8]
 800f6b6:	461c      	mov	r4, r3
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	68db      	ldr	r3, [r3, #12]
 800f6bc:	899b      	ldrh	r3, [r3, #12]
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7fa fdb5 	bl	800a230 <lwip_htons>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	b2db      	uxtb	r3, r3
 800f6ca:	f003 0303 	and.w	r3, r3, #3
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d001      	beq.n	800f6d6 <tcp_receive+0xaca>
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	e000      	b.n	800f6d8 <tcp_receive+0xacc>
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	1919      	adds	r1, r3, r4
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f6de:	b28b      	uxth	r3, r1
 800f6e0:	1ad3      	subs	r3, r2, r3
 800f6e2:	b29a      	uxth	r2, r3
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f7fc ff43 	bl	800c574 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	891b      	ldrh	r3, [r3, #8]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d028      	beq.n	800f74a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f6f8:	4b0d      	ldr	r3, [pc, #52]	; (800f730 <tcp_receive+0xb24>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d01d      	beq.n	800f73c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800f700:	4b0b      	ldr	r3, [pc, #44]	; (800f730 <tcp_receive+0xb24>)
 800f702:	681a      	ldr	r2, [r3, #0]
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	4619      	mov	r1, r3
 800f70a:	4610      	mov	r0, r2
 800f70c:	f7fc fa50 	bl	800bbb0 <pbuf_cat>
 800f710:	e018      	b.n	800f744 <tcp_receive+0xb38>
 800f712:	bf00      	nop
 800f714:	20017aa6 	.word	0x20017aa6
 800f718:	20017a9c 	.word	0x20017a9c
 800f71c:	20017a7c 	.word	0x20017a7c
 800f720:	080173b0 	.word	0x080173b0
 800f724:	08017790 	.word	0x08017790
 800f728:	080173fc 	.word	0x080173fc
 800f72c:	080177cc 	.word	0x080177cc
 800f730:	20017aac 	.word	0x20017aac
 800f734:	20017aa9 	.word	0x20017aa9
 800f738:	080177ec 	.word	0x080177ec
            } else {
              recv_data = cseg->p;
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	4a70      	ldr	r2, [pc, #448]	; (800f904 <tcp_receive+0xcf8>)
 800f742:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	2200      	movs	r2, #0
 800f748:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	68db      	ldr	r3, [r3, #12]
 800f74e:	899b      	ldrh	r3, [r3, #12]
 800f750:	b29b      	uxth	r3, r3
 800f752:	4618      	mov	r0, r3
 800f754:	f7fa fd6c 	bl	800a230 <lwip_htons>
 800f758:	4603      	mov	r3, r0
 800f75a:	b2db      	uxtb	r3, r3
 800f75c:	f003 0301 	and.w	r3, r3, #1
 800f760:	2b00      	cmp	r3, #0
 800f762:	d00d      	beq.n	800f780 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f764:	4b68      	ldr	r3, [pc, #416]	; (800f908 <tcp_receive+0xcfc>)
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	f043 0320 	orr.w	r3, r3, #32
 800f76c:	b2da      	uxtb	r2, r3
 800f76e:	4b66      	ldr	r3, [pc, #408]	; (800f908 <tcp_receive+0xcfc>)
 800f770:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	7d1b      	ldrb	r3, [r3, #20]
 800f776:	2b04      	cmp	r3, #4
 800f778:	d102      	bne.n	800f780 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2207      	movs	r2, #7
 800f77e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f788:	68b8      	ldr	r0, [r7, #8]
 800f78a:	f7fd fbd2 	bl	800cf32 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f792:	2b00      	cmp	r3, #0
 800f794:	d008      	beq.n	800f7a8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f79a:	68db      	ldr	r3, [r3, #12]
 800f79c:	685a      	ldr	r2, [r3, #4]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	f43f af43 	beq.w	800f62e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	8b5b      	ldrh	r3, [r3, #26]
 800f7ac:	f003 0301 	and.w	r3, r3, #1
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d00e      	beq.n	800f7d2 <tcp_receive+0xbc6>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	8b5b      	ldrh	r3, [r3, #26]
 800f7b8:	f023 0301 	bic.w	r3, r3, #1
 800f7bc:	b29a      	uxth	r2, r3
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	835a      	strh	r2, [r3, #26]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	8b5b      	ldrh	r3, [r3, #26]
 800f7c6:	f043 0302 	orr.w	r3, r3, #2
 800f7ca:	b29a      	uxth	r2, r3
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f7d0:	e188      	b.n	800fae4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	8b5b      	ldrh	r3, [r3, #26]
 800f7d6:	f043 0301 	orr.w	r3, r3, #1
 800f7da:	b29a      	uxth	r2, r3
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f7e0:	e180      	b.n	800fae4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d106      	bne.n	800f7f8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f7ea:	4848      	ldr	r0, [pc, #288]	; (800f90c <tcp_receive+0xd00>)
 800f7ec:	f7fd fbba 	bl	800cf64 <tcp_seg_copy>
 800f7f0:	4602      	mov	r2, r0
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	675a      	str	r2, [r3, #116]	; 0x74
 800f7f6:	e16d      	b.n	800fad4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f800:	63bb      	str	r3, [r7, #56]	; 0x38
 800f802:	e157      	b.n	800fab4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800f804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f806:	68db      	ldr	r3, [r3, #12]
 800f808:	685a      	ldr	r2, [r3, #4]
 800f80a:	4b41      	ldr	r3, [pc, #260]	; (800f910 <tcp_receive+0xd04>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	429a      	cmp	r2, r3
 800f810:	d11d      	bne.n	800f84e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f812:	4b3e      	ldr	r3, [pc, #248]	; (800f90c <tcp_receive+0xd00>)
 800f814:	891a      	ldrh	r2, [r3, #8]
 800f816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f818:	891b      	ldrh	r3, [r3, #8]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	f240 814f 	bls.w	800fabe <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f820:	483a      	ldr	r0, [pc, #232]	; (800f90c <tcp_receive+0xd00>)
 800f822:	f7fd fb9f 	bl	800cf64 <tcp_seg_copy>
 800f826:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	f000 8149 	beq.w	800fac2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800f830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f832:	2b00      	cmp	r3, #0
 800f834:	d003      	beq.n	800f83e <tcp_receive+0xc32>
                    prev->next = cseg;
 800f836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f838:	697a      	ldr	r2, [r7, #20]
 800f83a:	601a      	str	r2, [r3, #0]
 800f83c:	e002      	b.n	800f844 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	697a      	ldr	r2, [r7, #20]
 800f842:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f844:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f846:	6978      	ldr	r0, [r7, #20]
 800f848:	f7ff f8dc 	bl	800ea04 <tcp_oos_insert_segment>
                }
                break;
 800f84c:	e139      	b.n	800fac2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f850:	2b00      	cmp	r3, #0
 800f852:	d117      	bne.n	800f884 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f854:	4b2e      	ldr	r3, [pc, #184]	; (800f910 <tcp_receive+0xd04>)
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	1ad3      	subs	r3, r2, r3
 800f860:	2b00      	cmp	r3, #0
 800f862:	da57      	bge.n	800f914 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f864:	4829      	ldr	r0, [pc, #164]	; (800f90c <tcp_receive+0xd00>)
 800f866:	f7fd fb7d 	bl	800cf64 <tcp_seg_copy>
 800f86a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f86c:	69bb      	ldr	r3, [r7, #24]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	f000 8129 	beq.w	800fac6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	69ba      	ldr	r2, [r7, #24]
 800f878:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f87a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f87c:	69b8      	ldr	r0, [r7, #24]
 800f87e:	f7ff f8c1 	bl	800ea04 <tcp_oos_insert_segment>
                  }
                  break;
 800f882:	e120      	b.n	800fac6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f884:	4b22      	ldr	r3, [pc, #136]	; (800f910 <tcp_receive+0xd04>)
 800f886:	681a      	ldr	r2, [r3, #0]
 800f888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f88a:	68db      	ldr	r3, [r3, #12]
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	1ad3      	subs	r3, r2, r3
 800f890:	3b01      	subs	r3, #1
 800f892:	2b00      	cmp	r3, #0
 800f894:	db3e      	blt.n	800f914 <tcp_receive+0xd08>
 800f896:	4b1e      	ldr	r3, [pc, #120]	; (800f910 <tcp_receive+0xd04>)
 800f898:	681a      	ldr	r2, [r3, #0]
 800f89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	1ad3      	subs	r3, r2, r3
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	dc35      	bgt.n	800f914 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f8a8:	4818      	ldr	r0, [pc, #96]	; (800f90c <tcp_receive+0xd00>)
 800f8aa:	f7fd fb5b 	bl	800cf64 <tcp_seg_copy>
 800f8ae:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	f000 8109 	beq.w	800faca <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ba:	68db      	ldr	r3, [r3, #12]
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8c0:	8912      	ldrh	r2, [r2, #8]
 800f8c2:	441a      	add	r2, r3
 800f8c4:	4b12      	ldr	r3, [pc, #72]	; (800f910 <tcp_receive+0xd04>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	1ad3      	subs	r3, r2, r3
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	dd12      	ble.n	800f8f4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f8ce:	4b10      	ldr	r3, [pc, #64]	; (800f910 <tcp_receive+0xd04>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	b29a      	uxth	r2, r3
 800f8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8d6:	68db      	ldr	r3, [r3, #12]
 800f8d8:	685b      	ldr	r3, [r3, #4]
 800f8da:	b29b      	uxth	r3, r3
 800f8dc:	1ad3      	subs	r3, r2, r3
 800f8de:	b29a      	uxth	r2, r3
 800f8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e6:	685a      	ldr	r2, [r3, #4]
 800f8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ea:	891b      	ldrh	r3, [r3, #8]
 800f8ec:	4619      	mov	r1, r3
 800f8ee:	4610      	mov	r0, r2
 800f8f0:	f7fb ff0a 	bl	800b708 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8f6:	69fa      	ldr	r2, [r7, #28]
 800f8f8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f8fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f8fc:	69f8      	ldr	r0, [r7, #28]
 800f8fe:	f7ff f881 	bl	800ea04 <tcp_oos_insert_segment>
                  }
                  break;
 800f902:	e0e2      	b.n	800faca <tcp_receive+0xebe>
 800f904:	20017aac 	.word	0x20017aac
 800f908:	20017aa9 	.word	0x20017aa9
 800f90c:	20017a7c 	.word	0x20017a7c
 800f910:	20017a9c 	.word	0x20017a9c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f916:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	f040 80c6 	bne.w	800faae <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f922:	4b80      	ldr	r3, [pc, #512]	; (800fb24 <tcp_receive+0xf18>)
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f928:	68db      	ldr	r3, [r3, #12]
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f92e:	2b00      	cmp	r3, #0
 800f930:	f340 80bd 	ble.w	800faae <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f936:	68db      	ldr	r3, [r3, #12]
 800f938:	899b      	ldrh	r3, [r3, #12]
 800f93a:	b29b      	uxth	r3, r3
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7fa fc77 	bl	800a230 <lwip_htons>
 800f942:	4603      	mov	r3, r0
 800f944:	b2db      	uxtb	r3, r3
 800f946:	f003 0301 	and.w	r3, r3, #1
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	f040 80bf 	bne.w	800face <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f950:	4875      	ldr	r0, [pc, #468]	; (800fb28 <tcp_receive+0xf1c>)
 800f952:	f7fd fb07 	bl	800cf64 <tcp_seg_copy>
 800f956:	4602      	mov	r2, r0
 800f958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2b00      	cmp	r3, #0
 800f962:	f000 80b6 	beq.w	800fad2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f968:	68db      	ldr	r3, [r3, #12]
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f96e:	8912      	ldrh	r2, [r2, #8]
 800f970:	441a      	add	r2, r3
 800f972:	4b6c      	ldr	r3, [pc, #432]	; (800fb24 <tcp_receive+0xf18>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	1ad3      	subs	r3, r2, r3
 800f978:	2b00      	cmp	r3, #0
 800f97a:	dd12      	ble.n	800f9a2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f97c:	4b69      	ldr	r3, [pc, #420]	; (800fb24 <tcp_receive+0xf18>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	b29a      	uxth	r2, r3
 800f982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f984:	68db      	ldr	r3, [r3, #12]
 800f986:	685b      	ldr	r3, [r3, #4]
 800f988:	b29b      	uxth	r3, r3
 800f98a:	1ad3      	subs	r3, r2, r3
 800f98c:	b29a      	uxth	r2, r3
 800f98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f990:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f994:	685a      	ldr	r2, [r3, #4]
 800f996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f998:	891b      	ldrh	r3, [r3, #8]
 800f99a:	4619      	mov	r1, r3
 800f99c:	4610      	mov	r0, r2
 800f99e:	f7fb feb3 	bl	800b708 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f9a2:	4b62      	ldr	r3, [pc, #392]	; (800fb2c <tcp_receive+0xf20>)
 800f9a4:	881b      	ldrh	r3, [r3, #0]
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	4b5e      	ldr	r3, [pc, #376]	; (800fb24 <tcp_receive+0xf18>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	441a      	add	r2, r3
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b2:	6879      	ldr	r1, [r7, #4]
 800f9b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f9b6:	440b      	add	r3, r1
 800f9b8:	1ad3      	subs	r3, r2, r3
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	f340 8089 	ble.w	800fad2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	68db      	ldr	r3, [r3, #12]
 800f9c6:	899b      	ldrh	r3, [r3, #12]
 800f9c8:	b29b      	uxth	r3, r3
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7fa fc30 	bl	800a230 <lwip_htons>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	f003 0301 	and.w	r3, r3, #1
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d022      	beq.n	800fa22 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	68db      	ldr	r3, [r3, #12]
 800f9e2:	899b      	ldrh	r3, [r3, #12]
 800f9e4:	b29b      	uxth	r3, r3
 800f9e6:	b21b      	sxth	r3, r3
 800f9e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f9ec:	b21c      	sxth	r4, r3
 800f9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	68db      	ldr	r3, [r3, #12]
 800f9f4:	899b      	ldrh	r3, [r3, #12]
 800f9f6:	b29b      	uxth	r3, r3
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7fa fc19 	bl	800a230 <lwip_htons>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fa fc10 	bl	800a230 <lwip_htons>
 800fa10:	4603      	mov	r3, r0
 800fa12:	b21b      	sxth	r3, r3
 800fa14:	4323      	orrs	r3, r4
 800fa16:	b21a      	sxth	r2, r3
 800fa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	b292      	uxth	r2, r2
 800fa20:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa26:	b29a      	uxth	r2, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa2c:	4413      	add	r3, r2
 800fa2e:	b299      	uxth	r1, r3
 800fa30:	4b3c      	ldr	r3, [pc, #240]	; (800fb24 <tcp_receive+0xf18>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	b29a      	uxth	r2, r3
 800fa36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	1a8a      	subs	r2, r1, r2
 800fa3c:	b292      	uxth	r2, r2
 800fa3e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fa40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	685a      	ldr	r2, [r3, #4]
 800fa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	891b      	ldrh	r3, [r3, #8]
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	4610      	mov	r0, r2
 800fa50:	f7fb fe5a 	bl	800b708 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	891c      	ldrh	r4, [r3, #8]
 800fa5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	899b      	ldrh	r3, [r3, #12]
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fa fbe3 	bl	800a230 <lwip_htons>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	f003 0303 	and.w	r3, r3, #3
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d001      	beq.n	800fa7a <tcp_receive+0xe6e>
 800fa76:	2301      	movs	r3, #1
 800fa78:	e000      	b.n	800fa7c <tcp_receive+0xe70>
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	4423      	add	r3, r4
 800fa7e:	b29a      	uxth	r2, r3
 800fa80:	4b2a      	ldr	r3, [pc, #168]	; (800fb2c <tcp_receive+0xf20>)
 800fa82:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fa84:	4b29      	ldr	r3, [pc, #164]	; (800fb2c <tcp_receive+0xf20>)
 800fa86:	881b      	ldrh	r3, [r3, #0]
 800fa88:	461a      	mov	r2, r3
 800fa8a:	4b26      	ldr	r3, [pc, #152]	; (800fb24 <tcp_receive+0xf18>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	441a      	add	r2, r3
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa94:	6879      	ldr	r1, [r7, #4]
 800fa96:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa98:	440b      	add	r3, r1
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d019      	beq.n	800fad2 <tcp_receive+0xec6>
 800fa9e:	4b24      	ldr	r3, [pc, #144]	; (800fb30 <tcp_receive+0xf24>)
 800faa0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800faa4:	4923      	ldr	r1, [pc, #140]	; (800fb34 <tcp_receive+0xf28>)
 800faa6:	4824      	ldr	r0, [pc, #144]	; (800fb38 <tcp_receive+0xf2c>)
 800faa8:	f005 f95c 	bl	8014d64 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800faac:	e011      	b.n	800fad2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800faae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	63bb      	str	r3, [r7, #56]	; 0x38
 800fab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	f47f aea4 	bne.w	800f804 <tcp_receive+0xbf8>
 800fabc:	e00a      	b.n	800fad4 <tcp_receive+0xec8>
                break;
 800fabe:	bf00      	nop
 800fac0:	e008      	b.n	800fad4 <tcp_receive+0xec8>
                break;
 800fac2:	bf00      	nop
 800fac4:	e006      	b.n	800fad4 <tcp_receive+0xec8>
                  break;
 800fac6:	bf00      	nop
 800fac8:	e004      	b.n	800fad4 <tcp_receive+0xec8>
                  break;
 800faca:	bf00      	nop
 800facc:	e002      	b.n	800fad4 <tcp_receive+0xec8>
                  break;
 800face:	bf00      	nop
 800fad0:	e000      	b.n	800fad4 <tcp_receive+0xec8>
                break;
 800fad2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f001 fa33 	bl	8010f40 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fada:	e003      	b.n	800fae4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f001 fa2f 	bl	8010f40 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fae2:	e01a      	b.n	800fb1a <tcp_receive+0xf0e>
 800fae4:	e019      	b.n	800fb1a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fae6:	4b0f      	ldr	r3, [pc, #60]	; (800fb24 <tcp_receive+0xf18>)
 800fae8:	681a      	ldr	r2, [r3, #0]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faee:	1ad3      	subs	r3, r2, r3
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	db0a      	blt.n	800fb0a <tcp_receive+0xefe>
 800faf4:	4b0b      	ldr	r3, [pc, #44]	; (800fb24 <tcp_receive+0xf18>)
 800faf6:	681a      	ldr	r2, [r3, #0]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fafc:	6879      	ldr	r1, [r7, #4]
 800fafe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fb00:	440b      	add	r3, r1
 800fb02:	1ad3      	subs	r3, r2, r3
 800fb04:	3301      	adds	r3, #1
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	dd07      	ble.n	800fb1a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	8b5b      	ldrh	r3, [r3, #26]
 800fb0e:	f043 0302 	orr.w	r3, r3, #2
 800fb12:	b29a      	uxth	r2, r3
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fb18:	e7ff      	b.n	800fb1a <tcp_receive+0xf0e>
 800fb1a:	bf00      	nop
 800fb1c:	3750      	adds	r7, #80	; 0x50
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bdb0      	pop	{r4, r5, r7, pc}
 800fb22:	bf00      	nop
 800fb24:	20017a9c 	.word	0x20017a9c
 800fb28:	20017a7c 	.word	0x20017a7c
 800fb2c:	20017aa6 	.word	0x20017aa6
 800fb30:	080173b0 	.word	0x080173b0
 800fb34:	08017758 	.word	0x08017758
 800fb38:	080173fc 	.word	0x080173fc

0800fb3c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b083      	sub	sp, #12
 800fb40:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fb42:	4b15      	ldr	r3, [pc, #84]	; (800fb98 <tcp_get_next_optbyte+0x5c>)
 800fb44:	881b      	ldrh	r3, [r3, #0]
 800fb46:	1c5a      	adds	r2, r3, #1
 800fb48:	b291      	uxth	r1, r2
 800fb4a:	4a13      	ldr	r2, [pc, #76]	; (800fb98 <tcp_get_next_optbyte+0x5c>)
 800fb4c:	8011      	strh	r1, [r2, #0]
 800fb4e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fb50:	4b12      	ldr	r3, [pc, #72]	; (800fb9c <tcp_get_next_optbyte+0x60>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d004      	beq.n	800fb62 <tcp_get_next_optbyte+0x26>
 800fb58:	4b11      	ldr	r3, [pc, #68]	; (800fba0 <tcp_get_next_optbyte+0x64>)
 800fb5a:	881b      	ldrh	r3, [r3, #0]
 800fb5c:	88fa      	ldrh	r2, [r7, #6]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d208      	bcs.n	800fb74 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fb62:	4b10      	ldr	r3, [pc, #64]	; (800fba4 <tcp_get_next_optbyte+0x68>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	3314      	adds	r3, #20
 800fb68:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fb6a:	88fb      	ldrh	r3, [r7, #6]
 800fb6c:	683a      	ldr	r2, [r7, #0]
 800fb6e:	4413      	add	r3, r2
 800fb70:	781b      	ldrb	r3, [r3, #0]
 800fb72:	e00b      	b.n	800fb8c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fb74:	88fb      	ldrh	r3, [r7, #6]
 800fb76:	b2da      	uxtb	r2, r3
 800fb78:	4b09      	ldr	r3, [pc, #36]	; (800fba0 <tcp_get_next_optbyte+0x64>)
 800fb7a:	881b      	ldrh	r3, [r3, #0]
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	1ad3      	subs	r3, r2, r3
 800fb80:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fb82:	4b06      	ldr	r3, [pc, #24]	; (800fb9c <tcp_get_next_optbyte+0x60>)
 800fb84:	681a      	ldr	r2, [r3, #0]
 800fb86:	797b      	ldrb	r3, [r7, #5]
 800fb88:	4413      	add	r3, r2
 800fb8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	370c      	adds	r7, #12
 800fb90:	46bd      	mov	sp, r7
 800fb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb96:	4770      	bx	lr
 800fb98:	20017a98 	.word	0x20017a98
 800fb9c:	20017a94 	.word	0x20017a94
 800fba0:	20017a92 	.word	0x20017a92
 800fba4:	20017a8c 	.word	0x20017a8c

0800fba8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d106      	bne.n	800fbc4 <tcp_parseopt+0x1c>
 800fbb6:	4b32      	ldr	r3, [pc, #200]	; (800fc80 <tcp_parseopt+0xd8>)
 800fbb8:	f240 727d 	movw	r2, #1917	; 0x77d
 800fbbc:	4931      	ldr	r1, [pc, #196]	; (800fc84 <tcp_parseopt+0xdc>)
 800fbbe:	4832      	ldr	r0, [pc, #200]	; (800fc88 <tcp_parseopt+0xe0>)
 800fbc0:	f005 f8d0 	bl	8014d64 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fbc4:	4b31      	ldr	r3, [pc, #196]	; (800fc8c <tcp_parseopt+0xe4>)
 800fbc6:	881b      	ldrh	r3, [r3, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d055      	beq.n	800fc78 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fbcc:	4b30      	ldr	r3, [pc, #192]	; (800fc90 <tcp_parseopt+0xe8>)
 800fbce:	2200      	movs	r2, #0
 800fbd0:	801a      	strh	r2, [r3, #0]
 800fbd2:	e045      	b.n	800fc60 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fbd4:	f7ff ffb2 	bl	800fb3c <tcp_get_next_optbyte>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fbdc:	7bfb      	ldrb	r3, [r7, #15]
 800fbde:	2b02      	cmp	r3, #2
 800fbe0:	d006      	beq.n	800fbf0 <tcp_parseopt+0x48>
 800fbe2:	2b02      	cmp	r3, #2
 800fbe4:	dc2b      	bgt.n	800fc3e <tcp_parseopt+0x96>
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d041      	beq.n	800fc6e <tcp_parseopt+0xc6>
 800fbea:	2b01      	cmp	r3, #1
 800fbec:	d127      	bne.n	800fc3e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fbee:	e037      	b.n	800fc60 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fbf0:	f7ff ffa4 	bl	800fb3c <tcp_get_next_optbyte>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	2b04      	cmp	r3, #4
 800fbf8:	d13b      	bne.n	800fc72 <tcp_parseopt+0xca>
 800fbfa:	4b25      	ldr	r3, [pc, #148]	; (800fc90 <tcp_parseopt+0xe8>)
 800fbfc:	881b      	ldrh	r3, [r3, #0]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	4a22      	ldr	r2, [pc, #136]	; (800fc8c <tcp_parseopt+0xe4>)
 800fc02:	8812      	ldrh	r2, [r2, #0]
 800fc04:	4293      	cmp	r3, r2
 800fc06:	da34      	bge.n	800fc72 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fc08:	f7ff ff98 	bl	800fb3c <tcp_get_next_optbyte>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	b29b      	uxth	r3, r3
 800fc10:	021b      	lsls	r3, r3, #8
 800fc12:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fc14:	f7ff ff92 	bl	800fb3c <tcp_get_next_optbyte>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	b29a      	uxth	r2, r3
 800fc1c:	89bb      	ldrh	r3, [r7, #12]
 800fc1e:	4313      	orrs	r3, r2
 800fc20:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fc22:	89bb      	ldrh	r3, [r7, #12]
 800fc24:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fc28:	d804      	bhi.n	800fc34 <tcp_parseopt+0x8c>
 800fc2a:	89bb      	ldrh	r3, [r7, #12]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d001      	beq.n	800fc34 <tcp_parseopt+0x8c>
 800fc30:	89ba      	ldrh	r2, [r7, #12]
 800fc32:	e001      	b.n	800fc38 <tcp_parseopt+0x90>
 800fc34:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fc3c:	e010      	b.n	800fc60 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fc3e:	f7ff ff7d 	bl	800fb3c <tcp_get_next_optbyte>
 800fc42:	4603      	mov	r3, r0
 800fc44:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fc46:	7afb      	ldrb	r3, [r7, #11]
 800fc48:	2b01      	cmp	r3, #1
 800fc4a:	d914      	bls.n	800fc76 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fc4c:	7afb      	ldrb	r3, [r7, #11]
 800fc4e:	b29a      	uxth	r2, r3
 800fc50:	4b0f      	ldr	r3, [pc, #60]	; (800fc90 <tcp_parseopt+0xe8>)
 800fc52:	881b      	ldrh	r3, [r3, #0]
 800fc54:	4413      	add	r3, r2
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	3b02      	subs	r3, #2
 800fc5a:	b29a      	uxth	r2, r3
 800fc5c:	4b0c      	ldr	r3, [pc, #48]	; (800fc90 <tcp_parseopt+0xe8>)
 800fc5e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fc60:	4b0b      	ldr	r3, [pc, #44]	; (800fc90 <tcp_parseopt+0xe8>)
 800fc62:	881a      	ldrh	r2, [r3, #0]
 800fc64:	4b09      	ldr	r3, [pc, #36]	; (800fc8c <tcp_parseopt+0xe4>)
 800fc66:	881b      	ldrh	r3, [r3, #0]
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d3b3      	bcc.n	800fbd4 <tcp_parseopt+0x2c>
 800fc6c:	e004      	b.n	800fc78 <tcp_parseopt+0xd0>
          return;
 800fc6e:	bf00      	nop
 800fc70:	e002      	b.n	800fc78 <tcp_parseopt+0xd0>
            return;
 800fc72:	bf00      	nop
 800fc74:	e000      	b.n	800fc78 <tcp_parseopt+0xd0>
            return;
 800fc76:	bf00      	nop
      }
    }
  }
}
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	080173b0 	.word	0x080173b0
 800fc84:	08017814 	.word	0x08017814
 800fc88:	080173fc 	.word	0x080173fc
 800fc8c:	20017a90 	.word	0x20017a90
 800fc90:	20017a98 	.word	0x20017a98

0800fc94 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fc94:	b480      	push	{r7}
 800fc96:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fc98:	4b05      	ldr	r3, [pc, #20]	; (800fcb0 <tcp_trigger_input_pcb_close+0x1c>)
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	f043 0310 	orr.w	r3, r3, #16
 800fca0:	b2da      	uxtb	r2, r3
 800fca2:	4b03      	ldr	r3, [pc, #12]	; (800fcb0 <tcp_trigger_input_pcb_close+0x1c>)
 800fca4:	701a      	strb	r2, [r3, #0]
}
 800fca6:	bf00      	nop
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr
 800fcb0:	20017aa9 	.word	0x20017aa9

0800fcb4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b084      	sub	sp, #16
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	60b9      	str	r1, [r7, #8]
 800fcbe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d00a      	beq.n	800fcdc <tcp_route+0x28>
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	7a1b      	ldrb	r3, [r3, #8]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d006      	beq.n	800fcdc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	7a1b      	ldrb	r3, [r3, #8]
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7fb fb10 	bl	800b2f8 <netif_get_by_index>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	e003      	b.n	800fce4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f003 f99d 	bl	801301c <ip4_route>
 800fce2:	4603      	mov	r3, r0
  }
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3710      	adds	r7, #16
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}

0800fcec <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fcec:	b590      	push	{r4, r7, lr}
 800fcee:	b087      	sub	sp, #28
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	60f8      	str	r0, [r7, #12]
 800fcf4:	60b9      	str	r1, [r7, #8]
 800fcf6:	603b      	str	r3, [r7, #0]
 800fcf8:	4613      	mov	r3, r2
 800fcfa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d105      	bne.n	800fd0e <tcp_create_segment+0x22>
 800fd02:	4b44      	ldr	r3, [pc, #272]	; (800fe14 <tcp_create_segment+0x128>)
 800fd04:	22a3      	movs	r2, #163	; 0xa3
 800fd06:	4944      	ldr	r1, [pc, #272]	; (800fe18 <tcp_create_segment+0x12c>)
 800fd08:	4844      	ldr	r0, [pc, #272]	; (800fe1c <tcp_create_segment+0x130>)
 800fd0a:	f005 f82b 	bl	8014d64 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d105      	bne.n	800fd20 <tcp_create_segment+0x34>
 800fd14:	4b3f      	ldr	r3, [pc, #252]	; (800fe14 <tcp_create_segment+0x128>)
 800fd16:	22a4      	movs	r2, #164	; 0xa4
 800fd18:	4941      	ldr	r1, [pc, #260]	; (800fe20 <tcp_create_segment+0x134>)
 800fd1a:	4840      	ldr	r0, [pc, #256]	; (800fe1c <tcp_create_segment+0x130>)
 800fd1c:	f005 f822 	bl	8014d64 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fd20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	f003 0304 	and.w	r3, r3, #4
 800fd2c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fd2e:	2003      	movs	r0, #3
 800fd30:	f7fa ff56 	bl	800abe0 <memp_malloc>
 800fd34:	6138      	str	r0, [r7, #16]
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d104      	bne.n	800fd46 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fd3c:	68b8      	ldr	r0, [r7, #8]
 800fd3e:	f7fb fe69 	bl	800ba14 <pbuf_free>
    return NULL;
 800fd42:	2300      	movs	r3, #0
 800fd44:	e061      	b.n	800fe0a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fd4c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	2200      	movs	r2, #0
 800fd52:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	68ba      	ldr	r2, [r7, #8]
 800fd58:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	891a      	ldrh	r2, [r3, #8]
 800fd5e:	7dfb      	ldrb	r3, [r7, #23]
 800fd60:	b29b      	uxth	r3, r3
 800fd62:	429a      	cmp	r2, r3
 800fd64:	d205      	bcs.n	800fd72 <tcp_create_segment+0x86>
 800fd66:	4b2b      	ldr	r3, [pc, #172]	; (800fe14 <tcp_create_segment+0x128>)
 800fd68:	22b0      	movs	r2, #176	; 0xb0
 800fd6a:	492e      	ldr	r1, [pc, #184]	; (800fe24 <tcp_create_segment+0x138>)
 800fd6c:	482b      	ldr	r0, [pc, #172]	; (800fe1c <tcp_create_segment+0x130>)
 800fd6e:	f004 fff9 	bl	8014d64 <iprintf>
  seg->len = p->tot_len - optlen;
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	891a      	ldrh	r2, [r3, #8]
 800fd76:	7dfb      	ldrb	r3, [r7, #23]
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	1ad3      	subs	r3, r2, r3
 800fd7c:	b29a      	uxth	r2, r3
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fd82:	2114      	movs	r1, #20
 800fd84:	68b8      	ldr	r0, [r7, #8]
 800fd86:	f7fb fdaf 	bl	800b8e8 <pbuf_add_header>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d004      	beq.n	800fd9a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fd90:	6938      	ldr	r0, [r7, #16]
 800fd92:	f7fd f8ce 	bl	800cf32 <tcp_seg_free>
    return NULL;
 800fd96:	2300      	movs	r3, #0
 800fd98:	e037      	b.n	800fe0a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	685a      	ldr	r2, [r3, #4]
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	8ada      	ldrh	r2, [r3, #22]
 800fda8:	693b      	ldr	r3, [r7, #16]
 800fdaa:	68dc      	ldr	r4, [r3, #12]
 800fdac:	4610      	mov	r0, r2
 800fdae:	f7fa fa3f 	bl	800a230 <lwip_htons>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	8b1a      	ldrh	r2, [r3, #24]
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	68dc      	ldr	r4, [r3, #12]
 800fdbe:	4610      	mov	r0, r2
 800fdc0:	f7fa fa36 	bl	800a230 <lwip_htons>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fdc8:	693b      	ldr	r3, [r7, #16]
 800fdca:	68dc      	ldr	r4, [r3, #12]
 800fdcc:	6838      	ldr	r0, [r7, #0]
 800fdce:	f7fa fa44 	bl	800a25a <lwip_htonl>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fdd6:	7dfb      	ldrb	r3, [r7, #23]
 800fdd8:	089b      	lsrs	r3, r3, #2
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	3305      	adds	r3, #5
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	031b      	lsls	r3, r3, #12
 800fde4:	b29a      	uxth	r2, r3
 800fde6:	79fb      	ldrb	r3, [r7, #7]
 800fde8:	b29b      	uxth	r3, r3
 800fdea:	4313      	orrs	r3, r2
 800fdec:	b29a      	uxth	r2, r3
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	68dc      	ldr	r4, [r3, #12]
 800fdf2:	4610      	mov	r0, r2
 800fdf4:	f7fa fa1c 	bl	800a230 <lwip_htons>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	68db      	ldr	r3, [r3, #12]
 800fe00:	2200      	movs	r2, #0
 800fe02:	749a      	strb	r2, [r3, #18]
 800fe04:	2200      	movs	r2, #0
 800fe06:	74da      	strb	r2, [r3, #19]
  return seg;
 800fe08:	693b      	ldr	r3, [r7, #16]
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	371c      	adds	r7, #28
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd90      	pop	{r4, r7, pc}
 800fe12:	bf00      	nop
 800fe14:	08017830 	.word	0x08017830
 800fe18:	08017864 	.word	0x08017864
 800fe1c:	08017884 	.word	0x08017884
 800fe20:	080178ac 	.word	0x080178ac
 800fe24:	080178d0 	.word	0x080178d0

0800fe28 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fe28:	b590      	push	{r4, r7, lr}
 800fe2a:	b08b      	sub	sp, #44	; 0x2c
 800fe2c:	af02      	add	r7, sp, #8
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	460b      	mov	r3, r1
 800fe32:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fe34:	2300      	movs	r3, #0
 800fe36:	61fb      	str	r3, [r7, #28]
 800fe38:	2300      	movs	r3, #0
 800fe3a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d106      	bne.n	800fe54 <tcp_split_unsent_seg+0x2c>
 800fe46:	4b95      	ldr	r3, [pc, #596]	; (801009c <tcp_split_unsent_seg+0x274>)
 800fe48:	f240 324b 	movw	r2, #843	; 0x34b
 800fe4c:	4994      	ldr	r1, [pc, #592]	; (80100a0 <tcp_split_unsent_seg+0x278>)
 800fe4e:	4895      	ldr	r0, [pc, #596]	; (80100a4 <tcp_split_unsent_seg+0x27c>)
 800fe50:	f004 ff88 	bl	8014d64 <iprintf>

  useg = pcb->unsent;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe58:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d102      	bne.n	800fe66 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fe60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe64:	e116      	b.n	8010094 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fe66:	887b      	ldrh	r3, [r7, #2]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d109      	bne.n	800fe80 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fe6c:	4b8b      	ldr	r3, [pc, #556]	; (801009c <tcp_split_unsent_seg+0x274>)
 800fe6e:	f240 3253 	movw	r2, #851	; 0x353
 800fe72:	498d      	ldr	r1, [pc, #564]	; (80100a8 <tcp_split_unsent_seg+0x280>)
 800fe74:	488b      	ldr	r0, [pc, #556]	; (80100a4 <tcp_split_unsent_seg+0x27c>)
 800fe76:	f004 ff75 	bl	8014d64 <iprintf>
    return ERR_VAL;
 800fe7a:	f06f 0305 	mvn.w	r3, #5
 800fe7e:	e109      	b.n	8010094 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	891b      	ldrh	r3, [r3, #8]
 800fe84:	887a      	ldrh	r2, [r7, #2]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d301      	bcc.n	800fe8e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	e102      	b.n	8010094 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe92:	887a      	ldrh	r2, [r7, #2]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d906      	bls.n	800fea6 <tcp_split_unsent_seg+0x7e>
 800fe98:	4b80      	ldr	r3, [pc, #512]	; (801009c <tcp_split_unsent_seg+0x274>)
 800fe9a:	f240 325b 	movw	r2, #859	; 0x35b
 800fe9e:	4983      	ldr	r1, [pc, #524]	; (80100ac <tcp_split_unsent_seg+0x284>)
 800fea0:	4880      	ldr	r0, [pc, #512]	; (80100a4 <tcp_split_unsent_seg+0x27c>)
 800fea2:	f004 ff5f 	bl	8014d64 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	891b      	ldrh	r3, [r3, #8]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d106      	bne.n	800febc <tcp_split_unsent_seg+0x94>
 800feae:	4b7b      	ldr	r3, [pc, #492]	; (801009c <tcp_split_unsent_seg+0x274>)
 800feb0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800feb4:	497e      	ldr	r1, [pc, #504]	; (80100b0 <tcp_split_unsent_seg+0x288>)
 800feb6:	487b      	ldr	r0, [pc, #492]	; (80100a4 <tcp_split_unsent_seg+0x27c>)
 800feb8:	f004 ff54 	bl	8014d64 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	7a9b      	ldrb	r3, [r3, #10]
 800fec0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fec2:	7bfb      	ldrb	r3, [r7, #15]
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	f003 0304 	and.w	r3, r3, #4
 800fecc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	891a      	ldrh	r2, [r3, #8]
 800fed2:	887b      	ldrh	r3, [r7, #2]
 800fed4:	1ad3      	subs	r3, r2, r3
 800fed6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fed8:	7bbb      	ldrb	r3, [r7, #14]
 800feda:	b29a      	uxth	r2, r3
 800fedc:	89bb      	ldrh	r3, [r7, #12]
 800fede:	4413      	add	r3, r2
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fee6:	4619      	mov	r1, r3
 800fee8:	2036      	movs	r0, #54	; 0x36
 800feea:	f7fb faaf 	bl	800b44c <pbuf_alloc>
 800feee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	f000 80b7 	beq.w	8010066 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	685b      	ldr	r3, [r3, #4]
 800fefc:	891a      	ldrh	r2, [r3, #8]
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	891b      	ldrh	r3, [r3, #8]
 800ff02:	1ad3      	subs	r3, r2, r3
 800ff04:	b29a      	uxth	r2, r3
 800ff06:	887b      	ldrh	r3, [r7, #2]
 800ff08:	4413      	add	r3, r2
 800ff0a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	6858      	ldr	r0, [r3, #4]
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	685a      	ldr	r2, [r3, #4]
 800ff14:	7bbb      	ldrb	r3, [r7, #14]
 800ff16:	18d1      	adds	r1, r2, r3
 800ff18:	897b      	ldrh	r3, [r7, #10]
 800ff1a:	89ba      	ldrh	r2, [r7, #12]
 800ff1c:	f7fb ff80 	bl	800be20 <pbuf_copy_partial>
 800ff20:	4603      	mov	r3, r0
 800ff22:	461a      	mov	r2, r3
 800ff24:	89bb      	ldrh	r3, [r7, #12]
 800ff26:	4293      	cmp	r3, r2
 800ff28:	f040 809f 	bne.w	801006a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	68db      	ldr	r3, [r3, #12]
 800ff30:	899b      	ldrh	r3, [r3, #12]
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7fa f97b 	bl	800a230 <lwip_htons>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff42:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ff44:	2300      	movs	r3, #0
 800ff46:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ff48:	7efb      	ldrb	r3, [r7, #27]
 800ff4a:	f003 0308 	and.w	r3, r3, #8
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d007      	beq.n	800ff62 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ff52:	7efb      	ldrb	r3, [r7, #27]
 800ff54:	f023 0308 	bic.w	r3, r3, #8
 800ff58:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ff5a:	7ebb      	ldrb	r3, [r7, #26]
 800ff5c:	f043 0308 	orr.w	r3, r3, #8
 800ff60:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ff62:	7efb      	ldrb	r3, [r7, #27]
 800ff64:	f003 0301 	and.w	r3, r3, #1
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d007      	beq.n	800ff7c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ff6c:	7efb      	ldrb	r3, [r7, #27]
 800ff6e:	f023 0301 	bic.w	r3, r3, #1
 800ff72:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ff74:	7ebb      	ldrb	r3, [r7, #26]
 800ff76:	f043 0301 	orr.w	r3, r3, #1
 800ff7a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	68db      	ldr	r3, [r3, #12]
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7fa f969 	bl	800a25a <lwip_htonl>
 800ff88:	4602      	mov	r2, r0
 800ff8a:	887b      	ldrh	r3, [r7, #2]
 800ff8c:	18d1      	adds	r1, r2, r3
 800ff8e:	7eba      	ldrb	r2, [r7, #26]
 800ff90:	7bfb      	ldrb	r3, [r7, #15]
 800ff92:	9300      	str	r3, [sp, #0]
 800ff94:	460b      	mov	r3, r1
 800ff96:	6939      	ldr	r1, [r7, #16]
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f7ff fea7 	bl	800fcec <tcp_create_segment>
 800ff9e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ffa0:	69fb      	ldr	r3, [r7, #28]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d063      	beq.n	801006e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7fb fdc0 	bl	800bb30 <pbuf_clen>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	461a      	mov	r2, r3
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffba:	1a9b      	subs	r3, r3, r2
 800ffbc:	b29a      	uxth	r2, r3
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	6858      	ldr	r0, [r3, #4]
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	891a      	ldrh	r2, [r3, #8]
 800ffce:	89bb      	ldrh	r3, [r7, #12]
 800ffd0:	1ad3      	subs	r3, r2, r3
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	f7fb fb97 	bl	800b708 <pbuf_realloc>
  useg->len -= remainder;
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	891a      	ldrh	r2, [r3, #8]
 800ffde:	89bb      	ldrh	r3, [r7, #12]
 800ffe0:	1ad3      	subs	r3, r2, r3
 800ffe2:	b29a      	uxth	r2, r3
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	899b      	ldrh	r3, [r3, #12]
 800ffee:	b29c      	uxth	r4, r3
 800fff0:	7efb      	ldrb	r3, [r7, #27]
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7fa f91b 	bl	800a230 <lwip_htons>
 800fffa:	4603      	mov	r3, r0
 800fffc:	461a      	mov	r2, r3
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	68db      	ldr	r3, [r3, #12]
 8010002:	4322      	orrs	r2, r4
 8010004:	b292      	uxth	r2, r2
 8010006:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	4618      	mov	r0, r3
 801000e:	f7fb fd8f 	bl	800bb30 <pbuf_clen>
 8010012:	4603      	mov	r3, r0
 8010014:	461a      	mov	r2, r3
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801001c:	4413      	add	r3, r2
 801001e:	b29a      	uxth	r2, r3
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010026:	69fb      	ldr	r3, [r7, #28]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	4618      	mov	r0, r3
 801002c:	f7fb fd80 	bl	800bb30 <pbuf_clen>
 8010030:	4603      	mov	r3, r0
 8010032:	461a      	mov	r2, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801003a:	4413      	add	r3, r2
 801003c:	b29a      	uxth	r2, r3
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	681a      	ldr	r2, [r3, #0]
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	69fa      	ldr	r2, [r7, #28]
 8010050:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010052:	69fb      	ldr	r3, [r7, #28]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d103      	bne.n	8010062 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2200      	movs	r2, #0
 801005e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010062:	2300      	movs	r3, #0
 8010064:	e016      	b.n	8010094 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010066:	bf00      	nop
 8010068:	e002      	b.n	8010070 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801006a:	bf00      	nop
 801006c:	e000      	b.n	8010070 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801006e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d006      	beq.n	8010084 <tcp_split_unsent_seg+0x25c>
 8010076:	4b09      	ldr	r3, [pc, #36]	; (801009c <tcp_split_unsent_seg+0x274>)
 8010078:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801007c:	490d      	ldr	r1, [pc, #52]	; (80100b4 <tcp_split_unsent_seg+0x28c>)
 801007e:	4809      	ldr	r0, [pc, #36]	; (80100a4 <tcp_split_unsent_seg+0x27c>)
 8010080:	f004 fe70 	bl	8014d64 <iprintf>
  if (p != NULL) {
 8010084:	693b      	ldr	r3, [r7, #16]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d002      	beq.n	8010090 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801008a:	6938      	ldr	r0, [r7, #16]
 801008c:	f7fb fcc2 	bl	800ba14 <pbuf_free>
  }

  return ERR_MEM;
 8010090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010094:	4618      	mov	r0, r3
 8010096:	3724      	adds	r7, #36	; 0x24
 8010098:	46bd      	mov	sp, r7
 801009a:	bd90      	pop	{r4, r7, pc}
 801009c:	08017830 	.word	0x08017830
 80100a0:	08017bc4 	.word	0x08017bc4
 80100a4:	08017884 	.word	0x08017884
 80100a8:	08017be8 	.word	0x08017be8
 80100ac:	08017c0c 	.word	0x08017c0c
 80100b0:	08017c1c 	.word	0x08017c1c
 80100b4:	08017c2c 	.word	0x08017c2c

080100b8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80100b8:	b590      	push	{r4, r7, lr}
 80100ba:	b085      	sub	sp, #20
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d106      	bne.n	80100d4 <tcp_send_fin+0x1c>
 80100c6:	4b21      	ldr	r3, [pc, #132]	; (801014c <tcp_send_fin+0x94>)
 80100c8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80100cc:	4920      	ldr	r1, [pc, #128]	; (8010150 <tcp_send_fin+0x98>)
 80100ce:	4821      	ldr	r0, [pc, #132]	; (8010154 <tcp_send_fin+0x9c>)
 80100d0:	f004 fe48 	bl	8014d64 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d02e      	beq.n	801013a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100e0:	60fb      	str	r3, [r7, #12]
 80100e2:	e002      	b.n	80100ea <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d1f8      	bne.n	80100e4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	68db      	ldr	r3, [r3, #12]
 80100f6:	899b      	ldrh	r3, [r3, #12]
 80100f8:	b29b      	uxth	r3, r3
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7fa f898 	bl	800a230 <lwip_htons>
 8010100:	4603      	mov	r3, r0
 8010102:	b2db      	uxtb	r3, r3
 8010104:	f003 0307 	and.w	r3, r3, #7
 8010108:	2b00      	cmp	r3, #0
 801010a:	d116      	bne.n	801013a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	899b      	ldrh	r3, [r3, #12]
 8010112:	b29c      	uxth	r4, r3
 8010114:	2001      	movs	r0, #1
 8010116:	f7fa f88b 	bl	800a230 <lwip_htons>
 801011a:	4603      	mov	r3, r0
 801011c:	461a      	mov	r2, r3
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	68db      	ldr	r3, [r3, #12]
 8010122:	4322      	orrs	r2, r4
 8010124:	b292      	uxth	r2, r2
 8010126:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	8b5b      	ldrh	r3, [r3, #26]
 801012c:	f043 0320 	orr.w	r3, r3, #32
 8010130:	b29a      	uxth	r2, r3
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010136:	2300      	movs	r3, #0
 8010138:	e004      	b.n	8010144 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801013a:	2101      	movs	r1, #1
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f000 f80b 	bl	8010158 <tcp_enqueue_flags>
 8010142:	4603      	mov	r3, r0
}
 8010144:	4618      	mov	r0, r3
 8010146:	3714      	adds	r7, #20
 8010148:	46bd      	mov	sp, r7
 801014a:	bd90      	pop	{r4, r7, pc}
 801014c:	08017830 	.word	0x08017830
 8010150:	08017c38 	.word	0x08017c38
 8010154:	08017884 	.word	0x08017884

08010158 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b08a      	sub	sp, #40	; 0x28
 801015c:	af02      	add	r7, sp, #8
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	460b      	mov	r3, r1
 8010162:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010164:	2300      	movs	r3, #0
 8010166:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010168:	2300      	movs	r3, #0
 801016a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801016c:	78fb      	ldrb	r3, [r7, #3]
 801016e:	f003 0303 	and.w	r3, r3, #3
 8010172:	2b00      	cmp	r3, #0
 8010174:	d106      	bne.n	8010184 <tcp_enqueue_flags+0x2c>
 8010176:	4b67      	ldr	r3, [pc, #412]	; (8010314 <tcp_enqueue_flags+0x1bc>)
 8010178:	f240 4211 	movw	r2, #1041	; 0x411
 801017c:	4966      	ldr	r1, [pc, #408]	; (8010318 <tcp_enqueue_flags+0x1c0>)
 801017e:	4867      	ldr	r0, [pc, #412]	; (801031c <tcp_enqueue_flags+0x1c4>)
 8010180:	f004 fdf0 	bl	8014d64 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d106      	bne.n	8010198 <tcp_enqueue_flags+0x40>
 801018a:	4b62      	ldr	r3, [pc, #392]	; (8010314 <tcp_enqueue_flags+0x1bc>)
 801018c:	f240 4213 	movw	r2, #1043	; 0x413
 8010190:	4963      	ldr	r1, [pc, #396]	; (8010320 <tcp_enqueue_flags+0x1c8>)
 8010192:	4862      	ldr	r0, [pc, #392]	; (801031c <tcp_enqueue_flags+0x1c4>)
 8010194:	f004 fde6 	bl	8014d64 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010198:	78fb      	ldrb	r3, [r7, #3]
 801019a:	f003 0302 	and.w	r3, r3, #2
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d001      	beq.n	80101a6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80101a2:	2301      	movs	r3, #1
 80101a4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80101a6:	7ffb      	ldrb	r3, [r7, #31]
 80101a8:	009b      	lsls	r3, r3, #2
 80101aa:	b2db      	uxtb	r3, r3
 80101ac:	f003 0304 	and.w	r3, r3, #4
 80101b0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80101b2:	7dfb      	ldrb	r3, [r7, #23]
 80101b4:	b29b      	uxth	r3, r3
 80101b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80101ba:	4619      	mov	r1, r3
 80101bc:	2036      	movs	r0, #54	; 0x36
 80101be:	f7fb f945 	bl	800b44c <pbuf_alloc>
 80101c2:	6138      	str	r0, [r7, #16]
 80101c4:	693b      	ldr	r3, [r7, #16]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d109      	bne.n	80101de <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	8b5b      	ldrh	r3, [r3, #26]
 80101ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101d2:	b29a      	uxth	r2, r3
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80101d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101dc:	e095      	b.n	801030a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	895a      	ldrh	r2, [r3, #10]
 80101e2:	7dfb      	ldrb	r3, [r7, #23]
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d206      	bcs.n	80101f8 <tcp_enqueue_flags+0xa0>
 80101ea:	4b4a      	ldr	r3, [pc, #296]	; (8010314 <tcp_enqueue_flags+0x1bc>)
 80101ec:	f240 4239 	movw	r2, #1081	; 0x439
 80101f0:	494c      	ldr	r1, [pc, #304]	; (8010324 <tcp_enqueue_flags+0x1cc>)
 80101f2:	484a      	ldr	r0, [pc, #296]	; (801031c <tcp_enqueue_flags+0x1c4>)
 80101f4:	f004 fdb6 	bl	8014d64 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80101fc:	78fa      	ldrb	r2, [r7, #3]
 80101fe:	7ffb      	ldrb	r3, [r7, #31]
 8010200:	9300      	str	r3, [sp, #0]
 8010202:	460b      	mov	r3, r1
 8010204:	6939      	ldr	r1, [r7, #16]
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f7ff fd70 	bl	800fcec <tcp_create_segment>
 801020c:	60f8      	str	r0, [r7, #12]
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d109      	bne.n	8010228 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	8b5b      	ldrh	r3, [r3, #26]
 8010218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801021c:	b29a      	uxth	r2, r3
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010226:	e070      	b.n	801030a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	68db      	ldr	r3, [r3, #12]
 801022c:	f003 0303 	and.w	r3, r3, #3
 8010230:	2b00      	cmp	r3, #0
 8010232:	d006      	beq.n	8010242 <tcp_enqueue_flags+0xea>
 8010234:	4b37      	ldr	r3, [pc, #220]	; (8010314 <tcp_enqueue_flags+0x1bc>)
 8010236:	f240 4242 	movw	r2, #1090	; 0x442
 801023a:	493b      	ldr	r1, [pc, #236]	; (8010328 <tcp_enqueue_flags+0x1d0>)
 801023c:	4837      	ldr	r0, [pc, #220]	; (801031c <tcp_enqueue_flags+0x1c4>)
 801023e:	f004 fd91 	bl	8014d64 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	891b      	ldrh	r3, [r3, #8]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d006      	beq.n	8010258 <tcp_enqueue_flags+0x100>
 801024a:	4b32      	ldr	r3, [pc, #200]	; (8010314 <tcp_enqueue_flags+0x1bc>)
 801024c:	f240 4243 	movw	r2, #1091	; 0x443
 8010250:	4936      	ldr	r1, [pc, #216]	; (801032c <tcp_enqueue_flags+0x1d4>)
 8010252:	4832      	ldr	r0, [pc, #200]	; (801031c <tcp_enqueue_flags+0x1c4>)
 8010254:	f004 fd86 	bl	8014d64 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801025c:	2b00      	cmp	r3, #0
 801025e:	d103      	bne.n	8010268 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	68fa      	ldr	r2, [r7, #12]
 8010264:	66da      	str	r2, [r3, #108]	; 0x6c
 8010266:	e00d      	b.n	8010284 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801026c:	61bb      	str	r3, [r7, #24]
 801026e:	e002      	b.n	8010276 <tcp_enqueue_flags+0x11e>
 8010270:	69bb      	ldr	r3, [r7, #24]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	61bb      	str	r3, [r7, #24]
 8010276:	69bb      	ldr	r3, [r7, #24]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d1f8      	bne.n	8010270 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	68fa      	ldr	r2, [r7, #12]
 8010282:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2200      	movs	r2, #0
 8010288:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801028c:	78fb      	ldrb	r3, [r7, #3]
 801028e:	f003 0302 	and.w	r3, r3, #2
 8010292:	2b00      	cmp	r3, #0
 8010294:	d104      	bne.n	80102a0 <tcp_enqueue_flags+0x148>
 8010296:	78fb      	ldrb	r3, [r7, #3]
 8010298:	f003 0301 	and.w	r3, r3, #1
 801029c:	2b00      	cmp	r3, #0
 801029e:	d004      	beq.n	80102aa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80102a4:	1c5a      	adds	r2, r3, #1
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80102aa:	78fb      	ldrb	r3, [r7, #3]
 80102ac:	f003 0301 	and.w	r3, r3, #1
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d006      	beq.n	80102c2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	8b5b      	ldrh	r3, [r3, #26]
 80102b8:	f043 0320 	orr.w	r3, r3, #32
 80102bc:	b29a      	uxth	r2, r3
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7fb fc32 	bl	800bb30 <pbuf_clen>
 80102cc:	4603      	mov	r3, r0
 80102ce:	461a      	mov	r2, r3
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102d6:	4413      	add	r3, r2
 80102d8:	b29a      	uxth	r2, r3
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d00e      	beq.n	8010308 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d10a      	bne.n	8010308 <tcp_enqueue_flags+0x1b0>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d106      	bne.n	8010308 <tcp_enqueue_flags+0x1b0>
 80102fa:	4b06      	ldr	r3, [pc, #24]	; (8010314 <tcp_enqueue_flags+0x1bc>)
 80102fc:	f240 4265 	movw	r2, #1125	; 0x465
 8010300:	490b      	ldr	r1, [pc, #44]	; (8010330 <tcp_enqueue_flags+0x1d8>)
 8010302:	4806      	ldr	r0, [pc, #24]	; (801031c <tcp_enqueue_flags+0x1c4>)
 8010304:	f004 fd2e 	bl	8014d64 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010308:	2300      	movs	r3, #0
}
 801030a:	4618      	mov	r0, r3
 801030c:	3720      	adds	r7, #32
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}
 8010312:	bf00      	nop
 8010314:	08017830 	.word	0x08017830
 8010318:	08017c54 	.word	0x08017c54
 801031c:	08017884 	.word	0x08017884
 8010320:	08017cac 	.word	0x08017cac
 8010324:	08017ccc 	.word	0x08017ccc
 8010328:	08017d08 	.word	0x08017d08
 801032c:	08017d20 	.word	0x08017d20
 8010330:	08017d4c 	.word	0x08017d4c

08010334 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010334:	b5b0      	push	{r4, r5, r7, lr}
 8010336:	b08a      	sub	sp, #40	; 0x28
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d106      	bne.n	8010350 <tcp_output+0x1c>
 8010342:	4b8a      	ldr	r3, [pc, #552]	; (801056c <tcp_output+0x238>)
 8010344:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010348:	4989      	ldr	r1, [pc, #548]	; (8010570 <tcp_output+0x23c>)
 801034a:	488a      	ldr	r0, [pc, #552]	; (8010574 <tcp_output+0x240>)
 801034c:	f004 fd0a 	bl	8014d64 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	7d1b      	ldrb	r3, [r3, #20]
 8010354:	2b01      	cmp	r3, #1
 8010356:	d106      	bne.n	8010366 <tcp_output+0x32>
 8010358:	4b84      	ldr	r3, [pc, #528]	; (801056c <tcp_output+0x238>)
 801035a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801035e:	4986      	ldr	r1, [pc, #536]	; (8010578 <tcp_output+0x244>)
 8010360:	4884      	ldr	r0, [pc, #528]	; (8010574 <tcp_output+0x240>)
 8010362:	f004 fcff 	bl	8014d64 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010366:	4b85      	ldr	r3, [pc, #532]	; (801057c <tcp_output+0x248>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	687a      	ldr	r2, [r7, #4]
 801036c:	429a      	cmp	r2, r3
 801036e:	d101      	bne.n	8010374 <tcp_output+0x40>
    return ERR_OK;
 8010370:	2300      	movs	r3, #0
 8010372:	e1ce      	b.n	8010712 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010380:	4293      	cmp	r3, r2
 8010382:	bf28      	it	cs
 8010384:	4613      	movcs	r3, r2
 8010386:	b29b      	uxth	r3, r3
 8010388:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801038e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010392:	2b00      	cmp	r3, #0
 8010394:	d10b      	bne.n	80103ae <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	8b5b      	ldrh	r3, [r3, #26]
 801039a:	f003 0302 	and.w	r3, r3, #2
 801039e:	2b00      	cmp	r3, #0
 80103a0:	f000 81aa 	beq.w	80106f8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f000 fdcb 	bl	8010f40 <tcp_send_empty_ack>
 80103aa:	4603      	mov	r3, r0
 80103ac:	e1b1      	b.n	8010712 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80103ae:	6879      	ldr	r1, [r7, #4]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	3304      	adds	r3, #4
 80103b4:	461a      	mov	r2, r3
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f7ff fc7c 	bl	800fcb4 <tcp_route>
 80103bc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d102      	bne.n	80103ca <tcp_output+0x96>
    return ERR_RTE;
 80103c4:	f06f 0303 	mvn.w	r3, #3
 80103c8:	e1a3      	b.n	8010712 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d003      	beq.n	80103d8 <tcp_output+0xa4>
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d111      	bne.n	80103fc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d002      	beq.n	80103e4 <tcp_output+0xb0>
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	3304      	adds	r3, #4
 80103e2:	e000      	b.n	80103e6 <tcp_output+0xb2>
 80103e4:	2300      	movs	r3, #0
 80103e6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d102      	bne.n	80103f4 <tcp_output+0xc0>
      return ERR_RTE;
 80103ee:	f06f 0303 	mvn.w	r3, #3
 80103f2:	e18e      	b.n	8010712 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	681a      	ldr	r2, [r3, #0]
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80103fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fe:	68db      	ldr	r3, [r3, #12]
 8010400:	685b      	ldr	r3, [r3, #4]
 8010402:	4618      	mov	r0, r3
 8010404:	f7f9 ff29 	bl	800a25a <lwip_htonl>
 8010408:	4602      	mov	r2, r0
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801040e:	1ad3      	subs	r3, r2, r3
 8010410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010412:	8912      	ldrh	r2, [r2, #8]
 8010414:	4413      	add	r3, r2
 8010416:	69ba      	ldr	r2, [r7, #24]
 8010418:	429a      	cmp	r2, r3
 801041a:	d227      	bcs.n	801046c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010422:	461a      	mov	r2, r3
 8010424:	69bb      	ldr	r3, [r7, #24]
 8010426:	4293      	cmp	r3, r2
 8010428:	d114      	bne.n	8010454 <tcp_output+0x120>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801042e:	2b00      	cmp	r3, #0
 8010430:	d110      	bne.n	8010454 <tcp_output+0x120>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010438:	2b00      	cmp	r3, #0
 801043a:	d10b      	bne.n	8010454 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2201      	movs	r2, #1
 8010448:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2200      	movs	r2, #0
 8010450:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	8b5b      	ldrh	r3, [r3, #26]
 8010458:	f003 0302 	and.w	r3, r3, #2
 801045c:	2b00      	cmp	r3, #0
 801045e:	f000 814d 	beq.w	80106fc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f000 fd6c 	bl	8010f40 <tcp_send_empty_ack>
 8010468:	4603      	mov	r3, r0
 801046a:	e152      	b.n	8010712 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2200      	movs	r2, #0
 8010470:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010478:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801047a:	6a3b      	ldr	r3, [r7, #32]
 801047c:	2b00      	cmp	r3, #0
 801047e:	f000 811c 	beq.w	80106ba <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010482:	e002      	b.n	801048a <tcp_output+0x156>
 8010484:	6a3b      	ldr	r3, [r7, #32]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	623b      	str	r3, [r7, #32]
 801048a:	6a3b      	ldr	r3, [r7, #32]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d1f8      	bne.n	8010484 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010492:	e112      	b.n	80106ba <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010496:	68db      	ldr	r3, [r3, #12]
 8010498:	899b      	ldrh	r3, [r3, #12]
 801049a:	b29b      	uxth	r3, r3
 801049c:	4618      	mov	r0, r3
 801049e:	f7f9 fec7 	bl	800a230 <lwip_htons>
 80104a2:	4603      	mov	r3, r0
 80104a4:	b2db      	uxtb	r3, r3
 80104a6:	f003 0304 	and.w	r3, r3, #4
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d006      	beq.n	80104bc <tcp_output+0x188>
 80104ae:	4b2f      	ldr	r3, [pc, #188]	; (801056c <tcp_output+0x238>)
 80104b0:	f240 5236 	movw	r2, #1334	; 0x536
 80104b4:	4932      	ldr	r1, [pc, #200]	; (8010580 <tcp_output+0x24c>)
 80104b6:	482f      	ldr	r0, [pc, #188]	; (8010574 <tcp_output+0x240>)
 80104b8:	f004 fc54 	bl	8014d64 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d01f      	beq.n	8010504 <tcp_output+0x1d0>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	8b5b      	ldrh	r3, [r3, #26]
 80104c8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d119      	bne.n	8010504 <tcp_output+0x1d0>
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d00b      	beq.n	80104f0 <tcp_output+0x1bc>
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d110      	bne.n	8010504 <tcp_output+0x1d0>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104e6:	891a      	ldrh	r2, [r3, #8]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d209      	bcs.n	8010504 <tcp_output+0x1d0>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d004      	beq.n	8010504 <tcp_output+0x1d0>
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010500:	2b08      	cmp	r3, #8
 8010502:	d901      	bls.n	8010508 <tcp_output+0x1d4>
 8010504:	2301      	movs	r3, #1
 8010506:	e000      	b.n	801050a <tcp_output+0x1d6>
 8010508:	2300      	movs	r3, #0
 801050a:	2b00      	cmp	r3, #0
 801050c:	d106      	bne.n	801051c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	8b5b      	ldrh	r3, [r3, #26]
 8010512:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010516:	2b00      	cmp	r3, #0
 8010518:	f000 80e4 	beq.w	80106e4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	7d1b      	ldrb	r3, [r3, #20]
 8010520:	2b02      	cmp	r3, #2
 8010522:	d00d      	beq.n	8010540 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	899b      	ldrh	r3, [r3, #12]
 801052a:	b29c      	uxth	r4, r3
 801052c:	2010      	movs	r0, #16
 801052e:	f7f9 fe7f 	bl	800a230 <lwip_htons>
 8010532:	4603      	mov	r3, r0
 8010534:	461a      	mov	r2, r3
 8010536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010538:	68db      	ldr	r3, [r3, #12]
 801053a:	4322      	orrs	r2, r4
 801053c:	b292      	uxth	r2, r2
 801053e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010540:	697a      	ldr	r2, [r7, #20]
 8010542:	6879      	ldr	r1, [r7, #4]
 8010544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010546:	f000 f909 	bl	801075c <tcp_output_segment>
 801054a:	4603      	mov	r3, r0
 801054c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801054e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d016      	beq.n	8010584 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	8b5b      	ldrh	r3, [r3, #26]
 801055a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801055e:	b29a      	uxth	r2, r3
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	835a      	strh	r2, [r3, #26]
      return err;
 8010564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010568:	e0d3      	b.n	8010712 <tcp_output+0x3de>
 801056a:	bf00      	nop
 801056c:	08017830 	.word	0x08017830
 8010570:	08017d74 	.word	0x08017d74
 8010574:	08017884 	.word	0x08017884
 8010578:	08017d8c 	.word	0x08017d8c
 801057c:	20017ab0 	.word	0x20017ab0
 8010580:	08017db4 	.word	0x08017db4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	7d1b      	ldrb	r3, [r3, #20]
 8010590:	2b02      	cmp	r3, #2
 8010592:	d006      	beq.n	80105a2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	8b5b      	ldrh	r3, [r3, #26]
 8010598:	f023 0303 	bic.w	r3, r3, #3
 801059c:	b29a      	uxth	r2, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80105a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a4:	68db      	ldr	r3, [r3, #12]
 80105a6:	685b      	ldr	r3, [r3, #4]
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7f9 fe56 	bl	800a25a <lwip_htonl>
 80105ae:	4604      	mov	r4, r0
 80105b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b2:	891b      	ldrh	r3, [r3, #8]
 80105b4:	461d      	mov	r5, r3
 80105b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b8:	68db      	ldr	r3, [r3, #12]
 80105ba:	899b      	ldrh	r3, [r3, #12]
 80105bc:	b29b      	uxth	r3, r3
 80105be:	4618      	mov	r0, r3
 80105c0:	f7f9 fe36 	bl	800a230 <lwip_htons>
 80105c4:	4603      	mov	r3, r0
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	f003 0303 	and.w	r3, r3, #3
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d001      	beq.n	80105d4 <tcp_output+0x2a0>
 80105d0:	2301      	movs	r3, #1
 80105d2:	e000      	b.n	80105d6 <tcp_output+0x2a2>
 80105d4:	2300      	movs	r3, #0
 80105d6:	442b      	add	r3, r5
 80105d8:	4423      	add	r3, r4
 80105da:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	1ad3      	subs	r3, r2, r3
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	da02      	bge.n	80105ee <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	68ba      	ldr	r2, [r7, #8]
 80105ec:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80105ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f0:	891b      	ldrh	r3, [r3, #8]
 80105f2:	461c      	mov	r4, r3
 80105f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f6:	68db      	ldr	r3, [r3, #12]
 80105f8:	899b      	ldrh	r3, [r3, #12]
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7f9 fe17 	bl	800a230 <lwip_htons>
 8010602:	4603      	mov	r3, r0
 8010604:	b2db      	uxtb	r3, r3
 8010606:	f003 0303 	and.w	r3, r3, #3
 801060a:	2b00      	cmp	r3, #0
 801060c:	d001      	beq.n	8010612 <tcp_output+0x2de>
 801060e:	2301      	movs	r3, #1
 8010610:	e000      	b.n	8010614 <tcp_output+0x2e0>
 8010612:	2300      	movs	r3, #0
 8010614:	4423      	add	r3, r4
 8010616:	2b00      	cmp	r3, #0
 8010618:	d049      	beq.n	80106ae <tcp_output+0x37a>
      seg->next = NULL;
 801061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061c:	2200      	movs	r2, #0
 801061e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010624:	2b00      	cmp	r3, #0
 8010626:	d105      	bne.n	8010634 <tcp_output+0x300>
        pcb->unacked = seg;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801062c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801062e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010630:	623b      	str	r3, [r7, #32]
 8010632:	e03f      	b.n	80106b4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010636:	68db      	ldr	r3, [r3, #12]
 8010638:	685b      	ldr	r3, [r3, #4]
 801063a:	4618      	mov	r0, r3
 801063c:	f7f9 fe0d 	bl	800a25a <lwip_htonl>
 8010640:	4604      	mov	r4, r0
 8010642:	6a3b      	ldr	r3, [r7, #32]
 8010644:	68db      	ldr	r3, [r3, #12]
 8010646:	685b      	ldr	r3, [r3, #4]
 8010648:	4618      	mov	r0, r3
 801064a:	f7f9 fe06 	bl	800a25a <lwip_htonl>
 801064e:	4603      	mov	r3, r0
 8010650:	1ae3      	subs	r3, r4, r3
 8010652:	2b00      	cmp	r3, #0
 8010654:	da24      	bge.n	80106a0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	3370      	adds	r3, #112	; 0x70
 801065a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801065c:	e002      	b.n	8010664 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801065e:	69fb      	ldr	r3, [r7, #28]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010664:	69fb      	ldr	r3, [r7, #28]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d011      	beq.n	8010690 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801066c:	69fb      	ldr	r3, [r7, #28]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	68db      	ldr	r3, [r3, #12]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	4618      	mov	r0, r3
 8010676:	f7f9 fdf0 	bl	800a25a <lwip_htonl>
 801067a:	4604      	mov	r4, r0
 801067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067e:	68db      	ldr	r3, [r3, #12]
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	4618      	mov	r0, r3
 8010684:	f7f9 fde9 	bl	800a25a <lwip_htonl>
 8010688:	4603      	mov	r3, r0
 801068a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801068c:	2b00      	cmp	r3, #0
 801068e:	dbe6      	blt.n	801065e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010690:	69fb      	ldr	r3, [r7, #28]
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010696:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010698:	69fb      	ldr	r3, [r7, #28]
 801069a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801069c:	601a      	str	r2, [r3, #0]
 801069e:	e009      	b.n	80106b4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80106a0:	6a3b      	ldr	r3, [r7, #32]
 80106a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106a4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80106a6:	6a3b      	ldr	r3, [r7, #32]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	623b      	str	r3, [r7, #32]
 80106ac:	e002      	b.n	80106b4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80106ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106b0:	f7fc fc3f 	bl	800cf32 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106b8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80106ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d012      	beq.n	80106e6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80106c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c2:	68db      	ldr	r3, [r3, #12]
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7f9 fdc7 	bl	800a25a <lwip_htonl>
 80106cc:	4602      	mov	r2, r0
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106d2:	1ad3      	subs	r3, r2, r3
 80106d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106d6:	8912      	ldrh	r2, [r2, #8]
 80106d8:	4413      	add	r3, r2
  while (seg != NULL &&
 80106da:	69ba      	ldr	r2, [r7, #24]
 80106dc:	429a      	cmp	r2, r3
 80106de:	f4bf aed9 	bcs.w	8010494 <tcp_output+0x160>
 80106e2:	e000      	b.n	80106e6 <tcp_output+0x3b2>
      break;
 80106e4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d108      	bne.n	8010700 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2200      	movs	r2, #0
 80106f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80106f6:	e004      	b.n	8010702 <tcp_output+0x3ce>
    goto output_done;
 80106f8:	bf00      	nop
 80106fa:	e002      	b.n	8010702 <tcp_output+0x3ce>
    goto output_done;
 80106fc:	bf00      	nop
 80106fe:	e000      	b.n	8010702 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010700:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	8b5b      	ldrh	r3, [r3, #26]
 8010706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801070a:	b29a      	uxth	r2, r3
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010710:	2300      	movs	r3, #0
}
 8010712:	4618      	mov	r0, r3
 8010714:	3728      	adds	r7, #40	; 0x28
 8010716:	46bd      	mov	sp, r7
 8010718:	bdb0      	pop	{r4, r5, r7, pc}
 801071a:	bf00      	nop

0801071c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d106      	bne.n	8010738 <tcp_output_segment_busy+0x1c>
 801072a:	4b09      	ldr	r3, [pc, #36]	; (8010750 <tcp_output_segment_busy+0x34>)
 801072c:	f240 529a 	movw	r2, #1434	; 0x59a
 8010730:	4908      	ldr	r1, [pc, #32]	; (8010754 <tcp_output_segment_busy+0x38>)
 8010732:	4809      	ldr	r0, [pc, #36]	; (8010758 <tcp_output_segment_busy+0x3c>)
 8010734:	f004 fb16 	bl	8014d64 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	685b      	ldr	r3, [r3, #4]
 801073c:	7b9b      	ldrb	r3, [r3, #14]
 801073e:	2b01      	cmp	r3, #1
 8010740:	d001      	beq.n	8010746 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010742:	2301      	movs	r3, #1
 8010744:	e000      	b.n	8010748 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010746:	2300      	movs	r3, #0
}
 8010748:	4618      	mov	r0, r3
 801074a:	3708      	adds	r7, #8
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}
 8010750:	08017830 	.word	0x08017830
 8010754:	08017dcc 	.word	0x08017dcc
 8010758:	08017884 	.word	0x08017884

0801075c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801075c:	b5b0      	push	{r4, r5, r7, lr}
 801075e:	b08c      	sub	sp, #48	; 0x30
 8010760:	af04      	add	r7, sp, #16
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	60b9      	str	r1, [r7, #8]
 8010766:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d106      	bne.n	801077c <tcp_output_segment+0x20>
 801076e:	4b63      	ldr	r3, [pc, #396]	; (80108fc <tcp_output_segment+0x1a0>)
 8010770:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010774:	4962      	ldr	r1, [pc, #392]	; (8010900 <tcp_output_segment+0x1a4>)
 8010776:	4863      	ldr	r0, [pc, #396]	; (8010904 <tcp_output_segment+0x1a8>)
 8010778:	f004 faf4 	bl	8014d64 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d106      	bne.n	8010790 <tcp_output_segment+0x34>
 8010782:	4b5e      	ldr	r3, [pc, #376]	; (80108fc <tcp_output_segment+0x1a0>)
 8010784:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010788:	495f      	ldr	r1, [pc, #380]	; (8010908 <tcp_output_segment+0x1ac>)
 801078a:	485e      	ldr	r0, [pc, #376]	; (8010904 <tcp_output_segment+0x1a8>)
 801078c:	f004 faea 	bl	8014d64 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d106      	bne.n	80107a4 <tcp_output_segment+0x48>
 8010796:	4b59      	ldr	r3, [pc, #356]	; (80108fc <tcp_output_segment+0x1a0>)
 8010798:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801079c:	495b      	ldr	r1, [pc, #364]	; (801090c <tcp_output_segment+0x1b0>)
 801079e:	4859      	ldr	r0, [pc, #356]	; (8010904 <tcp_output_segment+0x1a8>)
 80107a0:	f004 fae0 	bl	8014d64 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80107a4:	68f8      	ldr	r0, [r7, #12]
 80107a6:	f7ff ffb9 	bl	801071c <tcp_output_segment_busy>
 80107aa:	4603      	mov	r3, r0
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d001      	beq.n	80107b4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80107b0:	2300      	movs	r3, #0
 80107b2:	e09f      	b.n	80108f4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	68dc      	ldr	r4, [r3, #12]
 80107bc:	4610      	mov	r0, r2
 80107be:	f7f9 fd4c 	bl	800a25a <lwip_htonl>
 80107c2:	4603      	mov	r3, r0
 80107c4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	68dc      	ldr	r4, [r3, #12]
 80107ce:	4610      	mov	r0, r2
 80107d0:	f7f9 fd2e 	bl	800a230 <lwip_htons>
 80107d4:	4603      	mov	r3, r0
 80107d6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107dc:	68ba      	ldr	r2, [r7, #8]
 80107de:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80107e0:	441a      	add	r2, r3
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	68db      	ldr	r3, [r3, #12]
 80107ea:	3314      	adds	r3, #20
 80107ec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	7a9b      	ldrb	r3, [r3, #10]
 80107f2:	f003 0301 	and.w	r3, r3, #1
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d015      	beq.n	8010826 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	3304      	adds	r3, #4
 80107fe:	461a      	mov	r2, r3
 8010800:	6879      	ldr	r1, [r7, #4]
 8010802:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010806:	f7fc fe8b 	bl	800d520 <tcp_eff_send_mss_netif>
 801080a:	4603      	mov	r3, r0
 801080c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801080e:	8b7b      	ldrh	r3, [r7, #26]
 8010810:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010814:	4618      	mov	r0, r3
 8010816:	f7f9 fd20 	bl	800a25a <lwip_htonl>
 801081a:	4602      	mov	r2, r0
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010820:	69fb      	ldr	r3, [r7, #28]
 8010822:	3304      	adds	r3, #4
 8010824:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010826:	68bb      	ldr	r3, [r7, #8]
 8010828:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801082c:	2b00      	cmp	r3, #0
 801082e:	da02      	bge.n	8010836 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	2200      	movs	r2, #0
 8010834:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801083a:	2b00      	cmp	r3, #0
 801083c:	d10c      	bne.n	8010858 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801083e:	4b34      	ldr	r3, [pc, #208]	; (8010910 <tcp_output_segment+0x1b4>)
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	68db      	ldr	r3, [r3, #12]
 801084a:	685b      	ldr	r3, [r3, #4]
 801084c:	4618      	mov	r0, r3
 801084e:	f7f9 fd04 	bl	800a25a <lwip_htonl>
 8010852:	4602      	mov	r2, r0
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	68da      	ldr	r2, [r3, #12]
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	685b      	ldr	r3, [r3, #4]
 8010862:	1ad3      	subs	r3, r2, r3
 8010864:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	685b      	ldr	r3, [r3, #4]
 801086a:	8959      	ldrh	r1, [r3, #10]
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	685b      	ldr	r3, [r3, #4]
 8010870:	8b3a      	ldrh	r2, [r7, #24]
 8010872:	1a8a      	subs	r2, r1, r2
 8010874:	b292      	uxth	r2, r2
 8010876:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	8919      	ldrh	r1, [r3, #8]
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	685b      	ldr	r3, [r3, #4]
 8010882:	8b3a      	ldrh	r2, [r7, #24]
 8010884:	1a8a      	subs	r2, r1, r2
 8010886:	b292      	uxth	r2, r2
 8010888:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	68fa      	ldr	r2, [r7, #12]
 8010890:	68d2      	ldr	r2, [r2, #12]
 8010892:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	68db      	ldr	r3, [r3, #12]
 8010898:	2200      	movs	r2, #0
 801089a:	741a      	strb	r2, [r3, #16]
 801089c:	2200      	movs	r2, #0
 801089e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	68db      	ldr	r3, [r3, #12]
 80108a4:	f103 0214 	add.w	r2, r3, #20
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	7a9b      	ldrb	r3, [r3, #10]
 80108ac:	009b      	lsls	r3, r3, #2
 80108ae:	f003 0304 	and.w	r3, r3, #4
 80108b2:	4413      	add	r3, r2
 80108b4:	69fa      	ldr	r2, [r7, #28]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d006      	beq.n	80108c8 <tcp_output_segment+0x16c>
 80108ba:	4b10      	ldr	r3, [pc, #64]	; (80108fc <tcp_output_segment+0x1a0>)
 80108bc:	f240 621c 	movw	r2, #1564	; 0x61c
 80108c0:	4914      	ldr	r1, [pc, #80]	; (8010914 <tcp_output_segment+0x1b8>)
 80108c2:	4810      	ldr	r0, [pc, #64]	; (8010904 <tcp_output_segment+0x1a8>)
 80108c4:	f004 fa4e 	bl	8014d64 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	6858      	ldr	r0, [r3, #4]
 80108cc:	68b9      	ldr	r1, [r7, #8]
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	1d1c      	adds	r4, r3, #4
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	7add      	ldrb	r5, [r3, #11]
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	7a9b      	ldrb	r3, [r3, #10]
 80108da:	687a      	ldr	r2, [r7, #4]
 80108dc:	9202      	str	r2, [sp, #8]
 80108de:	2206      	movs	r2, #6
 80108e0:	9201      	str	r2, [sp, #4]
 80108e2:	9300      	str	r3, [sp, #0]
 80108e4:	462b      	mov	r3, r5
 80108e6:	4622      	mov	r2, r4
 80108e8:	f002 fd56 	bl	8013398 <ip4_output_if>
 80108ec:	4603      	mov	r3, r0
 80108ee:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80108f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3720      	adds	r7, #32
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bdb0      	pop	{r4, r5, r7, pc}
 80108fc:	08017830 	.word	0x08017830
 8010900:	08017df4 	.word	0x08017df4
 8010904:	08017884 	.word	0x08017884
 8010908:	08017e14 	.word	0x08017e14
 801090c:	08017e34 	.word	0x08017e34
 8010910:	20017a64 	.word	0x20017a64
 8010914:	08017e58 	.word	0x08017e58

08010918 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010918:	b5b0      	push	{r4, r5, r7, lr}
 801091a:	b084      	sub	sp, #16
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d106      	bne.n	8010934 <tcp_rexmit_rto_prepare+0x1c>
 8010926:	4b31      	ldr	r3, [pc, #196]	; (80109ec <tcp_rexmit_rto_prepare+0xd4>)
 8010928:	f240 6263 	movw	r2, #1635	; 0x663
 801092c:	4930      	ldr	r1, [pc, #192]	; (80109f0 <tcp_rexmit_rto_prepare+0xd8>)
 801092e:	4831      	ldr	r0, [pc, #196]	; (80109f4 <tcp_rexmit_rto_prepare+0xdc>)
 8010930:	f004 fa18 	bl	8014d64 <iprintf>

  if (pcb->unacked == NULL) {
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010938:	2b00      	cmp	r3, #0
 801093a:	d102      	bne.n	8010942 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801093c:	f06f 0305 	mvn.w	r3, #5
 8010940:	e050      	b.n	80109e4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010946:	60fb      	str	r3, [r7, #12]
 8010948:	e00b      	b.n	8010962 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801094a:	68f8      	ldr	r0, [r7, #12]
 801094c:	f7ff fee6 	bl	801071c <tcp_output_segment_busy>
 8010950:	4603      	mov	r3, r0
 8010952:	2b00      	cmp	r3, #0
 8010954:	d002      	beq.n	801095c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010956:	f06f 0305 	mvn.w	r3, #5
 801095a:	e043      	b.n	80109e4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	60fb      	str	r3, [r7, #12]
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d1ef      	bne.n	801094a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801096a:	68f8      	ldr	r0, [r7, #12]
 801096c:	f7ff fed6 	bl	801071c <tcp_output_segment_busy>
 8010970:	4603      	mov	r3, r0
 8010972:	2b00      	cmp	r3, #0
 8010974:	d002      	beq.n	801097c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010976:	f06f 0305 	mvn.w	r3, #5
 801097a:	e033      	b.n	80109e4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2200      	movs	r2, #0
 8010990:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	8b5b      	ldrh	r3, [r3, #26]
 8010996:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801099a:	b29a      	uxth	r2, r3
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	4618      	mov	r0, r3
 80109a8:	f7f9 fc57 	bl	800a25a <lwip_htonl>
 80109ac:	4604      	mov	r4, r0
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	891b      	ldrh	r3, [r3, #8]
 80109b2:	461d      	mov	r5, r3
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	68db      	ldr	r3, [r3, #12]
 80109b8:	899b      	ldrh	r3, [r3, #12]
 80109ba:	b29b      	uxth	r3, r3
 80109bc:	4618      	mov	r0, r3
 80109be:	f7f9 fc37 	bl	800a230 <lwip_htons>
 80109c2:	4603      	mov	r3, r0
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	f003 0303 	and.w	r3, r3, #3
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d001      	beq.n	80109d2 <tcp_rexmit_rto_prepare+0xba>
 80109ce:	2301      	movs	r3, #1
 80109d0:	e000      	b.n	80109d4 <tcp_rexmit_rto_prepare+0xbc>
 80109d2:	2300      	movs	r3, #0
 80109d4:	442b      	add	r3, r5
 80109d6:	18e2      	adds	r2, r4, r3
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2200      	movs	r2, #0
 80109e0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80109e2:	2300      	movs	r3, #0
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3710      	adds	r7, #16
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bdb0      	pop	{r4, r5, r7, pc}
 80109ec:	08017830 	.word	0x08017830
 80109f0:	08017e6c 	.word	0x08017e6c
 80109f4:	08017884 	.word	0x08017884

080109f8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d106      	bne.n	8010a14 <tcp_rexmit_rto_commit+0x1c>
 8010a06:	4b0d      	ldr	r3, [pc, #52]	; (8010a3c <tcp_rexmit_rto_commit+0x44>)
 8010a08:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010a0c:	490c      	ldr	r1, [pc, #48]	; (8010a40 <tcp_rexmit_rto_commit+0x48>)
 8010a0e:	480d      	ldr	r0, [pc, #52]	; (8010a44 <tcp_rexmit_rto_commit+0x4c>)
 8010a10:	f004 f9a8 	bl	8014d64 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010a1a:	2bff      	cmp	r3, #255	; 0xff
 8010a1c:	d007      	beq.n	8010a2e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010a24:	3301      	adds	r3, #1
 8010a26:	b2da      	uxtb	r2, r3
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f7ff fc80 	bl	8010334 <tcp_output>
}
 8010a34:	bf00      	nop
 8010a36:	3708      	adds	r7, #8
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}
 8010a3c:	08017830 	.word	0x08017830
 8010a40:	08017e90 	.word	0x08017e90
 8010a44:	08017884 	.word	0x08017884

08010a48 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b082      	sub	sp, #8
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d106      	bne.n	8010a64 <tcp_rexmit_rto+0x1c>
 8010a56:	4b0a      	ldr	r3, [pc, #40]	; (8010a80 <tcp_rexmit_rto+0x38>)
 8010a58:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010a5c:	4909      	ldr	r1, [pc, #36]	; (8010a84 <tcp_rexmit_rto+0x3c>)
 8010a5e:	480a      	ldr	r0, [pc, #40]	; (8010a88 <tcp_rexmit_rto+0x40>)
 8010a60:	f004 f980 	bl	8014d64 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f7ff ff57 	bl	8010918 <tcp_rexmit_rto_prepare>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d102      	bne.n	8010a76 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f7ff ffc1 	bl	80109f8 <tcp_rexmit_rto_commit>
  }
}
 8010a76:	bf00      	nop
 8010a78:	3708      	adds	r7, #8
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
 8010a7e:	bf00      	nop
 8010a80:	08017830 	.word	0x08017830
 8010a84:	08017eb4 	.word	0x08017eb4
 8010a88:	08017884 	.word	0x08017884

08010a8c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010a8c:	b590      	push	{r4, r7, lr}
 8010a8e:	b085      	sub	sp, #20
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d106      	bne.n	8010aa8 <tcp_rexmit+0x1c>
 8010a9a:	4b2f      	ldr	r3, [pc, #188]	; (8010b58 <tcp_rexmit+0xcc>)
 8010a9c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010aa0:	492e      	ldr	r1, [pc, #184]	; (8010b5c <tcp_rexmit+0xd0>)
 8010aa2:	482f      	ldr	r0, [pc, #188]	; (8010b60 <tcp_rexmit+0xd4>)
 8010aa4:	f004 f95e 	bl	8014d64 <iprintf>

  if (pcb->unacked == NULL) {
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d102      	bne.n	8010ab6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010ab0:	f06f 0305 	mvn.w	r3, #5
 8010ab4:	e04c      	b.n	8010b50 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010aba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010abc:	68b8      	ldr	r0, [r7, #8]
 8010abe:	f7ff fe2d 	bl	801071c <tcp_output_segment_busy>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d002      	beq.n	8010ace <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010ac8:	f06f 0305 	mvn.w	r3, #5
 8010acc:	e040      	b.n	8010b50 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	681a      	ldr	r2, [r3, #0]
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	336c      	adds	r3, #108	; 0x6c
 8010ada:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010adc:	e002      	b.n	8010ae4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d011      	beq.n	8010b10 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	68db      	ldr	r3, [r3, #12]
 8010af2:	685b      	ldr	r3, [r3, #4]
 8010af4:	4618      	mov	r0, r3
 8010af6:	f7f9 fbb0 	bl	800a25a <lwip_htonl>
 8010afa:	4604      	mov	r4, r0
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	68db      	ldr	r3, [r3, #12]
 8010b00:	685b      	ldr	r3, [r3, #4]
 8010b02:	4618      	mov	r0, r3
 8010b04:	f7f9 fba9 	bl	800a25a <lwip_htonl>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	dbe6      	blt.n	8010ade <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	681a      	ldr	r2, [r3, #0]
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	68ba      	ldr	r2, [r7, #8]
 8010b1c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d103      	bne.n	8010b2e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b34:	2bff      	cmp	r3, #255	; 0xff
 8010b36:	d007      	beq.n	8010b48 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b3e:	3301      	adds	r3, #1
 8010b40:	b2da      	uxtb	r2, r3
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010b4e:	2300      	movs	r3, #0
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3714      	adds	r7, #20
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd90      	pop	{r4, r7, pc}
 8010b58:	08017830 	.word	0x08017830
 8010b5c:	08017ed0 	.word	0x08017ed0
 8010b60:	08017884 	.word	0x08017884

08010b64 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b082      	sub	sp, #8
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d106      	bne.n	8010b80 <tcp_rexmit_fast+0x1c>
 8010b72:	4b2a      	ldr	r3, [pc, #168]	; (8010c1c <tcp_rexmit_fast+0xb8>)
 8010b74:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010b78:	4929      	ldr	r1, [pc, #164]	; (8010c20 <tcp_rexmit_fast+0xbc>)
 8010b7a:	482a      	ldr	r0, [pc, #168]	; (8010c24 <tcp_rexmit_fast+0xc0>)
 8010b7c:	f004 f8f2 	bl	8014d64 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d045      	beq.n	8010c14 <tcp_rexmit_fast+0xb0>
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	8b5b      	ldrh	r3, [r3, #26]
 8010b8c:	f003 0304 	and.w	r3, r3, #4
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d13f      	bne.n	8010c14 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f7ff ff79 	bl	8010a8c <tcp_rexmit>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d139      	bne.n	8010c14 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010bac:	4293      	cmp	r3, r2
 8010bae:	bf28      	it	cs
 8010bb0:	4613      	movcs	r3, r2
 8010bb2:	b29b      	uxth	r3, r3
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	da00      	bge.n	8010bba <tcp_rexmit_fast+0x56>
 8010bb8:	3301      	adds	r3, #1
 8010bba:	105b      	asrs	r3, r3, #1
 8010bbc:	b29a      	uxth	r2, r3
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010bca:	461a      	mov	r2, r3
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bd0:	005b      	lsls	r3, r3, #1
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d206      	bcs.n	8010be4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bda:	005b      	lsls	r3, r3, #1
 8010bdc:	b29a      	uxth	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bee:	4619      	mov	r1, r3
 8010bf0:	0049      	lsls	r1, r1, #1
 8010bf2:	440b      	add	r3, r1
 8010bf4:	b29b      	uxth	r3, r3
 8010bf6:	4413      	add	r3, r2
 8010bf8:	b29a      	uxth	r2, r3
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	8b5b      	ldrh	r3, [r3, #26]
 8010c04:	f043 0304 	orr.w	r3, r3, #4
 8010c08:	b29a      	uxth	r2, r3
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	2200      	movs	r2, #0
 8010c12:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010c14:	bf00      	nop
 8010c16:	3708      	adds	r7, #8
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}
 8010c1c:	08017830 	.word	0x08017830
 8010c20:	08017ee8 	.word	0x08017ee8
 8010c24:	08017884 	.word	0x08017884

08010c28 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b086      	sub	sp, #24
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	60f8      	str	r0, [r7, #12]
 8010c30:	607b      	str	r3, [r7, #4]
 8010c32:	460b      	mov	r3, r1
 8010c34:	817b      	strh	r3, [r7, #10]
 8010c36:	4613      	mov	r3, r2
 8010c38:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010c3a:	897a      	ldrh	r2, [r7, #10]
 8010c3c:	893b      	ldrh	r3, [r7, #8]
 8010c3e:	4413      	add	r3, r2
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	3314      	adds	r3, #20
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	2022      	movs	r0, #34	; 0x22
 8010c4e:	f7fa fbfd 	bl	800b44c <pbuf_alloc>
 8010c52:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d04d      	beq.n	8010cf6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010c5a:	897b      	ldrh	r3, [r7, #10]
 8010c5c:	3313      	adds	r3, #19
 8010c5e:	697a      	ldr	r2, [r7, #20]
 8010c60:	8952      	ldrh	r2, [r2, #10]
 8010c62:	4293      	cmp	r3, r2
 8010c64:	db06      	blt.n	8010c74 <tcp_output_alloc_header_common+0x4c>
 8010c66:	4b26      	ldr	r3, [pc, #152]	; (8010d00 <tcp_output_alloc_header_common+0xd8>)
 8010c68:	f240 7223 	movw	r2, #1827	; 0x723
 8010c6c:	4925      	ldr	r1, [pc, #148]	; (8010d04 <tcp_output_alloc_header_common+0xdc>)
 8010c6e:	4826      	ldr	r0, [pc, #152]	; (8010d08 <tcp_output_alloc_header_common+0xe0>)
 8010c70:	f004 f878 	bl	8014d64 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	685b      	ldr	r3, [r3, #4]
 8010c78:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010c7a:	8c3b      	ldrh	r3, [r7, #32]
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f7f9 fad7 	bl	800a230 <lwip_htons>
 8010c82:	4603      	mov	r3, r0
 8010c84:	461a      	mov	r2, r3
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010c8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7f9 facf 	bl	800a230 <lwip_htons>
 8010c92:	4603      	mov	r3, r0
 8010c94:	461a      	mov	r2, r3
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010ca0:	68f8      	ldr	r0, [r7, #12]
 8010ca2:	f7f9 fada 	bl	800a25a <lwip_htonl>
 8010ca6:	4602      	mov	r2, r0
 8010ca8:	693b      	ldr	r3, [r7, #16]
 8010caa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010cac:	897b      	ldrh	r3, [r7, #10]
 8010cae:	089b      	lsrs	r3, r3, #2
 8010cb0:	b29b      	uxth	r3, r3
 8010cb2:	3305      	adds	r3, #5
 8010cb4:	b29b      	uxth	r3, r3
 8010cb6:	031b      	lsls	r3, r3, #12
 8010cb8:	b29a      	uxth	r2, r3
 8010cba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	4313      	orrs	r3, r2
 8010cc2:	b29b      	uxth	r3, r3
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7f9 fab3 	bl	800a230 <lwip_htons>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	461a      	mov	r2, r3
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010cd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7f9 faab 	bl	800a230 <lwip_htons>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	461a      	mov	r2, r3
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010ce2:	693b      	ldr	r3, [r7, #16]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	741a      	strb	r2, [r3, #16]
 8010ce8:	2200      	movs	r2, #0
 8010cea:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010cec:	693b      	ldr	r3, [r7, #16]
 8010cee:	2200      	movs	r2, #0
 8010cf0:	749a      	strb	r2, [r3, #18]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010cf6:	697b      	ldr	r3, [r7, #20]
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3718      	adds	r7, #24
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}
 8010d00:	08017830 	.word	0x08017830
 8010d04:	08017f08 	.word	0x08017f08
 8010d08:	08017884 	.word	0x08017884

08010d0c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010d0c:	b5b0      	push	{r4, r5, r7, lr}
 8010d0e:	b08a      	sub	sp, #40	; 0x28
 8010d10:	af04      	add	r7, sp, #16
 8010d12:	60f8      	str	r0, [r7, #12]
 8010d14:	607b      	str	r3, [r7, #4]
 8010d16:	460b      	mov	r3, r1
 8010d18:	817b      	strh	r3, [r7, #10]
 8010d1a:	4613      	mov	r3, r2
 8010d1c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d106      	bne.n	8010d32 <tcp_output_alloc_header+0x26>
 8010d24:	4b15      	ldr	r3, [pc, #84]	; (8010d7c <tcp_output_alloc_header+0x70>)
 8010d26:	f240 7242 	movw	r2, #1858	; 0x742
 8010d2a:	4915      	ldr	r1, [pc, #84]	; (8010d80 <tcp_output_alloc_header+0x74>)
 8010d2c:	4815      	ldr	r0, [pc, #84]	; (8010d84 <tcp_output_alloc_header+0x78>)
 8010d2e:	f004 f819 	bl	8014d64 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	8adb      	ldrh	r3, [r3, #22]
 8010d3a:	68fa      	ldr	r2, [r7, #12]
 8010d3c:	8b12      	ldrh	r2, [r2, #24]
 8010d3e:	68f9      	ldr	r1, [r7, #12]
 8010d40:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010d42:	893d      	ldrh	r5, [r7, #8]
 8010d44:	897c      	ldrh	r4, [r7, #10]
 8010d46:	9103      	str	r1, [sp, #12]
 8010d48:	2110      	movs	r1, #16
 8010d4a:	9102      	str	r1, [sp, #8]
 8010d4c:	9201      	str	r2, [sp, #4]
 8010d4e:	9300      	str	r3, [sp, #0]
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	462a      	mov	r2, r5
 8010d54:	4621      	mov	r1, r4
 8010d56:	f7ff ff67 	bl	8010c28 <tcp_output_alloc_header_common>
 8010d5a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d006      	beq.n	8010d70 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d66:	68fa      	ldr	r2, [r7, #12]
 8010d68:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010d6a:	441a      	add	r2, r3
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010d70:	697b      	ldr	r3, [r7, #20]
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3718      	adds	r7, #24
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bdb0      	pop	{r4, r5, r7, pc}
 8010d7a:	bf00      	nop
 8010d7c:	08017830 	.word	0x08017830
 8010d80:	08017f38 	.word	0x08017f38
 8010d84:	08017884 	.word	0x08017884

08010d88 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b088      	sub	sp, #32
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	60f8      	str	r0, [r7, #12]
 8010d90:	60b9      	str	r1, [r7, #8]
 8010d92:	4611      	mov	r1, r2
 8010d94:	461a      	mov	r2, r3
 8010d96:	460b      	mov	r3, r1
 8010d98:	71fb      	strb	r3, [r7, #7]
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d106      	bne.n	8010db6 <tcp_output_fill_options+0x2e>
 8010da8:	4b13      	ldr	r3, [pc, #76]	; (8010df8 <tcp_output_fill_options+0x70>)
 8010daa:	f240 7256 	movw	r2, #1878	; 0x756
 8010dae:	4913      	ldr	r1, [pc, #76]	; (8010dfc <tcp_output_fill_options+0x74>)
 8010db0:	4813      	ldr	r0, [pc, #76]	; (8010e00 <tcp_output_fill_options+0x78>)
 8010db2:	f003 ffd7 	bl	8014d64 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010dbc:	69bb      	ldr	r3, [r7, #24]
 8010dbe:	3314      	adds	r3, #20
 8010dc0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010dc2:	69bb      	ldr	r3, [r7, #24]
 8010dc4:	f103 0214 	add.w	r2, r3, #20
 8010dc8:	8bfb      	ldrh	r3, [r7, #30]
 8010dca:	009b      	lsls	r3, r3, #2
 8010dcc:	4619      	mov	r1, r3
 8010dce:	79fb      	ldrb	r3, [r7, #7]
 8010dd0:	009b      	lsls	r3, r3, #2
 8010dd2:	f003 0304 	and.w	r3, r3, #4
 8010dd6:	440b      	add	r3, r1
 8010dd8:	4413      	add	r3, r2
 8010dda:	697a      	ldr	r2, [r7, #20]
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d006      	beq.n	8010dee <tcp_output_fill_options+0x66>
 8010de0:	4b05      	ldr	r3, [pc, #20]	; (8010df8 <tcp_output_fill_options+0x70>)
 8010de2:	f240 7275 	movw	r2, #1909	; 0x775
 8010de6:	4907      	ldr	r1, [pc, #28]	; (8010e04 <tcp_output_fill_options+0x7c>)
 8010de8:	4805      	ldr	r0, [pc, #20]	; (8010e00 <tcp_output_fill_options+0x78>)
 8010dea:	f003 ffbb 	bl	8014d64 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010dee:	bf00      	nop
 8010df0:	3720      	adds	r7, #32
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}
 8010df6:	bf00      	nop
 8010df8:	08017830 	.word	0x08017830
 8010dfc:	08017f60 	.word	0x08017f60
 8010e00:	08017884 	.word	0x08017884
 8010e04:	08017e58 	.word	0x08017e58

08010e08 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b08a      	sub	sp, #40	; 0x28
 8010e0c:	af04      	add	r7, sp, #16
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	60b9      	str	r1, [r7, #8]
 8010e12:	607a      	str	r2, [r7, #4]
 8010e14:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d106      	bne.n	8010e2a <tcp_output_control_segment+0x22>
 8010e1c:	4b1c      	ldr	r3, [pc, #112]	; (8010e90 <tcp_output_control_segment+0x88>)
 8010e1e:	f240 7287 	movw	r2, #1927	; 0x787
 8010e22:	491c      	ldr	r1, [pc, #112]	; (8010e94 <tcp_output_control_segment+0x8c>)
 8010e24:	481c      	ldr	r0, [pc, #112]	; (8010e98 <tcp_output_control_segment+0x90>)
 8010e26:	f003 ff9d 	bl	8014d64 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010e2a:	683a      	ldr	r2, [r7, #0]
 8010e2c:	6879      	ldr	r1, [r7, #4]
 8010e2e:	68f8      	ldr	r0, [r7, #12]
 8010e30:	f7fe ff40 	bl	800fcb4 <tcp_route>
 8010e34:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d102      	bne.n	8010e42 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010e3c:	23fc      	movs	r3, #252	; 0xfc
 8010e3e:	75fb      	strb	r3, [r7, #23]
 8010e40:	e01c      	b.n	8010e7c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d006      	beq.n	8010e56 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	7adb      	ldrb	r3, [r3, #11]
 8010e4c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	7a9b      	ldrb	r3, [r3, #10]
 8010e52:	757b      	strb	r3, [r7, #21]
 8010e54:	e003      	b.n	8010e5e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010e56:	23ff      	movs	r3, #255	; 0xff
 8010e58:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010e5e:	7dba      	ldrb	r2, [r7, #22]
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	9302      	str	r3, [sp, #8]
 8010e64:	2306      	movs	r3, #6
 8010e66:	9301      	str	r3, [sp, #4]
 8010e68:	7d7b      	ldrb	r3, [r7, #21]
 8010e6a:	9300      	str	r3, [sp, #0]
 8010e6c:	4613      	mov	r3, r2
 8010e6e:	683a      	ldr	r2, [r7, #0]
 8010e70:	6879      	ldr	r1, [r7, #4]
 8010e72:	68b8      	ldr	r0, [r7, #8]
 8010e74:	f002 fa90 	bl	8013398 <ip4_output_if>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010e7c:	68b8      	ldr	r0, [r7, #8]
 8010e7e:	f7fa fdc9 	bl	800ba14 <pbuf_free>
  return err;
 8010e82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3718      	adds	r7, #24
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}
 8010e8e:	bf00      	nop
 8010e90:	08017830 	.word	0x08017830
 8010e94:	08017f88 	.word	0x08017f88
 8010e98:	08017884 	.word	0x08017884

08010e9c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010e9c:	b590      	push	{r4, r7, lr}
 8010e9e:	b08b      	sub	sp, #44	; 0x2c
 8010ea0:	af04      	add	r7, sp, #16
 8010ea2:	60f8      	str	r0, [r7, #12]
 8010ea4:	60b9      	str	r1, [r7, #8]
 8010ea6:	607a      	str	r2, [r7, #4]
 8010ea8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d106      	bne.n	8010ebe <tcp_rst+0x22>
 8010eb0:	4b1f      	ldr	r3, [pc, #124]	; (8010f30 <tcp_rst+0x94>)
 8010eb2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010eb6:	491f      	ldr	r1, [pc, #124]	; (8010f34 <tcp_rst+0x98>)
 8010eb8:	481f      	ldr	r0, [pc, #124]	; (8010f38 <tcp_rst+0x9c>)
 8010eba:	f003 ff53 	bl	8014d64 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d106      	bne.n	8010ed2 <tcp_rst+0x36>
 8010ec4:	4b1a      	ldr	r3, [pc, #104]	; (8010f30 <tcp_rst+0x94>)
 8010ec6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010eca:	491c      	ldr	r1, [pc, #112]	; (8010f3c <tcp_rst+0xa0>)
 8010ecc:	481a      	ldr	r0, [pc, #104]	; (8010f38 <tcp_rst+0x9c>)
 8010ece:	f003 ff49 	bl	8014d64 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010ed6:	f246 0308 	movw	r3, #24584	; 0x6008
 8010eda:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010edc:	7dfb      	ldrb	r3, [r7, #23]
 8010ede:	b29c      	uxth	r4, r3
 8010ee0:	68b8      	ldr	r0, [r7, #8]
 8010ee2:	f7f9 f9ba 	bl	800a25a <lwip_htonl>
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	8abb      	ldrh	r3, [r7, #20]
 8010eea:	9303      	str	r3, [sp, #12]
 8010eec:	2314      	movs	r3, #20
 8010eee:	9302      	str	r3, [sp, #8]
 8010ef0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010ef2:	9301      	str	r3, [sp, #4]
 8010ef4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010ef6:	9300      	str	r3, [sp, #0]
 8010ef8:	4613      	mov	r3, r2
 8010efa:	2200      	movs	r2, #0
 8010efc:	4621      	mov	r1, r4
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f7ff fe92 	bl	8010c28 <tcp_output_alloc_header_common>
 8010f04:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d00c      	beq.n	8010f26 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010f0c:	7dfb      	ldrb	r3, [r7, #23]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	6939      	ldr	r1, [r7, #16]
 8010f12:	68f8      	ldr	r0, [r7, #12]
 8010f14:	f7ff ff38 	bl	8010d88 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f1a:	683a      	ldr	r2, [r7, #0]
 8010f1c:	6939      	ldr	r1, [r7, #16]
 8010f1e:	68f8      	ldr	r0, [r7, #12]
 8010f20:	f7ff ff72 	bl	8010e08 <tcp_output_control_segment>
 8010f24:	e000      	b.n	8010f28 <tcp_rst+0x8c>
    return;
 8010f26:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010f28:	371c      	adds	r7, #28
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd90      	pop	{r4, r7, pc}
 8010f2e:	bf00      	nop
 8010f30:	08017830 	.word	0x08017830
 8010f34:	08017fb4 	.word	0x08017fb4
 8010f38:	08017884 	.word	0x08017884
 8010f3c:	08017fd0 	.word	0x08017fd0

08010f40 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010f40:	b590      	push	{r4, r7, lr}
 8010f42:	b087      	sub	sp, #28
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d106      	bne.n	8010f64 <tcp_send_empty_ack+0x24>
 8010f56:	4b28      	ldr	r3, [pc, #160]	; (8010ff8 <tcp_send_empty_ack+0xb8>)
 8010f58:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010f5c:	4927      	ldr	r1, [pc, #156]	; (8010ffc <tcp_send_empty_ack+0xbc>)
 8010f5e:	4828      	ldr	r0, [pc, #160]	; (8011000 <tcp_send_empty_ack+0xc0>)
 8010f60:	f003 ff00 	bl	8014d64 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010f64:	7dfb      	ldrb	r3, [r7, #23]
 8010f66:	009b      	lsls	r3, r3, #2
 8010f68:	b2db      	uxtb	r3, r3
 8010f6a:	f003 0304 	and.w	r3, r3, #4
 8010f6e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010f70:	7d7b      	ldrb	r3, [r7, #21]
 8010f72:	b29c      	uxth	r4, r3
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f7f9 f96e 	bl	800a25a <lwip_htonl>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	2200      	movs	r2, #0
 8010f82:	4621      	mov	r1, r4
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f7ff fec1 	bl	8010d0c <tcp_output_alloc_header>
 8010f8a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d109      	bne.n	8010fa6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	8b5b      	ldrh	r3, [r3, #26]
 8010f96:	f043 0303 	orr.w	r3, r3, #3
 8010f9a:	b29a      	uxth	r2, r3
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010fa0:	f06f 0301 	mvn.w	r3, #1
 8010fa4:	e023      	b.n	8010fee <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010fa6:	7dbb      	ldrb	r3, [r7, #22]
 8010fa8:	7dfa      	ldrb	r2, [r7, #23]
 8010faa:	6939      	ldr	r1, [r7, #16]
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f7ff feeb 	bl	8010d88 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010fb2:	687a      	ldr	r2, [r7, #4]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	3304      	adds	r3, #4
 8010fb8:	6939      	ldr	r1, [r7, #16]
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f7ff ff24 	bl	8010e08 <tcp_output_control_segment>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d007      	beq.n	8010fdc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	8b5b      	ldrh	r3, [r3, #26]
 8010fd0:	f043 0303 	orr.w	r3, r3, #3
 8010fd4:	b29a      	uxth	r2, r3
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	835a      	strh	r2, [r3, #26]
 8010fda:	e006      	b.n	8010fea <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	8b5b      	ldrh	r3, [r3, #26]
 8010fe0:	f023 0303 	bic.w	r3, r3, #3
 8010fe4:	b29a      	uxth	r2, r3
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	371c      	adds	r7, #28
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd90      	pop	{r4, r7, pc}
 8010ff6:	bf00      	nop
 8010ff8:	08017830 	.word	0x08017830
 8010ffc:	08017fec 	.word	0x08017fec
 8011000:	08017884 	.word	0x08017884

08011004 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011004:	b590      	push	{r4, r7, lr}
 8011006:	b087      	sub	sp, #28
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801100c:	2300      	movs	r3, #0
 801100e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d106      	bne.n	8011024 <tcp_keepalive+0x20>
 8011016:	4b18      	ldr	r3, [pc, #96]	; (8011078 <tcp_keepalive+0x74>)
 8011018:	f640 0224 	movw	r2, #2084	; 0x824
 801101c:	4917      	ldr	r1, [pc, #92]	; (801107c <tcp_keepalive+0x78>)
 801101e:	4818      	ldr	r0, [pc, #96]	; (8011080 <tcp_keepalive+0x7c>)
 8011020:	f003 fea0 	bl	8014d64 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011024:	7dfb      	ldrb	r3, [r7, #23]
 8011026:	b29c      	uxth	r4, r3
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801102c:	3b01      	subs	r3, #1
 801102e:	4618      	mov	r0, r3
 8011030:	f7f9 f913 	bl	800a25a <lwip_htonl>
 8011034:	4603      	mov	r3, r0
 8011036:	2200      	movs	r2, #0
 8011038:	4621      	mov	r1, r4
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f7ff fe66 	bl	8010d0c <tcp_output_alloc_header>
 8011040:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d102      	bne.n	801104e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801104c:	e010      	b.n	8011070 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801104e:	7dfb      	ldrb	r3, [r7, #23]
 8011050:	2200      	movs	r2, #0
 8011052:	6939      	ldr	r1, [r7, #16]
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f7ff fe97 	bl	8010d88 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801105a:	687a      	ldr	r2, [r7, #4]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	3304      	adds	r3, #4
 8011060:	6939      	ldr	r1, [r7, #16]
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f7ff fed0 	bl	8010e08 <tcp_output_control_segment>
 8011068:	4603      	mov	r3, r0
 801106a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801106c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011070:	4618      	mov	r0, r3
 8011072:	371c      	adds	r7, #28
 8011074:	46bd      	mov	sp, r7
 8011076:	bd90      	pop	{r4, r7, pc}
 8011078:	08017830 	.word	0x08017830
 801107c:	0801800c 	.word	0x0801800c
 8011080:	08017884 	.word	0x08017884

08011084 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011084:	b590      	push	{r4, r7, lr}
 8011086:	b08b      	sub	sp, #44	; 0x2c
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801108c:	2300      	movs	r3, #0
 801108e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d106      	bne.n	80110a6 <tcp_zero_window_probe+0x22>
 8011098:	4b4c      	ldr	r3, [pc, #304]	; (80111cc <tcp_zero_window_probe+0x148>)
 801109a:	f640 024f 	movw	r2, #2127	; 0x84f
 801109e:	494c      	ldr	r1, [pc, #304]	; (80111d0 <tcp_zero_window_probe+0x14c>)
 80110a0:	484c      	ldr	r0, [pc, #304]	; (80111d4 <tcp_zero_window_probe+0x150>)
 80110a2:	f003 fe5f 	bl	8014d64 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110aa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80110ac:	6a3b      	ldr	r3, [r7, #32]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d101      	bne.n	80110b6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80110b2:	2300      	movs	r3, #0
 80110b4:	e086      	b.n	80111c4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80110bc:	2bff      	cmp	r3, #255	; 0xff
 80110be:	d007      	beq.n	80110d0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80110c6:	3301      	adds	r3, #1
 80110c8:	b2da      	uxtb	r2, r3
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80110d0:	6a3b      	ldr	r3, [r7, #32]
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	899b      	ldrh	r3, [r3, #12]
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	4618      	mov	r0, r3
 80110da:	f7f9 f8a9 	bl	800a230 <lwip_htons>
 80110de:	4603      	mov	r3, r0
 80110e0:	b2db      	uxtb	r3, r3
 80110e2:	f003 0301 	and.w	r3, r3, #1
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d005      	beq.n	80110f6 <tcp_zero_window_probe+0x72>
 80110ea:	6a3b      	ldr	r3, [r7, #32]
 80110ec:	891b      	ldrh	r3, [r3, #8]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d101      	bne.n	80110f6 <tcp_zero_window_probe+0x72>
 80110f2:	2301      	movs	r3, #1
 80110f4:	e000      	b.n	80110f8 <tcp_zero_window_probe+0x74>
 80110f6:	2300      	movs	r3, #0
 80110f8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80110fa:	7ffb      	ldrb	r3, [r7, #31]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	bf0c      	ite	eq
 8011100:	2301      	moveq	r3, #1
 8011102:	2300      	movne	r3, #0
 8011104:	b2db      	uxtb	r3, r3
 8011106:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801110c:	b299      	uxth	r1, r3
 801110e:	6a3b      	ldr	r3, [r7, #32]
 8011110:	68db      	ldr	r3, [r3, #12]
 8011112:	685b      	ldr	r3, [r3, #4]
 8011114:	8bba      	ldrh	r2, [r7, #28]
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f7ff fdf8 	bl	8010d0c <tcp_output_alloc_header>
 801111c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801111e:	69bb      	ldr	r3, [r7, #24]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d102      	bne.n	801112a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011128:	e04c      	b.n	80111c4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801112a:	69bb      	ldr	r3, [r7, #24]
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011130:	7ffb      	ldrb	r3, [r7, #31]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d011      	beq.n	801115a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	899b      	ldrh	r3, [r3, #12]
 801113a:	b29b      	uxth	r3, r3
 801113c:	b21b      	sxth	r3, r3
 801113e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011142:	b21c      	sxth	r4, r3
 8011144:	2011      	movs	r0, #17
 8011146:	f7f9 f873 	bl	800a230 <lwip_htons>
 801114a:	4603      	mov	r3, r0
 801114c:	b21b      	sxth	r3, r3
 801114e:	4323      	orrs	r3, r4
 8011150:	b21b      	sxth	r3, r3
 8011152:	b29a      	uxth	r2, r3
 8011154:	697b      	ldr	r3, [r7, #20]
 8011156:	819a      	strh	r2, [r3, #12]
 8011158:	e010      	b.n	801117c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801115a:	69bb      	ldr	r3, [r7, #24]
 801115c:	685b      	ldr	r3, [r3, #4]
 801115e:	3314      	adds	r3, #20
 8011160:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011162:	6a3b      	ldr	r3, [r7, #32]
 8011164:	6858      	ldr	r0, [r3, #4]
 8011166:	6a3b      	ldr	r3, [r7, #32]
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	891a      	ldrh	r2, [r3, #8]
 801116c:	6a3b      	ldr	r3, [r7, #32]
 801116e:	891b      	ldrh	r3, [r3, #8]
 8011170:	1ad3      	subs	r3, r2, r3
 8011172:	b29b      	uxth	r3, r3
 8011174:	2201      	movs	r2, #1
 8011176:	6939      	ldr	r1, [r7, #16]
 8011178:	f7fa fe52 	bl	800be20 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801117c:	6a3b      	ldr	r3, [r7, #32]
 801117e:	68db      	ldr	r3, [r3, #12]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	4618      	mov	r0, r3
 8011184:	f7f9 f869 	bl	800a25a <lwip_htonl>
 8011188:	4603      	mov	r3, r0
 801118a:	3301      	adds	r3, #1
 801118c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	1ad3      	subs	r3, r2, r3
 8011196:	2b00      	cmp	r3, #0
 8011198:	da02      	bge.n	80111a0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	68fa      	ldr	r2, [r7, #12]
 801119e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80111a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111a4:	2200      	movs	r2, #0
 80111a6:	69b9      	ldr	r1, [r7, #24]
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f7ff fded 	bl	8010d88 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80111ae:	687a      	ldr	r2, [r7, #4]
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	3304      	adds	r3, #4
 80111b4:	69b9      	ldr	r1, [r7, #24]
 80111b6:	6878      	ldr	r0, [r7, #4]
 80111b8:	f7ff fe26 	bl	8010e08 <tcp_output_control_segment>
 80111bc:	4603      	mov	r3, r0
 80111be:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80111c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	372c      	adds	r7, #44	; 0x2c
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd90      	pop	{r4, r7, pc}
 80111cc:	08017830 	.word	0x08017830
 80111d0:	08018028 	.word	0x08018028
 80111d4:	08017884 	.word	0x08017884

080111d8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b082      	sub	sp, #8
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80111e0:	f7fa ff0c 	bl	800bffc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80111e4:	4b0a      	ldr	r3, [pc, #40]	; (8011210 <tcpip_tcp_timer+0x38>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d103      	bne.n	80111f4 <tcpip_tcp_timer+0x1c>
 80111ec:	4b09      	ldr	r3, [pc, #36]	; (8011214 <tcpip_tcp_timer+0x3c>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d005      	beq.n	8011200 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80111f4:	2200      	movs	r2, #0
 80111f6:	4908      	ldr	r1, [pc, #32]	; (8011218 <tcpip_tcp_timer+0x40>)
 80111f8:	20fa      	movs	r0, #250	; 0xfa
 80111fa:	f000 f8f3 	bl	80113e4 <sys_timeout>
 80111fe:	e003      	b.n	8011208 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011200:	4b06      	ldr	r3, [pc, #24]	; (801121c <tcpip_tcp_timer+0x44>)
 8011202:	2200      	movs	r2, #0
 8011204:	601a      	str	r2, [r3, #0]
  }
}
 8011206:	bf00      	nop
 8011208:	bf00      	nop
 801120a:	3708      	adds	r7, #8
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}
 8011210:	20017a70 	.word	0x20017a70
 8011214:	20017a74 	.word	0x20017a74
 8011218:	080111d9 	.word	0x080111d9
 801121c:	20017abc 	.word	0x20017abc

08011220 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011224:	4b0a      	ldr	r3, [pc, #40]	; (8011250 <tcp_timer_needed+0x30>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d10f      	bne.n	801124c <tcp_timer_needed+0x2c>
 801122c:	4b09      	ldr	r3, [pc, #36]	; (8011254 <tcp_timer_needed+0x34>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d103      	bne.n	801123c <tcp_timer_needed+0x1c>
 8011234:	4b08      	ldr	r3, [pc, #32]	; (8011258 <tcp_timer_needed+0x38>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d007      	beq.n	801124c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801123c:	4b04      	ldr	r3, [pc, #16]	; (8011250 <tcp_timer_needed+0x30>)
 801123e:	2201      	movs	r2, #1
 8011240:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011242:	2200      	movs	r2, #0
 8011244:	4905      	ldr	r1, [pc, #20]	; (801125c <tcp_timer_needed+0x3c>)
 8011246:	20fa      	movs	r0, #250	; 0xfa
 8011248:	f000 f8cc 	bl	80113e4 <sys_timeout>
  }
}
 801124c:	bf00      	nop
 801124e:	bd80      	pop	{r7, pc}
 8011250:	20017abc 	.word	0x20017abc
 8011254:	20017a70 	.word	0x20017a70
 8011258:	20017a74 	.word	0x20017a74
 801125c:	080111d9 	.word	0x080111d9

08011260 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b086      	sub	sp, #24
 8011264:	af00      	add	r7, sp, #0
 8011266:	60f8      	str	r0, [r7, #12]
 8011268:	60b9      	str	r1, [r7, #8]
 801126a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801126c:	200a      	movs	r0, #10
 801126e:	f7f9 fcb7 	bl	800abe0 <memp_malloc>
 8011272:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d109      	bne.n	801128e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801127a:	693b      	ldr	r3, [r7, #16]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d151      	bne.n	8011324 <sys_timeout_abs+0xc4>
 8011280:	4b2a      	ldr	r3, [pc, #168]	; (801132c <sys_timeout_abs+0xcc>)
 8011282:	22be      	movs	r2, #190	; 0xbe
 8011284:	492a      	ldr	r1, [pc, #168]	; (8011330 <sys_timeout_abs+0xd0>)
 8011286:	482b      	ldr	r0, [pc, #172]	; (8011334 <sys_timeout_abs+0xd4>)
 8011288:	f003 fd6c 	bl	8014d64 <iprintf>
    return;
 801128c:	e04a      	b.n	8011324 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801128e:	693b      	ldr	r3, [r7, #16]
 8011290:	2200      	movs	r2, #0
 8011292:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	68ba      	ldr	r2, [r7, #8]
 8011298:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	687a      	ldr	r2, [r7, #4]
 801129e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	68fa      	ldr	r2, [r7, #12]
 80112a4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80112a6:	4b24      	ldr	r3, [pc, #144]	; (8011338 <sys_timeout_abs+0xd8>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d103      	bne.n	80112b6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80112ae:	4a22      	ldr	r2, [pc, #136]	; (8011338 <sys_timeout_abs+0xd8>)
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	6013      	str	r3, [r2, #0]
    return;
 80112b4:	e037      	b.n	8011326 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80112b6:	693b      	ldr	r3, [r7, #16]
 80112b8:	685a      	ldr	r2, [r3, #4]
 80112ba:	4b1f      	ldr	r3, [pc, #124]	; (8011338 <sys_timeout_abs+0xd8>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	685b      	ldr	r3, [r3, #4]
 80112c0:	1ad3      	subs	r3, r2, r3
 80112c2:	0fdb      	lsrs	r3, r3, #31
 80112c4:	f003 0301 	and.w	r3, r3, #1
 80112c8:	b2db      	uxtb	r3, r3
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d007      	beq.n	80112de <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80112ce:	4b1a      	ldr	r3, [pc, #104]	; (8011338 <sys_timeout_abs+0xd8>)
 80112d0:	681a      	ldr	r2, [r3, #0]
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80112d6:	4a18      	ldr	r2, [pc, #96]	; (8011338 <sys_timeout_abs+0xd8>)
 80112d8:	693b      	ldr	r3, [r7, #16]
 80112da:	6013      	str	r3, [r2, #0]
 80112dc:	e023      	b.n	8011326 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80112de:	4b16      	ldr	r3, [pc, #88]	; (8011338 <sys_timeout_abs+0xd8>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	617b      	str	r3, [r7, #20]
 80112e4:	e01a      	b.n	801131c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d00b      	beq.n	8011306 <sys_timeout_abs+0xa6>
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	685a      	ldr	r2, [r3, #4]
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	1ad3      	subs	r3, r2, r3
 80112fa:	0fdb      	lsrs	r3, r3, #31
 80112fc:	f003 0301 	and.w	r3, r3, #1
 8011300:	b2db      	uxtb	r3, r3
 8011302:	2b00      	cmp	r3, #0
 8011304:	d007      	beq.n	8011316 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	681a      	ldr	r2, [r3, #0]
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	693a      	ldr	r2, [r7, #16]
 8011312:	601a      	str	r2, [r3, #0]
        break;
 8011314:	e007      	b.n	8011326 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	617b      	str	r3, [r7, #20]
 801131c:	697b      	ldr	r3, [r7, #20]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d1e1      	bne.n	80112e6 <sys_timeout_abs+0x86>
 8011322:	e000      	b.n	8011326 <sys_timeout_abs+0xc6>
    return;
 8011324:	bf00      	nop
      }
    }
  }
}
 8011326:	3718      	adds	r7, #24
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}
 801132c:	0801804c 	.word	0x0801804c
 8011330:	08018080 	.word	0x08018080
 8011334:	080180c0 	.word	0x080180c0
 8011338:	20017ab4 	.word	0x20017ab4

0801133c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b086      	sub	sp, #24
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	685b      	ldr	r3, [r3, #4]
 801134c:	4798      	blx	r3

  now = sys_now();
 801134e:	f7f5 f90f 	bl	8006570 <sys_now>
 8011352:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	681a      	ldr	r2, [r3, #0]
 8011358:	4b0f      	ldr	r3, [pc, #60]	; (8011398 <lwip_cyclic_timer+0x5c>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	4413      	add	r3, r2
 801135e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011360:	68fa      	ldr	r2, [r7, #12]
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	1ad3      	subs	r3, r2, r3
 8011366:	0fdb      	lsrs	r3, r3, #31
 8011368:	f003 0301 	and.w	r3, r3, #1
 801136c:	b2db      	uxtb	r3, r3
 801136e:	2b00      	cmp	r3, #0
 8011370:	d009      	beq.n	8011386 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011372:	697b      	ldr	r3, [r7, #20]
 8011374:	681a      	ldr	r2, [r3, #0]
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	4413      	add	r3, r2
 801137a:	687a      	ldr	r2, [r7, #4]
 801137c:	4907      	ldr	r1, [pc, #28]	; (801139c <lwip_cyclic_timer+0x60>)
 801137e:	4618      	mov	r0, r3
 8011380:	f7ff ff6e 	bl	8011260 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011384:	e004      	b.n	8011390 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011386:	687a      	ldr	r2, [r7, #4]
 8011388:	4904      	ldr	r1, [pc, #16]	; (801139c <lwip_cyclic_timer+0x60>)
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	f7ff ff68 	bl	8011260 <sys_timeout_abs>
}
 8011390:	bf00      	nop
 8011392:	3718      	adds	r7, #24
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}
 8011398:	20017ab8 	.word	0x20017ab8
 801139c:	0801133d 	.word	0x0801133d

080113a0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b082      	sub	sp, #8
 80113a4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80113a6:	2301      	movs	r3, #1
 80113a8:	607b      	str	r3, [r7, #4]
 80113aa:	e00e      	b.n	80113ca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80113ac:	4a0b      	ldr	r2, [pc, #44]	; (80113dc <sys_timeouts_init+0x3c>)
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	00db      	lsls	r3, r3, #3
 80113b8:	4a08      	ldr	r2, [pc, #32]	; (80113dc <sys_timeouts_init+0x3c>)
 80113ba:	4413      	add	r3, r2
 80113bc:	461a      	mov	r2, r3
 80113be:	4908      	ldr	r1, [pc, #32]	; (80113e0 <sys_timeouts_init+0x40>)
 80113c0:	f000 f810 	bl	80113e4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	3301      	adds	r3, #1
 80113c8:	607b      	str	r3, [r7, #4]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2b02      	cmp	r3, #2
 80113ce:	d9ed      	bls.n	80113ac <sys_timeouts_init+0xc>
  }
}
 80113d0:	bf00      	nop
 80113d2:	bf00      	nop
 80113d4:	3708      	adds	r7, #8
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	bf00      	nop
 80113dc:	08018c78 	.word	0x08018c78
 80113e0:	0801133d 	.word	0x0801133d

080113e4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b086      	sub	sp, #24
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	60b9      	str	r1, [r7, #8]
 80113ee:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113f6:	d306      	bcc.n	8011406 <sys_timeout+0x22>
 80113f8:	4b0a      	ldr	r3, [pc, #40]	; (8011424 <sys_timeout+0x40>)
 80113fa:	f240 1229 	movw	r2, #297	; 0x129
 80113fe:	490a      	ldr	r1, [pc, #40]	; (8011428 <sys_timeout+0x44>)
 8011400:	480a      	ldr	r0, [pc, #40]	; (801142c <sys_timeout+0x48>)
 8011402:	f003 fcaf 	bl	8014d64 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011406:	f7f5 f8b3 	bl	8006570 <sys_now>
 801140a:	4602      	mov	r2, r0
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	4413      	add	r3, r2
 8011410:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011412:	687a      	ldr	r2, [r7, #4]
 8011414:	68b9      	ldr	r1, [r7, #8]
 8011416:	6978      	ldr	r0, [r7, #20]
 8011418:	f7ff ff22 	bl	8011260 <sys_timeout_abs>
#endif
}
 801141c:	bf00      	nop
 801141e:	3718      	adds	r7, #24
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}
 8011424:	0801804c 	.word	0x0801804c
 8011428:	080180e8 	.word	0x080180e8
 801142c:	080180c0 	.word	0x080180c0

08011430 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b084      	sub	sp, #16
 8011434:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011436:	f7f5 f89b 	bl	8006570 <sys_now>
 801143a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801143c:	4b17      	ldr	r3, [pc, #92]	; (801149c <sys_check_timeouts+0x6c>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d022      	beq.n	801148e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	68fa      	ldr	r2, [r7, #12]
 801144e:	1ad3      	subs	r3, r2, r3
 8011450:	0fdb      	lsrs	r3, r3, #31
 8011452:	f003 0301 	and.w	r3, r3, #1
 8011456:	b2db      	uxtb	r3, r3
 8011458:	2b00      	cmp	r3, #0
 801145a:	d11a      	bne.n	8011492 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	4a0e      	ldr	r2, [pc, #56]	; (801149c <sys_check_timeouts+0x6c>)
 8011462:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	689b      	ldr	r3, [r3, #8]
 8011468:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	68db      	ldr	r3, [r3, #12]
 801146e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	4a0a      	ldr	r2, [pc, #40]	; (80114a0 <sys_check_timeouts+0x70>)
 8011476:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011478:	68b9      	ldr	r1, [r7, #8]
 801147a:	200a      	movs	r0, #10
 801147c:	f7f9 fc26 	bl	800accc <memp_free>
    if (handler != NULL) {
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d0da      	beq.n	801143c <sys_check_timeouts+0xc>
      handler(arg);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6838      	ldr	r0, [r7, #0]
 801148a:	4798      	blx	r3
  do {
 801148c:	e7d6      	b.n	801143c <sys_check_timeouts+0xc>
      return;
 801148e:	bf00      	nop
 8011490:	e000      	b.n	8011494 <sys_check_timeouts+0x64>
      return;
 8011492:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011494:	3710      	adds	r7, #16
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	20017ab4 	.word	0x20017ab4
 80114a0:	20017ab8 	.word	0x20017ab8

080114a4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b082      	sub	sp, #8
 80114a8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80114aa:	4b16      	ldr	r3, [pc, #88]	; (8011504 <sys_timeouts_sleeptime+0x60>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d102      	bne.n	80114b8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80114b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114b6:	e020      	b.n	80114fa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80114b8:	f7f5 f85a 	bl	8006570 <sys_now>
 80114bc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80114be:	4b11      	ldr	r3, [pc, #68]	; (8011504 <sys_timeouts_sleeptime+0x60>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	685a      	ldr	r2, [r3, #4]
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	1ad3      	subs	r3, r2, r3
 80114c8:	0fdb      	lsrs	r3, r3, #31
 80114ca:	f003 0301 	and.w	r3, r3, #1
 80114ce:	b2db      	uxtb	r3, r3
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d001      	beq.n	80114d8 <sys_timeouts_sleeptime+0x34>
    return 0;
 80114d4:	2300      	movs	r3, #0
 80114d6:	e010      	b.n	80114fa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80114d8:	4b0a      	ldr	r3, [pc, #40]	; (8011504 <sys_timeouts_sleeptime+0x60>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	685a      	ldr	r2, [r3, #4]
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	1ad3      	subs	r3, r2, r3
 80114e2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	da06      	bge.n	80114f8 <sys_timeouts_sleeptime+0x54>
 80114ea:	4b07      	ldr	r3, [pc, #28]	; (8011508 <sys_timeouts_sleeptime+0x64>)
 80114ec:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80114f0:	4906      	ldr	r1, [pc, #24]	; (801150c <sys_timeouts_sleeptime+0x68>)
 80114f2:	4807      	ldr	r0, [pc, #28]	; (8011510 <sys_timeouts_sleeptime+0x6c>)
 80114f4:	f003 fc36 	bl	8014d64 <iprintf>
    return ret;
 80114f8:	683b      	ldr	r3, [r7, #0]
  }
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	3708      	adds	r7, #8
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}
 8011502:	bf00      	nop
 8011504:	20017ab4 	.word	0x20017ab4
 8011508:	0801804c 	.word	0x0801804c
 801150c:	08018120 	.word	0x08018120
 8011510:	080180c0 	.word	0x080180c0

08011514 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011518:	f003 fce0 	bl	8014edc <rand>
 801151c:	4603      	mov	r3, r0
 801151e:	b29b      	uxth	r3, r3
 8011520:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011524:	b29b      	uxth	r3, r3
 8011526:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801152a:	b29a      	uxth	r2, r3
 801152c:	4b01      	ldr	r3, [pc, #4]	; (8011534 <udp_init+0x20>)
 801152e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011530:	bf00      	nop
 8011532:	bd80      	pop	{r7, pc}
 8011534:	2000002c 	.word	0x2000002c

08011538 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011538:	b480      	push	{r7}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801153e:	2300      	movs	r3, #0
 8011540:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011542:	4b17      	ldr	r3, [pc, #92]	; (80115a0 <udp_new_port+0x68>)
 8011544:	881b      	ldrh	r3, [r3, #0]
 8011546:	1c5a      	adds	r2, r3, #1
 8011548:	b291      	uxth	r1, r2
 801154a:	4a15      	ldr	r2, [pc, #84]	; (80115a0 <udp_new_port+0x68>)
 801154c:	8011      	strh	r1, [r2, #0]
 801154e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011552:	4293      	cmp	r3, r2
 8011554:	d103      	bne.n	801155e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011556:	4b12      	ldr	r3, [pc, #72]	; (80115a0 <udp_new_port+0x68>)
 8011558:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801155c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801155e:	4b11      	ldr	r3, [pc, #68]	; (80115a4 <udp_new_port+0x6c>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	603b      	str	r3, [r7, #0]
 8011564:	e011      	b.n	801158a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	8a5a      	ldrh	r2, [r3, #18]
 801156a:	4b0d      	ldr	r3, [pc, #52]	; (80115a0 <udp_new_port+0x68>)
 801156c:	881b      	ldrh	r3, [r3, #0]
 801156e:	429a      	cmp	r2, r3
 8011570:	d108      	bne.n	8011584 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011572:	88fb      	ldrh	r3, [r7, #6]
 8011574:	3301      	adds	r3, #1
 8011576:	80fb      	strh	r3, [r7, #6]
 8011578:	88fb      	ldrh	r3, [r7, #6]
 801157a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801157e:	d3e0      	bcc.n	8011542 <udp_new_port+0xa>
        return 0;
 8011580:	2300      	movs	r3, #0
 8011582:	e007      	b.n	8011594 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	68db      	ldr	r3, [r3, #12]
 8011588:	603b      	str	r3, [r7, #0]
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d1ea      	bne.n	8011566 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011590:	4b03      	ldr	r3, [pc, #12]	; (80115a0 <udp_new_port+0x68>)
 8011592:	881b      	ldrh	r3, [r3, #0]
}
 8011594:	4618      	mov	r0, r3
 8011596:	370c      	adds	r7, #12
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr
 80115a0:	2000002c 	.word	0x2000002c
 80115a4:	20017ac0 	.word	0x20017ac0

080115a8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b084      	sub	sp, #16
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	60f8      	str	r0, [r7, #12]
 80115b0:	60b9      	str	r1, [r7, #8]
 80115b2:	4613      	mov	r3, r2
 80115b4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d105      	bne.n	80115c8 <udp_input_local_match+0x20>
 80115bc:	4b27      	ldr	r3, [pc, #156]	; (801165c <udp_input_local_match+0xb4>)
 80115be:	2287      	movs	r2, #135	; 0x87
 80115c0:	4927      	ldr	r1, [pc, #156]	; (8011660 <udp_input_local_match+0xb8>)
 80115c2:	4828      	ldr	r0, [pc, #160]	; (8011664 <udp_input_local_match+0xbc>)
 80115c4:	f003 fbce 	bl	8014d64 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d105      	bne.n	80115da <udp_input_local_match+0x32>
 80115ce:	4b23      	ldr	r3, [pc, #140]	; (801165c <udp_input_local_match+0xb4>)
 80115d0:	2288      	movs	r2, #136	; 0x88
 80115d2:	4925      	ldr	r1, [pc, #148]	; (8011668 <udp_input_local_match+0xc0>)
 80115d4:	4823      	ldr	r0, [pc, #140]	; (8011664 <udp_input_local_match+0xbc>)
 80115d6:	f003 fbc5 	bl	8014d64 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	7a1b      	ldrb	r3, [r3, #8]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d00b      	beq.n	80115fa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	7a1a      	ldrb	r2, [r3, #8]
 80115e6:	4b21      	ldr	r3, [pc, #132]	; (801166c <udp_input_local_match+0xc4>)
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80115ee:	3301      	adds	r3, #1
 80115f0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d001      	beq.n	80115fa <udp_input_local_match+0x52>
    return 0;
 80115f6:	2300      	movs	r3, #0
 80115f8:	e02b      	b.n	8011652 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80115fa:	79fb      	ldrb	r3, [r7, #7]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d018      	beq.n	8011632 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d013      	beq.n	801162e <udp_input_local_match+0x86>
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d00f      	beq.n	801162e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801160e:	4b17      	ldr	r3, [pc, #92]	; (801166c <udp_input_local_match+0xc4>)
 8011610:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011616:	d00a      	beq.n	801162e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	681a      	ldr	r2, [r3, #0]
 801161c:	4b13      	ldr	r3, [pc, #76]	; (801166c <udp_input_local_match+0xc4>)
 801161e:	695b      	ldr	r3, [r3, #20]
 8011620:	405a      	eors	r2, r3
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	3308      	adds	r3, #8
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801162a:	2b00      	cmp	r3, #0
 801162c:	d110      	bne.n	8011650 <udp_input_local_match+0xa8>
          return 1;
 801162e:	2301      	movs	r3, #1
 8011630:	e00f      	b.n	8011652 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d009      	beq.n	801164c <udp_input_local_match+0xa4>
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d005      	beq.n	801164c <udp_input_local_match+0xa4>
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	681a      	ldr	r2, [r3, #0]
 8011644:	4b09      	ldr	r3, [pc, #36]	; (801166c <udp_input_local_match+0xc4>)
 8011646:	695b      	ldr	r3, [r3, #20]
 8011648:	429a      	cmp	r2, r3
 801164a:	d101      	bne.n	8011650 <udp_input_local_match+0xa8>
        return 1;
 801164c:	2301      	movs	r3, #1
 801164e:	e000      	b.n	8011652 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011650:	2300      	movs	r3, #0
}
 8011652:	4618      	mov	r0, r3
 8011654:	3710      	adds	r7, #16
 8011656:	46bd      	mov	sp, r7
 8011658:	bd80      	pop	{r7, pc}
 801165a:	bf00      	nop
 801165c:	08018134 	.word	0x08018134
 8011660:	08018164 	.word	0x08018164
 8011664:	08018188 	.word	0x08018188
 8011668:	080181b0 	.word	0x080181b0
 801166c:	20013950 	.word	0x20013950

08011670 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011670:	b590      	push	{r4, r7, lr}
 8011672:	b08d      	sub	sp, #52	; 0x34
 8011674:	af02      	add	r7, sp, #8
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801167a:	2300      	movs	r3, #0
 801167c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d105      	bne.n	8011690 <udp_input+0x20>
 8011684:	4b7c      	ldr	r3, [pc, #496]	; (8011878 <udp_input+0x208>)
 8011686:	22cf      	movs	r2, #207	; 0xcf
 8011688:	497c      	ldr	r1, [pc, #496]	; (801187c <udp_input+0x20c>)
 801168a:	487d      	ldr	r0, [pc, #500]	; (8011880 <udp_input+0x210>)
 801168c:	f003 fb6a 	bl	8014d64 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d105      	bne.n	80116a2 <udp_input+0x32>
 8011696:	4b78      	ldr	r3, [pc, #480]	; (8011878 <udp_input+0x208>)
 8011698:	22d0      	movs	r2, #208	; 0xd0
 801169a:	497a      	ldr	r1, [pc, #488]	; (8011884 <udp_input+0x214>)
 801169c:	4878      	ldr	r0, [pc, #480]	; (8011880 <udp_input+0x210>)
 801169e:	f003 fb61 	bl	8014d64 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	895b      	ldrh	r3, [r3, #10]
 80116a6:	2b07      	cmp	r3, #7
 80116a8:	d803      	bhi.n	80116b2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f7fa f9b2 	bl	800ba14 <pbuf_free>
    goto end;
 80116b0:	e0de      	b.n	8011870 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	685b      	ldr	r3, [r3, #4]
 80116b6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80116b8:	4b73      	ldr	r3, [pc, #460]	; (8011888 <udp_input+0x218>)
 80116ba:	695b      	ldr	r3, [r3, #20]
 80116bc:	4a72      	ldr	r2, [pc, #456]	; (8011888 <udp_input+0x218>)
 80116be:	6812      	ldr	r2, [r2, #0]
 80116c0:	4611      	mov	r1, r2
 80116c2:	4618      	mov	r0, r3
 80116c4:	f001 ff40 	bl	8013548 <ip4_addr_isbroadcast_u32>
 80116c8:	4603      	mov	r3, r0
 80116ca:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	881b      	ldrh	r3, [r3, #0]
 80116d0:	b29b      	uxth	r3, r3
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7f8 fdac 	bl	800a230 <lwip_htons>
 80116d8:	4603      	mov	r3, r0
 80116da:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	885b      	ldrh	r3, [r3, #2]
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7f8 fda4 	bl	800a230 <lwip_htons>
 80116e8:	4603      	mov	r3, r0
 80116ea:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80116ec:	2300      	movs	r3, #0
 80116ee:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80116f0:	2300      	movs	r3, #0
 80116f2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80116f4:	2300      	movs	r3, #0
 80116f6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80116f8:	4b64      	ldr	r3, [pc, #400]	; (801188c <udp_input+0x21c>)
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	627b      	str	r3, [r7, #36]	; 0x24
 80116fe:	e054      	b.n	80117aa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011702:	8a5b      	ldrh	r3, [r3, #18]
 8011704:	89fa      	ldrh	r2, [r7, #14]
 8011706:	429a      	cmp	r2, r3
 8011708:	d14a      	bne.n	80117a0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801170a:	7cfb      	ldrb	r3, [r7, #19]
 801170c:	461a      	mov	r2, r3
 801170e:	6839      	ldr	r1, [r7, #0]
 8011710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011712:	f7ff ff49 	bl	80115a8 <udp_input_local_match>
 8011716:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011718:	2b00      	cmp	r3, #0
 801171a:	d041      	beq.n	80117a0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801171e:	7c1b      	ldrb	r3, [r3, #16]
 8011720:	f003 0304 	and.w	r3, r3, #4
 8011724:	2b00      	cmp	r3, #0
 8011726:	d11d      	bne.n	8011764 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011728:	69fb      	ldr	r3, [r7, #28]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d102      	bne.n	8011734 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011730:	61fb      	str	r3, [r7, #28]
 8011732:	e017      	b.n	8011764 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011734:	7cfb      	ldrb	r3, [r7, #19]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d014      	beq.n	8011764 <udp_input+0xf4>
 801173a:	4b53      	ldr	r3, [pc, #332]	; (8011888 <udp_input+0x218>)
 801173c:	695b      	ldr	r3, [r3, #20]
 801173e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011742:	d10f      	bne.n	8011764 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	681a      	ldr	r2, [r3, #0]
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	3304      	adds	r3, #4
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	429a      	cmp	r2, r3
 8011750:	d008      	beq.n	8011764 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011754:	681a      	ldr	r2, [r3, #0]
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	3304      	adds	r3, #4
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	429a      	cmp	r2, r3
 801175e:	d101      	bne.n	8011764 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011762:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011766:	8a9b      	ldrh	r3, [r3, #20]
 8011768:	8a3a      	ldrh	r2, [r7, #16]
 801176a:	429a      	cmp	r2, r3
 801176c:	d118      	bne.n	80117a0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011770:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011772:	2b00      	cmp	r3, #0
 8011774:	d005      	beq.n	8011782 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011778:	685a      	ldr	r2, [r3, #4]
 801177a:	4b43      	ldr	r3, [pc, #268]	; (8011888 <udp_input+0x218>)
 801177c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801177e:	429a      	cmp	r2, r3
 8011780:	d10e      	bne.n	80117a0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011782:	6a3b      	ldr	r3, [r7, #32]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d014      	beq.n	80117b2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801178a:	68da      	ldr	r2, [r3, #12]
 801178c:	6a3b      	ldr	r3, [r7, #32]
 801178e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011790:	4b3e      	ldr	r3, [pc, #248]	; (801188c <udp_input+0x21c>)
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011796:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011798:	4a3c      	ldr	r2, [pc, #240]	; (801188c <udp_input+0x21c>)
 801179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801179c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801179e:	e008      	b.n	80117b2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80117a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80117a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a6:	68db      	ldr	r3, [r3, #12]
 80117a8:	627b      	str	r3, [r7, #36]	; 0x24
 80117aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d1a7      	bne.n	8011700 <udp_input+0x90>
 80117b0:	e000      	b.n	80117b4 <udp_input+0x144>
        break;
 80117b2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80117b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d101      	bne.n	80117be <udp_input+0x14e>
    pcb = uncon_pcb;
 80117ba:	69fb      	ldr	r3, [r7, #28]
 80117bc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80117be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d002      	beq.n	80117ca <udp_input+0x15a>
    for_us = 1;
 80117c4:	2301      	movs	r3, #1
 80117c6:	76fb      	strb	r3, [r7, #27]
 80117c8:	e00a      	b.n	80117e0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	3304      	adds	r3, #4
 80117ce:	681a      	ldr	r2, [r3, #0]
 80117d0:	4b2d      	ldr	r3, [pc, #180]	; (8011888 <udp_input+0x218>)
 80117d2:	695b      	ldr	r3, [r3, #20]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	bf0c      	ite	eq
 80117d8:	2301      	moveq	r3, #1
 80117da:	2300      	movne	r3, #0
 80117dc:	b2db      	uxtb	r3, r3
 80117de:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80117e0:	7efb      	ldrb	r3, [r7, #27]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d041      	beq.n	801186a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80117e6:	2108      	movs	r1, #8
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f7fa f88d 	bl	800b908 <pbuf_remove_header>
 80117ee:	4603      	mov	r3, r0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d00a      	beq.n	801180a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80117f4:	4b20      	ldr	r3, [pc, #128]	; (8011878 <udp_input+0x208>)
 80117f6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80117fa:	4925      	ldr	r1, [pc, #148]	; (8011890 <udp_input+0x220>)
 80117fc:	4820      	ldr	r0, [pc, #128]	; (8011880 <udp_input+0x210>)
 80117fe:	f003 fab1 	bl	8014d64 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f7fa f906 	bl	800ba14 <pbuf_free>
      goto end;
 8011808:	e032      	b.n	8011870 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801180c:	2b00      	cmp	r3, #0
 801180e:	d012      	beq.n	8011836 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011812:	699b      	ldr	r3, [r3, #24]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d00a      	beq.n	801182e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801181a:	699c      	ldr	r4, [r3, #24]
 801181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801181e:	69d8      	ldr	r0, [r3, #28]
 8011820:	8a3b      	ldrh	r3, [r7, #16]
 8011822:	9300      	str	r3, [sp, #0]
 8011824:	4b1b      	ldr	r3, [pc, #108]	; (8011894 <udp_input+0x224>)
 8011826:	687a      	ldr	r2, [r7, #4]
 8011828:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801182a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801182c:	e021      	b.n	8011872 <udp_input+0x202>
        pbuf_free(p);
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f7fa f8f0 	bl	800ba14 <pbuf_free>
        goto end;
 8011834:	e01c      	b.n	8011870 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011836:	7cfb      	ldrb	r3, [r7, #19]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d112      	bne.n	8011862 <udp_input+0x1f2>
 801183c:	4b12      	ldr	r3, [pc, #72]	; (8011888 <udp_input+0x218>)
 801183e:	695b      	ldr	r3, [r3, #20]
 8011840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011844:	2be0      	cmp	r3, #224	; 0xe0
 8011846:	d00c      	beq.n	8011862 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011848:	4b0f      	ldr	r3, [pc, #60]	; (8011888 <udp_input+0x218>)
 801184a:	899b      	ldrh	r3, [r3, #12]
 801184c:	3308      	adds	r3, #8
 801184e:	b29b      	uxth	r3, r3
 8011850:	b21b      	sxth	r3, r3
 8011852:	4619      	mov	r1, r3
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f7fa f8ca 	bl	800b9ee <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801185a:	2103      	movs	r1, #3
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f001 fb53 	bl	8012f08 <icmp_dest_unreach>
      pbuf_free(p);
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f7fa f8d6 	bl	800ba14 <pbuf_free>
  return;
 8011868:	e003      	b.n	8011872 <udp_input+0x202>
    pbuf_free(p);
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f7fa f8d2 	bl	800ba14 <pbuf_free>
  return;
 8011870:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011872:	372c      	adds	r7, #44	; 0x2c
 8011874:	46bd      	mov	sp, r7
 8011876:	bd90      	pop	{r4, r7, pc}
 8011878:	08018134 	.word	0x08018134
 801187c:	080181d8 	.word	0x080181d8
 8011880:	08018188 	.word	0x08018188
 8011884:	080181f0 	.word	0x080181f0
 8011888:	20013950 	.word	0x20013950
 801188c:	20017ac0 	.word	0x20017ac0
 8011890:	0801820c 	.word	0x0801820c
 8011894:	20013960 	.word	0x20013960

08011898 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b088      	sub	sp, #32
 801189c:	af02      	add	r7, sp, #8
 801189e:	60f8      	str	r0, [r7, #12]
 80118a0:	60b9      	str	r1, [r7, #8]
 80118a2:	607a      	str	r2, [r7, #4]
 80118a4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d109      	bne.n	80118c0 <udp_sendto+0x28>
 80118ac:	4b23      	ldr	r3, [pc, #140]	; (801193c <udp_sendto+0xa4>)
 80118ae:	f44f 7206 	mov.w	r2, #536	; 0x218
 80118b2:	4923      	ldr	r1, [pc, #140]	; (8011940 <udp_sendto+0xa8>)
 80118b4:	4823      	ldr	r0, [pc, #140]	; (8011944 <udp_sendto+0xac>)
 80118b6:	f003 fa55 	bl	8014d64 <iprintf>
 80118ba:	f06f 030f 	mvn.w	r3, #15
 80118be:	e038      	b.n	8011932 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d109      	bne.n	80118da <udp_sendto+0x42>
 80118c6:	4b1d      	ldr	r3, [pc, #116]	; (801193c <udp_sendto+0xa4>)
 80118c8:	f240 2219 	movw	r2, #537	; 0x219
 80118cc:	491e      	ldr	r1, [pc, #120]	; (8011948 <udp_sendto+0xb0>)
 80118ce:	481d      	ldr	r0, [pc, #116]	; (8011944 <udp_sendto+0xac>)
 80118d0:	f003 fa48 	bl	8014d64 <iprintf>
 80118d4:	f06f 030f 	mvn.w	r3, #15
 80118d8:	e02b      	b.n	8011932 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d109      	bne.n	80118f4 <udp_sendto+0x5c>
 80118e0:	4b16      	ldr	r3, [pc, #88]	; (801193c <udp_sendto+0xa4>)
 80118e2:	f240 221a 	movw	r2, #538	; 0x21a
 80118e6:	4919      	ldr	r1, [pc, #100]	; (801194c <udp_sendto+0xb4>)
 80118e8:	4816      	ldr	r0, [pc, #88]	; (8011944 <udp_sendto+0xac>)
 80118ea:	f003 fa3b 	bl	8014d64 <iprintf>
 80118ee:	f06f 030f 	mvn.w	r3, #15
 80118f2:	e01e      	b.n	8011932 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	7a1b      	ldrb	r3, [r3, #8]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d006      	beq.n	801190a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	7a1b      	ldrb	r3, [r3, #8]
 8011900:	4618      	mov	r0, r3
 8011902:	f7f9 fcf9 	bl	800b2f8 <netif_get_by_index>
 8011906:	6178      	str	r0, [r7, #20]
 8011908:	e003      	b.n	8011912 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	f001 fb86 	bl	801301c <ip4_route>
 8011910:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d102      	bne.n	801191e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8011918:	f06f 0303 	mvn.w	r3, #3
 801191c:	e009      	b.n	8011932 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801191e:	887a      	ldrh	r2, [r7, #2]
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	9300      	str	r3, [sp, #0]
 8011924:	4613      	mov	r3, r2
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	68b9      	ldr	r1, [r7, #8]
 801192a:	68f8      	ldr	r0, [r7, #12]
 801192c:	f000 f810 	bl	8011950 <udp_sendto_if>
 8011930:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011932:	4618      	mov	r0, r3
 8011934:	3718      	adds	r7, #24
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
 801193a:	bf00      	nop
 801193c:	08018134 	.word	0x08018134
 8011940:	08018258 	.word	0x08018258
 8011944:	08018188 	.word	0x08018188
 8011948:	08018270 	.word	0x08018270
 801194c:	0801828c 	.word	0x0801828c

08011950 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b088      	sub	sp, #32
 8011954:	af02      	add	r7, sp, #8
 8011956:	60f8      	str	r0, [r7, #12]
 8011958:	60b9      	str	r1, [r7, #8]
 801195a:	607a      	str	r2, [r7, #4]
 801195c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d109      	bne.n	8011978 <udp_sendto_if+0x28>
 8011964:	4b2e      	ldr	r3, [pc, #184]	; (8011a20 <udp_sendto_if+0xd0>)
 8011966:	f44f 7220 	mov.w	r2, #640	; 0x280
 801196a:	492e      	ldr	r1, [pc, #184]	; (8011a24 <udp_sendto_if+0xd4>)
 801196c:	482e      	ldr	r0, [pc, #184]	; (8011a28 <udp_sendto_if+0xd8>)
 801196e:	f003 f9f9 	bl	8014d64 <iprintf>
 8011972:	f06f 030f 	mvn.w	r3, #15
 8011976:	e04f      	b.n	8011a18 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d109      	bne.n	8011992 <udp_sendto_if+0x42>
 801197e:	4b28      	ldr	r3, [pc, #160]	; (8011a20 <udp_sendto_if+0xd0>)
 8011980:	f240 2281 	movw	r2, #641	; 0x281
 8011984:	4929      	ldr	r1, [pc, #164]	; (8011a2c <udp_sendto_if+0xdc>)
 8011986:	4828      	ldr	r0, [pc, #160]	; (8011a28 <udp_sendto_if+0xd8>)
 8011988:	f003 f9ec 	bl	8014d64 <iprintf>
 801198c:	f06f 030f 	mvn.w	r3, #15
 8011990:	e042      	b.n	8011a18 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d109      	bne.n	80119ac <udp_sendto_if+0x5c>
 8011998:	4b21      	ldr	r3, [pc, #132]	; (8011a20 <udp_sendto_if+0xd0>)
 801199a:	f240 2282 	movw	r2, #642	; 0x282
 801199e:	4924      	ldr	r1, [pc, #144]	; (8011a30 <udp_sendto_if+0xe0>)
 80119a0:	4821      	ldr	r0, [pc, #132]	; (8011a28 <udp_sendto_if+0xd8>)
 80119a2:	f003 f9df 	bl	8014d64 <iprintf>
 80119a6:	f06f 030f 	mvn.w	r3, #15
 80119aa:	e035      	b.n	8011a18 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80119ac:	6a3b      	ldr	r3, [r7, #32]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d109      	bne.n	80119c6 <udp_sendto_if+0x76>
 80119b2:	4b1b      	ldr	r3, [pc, #108]	; (8011a20 <udp_sendto_if+0xd0>)
 80119b4:	f240 2283 	movw	r2, #643	; 0x283
 80119b8:	491e      	ldr	r1, [pc, #120]	; (8011a34 <udp_sendto_if+0xe4>)
 80119ba:	481b      	ldr	r0, [pc, #108]	; (8011a28 <udp_sendto_if+0xd8>)
 80119bc:	f003 f9d2 	bl	8014d64 <iprintf>
 80119c0:	f06f 030f 	mvn.w	r3, #15
 80119c4:	e028      	b.n	8011a18 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d009      	beq.n	80119e0 <udp_sendto_if+0x90>
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d005      	beq.n	80119e0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80119dc:	2be0      	cmp	r3, #224	; 0xe0
 80119de:	d103      	bne.n	80119e8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80119e0:	6a3b      	ldr	r3, [r7, #32]
 80119e2:	3304      	adds	r3, #4
 80119e4:	617b      	str	r3, [r7, #20]
 80119e6:	e00b      	b.n	8011a00 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	681a      	ldr	r2, [r3, #0]
 80119ec:	6a3b      	ldr	r3, [r7, #32]
 80119ee:	3304      	adds	r3, #4
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d002      	beq.n	80119fc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80119f6:	f06f 0303 	mvn.w	r3, #3
 80119fa:	e00d      	b.n	8011a18 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011a00:	887a      	ldrh	r2, [r7, #2]
 8011a02:	697b      	ldr	r3, [r7, #20]
 8011a04:	9301      	str	r3, [sp, #4]
 8011a06:	6a3b      	ldr	r3, [r7, #32]
 8011a08:	9300      	str	r3, [sp, #0]
 8011a0a:	4613      	mov	r3, r2
 8011a0c:	687a      	ldr	r2, [r7, #4]
 8011a0e:	68b9      	ldr	r1, [r7, #8]
 8011a10:	68f8      	ldr	r0, [r7, #12]
 8011a12:	f000 f811 	bl	8011a38 <udp_sendto_if_src>
 8011a16:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3718      	adds	r7, #24
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	08018134 	.word	0x08018134
 8011a24:	080182a8 	.word	0x080182a8
 8011a28:	08018188 	.word	0x08018188
 8011a2c:	080182c4 	.word	0x080182c4
 8011a30:	080182e0 	.word	0x080182e0
 8011a34:	08018300 	.word	0x08018300

08011a38 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b08c      	sub	sp, #48	; 0x30
 8011a3c:	af04      	add	r7, sp, #16
 8011a3e:	60f8      	str	r0, [r7, #12]
 8011a40:	60b9      	str	r1, [r7, #8]
 8011a42:	607a      	str	r2, [r7, #4]
 8011a44:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d109      	bne.n	8011a60 <udp_sendto_if_src+0x28>
 8011a4c:	4b65      	ldr	r3, [pc, #404]	; (8011be4 <udp_sendto_if_src+0x1ac>)
 8011a4e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011a52:	4965      	ldr	r1, [pc, #404]	; (8011be8 <udp_sendto_if_src+0x1b0>)
 8011a54:	4865      	ldr	r0, [pc, #404]	; (8011bec <udp_sendto_if_src+0x1b4>)
 8011a56:	f003 f985 	bl	8014d64 <iprintf>
 8011a5a:	f06f 030f 	mvn.w	r3, #15
 8011a5e:	e0bc      	b.n	8011bda <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d109      	bne.n	8011a7a <udp_sendto_if_src+0x42>
 8011a66:	4b5f      	ldr	r3, [pc, #380]	; (8011be4 <udp_sendto_if_src+0x1ac>)
 8011a68:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011a6c:	4960      	ldr	r1, [pc, #384]	; (8011bf0 <udp_sendto_if_src+0x1b8>)
 8011a6e:	485f      	ldr	r0, [pc, #380]	; (8011bec <udp_sendto_if_src+0x1b4>)
 8011a70:	f003 f978 	bl	8014d64 <iprintf>
 8011a74:	f06f 030f 	mvn.w	r3, #15
 8011a78:	e0af      	b.n	8011bda <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d109      	bne.n	8011a94 <udp_sendto_if_src+0x5c>
 8011a80:	4b58      	ldr	r3, [pc, #352]	; (8011be4 <udp_sendto_if_src+0x1ac>)
 8011a82:	f240 22d3 	movw	r2, #723	; 0x2d3
 8011a86:	495b      	ldr	r1, [pc, #364]	; (8011bf4 <udp_sendto_if_src+0x1bc>)
 8011a88:	4858      	ldr	r0, [pc, #352]	; (8011bec <udp_sendto_if_src+0x1b4>)
 8011a8a:	f003 f96b 	bl	8014d64 <iprintf>
 8011a8e:	f06f 030f 	mvn.w	r3, #15
 8011a92:	e0a2      	b.n	8011bda <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d109      	bne.n	8011aae <udp_sendto_if_src+0x76>
 8011a9a:	4b52      	ldr	r3, [pc, #328]	; (8011be4 <udp_sendto_if_src+0x1ac>)
 8011a9c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011aa0:	4955      	ldr	r1, [pc, #340]	; (8011bf8 <udp_sendto_if_src+0x1c0>)
 8011aa2:	4852      	ldr	r0, [pc, #328]	; (8011bec <udp_sendto_if_src+0x1b4>)
 8011aa4:	f003 f95e 	bl	8014d64 <iprintf>
 8011aa8:	f06f 030f 	mvn.w	r3, #15
 8011aac:	e095      	b.n	8011bda <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d109      	bne.n	8011ac8 <udp_sendto_if_src+0x90>
 8011ab4:	4b4b      	ldr	r3, [pc, #300]	; (8011be4 <udp_sendto_if_src+0x1ac>)
 8011ab6:	f240 22d5 	movw	r2, #725	; 0x2d5
 8011aba:	4950      	ldr	r1, [pc, #320]	; (8011bfc <udp_sendto_if_src+0x1c4>)
 8011abc:	484b      	ldr	r0, [pc, #300]	; (8011bec <udp_sendto_if_src+0x1b4>)
 8011abe:	f003 f951 	bl	8014d64 <iprintf>
 8011ac2:	f06f 030f 	mvn.w	r3, #15
 8011ac6:	e088      	b.n	8011bda <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	8a5b      	ldrh	r3, [r3, #18]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d10f      	bne.n	8011af0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011ad0:	68f9      	ldr	r1, [r7, #12]
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	8a5b      	ldrh	r3, [r3, #18]
 8011ad6:	461a      	mov	r2, r3
 8011ad8:	68f8      	ldr	r0, [r7, #12]
 8011ada:	f000 f893 	bl	8011c04 <udp_bind>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011ae2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d002      	beq.n	8011af0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011aea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011aee:	e074      	b.n	8011bda <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	891b      	ldrh	r3, [r3, #8]
 8011af4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011af8:	4293      	cmp	r3, r2
 8011afa:	d902      	bls.n	8011b02 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b00:	e06b      	b.n	8011bda <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011b02:	2108      	movs	r1, #8
 8011b04:	68b8      	ldr	r0, [r7, #8]
 8011b06:	f7f9 feef 	bl	800b8e8 <pbuf_add_header>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d015      	beq.n	8011b3c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011b10:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b14:	2108      	movs	r1, #8
 8011b16:	2022      	movs	r0, #34	; 0x22
 8011b18:	f7f9 fc98 	bl	800b44c <pbuf_alloc>
 8011b1c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011b1e:	69fb      	ldr	r3, [r7, #28]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d102      	bne.n	8011b2a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b28:	e057      	b.n	8011bda <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	891b      	ldrh	r3, [r3, #8]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d006      	beq.n	8011b40 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011b32:	68b9      	ldr	r1, [r7, #8]
 8011b34:	69f8      	ldr	r0, [r7, #28]
 8011b36:	f7fa f891 	bl	800bc5c <pbuf_chain>
 8011b3a:	e001      	b.n	8011b40 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011b40:	69fb      	ldr	r3, [r7, #28]
 8011b42:	895b      	ldrh	r3, [r3, #10]
 8011b44:	2b07      	cmp	r3, #7
 8011b46:	d806      	bhi.n	8011b56 <udp_sendto_if_src+0x11e>
 8011b48:	4b26      	ldr	r3, [pc, #152]	; (8011be4 <udp_sendto_if_src+0x1ac>)
 8011b4a:	f240 320d 	movw	r2, #781	; 0x30d
 8011b4e:	492c      	ldr	r1, [pc, #176]	; (8011c00 <udp_sendto_if_src+0x1c8>)
 8011b50:	4826      	ldr	r0, [pc, #152]	; (8011bec <udp_sendto_if_src+0x1b4>)
 8011b52:	f003 f907 	bl	8014d64 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011b56:	69fb      	ldr	r3, [r7, #28]
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	8a5b      	ldrh	r3, [r3, #18]
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7f8 fb65 	bl	800a230 <lwip_htons>
 8011b66:	4603      	mov	r3, r0
 8011b68:	461a      	mov	r2, r3
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011b6e:	887b      	ldrh	r3, [r7, #2]
 8011b70:	4618      	mov	r0, r3
 8011b72:	f7f8 fb5d 	bl	800a230 <lwip_htons>
 8011b76:	4603      	mov	r3, r0
 8011b78:	461a      	mov	r2, r3
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	2200      	movs	r2, #0
 8011b82:	719a      	strb	r2, [r3, #6]
 8011b84:	2200      	movs	r2, #0
 8011b86:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011b88:	69fb      	ldr	r3, [r7, #28]
 8011b8a:	891b      	ldrh	r3, [r3, #8]
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7f8 fb4f 	bl	800a230 <lwip_htons>
 8011b92:	4603      	mov	r3, r0
 8011b94:	461a      	mov	r2, r3
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011b9a:	2311      	movs	r3, #17
 8011b9c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	7adb      	ldrb	r3, [r3, #11]
 8011ba2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	7a9b      	ldrb	r3, [r3, #10]
 8011ba8:	7cb9      	ldrb	r1, [r7, #18]
 8011baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011bac:	9202      	str	r2, [sp, #8]
 8011bae:	7cfa      	ldrb	r2, [r7, #19]
 8011bb0:	9201      	str	r2, [sp, #4]
 8011bb2:	9300      	str	r3, [sp, #0]
 8011bb4:	460b      	mov	r3, r1
 8011bb6:	687a      	ldr	r2, [r7, #4]
 8011bb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bba:	69f8      	ldr	r0, [r7, #28]
 8011bbc:	f001 fc16 	bl	80133ec <ip4_output_if_src>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011bc4:	69fa      	ldr	r2, [r7, #28]
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d004      	beq.n	8011bd6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011bcc:	69f8      	ldr	r0, [r7, #28]
 8011bce:	f7f9 ff21 	bl	800ba14 <pbuf_free>
    q = NULL;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011bd6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3720      	adds	r7, #32
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}
 8011be2:	bf00      	nop
 8011be4:	08018134 	.word	0x08018134
 8011be8:	08018320 	.word	0x08018320
 8011bec:	08018188 	.word	0x08018188
 8011bf0:	08018340 	.word	0x08018340
 8011bf4:	08018360 	.word	0x08018360
 8011bf8:	08018384 	.word	0x08018384
 8011bfc:	080183a8 	.word	0x080183a8
 8011c00:	080183cc 	.word	0x080183cc

08011c04 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b086      	sub	sp, #24
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	60f8      	str	r0, [r7, #12]
 8011c0c:	60b9      	str	r1, [r7, #8]
 8011c0e:	4613      	mov	r3, r2
 8011c10:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d101      	bne.n	8011c1c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011c18:	4b39      	ldr	r3, [pc, #228]	; (8011d00 <udp_bind+0xfc>)
 8011c1a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d109      	bne.n	8011c36 <udp_bind+0x32>
 8011c22:	4b38      	ldr	r3, [pc, #224]	; (8011d04 <udp_bind+0x100>)
 8011c24:	f240 32b7 	movw	r2, #951	; 0x3b7
 8011c28:	4937      	ldr	r1, [pc, #220]	; (8011d08 <udp_bind+0x104>)
 8011c2a:	4838      	ldr	r0, [pc, #224]	; (8011d0c <udp_bind+0x108>)
 8011c2c:	f003 f89a 	bl	8014d64 <iprintf>
 8011c30:	f06f 030f 	mvn.w	r3, #15
 8011c34:	e060      	b.n	8011cf8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011c36:	2300      	movs	r3, #0
 8011c38:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011c3a:	4b35      	ldr	r3, [pc, #212]	; (8011d10 <udp_bind+0x10c>)
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	617b      	str	r3, [r7, #20]
 8011c40:	e009      	b.n	8011c56 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011c42:	68fa      	ldr	r2, [r7, #12]
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	429a      	cmp	r2, r3
 8011c48:	d102      	bne.n	8011c50 <udp_bind+0x4c>
      rebind = 1;
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	74fb      	strb	r3, [r7, #19]
      break;
 8011c4e:	e005      	b.n	8011c5c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011c50:	697b      	ldr	r3, [r7, #20]
 8011c52:	68db      	ldr	r3, [r3, #12]
 8011c54:	617b      	str	r3, [r7, #20]
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d1f2      	bne.n	8011c42 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011c5c:	88fb      	ldrh	r3, [r7, #6]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d109      	bne.n	8011c76 <udp_bind+0x72>
    port = udp_new_port();
 8011c62:	f7ff fc69 	bl	8011538 <udp_new_port>
 8011c66:	4603      	mov	r3, r0
 8011c68:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011c6a:	88fb      	ldrh	r3, [r7, #6]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d12c      	bne.n	8011cca <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011c70:	f06f 0307 	mvn.w	r3, #7
 8011c74:	e040      	b.n	8011cf8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011c76:	4b26      	ldr	r3, [pc, #152]	; (8011d10 <udp_bind+0x10c>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	617b      	str	r3, [r7, #20]
 8011c7c:	e022      	b.n	8011cc4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011c7e:	68fa      	ldr	r2, [r7, #12]
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d01b      	beq.n	8011cbe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	8a5b      	ldrh	r3, [r3, #18]
 8011c8a:	88fa      	ldrh	r2, [r7, #6]
 8011c8c:	429a      	cmp	r2, r3
 8011c8e:	d116      	bne.n	8011cbe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	681a      	ldr	r2, [r3, #0]
 8011c94:	68bb      	ldr	r3, [r7, #8]
 8011c96:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	d00d      	beq.n	8011cb8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d00a      	beq.n	8011cb8 <udp_bind+0xb4>
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d006      	beq.n	8011cb8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011caa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d003      	beq.n	8011cb8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d102      	bne.n	8011cbe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011cb8:	f06f 0307 	mvn.w	r3, #7
 8011cbc:	e01c      	b.n	8011cf8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	68db      	ldr	r3, [r3, #12]
 8011cc2:	617b      	str	r3, [r7, #20]
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d1d9      	bne.n	8011c7e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d002      	beq.n	8011cd6 <udp_bind+0xd2>
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	e000      	b.n	8011cd8 <udp_bind+0xd4>
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	68fa      	ldr	r2, [r7, #12]
 8011cda:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	88fa      	ldrh	r2, [r7, #6]
 8011ce0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011ce2:	7cfb      	ldrb	r3, [r7, #19]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d106      	bne.n	8011cf6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011ce8:	4b09      	ldr	r3, [pc, #36]	; (8011d10 <udp_bind+0x10c>)
 8011cea:	681a      	ldr	r2, [r3, #0]
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011cf0:	4a07      	ldr	r2, [pc, #28]	; (8011d10 <udp_bind+0x10c>)
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011cf6:	2300      	movs	r3, #0
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3718      	adds	r7, #24
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}
 8011d00:	08018c90 	.word	0x08018c90
 8011d04:	08018134 	.word	0x08018134
 8011d08:	080183fc 	.word	0x080183fc
 8011d0c:	08018188 	.word	0x08018188
 8011d10:	20017ac0 	.word	0x20017ac0

08011d14 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b084      	sub	sp, #16
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	60f8      	str	r0, [r7, #12]
 8011d1c:	60b9      	str	r1, [r7, #8]
 8011d1e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d107      	bne.n	8011d36 <udp_recv+0x22>
 8011d26:	4b08      	ldr	r3, [pc, #32]	; (8011d48 <udp_recv+0x34>)
 8011d28:	f240 428a 	movw	r2, #1162	; 0x48a
 8011d2c:	4907      	ldr	r1, [pc, #28]	; (8011d4c <udp_recv+0x38>)
 8011d2e:	4808      	ldr	r0, [pc, #32]	; (8011d50 <udp_recv+0x3c>)
 8011d30:	f003 f818 	bl	8014d64 <iprintf>
 8011d34:	e005      	b.n	8011d42 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	68ba      	ldr	r2, [r7, #8]
 8011d3a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	687a      	ldr	r2, [r7, #4]
 8011d40:	61da      	str	r2, [r3, #28]
}
 8011d42:	3710      	adds	r7, #16
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	08018134 	.word	0x08018134
 8011d4c:	08018468 	.word	0x08018468
 8011d50:	08018188 	.word	0x08018188

08011d54 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b084      	sub	sp, #16
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d107      	bne.n	8011d72 <udp_remove+0x1e>
 8011d62:	4b19      	ldr	r3, [pc, #100]	; (8011dc8 <udp_remove+0x74>)
 8011d64:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011d68:	4918      	ldr	r1, [pc, #96]	; (8011dcc <udp_remove+0x78>)
 8011d6a:	4819      	ldr	r0, [pc, #100]	; (8011dd0 <udp_remove+0x7c>)
 8011d6c:	f002 fffa 	bl	8014d64 <iprintf>
 8011d70:	e026      	b.n	8011dc0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011d72:	4b18      	ldr	r3, [pc, #96]	; (8011dd4 <udp_remove+0x80>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	687a      	ldr	r2, [r7, #4]
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d105      	bne.n	8011d88 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011d7c:	4b15      	ldr	r3, [pc, #84]	; (8011dd4 <udp_remove+0x80>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	4a14      	ldr	r2, [pc, #80]	; (8011dd4 <udp_remove+0x80>)
 8011d84:	6013      	str	r3, [r2, #0]
 8011d86:	e017      	b.n	8011db8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011d88:	4b12      	ldr	r3, [pc, #72]	; (8011dd4 <udp_remove+0x80>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	60fb      	str	r3, [r7, #12]
 8011d8e:	e010      	b.n	8011db2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	68db      	ldr	r3, [r3, #12]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d009      	beq.n	8011dac <udp_remove+0x58>
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	68db      	ldr	r3, [r3, #12]
 8011d9c:	687a      	ldr	r2, [r7, #4]
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	d104      	bne.n	8011dac <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	68da      	ldr	r2, [r3, #12]
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	60da      	str	r2, [r3, #12]
        break;
 8011daa:	e005      	b.n	8011db8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	68db      	ldr	r3, [r3, #12]
 8011db0:	60fb      	str	r3, [r7, #12]
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d1eb      	bne.n	8011d90 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011db8:	6879      	ldr	r1, [r7, #4]
 8011dba:	2000      	movs	r0, #0
 8011dbc:	f7f8 ff86 	bl	800accc <memp_free>
}
 8011dc0:	3710      	adds	r7, #16
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	08018134 	.word	0x08018134
 8011dcc:	08018480 	.word	0x08018480
 8011dd0:	08018188 	.word	0x08018188
 8011dd4:	20017ac0 	.word	0x20017ac0

08011dd8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b082      	sub	sp, #8
 8011ddc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011dde:	2000      	movs	r0, #0
 8011de0:	f7f8 fefe 	bl	800abe0 <memp_malloc>
 8011de4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d007      	beq.n	8011dfc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011dec:	2220      	movs	r2, #32
 8011dee:	2100      	movs	r1, #0
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f002 fece 	bl	8014b92 <memset>
    pcb->ttl = UDP_TTL;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	22ff      	movs	r2, #255	; 0xff
 8011dfa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011dfc:	687b      	ldr	r3, [r7, #4]
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3708      	adds	r7, #8
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}
	...

08011e08 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b085      	sub	sp, #20
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d01e      	beq.n	8011e56 <udp_netif_ip_addr_changed+0x4e>
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d01a      	beq.n	8011e56 <udp_netif_ip_addr_changed+0x4e>
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d017      	beq.n	8011e56 <udp_netif_ip_addr_changed+0x4e>
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d013      	beq.n	8011e56 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011e2e:	4b0d      	ldr	r3, [pc, #52]	; (8011e64 <udp_netif_ip_addr_changed+0x5c>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	60fb      	str	r3, [r7, #12]
 8011e34:	e00c      	b.n	8011e50 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	681a      	ldr	r2, [r3, #0]
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d103      	bne.n	8011e4a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	681a      	ldr	r2, [r3, #0]
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	68db      	ldr	r3, [r3, #12]
 8011e4e:	60fb      	str	r3, [r7, #12]
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d1ef      	bne.n	8011e36 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011e56:	bf00      	nop
 8011e58:	3714      	adds	r7, #20
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e60:	4770      	bx	lr
 8011e62:	bf00      	nop
 8011e64:	20017ac0 	.word	0x20017ac0

08011e68 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b082      	sub	sp, #8
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011e70:	4915      	ldr	r1, [pc, #84]	; (8011ec8 <etharp_free_entry+0x60>)
 8011e72:	687a      	ldr	r2, [r7, #4]
 8011e74:	4613      	mov	r3, r2
 8011e76:	005b      	lsls	r3, r3, #1
 8011e78:	4413      	add	r3, r2
 8011e7a:	00db      	lsls	r3, r3, #3
 8011e7c:	440b      	add	r3, r1
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d013      	beq.n	8011eac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011e84:	4910      	ldr	r1, [pc, #64]	; (8011ec8 <etharp_free_entry+0x60>)
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	4613      	mov	r3, r2
 8011e8a:	005b      	lsls	r3, r3, #1
 8011e8c:	4413      	add	r3, r2
 8011e8e:	00db      	lsls	r3, r3, #3
 8011e90:	440b      	add	r3, r1
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7f9 fdbd 	bl	800ba14 <pbuf_free>
    arp_table[i].q = NULL;
 8011e9a:	490b      	ldr	r1, [pc, #44]	; (8011ec8 <etharp_free_entry+0x60>)
 8011e9c:	687a      	ldr	r2, [r7, #4]
 8011e9e:	4613      	mov	r3, r2
 8011ea0:	005b      	lsls	r3, r3, #1
 8011ea2:	4413      	add	r3, r2
 8011ea4:	00db      	lsls	r3, r3, #3
 8011ea6:	440b      	add	r3, r1
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011eac:	4906      	ldr	r1, [pc, #24]	; (8011ec8 <etharp_free_entry+0x60>)
 8011eae:	687a      	ldr	r2, [r7, #4]
 8011eb0:	4613      	mov	r3, r2
 8011eb2:	005b      	lsls	r3, r3, #1
 8011eb4:	4413      	add	r3, r2
 8011eb6:	00db      	lsls	r3, r3, #3
 8011eb8:	440b      	add	r3, r1
 8011eba:	3314      	adds	r3, #20
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011ec0:	bf00      	nop
 8011ec2:	3708      	adds	r7, #8
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}
 8011ec8:	20017ac4 	.word	0x20017ac4

08011ecc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b082      	sub	sp, #8
 8011ed0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	607b      	str	r3, [r7, #4]
 8011ed6:	e096      	b.n	8012006 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011ed8:	494f      	ldr	r1, [pc, #316]	; (8012018 <etharp_tmr+0x14c>)
 8011eda:	687a      	ldr	r2, [r7, #4]
 8011edc:	4613      	mov	r3, r2
 8011ede:	005b      	lsls	r3, r3, #1
 8011ee0:	4413      	add	r3, r2
 8011ee2:	00db      	lsls	r3, r3, #3
 8011ee4:	440b      	add	r3, r1
 8011ee6:	3314      	adds	r3, #20
 8011ee8:	781b      	ldrb	r3, [r3, #0]
 8011eea:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011eec:	78fb      	ldrb	r3, [r7, #3]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	f000 8086 	beq.w	8012000 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011ef4:	4948      	ldr	r1, [pc, #288]	; (8012018 <etharp_tmr+0x14c>)
 8011ef6:	687a      	ldr	r2, [r7, #4]
 8011ef8:	4613      	mov	r3, r2
 8011efa:	005b      	lsls	r3, r3, #1
 8011efc:	4413      	add	r3, r2
 8011efe:	00db      	lsls	r3, r3, #3
 8011f00:	440b      	add	r3, r1
 8011f02:	3312      	adds	r3, #18
 8011f04:	881b      	ldrh	r3, [r3, #0]
 8011f06:	3301      	adds	r3, #1
 8011f08:	b298      	uxth	r0, r3
 8011f0a:	4943      	ldr	r1, [pc, #268]	; (8012018 <etharp_tmr+0x14c>)
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	4613      	mov	r3, r2
 8011f10:	005b      	lsls	r3, r3, #1
 8011f12:	4413      	add	r3, r2
 8011f14:	00db      	lsls	r3, r3, #3
 8011f16:	440b      	add	r3, r1
 8011f18:	3312      	adds	r3, #18
 8011f1a:	4602      	mov	r2, r0
 8011f1c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011f1e:	493e      	ldr	r1, [pc, #248]	; (8012018 <etharp_tmr+0x14c>)
 8011f20:	687a      	ldr	r2, [r7, #4]
 8011f22:	4613      	mov	r3, r2
 8011f24:	005b      	lsls	r3, r3, #1
 8011f26:	4413      	add	r3, r2
 8011f28:	00db      	lsls	r3, r3, #3
 8011f2a:	440b      	add	r3, r1
 8011f2c:	3312      	adds	r3, #18
 8011f2e:	881b      	ldrh	r3, [r3, #0]
 8011f30:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011f34:	d215      	bcs.n	8011f62 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011f36:	4938      	ldr	r1, [pc, #224]	; (8012018 <etharp_tmr+0x14c>)
 8011f38:	687a      	ldr	r2, [r7, #4]
 8011f3a:	4613      	mov	r3, r2
 8011f3c:	005b      	lsls	r3, r3, #1
 8011f3e:	4413      	add	r3, r2
 8011f40:	00db      	lsls	r3, r3, #3
 8011f42:	440b      	add	r3, r1
 8011f44:	3314      	adds	r3, #20
 8011f46:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011f48:	2b01      	cmp	r3, #1
 8011f4a:	d10e      	bne.n	8011f6a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011f4c:	4932      	ldr	r1, [pc, #200]	; (8012018 <etharp_tmr+0x14c>)
 8011f4e:	687a      	ldr	r2, [r7, #4]
 8011f50:	4613      	mov	r3, r2
 8011f52:	005b      	lsls	r3, r3, #1
 8011f54:	4413      	add	r3, r2
 8011f56:	00db      	lsls	r3, r3, #3
 8011f58:	440b      	add	r3, r1
 8011f5a:	3312      	adds	r3, #18
 8011f5c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011f5e:	2b04      	cmp	r3, #4
 8011f60:	d903      	bls.n	8011f6a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f7ff ff80 	bl	8011e68 <etharp_free_entry>
 8011f68:	e04a      	b.n	8012000 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011f6a:	492b      	ldr	r1, [pc, #172]	; (8012018 <etharp_tmr+0x14c>)
 8011f6c:	687a      	ldr	r2, [r7, #4]
 8011f6e:	4613      	mov	r3, r2
 8011f70:	005b      	lsls	r3, r3, #1
 8011f72:	4413      	add	r3, r2
 8011f74:	00db      	lsls	r3, r3, #3
 8011f76:	440b      	add	r3, r1
 8011f78:	3314      	adds	r3, #20
 8011f7a:	781b      	ldrb	r3, [r3, #0]
 8011f7c:	2b03      	cmp	r3, #3
 8011f7e:	d10a      	bne.n	8011f96 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011f80:	4925      	ldr	r1, [pc, #148]	; (8012018 <etharp_tmr+0x14c>)
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	4613      	mov	r3, r2
 8011f86:	005b      	lsls	r3, r3, #1
 8011f88:	4413      	add	r3, r2
 8011f8a:	00db      	lsls	r3, r3, #3
 8011f8c:	440b      	add	r3, r1
 8011f8e:	3314      	adds	r3, #20
 8011f90:	2204      	movs	r2, #4
 8011f92:	701a      	strb	r2, [r3, #0]
 8011f94:	e034      	b.n	8012000 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011f96:	4920      	ldr	r1, [pc, #128]	; (8012018 <etharp_tmr+0x14c>)
 8011f98:	687a      	ldr	r2, [r7, #4]
 8011f9a:	4613      	mov	r3, r2
 8011f9c:	005b      	lsls	r3, r3, #1
 8011f9e:	4413      	add	r3, r2
 8011fa0:	00db      	lsls	r3, r3, #3
 8011fa2:	440b      	add	r3, r1
 8011fa4:	3314      	adds	r3, #20
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	2b04      	cmp	r3, #4
 8011faa:	d10a      	bne.n	8011fc2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011fac:	491a      	ldr	r1, [pc, #104]	; (8012018 <etharp_tmr+0x14c>)
 8011fae:	687a      	ldr	r2, [r7, #4]
 8011fb0:	4613      	mov	r3, r2
 8011fb2:	005b      	lsls	r3, r3, #1
 8011fb4:	4413      	add	r3, r2
 8011fb6:	00db      	lsls	r3, r3, #3
 8011fb8:	440b      	add	r3, r1
 8011fba:	3314      	adds	r3, #20
 8011fbc:	2202      	movs	r2, #2
 8011fbe:	701a      	strb	r2, [r3, #0]
 8011fc0:	e01e      	b.n	8012000 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011fc2:	4915      	ldr	r1, [pc, #84]	; (8012018 <etharp_tmr+0x14c>)
 8011fc4:	687a      	ldr	r2, [r7, #4]
 8011fc6:	4613      	mov	r3, r2
 8011fc8:	005b      	lsls	r3, r3, #1
 8011fca:	4413      	add	r3, r2
 8011fcc:	00db      	lsls	r3, r3, #3
 8011fce:	440b      	add	r3, r1
 8011fd0:	3314      	adds	r3, #20
 8011fd2:	781b      	ldrb	r3, [r3, #0]
 8011fd4:	2b01      	cmp	r3, #1
 8011fd6:	d113      	bne.n	8012000 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011fd8:	490f      	ldr	r1, [pc, #60]	; (8012018 <etharp_tmr+0x14c>)
 8011fda:	687a      	ldr	r2, [r7, #4]
 8011fdc:	4613      	mov	r3, r2
 8011fde:	005b      	lsls	r3, r3, #1
 8011fe0:	4413      	add	r3, r2
 8011fe2:	00db      	lsls	r3, r3, #3
 8011fe4:	440b      	add	r3, r1
 8011fe6:	3308      	adds	r3, #8
 8011fe8:	6818      	ldr	r0, [r3, #0]
 8011fea:	687a      	ldr	r2, [r7, #4]
 8011fec:	4613      	mov	r3, r2
 8011fee:	005b      	lsls	r3, r3, #1
 8011ff0:	4413      	add	r3, r2
 8011ff2:	00db      	lsls	r3, r3, #3
 8011ff4:	4a08      	ldr	r2, [pc, #32]	; (8012018 <etharp_tmr+0x14c>)
 8011ff6:	4413      	add	r3, r2
 8011ff8:	3304      	adds	r3, #4
 8011ffa:	4619      	mov	r1, r3
 8011ffc:	f000 fe6e 	bl	8012cdc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	3301      	adds	r3, #1
 8012004:	607b      	str	r3, [r7, #4]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	2b09      	cmp	r3, #9
 801200a:	f77f af65 	ble.w	8011ed8 <etharp_tmr+0xc>
      }
    }
  }
}
 801200e:	bf00      	nop
 8012010:	bf00      	nop
 8012012:	3708      	adds	r7, #8
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}
 8012018:	20017ac4 	.word	0x20017ac4

0801201c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b08a      	sub	sp, #40	; 0x28
 8012020:	af00      	add	r7, sp, #0
 8012022:	60f8      	str	r0, [r7, #12]
 8012024:	460b      	mov	r3, r1
 8012026:	607a      	str	r2, [r7, #4]
 8012028:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801202a:	230a      	movs	r3, #10
 801202c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801202e:	230a      	movs	r3, #10
 8012030:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012032:	230a      	movs	r3, #10
 8012034:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012036:	2300      	movs	r3, #0
 8012038:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801203a:	230a      	movs	r3, #10
 801203c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801203e:	2300      	movs	r3, #0
 8012040:	83bb      	strh	r3, [r7, #28]
 8012042:	2300      	movs	r3, #0
 8012044:	837b      	strh	r3, [r7, #26]
 8012046:	2300      	movs	r3, #0
 8012048:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801204a:	2300      	movs	r3, #0
 801204c:	843b      	strh	r3, [r7, #32]
 801204e:	e0ae      	b.n	80121ae <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012050:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012054:	49a6      	ldr	r1, [pc, #664]	; (80122f0 <etharp_find_entry+0x2d4>)
 8012056:	4613      	mov	r3, r2
 8012058:	005b      	lsls	r3, r3, #1
 801205a:	4413      	add	r3, r2
 801205c:	00db      	lsls	r3, r3, #3
 801205e:	440b      	add	r3, r1
 8012060:	3314      	adds	r3, #20
 8012062:	781b      	ldrb	r3, [r3, #0]
 8012064:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012066:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801206a:	2b0a      	cmp	r3, #10
 801206c:	d105      	bne.n	801207a <etharp_find_entry+0x5e>
 801206e:	7dfb      	ldrb	r3, [r7, #23]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d102      	bne.n	801207a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012074:	8c3b      	ldrh	r3, [r7, #32]
 8012076:	847b      	strh	r3, [r7, #34]	; 0x22
 8012078:	e095      	b.n	80121a6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801207a:	7dfb      	ldrb	r3, [r7, #23]
 801207c:	2b00      	cmp	r3, #0
 801207e:	f000 8092 	beq.w	80121a6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012082:	7dfb      	ldrb	r3, [r7, #23]
 8012084:	2b01      	cmp	r3, #1
 8012086:	d009      	beq.n	801209c <etharp_find_entry+0x80>
 8012088:	7dfb      	ldrb	r3, [r7, #23]
 801208a:	2b01      	cmp	r3, #1
 801208c:	d806      	bhi.n	801209c <etharp_find_entry+0x80>
 801208e:	4b99      	ldr	r3, [pc, #612]	; (80122f4 <etharp_find_entry+0x2d8>)
 8012090:	f240 1223 	movw	r2, #291	; 0x123
 8012094:	4998      	ldr	r1, [pc, #608]	; (80122f8 <etharp_find_entry+0x2dc>)
 8012096:	4899      	ldr	r0, [pc, #612]	; (80122fc <etharp_find_entry+0x2e0>)
 8012098:	f002 fe64 	bl	8014d64 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d020      	beq.n	80120e4 <etharp_find_entry+0xc8>
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	6819      	ldr	r1, [r3, #0]
 80120a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80120aa:	4891      	ldr	r0, [pc, #580]	; (80122f0 <etharp_find_entry+0x2d4>)
 80120ac:	4613      	mov	r3, r2
 80120ae:	005b      	lsls	r3, r3, #1
 80120b0:	4413      	add	r3, r2
 80120b2:	00db      	lsls	r3, r3, #3
 80120b4:	4403      	add	r3, r0
 80120b6:	3304      	adds	r3, #4
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	4299      	cmp	r1, r3
 80120bc:	d112      	bne.n	80120e4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d00c      	beq.n	80120de <etharp_find_entry+0xc2>
 80120c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80120c8:	4989      	ldr	r1, [pc, #548]	; (80122f0 <etharp_find_entry+0x2d4>)
 80120ca:	4613      	mov	r3, r2
 80120cc:	005b      	lsls	r3, r3, #1
 80120ce:	4413      	add	r3, r2
 80120d0:	00db      	lsls	r3, r3, #3
 80120d2:	440b      	add	r3, r1
 80120d4:	3308      	adds	r3, #8
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	687a      	ldr	r2, [r7, #4]
 80120da:	429a      	cmp	r2, r3
 80120dc:	d102      	bne.n	80120e4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80120de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80120e2:	e100      	b.n	80122e6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80120e4:	7dfb      	ldrb	r3, [r7, #23]
 80120e6:	2b01      	cmp	r3, #1
 80120e8:	d140      	bne.n	801216c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80120ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80120ee:	4980      	ldr	r1, [pc, #512]	; (80122f0 <etharp_find_entry+0x2d4>)
 80120f0:	4613      	mov	r3, r2
 80120f2:	005b      	lsls	r3, r3, #1
 80120f4:	4413      	add	r3, r2
 80120f6:	00db      	lsls	r3, r3, #3
 80120f8:	440b      	add	r3, r1
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d01a      	beq.n	8012136 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012100:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012104:	497a      	ldr	r1, [pc, #488]	; (80122f0 <etharp_find_entry+0x2d4>)
 8012106:	4613      	mov	r3, r2
 8012108:	005b      	lsls	r3, r3, #1
 801210a:	4413      	add	r3, r2
 801210c:	00db      	lsls	r3, r3, #3
 801210e:	440b      	add	r3, r1
 8012110:	3312      	adds	r3, #18
 8012112:	881b      	ldrh	r3, [r3, #0]
 8012114:	8bba      	ldrh	r2, [r7, #28]
 8012116:	429a      	cmp	r2, r3
 8012118:	d845      	bhi.n	80121a6 <etharp_find_entry+0x18a>
            old_queue = i;
 801211a:	8c3b      	ldrh	r3, [r7, #32]
 801211c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801211e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012122:	4973      	ldr	r1, [pc, #460]	; (80122f0 <etharp_find_entry+0x2d4>)
 8012124:	4613      	mov	r3, r2
 8012126:	005b      	lsls	r3, r3, #1
 8012128:	4413      	add	r3, r2
 801212a:	00db      	lsls	r3, r3, #3
 801212c:	440b      	add	r3, r1
 801212e:	3312      	adds	r3, #18
 8012130:	881b      	ldrh	r3, [r3, #0]
 8012132:	83bb      	strh	r3, [r7, #28]
 8012134:	e037      	b.n	80121a6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012136:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801213a:	496d      	ldr	r1, [pc, #436]	; (80122f0 <etharp_find_entry+0x2d4>)
 801213c:	4613      	mov	r3, r2
 801213e:	005b      	lsls	r3, r3, #1
 8012140:	4413      	add	r3, r2
 8012142:	00db      	lsls	r3, r3, #3
 8012144:	440b      	add	r3, r1
 8012146:	3312      	adds	r3, #18
 8012148:	881b      	ldrh	r3, [r3, #0]
 801214a:	8b7a      	ldrh	r2, [r7, #26]
 801214c:	429a      	cmp	r2, r3
 801214e:	d82a      	bhi.n	80121a6 <etharp_find_entry+0x18a>
            old_pending = i;
 8012150:	8c3b      	ldrh	r3, [r7, #32]
 8012152:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012154:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012158:	4965      	ldr	r1, [pc, #404]	; (80122f0 <etharp_find_entry+0x2d4>)
 801215a:	4613      	mov	r3, r2
 801215c:	005b      	lsls	r3, r3, #1
 801215e:	4413      	add	r3, r2
 8012160:	00db      	lsls	r3, r3, #3
 8012162:	440b      	add	r3, r1
 8012164:	3312      	adds	r3, #18
 8012166:	881b      	ldrh	r3, [r3, #0]
 8012168:	837b      	strh	r3, [r7, #26]
 801216a:	e01c      	b.n	80121a6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801216c:	7dfb      	ldrb	r3, [r7, #23]
 801216e:	2b01      	cmp	r3, #1
 8012170:	d919      	bls.n	80121a6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012172:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012176:	495e      	ldr	r1, [pc, #376]	; (80122f0 <etharp_find_entry+0x2d4>)
 8012178:	4613      	mov	r3, r2
 801217a:	005b      	lsls	r3, r3, #1
 801217c:	4413      	add	r3, r2
 801217e:	00db      	lsls	r3, r3, #3
 8012180:	440b      	add	r3, r1
 8012182:	3312      	adds	r3, #18
 8012184:	881b      	ldrh	r3, [r3, #0]
 8012186:	8b3a      	ldrh	r2, [r7, #24]
 8012188:	429a      	cmp	r2, r3
 801218a:	d80c      	bhi.n	80121a6 <etharp_find_entry+0x18a>
            old_stable = i;
 801218c:	8c3b      	ldrh	r3, [r7, #32]
 801218e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012190:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012194:	4956      	ldr	r1, [pc, #344]	; (80122f0 <etharp_find_entry+0x2d4>)
 8012196:	4613      	mov	r3, r2
 8012198:	005b      	lsls	r3, r3, #1
 801219a:	4413      	add	r3, r2
 801219c:	00db      	lsls	r3, r3, #3
 801219e:	440b      	add	r3, r1
 80121a0:	3312      	adds	r3, #18
 80121a2:	881b      	ldrh	r3, [r3, #0]
 80121a4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80121a6:	8c3b      	ldrh	r3, [r7, #32]
 80121a8:	3301      	adds	r3, #1
 80121aa:	b29b      	uxth	r3, r3
 80121ac:	843b      	strh	r3, [r7, #32]
 80121ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80121b2:	2b09      	cmp	r3, #9
 80121b4:	f77f af4c 	ble.w	8012050 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80121b8:	7afb      	ldrb	r3, [r7, #11]
 80121ba:	f003 0302 	and.w	r3, r3, #2
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d108      	bne.n	80121d4 <etharp_find_entry+0x1b8>
 80121c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80121c6:	2b0a      	cmp	r3, #10
 80121c8:	d107      	bne.n	80121da <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80121ca:	7afb      	ldrb	r3, [r7, #11]
 80121cc:	f003 0301 	and.w	r3, r3, #1
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d102      	bne.n	80121da <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80121d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80121d8:	e085      	b.n	80122e6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80121da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80121de:	2b09      	cmp	r3, #9
 80121e0:	dc02      	bgt.n	80121e8 <etharp_find_entry+0x1cc>
    i = empty;
 80121e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80121e4:	843b      	strh	r3, [r7, #32]
 80121e6:	e039      	b.n	801225c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80121e8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80121ec:	2b09      	cmp	r3, #9
 80121ee:	dc14      	bgt.n	801221a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80121f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121f2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80121f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121f8:	493d      	ldr	r1, [pc, #244]	; (80122f0 <etharp_find_entry+0x2d4>)
 80121fa:	4613      	mov	r3, r2
 80121fc:	005b      	lsls	r3, r3, #1
 80121fe:	4413      	add	r3, r2
 8012200:	00db      	lsls	r3, r3, #3
 8012202:	440b      	add	r3, r1
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d018      	beq.n	801223c <etharp_find_entry+0x220>
 801220a:	4b3a      	ldr	r3, [pc, #232]	; (80122f4 <etharp_find_entry+0x2d8>)
 801220c:	f240 126d 	movw	r2, #365	; 0x16d
 8012210:	493b      	ldr	r1, [pc, #236]	; (8012300 <etharp_find_entry+0x2e4>)
 8012212:	483a      	ldr	r0, [pc, #232]	; (80122fc <etharp_find_entry+0x2e0>)
 8012214:	f002 fda6 	bl	8014d64 <iprintf>
 8012218:	e010      	b.n	801223c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801221a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801221e:	2b09      	cmp	r3, #9
 8012220:	dc02      	bgt.n	8012228 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012222:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012224:	843b      	strh	r3, [r7, #32]
 8012226:	e009      	b.n	801223c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012228:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801222c:	2b09      	cmp	r3, #9
 801222e:	dc02      	bgt.n	8012236 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012230:	8bfb      	ldrh	r3, [r7, #30]
 8012232:	843b      	strh	r3, [r7, #32]
 8012234:	e002      	b.n	801223c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801223a:	e054      	b.n	80122e6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801223c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012240:	2b09      	cmp	r3, #9
 8012242:	dd06      	ble.n	8012252 <etharp_find_entry+0x236>
 8012244:	4b2b      	ldr	r3, [pc, #172]	; (80122f4 <etharp_find_entry+0x2d8>)
 8012246:	f240 127f 	movw	r2, #383	; 0x17f
 801224a:	492e      	ldr	r1, [pc, #184]	; (8012304 <etharp_find_entry+0x2e8>)
 801224c:	482b      	ldr	r0, [pc, #172]	; (80122fc <etharp_find_entry+0x2e0>)
 801224e:	f002 fd89 	bl	8014d64 <iprintf>
    etharp_free_entry(i);
 8012252:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012256:	4618      	mov	r0, r3
 8012258:	f7ff fe06 	bl	8011e68 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801225c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012260:	2b09      	cmp	r3, #9
 8012262:	dd06      	ble.n	8012272 <etharp_find_entry+0x256>
 8012264:	4b23      	ldr	r3, [pc, #140]	; (80122f4 <etharp_find_entry+0x2d8>)
 8012266:	f240 1283 	movw	r2, #387	; 0x183
 801226a:	4926      	ldr	r1, [pc, #152]	; (8012304 <etharp_find_entry+0x2e8>)
 801226c:	4823      	ldr	r0, [pc, #140]	; (80122fc <etharp_find_entry+0x2e0>)
 801226e:	f002 fd79 	bl	8014d64 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012272:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012276:	491e      	ldr	r1, [pc, #120]	; (80122f0 <etharp_find_entry+0x2d4>)
 8012278:	4613      	mov	r3, r2
 801227a:	005b      	lsls	r3, r3, #1
 801227c:	4413      	add	r3, r2
 801227e:	00db      	lsls	r3, r3, #3
 8012280:	440b      	add	r3, r1
 8012282:	3314      	adds	r3, #20
 8012284:	781b      	ldrb	r3, [r3, #0]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d006      	beq.n	8012298 <etharp_find_entry+0x27c>
 801228a:	4b1a      	ldr	r3, [pc, #104]	; (80122f4 <etharp_find_entry+0x2d8>)
 801228c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012290:	491d      	ldr	r1, [pc, #116]	; (8012308 <etharp_find_entry+0x2ec>)
 8012292:	481a      	ldr	r0, [pc, #104]	; (80122fc <etharp_find_entry+0x2e0>)
 8012294:	f002 fd66 	bl	8014d64 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d00b      	beq.n	80122b6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801229e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	6819      	ldr	r1, [r3, #0]
 80122a6:	4812      	ldr	r0, [pc, #72]	; (80122f0 <etharp_find_entry+0x2d4>)
 80122a8:	4613      	mov	r3, r2
 80122aa:	005b      	lsls	r3, r3, #1
 80122ac:	4413      	add	r3, r2
 80122ae:	00db      	lsls	r3, r3, #3
 80122b0:	4403      	add	r3, r0
 80122b2:	3304      	adds	r3, #4
 80122b4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80122b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122ba:	490d      	ldr	r1, [pc, #52]	; (80122f0 <etharp_find_entry+0x2d4>)
 80122bc:	4613      	mov	r3, r2
 80122be:	005b      	lsls	r3, r3, #1
 80122c0:	4413      	add	r3, r2
 80122c2:	00db      	lsls	r3, r3, #3
 80122c4:	440b      	add	r3, r1
 80122c6:	3312      	adds	r3, #18
 80122c8:	2200      	movs	r2, #0
 80122ca:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80122cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122d0:	4907      	ldr	r1, [pc, #28]	; (80122f0 <etharp_find_entry+0x2d4>)
 80122d2:	4613      	mov	r3, r2
 80122d4:	005b      	lsls	r3, r3, #1
 80122d6:	4413      	add	r3, r2
 80122d8:	00db      	lsls	r3, r3, #3
 80122da:	440b      	add	r3, r1
 80122dc:	3308      	adds	r3, #8
 80122de:	687a      	ldr	r2, [r7, #4]
 80122e0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80122e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3728      	adds	r7, #40	; 0x28
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	bf00      	nop
 80122f0:	20017ac4 	.word	0x20017ac4
 80122f4:	08018498 	.word	0x08018498
 80122f8:	080184d0 	.word	0x080184d0
 80122fc:	08018510 	.word	0x08018510
 8012300:	08018538 	.word	0x08018538
 8012304:	08018550 	.word	0x08018550
 8012308:	08018564 	.word	0x08018564

0801230c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b088      	sub	sp, #32
 8012310:	af02      	add	r7, sp, #8
 8012312:	60f8      	str	r0, [r7, #12]
 8012314:	60b9      	str	r1, [r7, #8]
 8012316:	607a      	str	r2, [r7, #4]
 8012318:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012320:	2b06      	cmp	r3, #6
 8012322:	d006      	beq.n	8012332 <etharp_update_arp_entry+0x26>
 8012324:	4b48      	ldr	r3, [pc, #288]	; (8012448 <etharp_update_arp_entry+0x13c>)
 8012326:	f240 12a9 	movw	r2, #425	; 0x1a9
 801232a:	4948      	ldr	r1, [pc, #288]	; (801244c <etharp_update_arp_entry+0x140>)
 801232c:	4848      	ldr	r0, [pc, #288]	; (8012450 <etharp_update_arp_entry+0x144>)
 801232e:	f002 fd19 	bl	8014d64 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d012      	beq.n	801235e <etharp_update_arp_entry+0x52>
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d00e      	beq.n	801235e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	68f9      	ldr	r1, [r7, #12]
 8012346:	4618      	mov	r0, r3
 8012348:	f001 f8fe 	bl	8013548 <ip4_addr_isbroadcast_u32>
 801234c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801234e:	2b00      	cmp	r3, #0
 8012350:	d105      	bne.n	801235e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801235a:	2be0      	cmp	r3, #224	; 0xe0
 801235c:	d102      	bne.n	8012364 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801235e:	f06f 030f 	mvn.w	r3, #15
 8012362:	e06c      	b.n	801243e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012364:	78fb      	ldrb	r3, [r7, #3]
 8012366:	68fa      	ldr	r2, [r7, #12]
 8012368:	4619      	mov	r1, r3
 801236a:	68b8      	ldr	r0, [r7, #8]
 801236c:	f7ff fe56 	bl	801201c <etharp_find_entry>
 8012370:	4603      	mov	r3, r0
 8012372:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012374:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012378:	2b00      	cmp	r3, #0
 801237a:	da02      	bge.n	8012382 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801237c:	8afb      	ldrh	r3, [r7, #22]
 801237e:	b25b      	sxtb	r3, r3
 8012380:	e05d      	b.n	801243e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012382:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012386:	4933      	ldr	r1, [pc, #204]	; (8012454 <etharp_update_arp_entry+0x148>)
 8012388:	4613      	mov	r3, r2
 801238a:	005b      	lsls	r3, r3, #1
 801238c:	4413      	add	r3, r2
 801238e:	00db      	lsls	r3, r3, #3
 8012390:	440b      	add	r3, r1
 8012392:	3314      	adds	r3, #20
 8012394:	2202      	movs	r2, #2
 8012396:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012398:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801239c:	492d      	ldr	r1, [pc, #180]	; (8012454 <etharp_update_arp_entry+0x148>)
 801239e:	4613      	mov	r3, r2
 80123a0:	005b      	lsls	r3, r3, #1
 80123a2:	4413      	add	r3, r2
 80123a4:	00db      	lsls	r3, r3, #3
 80123a6:	440b      	add	r3, r1
 80123a8:	3308      	adds	r3, #8
 80123aa:	68fa      	ldr	r2, [r7, #12]
 80123ac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80123ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80123b2:	4613      	mov	r3, r2
 80123b4:	005b      	lsls	r3, r3, #1
 80123b6:	4413      	add	r3, r2
 80123b8:	00db      	lsls	r3, r3, #3
 80123ba:	3308      	adds	r3, #8
 80123bc:	4a25      	ldr	r2, [pc, #148]	; (8012454 <etharp_update_arp_entry+0x148>)
 80123be:	4413      	add	r3, r2
 80123c0:	3304      	adds	r3, #4
 80123c2:	2206      	movs	r2, #6
 80123c4:	6879      	ldr	r1, [r7, #4]
 80123c6:	4618      	mov	r0, r3
 80123c8:	f002 fbbb 	bl	8014b42 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80123cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80123d0:	4920      	ldr	r1, [pc, #128]	; (8012454 <etharp_update_arp_entry+0x148>)
 80123d2:	4613      	mov	r3, r2
 80123d4:	005b      	lsls	r3, r3, #1
 80123d6:	4413      	add	r3, r2
 80123d8:	00db      	lsls	r3, r3, #3
 80123da:	440b      	add	r3, r1
 80123dc:	3312      	adds	r3, #18
 80123de:	2200      	movs	r2, #0
 80123e0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80123e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80123e6:	491b      	ldr	r1, [pc, #108]	; (8012454 <etharp_update_arp_entry+0x148>)
 80123e8:	4613      	mov	r3, r2
 80123ea:	005b      	lsls	r3, r3, #1
 80123ec:	4413      	add	r3, r2
 80123ee:	00db      	lsls	r3, r3, #3
 80123f0:	440b      	add	r3, r1
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d021      	beq.n	801243c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80123f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80123fc:	4915      	ldr	r1, [pc, #84]	; (8012454 <etharp_update_arp_entry+0x148>)
 80123fe:	4613      	mov	r3, r2
 8012400:	005b      	lsls	r3, r3, #1
 8012402:	4413      	add	r3, r2
 8012404:	00db      	lsls	r3, r3, #3
 8012406:	440b      	add	r3, r1
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801240c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012410:	4910      	ldr	r1, [pc, #64]	; (8012454 <etharp_update_arp_entry+0x148>)
 8012412:	4613      	mov	r3, r2
 8012414:	005b      	lsls	r3, r3, #1
 8012416:	4413      	add	r3, r2
 8012418:	00db      	lsls	r3, r3, #3
 801241a:	440b      	add	r3, r1
 801241c:	2200      	movs	r2, #0
 801241e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012426:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801242a:	9300      	str	r3, [sp, #0]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	6939      	ldr	r1, [r7, #16]
 8012430:	68f8      	ldr	r0, [r7, #12]
 8012432:	f002 f827 	bl	8014484 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012436:	6938      	ldr	r0, [r7, #16]
 8012438:	f7f9 faec 	bl	800ba14 <pbuf_free>
  }
  return ERR_OK;
 801243c:	2300      	movs	r3, #0
}
 801243e:	4618      	mov	r0, r3
 8012440:	3718      	adds	r7, #24
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}
 8012446:	bf00      	nop
 8012448:	08018498 	.word	0x08018498
 801244c:	08018590 	.word	0x08018590
 8012450:	08018510 	.word	0x08018510
 8012454:	20017ac4 	.word	0x20017ac4

08012458 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b084      	sub	sp, #16
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012460:	2300      	movs	r3, #0
 8012462:	60fb      	str	r3, [r7, #12]
 8012464:	e01e      	b.n	80124a4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012466:	4913      	ldr	r1, [pc, #76]	; (80124b4 <etharp_cleanup_netif+0x5c>)
 8012468:	68fa      	ldr	r2, [r7, #12]
 801246a:	4613      	mov	r3, r2
 801246c:	005b      	lsls	r3, r3, #1
 801246e:	4413      	add	r3, r2
 8012470:	00db      	lsls	r3, r3, #3
 8012472:	440b      	add	r3, r1
 8012474:	3314      	adds	r3, #20
 8012476:	781b      	ldrb	r3, [r3, #0]
 8012478:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801247a:	7afb      	ldrb	r3, [r7, #11]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d00e      	beq.n	801249e <etharp_cleanup_netif+0x46>
 8012480:	490c      	ldr	r1, [pc, #48]	; (80124b4 <etharp_cleanup_netif+0x5c>)
 8012482:	68fa      	ldr	r2, [r7, #12]
 8012484:	4613      	mov	r3, r2
 8012486:	005b      	lsls	r3, r3, #1
 8012488:	4413      	add	r3, r2
 801248a:	00db      	lsls	r3, r3, #3
 801248c:	440b      	add	r3, r1
 801248e:	3308      	adds	r3, #8
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	429a      	cmp	r2, r3
 8012496:	d102      	bne.n	801249e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012498:	68f8      	ldr	r0, [r7, #12]
 801249a:	f7ff fce5 	bl	8011e68 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	3301      	adds	r3, #1
 80124a2:	60fb      	str	r3, [r7, #12]
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	2b09      	cmp	r3, #9
 80124a8:	dddd      	ble.n	8012466 <etharp_cleanup_netif+0xe>
    }
  }
}
 80124aa:	bf00      	nop
 80124ac:	bf00      	nop
 80124ae:	3710      	adds	r7, #16
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	20017ac4 	.word	0x20017ac4

080124b8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80124b8:	b5b0      	push	{r4, r5, r7, lr}
 80124ba:	b08a      	sub	sp, #40	; 0x28
 80124bc:	af04      	add	r7, sp, #16
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d107      	bne.n	80124d8 <etharp_input+0x20>
 80124c8:	4b3d      	ldr	r3, [pc, #244]	; (80125c0 <etharp_input+0x108>)
 80124ca:	f240 228a 	movw	r2, #650	; 0x28a
 80124ce:	493d      	ldr	r1, [pc, #244]	; (80125c4 <etharp_input+0x10c>)
 80124d0:	483d      	ldr	r0, [pc, #244]	; (80125c8 <etharp_input+0x110>)
 80124d2:	f002 fc47 	bl	8014d64 <iprintf>
 80124d6:	e06f      	b.n	80125b8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	685b      	ldr	r3, [r3, #4]
 80124dc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	881b      	ldrh	r3, [r3, #0]
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124e8:	d10c      	bne.n	8012504 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80124ee:	2b06      	cmp	r3, #6
 80124f0:	d108      	bne.n	8012504 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80124f2:	693b      	ldr	r3, [r7, #16]
 80124f4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80124f6:	2b04      	cmp	r3, #4
 80124f8:	d104      	bne.n	8012504 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80124fa:	693b      	ldr	r3, [r7, #16]
 80124fc:	885b      	ldrh	r3, [r3, #2]
 80124fe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012500:	2b08      	cmp	r3, #8
 8012502:	d003      	beq.n	801250c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012504:	6878      	ldr	r0, [r7, #4]
 8012506:	f7f9 fa85 	bl	800ba14 <pbuf_free>
    return;
 801250a:	e055      	b.n	80125b8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801250c:	693b      	ldr	r3, [r7, #16]
 801250e:	330e      	adds	r3, #14
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	3318      	adds	r3, #24
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	3304      	adds	r3, #4
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d102      	bne.n	801252c <etharp_input+0x74>
    for_us = 0;
 8012526:	2300      	movs	r3, #0
 8012528:	75fb      	strb	r3, [r7, #23]
 801252a:	e009      	b.n	8012540 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801252c:	68ba      	ldr	r2, [r7, #8]
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	3304      	adds	r3, #4
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	429a      	cmp	r2, r3
 8012536:	bf0c      	ite	eq
 8012538:	2301      	moveq	r3, #1
 801253a:	2300      	movne	r3, #0
 801253c:	b2db      	uxtb	r3, r3
 801253e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012540:	693b      	ldr	r3, [r7, #16]
 8012542:	f103 0208 	add.w	r2, r3, #8
 8012546:	7dfb      	ldrb	r3, [r7, #23]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d001      	beq.n	8012550 <etharp_input+0x98>
 801254c:	2301      	movs	r3, #1
 801254e:	e000      	b.n	8012552 <etharp_input+0x9a>
 8012550:	2302      	movs	r3, #2
 8012552:	f107 010c 	add.w	r1, r7, #12
 8012556:	6838      	ldr	r0, [r7, #0]
 8012558:	f7ff fed8 	bl	801230c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801255c:	693b      	ldr	r3, [r7, #16]
 801255e:	88db      	ldrh	r3, [r3, #6]
 8012560:	b29b      	uxth	r3, r3
 8012562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012566:	d003      	beq.n	8012570 <etharp_input+0xb8>
 8012568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801256c:	d01e      	beq.n	80125ac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801256e:	e020      	b.n	80125b2 <etharp_input+0xfa>
      if (for_us) {
 8012570:	7dfb      	ldrb	r3, [r7, #23]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d01c      	beq.n	80125b0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801258c:	693a      	ldr	r2, [r7, #16]
 801258e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012590:	2102      	movs	r1, #2
 8012592:	9103      	str	r1, [sp, #12]
 8012594:	f107 010c 	add.w	r1, r7, #12
 8012598:	9102      	str	r1, [sp, #8]
 801259a:	9201      	str	r2, [sp, #4]
 801259c:	9300      	str	r3, [sp, #0]
 801259e:	462b      	mov	r3, r5
 80125a0:	4622      	mov	r2, r4
 80125a2:	4601      	mov	r1, r0
 80125a4:	6838      	ldr	r0, [r7, #0]
 80125a6:	f000 faeb 	bl	8012b80 <etharp_raw>
      break;
 80125aa:	e001      	b.n	80125b0 <etharp_input+0xf8>
      break;
 80125ac:	bf00      	nop
 80125ae:	e000      	b.n	80125b2 <etharp_input+0xfa>
      break;
 80125b0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f7f9 fa2e 	bl	800ba14 <pbuf_free>
}
 80125b8:	3718      	adds	r7, #24
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bdb0      	pop	{r4, r5, r7, pc}
 80125be:	bf00      	nop
 80125c0:	08018498 	.word	0x08018498
 80125c4:	080185e8 	.word	0x080185e8
 80125c8:	08018510 	.word	0x08018510

080125cc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b086      	sub	sp, #24
 80125d0:	af02      	add	r7, sp, #8
 80125d2:	60f8      	str	r0, [r7, #12]
 80125d4:	60b9      	str	r1, [r7, #8]
 80125d6:	4613      	mov	r3, r2
 80125d8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80125da:	79fa      	ldrb	r2, [r7, #7]
 80125dc:	4944      	ldr	r1, [pc, #272]	; (80126f0 <etharp_output_to_arp_index+0x124>)
 80125de:	4613      	mov	r3, r2
 80125e0:	005b      	lsls	r3, r3, #1
 80125e2:	4413      	add	r3, r2
 80125e4:	00db      	lsls	r3, r3, #3
 80125e6:	440b      	add	r3, r1
 80125e8:	3314      	adds	r3, #20
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	2b01      	cmp	r3, #1
 80125ee:	d806      	bhi.n	80125fe <etharp_output_to_arp_index+0x32>
 80125f0:	4b40      	ldr	r3, [pc, #256]	; (80126f4 <etharp_output_to_arp_index+0x128>)
 80125f2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80125f6:	4940      	ldr	r1, [pc, #256]	; (80126f8 <etharp_output_to_arp_index+0x12c>)
 80125f8:	4840      	ldr	r0, [pc, #256]	; (80126fc <etharp_output_to_arp_index+0x130>)
 80125fa:	f002 fbb3 	bl	8014d64 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80125fe:	79fa      	ldrb	r2, [r7, #7]
 8012600:	493b      	ldr	r1, [pc, #236]	; (80126f0 <etharp_output_to_arp_index+0x124>)
 8012602:	4613      	mov	r3, r2
 8012604:	005b      	lsls	r3, r3, #1
 8012606:	4413      	add	r3, r2
 8012608:	00db      	lsls	r3, r3, #3
 801260a:	440b      	add	r3, r1
 801260c:	3314      	adds	r3, #20
 801260e:	781b      	ldrb	r3, [r3, #0]
 8012610:	2b02      	cmp	r3, #2
 8012612:	d153      	bne.n	80126bc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012614:	79fa      	ldrb	r2, [r7, #7]
 8012616:	4936      	ldr	r1, [pc, #216]	; (80126f0 <etharp_output_to_arp_index+0x124>)
 8012618:	4613      	mov	r3, r2
 801261a:	005b      	lsls	r3, r3, #1
 801261c:	4413      	add	r3, r2
 801261e:	00db      	lsls	r3, r3, #3
 8012620:	440b      	add	r3, r1
 8012622:	3312      	adds	r3, #18
 8012624:	881b      	ldrh	r3, [r3, #0]
 8012626:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801262a:	d919      	bls.n	8012660 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801262c:	79fa      	ldrb	r2, [r7, #7]
 801262e:	4613      	mov	r3, r2
 8012630:	005b      	lsls	r3, r3, #1
 8012632:	4413      	add	r3, r2
 8012634:	00db      	lsls	r3, r3, #3
 8012636:	4a2e      	ldr	r2, [pc, #184]	; (80126f0 <etharp_output_to_arp_index+0x124>)
 8012638:	4413      	add	r3, r2
 801263a:	3304      	adds	r3, #4
 801263c:	4619      	mov	r1, r3
 801263e:	68f8      	ldr	r0, [r7, #12]
 8012640:	f000 fb4c 	bl	8012cdc <etharp_request>
 8012644:	4603      	mov	r3, r0
 8012646:	2b00      	cmp	r3, #0
 8012648:	d138      	bne.n	80126bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801264a:	79fa      	ldrb	r2, [r7, #7]
 801264c:	4928      	ldr	r1, [pc, #160]	; (80126f0 <etharp_output_to_arp_index+0x124>)
 801264e:	4613      	mov	r3, r2
 8012650:	005b      	lsls	r3, r3, #1
 8012652:	4413      	add	r3, r2
 8012654:	00db      	lsls	r3, r3, #3
 8012656:	440b      	add	r3, r1
 8012658:	3314      	adds	r3, #20
 801265a:	2203      	movs	r2, #3
 801265c:	701a      	strb	r2, [r3, #0]
 801265e:	e02d      	b.n	80126bc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012660:	79fa      	ldrb	r2, [r7, #7]
 8012662:	4923      	ldr	r1, [pc, #140]	; (80126f0 <etharp_output_to_arp_index+0x124>)
 8012664:	4613      	mov	r3, r2
 8012666:	005b      	lsls	r3, r3, #1
 8012668:	4413      	add	r3, r2
 801266a:	00db      	lsls	r3, r3, #3
 801266c:	440b      	add	r3, r1
 801266e:	3312      	adds	r3, #18
 8012670:	881b      	ldrh	r3, [r3, #0]
 8012672:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012676:	d321      	bcc.n	80126bc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012678:	79fa      	ldrb	r2, [r7, #7]
 801267a:	4613      	mov	r3, r2
 801267c:	005b      	lsls	r3, r3, #1
 801267e:	4413      	add	r3, r2
 8012680:	00db      	lsls	r3, r3, #3
 8012682:	4a1b      	ldr	r2, [pc, #108]	; (80126f0 <etharp_output_to_arp_index+0x124>)
 8012684:	4413      	add	r3, r2
 8012686:	1d19      	adds	r1, r3, #4
 8012688:	79fa      	ldrb	r2, [r7, #7]
 801268a:	4613      	mov	r3, r2
 801268c:	005b      	lsls	r3, r3, #1
 801268e:	4413      	add	r3, r2
 8012690:	00db      	lsls	r3, r3, #3
 8012692:	3308      	adds	r3, #8
 8012694:	4a16      	ldr	r2, [pc, #88]	; (80126f0 <etharp_output_to_arp_index+0x124>)
 8012696:	4413      	add	r3, r2
 8012698:	3304      	adds	r3, #4
 801269a:	461a      	mov	r2, r3
 801269c:	68f8      	ldr	r0, [r7, #12]
 801269e:	f000 fafb 	bl	8012c98 <etharp_request_dst>
 80126a2:	4603      	mov	r3, r0
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d109      	bne.n	80126bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80126a8:	79fa      	ldrb	r2, [r7, #7]
 80126aa:	4911      	ldr	r1, [pc, #68]	; (80126f0 <etharp_output_to_arp_index+0x124>)
 80126ac:	4613      	mov	r3, r2
 80126ae:	005b      	lsls	r3, r3, #1
 80126b0:	4413      	add	r3, r2
 80126b2:	00db      	lsls	r3, r3, #3
 80126b4:	440b      	add	r3, r1
 80126b6:	3314      	adds	r3, #20
 80126b8:	2203      	movs	r2, #3
 80126ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80126c2:	79fa      	ldrb	r2, [r7, #7]
 80126c4:	4613      	mov	r3, r2
 80126c6:	005b      	lsls	r3, r3, #1
 80126c8:	4413      	add	r3, r2
 80126ca:	00db      	lsls	r3, r3, #3
 80126cc:	3308      	adds	r3, #8
 80126ce:	4a08      	ldr	r2, [pc, #32]	; (80126f0 <etharp_output_to_arp_index+0x124>)
 80126d0:	4413      	add	r3, r2
 80126d2:	3304      	adds	r3, #4
 80126d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80126d8:	9200      	str	r2, [sp, #0]
 80126da:	460a      	mov	r2, r1
 80126dc:	68b9      	ldr	r1, [r7, #8]
 80126de:	68f8      	ldr	r0, [r7, #12]
 80126e0:	f001 fed0 	bl	8014484 <ethernet_output>
 80126e4:	4603      	mov	r3, r0
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3710      	adds	r7, #16
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}
 80126ee:	bf00      	nop
 80126f0:	20017ac4 	.word	0x20017ac4
 80126f4:	08018498 	.word	0x08018498
 80126f8:	08018608 	.word	0x08018608
 80126fc:	08018510 	.word	0x08018510

08012700 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b08a      	sub	sp, #40	; 0x28
 8012704:	af02      	add	r7, sp, #8
 8012706:	60f8      	str	r0, [r7, #12]
 8012708:	60b9      	str	r1, [r7, #8]
 801270a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d106      	bne.n	8012724 <etharp_output+0x24>
 8012716:	4b73      	ldr	r3, [pc, #460]	; (80128e4 <etharp_output+0x1e4>)
 8012718:	f240 321e 	movw	r2, #798	; 0x31e
 801271c:	4972      	ldr	r1, [pc, #456]	; (80128e8 <etharp_output+0x1e8>)
 801271e:	4873      	ldr	r0, [pc, #460]	; (80128ec <etharp_output+0x1ec>)
 8012720:	f002 fb20 	bl	8014d64 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d106      	bne.n	8012738 <etharp_output+0x38>
 801272a:	4b6e      	ldr	r3, [pc, #440]	; (80128e4 <etharp_output+0x1e4>)
 801272c:	f240 321f 	movw	r2, #799	; 0x31f
 8012730:	496f      	ldr	r1, [pc, #444]	; (80128f0 <etharp_output+0x1f0>)
 8012732:	486e      	ldr	r0, [pc, #440]	; (80128ec <etharp_output+0x1ec>)
 8012734:	f002 fb16 	bl	8014d64 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d106      	bne.n	801274c <etharp_output+0x4c>
 801273e:	4b69      	ldr	r3, [pc, #420]	; (80128e4 <etharp_output+0x1e4>)
 8012740:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012744:	496b      	ldr	r1, [pc, #428]	; (80128f4 <etharp_output+0x1f4>)
 8012746:	4869      	ldr	r0, [pc, #420]	; (80128ec <etharp_output+0x1ec>)
 8012748:	f002 fb0c 	bl	8014d64 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	68f9      	ldr	r1, [r7, #12]
 8012752:	4618      	mov	r0, r3
 8012754:	f000 fef8 	bl	8013548 <ip4_addr_isbroadcast_u32>
 8012758:	4603      	mov	r3, r0
 801275a:	2b00      	cmp	r3, #0
 801275c:	d002      	beq.n	8012764 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801275e:	4b66      	ldr	r3, [pc, #408]	; (80128f8 <etharp_output+0x1f8>)
 8012760:	61fb      	str	r3, [r7, #28]
 8012762:	e0af      	b.n	80128c4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801276c:	2be0      	cmp	r3, #224	; 0xe0
 801276e:	d118      	bne.n	80127a2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012770:	2301      	movs	r3, #1
 8012772:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012774:	2300      	movs	r3, #0
 8012776:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012778:	235e      	movs	r3, #94	; 0x5e
 801277a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	3301      	adds	r3, #1
 8012780:	781b      	ldrb	r3, [r3, #0]
 8012782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012786:	b2db      	uxtb	r3, r3
 8012788:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	3302      	adds	r3, #2
 801278e:	781b      	ldrb	r3, [r3, #0]
 8012790:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	3303      	adds	r3, #3
 8012796:	781b      	ldrb	r3, [r3, #0]
 8012798:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801279a:	f107 0310 	add.w	r3, r7, #16
 801279e:	61fb      	str	r3, [r7, #28]
 80127a0:	e090      	b.n	80128c4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	681a      	ldr	r2, [r3, #0]
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	3304      	adds	r3, #4
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	405a      	eors	r2, r3
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	3308      	adds	r3, #8
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	4013      	ands	r3, r2
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d012      	beq.n	80127e0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80127c0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80127c4:	4293      	cmp	r3, r2
 80127c6:	d00b      	beq.n	80127e0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	330c      	adds	r3, #12
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d003      	beq.n	80127da <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	330c      	adds	r3, #12
 80127d6:	61bb      	str	r3, [r7, #24]
 80127d8:	e002      	b.n	80127e0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80127da:	f06f 0303 	mvn.w	r3, #3
 80127de:	e07d      	b.n	80128dc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80127e0:	4b46      	ldr	r3, [pc, #280]	; (80128fc <etharp_output+0x1fc>)
 80127e2:	781b      	ldrb	r3, [r3, #0]
 80127e4:	4619      	mov	r1, r3
 80127e6:	4a46      	ldr	r2, [pc, #280]	; (8012900 <etharp_output+0x200>)
 80127e8:	460b      	mov	r3, r1
 80127ea:	005b      	lsls	r3, r3, #1
 80127ec:	440b      	add	r3, r1
 80127ee:	00db      	lsls	r3, r3, #3
 80127f0:	4413      	add	r3, r2
 80127f2:	3314      	adds	r3, #20
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	2b01      	cmp	r3, #1
 80127f8:	d925      	bls.n	8012846 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80127fa:	4b40      	ldr	r3, [pc, #256]	; (80128fc <etharp_output+0x1fc>)
 80127fc:	781b      	ldrb	r3, [r3, #0]
 80127fe:	4619      	mov	r1, r3
 8012800:	4a3f      	ldr	r2, [pc, #252]	; (8012900 <etharp_output+0x200>)
 8012802:	460b      	mov	r3, r1
 8012804:	005b      	lsls	r3, r3, #1
 8012806:	440b      	add	r3, r1
 8012808:	00db      	lsls	r3, r3, #3
 801280a:	4413      	add	r3, r2
 801280c:	3308      	adds	r3, #8
 801280e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012810:	68fa      	ldr	r2, [r7, #12]
 8012812:	429a      	cmp	r2, r3
 8012814:	d117      	bne.n	8012846 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012816:	69bb      	ldr	r3, [r7, #24]
 8012818:	681a      	ldr	r2, [r3, #0]
 801281a:	4b38      	ldr	r3, [pc, #224]	; (80128fc <etharp_output+0x1fc>)
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	4618      	mov	r0, r3
 8012820:	4937      	ldr	r1, [pc, #220]	; (8012900 <etharp_output+0x200>)
 8012822:	4603      	mov	r3, r0
 8012824:	005b      	lsls	r3, r3, #1
 8012826:	4403      	add	r3, r0
 8012828:	00db      	lsls	r3, r3, #3
 801282a:	440b      	add	r3, r1
 801282c:	3304      	adds	r3, #4
 801282e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012830:	429a      	cmp	r2, r3
 8012832:	d108      	bne.n	8012846 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012834:	4b31      	ldr	r3, [pc, #196]	; (80128fc <etharp_output+0x1fc>)
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	461a      	mov	r2, r3
 801283a:	68b9      	ldr	r1, [r7, #8]
 801283c:	68f8      	ldr	r0, [r7, #12]
 801283e:	f7ff fec5 	bl	80125cc <etharp_output_to_arp_index>
 8012842:	4603      	mov	r3, r0
 8012844:	e04a      	b.n	80128dc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012846:	2300      	movs	r3, #0
 8012848:	75fb      	strb	r3, [r7, #23]
 801284a:	e031      	b.n	80128b0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801284c:	7dfa      	ldrb	r2, [r7, #23]
 801284e:	492c      	ldr	r1, [pc, #176]	; (8012900 <etharp_output+0x200>)
 8012850:	4613      	mov	r3, r2
 8012852:	005b      	lsls	r3, r3, #1
 8012854:	4413      	add	r3, r2
 8012856:	00db      	lsls	r3, r3, #3
 8012858:	440b      	add	r3, r1
 801285a:	3314      	adds	r3, #20
 801285c:	781b      	ldrb	r3, [r3, #0]
 801285e:	2b01      	cmp	r3, #1
 8012860:	d923      	bls.n	80128aa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012862:	7dfa      	ldrb	r2, [r7, #23]
 8012864:	4926      	ldr	r1, [pc, #152]	; (8012900 <etharp_output+0x200>)
 8012866:	4613      	mov	r3, r2
 8012868:	005b      	lsls	r3, r3, #1
 801286a:	4413      	add	r3, r2
 801286c:	00db      	lsls	r3, r3, #3
 801286e:	440b      	add	r3, r1
 8012870:	3308      	adds	r3, #8
 8012872:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012874:	68fa      	ldr	r2, [r7, #12]
 8012876:	429a      	cmp	r2, r3
 8012878:	d117      	bne.n	80128aa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801287a:	69bb      	ldr	r3, [r7, #24]
 801287c:	6819      	ldr	r1, [r3, #0]
 801287e:	7dfa      	ldrb	r2, [r7, #23]
 8012880:	481f      	ldr	r0, [pc, #124]	; (8012900 <etharp_output+0x200>)
 8012882:	4613      	mov	r3, r2
 8012884:	005b      	lsls	r3, r3, #1
 8012886:	4413      	add	r3, r2
 8012888:	00db      	lsls	r3, r3, #3
 801288a:	4403      	add	r3, r0
 801288c:	3304      	adds	r3, #4
 801288e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012890:	4299      	cmp	r1, r3
 8012892:	d10a      	bne.n	80128aa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012894:	4a19      	ldr	r2, [pc, #100]	; (80128fc <etharp_output+0x1fc>)
 8012896:	7dfb      	ldrb	r3, [r7, #23]
 8012898:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801289a:	7dfb      	ldrb	r3, [r7, #23]
 801289c:	461a      	mov	r2, r3
 801289e:	68b9      	ldr	r1, [r7, #8]
 80128a0:	68f8      	ldr	r0, [r7, #12]
 80128a2:	f7ff fe93 	bl	80125cc <etharp_output_to_arp_index>
 80128a6:	4603      	mov	r3, r0
 80128a8:	e018      	b.n	80128dc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80128aa:	7dfb      	ldrb	r3, [r7, #23]
 80128ac:	3301      	adds	r3, #1
 80128ae:	75fb      	strb	r3, [r7, #23]
 80128b0:	7dfb      	ldrb	r3, [r7, #23]
 80128b2:	2b09      	cmp	r3, #9
 80128b4:	d9ca      	bls.n	801284c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80128b6:	68ba      	ldr	r2, [r7, #8]
 80128b8:	69b9      	ldr	r1, [r7, #24]
 80128ba:	68f8      	ldr	r0, [r7, #12]
 80128bc:	f000 f822 	bl	8012904 <etharp_query>
 80128c0:	4603      	mov	r3, r0
 80128c2:	e00b      	b.n	80128dc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80128ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80128ce:	9300      	str	r3, [sp, #0]
 80128d0:	69fb      	ldr	r3, [r7, #28]
 80128d2:	68b9      	ldr	r1, [r7, #8]
 80128d4:	68f8      	ldr	r0, [r7, #12]
 80128d6:	f001 fdd5 	bl	8014484 <ethernet_output>
 80128da:	4603      	mov	r3, r0
}
 80128dc:	4618      	mov	r0, r3
 80128de:	3720      	adds	r7, #32
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}
 80128e4:	08018498 	.word	0x08018498
 80128e8:	080185e8 	.word	0x080185e8
 80128ec:	08018510 	.word	0x08018510
 80128f0:	08018638 	.word	0x08018638
 80128f4:	080185d8 	.word	0x080185d8
 80128f8:	08018c94 	.word	0x08018c94
 80128fc:	20017bb4 	.word	0x20017bb4
 8012900:	20017ac4 	.word	0x20017ac4

08012904 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b08c      	sub	sp, #48	; 0x30
 8012908:	af02      	add	r7, sp, #8
 801290a:	60f8      	str	r0, [r7, #12]
 801290c:	60b9      	str	r1, [r7, #8]
 801290e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	3326      	adds	r3, #38	; 0x26
 8012914:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012916:	23ff      	movs	r3, #255	; 0xff
 8012918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801291c:	2300      	movs	r3, #0
 801291e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	68f9      	ldr	r1, [r7, #12]
 8012926:	4618      	mov	r0, r3
 8012928:	f000 fe0e 	bl	8013548 <ip4_addr_isbroadcast_u32>
 801292c:	4603      	mov	r3, r0
 801292e:	2b00      	cmp	r3, #0
 8012930:	d10c      	bne.n	801294c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012932:	68bb      	ldr	r3, [r7, #8]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801293a:	2be0      	cmp	r3, #224	; 0xe0
 801293c:	d006      	beq.n	801294c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d003      	beq.n	801294c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012944:	68bb      	ldr	r3, [r7, #8]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d102      	bne.n	8012952 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801294c:	f06f 030f 	mvn.w	r3, #15
 8012950:	e101      	b.n	8012b56 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012952:	68fa      	ldr	r2, [r7, #12]
 8012954:	2101      	movs	r1, #1
 8012956:	68b8      	ldr	r0, [r7, #8]
 8012958:	f7ff fb60 	bl	801201c <etharp_find_entry>
 801295c:	4603      	mov	r3, r0
 801295e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012960:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012964:	2b00      	cmp	r3, #0
 8012966:	da02      	bge.n	801296e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012968:	8a7b      	ldrh	r3, [r7, #18]
 801296a:	b25b      	sxtb	r3, r3
 801296c:	e0f3      	b.n	8012b56 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801296e:	8a7b      	ldrh	r3, [r7, #18]
 8012970:	2b7e      	cmp	r3, #126	; 0x7e
 8012972:	d906      	bls.n	8012982 <etharp_query+0x7e>
 8012974:	4b7a      	ldr	r3, [pc, #488]	; (8012b60 <etharp_query+0x25c>)
 8012976:	f240 32c1 	movw	r2, #961	; 0x3c1
 801297a:	497a      	ldr	r1, [pc, #488]	; (8012b64 <etharp_query+0x260>)
 801297c:	487a      	ldr	r0, [pc, #488]	; (8012b68 <etharp_query+0x264>)
 801297e:	f002 f9f1 	bl	8014d64 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012982:	8a7b      	ldrh	r3, [r7, #18]
 8012984:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012986:	7c7a      	ldrb	r2, [r7, #17]
 8012988:	4978      	ldr	r1, [pc, #480]	; (8012b6c <etharp_query+0x268>)
 801298a:	4613      	mov	r3, r2
 801298c:	005b      	lsls	r3, r3, #1
 801298e:	4413      	add	r3, r2
 8012990:	00db      	lsls	r3, r3, #3
 8012992:	440b      	add	r3, r1
 8012994:	3314      	adds	r3, #20
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d115      	bne.n	80129c8 <etharp_query+0xc4>
    is_new_entry = 1;
 801299c:	2301      	movs	r3, #1
 801299e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80129a0:	7c7a      	ldrb	r2, [r7, #17]
 80129a2:	4972      	ldr	r1, [pc, #456]	; (8012b6c <etharp_query+0x268>)
 80129a4:	4613      	mov	r3, r2
 80129a6:	005b      	lsls	r3, r3, #1
 80129a8:	4413      	add	r3, r2
 80129aa:	00db      	lsls	r3, r3, #3
 80129ac:	440b      	add	r3, r1
 80129ae:	3314      	adds	r3, #20
 80129b0:	2201      	movs	r2, #1
 80129b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80129b4:	7c7a      	ldrb	r2, [r7, #17]
 80129b6:	496d      	ldr	r1, [pc, #436]	; (8012b6c <etharp_query+0x268>)
 80129b8:	4613      	mov	r3, r2
 80129ba:	005b      	lsls	r3, r3, #1
 80129bc:	4413      	add	r3, r2
 80129be:	00db      	lsls	r3, r3, #3
 80129c0:	440b      	add	r3, r1
 80129c2:	3308      	adds	r3, #8
 80129c4:	68fa      	ldr	r2, [r7, #12]
 80129c6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80129c8:	7c7a      	ldrb	r2, [r7, #17]
 80129ca:	4968      	ldr	r1, [pc, #416]	; (8012b6c <etharp_query+0x268>)
 80129cc:	4613      	mov	r3, r2
 80129ce:	005b      	lsls	r3, r3, #1
 80129d0:	4413      	add	r3, r2
 80129d2:	00db      	lsls	r3, r3, #3
 80129d4:	440b      	add	r3, r1
 80129d6:	3314      	adds	r3, #20
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	2b01      	cmp	r3, #1
 80129dc:	d011      	beq.n	8012a02 <etharp_query+0xfe>
 80129de:	7c7a      	ldrb	r2, [r7, #17]
 80129e0:	4962      	ldr	r1, [pc, #392]	; (8012b6c <etharp_query+0x268>)
 80129e2:	4613      	mov	r3, r2
 80129e4:	005b      	lsls	r3, r3, #1
 80129e6:	4413      	add	r3, r2
 80129e8:	00db      	lsls	r3, r3, #3
 80129ea:	440b      	add	r3, r1
 80129ec:	3314      	adds	r3, #20
 80129ee:	781b      	ldrb	r3, [r3, #0]
 80129f0:	2b01      	cmp	r3, #1
 80129f2:	d806      	bhi.n	8012a02 <etharp_query+0xfe>
 80129f4:	4b5a      	ldr	r3, [pc, #360]	; (8012b60 <etharp_query+0x25c>)
 80129f6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80129fa:	495d      	ldr	r1, [pc, #372]	; (8012b70 <etharp_query+0x26c>)
 80129fc:	485a      	ldr	r0, [pc, #360]	; (8012b68 <etharp_query+0x264>)
 80129fe:	f002 f9b1 	bl	8014d64 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012a02:	6a3b      	ldr	r3, [r7, #32]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d102      	bne.n	8012a0e <etharp_query+0x10a>
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d10c      	bne.n	8012a28 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012a0e:	68b9      	ldr	r1, [r7, #8]
 8012a10:	68f8      	ldr	r0, [r7, #12]
 8012a12:	f000 f963 	bl	8012cdc <etharp_request>
 8012a16:	4603      	mov	r3, r0
 8012a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d102      	bne.n	8012a28 <etharp_query+0x124>
      return result;
 8012a22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012a26:	e096      	b.n	8012b56 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d106      	bne.n	8012a3c <etharp_query+0x138>
 8012a2e:	4b4c      	ldr	r3, [pc, #304]	; (8012b60 <etharp_query+0x25c>)
 8012a30:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012a34:	494f      	ldr	r1, [pc, #316]	; (8012b74 <etharp_query+0x270>)
 8012a36:	484c      	ldr	r0, [pc, #304]	; (8012b68 <etharp_query+0x264>)
 8012a38:	f002 f994 	bl	8014d64 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012a3c:	7c7a      	ldrb	r2, [r7, #17]
 8012a3e:	494b      	ldr	r1, [pc, #300]	; (8012b6c <etharp_query+0x268>)
 8012a40:	4613      	mov	r3, r2
 8012a42:	005b      	lsls	r3, r3, #1
 8012a44:	4413      	add	r3, r2
 8012a46:	00db      	lsls	r3, r3, #3
 8012a48:	440b      	add	r3, r1
 8012a4a:	3314      	adds	r3, #20
 8012a4c:	781b      	ldrb	r3, [r3, #0]
 8012a4e:	2b01      	cmp	r3, #1
 8012a50:	d917      	bls.n	8012a82 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012a52:	4a49      	ldr	r2, [pc, #292]	; (8012b78 <etharp_query+0x274>)
 8012a54:	7c7b      	ldrb	r3, [r7, #17]
 8012a56:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012a58:	7c7a      	ldrb	r2, [r7, #17]
 8012a5a:	4613      	mov	r3, r2
 8012a5c:	005b      	lsls	r3, r3, #1
 8012a5e:	4413      	add	r3, r2
 8012a60:	00db      	lsls	r3, r3, #3
 8012a62:	3308      	adds	r3, #8
 8012a64:	4a41      	ldr	r2, [pc, #260]	; (8012b6c <etharp_query+0x268>)
 8012a66:	4413      	add	r3, r2
 8012a68:	3304      	adds	r3, #4
 8012a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012a6e:	9200      	str	r2, [sp, #0]
 8012a70:	697a      	ldr	r2, [r7, #20]
 8012a72:	6879      	ldr	r1, [r7, #4]
 8012a74:	68f8      	ldr	r0, [r7, #12]
 8012a76:	f001 fd05 	bl	8014484 <ethernet_output>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012a80:	e067      	b.n	8012b52 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012a82:	7c7a      	ldrb	r2, [r7, #17]
 8012a84:	4939      	ldr	r1, [pc, #228]	; (8012b6c <etharp_query+0x268>)
 8012a86:	4613      	mov	r3, r2
 8012a88:	005b      	lsls	r3, r3, #1
 8012a8a:	4413      	add	r3, r2
 8012a8c:	00db      	lsls	r3, r3, #3
 8012a8e:	440b      	add	r3, r1
 8012a90:	3314      	adds	r3, #20
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	d15c      	bne.n	8012b52 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012aa0:	e01c      	b.n	8012adc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012aa2:	69fb      	ldr	r3, [r7, #28]
 8012aa4:	895a      	ldrh	r2, [r3, #10]
 8012aa6:	69fb      	ldr	r3, [r7, #28]
 8012aa8:	891b      	ldrh	r3, [r3, #8]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d10a      	bne.n	8012ac4 <etharp_query+0x1c0>
 8012aae:	69fb      	ldr	r3, [r7, #28]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d006      	beq.n	8012ac4 <etharp_query+0x1c0>
 8012ab6:	4b2a      	ldr	r3, [pc, #168]	; (8012b60 <etharp_query+0x25c>)
 8012ab8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012abc:	492f      	ldr	r1, [pc, #188]	; (8012b7c <etharp_query+0x278>)
 8012abe:	482a      	ldr	r0, [pc, #168]	; (8012b68 <etharp_query+0x264>)
 8012ac0:	f002 f950 	bl	8014d64 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012ac4:	69fb      	ldr	r3, [r7, #28]
 8012ac6:	7b1b      	ldrb	r3, [r3, #12]
 8012ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d002      	beq.n	8012ad6 <etharp_query+0x1d2>
        copy_needed = 1;
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	61bb      	str	r3, [r7, #24]
        break;
 8012ad4:	e005      	b.n	8012ae2 <etharp_query+0x1de>
      }
      p = p->next;
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012adc:	69fb      	ldr	r3, [r7, #28]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d1df      	bne.n	8012aa2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012ae2:	69bb      	ldr	r3, [r7, #24]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d007      	beq.n	8012af8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012ae8:	687a      	ldr	r2, [r7, #4]
 8012aea:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012aee:	200e      	movs	r0, #14
 8012af0:	f7f9 fa08 	bl	800bf04 <pbuf_clone>
 8012af4:	61f8      	str	r0, [r7, #28]
 8012af6:	e004      	b.n	8012b02 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012afc:	69f8      	ldr	r0, [r7, #28]
 8012afe:	f7f9 f82f 	bl	800bb60 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012b02:	69fb      	ldr	r3, [r7, #28]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d021      	beq.n	8012b4c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012b08:	7c7a      	ldrb	r2, [r7, #17]
 8012b0a:	4918      	ldr	r1, [pc, #96]	; (8012b6c <etharp_query+0x268>)
 8012b0c:	4613      	mov	r3, r2
 8012b0e:	005b      	lsls	r3, r3, #1
 8012b10:	4413      	add	r3, r2
 8012b12:	00db      	lsls	r3, r3, #3
 8012b14:	440b      	add	r3, r1
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d00a      	beq.n	8012b32 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012b1c:	7c7a      	ldrb	r2, [r7, #17]
 8012b1e:	4913      	ldr	r1, [pc, #76]	; (8012b6c <etharp_query+0x268>)
 8012b20:	4613      	mov	r3, r2
 8012b22:	005b      	lsls	r3, r3, #1
 8012b24:	4413      	add	r3, r2
 8012b26:	00db      	lsls	r3, r3, #3
 8012b28:	440b      	add	r3, r1
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7f8 ff71 	bl	800ba14 <pbuf_free>
      }
      arp_table[i].q = p;
 8012b32:	7c7a      	ldrb	r2, [r7, #17]
 8012b34:	490d      	ldr	r1, [pc, #52]	; (8012b6c <etharp_query+0x268>)
 8012b36:	4613      	mov	r3, r2
 8012b38:	005b      	lsls	r3, r3, #1
 8012b3a:	4413      	add	r3, r2
 8012b3c:	00db      	lsls	r3, r3, #3
 8012b3e:	440b      	add	r3, r1
 8012b40:	69fa      	ldr	r2, [r7, #28]
 8012b42:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012b44:	2300      	movs	r3, #0
 8012b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012b4a:	e002      	b.n	8012b52 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012b4c:	23ff      	movs	r3, #255	; 0xff
 8012b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012b52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3728      	adds	r7, #40	; 0x28
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	08018498 	.word	0x08018498
 8012b64:	08018644 	.word	0x08018644
 8012b68:	08018510 	.word	0x08018510
 8012b6c:	20017ac4 	.word	0x20017ac4
 8012b70:	08018654 	.word	0x08018654
 8012b74:	08018638 	.word	0x08018638
 8012b78:	20017bb4 	.word	0x20017bb4
 8012b7c:	0801867c 	.word	0x0801867c

08012b80 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b08a      	sub	sp, #40	; 0x28
 8012b84:	af02      	add	r7, sp, #8
 8012b86:	60f8      	str	r0, [r7, #12]
 8012b88:	60b9      	str	r1, [r7, #8]
 8012b8a:	607a      	str	r2, [r7, #4]
 8012b8c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d106      	bne.n	8012ba6 <etharp_raw+0x26>
 8012b98:	4b3a      	ldr	r3, [pc, #232]	; (8012c84 <etharp_raw+0x104>)
 8012b9a:	f240 4257 	movw	r2, #1111	; 0x457
 8012b9e:	493a      	ldr	r1, [pc, #232]	; (8012c88 <etharp_raw+0x108>)
 8012ba0:	483a      	ldr	r0, [pc, #232]	; (8012c8c <etharp_raw+0x10c>)
 8012ba2:	f002 f8df 	bl	8014d64 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012ba6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012baa:	211c      	movs	r1, #28
 8012bac:	200e      	movs	r0, #14
 8012bae:	f7f8 fc4d 	bl	800b44c <pbuf_alloc>
 8012bb2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012bb4:	69bb      	ldr	r3, [r7, #24]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d102      	bne.n	8012bc0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012bbe:	e05d      	b.n	8012c7c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012bc0:	69bb      	ldr	r3, [r7, #24]
 8012bc2:	895b      	ldrh	r3, [r3, #10]
 8012bc4:	2b1b      	cmp	r3, #27
 8012bc6:	d806      	bhi.n	8012bd6 <etharp_raw+0x56>
 8012bc8:	4b2e      	ldr	r3, [pc, #184]	; (8012c84 <etharp_raw+0x104>)
 8012bca:	f240 4262 	movw	r2, #1122	; 0x462
 8012bce:	4930      	ldr	r1, [pc, #192]	; (8012c90 <etharp_raw+0x110>)
 8012bd0:	482e      	ldr	r0, [pc, #184]	; (8012c8c <etharp_raw+0x10c>)
 8012bd2:	f002 f8c7 	bl	8014d64 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012bd6:	69bb      	ldr	r3, [r7, #24]
 8012bd8:	685b      	ldr	r3, [r3, #4]
 8012bda:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012bdc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7f7 fb26 	bl	800a230 <lwip_htons>
 8012be4:	4603      	mov	r3, r0
 8012be6:	461a      	mov	r2, r3
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012bf2:	2b06      	cmp	r3, #6
 8012bf4:	d006      	beq.n	8012c04 <etharp_raw+0x84>
 8012bf6:	4b23      	ldr	r3, [pc, #140]	; (8012c84 <etharp_raw+0x104>)
 8012bf8:	f240 4269 	movw	r2, #1129	; 0x469
 8012bfc:	4925      	ldr	r1, [pc, #148]	; (8012c94 <etharp_raw+0x114>)
 8012bfe:	4823      	ldr	r0, [pc, #140]	; (8012c8c <etharp_raw+0x10c>)
 8012c00:	f002 f8b0 	bl	8014d64 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012c04:	697b      	ldr	r3, [r7, #20]
 8012c06:	3308      	adds	r3, #8
 8012c08:	2206      	movs	r2, #6
 8012c0a:	6839      	ldr	r1, [r7, #0]
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f001 ff98 	bl	8014b42 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012c12:	697b      	ldr	r3, [r7, #20]
 8012c14:	3312      	adds	r3, #18
 8012c16:	2206      	movs	r2, #6
 8012c18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f001 ff91 	bl	8014b42 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012c20:	697b      	ldr	r3, [r7, #20]
 8012c22:	330e      	adds	r3, #14
 8012c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c26:	6812      	ldr	r2, [r2, #0]
 8012c28:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012c2a:	697b      	ldr	r3, [r7, #20]
 8012c2c:	3318      	adds	r3, #24
 8012c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c30:	6812      	ldr	r2, [r2, #0]
 8012c32:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012c34:	697b      	ldr	r3, [r7, #20]
 8012c36:	2200      	movs	r2, #0
 8012c38:	701a      	strb	r2, [r3, #0]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	f042 0201 	orr.w	r2, r2, #1
 8012c40:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	2200      	movs	r2, #0
 8012c46:	f042 0208 	orr.w	r2, r2, #8
 8012c4a:	709a      	strb	r2, [r3, #2]
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	2206      	movs	r2, #6
 8012c54:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	2204      	movs	r2, #4
 8012c5a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012c5c:	f640 0306 	movw	r3, #2054	; 0x806
 8012c60:	9300      	str	r3, [sp, #0]
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	68ba      	ldr	r2, [r7, #8]
 8012c66:	69b9      	ldr	r1, [r7, #24]
 8012c68:	68f8      	ldr	r0, [r7, #12]
 8012c6a:	f001 fc0b 	bl	8014484 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012c6e:	69b8      	ldr	r0, [r7, #24]
 8012c70:	f7f8 fed0 	bl	800ba14 <pbuf_free>
  p = NULL;
 8012c74:	2300      	movs	r3, #0
 8012c76:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012c78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	3720      	adds	r7, #32
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd80      	pop	{r7, pc}
 8012c84:	08018498 	.word	0x08018498
 8012c88:	080185e8 	.word	0x080185e8
 8012c8c:	08018510 	.word	0x08018510
 8012c90:	08018698 	.word	0x08018698
 8012c94:	080186cc 	.word	0x080186cc

08012c98 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b088      	sub	sp, #32
 8012c9c:	af04      	add	r7, sp, #16
 8012c9e:	60f8      	str	r0, [r7, #12]
 8012ca0:	60b9      	str	r1, [r7, #8]
 8012ca2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012cb4:	2201      	movs	r2, #1
 8012cb6:	9203      	str	r2, [sp, #12]
 8012cb8:	68ba      	ldr	r2, [r7, #8]
 8012cba:	9202      	str	r2, [sp, #8]
 8012cbc:	4a06      	ldr	r2, [pc, #24]	; (8012cd8 <etharp_request_dst+0x40>)
 8012cbe:	9201      	str	r2, [sp, #4]
 8012cc0:	9300      	str	r3, [sp, #0]
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	687a      	ldr	r2, [r7, #4]
 8012cc6:	68f8      	ldr	r0, [r7, #12]
 8012cc8:	f7ff ff5a 	bl	8012b80 <etharp_raw>
 8012ccc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3710      	adds	r7, #16
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	08018c9c 	.word	0x08018c9c

08012cdc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012ce6:	4a05      	ldr	r2, [pc, #20]	; (8012cfc <etharp_request+0x20>)
 8012ce8:	6839      	ldr	r1, [r7, #0]
 8012cea:	6878      	ldr	r0, [r7, #4]
 8012cec:	f7ff ffd4 	bl	8012c98 <etharp_request_dst>
 8012cf0:	4603      	mov	r3, r0
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	3708      	adds	r7, #8
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}
 8012cfa:	bf00      	nop
 8012cfc:	08018c94 	.word	0x08018c94

08012d00 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b08e      	sub	sp, #56	; 0x38
 8012d04:	af04      	add	r7, sp, #16
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012d0a:	4b79      	ldr	r3, [pc, #484]	; (8012ef0 <icmp_input+0x1f0>)
 8012d0c:	689b      	ldr	r3, [r3, #8]
 8012d0e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	f003 030f 	and.w	r3, r3, #15
 8012d18:	b2db      	uxtb	r3, r3
 8012d1a:	009b      	lsls	r3, r3, #2
 8012d1c:	b2db      	uxtb	r3, r3
 8012d1e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012d20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d22:	2b13      	cmp	r3, #19
 8012d24:	f240 80cd 	bls.w	8012ec2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	895b      	ldrh	r3, [r3, #10]
 8012d2c:	2b03      	cmp	r3, #3
 8012d2e:	f240 80ca 	bls.w	8012ec6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	781b      	ldrb	r3, [r3, #0]
 8012d38:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012d3c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	f000 80b7 	beq.w	8012eb4 <icmp_input+0x1b4>
 8012d46:	2b08      	cmp	r3, #8
 8012d48:	f040 80b7 	bne.w	8012eba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012d4c:	4b69      	ldr	r3, [pc, #420]	; (8012ef4 <icmp_input+0x1f4>)
 8012d4e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012d50:	4b67      	ldr	r3, [pc, #412]	; (8012ef0 <icmp_input+0x1f0>)
 8012d52:	695b      	ldr	r3, [r3, #20]
 8012d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012d58:	2be0      	cmp	r3, #224	; 0xe0
 8012d5a:	f000 80bb 	beq.w	8012ed4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012d5e:	4b64      	ldr	r3, [pc, #400]	; (8012ef0 <icmp_input+0x1f0>)
 8012d60:	695b      	ldr	r3, [r3, #20]
 8012d62:	4a63      	ldr	r2, [pc, #396]	; (8012ef0 <icmp_input+0x1f0>)
 8012d64:	6812      	ldr	r2, [r2, #0]
 8012d66:	4611      	mov	r1, r2
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f000 fbed 	bl	8013548 <ip4_addr_isbroadcast_u32>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	f040 80b1 	bne.w	8012ed8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	891b      	ldrh	r3, [r3, #8]
 8012d7a:	2b07      	cmp	r3, #7
 8012d7c:	f240 80a5 	bls.w	8012eca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012d80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d82:	330e      	adds	r3, #14
 8012d84:	4619      	mov	r1, r3
 8012d86:	6878      	ldr	r0, [r7, #4]
 8012d88:	f7f8 fdae 	bl	800b8e8 <pbuf_add_header>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d04b      	beq.n	8012e2a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	891a      	ldrh	r2, [r3, #8]
 8012d96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d98:	4413      	add	r3, r2
 8012d9a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	891b      	ldrh	r3, [r3, #8]
 8012da0:	8b7a      	ldrh	r2, [r7, #26]
 8012da2:	429a      	cmp	r2, r3
 8012da4:	f0c0 809a 	bcc.w	8012edc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012da8:	8b7b      	ldrh	r3, [r7, #26]
 8012daa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012dae:	4619      	mov	r1, r3
 8012db0:	200e      	movs	r0, #14
 8012db2:	f7f8 fb4b 	bl	800b44c <pbuf_alloc>
 8012db6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012db8:	697b      	ldr	r3, [r7, #20]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	f000 8090 	beq.w	8012ee0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012dc0:	697b      	ldr	r3, [r7, #20]
 8012dc2:	895b      	ldrh	r3, [r3, #10]
 8012dc4:	461a      	mov	r2, r3
 8012dc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012dc8:	3308      	adds	r3, #8
 8012dca:	429a      	cmp	r2, r3
 8012dcc:	d203      	bcs.n	8012dd6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012dce:	6978      	ldr	r0, [r7, #20]
 8012dd0:	f7f8 fe20 	bl	800ba14 <pbuf_free>
          goto icmperr;
 8012dd4:	e085      	b.n	8012ee2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012dd6:	697b      	ldr	r3, [r7, #20]
 8012dd8:	685b      	ldr	r3, [r3, #4]
 8012dda:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012ddc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012dde:	4618      	mov	r0, r3
 8012de0:	f001 feaf 	bl	8014b42 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012de4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012de6:	4619      	mov	r1, r3
 8012de8:	6978      	ldr	r0, [r7, #20]
 8012dea:	f7f8 fd8d 	bl	800b908 <pbuf_remove_header>
 8012dee:	4603      	mov	r3, r0
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d009      	beq.n	8012e08 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012df4:	4b40      	ldr	r3, [pc, #256]	; (8012ef8 <icmp_input+0x1f8>)
 8012df6:	22b6      	movs	r2, #182	; 0xb6
 8012df8:	4940      	ldr	r1, [pc, #256]	; (8012efc <icmp_input+0x1fc>)
 8012dfa:	4841      	ldr	r0, [pc, #260]	; (8012f00 <icmp_input+0x200>)
 8012dfc:	f001 ffb2 	bl	8014d64 <iprintf>
          pbuf_free(r);
 8012e00:	6978      	ldr	r0, [r7, #20]
 8012e02:	f7f8 fe07 	bl	800ba14 <pbuf_free>
          goto icmperr;
 8012e06:	e06c      	b.n	8012ee2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012e08:	6879      	ldr	r1, [r7, #4]
 8012e0a:	6978      	ldr	r0, [r7, #20]
 8012e0c:	f7f8 ff36 	bl	800bc7c <pbuf_copy>
 8012e10:	4603      	mov	r3, r0
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d003      	beq.n	8012e1e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012e16:	6978      	ldr	r0, [r7, #20]
 8012e18:	f7f8 fdfc 	bl	800ba14 <pbuf_free>
          goto icmperr;
 8012e1c:	e061      	b.n	8012ee2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012e1e:	6878      	ldr	r0, [r7, #4]
 8012e20:	f7f8 fdf8 	bl	800ba14 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	607b      	str	r3, [r7, #4]
 8012e28:	e00f      	b.n	8012e4a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012e2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e2c:	330e      	adds	r3, #14
 8012e2e:	4619      	mov	r1, r3
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f7f8 fd69 	bl	800b908 <pbuf_remove_header>
 8012e36:	4603      	mov	r3, r0
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d006      	beq.n	8012e4a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012e3c:	4b2e      	ldr	r3, [pc, #184]	; (8012ef8 <icmp_input+0x1f8>)
 8012e3e:	22c7      	movs	r2, #199	; 0xc7
 8012e40:	4930      	ldr	r1, [pc, #192]	; (8012f04 <icmp_input+0x204>)
 8012e42:	482f      	ldr	r0, [pc, #188]	; (8012f00 <icmp_input+0x200>)
 8012e44:	f001 ff8e 	bl	8014d64 <iprintf>
          goto icmperr;
 8012e48:	e04b      	b.n	8012ee2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	685b      	ldr	r3, [r3, #4]
 8012e4e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012e50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e52:	4619      	mov	r1, r3
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f7f8 fd47 	bl	800b8e8 <pbuf_add_header>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d12b      	bne.n	8012eb8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	685b      	ldr	r3, [r3, #4]
 8012e64:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012e66:	69fb      	ldr	r3, [r7, #28]
 8012e68:	681a      	ldr	r2, [r3, #0]
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012e6e:	4b20      	ldr	r3, [pc, #128]	; (8012ef0 <icmp_input+0x1f0>)
 8012e70:	691a      	ldr	r2, [r3, #16]
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	2200      	movs	r2, #0
 8012e7a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	2200      	movs	r2, #0
 8012e80:	709a      	strb	r2, [r3, #2]
 8012e82:	2200      	movs	r2, #0
 8012e84:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	22ff      	movs	r2, #255	; 0xff
 8012e8a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	2200      	movs	r2, #0
 8012e90:	729a      	strb	r2, [r3, #10]
 8012e92:	2200      	movs	r2, #0
 8012e94:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012e96:	683b      	ldr	r3, [r7, #0]
 8012e98:	9302      	str	r3, [sp, #8]
 8012e9a:	2301      	movs	r3, #1
 8012e9c:	9301      	str	r3, [sp, #4]
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	9300      	str	r3, [sp, #0]
 8012ea2:	23ff      	movs	r3, #255	; 0xff
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	69f9      	ldr	r1, [r7, #28]
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f000 fa75 	bl	8013398 <ip4_output_if>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012eb2:	e001      	b.n	8012eb8 <icmp_input+0x1b8>
      break;
 8012eb4:	bf00      	nop
 8012eb6:	e000      	b.n	8012eba <icmp_input+0x1ba>
      break;
 8012eb8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	f7f8 fdaa 	bl	800ba14 <pbuf_free>
  return;
 8012ec0:	e013      	b.n	8012eea <icmp_input+0x1ea>
    goto lenerr;
 8012ec2:	bf00      	nop
 8012ec4:	e002      	b.n	8012ecc <icmp_input+0x1cc>
    goto lenerr;
 8012ec6:	bf00      	nop
 8012ec8:	e000      	b.n	8012ecc <icmp_input+0x1cc>
        goto lenerr;
 8012eca:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	f7f8 fda1 	bl	800ba14 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012ed2:	e00a      	b.n	8012eea <icmp_input+0x1ea>
        goto icmperr;
 8012ed4:	bf00      	nop
 8012ed6:	e004      	b.n	8012ee2 <icmp_input+0x1e2>
        goto icmperr;
 8012ed8:	bf00      	nop
 8012eda:	e002      	b.n	8012ee2 <icmp_input+0x1e2>
          goto icmperr;
 8012edc:	bf00      	nop
 8012ede:	e000      	b.n	8012ee2 <icmp_input+0x1e2>
          goto icmperr;
 8012ee0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f7f8 fd96 	bl	800ba14 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012ee8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012eea:	3728      	adds	r7, #40	; 0x28
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd80      	pop	{r7, pc}
 8012ef0:	20013950 	.word	0x20013950
 8012ef4:	20013964 	.word	0x20013964
 8012ef8:	08018710 	.word	0x08018710
 8012efc:	08018748 	.word	0x08018748
 8012f00:	08018780 	.word	0x08018780
 8012f04:	080187a8 	.word	0x080187a8

08012f08 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b082      	sub	sp, #8
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
 8012f10:	460b      	mov	r3, r1
 8012f12:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012f14:	78fb      	ldrb	r3, [r7, #3]
 8012f16:	461a      	mov	r2, r3
 8012f18:	2103      	movs	r1, #3
 8012f1a:	6878      	ldr	r0, [r7, #4]
 8012f1c:	f000 f814 	bl	8012f48 <icmp_send_response>
}
 8012f20:	bf00      	nop
 8012f22:	3708      	adds	r7, #8
 8012f24:	46bd      	mov	sp, r7
 8012f26:	bd80      	pop	{r7, pc}

08012f28 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b082      	sub	sp, #8
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
 8012f30:	460b      	mov	r3, r1
 8012f32:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012f34:	78fb      	ldrb	r3, [r7, #3]
 8012f36:	461a      	mov	r2, r3
 8012f38:	210b      	movs	r1, #11
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	f000 f804 	bl	8012f48 <icmp_send_response>
}
 8012f40:	bf00      	nop
 8012f42:	3708      	adds	r7, #8
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b08c      	sub	sp, #48	; 0x30
 8012f4c:	af04      	add	r7, sp, #16
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	460b      	mov	r3, r1
 8012f52:	70fb      	strb	r3, [r7, #3]
 8012f54:	4613      	mov	r3, r2
 8012f56:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012f58:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f5c:	2124      	movs	r1, #36	; 0x24
 8012f5e:	2022      	movs	r0, #34	; 0x22
 8012f60:	f7f8 fa74 	bl	800b44c <pbuf_alloc>
 8012f64:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012f66:	69fb      	ldr	r3, [r7, #28]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d04c      	beq.n	8013006 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012f6c:	69fb      	ldr	r3, [r7, #28]
 8012f6e:	895b      	ldrh	r3, [r3, #10]
 8012f70:	2b23      	cmp	r3, #35	; 0x23
 8012f72:	d806      	bhi.n	8012f82 <icmp_send_response+0x3a>
 8012f74:	4b26      	ldr	r3, [pc, #152]	; (8013010 <icmp_send_response+0xc8>)
 8012f76:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012f7a:	4926      	ldr	r1, [pc, #152]	; (8013014 <icmp_send_response+0xcc>)
 8012f7c:	4826      	ldr	r0, [pc, #152]	; (8013018 <icmp_send_response+0xd0>)
 8012f7e:	f001 fef1 	bl	8014d64 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	685b      	ldr	r3, [r3, #4]
 8012f86:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012f88:	69fb      	ldr	r3, [r7, #28]
 8012f8a:	685b      	ldr	r3, [r3, #4]
 8012f8c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012f8e:	697b      	ldr	r3, [r7, #20]
 8012f90:	78fa      	ldrb	r2, [r7, #3]
 8012f92:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012f94:	697b      	ldr	r3, [r7, #20]
 8012f96:	78ba      	ldrb	r2, [r7, #2]
 8012f98:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012f9a:	697b      	ldr	r3, [r7, #20]
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	711a      	strb	r2, [r3, #4]
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	719a      	strb	r2, [r3, #6]
 8012faa:	2200      	movs	r2, #0
 8012fac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012fae:	69fb      	ldr	r3, [r7, #28]
 8012fb0:	685b      	ldr	r3, [r3, #4]
 8012fb2:	f103 0008 	add.w	r0, r3, #8
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	685b      	ldr	r3, [r3, #4]
 8012fba:	221c      	movs	r2, #28
 8012fbc:	4619      	mov	r1, r3
 8012fbe:	f001 fdc0 	bl	8014b42 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012fc2:	69bb      	ldr	r3, [r7, #24]
 8012fc4:	68db      	ldr	r3, [r3, #12]
 8012fc6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012fc8:	f107 030c 	add.w	r3, r7, #12
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f000 f825 	bl	801301c <ip4_route>
 8012fd2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012fd4:	693b      	ldr	r3, [r7, #16]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d011      	beq.n	8012ffe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012fda:	697b      	ldr	r3, [r7, #20]
 8012fdc:	2200      	movs	r2, #0
 8012fde:	709a      	strb	r2, [r3, #2]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012fe4:	f107 020c 	add.w	r2, r7, #12
 8012fe8:	693b      	ldr	r3, [r7, #16]
 8012fea:	9302      	str	r3, [sp, #8]
 8012fec:	2301      	movs	r3, #1
 8012fee:	9301      	str	r3, [sp, #4]
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	9300      	str	r3, [sp, #0]
 8012ff4:	23ff      	movs	r3, #255	; 0xff
 8012ff6:	2100      	movs	r1, #0
 8012ff8:	69f8      	ldr	r0, [r7, #28]
 8012ffa:	f000 f9cd 	bl	8013398 <ip4_output_if>
  }
  pbuf_free(q);
 8012ffe:	69f8      	ldr	r0, [r7, #28]
 8013000:	f7f8 fd08 	bl	800ba14 <pbuf_free>
 8013004:	e000      	b.n	8013008 <icmp_send_response+0xc0>
    return;
 8013006:	bf00      	nop
}
 8013008:	3720      	adds	r7, #32
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}
 801300e:	bf00      	nop
 8013010:	08018710 	.word	0x08018710
 8013014:	080187dc 	.word	0x080187dc
 8013018:	08018780 	.word	0x08018780

0801301c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801301c:	b480      	push	{r7}
 801301e:	b085      	sub	sp, #20
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013024:	4b33      	ldr	r3, [pc, #204]	; (80130f4 <ip4_route+0xd8>)
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	60fb      	str	r3, [r7, #12]
 801302a:	e036      	b.n	801309a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013032:	f003 0301 	and.w	r3, r3, #1
 8013036:	b2db      	uxtb	r3, r3
 8013038:	2b00      	cmp	r3, #0
 801303a:	d02b      	beq.n	8013094 <ip4_route+0x78>
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013042:	089b      	lsrs	r3, r3, #2
 8013044:	f003 0301 	and.w	r3, r3, #1
 8013048:	b2db      	uxtb	r3, r3
 801304a:	2b00      	cmp	r3, #0
 801304c:	d022      	beq.n	8013094 <ip4_route+0x78>
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	3304      	adds	r3, #4
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d01d      	beq.n	8013094 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681a      	ldr	r2, [r3, #0]
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	3304      	adds	r3, #4
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	405a      	eors	r2, r3
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	3308      	adds	r3, #8
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	4013      	ands	r3, r2
 801306c:	2b00      	cmp	r3, #0
 801306e:	d101      	bne.n	8013074 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	e038      	b.n	80130e6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801307a:	f003 0302 	and.w	r3, r3, #2
 801307e:	2b00      	cmp	r3, #0
 8013080:	d108      	bne.n	8013094 <ip4_route+0x78>
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681a      	ldr	r2, [r3, #0]
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	330c      	adds	r3, #12
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	429a      	cmp	r2, r3
 801308e:	d101      	bne.n	8013094 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	e028      	b.n	80130e6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	60fb      	str	r3, [r7, #12]
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d1c5      	bne.n	801302c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80130a0:	4b15      	ldr	r3, [pc, #84]	; (80130f8 <ip4_route+0xdc>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d01a      	beq.n	80130de <ip4_route+0xc2>
 80130a8:	4b13      	ldr	r3, [pc, #76]	; (80130f8 <ip4_route+0xdc>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80130b0:	f003 0301 	and.w	r3, r3, #1
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d012      	beq.n	80130de <ip4_route+0xc2>
 80130b8:	4b0f      	ldr	r3, [pc, #60]	; (80130f8 <ip4_route+0xdc>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80130c0:	f003 0304 	and.w	r3, r3, #4
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d00a      	beq.n	80130de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80130c8:	4b0b      	ldr	r3, [pc, #44]	; (80130f8 <ip4_route+0xdc>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	3304      	adds	r3, #4
 80130ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d004      	beq.n	80130de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	b2db      	uxtb	r3, r3
 80130da:	2b7f      	cmp	r3, #127	; 0x7f
 80130dc:	d101      	bne.n	80130e2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80130de:	2300      	movs	r3, #0
 80130e0:	e001      	b.n	80130e6 <ip4_route+0xca>
  }

  return netif_default;
 80130e2:	4b05      	ldr	r3, [pc, #20]	; (80130f8 <ip4_route+0xdc>)
 80130e4:	681b      	ldr	r3, [r3, #0]
}
 80130e6:	4618      	mov	r0, r3
 80130e8:	3714      	adds	r7, #20
 80130ea:	46bd      	mov	sp, r7
 80130ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f0:	4770      	bx	lr
 80130f2:	bf00      	nop
 80130f4:	20017a58 	.word	0x20017a58
 80130f8:	20017a5c 	.word	0x20017a5c

080130fc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b082      	sub	sp, #8
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801310a:	f003 0301 	and.w	r3, r3, #1
 801310e:	b2db      	uxtb	r3, r3
 8013110:	2b00      	cmp	r3, #0
 8013112:	d016      	beq.n	8013142 <ip4_input_accept+0x46>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	3304      	adds	r3, #4
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d011      	beq.n	8013142 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801311e:	4b0b      	ldr	r3, [pc, #44]	; (801314c <ip4_input_accept+0x50>)
 8013120:	695a      	ldr	r2, [r3, #20]
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	3304      	adds	r3, #4
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	429a      	cmp	r2, r3
 801312a:	d008      	beq.n	801313e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801312c:	4b07      	ldr	r3, [pc, #28]	; (801314c <ip4_input_accept+0x50>)
 801312e:	695b      	ldr	r3, [r3, #20]
 8013130:	6879      	ldr	r1, [r7, #4]
 8013132:	4618      	mov	r0, r3
 8013134:	f000 fa08 	bl	8013548 <ip4_addr_isbroadcast_u32>
 8013138:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801313a:	2b00      	cmp	r3, #0
 801313c:	d001      	beq.n	8013142 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801313e:	2301      	movs	r3, #1
 8013140:	e000      	b.n	8013144 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013142:	2300      	movs	r3, #0
}
 8013144:	4618      	mov	r0, r3
 8013146:	3708      	adds	r7, #8
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}
 801314c:	20013950 	.word	0x20013950

08013150 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b086      	sub	sp, #24
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	685b      	ldr	r3, [r3, #4]
 801315e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	091b      	lsrs	r3, r3, #4
 8013166:	b2db      	uxtb	r3, r3
 8013168:	2b04      	cmp	r3, #4
 801316a:	d004      	beq.n	8013176 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f7f8 fc51 	bl	800ba14 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013172:	2300      	movs	r3, #0
 8013174:	e107      	b.n	8013386 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013176:	697b      	ldr	r3, [r7, #20]
 8013178:	781b      	ldrb	r3, [r3, #0]
 801317a:	f003 030f 	and.w	r3, r3, #15
 801317e:	b2db      	uxtb	r3, r3
 8013180:	009b      	lsls	r3, r3, #2
 8013182:	b2db      	uxtb	r3, r3
 8013184:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	885b      	ldrh	r3, [r3, #2]
 801318a:	b29b      	uxth	r3, r3
 801318c:	4618      	mov	r0, r3
 801318e:	f7f7 f84f 	bl	800a230 <lwip_htons>
 8013192:	4603      	mov	r3, r0
 8013194:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	891b      	ldrh	r3, [r3, #8]
 801319a:	89ba      	ldrh	r2, [r7, #12]
 801319c:	429a      	cmp	r2, r3
 801319e:	d204      	bcs.n	80131aa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80131a0:	89bb      	ldrh	r3, [r7, #12]
 80131a2:	4619      	mov	r1, r3
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f7f8 faaf 	bl	800b708 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	895b      	ldrh	r3, [r3, #10]
 80131ae:	89fa      	ldrh	r2, [r7, #14]
 80131b0:	429a      	cmp	r2, r3
 80131b2:	d807      	bhi.n	80131c4 <ip4_input+0x74>
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	891b      	ldrh	r3, [r3, #8]
 80131b8:	89ba      	ldrh	r2, [r7, #12]
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d802      	bhi.n	80131c4 <ip4_input+0x74>
 80131be:	89fb      	ldrh	r3, [r7, #14]
 80131c0:	2b13      	cmp	r3, #19
 80131c2:	d804      	bhi.n	80131ce <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80131c4:	6878      	ldr	r0, [r7, #4]
 80131c6:	f7f8 fc25 	bl	800ba14 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80131ca:	2300      	movs	r3, #0
 80131cc:	e0db      	b.n	8013386 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	691b      	ldr	r3, [r3, #16]
 80131d2:	4a6f      	ldr	r2, [pc, #444]	; (8013390 <ip4_input+0x240>)
 80131d4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	68db      	ldr	r3, [r3, #12]
 80131da:	4a6d      	ldr	r2, [pc, #436]	; (8013390 <ip4_input+0x240>)
 80131dc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80131de:	4b6c      	ldr	r3, [pc, #432]	; (8013390 <ip4_input+0x240>)
 80131e0:	695b      	ldr	r3, [r3, #20]
 80131e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80131e6:	2be0      	cmp	r3, #224	; 0xe0
 80131e8:	d112      	bne.n	8013210 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80131ea:	683b      	ldr	r3, [r7, #0]
 80131ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131f0:	f003 0301 	and.w	r3, r3, #1
 80131f4:	b2db      	uxtb	r3, r3
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d007      	beq.n	801320a <ip4_input+0xba>
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	3304      	adds	r3, #4
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d002      	beq.n	801320a <ip4_input+0xba>
      netif = inp;
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	613b      	str	r3, [r7, #16]
 8013208:	e02a      	b.n	8013260 <ip4_input+0x110>
    } else {
      netif = NULL;
 801320a:	2300      	movs	r3, #0
 801320c:	613b      	str	r3, [r7, #16]
 801320e:	e027      	b.n	8013260 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013210:	6838      	ldr	r0, [r7, #0]
 8013212:	f7ff ff73 	bl	80130fc <ip4_input_accept>
 8013216:	4603      	mov	r3, r0
 8013218:	2b00      	cmp	r3, #0
 801321a:	d002      	beq.n	8013222 <ip4_input+0xd2>
      netif = inp;
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	613b      	str	r3, [r7, #16]
 8013220:	e01e      	b.n	8013260 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013222:	2300      	movs	r3, #0
 8013224:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013226:	4b5a      	ldr	r3, [pc, #360]	; (8013390 <ip4_input+0x240>)
 8013228:	695b      	ldr	r3, [r3, #20]
 801322a:	b2db      	uxtb	r3, r3
 801322c:	2b7f      	cmp	r3, #127	; 0x7f
 801322e:	d017      	beq.n	8013260 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013230:	4b58      	ldr	r3, [pc, #352]	; (8013394 <ip4_input+0x244>)
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	613b      	str	r3, [r7, #16]
 8013236:	e00e      	b.n	8013256 <ip4_input+0x106>
          if (netif == inp) {
 8013238:	693a      	ldr	r2, [r7, #16]
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	429a      	cmp	r2, r3
 801323e:	d006      	beq.n	801324e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013240:	6938      	ldr	r0, [r7, #16]
 8013242:	f7ff ff5b 	bl	80130fc <ip4_input_accept>
 8013246:	4603      	mov	r3, r0
 8013248:	2b00      	cmp	r3, #0
 801324a:	d108      	bne.n	801325e <ip4_input+0x10e>
 801324c:	e000      	b.n	8013250 <ip4_input+0x100>
            continue;
 801324e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	613b      	str	r3, [r7, #16]
 8013256:	693b      	ldr	r3, [r7, #16]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d1ed      	bne.n	8013238 <ip4_input+0xe8>
 801325c:	e000      	b.n	8013260 <ip4_input+0x110>
            break;
 801325e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013260:	4b4b      	ldr	r3, [pc, #300]	; (8013390 <ip4_input+0x240>)
 8013262:	691b      	ldr	r3, [r3, #16]
 8013264:	6839      	ldr	r1, [r7, #0]
 8013266:	4618      	mov	r0, r3
 8013268:	f000 f96e 	bl	8013548 <ip4_addr_isbroadcast_u32>
 801326c:	4603      	mov	r3, r0
 801326e:	2b00      	cmp	r3, #0
 8013270:	d105      	bne.n	801327e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013272:	4b47      	ldr	r3, [pc, #284]	; (8013390 <ip4_input+0x240>)
 8013274:	691b      	ldr	r3, [r3, #16]
 8013276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801327a:	2be0      	cmp	r3, #224	; 0xe0
 801327c:	d104      	bne.n	8013288 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801327e:	6878      	ldr	r0, [r7, #4]
 8013280:	f7f8 fbc8 	bl	800ba14 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013284:	2300      	movs	r3, #0
 8013286:	e07e      	b.n	8013386 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013288:	693b      	ldr	r3, [r7, #16]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d104      	bne.n	8013298 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f7f8 fbc0 	bl	800ba14 <pbuf_free>
    return ERR_OK;
 8013294:	2300      	movs	r3, #0
 8013296:	e076      	b.n	8013386 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013298:	697b      	ldr	r3, [r7, #20]
 801329a:	88db      	ldrh	r3, [r3, #6]
 801329c:	b29b      	uxth	r3, r3
 801329e:	461a      	mov	r2, r3
 80132a0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80132a4:	4013      	ands	r3, r2
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d00b      	beq.n	80132c2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f000 fd22 	bl	8013cf4 <ip4_reass>
 80132b0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d101      	bne.n	80132bc <ip4_input+0x16c>
      return ERR_OK;
 80132b8:	2300      	movs	r3, #0
 80132ba:	e064      	b.n	8013386 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	685b      	ldr	r3, [r3, #4]
 80132c0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80132c2:	4a33      	ldr	r2, [pc, #204]	; (8013390 <ip4_input+0x240>)
 80132c4:	693b      	ldr	r3, [r7, #16]
 80132c6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80132c8:	4a31      	ldr	r2, [pc, #196]	; (8013390 <ip4_input+0x240>)
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80132ce:	4a30      	ldr	r2, [pc, #192]	; (8013390 <ip4_input+0x240>)
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80132d4:	697b      	ldr	r3, [r7, #20]
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	f003 030f 	and.w	r3, r3, #15
 80132dc:	b2db      	uxtb	r3, r3
 80132de:	009b      	lsls	r3, r3, #2
 80132e0:	b2db      	uxtb	r3, r3
 80132e2:	b29a      	uxth	r2, r3
 80132e4:	4b2a      	ldr	r3, [pc, #168]	; (8013390 <ip4_input+0x240>)
 80132e6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80132e8:	89fb      	ldrh	r3, [r7, #14]
 80132ea:	4619      	mov	r1, r3
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f7f8 fb0b 	bl	800b908 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80132f2:	697b      	ldr	r3, [r7, #20]
 80132f4:	7a5b      	ldrb	r3, [r3, #9]
 80132f6:	2b11      	cmp	r3, #17
 80132f8:	d006      	beq.n	8013308 <ip4_input+0x1b8>
 80132fa:	2b11      	cmp	r3, #17
 80132fc:	dc13      	bgt.n	8013326 <ip4_input+0x1d6>
 80132fe:	2b01      	cmp	r3, #1
 8013300:	d00c      	beq.n	801331c <ip4_input+0x1cc>
 8013302:	2b06      	cmp	r3, #6
 8013304:	d005      	beq.n	8013312 <ip4_input+0x1c2>
 8013306:	e00e      	b.n	8013326 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013308:	6839      	ldr	r1, [r7, #0]
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f7fe f9b0 	bl	8011670 <udp_input>
        break;
 8013310:	e026      	b.n	8013360 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013312:	6839      	ldr	r1, [r7, #0]
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	f7fa f9c1 	bl	800d69c <tcp_input>
        break;
 801331a:	e021      	b.n	8013360 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801331c:	6839      	ldr	r1, [r7, #0]
 801331e:	6878      	ldr	r0, [r7, #4]
 8013320:	f7ff fcee 	bl	8012d00 <icmp_input>
        break;
 8013324:	e01c      	b.n	8013360 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013326:	4b1a      	ldr	r3, [pc, #104]	; (8013390 <ip4_input+0x240>)
 8013328:	695b      	ldr	r3, [r3, #20]
 801332a:	6939      	ldr	r1, [r7, #16]
 801332c:	4618      	mov	r0, r3
 801332e:	f000 f90b 	bl	8013548 <ip4_addr_isbroadcast_u32>
 8013332:	4603      	mov	r3, r0
 8013334:	2b00      	cmp	r3, #0
 8013336:	d10f      	bne.n	8013358 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013338:	4b15      	ldr	r3, [pc, #84]	; (8013390 <ip4_input+0x240>)
 801333a:	695b      	ldr	r3, [r3, #20]
 801333c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013340:	2be0      	cmp	r3, #224	; 0xe0
 8013342:	d009      	beq.n	8013358 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013344:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013348:	4619      	mov	r1, r3
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f7f8 fb4f 	bl	800b9ee <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013350:	2102      	movs	r1, #2
 8013352:	6878      	ldr	r0, [r7, #4]
 8013354:	f7ff fdd8 	bl	8012f08 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013358:	6878      	ldr	r0, [r7, #4]
 801335a:	f7f8 fb5b 	bl	800ba14 <pbuf_free>
        break;
 801335e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013360:	4b0b      	ldr	r3, [pc, #44]	; (8013390 <ip4_input+0x240>)
 8013362:	2200      	movs	r2, #0
 8013364:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013366:	4b0a      	ldr	r3, [pc, #40]	; (8013390 <ip4_input+0x240>)
 8013368:	2200      	movs	r2, #0
 801336a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801336c:	4b08      	ldr	r3, [pc, #32]	; (8013390 <ip4_input+0x240>)
 801336e:	2200      	movs	r2, #0
 8013370:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013372:	4b07      	ldr	r3, [pc, #28]	; (8013390 <ip4_input+0x240>)
 8013374:	2200      	movs	r2, #0
 8013376:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013378:	4b05      	ldr	r3, [pc, #20]	; (8013390 <ip4_input+0x240>)
 801337a:	2200      	movs	r2, #0
 801337c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801337e:	4b04      	ldr	r3, [pc, #16]	; (8013390 <ip4_input+0x240>)
 8013380:	2200      	movs	r2, #0
 8013382:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013384:	2300      	movs	r3, #0
}
 8013386:	4618      	mov	r0, r3
 8013388:	3718      	adds	r7, #24
 801338a:	46bd      	mov	sp, r7
 801338c:	bd80      	pop	{r7, pc}
 801338e:	bf00      	nop
 8013390:	20013950 	.word	0x20013950
 8013394:	20017a58 	.word	0x20017a58

08013398 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b08a      	sub	sp, #40	; 0x28
 801339c:	af04      	add	r7, sp, #16
 801339e:	60f8      	str	r0, [r7, #12]
 80133a0:	60b9      	str	r1, [r7, #8]
 80133a2:	607a      	str	r2, [r7, #4]
 80133a4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d009      	beq.n	80133c4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d003      	beq.n	80133be <ip4_output_if+0x26>
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d102      	bne.n	80133c4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80133be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c0:	3304      	adds	r3, #4
 80133c2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80133c4:	78fa      	ldrb	r2, [r7, #3]
 80133c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c8:	9302      	str	r3, [sp, #8]
 80133ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80133ce:	9301      	str	r3, [sp, #4]
 80133d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80133d4:	9300      	str	r3, [sp, #0]
 80133d6:	4613      	mov	r3, r2
 80133d8:	687a      	ldr	r2, [r7, #4]
 80133da:	6979      	ldr	r1, [r7, #20]
 80133dc:	68f8      	ldr	r0, [r7, #12]
 80133de:	f000 f805 	bl	80133ec <ip4_output_if_src>
 80133e2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80133e4:	4618      	mov	r0, r3
 80133e6:	3718      	adds	r7, #24
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}

080133ec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b088      	sub	sp, #32
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	60f8      	str	r0, [r7, #12]
 80133f4:	60b9      	str	r1, [r7, #8]
 80133f6:	607a      	str	r2, [r7, #4]
 80133f8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	7b9b      	ldrb	r3, [r3, #14]
 80133fe:	2b01      	cmp	r3, #1
 8013400:	d006      	beq.n	8013410 <ip4_output_if_src+0x24>
 8013402:	4b4b      	ldr	r3, [pc, #300]	; (8013530 <ip4_output_if_src+0x144>)
 8013404:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013408:	494a      	ldr	r1, [pc, #296]	; (8013534 <ip4_output_if_src+0x148>)
 801340a:	484b      	ldr	r0, [pc, #300]	; (8013538 <ip4_output_if_src+0x14c>)
 801340c:	f001 fcaa 	bl	8014d64 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d060      	beq.n	80134d8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013416:	2314      	movs	r3, #20
 8013418:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801341a:	2114      	movs	r1, #20
 801341c:	68f8      	ldr	r0, [r7, #12]
 801341e:	f7f8 fa63 	bl	800b8e8 <pbuf_add_header>
 8013422:	4603      	mov	r3, r0
 8013424:	2b00      	cmp	r3, #0
 8013426:	d002      	beq.n	801342e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013428:	f06f 0301 	mvn.w	r3, #1
 801342c:	e07c      	b.n	8013528 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	685b      	ldr	r3, [r3, #4]
 8013432:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	895b      	ldrh	r3, [r3, #10]
 8013438:	2b13      	cmp	r3, #19
 801343a:	d806      	bhi.n	801344a <ip4_output_if_src+0x5e>
 801343c:	4b3c      	ldr	r3, [pc, #240]	; (8013530 <ip4_output_if_src+0x144>)
 801343e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013442:	493e      	ldr	r1, [pc, #248]	; (801353c <ip4_output_if_src+0x150>)
 8013444:	483c      	ldr	r0, [pc, #240]	; (8013538 <ip4_output_if_src+0x14c>)
 8013446:	f001 fc8d 	bl	8014d64 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801344a:	69fb      	ldr	r3, [r7, #28]
 801344c:	78fa      	ldrb	r2, [r7, #3]
 801344e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013450:	69fb      	ldr	r3, [r7, #28]
 8013452:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013456:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	681a      	ldr	r2, [r3, #0]
 801345c:	69fb      	ldr	r3, [r7, #28]
 801345e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013460:	8b7b      	ldrh	r3, [r7, #26]
 8013462:	089b      	lsrs	r3, r3, #2
 8013464:	b29b      	uxth	r3, r3
 8013466:	b2db      	uxtb	r3, r3
 8013468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801346c:	b2da      	uxtb	r2, r3
 801346e:	69fb      	ldr	r3, [r7, #28]
 8013470:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013472:	69fb      	ldr	r3, [r7, #28]
 8013474:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013478:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	891b      	ldrh	r3, [r3, #8]
 801347e:	4618      	mov	r0, r3
 8013480:	f7f6 fed6 	bl	800a230 <lwip_htons>
 8013484:	4603      	mov	r3, r0
 8013486:	461a      	mov	r2, r3
 8013488:	69fb      	ldr	r3, [r7, #28]
 801348a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801348c:	69fb      	ldr	r3, [r7, #28]
 801348e:	2200      	movs	r2, #0
 8013490:	719a      	strb	r2, [r3, #6]
 8013492:	2200      	movs	r2, #0
 8013494:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013496:	4b2a      	ldr	r3, [pc, #168]	; (8013540 <ip4_output_if_src+0x154>)
 8013498:	881b      	ldrh	r3, [r3, #0]
 801349a:	4618      	mov	r0, r3
 801349c:	f7f6 fec8 	bl	800a230 <lwip_htons>
 80134a0:	4603      	mov	r3, r0
 80134a2:	461a      	mov	r2, r3
 80134a4:	69fb      	ldr	r3, [r7, #28]
 80134a6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80134a8:	4b25      	ldr	r3, [pc, #148]	; (8013540 <ip4_output_if_src+0x154>)
 80134aa:	881b      	ldrh	r3, [r3, #0]
 80134ac:	3301      	adds	r3, #1
 80134ae:	b29a      	uxth	r2, r3
 80134b0:	4b23      	ldr	r3, [pc, #140]	; (8013540 <ip4_output_if_src+0x154>)
 80134b2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d104      	bne.n	80134c4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80134ba:	4b22      	ldr	r3, [pc, #136]	; (8013544 <ip4_output_if_src+0x158>)
 80134bc:	681a      	ldr	r2, [r3, #0]
 80134be:	69fb      	ldr	r3, [r7, #28]
 80134c0:	60da      	str	r2, [r3, #12]
 80134c2:	e003      	b.n	80134cc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80134c4:	68bb      	ldr	r3, [r7, #8]
 80134c6:	681a      	ldr	r2, [r3, #0]
 80134c8:	69fb      	ldr	r3, [r7, #28]
 80134ca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80134cc:	69fb      	ldr	r3, [r7, #28]
 80134ce:	2200      	movs	r2, #0
 80134d0:	729a      	strb	r2, [r3, #10]
 80134d2:	2200      	movs	r2, #0
 80134d4:	72da      	strb	r2, [r3, #11]
 80134d6:	e00f      	b.n	80134f8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	895b      	ldrh	r3, [r3, #10]
 80134dc:	2b13      	cmp	r3, #19
 80134de:	d802      	bhi.n	80134e6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80134e0:	f06f 0301 	mvn.w	r3, #1
 80134e4:	e020      	b.n	8013528 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	685b      	ldr	r3, [r3, #4]
 80134ea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80134ec:	69fb      	ldr	r3, [r7, #28]
 80134ee:	691b      	ldr	r3, [r3, #16]
 80134f0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80134f2:	f107 0314 	add.w	r3, r7, #20
 80134f6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80134f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d00c      	beq.n	801351a <ip4_output_if_src+0x12e>
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	891a      	ldrh	r2, [r3, #8]
 8013504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013506:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013508:	429a      	cmp	r2, r3
 801350a:	d906      	bls.n	801351a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801350c:	687a      	ldr	r2, [r7, #4]
 801350e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013510:	68f8      	ldr	r0, [r7, #12]
 8013512:	f000 fde3 	bl	80140dc <ip4_frag>
 8013516:	4603      	mov	r3, r0
 8013518:	e006      	b.n	8013528 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801351c:	695b      	ldr	r3, [r3, #20]
 801351e:	687a      	ldr	r2, [r7, #4]
 8013520:	68f9      	ldr	r1, [r7, #12]
 8013522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013524:	4798      	blx	r3
 8013526:	4603      	mov	r3, r0
}
 8013528:	4618      	mov	r0, r3
 801352a:	3720      	adds	r7, #32
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}
 8013530:	08018808 	.word	0x08018808
 8013534:	0801883c 	.word	0x0801883c
 8013538:	08018848 	.word	0x08018848
 801353c:	08018870 	.word	0x08018870
 8013540:	20017bb6 	.word	0x20017bb6
 8013544:	08018c90 	.word	0x08018c90

08013548 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013548:	b480      	push	{r7}
 801354a:	b085      	sub	sp, #20
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
 8013550:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801355c:	d002      	beq.n	8013564 <ip4_addr_isbroadcast_u32+0x1c>
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d101      	bne.n	8013568 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013564:	2301      	movs	r3, #1
 8013566:	e02a      	b.n	80135be <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801356e:	f003 0302 	and.w	r3, r3, #2
 8013572:	2b00      	cmp	r3, #0
 8013574:	d101      	bne.n	801357a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013576:	2300      	movs	r3, #0
 8013578:	e021      	b.n	80135be <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	3304      	adds	r3, #4
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	687a      	ldr	r2, [r7, #4]
 8013582:	429a      	cmp	r2, r3
 8013584:	d101      	bne.n	801358a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013586:	2300      	movs	r3, #0
 8013588:	e019      	b.n	80135be <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801358a:	68fa      	ldr	r2, [r7, #12]
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	3304      	adds	r3, #4
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	405a      	eors	r2, r3
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	3308      	adds	r3, #8
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	4013      	ands	r3, r2
 801359c:	2b00      	cmp	r3, #0
 801359e:	d10d      	bne.n	80135bc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	3308      	adds	r3, #8
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	43da      	mvns	r2, r3
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	3308      	adds	r3, #8
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80135b4:	429a      	cmp	r2, r3
 80135b6:	d101      	bne.n	80135bc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80135b8:	2301      	movs	r3, #1
 80135ba:	e000      	b.n	80135be <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80135bc:	2300      	movs	r3, #0
  }
}
 80135be:	4618      	mov	r0, r3
 80135c0:	3714      	adds	r7, #20
 80135c2:	46bd      	mov	sp, r7
 80135c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c8:	4770      	bx	lr
	...

080135cc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b082      	sub	sp, #8
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80135d4:	2210      	movs	r2, #16
 80135d6:	4904      	ldr	r1, [pc, #16]	; (80135e8 <ip4addr_ntoa+0x1c>)
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f000 f807 	bl	80135ec <ip4addr_ntoa_r>
 80135de:	4603      	mov	r3, r0
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	3708      	adds	r7, #8
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}
 80135e8:	20017bb8 	.word	0x20017bb8

080135ec <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80135ec:	b480      	push	{r7}
 80135ee:	b08d      	sub	sp, #52	; 0x34
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	60f8      	str	r0, [r7, #12]
 80135f4:	60b9      	str	r1, [r7, #8]
 80135f6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80135f8:	2300      	movs	r3, #0
 80135fa:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8013602:	68bb      	ldr	r3, [r7, #8]
 8013604:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8013606:	f107 0318 	add.w	r3, r7, #24
 801360a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801360c:	2300      	movs	r3, #0
 801360e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013612:	e058      	b.n	80136c6 <ip4addr_ntoa_r+0xda>
    i = 0;
 8013614:	2300      	movs	r3, #0
 8013616:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801361c:	781a      	ldrb	r2, [r3, #0]
 801361e:	4b32      	ldr	r3, [pc, #200]	; (80136e8 <ip4addr_ntoa_r+0xfc>)
 8013620:	fba3 1302 	umull	r1, r3, r3, r2
 8013624:	08d9      	lsrs	r1, r3, #3
 8013626:	460b      	mov	r3, r1
 8013628:	009b      	lsls	r3, r3, #2
 801362a:	440b      	add	r3, r1
 801362c:	005b      	lsls	r3, r3, #1
 801362e:	1ad3      	subs	r3, r2, r3
 8013630:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8013632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013634:	781b      	ldrb	r3, [r3, #0]
 8013636:	4a2c      	ldr	r2, [pc, #176]	; (80136e8 <ip4addr_ntoa_r+0xfc>)
 8013638:	fba2 2303 	umull	r2, r3, r2, r3
 801363c:	08db      	lsrs	r3, r3, #3
 801363e:	b2da      	uxtb	r2, r3
 8013640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013642:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8013644:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013648:	1c5a      	adds	r2, r3, #1
 801364a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801364e:	4619      	mov	r1, r3
 8013650:	7ffb      	ldrb	r3, [r7, #31]
 8013652:	3330      	adds	r3, #48	; 0x30
 8013654:	b2da      	uxtb	r2, r3
 8013656:	f101 0330 	add.w	r3, r1, #48	; 0x30
 801365a:	443b      	add	r3, r7
 801365c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8013660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d1d8      	bne.n	801361a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8013668:	e011      	b.n	801368e <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801366a:	6a3b      	ldr	r3, [r7, #32]
 801366c:	1c5a      	adds	r2, r3, #1
 801366e:	623a      	str	r2, [r7, #32]
 8013670:	687a      	ldr	r2, [r7, #4]
 8013672:	429a      	cmp	r2, r3
 8013674:	dc01      	bgt.n	801367a <ip4addr_ntoa_r+0x8e>
        return NULL;
 8013676:	2300      	movs	r3, #0
 8013678:	e030      	b.n	80136dc <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801367a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013680:	1c59      	adds	r1, r3, #1
 8013682:	62f9      	str	r1, [r7, #44]	; 0x2c
 8013684:	3230      	adds	r2, #48	; 0x30
 8013686:	443a      	add	r2, r7
 8013688:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801368c:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801368e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013692:	1e5a      	subs	r2, r3, #1
 8013694:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8013698:	2b00      	cmp	r3, #0
 801369a:	d1e6      	bne.n	801366a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801369c:	6a3b      	ldr	r3, [r7, #32]
 801369e:	1c5a      	adds	r2, r3, #1
 80136a0:	623a      	str	r2, [r7, #32]
 80136a2:	687a      	ldr	r2, [r7, #4]
 80136a4:	429a      	cmp	r2, r3
 80136a6:	dc01      	bgt.n	80136ac <ip4addr_ntoa_r+0xc0>
      return NULL;
 80136a8:	2300      	movs	r3, #0
 80136aa:	e017      	b.n	80136dc <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80136ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ae:	1c5a      	adds	r2, r3, #1
 80136b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80136b2:	222e      	movs	r2, #46	; 0x2e
 80136b4:	701a      	strb	r2, [r3, #0]
    ap++;
 80136b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b8:	3301      	adds	r3, #1
 80136ba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80136bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136c0:	3301      	adds	r3, #1
 80136c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80136c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136ca:	2b03      	cmp	r3, #3
 80136cc:	d9a2      	bls.n	8013614 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80136ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d0:	3b01      	subs	r3, #1
 80136d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d6:	2200      	movs	r2, #0
 80136d8:	701a      	strb	r2, [r3, #0]
  return buf;
 80136da:	68bb      	ldr	r3, [r7, #8]
}
 80136dc:	4618      	mov	r0, r3
 80136de:	3734      	adds	r7, #52	; 0x34
 80136e0:	46bd      	mov	sp, r7
 80136e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e6:	4770      	bx	lr
 80136e8:	cccccccd 	.word	0xcccccccd

080136ec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b084      	sub	sp, #16
 80136f0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80136f2:	2300      	movs	r3, #0
 80136f4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80136f6:	4b12      	ldr	r3, [pc, #72]	; (8013740 <ip_reass_tmr+0x54>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80136fc:	e018      	b.n	8013730 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	7fdb      	ldrb	r3, [r3, #31]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d00b      	beq.n	801371e <ip_reass_tmr+0x32>
      r->timer--;
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	7fdb      	ldrb	r3, [r3, #31]
 801370a:	3b01      	subs	r3, #1
 801370c:	b2da      	uxtb	r2, r3
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	60fb      	str	r3, [r7, #12]
 801371c:	e008      	b.n	8013730 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013728:	68b9      	ldr	r1, [r7, #8]
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f000 f80a 	bl	8013744 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d1e3      	bne.n	80136fe <ip_reass_tmr+0x12>
    }
  }
}
 8013736:	bf00      	nop
 8013738:	bf00      	nop
 801373a:	3710      	adds	r7, #16
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}
 8013740:	20017bc8 	.word	0x20017bc8

08013744 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b088      	sub	sp, #32
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
 801374c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801374e:	2300      	movs	r3, #0
 8013750:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013752:	683a      	ldr	r2, [r7, #0]
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	429a      	cmp	r2, r3
 8013758:	d105      	bne.n	8013766 <ip_reass_free_complete_datagram+0x22>
 801375a:	4b45      	ldr	r3, [pc, #276]	; (8013870 <ip_reass_free_complete_datagram+0x12c>)
 801375c:	22ab      	movs	r2, #171	; 0xab
 801375e:	4945      	ldr	r1, [pc, #276]	; (8013874 <ip_reass_free_complete_datagram+0x130>)
 8013760:	4845      	ldr	r0, [pc, #276]	; (8013878 <ip_reass_free_complete_datagram+0x134>)
 8013762:	f001 faff 	bl	8014d64 <iprintf>
  if (prev != NULL) {
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d00a      	beq.n	8013782 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	687a      	ldr	r2, [r7, #4]
 8013772:	429a      	cmp	r2, r3
 8013774:	d005      	beq.n	8013782 <ip_reass_free_complete_datagram+0x3e>
 8013776:	4b3e      	ldr	r3, [pc, #248]	; (8013870 <ip_reass_free_complete_datagram+0x12c>)
 8013778:	22ad      	movs	r2, #173	; 0xad
 801377a:	4940      	ldr	r1, [pc, #256]	; (801387c <ip_reass_free_complete_datagram+0x138>)
 801377c:	483e      	ldr	r0, [pc, #248]	; (8013878 <ip_reass_free_complete_datagram+0x134>)
 801377e:	f001 faf1 	bl	8014d64 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	685b      	ldr	r3, [r3, #4]
 8013786:	685b      	ldr	r3, [r3, #4]
 8013788:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801378a:	697b      	ldr	r3, [r7, #20]
 801378c:	889b      	ldrh	r3, [r3, #4]
 801378e:	b29b      	uxth	r3, r3
 8013790:	2b00      	cmp	r3, #0
 8013792:	d12a      	bne.n	80137ea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	685b      	ldr	r3, [r3, #4]
 8013798:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	681a      	ldr	r2, [r3, #0]
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80137a2:	69bb      	ldr	r3, [r7, #24]
 80137a4:	6858      	ldr	r0, [r3, #4]
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	3308      	adds	r3, #8
 80137aa:	2214      	movs	r2, #20
 80137ac:	4619      	mov	r1, r3
 80137ae:	f001 f9c8 	bl	8014b42 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80137b2:	2101      	movs	r1, #1
 80137b4:	69b8      	ldr	r0, [r7, #24]
 80137b6:	f7ff fbb7 	bl	8012f28 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80137ba:	69b8      	ldr	r0, [r7, #24]
 80137bc:	f7f8 f9b8 	bl	800bb30 <pbuf_clen>
 80137c0:	4603      	mov	r3, r0
 80137c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80137c4:	8bfa      	ldrh	r2, [r7, #30]
 80137c6:	8a7b      	ldrh	r3, [r7, #18]
 80137c8:	4413      	add	r3, r2
 80137ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80137ce:	db05      	blt.n	80137dc <ip_reass_free_complete_datagram+0x98>
 80137d0:	4b27      	ldr	r3, [pc, #156]	; (8013870 <ip_reass_free_complete_datagram+0x12c>)
 80137d2:	22bc      	movs	r2, #188	; 0xbc
 80137d4:	492a      	ldr	r1, [pc, #168]	; (8013880 <ip_reass_free_complete_datagram+0x13c>)
 80137d6:	4828      	ldr	r0, [pc, #160]	; (8013878 <ip_reass_free_complete_datagram+0x134>)
 80137d8:	f001 fac4 	bl	8014d64 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80137dc:	8bfa      	ldrh	r2, [r7, #30]
 80137de:	8a7b      	ldrh	r3, [r7, #18]
 80137e0:	4413      	add	r3, r2
 80137e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80137e4:	69b8      	ldr	r0, [r7, #24]
 80137e6:	f7f8 f915 	bl	800ba14 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	685b      	ldr	r3, [r3, #4]
 80137ee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80137f0:	e01f      	b.n	8013832 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80137f2:	69bb      	ldr	r3, [r7, #24]
 80137f4:	685b      	ldr	r3, [r3, #4]
 80137f6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80137f8:	69bb      	ldr	r3, [r7, #24]
 80137fa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013802:	68f8      	ldr	r0, [r7, #12]
 8013804:	f7f8 f994 	bl	800bb30 <pbuf_clen>
 8013808:	4603      	mov	r3, r0
 801380a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801380c:	8bfa      	ldrh	r2, [r7, #30]
 801380e:	8a7b      	ldrh	r3, [r7, #18]
 8013810:	4413      	add	r3, r2
 8013812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013816:	db05      	blt.n	8013824 <ip_reass_free_complete_datagram+0xe0>
 8013818:	4b15      	ldr	r3, [pc, #84]	; (8013870 <ip_reass_free_complete_datagram+0x12c>)
 801381a:	22cc      	movs	r2, #204	; 0xcc
 801381c:	4918      	ldr	r1, [pc, #96]	; (8013880 <ip_reass_free_complete_datagram+0x13c>)
 801381e:	4816      	ldr	r0, [pc, #88]	; (8013878 <ip_reass_free_complete_datagram+0x134>)
 8013820:	f001 faa0 	bl	8014d64 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013824:	8bfa      	ldrh	r2, [r7, #30]
 8013826:	8a7b      	ldrh	r3, [r7, #18]
 8013828:	4413      	add	r3, r2
 801382a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801382c:	68f8      	ldr	r0, [r7, #12]
 801382e:	f7f8 f8f1 	bl	800ba14 <pbuf_free>
  while (p != NULL) {
 8013832:	69bb      	ldr	r3, [r7, #24]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d1dc      	bne.n	80137f2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013838:	6839      	ldr	r1, [r7, #0]
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f000 f8c2 	bl	80139c4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013840:	4b10      	ldr	r3, [pc, #64]	; (8013884 <ip_reass_free_complete_datagram+0x140>)
 8013842:	881b      	ldrh	r3, [r3, #0]
 8013844:	8bfa      	ldrh	r2, [r7, #30]
 8013846:	429a      	cmp	r2, r3
 8013848:	d905      	bls.n	8013856 <ip_reass_free_complete_datagram+0x112>
 801384a:	4b09      	ldr	r3, [pc, #36]	; (8013870 <ip_reass_free_complete_datagram+0x12c>)
 801384c:	22d2      	movs	r2, #210	; 0xd2
 801384e:	490e      	ldr	r1, [pc, #56]	; (8013888 <ip_reass_free_complete_datagram+0x144>)
 8013850:	4809      	ldr	r0, [pc, #36]	; (8013878 <ip_reass_free_complete_datagram+0x134>)
 8013852:	f001 fa87 	bl	8014d64 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013856:	4b0b      	ldr	r3, [pc, #44]	; (8013884 <ip_reass_free_complete_datagram+0x140>)
 8013858:	881a      	ldrh	r2, [r3, #0]
 801385a:	8bfb      	ldrh	r3, [r7, #30]
 801385c:	1ad3      	subs	r3, r2, r3
 801385e:	b29a      	uxth	r2, r3
 8013860:	4b08      	ldr	r3, [pc, #32]	; (8013884 <ip_reass_free_complete_datagram+0x140>)
 8013862:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013864:	8bfb      	ldrh	r3, [r7, #30]
}
 8013866:	4618      	mov	r0, r3
 8013868:	3720      	adds	r7, #32
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}
 801386e:	bf00      	nop
 8013870:	080188a0 	.word	0x080188a0
 8013874:	080188dc 	.word	0x080188dc
 8013878:	080188e8 	.word	0x080188e8
 801387c:	08018910 	.word	0x08018910
 8013880:	08018924 	.word	0x08018924
 8013884:	20017bcc 	.word	0x20017bcc
 8013888:	08018944 	.word	0x08018944

0801388c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b08a      	sub	sp, #40	; 0x28
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
 8013894:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013896:	2300      	movs	r3, #0
 8013898:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801389a:	2300      	movs	r3, #0
 801389c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801389e:	2300      	movs	r3, #0
 80138a0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80138a2:	2300      	movs	r3, #0
 80138a4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80138a6:	2300      	movs	r3, #0
 80138a8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80138aa:	4b28      	ldr	r3, [pc, #160]	; (801394c <ip_reass_remove_oldest_datagram+0xc0>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80138b0:	e030      	b.n	8013914 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80138b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b4:	695a      	ldr	r2, [r3, #20]
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	68db      	ldr	r3, [r3, #12]
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d10c      	bne.n	80138d8 <ip_reass_remove_oldest_datagram+0x4c>
 80138be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138c0:	699a      	ldr	r2, [r3, #24]
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	691b      	ldr	r3, [r3, #16]
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d106      	bne.n	80138d8 <ip_reass_remove_oldest_datagram+0x4c>
 80138ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138cc:	899a      	ldrh	r2, [r3, #12]
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	889b      	ldrh	r3, [r3, #4]
 80138d2:	b29b      	uxth	r3, r3
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d014      	beq.n	8013902 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80138d8:	693b      	ldr	r3, [r7, #16]
 80138da:	3301      	adds	r3, #1
 80138dc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80138de:	6a3b      	ldr	r3, [r7, #32]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d104      	bne.n	80138ee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80138e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80138e8:	69fb      	ldr	r3, [r7, #28]
 80138ea:	61bb      	str	r3, [r7, #24]
 80138ec:	e009      	b.n	8013902 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80138ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f0:	7fda      	ldrb	r2, [r3, #31]
 80138f2:	6a3b      	ldr	r3, [r7, #32]
 80138f4:	7fdb      	ldrb	r3, [r3, #31]
 80138f6:	429a      	cmp	r2, r3
 80138f8:	d803      	bhi.n	8013902 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80138fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138fc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80138fe:	69fb      	ldr	r3, [r7, #28]
 8013900:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d001      	beq.n	801390e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801390c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013916:	2b00      	cmp	r3, #0
 8013918:	d1cb      	bne.n	80138b2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801391a:	6a3b      	ldr	r3, [r7, #32]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d008      	beq.n	8013932 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013920:	69b9      	ldr	r1, [r7, #24]
 8013922:	6a38      	ldr	r0, [r7, #32]
 8013924:	f7ff ff0e 	bl	8013744 <ip_reass_free_complete_datagram>
 8013928:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801392a:	697a      	ldr	r2, [r7, #20]
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	4413      	add	r3, r2
 8013930:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013932:	697a      	ldr	r2, [r7, #20]
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	429a      	cmp	r2, r3
 8013938:	da02      	bge.n	8013940 <ip_reass_remove_oldest_datagram+0xb4>
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	2b01      	cmp	r3, #1
 801393e:	dcac      	bgt.n	801389a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013940:	697b      	ldr	r3, [r7, #20]
}
 8013942:	4618      	mov	r0, r3
 8013944:	3728      	adds	r7, #40	; 0x28
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}
 801394a:	bf00      	nop
 801394c:	20017bc8 	.word	0x20017bc8

08013950 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b084      	sub	sp, #16
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
 8013958:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801395a:	2004      	movs	r0, #4
 801395c:	f7f7 f940 	bl	800abe0 <memp_malloc>
 8013960:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d110      	bne.n	801398a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013968:	6839      	ldr	r1, [r7, #0]
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f7ff ff8e 	bl	801388c <ip_reass_remove_oldest_datagram>
 8013970:	4602      	mov	r2, r0
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	4293      	cmp	r3, r2
 8013976:	dc03      	bgt.n	8013980 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013978:	2004      	movs	r0, #4
 801397a:	f7f7 f931 	bl	800abe0 <memp_malloc>
 801397e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d101      	bne.n	801398a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013986:	2300      	movs	r3, #0
 8013988:	e016      	b.n	80139b8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801398a:	2220      	movs	r2, #32
 801398c:	2100      	movs	r1, #0
 801398e:	68f8      	ldr	r0, [r7, #12]
 8013990:	f001 f8ff 	bl	8014b92 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	220f      	movs	r2, #15
 8013998:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801399a:	4b09      	ldr	r3, [pc, #36]	; (80139c0 <ip_reass_enqueue_new_datagram+0x70>)
 801399c:	681a      	ldr	r2, [r3, #0]
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80139a2:	4a07      	ldr	r2, [pc, #28]	; (80139c0 <ip_reass_enqueue_new_datagram+0x70>)
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	3308      	adds	r3, #8
 80139ac:	2214      	movs	r2, #20
 80139ae:	6879      	ldr	r1, [r7, #4]
 80139b0:	4618      	mov	r0, r3
 80139b2:	f001 f8c6 	bl	8014b42 <memcpy>
  return ipr;
 80139b6:	68fb      	ldr	r3, [r7, #12]
}
 80139b8:	4618      	mov	r0, r3
 80139ba:	3710      	adds	r7, #16
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}
 80139c0:	20017bc8 	.word	0x20017bc8

080139c4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b082      	sub	sp, #8
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
 80139cc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80139ce:	4b10      	ldr	r3, [pc, #64]	; (8013a10 <ip_reass_dequeue_datagram+0x4c>)
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	687a      	ldr	r2, [r7, #4]
 80139d4:	429a      	cmp	r2, r3
 80139d6:	d104      	bne.n	80139e2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	4a0c      	ldr	r2, [pc, #48]	; (8013a10 <ip_reass_dequeue_datagram+0x4c>)
 80139de:	6013      	str	r3, [r2, #0]
 80139e0:	e00d      	b.n	80139fe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d106      	bne.n	80139f6 <ip_reass_dequeue_datagram+0x32>
 80139e8:	4b0a      	ldr	r3, [pc, #40]	; (8013a14 <ip_reass_dequeue_datagram+0x50>)
 80139ea:	f240 1245 	movw	r2, #325	; 0x145
 80139ee:	490a      	ldr	r1, [pc, #40]	; (8013a18 <ip_reass_dequeue_datagram+0x54>)
 80139f0:	480a      	ldr	r0, [pc, #40]	; (8013a1c <ip_reass_dequeue_datagram+0x58>)
 80139f2:	f001 f9b7 	bl	8014d64 <iprintf>
    prev->next = ipr->next;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681a      	ldr	r2, [r3, #0]
 80139fa:	683b      	ldr	r3, [r7, #0]
 80139fc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80139fe:	6879      	ldr	r1, [r7, #4]
 8013a00:	2004      	movs	r0, #4
 8013a02:	f7f7 f963 	bl	800accc <memp_free>
}
 8013a06:	bf00      	nop
 8013a08:	3708      	adds	r7, #8
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	bd80      	pop	{r7, pc}
 8013a0e:	bf00      	nop
 8013a10:	20017bc8 	.word	0x20017bc8
 8013a14:	080188a0 	.word	0x080188a0
 8013a18:	08018968 	.word	0x08018968
 8013a1c:	080188e8 	.word	0x080188e8

08013a20 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b08c      	sub	sp, #48	; 0x30
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	60f8      	str	r0, [r7, #12]
 8013a28:	60b9      	str	r1, [r7, #8]
 8013a2a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013a30:	2301      	movs	r3, #1
 8013a32:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	685b      	ldr	r3, [r3, #4]
 8013a38:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013a3a:	69fb      	ldr	r3, [r7, #28]
 8013a3c:	885b      	ldrh	r3, [r3, #2]
 8013a3e:	b29b      	uxth	r3, r3
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7f6 fbf5 	bl	800a230 <lwip_htons>
 8013a46:	4603      	mov	r3, r0
 8013a48:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013a4a:	69fb      	ldr	r3, [r7, #28]
 8013a4c:	781b      	ldrb	r3, [r3, #0]
 8013a4e:	f003 030f 	and.w	r3, r3, #15
 8013a52:	b2db      	uxtb	r3, r3
 8013a54:	009b      	lsls	r3, r3, #2
 8013a56:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013a58:	7e7b      	ldrb	r3, [r7, #25]
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	8b7a      	ldrh	r2, [r7, #26]
 8013a5e:	429a      	cmp	r2, r3
 8013a60:	d202      	bcs.n	8013a68 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013a66:	e135      	b.n	8013cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013a68:	7e7b      	ldrb	r3, [r7, #25]
 8013a6a:	b29b      	uxth	r3, r3
 8013a6c:	8b7a      	ldrh	r2, [r7, #26]
 8013a6e:	1ad3      	subs	r3, r2, r3
 8013a70:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013a72:	69fb      	ldr	r3, [r7, #28]
 8013a74:	88db      	ldrh	r3, [r3, #6]
 8013a76:	b29b      	uxth	r3, r3
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7f6 fbd9 	bl	800a230 <lwip_htons>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a84:	b29b      	uxth	r3, r3
 8013a86:	00db      	lsls	r3, r3, #3
 8013a88:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a92:	2200      	movs	r2, #0
 8013a94:	701a      	strb	r2, [r3, #0]
 8013a96:	2200      	movs	r2, #0
 8013a98:	705a      	strb	r2, [r3, #1]
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	709a      	strb	r2, [r3, #2]
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aa4:	8afa      	ldrh	r2, [r7, #22]
 8013aa6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013aa8:	8afa      	ldrh	r2, [r7, #22]
 8013aaa:	8b7b      	ldrh	r3, [r7, #26]
 8013aac:	4413      	add	r3, r2
 8013aae:	b29a      	uxth	r2, r3
 8013ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab6:	88db      	ldrh	r3, [r3, #6]
 8013ab8:	b29b      	uxth	r3, r3
 8013aba:	8afa      	ldrh	r2, [r7, #22]
 8013abc:	429a      	cmp	r2, r3
 8013abe:	d902      	bls.n	8013ac6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ac4:	e106      	b.n	8013cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	685b      	ldr	r3, [r3, #4]
 8013aca:	627b      	str	r3, [r7, #36]	; 0x24
 8013acc:	e068      	b.n	8013ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad0:	685b      	ldr	r3, [r3, #4]
 8013ad2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad6:	889b      	ldrh	r3, [r3, #4]
 8013ad8:	b29a      	uxth	r2, r3
 8013ada:	693b      	ldr	r3, [r7, #16]
 8013adc:	889b      	ldrh	r3, [r3, #4]
 8013ade:	b29b      	uxth	r3, r3
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	d235      	bcs.n	8013b50 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ae8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d020      	beq.n	8013b32 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013af2:	889b      	ldrh	r3, [r3, #4]
 8013af4:	b29a      	uxth	r2, r3
 8013af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af8:	88db      	ldrh	r3, [r3, #6]
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d307      	bcc.n	8013b10 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b02:	88db      	ldrh	r3, [r3, #6]
 8013b04:	b29a      	uxth	r2, r3
 8013b06:	693b      	ldr	r3, [r7, #16]
 8013b08:	889b      	ldrh	r3, [r3, #4]
 8013b0a:	b29b      	uxth	r3, r3
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d902      	bls.n	8013b16 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b14:	e0de      	b.n	8013cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b18:	68ba      	ldr	r2, [r7, #8]
 8013b1a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b1e:	88db      	ldrh	r3, [r3, #6]
 8013b20:	b29a      	uxth	r2, r3
 8013b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b24:	889b      	ldrh	r3, [r3, #4]
 8013b26:	b29b      	uxth	r3, r3
 8013b28:	429a      	cmp	r2, r3
 8013b2a:	d03d      	beq.n	8013ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013b30:	e03a      	b.n	8013ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b34:	88db      	ldrh	r3, [r3, #6]
 8013b36:	b29a      	uxth	r2, r3
 8013b38:	693b      	ldr	r3, [r7, #16]
 8013b3a:	889b      	ldrh	r3, [r3, #4]
 8013b3c:	b29b      	uxth	r3, r3
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d902      	bls.n	8013b48 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b46:	e0c5      	b.n	8013cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	68ba      	ldr	r2, [r7, #8]
 8013b4c:	605a      	str	r2, [r3, #4]
      break;
 8013b4e:	e02b      	b.n	8013ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b52:	889b      	ldrh	r3, [r3, #4]
 8013b54:	b29a      	uxth	r2, r3
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	889b      	ldrh	r3, [r3, #4]
 8013b5a:	b29b      	uxth	r3, r3
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	d102      	bne.n	8013b66 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b64:	e0b6      	b.n	8013cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b68:	889b      	ldrh	r3, [r3, #4]
 8013b6a:	b29a      	uxth	r2, r3
 8013b6c:	693b      	ldr	r3, [r7, #16]
 8013b6e:	88db      	ldrh	r3, [r3, #6]
 8013b70:	b29b      	uxth	r3, r3
 8013b72:	429a      	cmp	r2, r3
 8013b74:	d202      	bcs.n	8013b7c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b7a:	e0ab      	b.n	8013cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d009      	beq.n	8013b96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b84:	88db      	ldrh	r3, [r3, #6]
 8013b86:	b29a      	uxth	r2, r3
 8013b88:	693b      	ldr	r3, [r7, #16]
 8013b8a:	889b      	ldrh	r3, [r3, #4]
 8013b8c:	b29b      	uxth	r3, r3
 8013b8e:	429a      	cmp	r2, r3
 8013b90:	d001      	beq.n	8013b96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013b92:	2300      	movs	r3, #0
 8013b94:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013b9c:	693b      	ldr	r3, [r7, #16]
 8013b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d193      	bne.n	8013ace <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013ba6:	e000      	b.n	8013baa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013ba8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d12d      	bne.n	8013c0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d01c      	beq.n	8013bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb8:	88db      	ldrh	r3, [r3, #6]
 8013bba:	b29a      	uxth	r2, r3
 8013bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bbe:	889b      	ldrh	r3, [r3, #4]
 8013bc0:	b29b      	uxth	r3, r3
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	d906      	bls.n	8013bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013bc6:	4b45      	ldr	r3, [pc, #276]	; (8013cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013bc8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013bcc:	4944      	ldr	r1, [pc, #272]	; (8013ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013bce:	4845      	ldr	r0, [pc, #276]	; (8013ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013bd0:	f001 f8c8 	bl	8014d64 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bd6:	68ba      	ldr	r2, [r7, #8]
 8013bd8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bdc:	88db      	ldrh	r3, [r3, #6]
 8013bde:	b29a      	uxth	r2, r3
 8013be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be2:	889b      	ldrh	r3, [r3, #4]
 8013be4:	b29b      	uxth	r3, r3
 8013be6:	429a      	cmp	r2, r3
 8013be8:	d010      	beq.n	8013c0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013bea:	2300      	movs	r3, #0
 8013bec:	623b      	str	r3, [r7, #32]
 8013bee:	e00d      	b.n	8013c0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	685b      	ldr	r3, [r3, #4]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d006      	beq.n	8013c06 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013bf8:	4b38      	ldr	r3, [pc, #224]	; (8013cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013bfa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013bfe:	493a      	ldr	r1, [pc, #232]	; (8013ce8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013c00:	4838      	ldr	r0, [pc, #224]	; (8013ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c02:	f001 f8af 	bl	8014d64 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	68ba      	ldr	r2, [r7, #8]
 8013c0a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d105      	bne.n	8013c1e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	7f9b      	ldrb	r3, [r3, #30]
 8013c16:	f003 0301 	and.w	r3, r3, #1
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d059      	beq.n	8013cd2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013c1e:	6a3b      	ldr	r3, [r7, #32]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d04f      	beq.n	8013cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	685b      	ldr	r3, [r3, #4]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d006      	beq.n	8013c3a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	685b      	ldr	r3, [r3, #4]
 8013c30:	685b      	ldr	r3, [r3, #4]
 8013c32:	889b      	ldrh	r3, [r3, #4]
 8013c34:	b29b      	uxth	r3, r3
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d002      	beq.n	8013c40 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	623b      	str	r3, [r7, #32]
 8013c3e:	e041      	b.n	8013cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c42:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013c4a:	e012      	b.n	8013c72 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c4e:	685b      	ldr	r3, [r3, #4]
 8013c50:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c54:	88db      	ldrh	r3, [r3, #6]
 8013c56:	b29a      	uxth	r2, r3
 8013c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c5a:	889b      	ldrh	r3, [r3, #4]
 8013c5c:	b29b      	uxth	r3, r3
 8013c5e:	429a      	cmp	r2, r3
 8013c60:	d002      	beq.n	8013c68 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013c62:	2300      	movs	r3, #0
 8013c64:	623b      	str	r3, [r7, #32]
            break;
 8013c66:	e007      	b.n	8013c78 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c6a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d1e9      	bne.n	8013c4c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013c78:	6a3b      	ldr	r3, [r7, #32]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d022      	beq.n	8013cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	685b      	ldr	r3, [r3, #4]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d106      	bne.n	8013c94 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013c86:	4b15      	ldr	r3, [pc, #84]	; (8013cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c88:	f240 12df 	movw	r2, #479	; 0x1df
 8013c8c:	4917      	ldr	r1, [pc, #92]	; (8013cec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013c8e:	4815      	ldr	r0, [pc, #84]	; (8013ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c90:	f001 f868 	bl	8014d64 <iprintf>
          LWIP_ASSERT("sanity check",
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	685b      	ldr	r3, [r3, #4]
 8013c98:	685b      	ldr	r3, [r3, #4]
 8013c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	d106      	bne.n	8013cae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013ca0:	4b0e      	ldr	r3, [pc, #56]	; (8013cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013ca2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013ca6:	4911      	ldr	r1, [pc, #68]	; (8013cec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013ca8:	480e      	ldr	r0, [pc, #56]	; (8013ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013caa:	f001 f85b 	bl	8014d64 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d006      	beq.n	8013cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013cb6:	4b09      	ldr	r3, [pc, #36]	; (8013cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013cb8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013cbc:	490c      	ldr	r1, [pc, #48]	; (8013cf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013cbe:	4809      	ldr	r0, [pc, #36]	; (8013ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013cc0:	f001 f850 	bl	8014d64 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013cc4:	6a3b      	ldr	r3, [r7, #32]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	bf14      	ite	ne
 8013cca:	2301      	movne	r3, #1
 8013ccc:	2300      	moveq	r3, #0
 8013cce:	b2db      	uxtb	r3, r3
 8013cd0:	e000      	b.n	8013cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013cd2:	2300      	movs	r3, #0
}
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3730      	adds	r7, #48	; 0x30
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}
 8013cdc:	080188a0 	.word	0x080188a0
 8013ce0:	08018984 	.word	0x08018984
 8013ce4:	080188e8 	.word	0x080188e8
 8013ce8:	080189a4 	.word	0x080189a4
 8013cec:	080189dc 	.word	0x080189dc
 8013cf0:	080189ec 	.word	0x080189ec

08013cf4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b08e      	sub	sp, #56	; 0x38
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	685b      	ldr	r3, [r3, #4]
 8013d00:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d04:	781b      	ldrb	r3, [r3, #0]
 8013d06:	f003 030f 	and.w	r3, r3, #15
 8013d0a:	b2db      	uxtb	r3, r3
 8013d0c:	009b      	lsls	r3, r3, #2
 8013d0e:	b2db      	uxtb	r3, r3
 8013d10:	2b14      	cmp	r3, #20
 8013d12:	f040 8171 	bne.w	8013ff8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d18:	88db      	ldrh	r3, [r3, #6]
 8013d1a:	b29b      	uxth	r3, r3
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7f6 fa87 	bl	800a230 <lwip_htons>
 8013d22:	4603      	mov	r3, r0
 8013d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d28:	b29b      	uxth	r3, r3
 8013d2a:	00db      	lsls	r3, r3, #3
 8013d2c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d30:	885b      	ldrh	r3, [r3, #2]
 8013d32:	b29b      	uxth	r3, r3
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7f6 fa7b 	bl	800a230 <lwip_htons>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	f003 030f 	and.w	r3, r3, #15
 8013d46:	b2db      	uxtb	r3, r3
 8013d48:	009b      	lsls	r3, r3, #2
 8013d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013d56:	429a      	cmp	r2, r3
 8013d58:	f0c0 8150 	bcc.w	8013ffc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013d60:	b29b      	uxth	r3, r3
 8013d62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013d64:	1ad3      	subs	r3, r2, r3
 8013d66:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f7f7 fee1 	bl	800bb30 <pbuf_clen>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013d72:	4b8c      	ldr	r3, [pc, #560]	; (8013fa4 <ip4_reass+0x2b0>)
 8013d74:	881b      	ldrh	r3, [r3, #0]
 8013d76:	461a      	mov	r2, r3
 8013d78:	8c3b      	ldrh	r3, [r7, #32]
 8013d7a:	4413      	add	r3, r2
 8013d7c:	2b0a      	cmp	r3, #10
 8013d7e:	dd10      	ble.n	8013da2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013d80:	8c3b      	ldrh	r3, [r7, #32]
 8013d82:	4619      	mov	r1, r3
 8013d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d86:	f7ff fd81 	bl	801388c <ip_reass_remove_oldest_datagram>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	f000 8137 	beq.w	8014000 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013d92:	4b84      	ldr	r3, [pc, #528]	; (8013fa4 <ip4_reass+0x2b0>)
 8013d94:	881b      	ldrh	r3, [r3, #0]
 8013d96:	461a      	mov	r2, r3
 8013d98:	8c3b      	ldrh	r3, [r7, #32]
 8013d9a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013d9c:	2b0a      	cmp	r3, #10
 8013d9e:	f300 812f 	bgt.w	8014000 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013da2:	4b81      	ldr	r3, [pc, #516]	; (8013fa8 <ip4_reass+0x2b4>)
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	633b      	str	r3, [r7, #48]	; 0x30
 8013da8:	e015      	b.n	8013dd6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dac:	695a      	ldr	r2, [r3, #20]
 8013dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db0:	68db      	ldr	r3, [r3, #12]
 8013db2:	429a      	cmp	r2, r3
 8013db4:	d10c      	bne.n	8013dd0 <ip4_reass+0xdc>
 8013db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db8:	699a      	ldr	r2, [r3, #24]
 8013dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dbc:	691b      	ldr	r3, [r3, #16]
 8013dbe:	429a      	cmp	r2, r3
 8013dc0:	d106      	bne.n	8013dd0 <ip4_reass+0xdc>
 8013dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc4:	899a      	ldrh	r2, [r3, #12]
 8013dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc8:	889b      	ldrh	r3, [r3, #4]
 8013dca:	b29b      	uxth	r3, r3
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	d006      	beq.n	8013dde <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8013dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d1e6      	bne.n	8013daa <ip4_reass+0xb6>
 8013ddc:	e000      	b.n	8013de0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013dde:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d109      	bne.n	8013dfa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013de6:	8c3b      	ldrh	r3, [r7, #32]
 8013de8:	4619      	mov	r1, r3
 8013dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013dec:	f7ff fdb0 	bl	8013950 <ip_reass_enqueue_new_datagram>
 8013df0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d11c      	bne.n	8013e32 <ip4_reass+0x13e>
      goto nullreturn;
 8013df8:	e105      	b.n	8014006 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dfc:	88db      	ldrh	r3, [r3, #6]
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	4618      	mov	r0, r3
 8013e02:	f7f6 fa15 	bl	800a230 <lwip_htons>
 8013e06:	4603      	mov	r3, r0
 8013e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d110      	bne.n	8013e32 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e12:	89db      	ldrh	r3, [r3, #14]
 8013e14:	4618      	mov	r0, r3
 8013e16:	f7f6 fa0b 	bl	800a230 <lwip_htons>
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d006      	beq.n	8013e32 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e26:	3308      	adds	r3, #8
 8013e28:	2214      	movs	r2, #20
 8013e2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f000 fe88 	bl	8014b42 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e34:	88db      	ldrh	r3, [r3, #6]
 8013e36:	b29b      	uxth	r3, r3
 8013e38:	f003 0320 	and.w	r3, r3, #32
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	bf0c      	ite	eq
 8013e40:	2301      	moveq	r3, #1
 8013e42:	2300      	movne	r3, #0
 8013e44:	b2db      	uxtb	r3, r3
 8013e46:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013e48:	69fb      	ldr	r3, [r7, #28]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d00e      	beq.n	8013e6c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013e4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013e50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e52:	4413      	add	r3, r2
 8013e54:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013e56:	8b7a      	ldrh	r2, [r7, #26]
 8013e58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	f0c0 80a0 	bcc.w	8013fa0 <ip4_reass+0x2ac>
 8013e60:	8b7b      	ldrh	r3, [r7, #26]
 8013e62:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013e66:	4293      	cmp	r3, r2
 8013e68:	f200 809a 	bhi.w	8013fa0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013e6c:	69fa      	ldr	r2, [r7, #28]
 8013e6e:	6879      	ldr	r1, [r7, #4]
 8013e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e72:	f7ff fdd5 	bl	8013a20 <ip_reass_chain_frag_into_datagram_and_validate>
 8013e76:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013e78:	697b      	ldr	r3, [r7, #20]
 8013e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e7e:	f000 809b 	beq.w	8013fb8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013e82:	4b48      	ldr	r3, [pc, #288]	; (8013fa4 <ip4_reass+0x2b0>)
 8013e84:	881a      	ldrh	r2, [r3, #0]
 8013e86:	8c3b      	ldrh	r3, [r7, #32]
 8013e88:	4413      	add	r3, r2
 8013e8a:	b29a      	uxth	r2, r3
 8013e8c:	4b45      	ldr	r3, [pc, #276]	; (8013fa4 <ip4_reass+0x2b0>)
 8013e8e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013e90:	69fb      	ldr	r3, [r7, #28]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d00d      	beq.n	8013eb2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013e96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013e98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e9a:	4413      	add	r3, r2
 8013e9c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ea0:	8a7a      	ldrh	r2, [r7, #18]
 8013ea2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ea6:	7f9b      	ldrb	r3, [r3, #30]
 8013ea8:	f043 0301 	orr.w	r3, r3, #1
 8013eac:	b2da      	uxtb	r2, r3
 8013eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eb0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013eb2:	697b      	ldr	r3, [r7, #20]
 8013eb4:	2b01      	cmp	r3, #1
 8013eb6:	d171      	bne.n	8013f9c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eba:	8b9b      	ldrh	r3, [r3, #28]
 8013ebc:	3314      	adds	r3, #20
 8013ebe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ec2:	685b      	ldr	r3, [r3, #4]
 8013ec4:	685b      	ldr	r3, [r3, #4]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ecc:	685b      	ldr	r3, [r3, #4]
 8013ece:	685b      	ldr	r3, [r3, #4]
 8013ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed4:	3308      	adds	r3, #8
 8013ed6:	2214      	movs	r2, #20
 8013ed8:	4619      	mov	r1, r3
 8013eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013edc:	f000 fe31 	bl	8014b42 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013ee0:	8a3b      	ldrh	r3, [r7, #16]
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f7f6 f9a4 	bl	800a230 <lwip_htons>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	461a      	mov	r2, r3
 8013eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	719a      	strb	r2, [r3, #6]
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013efc:	2200      	movs	r2, #0
 8013efe:	729a      	strb	r2, [r3, #10]
 8013f00:	2200      	movs	r2, #0
 8013f02:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f06:	685b      	ldr	r3, [r3, #4]
 8013f08:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013f0a:	e00d      	b.n	8013f28 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f0e:	685b      	ldr	r3, [r3, #4]
 8013f10:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013f12:	2114      	movs	r1, #20
 8013f14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013f16:	f7f7 fcf7 	bl	800b908 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013f1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	f7f7 fe47 	bl	800bbb0 <pbuf_cat>
      r = iprh->next_pbuf;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d1ee      	bne.n	8013f0c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013f2e:	4b1e      	ldr	r3, [pc, #120]	; (8013fa8 <ip4_reass+0x2b4>)
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f34:	429a      	cmp	r2, r3
 8013f36:	d102      	bne.n	8013f3e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013f38:	2300      	movs	r3, #0
 8013f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013f3c:	e010      	b.n	8013f60 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013f3e:	4b1a      	ldr	r3, [pc, #104]	; (8013fa8 <ip4_reass+0x2b4>)
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013f44:	e007      	b.n	8013f56 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f4c:	429a      	cmp	r2, r3
 8013f4e:	d006      	beq.n	8013f5e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d1f4      	bne.n	8013f46 <ip4_reass+0x252>
 8013f5c:	e000      	b.n	8013f60 <ip4_reass+0x26c>
          break;
 8013f5e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013f60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013f62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f64:	f7ff fd2e 	bl	80139c4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f7f7 fde1 	bl	800bb30 <pbuf_clen>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013f72:	4b0c      	ldr	r3, [pc, #48]	; (8013fa4 <ip4_reass+0x2b0>)
 8013f74:	881b      	ldrh	r3, [r3, #0]
 8013f76:	8c3a      	ldrh	r2, [r7, #32]
 8013f78:	429a      	cmp	r2, r3
 8013f7a:	d906      	bls.n	8013f8a <ip4_reass+0x296>
 8013f7c:	4b0b      	ldr	r3, [pc, #44]	; (8013fac <ip4_reass+0x2b8>)
 8013f7e:	f240 229b 	movw	r2, #667	; 0x29b
 8013f82:	490b      	ldr	r1, [pc, #44]	; (8013fb0 <ip4_reass+0x2bc>)
 8013f84:	480b      	ldr	r0, [pc, #44]	; (8013fb4 <ip4_reass+0x2c0>)
 8013f86:	f000 feed 	bl	8014d64 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013f8a:	4b06      	ldr	r3, [pc, #24]	; (8013fa4 <ip4_reass+0x2b0>)
 8013f8c:	881a      	ldrh	r2, [r3, #0]
 8013f8e:	8c3b      	ldrh	r3, [r7, #32]
 8013f90:	1ad3      	subs	r3, r2, r3
 8013f92:	b29a      	uxth	r2, r3
 8013f94:	4b03      	ldr	r3, [pc, #12]	; (8013fa4 <ip4_reass+0x2b0>)
 8013f96:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	e038      	b.n	801400e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	e036      	b.n	801400e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013fa0:	bf00      	nop
 8013fa2:	e00a      	b.n	8013fba <ip4_reass+0x2c6>
 8013fa4:	20017bcc 	.word	0x20017bcc
 8013fa8:	20017bc8 	.word	0x20017bc8
 8013fac:	080188a0 	.word	0x080188a0
 8013fb0:	08018a10 	.word	0x08018a10
 8013fb4:	080188e8 	.word	0x080188e8
    goto nullreturn_ipr;
 8013fb8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d106      	bne.n	8013fce <ip4_reass+0x2da>
 8013fc0:	4b15      	ldr	r3, [pc, #84]	; (8014018 <ip4_reass+0x324>)
 8013fc2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013fc6:	4915      	ldr	r1, [pc, #84]	; (801401c <ip4_reass+0x328>)
 8013fc8:	4815      	ldr	r0, [pc, #84]	; (8014020 <ip4_reass+0x32c>)
 8013fca:	f000 fecb 	bl	8014d64 <iprintf>
  if (ipr->p == NULL) {
 8013fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd0:	685b      	ldr	r3, [r3, #4]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d116      	bne.n	8014004 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013fd6:	4b13      	ldr	r3, [pc, #76]	; (8014024 <ip4_reass+0x330>)
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d006      	beq.n	8013fee <ip4_reass+0x2fa>
 8013fe0:	4b0d      	ldr	r3, [pc, #52]	; (8014018 <ip4_reass+0x324>)
 8013fe2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013fe6:	4910      	ldr	r1, [pc, #64]	; (8014028 <ip4_reass+0x334>)
 8013fe8:	480d      	ldr	r0, [pc, #52]	; (8014020 <ip4_reass+0x32c>)
 8013fea:	f000 febb 	bl	8014d64 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013fee:	2100      	movs	r1, #0
 8013ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ff2:	f7ff fce7 	bl	80139c4 <ip_reass_dequeue_datagram>
 8013ff6:	e006      	b.n	8014006 <ip4_reass+0x312>
    goto nullreturn;
 8013ff8:	bf00      	nop
 8013ffa:	e004      	b.n	8014006 <ip4_reass+0x312>
    goto nullreturn;
 8013ffc:	bf00      	nop
 8013ffe:	e002      	b.n	8014006 <ip4_reass+0x312>
      goto nullreturn;
 8014000:	bf00      	nop
 8014002:	e000      	b.n	8014006 <ip4_reass+0x312>
  }

nullreturn:
 8014004:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f7f7 fd04 	bl	800ba14 <pbuf_free>
  return NULL;
 801400c:	2300      	movs	r3, #0
}
 801400e:	4618      	mov	r0, r3
 8014010:	3738      	adds	r7, #56	; 0x38
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}
 8014016:	bf00      	nop
 8014018:	080188a0 	.word	0x080188a0
 801401c:	08018a2c 	.word	0x08018a2c
 8014020:	080188e8 	.word	0x080188e8
 8014024:	20017bc8 	.word	0x20017bc8
 8014028:	08018a38 	.word	0x08018a38

0801402c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014030:	2005      	movs	r0, #5
 8014032:	f7f6 fdd5 	bl	800abe0 <memp_malloc>
 8014036:	4603      	mov	r3, r0
}
 8014038:	4618      	mov	r0, r3
 801403a:	bd80      	pop	{r7, pc}

0801403c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b082      	sub	sp, #8
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d106      	bne.n	8014058 <ip_frag_free_pbuf_custom_ref+0x1c>
 801404a:	4b07      	ldr	r3, [pc, #28]	; (8014068 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801404c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014050:	4906      	ldr	r1, [pc, #24]	; (801406c <ip_frag_free_pbuf_custom_ref+0x30>)
 8014052:	4807      	ldr	r0, [pc, #28]	; (8014070 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014054:	f000 fe86 	bl	8014d64 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014058:	6879      	ldr	r1, [r7, #4]
 801405a:	2005      	movs	r0, #5
 801405c:	f7f6 fe36 	bl	800accc <memp_free>
}
 8014060:	bf00      	nop
 8014062:	3708      	adds	r7, #8
 8014064:	46bd      	mov	sp, r7
 8014066:	bd80      	pop	{r7, pc}
 8014068:	080188a0 	.word	0x080188a0
 801406c:	08018a58 	.word	0x08018a58
 8014070:	080188e8 	.word	0x080188e8

08014074 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b084      	sub	sp, #16
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d106      	bne.n	8014094 <ipfrag_free_pbuf_custom+0x20>
 8014086:	4b11      	ldr	r3, [pc, #68]	; (80140cc <ipfrag_free_pbuf_custom+0x58>)
 8014088:	f240 22ce 	movw	r2, #718	; 0x2ce
 801408c:	4910      	ldr	r1, [pc, #64]	; (80140d0 <ipfrag_free_pbuf_custom+0x5c>)
 801408e:	4811      	ldr	r0, [pc, #68]	; (80140d4 <ipfrag_free_pbuf_custom+0x60>)
 8014090:	f000 fe68 	bl	8014d64 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014094:	68fa      	ldr	r2, [r7, #12]
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	429a      	cmp	r2, r3
 801409a:	d006      	beq.n	80140aa <ipfrag_free_pbuf_custom+0x36>
 801409c:	4b0b      	ldr	r3, [pc, #44]	; (80140cc <ipfrag_free_pbuf_custom+0x58>)
 801409e:	f240 22cf 	movw	r2, #719	; 0x2cf
 80140a2:	490d      	ldr	r1, [pc, #52]	; (80140d8 <ipfrag_free_pbuf_custom+0x64>)
 80140a4:	480b      	ldr	r0, [pc, #44]	; (80140d4 <ipfrag_free_pbuf_custom+0x60>)
 80140a6:	f000 fe5d 	bl	8014d64 <iprintf>
  if (pcr->original != NULL) {
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	695b      	ldr	r3, [r3, #20]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d004      	beq.n	80140bc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	695b      	ldr	r3, [r3, #20]
 80140b6:	4618      	mov	r0, r3
 80140b8:	f7f7 fcac 	bl	800ba14 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80140bc:	68f8      	ldr	r0, [r7, #12]
 80140be:	f7ff ffbd 	bl	801403c <ip_frag_free_pbuf_custom_ref>
}
 80140c2:	bf00      	nop
 80140c4:	3710      	adds	r7, #16
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}
 80140ca:	bf00      	nop
 80140cc:	080188a0 	.word	0x080188a0
 80140d0:	08018a64 	.word	0x08018a64
 80140d4:	080188e8 	.word	0x080188e8
 80140d8:	08018a70 	.word	0x08018a70

080140dc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b094      	sub	sp, #80	; 0x50
 80140e0:	af02      	add	r7, sp, #8
 80140e2:	60f8      	str	r0, [r7, #12]
 80140e4:	60b9      	str	r1, [r7, #8]
 80140e6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80140e8:	2300      	movs	r3, #0
 80140ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80140f2:	3b14      	subs	r3, #20
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	da00      	bge.n	80140fa <ip4_frag+0x1e>
 80140f8:	3307      	adds	r3, #7
 80140fa:	10db      	asrs	r3, r3, #3
 80140fc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80140fe:	2314      	movs	r3, #20
 8014100:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	685b      	ldr	r3, [r3, #4]
 8014106:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801410a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801410e:	781b      	ldrb	r3, [r3, #0]
 8014110:	f003 030f 	and.w	r3, r3, #15
 8014114:	b2db      	uxtb	r3, r3
 8014116:	009b      	lsls	r3, r3, #2
 8014118:	b2db      	uxtb	r3, r3
 801411a:	2b14      	cmp	r3, #20
 801411c:	d002      	beq.n	8014124 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801411e:	f06f 0305 	mvn.w	r3, #5
 8014122:	e110      	b.n	8014346 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	895b      	ldrh	r3, [r3, #10]
 8014128:	2b13      	cmp	r3, #19
 801412a:	d809      	bhi.n	8014140 <ip4_frag+0x64>
 801412c:	4b88      	ldr	r3, [pc, #544]	; (8014350 <ip4_frag+0x274>)
 801412e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014132:	4988      	ldr	r1, [pc, #544]	; (8014354 <ip4_frag+0x278>)
 8014134:	4888      	ldr	r0, [pc, #544]	; (8014358 <ip4_frag+0x27c>)
 8014136:	f000 fe15 	bl	8014d64 <iprintf>
 801413a:	f06f 0305 	mvn.w	r3, #5
 801413e:	e102      	b.n	8014346 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014142:	88db      	ldrh	r3, [r3, #6]
 8014144:	b29b      	uxth	r3, r3
 8014146:	4618      	mov	r0, r3
 8014148:	f7f6 f872 	bl	800a230 <lwip_htons>
 801414c:	4603      	mov	r3, r0
 801414e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014150:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014152:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014156:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801415a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801415c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014160:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	891b      	ldrh	r3, [r3, #8]
 8014166:	3b14      	subs	r3, #20
 8014168:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801416c:	e0e1      	b.n	8014332 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801416e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014170:	00db      	lsls	r3, r3, #3
 8014172:	b29b      	uxth	r3, r3
 8014174:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014178:	4293      	cmp	r3, r2
 801417a:	bf28      	it	cs
 801417c:	4613      	movcs	r3, r2
 801417e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014180:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014184:	2114      	movs	r1, #20
 8014186:	200e      	movs	r0, #14
 8014188:	f7f7 f960 	bl	800b44c <pbuf_alloc>
 801418c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014190:	2b00      	cmp	r3, #0
 8014192:	f000 80d5 	beq.w	8014340 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014198:	895b      	ldrh	r3, [r3, #10]
 801419a:	2b13      	cmp	r3, #19
 801419c:	d806      	bhi.n	80141ac <ip4_frag+0xd0>
 801419e:	4b6c      	ldr	r3, [pc, #432]	; (8014350 <ip4_frag+0x274>)
 80141a0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80141a4:	496d      	ldr	r1, [pc, #436]	; (801435c <ip4_frag+0x280>)
 80141a6:	486c      	ldr	r0, [pc, #432]	; (8014358 <ip4_frag+0x27c>)
 80141a8:	f000 fddc 	bl	8014d64 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80141ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ae:	685b      	ldr	r3, [r3, #4]
 80141b0:	2214      	movs	r2, #20
 80141b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80141b4:	4618      	mov	r0, r3
 80141b6:	f000 fcc4 	bl	8014b42 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80141ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141bc:	685b      	ldr	r3, [r3, #4]
 80141be:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80141c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80141c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80141c6:	e064      	b.n	8014292 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	895a      	ldrh	r2, [r3, #10]
 80141cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80141ce:	1ad3      	subs	r3, r2, r3
 80141d0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	895b      	ldrh	r3, [r3, #10]
 80141d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80141d8:	429a      	cmp	r2, r3
 80141da:	d906      	bls.n	80141ea <ip4_frag+0x10e>
 80141dc:	4b5c      	ldr	r3, [pc, #368]	; (8014350 <ip4_frag+0x274>)
 80141de:	f240 322d 	movw	r2, #813	; 0x32d
 80141e2:	495f      	ldr	r1, [pc, #380]	; (8014360 <ip4_frag+0x284>)
 80141e4:	485c      	ldr	r0, [pc, #368]	; (8014358 <ip4_frag+0x27c>)
 80141e6:	f000 fdbd 	bl	8014d64 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80141ea:	8bfa      	ldrh	r2, [r7, #30]
 80141ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80141f0:	4293      	cmp	r3, r2
 80141f2:	bf28      	it	cs
 80141f4:	4613      	movcs	r3, r2
 80141f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80141fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d105      	bne.n	801420e <ip4_frag+0x132>
        poff = 0;
 8014202:	2300      	movs	r3, #0
 8014204:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	60fb      	str	r3, [r7, #12]
        continue;
 801420c:	e041      	b.n	8014292 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801420e:	f7ff ff0d 	bl	801402c <ip_frag_alloc_pbuf_custom_ref>
 8014212:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014214:	69bb      	ldr	r3, [r7, #24]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d103      	bne.n	8014222 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801421a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801421c:	f7f7 fbfa 	bl	800ba14 <pbuf_free>
        goto memerr;
 8014220:	e08f      	b.n	8014342 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014222:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014228:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801422a:	4413      	add	r3, r2
 801422c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014230:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014234:	9201      	str	r2, [sp, #4]
 8014236:	9300      	str	r3, [sp, #0]
 8014238:	4603      	mov	r3, r0
 801423a:	2241      	movs	r2, #65	; 0x41
 801423c:	2000      	movs	r0, #0
 801423e:	f7f7 fa2f 	bl	800b6a0 <pbuf_alloced_custom>
 8014242:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014244:	697b      	ldr	r3, [r7, #20]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d106      	bne.n	8014258 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801424a:	69b8      	ldr	r0, [r7, #24]
 801424c:	f7ff fef6 	bl	801403c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014250:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014252:	f7f7 fbdf 	bl	800ba14 <pbuf_free>
        goto memerr;
 8014256:	e074      	b.n	8014342 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014258:	68f8      	ldr	r0, [r7, #12]
 801425a:	f7f7 fc81 	bl	800bb60 <pbuf_ref>
      pcr->original = p;
 801425e:	69bb      	ldr	r3, [r7, #24]
 8014260:	68fa      	ldr	r2, [r7, #12]
 8014262:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014264:	69bb      	ldr	r3, [r7, #24]
 8014266:	4a3f      	ldr	r2, [pc, #252]	; (8014364 <ip4_frag+0x288>)
 8014268:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801426a:	6979      	ldr	r1, [r7, #20]
 801426c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801426e:	f7f7 fc9f 	bl	800bbb0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014272:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014276:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801427a:	1ad3      	subs	r3, r2, r3
 801427c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014280:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014284:	2b00      	cmp	r3, #0
 8014286:	d004      	beq.n	8014292 <ip4_frag+0x1b6>
        poff = 0;
 8014288:	2300      	movs	r3, #0
 801428a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014292:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014296:	2b00      	cmp	r3, #0
 8014298:	d196      	bne.n	80141c8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801429a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801429c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80142a0:	4413      	add	r3, r2
 80142a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80142a8:	f1a3 0213 	sub.w	r2, r3, #19
 80142ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80142b0:	429a      	cmp	r2, r3
 80142b2:	bfcc      	ite	gt
 80142b4:	2301      	movgt	r3, #1
 80142b6:	2300      	movle	r3, #0
 80142b8:	b2db      	uxtb	r3, r3
 80142ba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80142bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80142c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80142c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80142c6:	6a3b      	ldr	r3, [r7, #32]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d002      	beq.n	80142d2 <ip4_frag+0x1f6>
 80142cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d003      	beq.n	80142da <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80142d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80142d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80142d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80142da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80142dc:	4618      	mov	r0, r3
 80142de:	f7f5 ffa7 	bl	800a230 <lwip_htons>
 80142e2:	4603      	mov	r3, r0
 80142e4:	461a      	mov	r2, r3
 80142e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80142ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80142ec:	3314      	adds	r3, #20
 80142ee:	b29b      	uxth	r3, r3
 80142f0:	4618      	mov	r0, r3
 80142f2:	f7f5 ff9d 	bl	800a230 <lwip_htons>
 80142f6:	4603      	mov	r3, r0
 80142f8:	461a      	mov	r2, r3
 80142fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142fc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80142fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014300:	2200      	movs	r2, #0
 8014302:	729a      	strb	r2, [r3, #10]
 8014304:	2200      	movs	r2, #0
 8014306:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	695b      	ldr	r3, [r3, #20]
 801430c:	687a      	ldr	r2, [r7, #4]
 801430e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014310:	68b8      	ldr	r0, [r7, #8]
 8014312:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014316:	f7f7 fb7d 	bl	800ba14 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801431a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801431e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014320:	1ad3      	subs	r3, r2, r3
 8014322:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014326:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801432a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801432c:	4413      	add	r3, r2
 801432e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014332:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014336:	2b00      	cmp	r3, #0
 8014338:	f47f af19 	bne.w	801416e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801433c:	2300      	movs	r3, #0
 801433e:	e002      	b.n	8014346 <ip4_frag+0x26a>
      goto memerr;
 8014340:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014346:	4618      	mov	r0, r3
 8014348:	3748      	adds	r7, #72	; 0x48
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
 801434e:	bf00      	nop
 8014350:	080188a0 	.word	0x080188a0
 8014354:	08018a7c 	.word	0x08018a7c
 8014358:	080188e8 	.word	0x080188e8
 801435c:	08018a98 	.word	0x08018a98
 8014360:	08018ab8 	.word	0x08018ab8
 8014364:	08014075 	.word	0x08014075

08014368 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b086      	sub	sp, #24
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
 8014370:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014372:	230e      	movs	r3, #14
 8014374:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	895b      	ldrh	r3, [r3, #10]
 801437a:	2b0e      	cmp	r3, #14
 801437c:	d96e      	bls.n	801445c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	7bdb      	ldrb	r3, [r3, #15]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d106      	bne.n	8014394 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801438c:	3301      	adds	r3, #1
 801438e:	b2da      	uxtb	r2, r3
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	685b      	ldr	r3, [r3, #4]
 8014398:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801439a:	693b      	ldr	r3, [r7, #16]
 801439c:	7b1a      	ldrb	r2, [r3, #12]
 801439e:	7b5b      	ldrb	r3, [r3, #13]
 80143a0:	021b      	lsls	r3, r3, #8
 80143a2:	4313      	orrs	r3, r2
 80143a4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80143a6:	693b      	ldr	r3, [r7, #16]
 80143a8:	781b      	ldrb	r3, [r3, #0]
 80143aa:	f003 0301 	and.w	r3, r3, #1
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d023      	beq.n	80143fa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80143b2:	693b      	ldr	r3, [r7, #16]
 80143b4:	781b      	ldrb	r3, [r3, #0]
 80143b6:	2b01      	cmp	r3, #1
 80143b8:	d10f      	bne.n	80143da <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80143ba:	693b      	ldr	r3, [r7, #16]
 80143bc:	785b      	ldrb	r3, [r3, #1]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d11b      	bne.n	80143fa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80143c2:	693b      	ldr	r3, [r7, #16]
 80143c4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80143c6:	2b5e      	cmp	r3, #94	; 0x5e
 80143c8:	d117      	bne.n	80143fa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	7b5b      	ldrb	r3, [r3, #13]
 80143ce:	f043 0310 	orr.w	r3, r3, #16
 80143d2:	b2da      	uxtb	r2, r3
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	735a      	strb	r2, [r3, #13]
 80143d8:	e00f      	b.n	80143fa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	2206      	movs	r2, #6
 80143de:	4928      	ldr	r1, [pc, #160]	; (8014480 <ethernet_input+0x118>)
 80143e0:	4618      	mov	r0, r3
 80143e2:	f000 fb9e 	bl	8014b22 <memcmp>
 80143e6:	4603      	mov	r3, r0
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d106      	bne.n	80143fa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	7b5b      	ldrb	r3, [r3, #13]
 80143f0:	f043 0308 	orr.w	r3, r3, #8
 80143f4:	b2da      	uxtb	r2, r3
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80143fa:	89fb      	ldrh	r3, [r7, #14]
 80143fc:	2b08      	cmp	r3, #8
 80143fe:	d003      	beq.n	8014408 <ethernet_input+0xa0>
 8014400:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014404:	d014      	beq.n	8014430 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014406:	e032      	b.n	801446e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801440e:	f003 0308 	and.w	r3, r3, #8
 8014412:	2b00      	cmp	r3, #0
 8014414:	d024      	beq.n	8014460 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014416:	8afb      	ldrh	r3, [r7, #22]
 8014418:	4619      	mov	r1, r3
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	f7f7 fa74 	bl	800b908 <pbuf_remove_header>
 8014420:	4603      	mov	r3, r0
 8014422:	2b00      	cmp	r3, #0
 8014424:	d11e      	bne.n	8014464 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014426:	6839      	ldr	r1, [r7, #0]
 8014428:	6878      	ldr	r0, [r7, #4]
 801442a:	f7fe fe91 	bl	8013150 <ip4_input>
      break;
 801442e:	e013      	b.n	8014458 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014430:	683b      	ldr	r3, [r7, #0]
 8014432:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014436:	f003 0308 	and.w	r3, r3, #8
 801443a:	2b00      	cmp	r3, #0
 801443c:	d014      	beq.n	8014468 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801443e:	8afb      	ldrh	r3, [r7, #22]
 8014440:	4619      	mov	r1, r3
 8014442:	6878      	ldr	r0, [r7, #4]
 8014444:	f7f7 fa60 	bl	800b908 <pbuf_remove_header>
 8014448:	4603      	mov	r3, r0
 801444a:	2b00      	cmp	r3, #0
 801444c:	d10e      	bne.n	801446c <ethernet_input+0x104>
        etharp_input(p, netif);
 801444e:	6839      	ldr	r1, [r7, #0]
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f7fe f831 	bl	80124b8 <etharp_input>
      break;
 8014456:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014458:	2300      	movs	r3, #0
 801445a:	e00c      	b.n	8014476 <ethernet_input+0x10e>
    goto free_and_return;
 801445c:	bf00      	nop
 801445e:	e006      	b.n	801446e <ethernet_input+0x106>
        goto free_and_return;
 8014460:	bf00      	nop
 8014462:	e004      	b.n	801446e <ethernet_input+0x106>
        goto free_and_return;
 8014464:	bf00      	nop
 8014466:	e002      	b.n	801446e <ethernet_input+0x106>
        goto free_and_return;
 8014468:	bf00      	nop
 801446a:	e000      	b.n	801446e <ethernet_input+0x106>
        goto free_and_return;
 801446c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801446e:	6878      	ldr	r0, [r7, #4]
 8014470:	f7f7 fad0 	bl	800ba14 <pbuf_free>
  return ERR_OK;
 8014474:	2300      	movs	r3, #0
}
 8014476:	4618      	mov	r0, r3
 8014478:	3718      	adds	r7, #24
 801447a:	46bd      	mov	sp, r7
 801447c:	bd80      	pop	{r7, pc}
 801447e:	bf00      	nop
 8014480:	08018c94 	.word	0x08018c94

08014484 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014484:	b580      	push	{r7, lr}
 8014486:	b086      	sub	sp, #24
 8014488:	af00      	add	r7, sp, #0
 801448a:	60f8      	str	r0, [r7, #12]
 801448c:	60b9      	str	r1, [r7, #8]
 801448e:	607a      	str	r2, [r7, #4]
 8014490:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014492:	8c3b      	ldrh	r3, [r7, #32]
 8014494:	4618      	mov	r0, r3
 8014496:	f7f5 fecb 	bl	800a230 <lwip_htons>
 801449a:	4603      	mov	r3, r0
 801449c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801449e:	210e      	movs	r1, #14
 80144a0:	68b8      	ldr	r0, [r7, #8]
 80144a2:	f7f7 fa21 	bl	800b8e8 <pbuf_add_header>
 80144a6:	4603      	mov	r3, r0
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d125      	bne.n	80144f8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	685b      	ldr	r3, [r3, #4]
 80144b0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	8afa      	ldrh	r2, [r7, #22]
 80144b6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80144b8:	693b      	ldr	r3, [r7, #16]
 80144ba:	2206      	movs	r2, #6
 80144bc:	6839      	ldr	r1, [r7, #0]
 80144be:	4618      	mov	r0, r3
 80144c0:	f000 fb3f 	bl	8014b42 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80144c4:	693b      	ldr	r3, [r7, #16]
 80144c6:	3306      	adds	r3, #6
 80144c8:	2206      	movs	r2, #6
 80144ca:	6879      	ldr	r1, [r7, #4]
 80144cc:	4618      	mov	r0, r3
 80144ce:	f000 fb38 	bl	8014b42 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80144d8:	2b06      	cmp	r3, #6
 80144da:	d006      	beq.n	80144ea <ethernet_output+0x66>
 80144dc:	4b0a      	ldr	r3, [pc, #40]	; (8014508 <ethernet_output+0x84>)
 80144de:	f44f 7299 	mov.w	r2, #306	; 0x132
 80144e2:	490a      	ldr	r1, [pc, #40]	; (801450c <ethernet_output+0x88>)
 80144e4:	480a      	ldr	r0, [pc, #40]	; (8014510 <ethernet_output+0x8c>)
 80144e6:	f000 fc3d 	bl	8014d64 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	699b      	ldr	r3, [r3, #24]
 80144ee:	68b9      	ldr	r1, [r7, #8]
 80144f0:	68f8      	ldr	r0, [r7, #12]
 80144f2:	4798      	blx	r3
 80144f4:	4603      	mov	r3, r0
 80144f6:	e002      	b.n	80144fe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80144f8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80144fa:	f06f 0301 	mvn.w	r3, #1
}
 80144fe:	4618      	mov	r0, r3
 8014500:	3718      	adds	r7, #24
 8014502:	46bd      	mov	sp, r7
 8014504:	bd80      	pop	{r7, pc}
 8014506:	bf00      	nop
 8014508:	08018ac8 	.word	0x08018ac8
 801450c:	08018b00 	.word	0x08018b00
 8014510:	08018b34 	.word	0x08018b34

08014514 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b086      	sub	sp, #24
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	60bb      	str	r3, [r7, #8]
 8014522:	2304      	movs	r3, #4
 8014524:	60fb      	str	r3, [r7, #12]
 8014526:	2300      	movs	r3, #0
 8014528:	613b      	str	r3, [r7, #16]
 801452a:	2300      	movs	r3, #0
 801452c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801452e:	f107 0308 	add.w	r3, r7, #8
 8014532:	2100      	movs	r1, #0
 8014534:	4618      	mov	r0, r3
 8014536:	f7f2 fbfd 	bl	8006d34 <osMessageCreate>
 801453a:	4602      	mov	r2, r0
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d102      	bne.n	801454e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8014548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801454c:	e000      	b.n	8014550 <sys_mbox_new+0x3c>

  return ERR_OK;
 801454e:	2300      	movs	r3, #0
}
 8014550:	4618      	mov	r0, r3
 8014552:	3718      	adds	r7, #24
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}

08014558 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b084      	sub	sp, #16
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
 8014560:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	6839      	ldr	r1, [r7, #0]
 8014568:	2200      	movs	r2, #0
 801456a:	4618      	mov	r0, r3
 801456c:	f7f2 fc0a 	bl	8006d84 <osMessagePut>
 8014570:	4603      	mov	r3, r0
 8014572:	2b00      	cmp	r3, #0
 8014574:	d102      	bne.n	801457c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8014576:	2300      	movs	r3, #0
 8014578:	73fb      	strb	r3, [r7, #15]
 801457a:	e001      	b.n	8014580 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801457c:	23ff      	movs	r3, #255	; 0xff
 801457e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014580:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014584:	4618      	mov	r0, r3
 8014586:	3710      	adds	r7, #16
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}

0801458c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b08c      	sub	sp, #48	; 0x30
 8014590:	af00      	add	r7, sp, #0
 8014592:	61f8      	str	r0, [r7, #28]
 8014594:	61b9      	str	r1, [r7, #24]
 8014596:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014598:	f7f2 fa3c 	bl	8006a14 <osKernelSysTick>
 801459c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801459e:	697b      	ldr	r3, [r7, #20]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d017      	beq.n	80145d4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80145a4:	69fb      	ldr	r3, [r7, #28]
 80145a6:	6819      	ldr	r1, [r3, #0]
 80145a8:	f107 0320 	add.w	r3, r7, #32
 80145ac:	697a      	ldr	r2, [r7, #20]
 80145ae:	4618      	mov	r0, r3
 80145b0:	f7f2 fc28 	bl	8006e04 <osMessageGet>

    if(event.status == osEventMessage)
 80145b4:	6a3b      	ldr	r3, [r7, #32]
 80145b6:	2b10      	cmp	r3, #16
 80145b8:	d109      	bne.n	80145ce <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80145ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145bc:	461a      	mov	r2, r3
 80145be:	69bb      	ldr	r3, [r7, #24]
 80145c0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80145c2:	f7f2 fa27 	bl	8006a14 <osKernelSysTick>
 80145c6:	4602      	mov	r2, r0
 80145c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ca:	1ad3      	subs	r3, r2, r3
 80145cc:	e019      	b.n	8014602 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80145ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145d2:	e016      	b.n	8014602 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80145d4:	69fb      	ldr	r3, [r7, #28]
 80145d6:	6819      	ldr	r1, [r3, #0]
 80145d8:	463b      	mov	r3, r7
 80145da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80145de:	4618      	mov	r0, r3
 80145e0:	f7f2 fc10 	bl	8006e04 <osMessageGet>
 80145e4:	f107 0320 	add.w	r3, r7, #32
 80145e8:	463a      	mov	r2, r7
 80145ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80145ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80145f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145f2:	461a      	mov	r2, r3
 80145f4:	69bb      	ldr	r3, [r7, #24]
 80145f6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80145f8:	f7f2 fa0c 	bl	8006a14 <osKernelSysTick>
 80145fc:	4602      	mov	r2, r0
 80145fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014600:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014602:	4618      	mov	r0, r3
 8014604:	3730      	adds	r7, #48	; 0x30
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}

0801460a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801460a:	b480      	push	{r7}
 801460c:	b083      	sub	sp, #12
 801460e:	af00      	add	r7, sp, #0
 8014610:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d101      	bne.n	801461e <sys_mbox_valid+0x14>
    return 0;
 801461a:	2300      	movs	r3, #0
 801461c:	e000      	b.n	8014620 <sys_mbox_valid+0x16>
  else
    return 1;
 801461e:	2301      	movs	r3, #1
}
 8014620:	4618      	mov	r0, r3
 8014622:	370c      	adds	r7, #12
 8014624:	46bd      	mov	sp, r7
 8014626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462a:	4770      	bx	lr

0801462c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8014630:	4803      	ldr	r0, [pc, #12]	; (8014640 <sys_init+0x14>)
 8014632:	f7f2 fa5f 	bl	8006af4 <osMutexCreate>
 8014636:	4603      	mov	r3, r0
 8014638:	4a02      	ldr	r2, [pc, #8]	; (8014644 <sys_init+0x18>)
 801463a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801463c:	bf00      	nop
 801463e:	bd80      	pop	{r7, pc}
 8014640:	08018ca4 	.word	0x08018ca4
 8014644:	20017bd0 	.word	0x20017bd0

08014648 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014648:	b580      	push	{r7, lr}
 801464a:	b084      	sub	sp, #16
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8014650:	2300      	movs	r3, #0
 8014652:	60bb      	str	r3, [r7, #8]
 8014654:	2300      	movs	r3, #0
 8014656:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014658:	f107 0308 	add.w	r3, r7, #8
 801465c:	4618      	mov	r0, r3
 801465e:	f7f2 fa49 	bl	8006af4 <osMutexCreate>
 8014662:	4602      	mov	r2, r0
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d102      	bne.n	8014676 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014674:	e000      	b.n	8014678 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014676:	2300      	movs	r3, #0
}
 8014678:	4618      	mov	r0, r3
 801467a:	3710      	adds	r7, #16
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}

08014680 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b082      	sub	sp, #8
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014690:	4618      	mov	r0, r3
 8014692:	f7f2 fa47 	bl	8006b24 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8014696:	bf00      	nop
 8014698:	3708      	adds	r7, #8
 801469a:	46bd      	mov	sp, r7
 801469c:	bd80      	pop	{r7, pc}

0801469e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801469e:	b580      	push	{r7, lr}
 80146a0:	b082      	sub	sp, #8
 80146a2:	af00      	add	r7, sp, #0
 80146a4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	4618      	mov	r0, r3
 80146ac:	f7f2 fa88 	bl	8006bc0 <osMutexRelease>
}
 80146b0:	bf00      	nop
 80146b2:	3708      	adds	r7, #8
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}

080146b8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b08c      	sub	sp, #48	; 0x30
 80146bc:	af00      	add	r7, sp, #0
 80146be:	60f8      	str	r0, [r7, #12]
 80146c0:	60b9      	str	r1, [r7, #8]
 80146c2:	607a      	str	r2, [r7, #4]
 80146c4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80146c6:	f107 0314 	add.w	r3, r7, #20
 80146ca:	2200      	movs	r2, #0
 80146cc:	601a      	str	r2, [r3, #0]
 80146ce:	605a      	str	r2, [r3, #4]
 80146d0:	609a      	str	r2, [r3, #8]
 80146d2:	60da      	str	r2, [r3, #12]
 80146d4:	611a      	str	r2, [r3, #16]
 80146d6:	615a      	str	r2, [r3, #20]
 80146d8:	619a      	str	r2, [r3, #24]
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	617b      	str	r3, [r7, #20]
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	61bb      	str	r3, [r7, #24]
 80146e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146e4:	b21b      	sxth	r3, r3
 80146e6:	83bb      	strh	r3, [r7, #28]
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80146ec:	f107 0314 	add.w	r3, r7, #20
 80146f0:	6879      	ldr	r1, [r7, #4]
 80146f2:	4618      	mov	r0, r3
 80146f4:	f7f2 f99e 	bl	8006a34 <osThreadCreate>
 80146f8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80146fa:	4618      	mov	r0, r3
 80146fc:	3730      	adds	r7, #48	; 0x30
 80146fe:	46bd      	mov	sp, r7
 8014700:	bd80      	pop	{r7, pc}
	...

08014704 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014708:	4b04      	ldr	r3, [pc, #16]	; (801471c <sys_arch_protect+0x18>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014710:	4618      	mov	r0, r3
 8014712:	f7f2 fa07 	bl	8006b24 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8014716:	2301      	movs	r3, #1
}
 8014718:	4618      	mov	r0, r3
 801471a:	bd80      	pop	{r7, pc}
 801471c:	20017bd0 	.word	0x20017bd0

08014720 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b082      	sub	sp, #8
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014728:	4b04      	ldr	r3, [pc, #16]	; (801473c <sys_arch_unprotect+0x1c>)
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	4618      	mov	r0, r3
 801472e:	f7f2 fa47 	bl	8006bc0 <osMutexRelease>
}
 8014732:	bf00      	nop
 8014734:	3708      	adds	r7, #8
 8014736:	46bd      	mov	sp, r7
 8014738:	bd80      	pop	{r7, pc}
 801473a:	bf00      	nop
 801473c:	20017bd0 	.word	0x20017bd0

08014740 <__sflush_r>:
 8014740:	898a      	ldrh	r2, [r1, #12]
 8014742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014746:	4605      	mov	r5, r0
 8014748:	0710      	lsls	r0, r2, #28
 801474a:	460c      	mov	r4, r1
 801474c:	d458      	bmi.n	8014800 <__sflush_r+0xc0>
 801474e:	684b      	ldr	r3, [r1, #4]
 8014750:	2b00      	cmp	r3, #0
 8014752:	dc05      	bgt.n	8014760 <__sflush_r+0x20>
 8014754:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014756:	2b00      	cmp	r3, #0
 8014758:	dc02      	bgt.n	8014760 <__sflush_r+0x20>
 801475a:	2000      	movs	r0, #0
 801475c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014762:	2e00      	cmp	r6, #0
 8014764:	d0f9      	beq.n	801475a <__sflush_r+0x1a>
 8014766:	2300      	movs	r3, #0
 8014768:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801476c:	682f      	ldr	r7, [r5, #0]
 801476e:	602b      	str	r3, [r5, #0]
 8014770:	d032      	beq.n	80147d8 <__sflush_r+0x98>
 8014772:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014774:	89a3      	ldrh	r3, [r4, #12]
 8014776:	075a      	lsls	r2, r3, #29
 8014778:	d505      	bpl.n	8014786 <__sflush_r+0x46>
 801477a:	6863      	ldr	r3, [r4, #4]
 801477c:	1ac0      	subs	r0, r0, r3
 801477e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014780:	b10b      	cbz	r3, 8014786 <__sflush_r+0x46>
 8014782:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014784:	1ac0      	subs	r0, r0, r3
 8014786:	2300      	movs	r3, #0
 8014788:	4602      	mov	r2, r0
 801478a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801478c:	6a21      	ldr	r1, [r4, #32]
 801478e:	4628      	mov	r0, r5
 8014790:	47b0      	blx	r6
 8014792:	1c43      	adds	r3, r0, #1
 8014794:	89a3      	ldrh	r3, [r4, #12]
 8014796:	d106      	bne.n	80147a6 <__sflush_r+0x66>
 8014798:	6829      	ldr	r1, [r5, #0]
 801479a:	291d      	cmp	r1, #29
 801479c:	d82c      	bhi.n	80147f8 <__sflush_r+0xb8>
 801479e:	4a2a      	ldr	r2, [pc, #168]	; (8014848 <__sflush_r+0x108>)
 80147a0:	40ca      	lsrs	r2, r1
 80147a2:	07d6      	lsls	r6, r2, #31
 80147a4:	d528      	bpl.n	80147f8 <__sflush_r+0xb8>
 80147a6:	2200      	movs	r2, #0
 80147a8:	6062      	str	r2, [r4, #4]
 80147aa:	04d9      	lsls	r1, r3, #19
 80147ac:	6922      	ldr	r2, [r4, #16]
 80147ae:	6022      	str	r2, [r4, #0]
 80147b0:	d504      	bpl.n	80147bc <__sflush_r+0x7c>
 80147b2:	1c42      	adds	r2, r0, #1
 80147b4:	d101      	bne.n	80147ba <__sflush_r+0x7a>
 80147b6:	682b      	ldr	r3, [r5, #0]
 80147b8:	b903      	cbnz	r3, 80147bc <__sflush_r+0x7c>
 80147ba:	6560      	str	r0, [r4, #84]	; 0x54
 80147bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80147be:	602f      	str	r7, [r5, #0]
 80147c0:	2900      	cmp	r1, #0
 80147c2:	d0ca      	beq.n	801475a <__sflush_r+0x1a>
 80147c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80147c8:	4299      	cmp	r1, r3
 80147ca:	d002      	beq.n	80147d2 <__sflush_r+0x92>
 80147cc:	4628      	mov	r0, r5
 80147ce:	f000 f9e9 	bl	8014ba4 <_free_r>
 80147d2:	2000      	movs	r0, #0
 80147d4:	6360      	str	r0, [r4, #52]	; 0x34
 80147d6:	e7c1      	b.n	801475c <__sflush_r+0x1c>
 80147d8:	6a21      	ldr	r1, [r4, #32]
 80147da:	2301      	movs	r3, #1
 80147dc:	4628      	mov	r0, r5
 80147de:	47b0      	blx	r6
 80147e0:	1c41      	adds	r1, r0, #1
 80147e2:	d1c7      	bne.n	8014774 <__sflush_r+0x34>
 80147e4:	682b      	ldr	r3, [r5, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d0c4      	beq.n	8014774 <__sflush_r+0x34>
 80147ea:	2b1d      	cmp	r3, #29
 80147ec:	d001      	beq.n	80147f2 <__sflush_r+0xb2>
 80147ee:	2b16      	cmp	r3, #22
 80147f0:	d101      	bne.n	80147f6 <__sflush_r+0xb6>
 80147f2:	602f      	str	r7, [r5, #0]
 80147f4:	e7b1      	b.n	801475a <__sflush_r+0x1a>
 80147f6:	89a3      	ldrh	r3, [r4, #12]
 80147f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147fc:	81a3      	strh	r3, [r4, #12]
 80147fe:	e7ad      	b.n	801475c <__sflush_r+0x1c>
 8014800:	690f      	ldr	r7, [r1, #16]
 8014802:	2f00      	cmp	r7, #0
 8014804:	d0a9      	beq.n	801475a <__sflush_r+0x1a>
 8014806:	0793      	lsls	r3, r2, #30
 8014808:	680e      	ldr	r6, [r1, #0]
 801480a:	bf08      	it	eq
 801480c:	694b      	ldreq	r3, [r1, #20]
 801480e:	600f      	str	r7, [r1, #0]
 8014810:	bf18      	it	ne
 8014812:	2300      	movne	r3, #0
 8014814:	eba6 0807 	sub.w	r8, r6, r7
 8014818:	608b      	str	r3, [r1, #8]
 801481a:	f1b8 0f00 	cmp.w	r8, #0
 801481e:	dd9c      	ble.n	801475a <__sflush_r+0x1a>
 8014820:	6a21      	ldr	r1, [r4, #32]
 8014822:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014824:	4643      	mov	r3, r8
 8014826:	463a      	mov	r2, r7
 8014828:	4628      	mov	r0, r5
 801482a:	47b0      	blx	r6
 801482c:	2800      	cmp	r0, #0
 801482e:	dc06      	bgt.n	801483e <__sflush_r+0xfe>
 8014830:	89a3      	ldrh	r3, [r4, #12]
 8014832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014836:	81a3      	strh	r3, [r4, #12]
 8014838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801483c:	e78e      	b.n	801475c <__sflush_r+0x1c>
 801483e:	4407      	add	r7, r0
 8014840:	eba8 0800 	sub.w	r8, r8, r0
 8014844:	e7e9      	b.n	801481a <__sflush_r+0xda>
 8014846:	bf00      	nop
 8014848:	20400001 	.word	0x20400001

0801484c <_fflush_r>:
 801484c:	b538      	push	{r3, r4, r5, lr}
 801484e:	690b      	ldr	r3, [r1, #16]
 8014850:	4605      	mov	r5, r0
 8014852:	460c      	mov	r4, r1
 8014854:	b913      	cbnz	r3, 801485c <_fflush_r+0x10>
 8014856:	2500      	movs	r5, #0
 8014858:	4628      	mov	r0, r5
 801485a:	bd38      	pop	{r3, r4, r5, pc}
 801485c:	b118      	cbz	r0, 8014866 <_fflush_r+0x1a>
 801485e:	6983      	ldr	r3, [r0, #24]
 8014860:	b90b      	cbnz	r3, 8014866 <_fflush_r+0x1a>
 8014862:	f000 f899 	bl	8014998 <__sinit>
 8014866:	4b14      	ldr	r3, [pc, #80]	; (80148b8 <_fflush_r+0x6c>)
 8014868:	429c      	cmp	r4, r3
 801486a:	d11b      	bne.n	80148a4 <_fflush_r+0x58>
 801486c:	686c      	ldr	r4, [r5, #4]
 801486e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d0ef      	beq.n	8014856 <_fflush_r+0xa>
 8014876:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014878:	07d0      	lsls	r0, r2, #31
 801487a:	d404      	bmi.n	8014886 <_fflush_r+0x3a>
 801487c:	0599      	lsls	r1, r3, #22
 801487e:	d402      	bmi.n	8014886 <_fflush_r+0x3a>
 8014880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014882:	f000 f94c 	bl	8014b1e <__retarget_lock_acquire_recursive>
 8014886:	4628      	mov	r0, r5
 8014888:	4621      	mov	r1, r4
 801488a:	f7ff ff59 	bl	8014740 <__sflush_r>
 801488e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014890:	07da      	lsls	r2, r3, #31
 8014892:	4605      	mov	r5, r0
 8014894:	d4e0      	bmi.n	8014858 <_fflush_r+0xc>
 8014896:	89a3      	ldrh	r3, [r4, #12]
 8014898:	059b      	lsls	r3, r3, #22
 801489a:	d4dd      	bmi.n	8014858 <_fflush_r+0xc>
 801489c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801489e:	f000 f93f 	bl	8014b20 <__retarget_lock_release_recursive>
 80148a2:	e7d9      	b.n	8014858 <_fflush_r+0xc>
 80148a4:	4b05      	ldr	r3, [pc, #20]	; (80148bc <_fflush_r+0x70>)
 80148a6:	429c      	cmp	r4, r3
 80148a8:	d101      	bne.n	80148ae <_fflush_r+0x62>
 80148aa:	68ac      	ldr	r4, [r5, #8]
 80148ac:	e7df      	b.n	801486e <_fflush_r+0x22>
 80148ae:	4b04      	ldr	r3, [pc, #16]	; (80148c0 <_fflush_r+0x74>)
 80148b0:	429c      	cmp	r4, r3
 80148b2:	bf08      	it	eq
 80148b4:	68ec      	ldreq	r4, [r5, #12]
 80148b6:	e7da      	b.n	801486e <_fflush_r+0x22>
 80148b8:	08018ccc 	.word	0x08018ccc
 80148bc:	08018cec 	.word	0x08018cec
 80148c0:	08018cac 	.word	0x08018cac

080148c4 <fflush>:
 80148c4:	4601      	mov	r1, r0
 80148c6:	b920      	cbnz	r0, 80148d2 <fflush+0xe>
 80148c8:	4b04      	ldr	r3, [pc, #16]	; (80148dc <fflush+0x18>)
 80148ca:	4905      	ldr	r1, [pc, #20]	; (80148e0 <fflush+0x1c>)
 80148cc:	6818      	ldr	r0, [r3, #0]
 80148ce:	f000 b8e1 	b.w	8014a94 <_fwalk_reent>
 80148d2:	4b04      	ldr	r3, [pc, #16]	; (80148e4 <fflush+0x20>)
 80148d4:	6818      	ldr	r0, [r3, #0]
 80148d6:	f7ff bfb9 	b.w	801484c <_fflush_r>
 80148da:	bf00      	nop
 80148dc:	08018d0c 	.word	0x08018d0c
 80148e0:	0801484d 	.word	0x0801484d
 80148e4:	20000030 	.word	0x20000030

080148e8 <std>:
 80148e8:	2300      	movs	r3, #0
 80148ea:	b510      	push	{r4, lr}
 80148ec:	4604      	mov	r4, r0
 80148ee:	e9c0 3300 	strd	r3, r3, [r0]
 80148f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148f6:	6083      	str	r3, [r0, #8]
 80148f8:	8181      	strh	r1, [r0, #12]
 80148fa:	6643      	str	r3, [r0, #100]	; 0x64
 80148fc:	81c2      	strh	r2, [r0, #14]
 80148fe:	6183      	str	r3, [r0, #24]
 8014900:	4619      	mov	r1, r3
 8014902:	2208      	movs	r2, #8
 8014904:	305c      	adds	r0, #92	; 0x5c
 8014906:	f000 f944 	bl	8014b92 <memset>
 801490a:	4b05      	ldr	r3, [pc, #20]	; (8014920 <std+0x38>)
 801490c:	6263      	str	r3, [r4, #36]	; 0x24
 801490e:	4b05      	ldr	r3, [pc, #20]	; (8014924 <std+0x3c>)
 8014910:	62a3      	str	r3, [r4, #40]	; 0x28
 8014912:	4b05      	ldr	r3, [pc, #20]	; (8014928 <std+0x40>)
 8014914:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014916:	4b05      	ldr	r3, [pc, #20]	; (801492c <std+0x44>)
 8014918:	6224      	str	r4, [r4, #32]
 801491a:	6323      	str	r3, [r4, #48]	; 0x30
 801491c:	bd10      	pop	{r4, pc}
 801491e:	bf00      	nop
 8014920:	0801508d 	.word	0x0801508d
 8014924:	080150af 	.word	0x080150af
 8014928:	080150e7 	.word	0x080150e7
 801492c:	0801510b 	.word	0x0801510b

08014930 <_cleanup_r>:
 8014930:	4901      	ldr	r1, [pc, #4]	; (8014938 <_cleanup_r+0x8>)
 8014932:	f000 b8af 	b.w	8014a94 <_fwalk_reent>
 8014936:	bf00      	nop
 8014938:	0801484d 	.word	0x0801484d

0801493c <__sfmoreglue>:
 801493c:	b570      	push	{r4, r5, r6, lr}
 801493e:	2268      	movs	r2, #104	; 0x68
 8014940:	1e4d      	subs	r5, r1, #1
 8014942:	4355      	muls	r5, r2
 8014944:	460e      	mov	r6, r1
 8014946:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801494a:	f000 f997 	bl	8014c7c <_malloc_r>
 801494e:	4604      	mov	r4, r0
 8014950:	b140      	cbz	r0, 8014964 <__sfmoreglue+0x28>
 8014952:	2100      	movs	r1, #0
 8014954:	e9c0 1600 	strd	r1, r6, [r0]
 8014958:	300c      	adds	r0, #12
 801495a:	60a0      	str	r0, [r4, #8]
 801495c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014960:	f000 f917 	bl	8014b92 <memset>
 8014964:	4620      	mov	r0, r4
 8014966:	bd70      	pop	{r4, r5, r6, pc}

08014968 <__sfp_lock_acquire>:
 8014968:	4801      	ldr	r0, [pc, #4]	; (8014970 <__sfp_lock_acquire+0x8>)
 801496a:	f000 b8d8 	b.w	8014b1e <__retarget_lock_acquire_recursive>
 801496e:	bf00      	nop
 8014970:	20017bd5 	.word	0x20017bd5

08014974 <__sfp_lock_release>:
 8014974:	4801      	ldr	r0, [pc, #4]	; (801497c <__sfp_lock_release+0x8>)
 8014976:	f000 b8d3 	b.w	8014b20 <__retarget_lock_release_recursive>
 801497a:	bf00      	nop
 801497c:	20017bd5 	.word	0x20017bd5

08014980 <__sinit_lock_acquire>:
 8014980:	4801      	ldr	r0, [pc, #4]	; (8014988 <__sinit_lock_acquire+0x8>)
 8014982:	f000 b8cc 	b.w	8014b1e <__retarget_lock_acquire_recursive>
 8014986:	bf00      	nop
 8014988:	20017bd6 	.word	0x20017bd6

0801498c <__sinit_lock_release>:
 801498c:	4801      	ldr	r0, [pc, #4]	; (8014994 <__sinit_lock_release+0x8>)
 801498e:	f000 b8c7 	b.w	8014b20 <__retarget_lock_release_recursive>
 8014992:	bf00      	nop
 8014994:	20017bd6 	.word	0x20017bd6

08014998 <__sinit>:
 8014998:	b510      	push	{r4, lr}
 801499a:	4604      	mov	r4, r0
 801499c:	f7ff fff0 	bl	8014980 <__sinit_lock_acquire>
 80149a0:	69a3      	ldr	r3, [r4, #24]
 80149a2:	b11b      	cbz	r3, 80149ac <__sinit+0x14>
 80149a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149a8:	f7ff bff0 	b.w	801498c <__sinit_lock_release>
 80149ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80149b0:	6523      	str	r3, [r4, #80]	; 0x50
 80149b2:	4b13      	ldr	r3, [pc, #76]	; (8014a00 <__sinit+0x68>)
 80149b4:	4a13      	ldr	r2, [pc, #76]	; (8014a04 <__sinit+0x6c>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80149ba:	42a3      	cmp	r3, r4
 80149bc:	bf04      	itt	eq
 80149be:	2301      	moveq	r3, #1
 80149c0:	61a3      	streq	r3, [r4, #24]
 80149c2:	4620      	mov	r0, r4
 80149c4:	f000 f820 	bl	8014a08 <__sfp>
 80149c8:	6060      	str	r0, [r4, #4]
 80149ca:	4620      	mov	r0, r4
 80149cc:	f000 f81c 	bl	8014a08 <__sfp>
 80149d0:	60a0      	str	r0, [r4, #8]
 80149d2:	4620      	mov	r0, r4
 80149d4:	f000 f818 	bl	8014a08 <__sfp>
 80149d8:	2200      	movs	r2, #0
 80149da:	60e0      	str	r0, [r4, #12]
 80149dc:	2104      	movs	r1, #4
 80149de:	6860      	ldr	r0, [r4, #4]
 80149e0:	f7ff ff82 	bl	80148e8 <std>
 80149e4:	68a0      	ldr	r0, [r4, #8]
 80149e6:	2201      	movs	r2, #1
 80149e8:	2109      	movs	r1, #9
 80149ea:	f7ff ff7d 	bl	80148e8 <std>
 80149ee:	68e0      	ldr	r0, [r4, #12]
 80149f0:	2202      	movs	r2, #2
 80149f2:	2112      	movs	r1, #18
 80149f4:	f7ff ff78 	bl	80148e8 <std>
 80149f8:	2301      	movs	r3, #1
 80149fa:	61a3      	str	r3, [r4, #24]
 80149fc:	e7d2      	b.n	80149a4 <__sinit+0xc>
 80149fe:	bf00      	nop
 8014a00:	08018d0c 	.word	0x08018d0c
 8014a04:	08014931 	.word	0x08014931

08014a08 <__sfp>:
 8014a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a0a:	4607      	mov	r7, r0
 8014a0c:	f7ff ffac 	bl	8014968 <__sfp_lock_acquire>
 8014a10:	4b1e      	ldr	r3, [pc, #120]	; (8014a8c <__sfp+0x84>)
 8014a12:	681e      	ldr	r6, [r3, #0]
 8014a14:	69b3      	ldr	r3, [r6, #24]
 8014a16:	b913      	cbnz	r3, 8014a1e <__sfp+0x16>
 8014a18:	4630      	mov	r0, r6
 8014a1a:	f7ff ffbd 	bl	8014998 <__sinit>
 8014a1e:	3648      	adds	r6, #72	; 0x48
 8014a20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014a24:	3b01      	subs	r3, #1
 8014a26:	d503      	bpl.n	8014a30 <__sfp+0x28>
 8014a28:	6833      	ldr	r3, [r6, #0]
 8014a2a:	b30b      	cbz	r3, 8014a70 <__sfp+0x68>
 8014a2c:	6836      	ldr	r6, [r6, #0]
 8014a2e:	e7f7      	b.n	8014a20 <__sfp+0x18>
 8014a30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014a34:	b9d5      	cbnz	r5, 8014a6c <__sfp+0x64>
 8014a36:	4b16      	ldr	r3, [pc, #88]	; (8014a90 <__sfp+0x88>)
 8014a38:	60e3      	str	r3, [r4, #12]
 8014a3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014a3e:	6665      	str	r5, [r4, #100]	; 0x64
 8014a40:	f000 f86c 	bl	8014b1c <__retarget_lock_init_recursive>
 8014a44:	f7ff ff96 	bl	8014974 <__sfp_lock_release>
 8014a48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014a4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014a50:	6025      	str	r5, [r4, #0]
 8014a52:	61a5      	str	r5, [r4, #24]
 8014a54:	2208      	movs	r2, #8
 8014a56:	4629      	mov	r1, r5
 8014a58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014a5c:	f000 f899 	bl	8014b92 <memset>
 8014a60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014a64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014a68:	4620      	mov	r0, r4
 8014a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a6c:	3468      	adds	r4, #104	; 0x68
 8014a6e:	e7d9      	b.n	8014a24 <__sfp+0x1c>
 8014a70:	2104      	movs	r1, #4
 8014a72:	4638      	mov	r0, r7
 8014a74:	f7ff ff62 	bl	801493c <__sfmoreglue>
 8014a78:	4604      	mov	r4, r0
 8014a7a:	6030      	str	r0, [r6, #0]
 8014a7c:	2800      	cmp	r0, #0
 8014a7e:	d1d5      	bne.n	8014a2c <__sfp+0x24>
 8014a80:	f7ff ff78 	bl	8014974 <__sfp_lock_release>
 8014a84:	230c      	movs	r3, #12
 8014a86:	603b      	str	r3, [r7, #0]
 8014a88:	e7ee      	b.n	8014a68 <__sfp+0x60>
 8014a8a:	bf00      	nop
 8014a8c:	08018d0c 	.word	0x08018d0c
 8014a90:	ffff0001 	.word	0xffff0001

08014a94 <_fwalk_reent>:
 8014a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a98:	4606      	mov	r6, r0
 8014a9a:	4688      	mov	r8, r1
 8014a9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014aa0:	2700      	movs	r7, #0
 8014aa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014aa6:	f1b9 0901 	subs.w	r9, r9, #1
 8014aaa:	d505      	bpl.n	8014ab8 <_fwalk_reent+0x24>
 8014aac:	6824      	ldr	r4, [r4, #0]
 8014aae:	2c00      	cmp	r4, #0
 8014ab0:	d1f7      	bne.n	8014aa2 <_fwalk_reent+0xe>
 8014ab2:	4638      	mov	r0, r7
 8014ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ab8:	89ab      	ldrh	r3, [r5, #12]
 8014aba:	2b01      	cmp	r3, #1
 8014abc:	d907      	bls.n	8014ace <_fwalk_reent+0x3a>
 8014abe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ac2:	3301      	adds	r3, #1
 8014ac4:	d003      	beq.n	8014ace <_fwalk_reent+0x3a>
 8014ac6:	4629      	mov	r1, r5
 8014ac8:	4630      	mov	r0, r6
 8014aca:	47c0      	blx	r8
 8014acc:	4307      	orrs	r7, r0
 8014ace:	3568      	adds	r5, #104	; 0x68
 8014ad0:	e7e9      	b.n	8014aa6 <_fwalk_reent+0x12>
	...

08014ad4 <__libc_init_array>:
 8014ad4:	b570      	push	{r4, r5, r6, lr}
 8014ad6:	4d0d      	ldr	r5, [pc, #52]	; (8014b0c <__libc_init_array+0x38>)
 8014ad8:	4c0d      	ldr	r4, [pc, #52]	; (8014b10 <__libc_init_array+0x3c>)
 8014ada:	1b64      	subs	r4, r4, r5
 8014adc:	10a4      	asrs	r4, r4, #2
 8014ade:	2600      	movs	r6, #0
 8014ae0:	42a6      	cmp	r6, r4
 8014ae2:	d109      	bne.n	8014af8 <__libc_init_array+0x24>
 8014ae4:	4d0b      	ldr	r5, [pc, #44]	; (8014b14 <__libc_init_array+0x40>)
 8014ae6:	4c0c      	ldr	r4, [pc, #48]	; (8014b18 <__libc_init_array+0x44>)
 8014ae8:	f001 f9e8 	bl	8015ebc <_init>
 8014aec:	1b64      	subs	r4, r4, r5
 8014aee:	10a4      	asrs	r4, r4, #2
 8014af0:	2600      	movs	r6, #0
 8014af2:	42a6      	cmp	r6, r4
 8014af4:	d105      	bne.n	8014b02 <__libc_init_array+0x2e>
 8014af6:	bd70      	pop	{r4, r5, r6, pc}
 8014af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8014afc:	4798      	blx	r3
 8014afe:	3601      	adds	r6, #1
 8014b00:	e7ee      	b.n	8014ae0 <__libc_init_array+0xc>
 8014b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b06:	4798      	blx	r3
 8014b08:	3601      	adds	r6, #1
 8014b0a:	e7f2      	b.n	8014af2 <__libc_init_array+0x1e>
 8014b0c:	08018dfc 	.word	0x08018dfc
 8014b10:	08018dfc 	.word	0x08018dfc
 8014b14:	08018dfc 	.word	0x08018dfc
 8014b18:	08018e00 	.word	0x08018e00

08014b1c <__retarget_lock_init_recursive>:
 8014b1c:	4770      	bx	lr

08014b1e <__retarget_lock_acquire_recursive>:
 8014b1e:	4770      	bx	lr

08014b20 <__retarget_lock_release_recursive>:
 8014b20:	4770      	bx	lr

08014b22 <memcmp>:
 8014b22:	b510      	push	{r4, lr}
 8014b24:	3901      	subs	r1, #1
 8014b26:	4402      	add	r2, r0
 8014b28:	4290      	cmp	r0, r2
 8014b2a:	d101      	bne.n	8014b30 <memcmp+0xe>
 8014b2c:	2000      	movs	r0, #0
 8014b2e:	e005      	b.n	8014b3c <memcmp+0x1a>
 8014b30:	7803      	ldrb	r3, [r0, #0]
 8014b32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014b36:	42a3      	cmp	r3, r4
 8014b38:	d001      	beq.n	8014b3e <memcmp+0x1c>
 8014b3a:	1b18      	subs	r0, r3, r4
 8014b3c:	bd10      	pop	{r4, pc}
 8014b3e:	3001      	adds	r0, #1
 8014b40:	e7f2      	b.n	8014b28 <memcmp+0x6>

08014b42 <memcpy>:
 8014b42:	440a      	add	r2, r1
 8014b44:	4291      	cmp	r1, r2
 8014b46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014b4a:	d100      	bne.n	8014b4e <memcpy+0xc>
 8014b4c:	4770      	bx	lr
 8014b4e:	b510      	push	{r4, lr}
 8014b50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014b58:	4291      	cmp	r1, r2
 8014b5a:	d1f9      	bne.n	8014b50 <memcpy+0xe>
 8014b5c:	bd10      	pop	{r4, pc}

08014b5e <memmove>:
 8014b5e:	4288      	cmp	r0, r1
 8014b60:	b510      	push	{r4, lr}
 8014b62:	eb01 0402 	add.w	r4, r1, r2
 8014b66:	d902      	bls.n	8014b6e <memmove+0x10>
 8014b68:	4284      	cmp	r4, r0
 8014b6a:	4623      	mov	r3, r4
 8014b6c:	d807      	bhi.n	8014b7e <memmove+0x20>
 8014b6e:	1e43      	subs	r3, r0, #1
 8014b70:	42a1      	cmp	r1, r4
 8014b72:	d008      	beq.n	8014b86 <memmove+0x28>
 8014b74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014b78:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014b7c:	e7f8      	b.n	8014b70 <memmove+0x12>
 8014b7e:	4402      	add	r2, r0
 8014b80:	4601      	mov	r1, r0
 8014b82:	428a      	cmp	r2, r1
 8014b84:	d100      	bne.n	8014b88 <memmove+0x2a>
 8014b86:	bd10      	pop	{r4, pc}
 8014b88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014b8c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014b90:	e7f7      	b.n	8014b82 <memmove+0x24>

08014b92 <memset>:
 8014b92:	4402      	add	r2, r0
 8014b94:	4603      	mov	r3, r0
 8014b96:	4293      	cmp	r3, r2
 8014b98:	d100      	bne.n	8014b9c <memset+0xa>
 8014b9a:	4770      	bx	lr
 8014b9c:	f803 1b01 	strb.w	r1, [r3], #1
 8014ba0:	e7f9      	b.n	8014b96 <memset+0x4>
	...

08014ba4 <_free_r>:
 8014ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ba6:	2900      	cmp	r1, #0
 8014ba8:	d044      	beq.n	8014c34 <_free_r+0x90>
 8014baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014bae:	9001      	str	r0, [sp, #4]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	f1a1 0404 	sub.w	r4, r1, #4
 8014bb6:	bfb8      	it	lt
 8014bb8:	18e4      	addlt	r4, r4, r3
 8014bba:	f000 fc69 	bl	8015490 <__malloc_lock>
 8014bbe:	4a1e      	ldr	r2, [pc, #120]	; (8014c38 <_free_r+0x94>)
 8014bc0:	9801      	ldr	r0, [sp, #4]
 8014bc2:	6813      	ldr	r3, [r2, #0]
 8014bc4:	b933      	cbnz	r3, 8014bd4 <_free_r+0x30>
 8014bc6:	6063      	str	r3, [r4, #4]
 8014bc8:	6014      	str	r4, [r2, #0]
 8014bca:	b003      	add	sp, #12
 8014bcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014bd0:	f000 bc64 	b.w	801549c <__malloc_unlock>
 8014bd4:	42a3      	cmp	r3, r4
 8014bd6:	d908      	bls.n	8014bea <_free_r+0x46>
 8014bd8:	6825      	ldr	r5, [r4, #0]
 8014bda:	1961      	adds	r1, r4, r5
 8014bdc:	428b      	cmp	r3, r1
 8014bde:	bf01      	itttt	eq
 8014be0:	6819      	ldreq	r1, [r3, #0]
 8014be2:	685b      	ldreq	r3, [r3, #4]
 8014be4:	1949      	addeq	r1, r1, r5
 8014be6:	6021      	streq	r1, [r4, #0]
 8014be8:	e7ed      	b.n	8014bc6 <_free_r+0x22>
 8014bea:	461a      	mov	r2, r3
 8014bec:	685b      	ldr	r3, [r3, #4]
 8014bee:	b10b      	cbz	r3, 8014bf4 <_free_r+0x50>
 8014bf0:	42a3      	cmp	r3, r4
 8014bf2:	d9fa      	bls.n	8014bea <_free_r+0x46>
 8014bf4:	6811      	ldr	r1, [r2, #0]
 8014bf6:	1855      	adds	r5, r2, r1
 8014bf8:	42a5      	cmp	r5, r4
 8014bfa:	d10b      	bne.n	8014c14 <_free_r+0x70>
 8014bfc:	6824      	ldr	r4, [r4, #0]
 8014bfe:	4421      	add	r1, r4
 8014c00:	1854      	adds	r4, r2, r1
 8014c02:	42a3      	cmp	r3, r4
 8014c04:	6011      	str	r1, [r2, #0]
 8014c06:	d1e0      	bne.n	8014bca <_free_r+0x26>
 8014c08:	681c      	ldr	r4, [r3, #0]
 8014c0a:	685b      	ldr	r3, [r3, #4]
 8014c0c:	6053      	str	r3, [r2, #4]
 8014c0e:	4421      	add	r1, r4
 8014c10:	6011      	str	r1, [r2, #0]
 8014c12:	e7da      	b.n	8014bca <_free_r+0x26>
 8014c14:	d902      	bls.n	8014c1c <_free_r+0x78>
 8014c16:	230c      	movs	r3, #12
 8014c18:	6003      	str	r3, [r0, #0]
 8014c1a:	e7d6      	b.n	8014bca <_free_r+0x26>
 8014c1c:	6825      	ldr	r5, [r4, #0]
 8014c1e:	1961      	adds	r1, r4, r5
 8014c20:	428b      	cmp	r3, r1
 8014c22:	bf04      	itt	eq
 8014c24:	6819      	ldreq	r1, [r3, #0]
 8014c26:	685b      	ldreq	r3, [r3, #4]
 8014c28:	6063      	str	r3, [r4, #4]
 8014c2a:	bf04      	itt	eq
 8014c2c:	1949      	addeq	r1, r1, r5
 8014c2e:	6021      	streq	r1, [r4, #0]
 8014c30:	6054      	str	r4, [r2, #4]
 8014c32:	e7ca      	b.n	8014bca <_free_r+0x26>
 8014c34:	b003      	add	sp, #12
 8014c36:	bd30      	pop	{r4, r5, pc}
 8014c38:	20017bd8 	.word	0x20017bd8

08014c3c <sbrk_aligned>:
 8014c3c:	b570      	push	{r4, r5, r6, lr}
 8014c3e:	4e0e      	ldr	r6, [pc, #56]	; (8014c78 <sbrk_aligned+0x3c>)
 8014c40:	460c      	mov	r4, r1
 8014c42:	6831      	ldr	r1, [r6, #0]
 8014c44:	4605      	mov	r5, r0
 8014c46:	b911      	cbnz	r1, 8014c4e <sbrk_aligned+0x12>
 8014c48:	f000 f9f0 	bl	801502c <_sbrk_r>
 8014c4c:	6030      	str	r0, [r6, #0]
 8014c4e:	4621      	mov	r1, r4
 8014c50:	4628      	mov	r0, r5
 8014c52:	f000 f9eb 	bl	801502c <_sbrk_r>
 8014c56:	1c43      	adds	r3, r0, #1
 8014c58:	d00a      	beq.n	8014c70 <sbrk_aligned+0x34>
 8014c5a:	1cc4      	adds	r4, r0, #3
 8014c5c:	f024 0403 	bic.w	r4, r4, #3
 8014c60:	42a0      	cmp	r0, r4
 8014c62:	d007      	beq.n	8014c74 <sbrk_aligned+0x38>
 8014c64:	1a21      	subs	r1, r4, r0
 8014c66:	4628      	mov	r0, r5
 8014c68:	f000 f9e0 	bl	801502c <_sbrk_r>
 8014c6c:	3001      	adds	r0, #1
 8014c6e:	d101      	bne.n	8014c74 <sbrk_aligned+0x38>
 8014c70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014c74:	4620      	mov	r0, r4
 8014c76:	bd70      	pop	{r4, r5, r6, pc}
 8014c78:	20017bdc 	.word	0x20017bdc

08014c7c <_malloc_r>:
 8014c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c80:	1ccd      	adds	r5, r1, #3
 8014c82:	f025 0503 	bic.w	r5, r5, #3
 8014c86:	3508      	adds	r5, #8
 8014c88:	2d0c      	cmp	r5, #12
 8014c8a:	bf38      	it	cc
 8014c8c:	250c      	movcc	r5, #12
 8014c8e:	2d00      	cmp	r5, #0
 8014c90:	4607      	mov	r7, r0
 8014c92:	db01      	blt.n	8014c98 <_malloc_r+0x1c>
 8014c94:	42a9      	cmp	r1, r5
 8014c96:	d905      	bls.n	8014ca4 <_malloc_r+0x28>
 8014c98:	230c      	movs	r3, #12
 8014c9a:	603b      	str	r3, [r7, #0]
 8014c9c:	2600      	movs	r6, #0
 8014c9e:	4630      	mov	r0, r6
 8014ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ca4:	4e2e      	ldr	r6, [pc, #184]	; (8014d60 <_malloc_r+0xe4>)
 8014ca6:	f000 fbf3 	bl	8015490 <__malloc_lock>
 8014caa:	6833      	ldr	r3, [r6, #0]
 8014cac:	461c      	mov	r4, r3
 8014cae:	bb34      	cbnz	r4, 8014cfe <_malloc_r+0x82>
 8014cb0:	4629      	mov	r1, r5
 8014cb2:	4638      	mov	r0, r7
 8014cb4:	f7ff ffc2 	bl	8014c3c <sbrk_aligned>
 8014cb8:	1c43      	adds	r3, r0, #1
 8014cba:	4604      	mov	r4, r0
 8014cbc:	d14d      	bne.n	8014d5a <_malloc_r+0xde>
 8014cbe:	6834      	ldr	r4, [r6, #0]
 8014cc0:	4626      	mov	r6, r4
 8014cc2:	2e00      	cmp	r6, #0
 8014cc4:	d140      	bne.n	8014d48 <_malloc_r+0xcc>
 8014cc6:	6823      	ldr	r3, [r4, #0]
 8014cc8:	4631      	mov	r1, r6
 8014cca:	4638      	mov	r0, r7
 8014ccc:	eb04 0803 	add.w	r8, r4, r3
 8014cd0:	f000 f9ac 	bl	801502c <_sbrk_r>
 8014cd4:	4580      	cmp	r8, r0
 8014cd6:	d13a      	bne.n	8014d4e <_malloc_r+0xd2>
 8014cd8:	6821      	ldr	r1, [r4, #0]
 8014cda:	3503      	adds	r5, #3
 8014cdc:	1a6d      	subs	r5, r5, r1
 8014cde:	f025 0503 	bic.w	r5, r5, #3
 8014ce2:	3508      	adds	r5, #8
 8014ce4:	2d0c      	cmp	r5, #12
 8014ce6:	bf38      	it	cc
 8014ce8:	250c      	movcc	r5, #12
 8014cea:	4629      	mov	r1, r5
 8014cec:	4638      	mov	r0, r7
 8014cee:	f7ff ffa5 	bl	8014c3c <sbrk_aligned>
 8014cf2:	3001      	adds	r0, #1
 8014cf4:	d02b      	beq.n	8014d4e <_malloc_r+0xd2>
 8014cf6:	6823      	ldr	r3, [r4, #0]
 8014cf8:	442b      	add	r3, r5
 8014cfa:	6023      	str	r3, [r4, #0]
 8014cfc:	e00e      	b.n	8014d1c <_malloc_r+0xa0>
 8014cfe:	6822      	ldr	r2, [r4, #0]
 8014d00:	1b52      	subs	r2, r2, r5
 8014d02:	d41e      	bmi.n	8014d42 <_malloc_r+0xc6>
 8014d04:	2a0b      	cmp	r2, #11
 8014d06:	d916      	bls.n	8014d36 <_malloc_r+0xba>
 8014d08:	1961      	adds	r1, r4, r5
 8014d0a:	42a3      	cmp	r3, r4
 8014d0c:	6025      	str	r5, [r4, #0]
 8014d0e:	bf18      	it	ne
 8014d10:	6059      	strne	r1, [r3, #4]
 8014d12:	6863      	ldr	r3, [r4, #4]
 8014d14:	bf08      	it	eq
 8014d16:	6031      	streq	r1, [r6, #0]
 8014d18:	5162      	str	r2, [r4, r5]
 8014d1a:	604b      	str	r3, [r1, #4]
 8014d1c:	4638      	mov	r0, r7
 8014d1e:	f104 060b 	add.w	r6, r4, #11
 8014d22:	f000 fbbb 	bl	801549c <__malloc_unlock>
 8014d26:	f026 0607 	bic.w	r6, r6, #7
 8014d2a:	1d23      	adds	r3, r4, #4
 8014d2c:	1af2      	subs	r2, r6, r3
 8014d2e:	d0b6      	beq.n	8014c9e <_malloc_r+0x22>
 8014d30:	1b9b      	subs	r3, r3, r6
 8014d32:	50a3      	str	r3, [r4, r2]
 8014d34:	e7b3      	b.n	8014c9e <_malloc_r+0x22>
 8014d36:	6862      	ldr	r2, [r4, #4]
 8014d38:	42a3      	cmp	r3, r4
 8014d3a:	bf0c      	ite	eq
 8014d3c:	6032      	streq	r2, [r6, #0]
 8014d3e:	605a      	strne	r2, [r3, #4]
 8014d40:	e7ec      	b.n	8014d1c <_malloc_r+0xa0>
 8014d42:	4623      	mov	r3, r4
 8014d44:	6864      	ldr	r4, [r4, #4]
 8014d46:	e7b2      	b.n	8014cae <_malloc_r+0x32>
 8014d48:	4634      	mov	r4, r6
 8014d4a:	6876      	ldr	r6, [r6, #4]
 8014d4c:	e7b9      	b.n	8014cc2 <_malloc_r+0x46>
 8014d4e:	230c      	movs	r3, #12
 8014d50:	603b      	str	r3, [r7, #0]
 8014d52:	4638      	mov	r0, r7
 8014d54:	f000 fba2 	bl	801549c <__malloc_unlock>
 8014d58:	e7a1      	b.n	8014c9e <_malloc_r+0x22>
 8014d5a:	6025      	str	r5, [r4, #0]
 8014d5c:	e7de      	b.n	8014d1c <_malloc_r+0xa0>
 8014d5e:	bf00      	nop
 8014d60:	20017bd8 	.word	0x20017bd8

08014d64 <iprintf>:
 8014d64:	b40f      	push	{r0, r1, r2, r3}
 8014d66:	4b0a      	ldr	r3, [pc, #40]	; (8014d90 <iprintf+0x2c>)
 8014d68:	b513      	push	{r0, r1, r4, lr}
 8014d6a:	681c      	ldr	r4, [r3, #0]
 8014d6c:	b124      	cbz	r4, 8014d78 <iprintf+0x14>
 8014d6e:	69a3      	ldr	r3, [r4, #24]
 8014d70:	b913      	cbnz	r3, 8014d78 <iprintf+0x14>
 8014d72:	4620      	mov	r0, r4
 8014d74:	f7ff fe10 	bl	8014998 <__sinit>
 8014d78:	ab05      	add	r3, sp, #20
 8014d7a:	9a04      	ldr	r2, [sp, #16]
 8014d7c:	68a1      	ldr	r1, [r4, #8]
 8014d7e:	9301      	str	r3, [sp, #4]
 8014d80:	4620      	mov	r0, r4
 8014d82:	f000 fd17 	bl	80157b4 <_vfiprintf_r>
 8014d86:	b002      	add	sp, #8
 8014d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d8c:	b004      	add	sp, #16
 8014d8e:	4770      	bx	lr
 8014d90:	20000030 	.word	0x20000030

08014d94 <_puts_r>:
 8014d94:	b570      	push	{r4, r5, r6, lr}
 8014d96:	460e      	mov	r6, r1
 8014d98:	4605      	mov	r5, r0
 8014d9a:	b118      	cbz	r0, 8014da4 <_puts_r+0x10>
 8014d9c:	6983      	ldr	r3, [r0, #24]
 8014d9e:	b90b      	cbnz	r3, 8014da4 <_puts_r+0x10>
 8014da0:	f7ff fdfa 	bl	8014998 <__sinit>
 8014da4:	69ab      	ldr	r3, [r5, #24]
 8014da6:	68ac      	ldr	r4, [r5, #8]
 8014da8:	b913      	cbnz	r3, 8014db0 <_puts_r+0x1c>
 8014daa:	4628      	mov	r0, r5
 8014dac:	f7ff fdf4 	bl	8014998 <__sinit>
 8014db0:	4b2c      	ldr	r3, [pc, #176]	; (8014e64 <_puts_r+0xd0>)
 8014db2:	429c      	cmp	r4, r3
 8014db4:	d120      	bne.n	8014df8 <_puts_r+0x64>
 8014db6:	686c      	ldr	r4, [r5, #4]
 8014db8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014dba:	07db      	lsls	r3, r3, #31
 8014dbc:	d405      	bmi.n	8014dca <_puts_r+0x36>
 8014dbe:	89a3      	ldrh	r3, [r4, #12]
 8014dc0:	0598      	lsls	r0, r3, #22
 8014dc2:	d402      	bmi.n	8014dca <_puts_r+0x36>
 8014dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014dc6:	f7ff feaa 	bl	8014b1e <__retarget_lock_acquire_recursive>
 8014dca:	89a3      	ldrh	r3, [r4, #12]
 8014dcc:	0719      	lsls	r1, r3, #28
 8014dce:	d51d      	bpl.n	8014e0c <_puts_r+0x78>
 8014dd0:	6923      	ldr	r3, [r4, #16]
 8014dd2:	b1db      	cbz	r3, 8014e0c <_puts_r+0x78>
 8014dd4:	3e01      	subs	r6, #1
 8014dd6:	68a3      	ldr	r3, [r4, #8]
 8014dd8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014ddc:	3b01      	subs	r3, #1
 8014dde:	60a3      	str	r3, [r4, #8]
 8014de0:	bb39      	cbnz	r1, 8014e32 <_puts_r+0x9e>
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	da38      	bge.n	8014e58 <_puts_r+0xc4>
 8014de6:	4622      	mov	r2, r4
 8014de8:	210a      	movs	r1, #10
 8014dea:	4628      	mov	r0, r5
 8014dec:	f000 f9ac 	bl	8015148 <__swbuf_r>
 8014df0:	3001      	adds	r0, #1
 8014df2:	d011      	beq.n	8014e18 <_puts_r+0x84>
 8014df4:	250a      	movs	r5, #10
 8014df6:	e011      	b.n	8014e1c <_puts_r+0x88>
 8014df8:	4b1b      	ldr	r3, [pc, #108]	; (8014e68 <_puts_r+0xd4>)
 8014dfa:	429c      	cmp	r4, r3
 8014dfc:	d101      	bne.n	8014e02 <_puts_r+0x6e>
 8014dfe:	68ac      	ldr	r4, [r5, #8]
 8014e00:	e7da      	b.n	8014db8 <_puts_r+0x24>
 8014e02:	4b1a      	ldr	r3, [pc, #104]	; (8014e6c <_puts_r+0xd8>)
 8014e04:	429c      	cmp	r4, r3
 8014e06:	bf08      	it	eq
 8014e08:	68ec      	ldreq	r4, [r5, #12]
 8014e0a:	e7d5      	b.n	8014db8 <_puts_r+0x24>
 8014e0c:	4621      	mov	r1, r4
 8014e0e:	4628      	mov	r0, r5
 8014e10:	f000 f9fe 	bl	8015210 <__swsetup_r>
 8014e14:	2800      	cmp	r0, #0
 8014e16:	d0dd      	beq.n	8014dd4 <_puts_r+0x40>
 8014e18:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014e1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014e1e:	07da      	lsls	r2, r3, #31
 8014e20:	d405      	bmi.n	8014e2e <_puts_r+0x9a>
 8014e22:	89a3      	ldrh	r3, [r4, #12]
 8014e24:	059b      	lsls	r3, r3, #22
 8014e26:	d402      	bmi.n	8014e2e <_puts_r+0x9a>
 8014e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014e2a:	f7ff fe79 	bl	8014b20 <__retarget_lock_release_recursive>
 8014e2e:	4628      	mov	r0, r5
 8014e30:	bd70      	pop	{r4, r5, r6, pc}
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	da04      	bge.n	8014e40 <_puts_r+0xac>
 8014e36:	69a2      	ldr	r2, [r4, #24]
 8014e38:	429a      	cmp	r2, r3
 8014e3a:	dc06      	bgt.n	8014e4a <_puts_r+0xb6>
 8014e3c:	290a      	cmp	r1, #10
 8014e3e:	d004      	beq.n	8014e4a <_puts_r+0xb6>
 8014e40:	6823      	ldr	r3, [r4, #0]
 8014e42:	1c5a      	adds	r2, r3, #1
 8014e44:	6022      	str	r2, [r4, #0]
 8014e46:	7019      	strb	r1, [r3, #0]
 8014e48:	e7c5      	b.n	8014dd6 <_puts_r+0x42>
 8014e4a:	4622      	mov	r2, r4
 8014e4c:	4628      	mov	r0, r5
 8014e4e:	f000 f97b 	bl	8015148 <__swbuf_r>
 8014e52:	3001      	adds	r0, #1
 8014e54:	d1bf      	bne.n	8014dd6 <_puts_r+0x42>
 8014e56:	e7df      	b.n	8014e18 <_puts_r+0x84>
 8014e58:	6823      	ldr	r3, [r4, #0]
 8014e5a:	250a      	movs	r5, #10
 8014e5c:	1c5a      	adds	r2, r3, #1
 8014e5e:	6022      	str	r2, [r4, #0]
 8014e60:	701d      	strb	r5, [r3, #0]
 8014e62:	e7db      	b.n	8014e1c <_puts_r+0x88>
 8014e64:	08018ccc 	.word	0x08018ccc
 8014e68:	08018cec 	.word	0x08018cec
 8014e6c:	08018cac 	.word	0x08018cac

08014e70 <puts>:
 8014e70:	4b02      	ldr	r3, [pc, #8]	; (8014e7c <puts+0xc>)
 8014e72:	4601      	mov	r1, r0
 8014e74:	6818      	ldr	r0, [r3, #0]
 8014e76:	f7ff bf8d 	b.w	8014d94 <_puts_r>
 8014e7a:	bf00      	nop
 8014e7c:	20000030 	.word	0x20000030

08014e80 <srand>:
 8014e80:	b538      	push	{r3, r4, r5, lr}
 8014e82:	4b10      	ldr	r3, [pc, #64]	; (8014ec4 <srand+0x44>)
 8014e84:	681d      	ldr	r5, [r3, #0]
 8014e86:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8014e88:	4604      	mov	r4, r0
 8014e8a:	b9b3      	cbnz	r3, 8014eba <srand+0x3a>
 8014e8c:	2018      	movs	r0, #24
 8014e8e:	f000 faf7 	bl	8015480 <malloc>
 8014e92:	4602      	mov	r2, r0
 8014e94:	63a8      	str	r0, [r5, #56]	; 0x38
 8014e96:	b920      	cbnz	r0, 8014ea2 <srand+0x22>
 8014e98:	4b0b      	ldr	r3, [pc, #44]	; (8014ec8 <srand+0x48>)
 8014e9a:	480c      	ldr	r0, [pc, #48]	; (8014ecc <srand+0x4c>)
 8014e9c:	2142      	movs	r1, #66	; 0x42
 8014e9e:	f000 fa25 	bl	80152ec <__assert_func>
 8014ea2:	490b      	ldr	r1, [pc, #44]	; (8014ed0 <srand+0x50>)
 8014ea4:	4b0b      	ldr	r3, [pc, #44]	; (8014ed4 <srand+0x54>)
 8014ea6:	e9c0 1300 	strd	r1, r3, [r0]
 8014eaa:	4b0b      	ldr	r3, [pc, #44]	; (8014ed8 <srand+0x58>)
 8014eac:	6083      	str	r3, [r0, #8]
 8014eae:	230b      	movs	r3, #11
 8014eb0:	8183      	strh	r3, [r0, #12]
 8014eb2:	2100      	movs	r1, #0
 8014eb4:	2001      	movs	r0, #1
 8014eb6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014eba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	611c      	str	r4, [r3, #16]
 8014ec0:	615a      	str	r2, [r3, #20]
 8014ec2:	bd38      	pop	{r3, r4, r5, pc}
 8014ec4:	20000030 	.word	0x20000030
 8014ec8:	08018d10 	.word	0x08018d10
 8014ecc:	08018d27 	.word	0x08018d27
 8014ed0:	abcd330e 	.word	0xabcd330e
 8014ed4:	e66d1234 	.word	0xe66d1234
 8014ed8:	0005deec 	.word	0x0005deec

08014edc <rand>:
 8014edc:	4b16      	ldr	r3, [pc, #88]	; (8014f38 <rand+0x5c>)
 8014ede:	b510      	push	{r4, lr}
 8014ee0:	681c      	ldr	r4, [r3, #0]
 8014ee2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014ee4:	b9b3      	cbnz	r3, 8014f14 <rand+0x38>
 8014ee6:	2018      	movs	r0, #24
 8014ee8:	f000 faca 	bl	8015480 <malloc>
 8014eec:	63a0      	str	r0, [r4, #56]	; 0x38
 8014eee:	b928      	cbnz	r0, 8014efc <rand+0x20>
 8014ef0:	4602      	mov	r2, r0
 8014ef2:	4b12      	ldr	r3, [pc, #72]	; (8014f3c <rand+0x60>)
 8014ef4:	4812      	ldr	r0, [pc, #72]	; (8014f40 <rand+0x64>)
 8014ef6:	214e      	movs	r1, #78	; 0x4e
 8014ef8:	f000 f9f8 	bl	80152ec <__assert_func>
 8014efc:	4a11      	ldr	r2, [pc, #68]	; (8014f44 <rand+0x68>)
 8014efe:	4b12      	ldr	r3, [pc, #72]	; (8014f48 <rand+0x6c>)
 8014f00:	e9c0 2300 	strd	r2, r3, [r0]
 8014f04:	4b11      	ldr	r3, [pc, #68]	; (8014f4c <rand+0x70>)
 8014f06:	6083      	str	r3, [r0, #8]
 8014f08:	230b      	movs	r3, #11
 8014f0a:	8183      	strh	r3, [r0, #12]
 8014f0c:	2201      	movs	r2, #1
 8014f0e:	2300      	movs	r3, #0
 8014f10:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014f14:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8014f16:	4a0e      	ldr	r2, [pc, #56]	; (8014f50 <rand+0x74>)
 8014f18:	6920      	ldr	r0, [r4, #16]
 8014f1a:	6963      	ldr	r3, [r4, #20]
 8014f1c:	490d      	ldr	r1, [pc, #52]	; (8014f54 <rand+0x78>)
 8014f1e:	4342      	muls	r2, r0
 8014f20:	fb01 2203 	mla	r2, r1, r3, r2
 8014f24:	fba0 0101 	umull	r0, r1, r0, r1
 8014f28:	1c43      	adds	r3, r0, #1
 8014f2a:	eb42 0001 	adc.w	r0, r2, r1
 8014f2e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8014f32:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014f36:	bd10      	pop	{r4, pc}
 8014f38:	20000030 	.word	0x20000030
 8014f3c:	08018d10 	.word	0x08018d10
 8014f40:	08018d27 	.word	0x08018d27
 8014f44:	abcd330e 	.word	0xabcd330e
 8014f48:	e66d1234 	.word	0xe66d1234
 8014f4c:	0005deec 	.word	0x0005deec
 8014f50:	5851f42d 	.word	0x5851f42d
 8014f54:	4c957f2d 	.word	0x4c957f2d

08014f58 <cleanup_glue>:
 8014f58:	b538      	push	{r3, r4, r5, lr}
 8014f5a:	460c      	mov	r4, r1
 8014f5c:	6809      	ldr	r1, [r1, #0]
 8014f5e:	4605      	mov	r5, r0
 8014f60:	b109      	cbz	r1, 8014f66 <cleanup_glue+0xe>
 8014f62:	f7ff fff9 	bl	8014f58 <cleanup_glue>
 8014f66:	4621      	mov	r1, r4
 8014f68:	4628      	mov	r0, r5
 8014f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f6e:	f7ff be19 	b.w	8014ba4 <_free_r>
	...

08014f74 <_reclaim_reent>:
 8014f74:	4b2c      	ldr	r3, [pc, #176]	; (8015028 <_reclaim_reent+0xb4>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	4283      	cmp	r3, r0
 8014f7a:	b570      	push	{r4, r5, r6, lr}
 8014f7c:	4604      	mov	r4, r0
 8014f7e:	d051      	beq.n	8015024 <_reclaim_reent+0xb0>
 8014f80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014f82:	b143      	cbz	r3, 8014f96 <_reclaim_reent+0x22>
 8014f84:	68db      	ldr	r3, [r3, #12]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d14a      	bne.n	8015020 <_reclaim_reent+0xac>
 8014f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f8c:	6819      	ldr	r1, [r3, #0]
 8014f8e:	b111      	cbz	r1, 8014f96 <_reclaim_reent+0x22>
 8014f90:	4620      	mov	r0, r4
 8014f92:	f7ff fe07 	bl	8014ba4 <_free_r>
 8014f96:	6961      	ldr	r1, [r4, #20]
 8014f98:	b111      	cbz	r1, 8014fa0 <_reclaim_reent+0x2c>
 8014f9a:	4620      	mov	r0, r4
 8014f9c:	f7ff fe02 	bl	8014ba4 <_free_r>
 8014fa0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014fa2:	b111      	cbz	r1, 8014faa <_reclaim_reent+0x36>
 8014fa4:	4620      	mov	r0, r4
 8014fa6:	f7ff fdfd 	bl	8014ba4 <_free_r>
 8014faa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014fac:	b111      	cbz	r1, 8014fb4 <_reclaim_reent+0x40>
 8014fae:	4620      	mov	r0, r4
 8014fb0:	f7ff fdf8 	bl	8014ba4 <_free_r>
 8014fb4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014fb6:	b111      	cbz	r1, 8014fbe <_reclaim_reent+0x4a>
 8014fb8:	4620      	mov	r0, r4
 8014fba:	f7ff fdf3 	bl	8014ba4 <_free_r>
 8014fbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014fc0:	b111      	cbz	r1, 8014fc8 <_reclaim_reent+0x54>
 8014fc2:	4620      	mov	r0, r4
 8014fc4:	f7ff fdee 	bl	8014ba4 <_free_r>
 8014fc8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014fca:	b111      	cbz	r1, 8014fd2 <_reclaim_reent+0x5e>
 8014fcc:	4620      	mov	r0, r4
 8014fce:	f7ff fde9 	bl	8014ba4 <_free_r>
 8014fd2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014fd4:	b111      	cbz	r1, 8014fdc <_reclaim_reent+0x68>
 8014fd6:	4620      	mov	r0, r4
 8014fd8:	f7ff fde4 	bl	8014ba4 <_free_r>
 8014fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014fde:	b111      	cbz	r1, 8014fe6 <_reclaim_reent+0x72>
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	f7ff fddf 	bl	8014ba4 <_free_r>
 8014fe6:	69a3      	ldr	r3, [r4, #24]
 8014fe8:	b1e3      	cbz	r3, 8015024 <_reclaim_reent+0xb0>
 8014fea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014fec:	4620      	mov	r0, r4
 8014fee:	4798      	blx	r3
 8014ff0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014ff2:	b1b9      	cbz	r1, 8015024 <_reclaim_reent+0xb0>
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ffa:	f7ff bfad 	b.w	8014f58 <cleanup_glue>
 8014ffe:	5949      	ldr	r1, [r1, r5]
 8015000:	b941      	cbnz	r1, 8015014 <_reclaim_reent+0xa0>
 8015002:	3504      	adds	r5, #4
 8015004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015006:	2d80      	cmp	r5, #128	; 0x80
 8015008:	68d9      	ldr	r1, [r3, #12]
 801500a:	d1f8      	bne.n	8014ffe <_reclaim_reent+0x8a>
 801500c:	4620      	mov	r0, r4
 801500e:	f7ff fdc9 	bl	8014ba4 <_free_r>
 8015012:	e7ba      	b.n	8014f8a <_reclaim_reent+0x16>
 8015014:	680e      	ldr	r6, [r1, #0]
 8015016:	4620      	mov	r0, r4
 8015018:	f7ff fdc4 	bl	8014ba4 <_free_r>
 801501c:	4631      	mov	r1, r6
 801501e:	e7ef      	b.n	8015000 <_reclaim_reent+0x8c>
 8015020:	2500      	movs	r5, #0
 8015022:	e7ef      	b.n	8015004 <_reclaim_reent+0x90>
 8015024:	bd70      	pop	{r4, r5, r6, pc}
 8015026:	bf00      	nop
 8015028:	20000030 	.word	0x20000030

0801502c <_sbrk_r>:
 801502c:	b538      	push	{r3, r4, r5, lr}
 801502e:	4d06      	ldr	r5, [pc, #24]	; (8015048 <_sbrk_r+0x1c>)
 8015030:	2300      	movs	r3, #0
 8015032:	4604      	mov	r4, r0
 8015034:	4608      	mov	r0, r1
 8015036:	602b      	str	r3, [r5, #0]
 8015038:	f7eb fdda 	bl	8000bf0 <_sbrk>
 801503c:	1c43      	adds	r3, r0, #1
 801503e:	d102      	bne.n	8015046 <_sbrk_r+0x1a>
 8015040:	682b      	ldr	r3, [r5, #0]
 8015042:	b103      	cbz	r3, 8015046 <_sbrk_r+0x1a>
 8015044:	6023      	str	r3, [r4, #0]
 8015046:	bd38      	pop	{r3, r4, r5, pc}
 8015048:	20017be0 	.word	0x20017be0

0801504c <siprintf>:
 801504c:	b40e      	push	{r1, r2, r3}
 801504e:	b500      	push	{lr}
 8015050:	b09c      	sub	sp, #112	; 0x70
 8015052:	ab1d      	add	r3, sp, #116	; 0x74
 8015054:	9002      	str	r0, [sp, #8]
 8015056:	9006      	str	r0, [sp, #24]
 8015058:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801505c:	4809      	ldr	r0, [pc, #36]	; (8015084 <siprintf+0x38>)
 801505e:	9107      	str	r1, [sp, #28]
 8015060:	9104      	str	r1, [sp, #16]
 8015062:	4909      	ldr	r1, [pc, #36]	; (8015088 <siprintf+0x3c>)
 8015064:	f853 2b04 	ldr.w	r2, [r3], #4
 8015068:	9105      	str	r1, [sp, #20]
 801506a:	6800      	ldr	r0, [r0, #0]
 801506c:	9301      	str	r3, [sp, #4]
 801506e:	a902      	add	r1, sp, #8
 8015070:	f000 fa76 	bl	8015560 <_svfiprintf_r>
 8015074:	9b02      	ldr	r3, [sp, #8]
 8015076:	2200      	movs	r2, #0
 8015078:	701a      	strb	r2, [r3, #0]
 801507a:	b01c      	add	sp, #112	; 0x70
 801507c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015080:	b003      	add	sp, #12
 8015082:	4770      	bx	lr
 8015084:	20000030 	.word	0x20000030
 8015088:	ffff0208 	.word	0xffff0208

0801508c <__sread>:
 801508c:	b510      	push	{r4, lr}
 801508e:	460c      	mov	r4, r1
 8015090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015094:	f000 fe52 	bl	8015d3c <_read_r>
 8015098:	2800      	cmp	r0, #0
 801509a:	bfab      	itete	ge
 801509c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801509e:	89a3      	ldrhlt	r3, [r4, #12]
 80150a0:	181b      	addge	r3, r3, r0
 80150a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80150a6:	bfac      	ite	ge
 80150a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80150aa:	81a3      	strhlt	r3, [r4, #12]
 80150ac:	bd10      	pop	{r4, pc}

080150ae <__swrite>:
 80150ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150b2:	461f      	mov	r7, r3
 80150b4:	898b      	ldrh	r3, [r1, #12]
 80150b6:	05db      	lsls	r3, r3, #23
 80150b8:	4605      	mov	r5, r0
 80150ba:	460c      	mov	r4, r1
 80150bc:	4616      	mov	r6, r2
 80150be:	d505      	bpl.n	80150cc <__swrite+0x1e>
 80150c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150c4:	2302      	movs	r3, #2
 80150c6:	2200      	movs	r2, #0
 80150c8:	f000 f962 	bl	8015390 <_lseek_r>
 80150cc:	89a3      	ldrh	r3, [r4, #12]
 80150ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80150d6:	81a3      	strh	r3, [r4, #12]
 80150d8:	4632      	mov	r2, r6
 80150da:	463b      	mov	r3, r7
 80150dc:	4628      	mov	r0, r5
 80150de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150e2:	f000 b883 	b.w	80151ec <_write_r>

080150e6 <__sseek>:
 80150e6:	b510      	push	{r4, lr}
 80150e8:	460c      	mov	r4, r1
 80150ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150ee:	f000 f94f 	bl	8015390 <_lseek_r>
 80150f2:	1c43      	adds	r3, r0, #1
 80150f4:	89a3      	ldrh	r3, [r4, #12]
 80150f6:	bf15      	itete	ne
 80150f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80150fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80150fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015102:	81a3      	strheq	r3, [r4, #12]
 8015104:	bf18      	it	ne
 8015106:	81a3      	strhne	r3, [r4, #12]
 8015108:	bd10      	pop	{r4, pc}

0801510a <__sclose>:
 801510a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801510e:	f000 b90b 	b.w	8015328 <_close_r>
	...

08015114 <time>:
 8015114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015116:	4b0b      	ldr	r3, [pc, #44]	; (8015144 <time+0x30>)
 8015118:	2200      	movs	r2, #0
 801511a:	4669      	mov	r1, sp
 801511c:	4604      	mov	r4, r0
 801511e:	6818      	ldr	r0, [r3, #0]
 8015120:	f000 f924 	bl	801536c <_gettimeofday_r>
 8015124:	2800      	cmp	r0, #0
 8015126:	bfbe      	ittt	lt
 8015128:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 801512c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015130:	e9cd 2300 	strdlt	r2, r3, [sp]
 8015134:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015138:	b10c      	cbz	r4, 801513e <time+0x2a>
 801513a:	e9c4 0100 	strd	r0, r1, [r4]
 801513e:	b004      	add	sp, #16
 8015140:	bd10      	pop	{r4, pc}
 8015142:	bf00      	nop
 8015144:	20000030 	.word	0x20000030

08015148 <__swbuf_r>:
 8015148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801514a:	460e      	mov	r6, r1
 801514c:	4614      	mov	r4, r2
 801514e:	4605      	mov	r5, r0
 8015150:	b118      	cbz	r0, 801515a <__swbuf_r+0x12>
 8015152:	6983      	ldr	r3, [r0, #24]
 8015154:	b90b      	cbnz	r3, 801515a <__swbuf_r+0x12>
 8015156:	f7ff fc1f 	bl	8014998 <__sinit>
 801515a:	4b21      	ldr	r3, [pc, #132]	; (80151e0 <__swbuf_r+0x98>)
 801515c:	429c      	cmp	r4, r3
 801515e:	d12b      	bne.n	80151b8 <__swbuf_r+0x70>
 8015160:	686c      	ldr	r4, [r5, #4]
 8015162:	69a3      	ldr	r3, [r4, #24]
 8015164:	60a3      	str	r3, [r4, #8]
 8015166:	89a3      	ldrh	r3, [r4, #12]
 8015168:	071a      	lsls	r2, r3, #28
 801516a:	d52f      	bpl.n	80151cc <__swbuf_r+0x84>
 801516c:	6923      	ldr	r3, [r4, #16]
 801516e:	b36b      	cbz	r3, 80151cc <__swbuf_r+0x84>
 8015170:	6923      	ldr	r3, [r4, #16]
 8015172:	6820      	ldr	r0, [r4, #0]
 8015174:	1ac0      	subs	r0, r0, r3
 8015176:	6963      	ldr	r3, [r4, #20]
 8015178:	b2f6      	uxtb	r6, r6
 801517a:	4283      	cmp	r3, r0
 801517c:	4637      	mov	r7, r6
 801517e:	dc04      	bgt.n	801518a <__swbuf_r+0x42>
 8015180:	4621      	mov	r1, r4
 8015182:	4628      	mov	r0, r5
 8015184:	f7ff fb62 	bl	801484c <_fflush_r>
 8015188:	bb30      	cbnz	r0, 80151d8 <__swbuf_r+0x90>
 801518a:	68a3      	ldr	r3, [r4, #8]
 801518c:	3b01      	subs	r3, #1
 801518e:	60a3      	str	r3, [r4, #8]
 8015190:	6823      	ldr	r3, [r4, #0]
 8015192:	1c5a      	adds	r2, r3, #1
 8015194:	6022      	str	r2, [r4, #0]
 8015196:	701e      	strb	r6, [r3, #0]
 8015198:	6963      	ldr	r3, [r4, #20]
 801519a:	3001      	adds	r0, #1
 801519c:	4283      	cmp	r3, r0
 801519e:	d004      	beq.n	80151aa <__swbuf_r+0x62>
 80151a0:	89a3      	ldrh	r3, [r4, #12]
 80151a2:	07db      	lsls	r3, r3, #31
 80151a4:	d506      	bpl.n	80151b4 <__swbuf_r+0x6c>
 80151a6:	2e0a      	cmp	r6, #10
 80151a8:	d104      	bne.n	80151b4 <__swbuf_r+0x6c>
 80151aa:	4621      	mov	r1, r4
 80151ac:	4628      	mov	r0, r5
 80151ae:	f7ff fb4d 	bl	801484c <_fflush_r>
 80151b2:	b988      	cbnz	r0, 80151d8 <__swbuf_r+0x90>
 80151b4:	4638      	mov	r0, r7
 80151b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151b8:	4b0a      	ldr	r3, [pc, #40]	; (80151e4 <__swbuf_r+0x9c>)
 80151ba:	429c      	cmp	r4, r3
 80151bc:	d101      	bne.n	80151c2 <__swbuf_r+0x7a>
 80151be:	68ac      	ldr	r4, [r5, #8]
 80151c0:	e7cf      	b.n	8015162 <__swbuf_r+0x1a>
 80151c2:	4b09      	ldr	r3, [pc, #36]	; (80151e8 <__swbuf_r+0xa0>)
 80151c4:	429c      	cmp	r4, r3
 80151c6:	bf08      	it	eq
 80151c8:	68ec      	ldreq	r4, [r5, #12]
 80151ca:	e7ca      	b.n	8015162 <__swbuf_r+0x1a>
 80151cc:	4621      	mov	r1, r4
 80151ce:	4628      	mov	r0, r5
 80151d0:	f000 f81e 	bl	8015210 <__swsetup_r>
 80151d4:	2800      	cmp	r0, #0
 80151d6:	d0cb      	beq.n	8015170 <__swbuf_r+0x28>
 80151d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80151dc:	e7ea      	b.n	80151b4 <__swbuf_r+0x6c>
 80151de:	bf00      	nop
 80151e0:	08018ccc 	.word	0x08018ccc
 80151e4:	08018cec 	.word	0x08018cec
 80151e8:	08018cac 	.word	0x08018cac

080151ec <_write_r>:
 80151ec:	b538      	push	{r3, r4, r5, lr}
 80151ee:	4d07      	ldr	r5, [pc, #28]	; (801520c <_write_r+0x20>)
 80151f0:	4604      	mov	r4, r0
 80151f2:	4608      	mov	r0, r1
 80151f4:	4611      	mov	r1, r2
 80151f6:	2200      	movs	r2, #0
 80151f8:	602a      	str	r2, [r5, #0]
 80151fa:	461a      	mov	r2, r3
 80151fc:	f7eb fb02 	bl	8000804 <_write>
 8015200:	1c43      	adds	r3, r0, #1
 8015202:	d102      	bne.n	801520a <_write_r+0x1e>
 8015204:	682b      	ldr	r3, [r5, #0]
 8015206:	b103      	cbz	r3, 801520a <_write_r+0x1e>
 8015208:	6023      	str	r3, [r4, #0]
 801520a:	bd38      	pop	{r3, r4, r5, pc}
 801520c:	20017be0 	.word	0x20017be0

08015210 <__swsetup_r>:
 8015210:	4b32      	ldr	r3, [pc, #200]	; (80152dc <__swsetup_r+0xcc>)
 8015212:	b570      	push	{r4, r5, r6, lr}
 8015214:	681d      	ldr	r5, [r3, #0]
 8015216:	4606      	mov	r6, r0
 8015218:	460c      	mov	r4, r1
 801521a:	b125      	cbz	r5, 8015226 <__swsetup_r+0x16>
 801521c:	69ab      	ldr	r3, [r5, #24]
 801521e:	b913      	cbnz	r3, 8015226 <__swsetup_r+0x16>
 8015220:	4628      	mov	r0, r5
 8015222:	f7ff fbb9 	bl	8014998 <__sinit>
 8015226:	4b2e      	ldr	r3, [pc, #184]	; (80152e0 <__swsetup_r+0xd0>)
 8015228:	429c      	cmp	r4, r3
 801522a:	d10f      	bne.n	801524c <__swsetup_r+0x3c>
 801522c:	686c      	ldr	r4, [r5, #4]
 801522e:	89a3      	ldrh	r3, [r4, #12]
 8015230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015234:	0719      	lsls	r1, r3, #28
 8015236:	d42c      	bmi.n	8015292 <__swsetup_r+0x82>
 8015238:	06dd      	lsls	r5, r3, #27
 801523a:	d411      	bmi.n	8015260 <__swsetup_r+0x50>
 801523c:	2309      	movs	r3, #9
 801523e:	6033      	str	r3, [r6, #0]
 8015240:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015244:	81a3      	strh	r3, [r4, #12]
 8015246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801524a:	e03e      	b.n	80152ca <__swsetup_r+0xba>
 801524c:	4b25      	ldr	r3, [pc, #148]	; (80152e4 <__swsetup_r+0xd4>)
 801524e:	429c      	cmp	r4, r3
 8015250:	d101      	bne.n	8015256 <__swsetup_r+0x46>
 8015252:	68ac      	ldr	r4, [r5, #8]
 8015254:	e7eb      	b.n	801522e <__swsetup_r+0x1e>
 8015256:	4b24      	ldr	r3, [pc, #144]	; (80152e8 <__swsetup_r+0xd8>)
 8015258:	429c      	cmp	r4, r3
 801525a:	bf08      	it	eq
 801525c:	68ec      	ldreq	r4, [r5, #12]
 801525e:	e7e6      	b.n	801522e <__swsetup_r+0x1e>
 8015260:	0758      	lsls	r0, r3, #29
 8015262:	d512      	bpl.n	801528a <__swsetup_r+0x7a>
 8015264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015266:	b141      	cbz	r1, 801527a <__swsetup_r+0x6a>
 8015268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801526c:	4299      	cmp	r1, r3
 801526e:	d002      	beq.n	8015276 <__swsetup_r+0x66>
 8015270:	4630      	mov	r0, r6
 8015272:	f7ff fc97 	bl	8014ba4 <_free_r>
 8015276:	2300      	movs	r3, #0
 8015278:	6363      	str	r3, [r4, #52]	; 0x34
 801527a:	89a3      	ldrh	r3, [r4, #12]
 801527c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015280:	81a3      	strh	r3, [r4, #12]
 8015282:	2300      	movs	r3, #0
 8015284:	6063      	str	r3, [r4, #4]
 8015286:	6923      	ldr	r3, [r4, #16]
 8015288:	6023      	str	r3, [r4, #0]
 801528a:	89a3      	ldrh	r3, [r4, #12]
 801528c:	f043 0308 	orr.w	r3, r3, #8
 8015290:	81a3      	strh	r3, [r4, #12]
 8015292:	6923      	ldr	r3, [r4, #16]
 8015294:	b94b      	cbnz	r3, 80152aa <__swsetup_r+0x9a>
 8015296:	89a3      	ldrh	r3, [r4, #12]
 8015298:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801529c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80152a0:	d003      	beq.n	80152aa <__swsetup_r+0x9a>
 80152a2:	4621      	mov	r1, r4
 80152a4:	4630      	mov	r0, r6
 80152a6:	f000 f8ab 	bl	8015400 <__smakebuf_r>
 80152aa:	89a0      	ldrh	r0, [r4, #12]
 80152ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80152b0:	f010 0301 	ands.w	r3, r0, #1
 80152b4:	d00a      	beq.n	80152cc <__swsetup_r+0xbc>
 80152b6:	2300      	movs	r3, #0
 80152b8:	60a3      	str	r3, [r4, #8]
 80152ba:	6963      	ldr	r3, [r4, #20]
 80152bc:	425b      	negs	r3, r3
 80152be:	61a3      	str	r3, [r4, #24]
 80152c0:	6923      	ldr	r3, [r4, #16]
 80152c2:	b943      	cbnz	r3, 80152d6 <__swsetup_r+0xc6>
 80152c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80152c8:	d1ba      	bne.n	8015240 <__swsetup_r+0x30>
 80152ca:	bd70      	pop	{r4, r5, r6, pc}
 80152cc:	0781      	lsls	r1, r0, #30
 80152ce:	bf58      	it	pl
 80152d0:	6963      	ldrpl	r3, [r4, #20]
 80152d2:	60a3      	str	r3, [r4, #8]
 80152d4:	e7f4      	b.n	80152c0 <__swsetup_r+0xb0>
 80152d6:	2000      	movs	r0, #0
 80152d8:	e7f7      	b.n	80152ca <__swsetup_r+0xba>
 80152da:	bf00      	nop
 80152dc:	20000030 	.word	0x20000030
 80152e0:	08018ccc 	.word	0x08018ccc
 80152e4:	08018cec 	.word	0x08018cec
 80152e8:	08018cac 	.word	0x08018cac

080152ec <__assert_func>:
 80152ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80152ee:	4614      	mov	r4, r2
 80152f0:	461a      	mov	r2, r3
 80152f2:	4b09      	ldr	r3, [pc, #36]	; (8015318 <__assert_func+0x2c>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	4605      	mov	r5, r0
 80152f8:	68d8      	ldr	r0, [r3, #12]
 80152fa:	b14c      	cbz	r4, 8015310 <__assert_func+0x24>
 80152fc:	4b07      	ldr	r3, [pc, #28]	; (801531c <__assert_func+0x30>)
 80152fe:	9100      	str	r1, [sp, #0]
 8015300:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015304:	4906      	ldr	r1, [pc, #24]	; (8015320 <__assert_func+0x34>)
 8015306:	462b      	mov	r3, r5
 8015308:	f000 f81e 	bl	8015348 <fiprintf>
 801530c:	f000 fd28 	bl	8015d60 <abort>
 8015310:	4b04      	ldr	r3, [pc, #16]	; (8015324 <__assert_func+0x38>)
 8015312:	461c      	mov	r4, r3
 8015314:	e7f3      	b.n	80152fe <__assert_func+0x12>
 8015316:	bf00      	nop
 8015318:	20000030 	.word	0x20000030
 801531c:	08018d82 	.word	0x08018d82
 8015320:	08018d8f 	.word	0x08018d8f
 8015324:	08018dbd 	.word	0x08018dbd

08015328 <_close_r>:
 8015328:	b538      	push	{r3, r4, r5, lr}
 801532a:	4d06      	ldr	r5, [pc, #24]	; (8015344 <_close_r+0x1c>)
 801532c:	2300      	movs	r3, #0
 801532e:	4604      	mov	r4, r0
 8015330:	4608      	mov	r0, r1
 8015332:	602b      	str	r3, [r5, #0]
 8015334:	f7eb fc27 	bl	8000b86 <_close>
 8015338:	1c43      	adds	r3, r0, #1
 801533a:	d102      	bne.n	8015342 <_close_r+0x1a>
 801533c:	682b      	ldr	r3, [r5, #0]
 801533e:	b103      	cbz	r3, 8015342 <_close_r+0x1a>
 8015340:	6023      	str	r3, [r4, #0]
 8015342:	bd38      	pop	{r3, r4, r5, pc}
 8015344:	20017be0 	.word	0x20017be0

08015348 <fiprintf>:
 8015348:	b40e      	push	{r1, r2, r3}
 801534a:	b503      	push	{r0, r1, lr}
 801534c:	4601      	mov	r1, r0
 801534e:	ab03      	add	r3, sp, #12
 8015350:	4805      	ldr	r0, [pc, #20]	; (8015368 <fiprintf+0x20>)
 8015352:	f853 2b04 	ldr.w	r2, [r3], #4
 8015356:	6800      	ldr	r0, [r0, #0]
 8015358:	9301      	str	r3, [sp, #4]
 801535a:	f000 fa2b 	bl	80157b4 <_vfiprintf_r>
 801535e:	b002      	add	sp, #8
 8015360:	f85d eb04 	ldr.w	lr, [sp], #4
 8015364:	b003      	add	sp, #12
 8015366:	4770      	bx	lr
 8015368:	20000030 	.word	0x20000030

0801536c <_gettimeofday_r>:
 801536c:	b538      	push	{r3, r4, r5, lr}
 801536e:	4d07      	ldr	r5, [pc, #28]	; (801538c <_gettimeofday_r+0x20>)
 8015370:	2300      	movs	r3, #0
 8015372:	4604      	mov	r4, r0
 8015374:	4608      	mov	r0, r1
 8015376:	4611      	mov	r1, r2
 8015378:	602b      	str	r3, [r5, #0]
 801537a:	f000 fd97 	bl	8015eac <_gettimeofday>
 801537e:	1c43      	adds	r3, r0, #1
 8015380:	d102      	bne.n	8015388 <_gettimeofday_r+0x1c>
 8015382:	682b      	ldr	r3, [r5, #0]
 8015384:	b103      	cbz	r3, 8015388 <_gettimeofday_r+0x1c>
 8015386:	6023      	str	r3, [r4, #0]
 8015388:	bd38      	pop	{r3, r4, r5, pc}
 801538a:	bf00      	nop
 801538c:	20017be0 	.word	0x20017be0

08015390 <_lseek_r>:
 8015390:	b538      	push	{r3, r4, r5, lr}
 8015392:	4d07      	ldr	r5, [pc, #28]	; (80153b0 <_lseek_r+0x20>)
 8015394:	4604      	mov	r4, r0
 8015396:	4608      	mov	r0, r1
 8015398:	4611      	mov	r1, r2
 801539a:	2200      	movs	r2, #0
 801539c:	602a      	str	r2, [r5, #0]
 801539e:	461a      	mov	r2, r3
 80153a0:	f7eb fc18 	bl	8000bd4 <_lseek>
 80153a4:	1c43      	adds	r3, r0, #1
 80153a6:	d102      	bne.n	80153ae <_lseek_r+0x1e>
 80153a8:	682b      	ldr	r3, [r5, #0]
 80153aa:	b103      	cbz	r3, 80153ae <_lseek_r+0x1e>
 80153ac:	6023      	str	r3, [r4, #0]
 80153ae:	bd38      	pop	{r3, r4, r5, pc}
 80153b0:	20017be0 	.word	0x20017be0

080153b4 <__swhatbuf_r>:
 80153b4:	b570      	push	{r4, r5, r6, lr}
 80153b6:	460e      	mov	r6, r1
 80153b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153bc:	2900      	cmp	r1, #0
 80153be:	b096      	sub	sp, #88	; 0x58
 80153c0:	4614      	mov	r4, r2
 80153c2:	461d      	mov	r5, r3
 80153c4:	da08      	bge.n	80153d8 <__swhatbuf_r+0x24>
 80153c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80153ca:	2200      	movs	r2, #0
 80153cc:	602a      	str	r2, [r5, #0]
 80153ce:	061a      	lsls	r2, r3, #24
 80153d0:	d410      	bmi.n	80153f4 <__swhatbuf_r+0x40>
 80153d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80153d6:	e00e      	b.n	80153f6 <__swhatbuf_r+0x42>
 80153d8:	466a      	mov	r2, sp
 80153da:	f000 fcc9 	bl	8015d70 <_fstat_r>
 80153de:	2800      	cmp	r0, #0
 80153e0:	dbf1      	blt.n	80153c6 <__swhatbuf_r+0x12>
 80153e2:	9a01      	ldr	r2, [sp, #4]
 80153e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80153e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80153ec:	425a      	negs	r2, r3
 80153ee:	415a      	adcs	r2, r3
 80153f0:	602a      	str	r2, [r5, #0]
 80153f2:	e7ee      	b.n	80153d2 <__swhatbuf_r+0x1e>
 80153f4:	2340      	movs	r3, #64	; 0x40
 80153f6:	2000      	movs	r0, #0
 80153f8:	6023      	str	r3, [r4, #0]
 80153fa:	b016      	add	sp, #88	; 0x58
 80153fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08015400 <__smakebuf_r>:
 8015400:	898b      	ldrh	r3, [r1, #12]
 8015402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015404:	079d      	lsls	r5, r3, #30
 8015406:	4606      	mov	r6, r0
 8015408:	460c      	mov	r4, r1
 801540a:	d507      	bpl.n	801541c <__smakebuf_r+0x1c>
 801540c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015410:	6023      	str	r3, [r4, #0]
 8015412:	6123      	str	r3, [r4, #16]
 8015414:	2301      	movs	r3, #1
 8015416:	6163      	str	r3, [r4, #20]
 8015418:	b002      	add	sp, #8
 801541a:	bd70      	pop	{r4, r5, r6, pc}
 801541c:	ab01      	add	r3, sp, #4
 801541e:	466a      	mov	r2, sp
 8015420:	f7ff ffc8 	bl	80153b4 <__swhatbuf_r>
 8015424:	9900      	ldr	r1, [sp, #0]
 8015426:	4605      	mov	r5, r0
 8015428:	4630      	mov	r0, r6
 801542a:	f7ff fc27 	bl	8014c7c <_malloc_r>
 801542e:	b948      	cbnz	r0, 8015444 <__smakebuf_r+0x44>
 8015430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015434:	059a      	lsls	r2, r3, #22
 8015436:	d4ef      	bmi.n	8015418 <__smakebuf_r+0x18>
 8015438:	f023 0303 	bic.w	r3, r3, #3
 801543c:	f043 0302 	orr.w	r3, r3, #2
 8015440:	81a3      	strh	r3, [r4, #12]
 8015442:	e7e3      	b.n	801540c <__smakebuf_r+0xc>
 8015444:	4b0d      	ldr	r3, [pc, #52]	; (801547c <__smakebuf_r+0x7c>)
 8015446:	62b3      	str	r3, [r6, #40]	; 0x28
 8015448:	89a3      	ldrh	r3, [r4, #12]
 801544a:	6020      	str	r0, [r4, #0]
 801544c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015450:	81a3      	strh	r3, [r4, #12]
 8015452:	9b00      	ldr	r3, [sp, #0]
 8015454:	6163      	str	r3, [r4, #20]
 8015456:	9b01      	ldr	r3, [sp, #4]
 8015458:	6120      	str	r0, [r4, #16]
 801545a:	b15b      	cbz	r3, 8015474 <__smakebuf_r+0x74>
 801545c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015460:	4630      	mov	r0, r6
 8015462:	f000 fc97 	bl	8015d94 <_isatty_r>
 8015466:	b128      	cbz	r0, 8015474 <__smakebuf_r+0x74>
 8015468:	89a3      	ldrh	r3, [r4, #12]
 801546a:	f023 0303 	bic.w	r3, r3, #3
 801546e:	f043 0301 	orr.w	r3, r3, #1
 8015472:	81a3      	strh	r3, [r4, #12]
 8015474:	89a0      	ldrh	r0, [r4, #12]
 8015476:	4305      	orrs	r5, r0
 8015478:	81a5      	strh	r5, [r4, #12]
 801547a:	e7cd      	b.n	8015418 <__smakebuf_r+0x18>
 801547c:	08014931 	.word	0x08014931

08015480 <malloc>:
 8015480:	4b02      	ldr	r3, [pc, #8]	; (801548c <malloc+0xc>)
 8015482:	4601      	mov	r1, r0
 8015484:	6818      	ldr	r0, [r3, #0]
 8015486:	f7ff bbf9 	b.w	8014c7c <_malloc_r>
 801548a:	bf00      	nop
 801548c:	20000030 	.word	0x20000030

08015490 <__malloc_lock>:
 8015490:	4801      	ldr	r0, [pc, #4]	; (8015498 <__malloc_lock+0x8>)
 8015492:	f7ff bb44 	b.w	8014b1e <__retarget_lock_acquire_recursive>
 8015496:	bf00      	nop
 8015498:	20017bd4 	.word	0x20017bd4

0801549c <__malloc_unlock>:
 801549c:	4801      	ldr	r0, [pc, #4]	; (80154a4 <__malloc_unlock+0x8>)
 801549e:	f7ff bb3f 	b.w	8014b20 <__retarget_lock_release_recursive>
 80154a2:	bf00      	nop
 80154a4:	20017bd4 	.word	0x20017bd4

080154a8 <__ssputs_r>:
 80154a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154ac:	688e      	ldr	r6, [r1, #8]
 80154ae:	429e      	cmp	r6, r3
 80154b0:	4682      	mov	sl, r0
 80154b2:	460c      	mov	r4, r1
 80154b4:	4690      	mov	r8, r2
 80154b6:	461f      	mov	r7, r3
 80154b8:	d838      	bhi.n	801552c <__ssputs_r+0x84>
 80154ba:	898a      	ldrh	r2, [r1, #12]
 80154bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80154c0:	d032      	beq.n	8015528 <__ssputs_r+0x80>
 80154c2:	6825      	ldr	r5, [r4, #0]
 80154c4:	6909      	ldr	r1, [r1, #16]
 80154c6:	eba5 0901 	sub.w	r9, r5, r1
 80154ca:	6965      	ldr	r5, [r4, #20]
 80154cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80154d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80154d4:	3301      	adds	r3, #1
 80154d6:	444b      	add	r3, r9
 80154d8:	106d      	asrs	r5, r5, #1
 80154da:	429d      	cmp	r5, r3
 80154dc:	bf38      	it	cc
 80154de:	461d      	movcc	r5, r3
 80154e0:	0553      	lsls	r3, r2, #21
 80154e2:	d531      	bpl.n	8015548 <__ssputs_r+0xa0>
 80154e4:	4629      	mov	r1, r5
 80154e6:	f7ff fbc9 	bl	8014c7c <_malloc_r>
 80154ea:	4606      	mov	r6, r0
 80154ec:	b950      	cbnz	r0, 8015504 <__ssputs_r+0x5c>
 80154ee:	230c      	movs	r3, #12
 80154f0:	f8ca 3000 	str.w	r3, [sl]
 80154f4:	89a3      	ldrh	r3, [r4, #12]
 80154f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154fa:	81a3      	strh	r3, [r4, #12]
 80154fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015504:	6921      	ldr	r1, [r4, #16]
 8015506:	464a      	mov	r2, r9
 8015508:	f7ff fb1b 	bl	8014b42 <memcpy>
 801550c:	89a3      	ldrh	r3, [r4, #12]
 801550e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015516:	81a3      	strh	r3, [r4, #12]
 8015518:	6126      	str	r6, [r4, #16]
 801551a:	6165      	str	r5, [r4, #20]
 801551c:	444e      	add	r6, r9
 801551e:	eba5 0509 	sub.w	r5, r5, r9
 8015522:	6026      	str	r6, [r4, #0]
 8015524:	60a5      	str	r5, [r4, #8]
 8015526:	463e      	mov	r6, r7
 8015528:	42be      	cmp	r6, r7
 801552a:	d900      	bls.n	801552e <__ssputs_r+0x86>
 801552c:	463e      	mov	r6, r7
 801552e:	6820      	ldr	r0, [r4, #0]
 8015530:	4632      	mov	r2, r6
 8015532:	4641      	mov	r1, r8
 8015534:	f7ff fb13 	bl	8014b5e <memmove>
 8015538:	68a3      	ldr	r3, [r4, #8]
 801553a:	1b9b      	subs	r3, r3, r6
 801553c:	60a3      	str	r3, [r4, #8]
 801553e:	6823      	ldr	r3, [r4, #0]
 8015540:	4433      	add	r3, r6
 8015542:	6023      	str	r3, [r4, #0]
 8015544:	2000      	movs	r0, #0
 8015546:	e7db      	b.n	8015500 <__ssputs_r+0x58>
 8015548:	462a      	mov	r2, r5
 801554a:	f000 fc33 	bl	8015db4 <_realloc_r>
 801554e:	4606      	mov	r6, r0
 8015550:	2800      	cmp	r0, #0
 8015552:	d1e1      	bne.n	8015518 <__ssputs_r+0x70>
 8015554:	6921      	ldr	r1, [r4, #16]
 8015556:	4650      	mov	r0, sl
 8015558:	f7ff fb24 	bl	8014ba4 <_free_r>
 801555c:	e7c7      	b.n	80154ee <__ssputs_r+0x46>
	...

08015560 <_svfiprintf_r>:
 8015560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015564:	4698      	mov	r8, r3
 8015566:	898b      	ldrh	r3, [r1, #12]
 8015568:	061b      	lsls	r3, r3, #24
 801556a:	b09d      	sub	sp, #116	; 0x74
 801556c:	4607      	mov	r7, r0
 801556e:	460d      	mov	r5, r1
 8015570:	4614      	mov	r4, r2
 8015572:	d50e      	bpl.n	8015592 <_svfiprintf_r+0x32>
 8015574:	690b      	ldr	r3, [r1, #16]
 8015576:	b963      	cbnz	r3, 8015592 <_svfiprintf_r+0x32>
 8015578:	2140      	movs	r1, #64	; 0x40
 801557a:	f7ff fb7f 	bl	8014c7c <_malloc_r>
 801557e:	6028      	str	r0, [r5, #0]
 8015580:	6128      	str	r0, [r5, #16]
 8015582:	b920      	cbnz	r0, 801558e <_svfiprintf_r+0x2e>
 8015584:	230c      	movs	r3, #12
 8015586:	603b      	str	r3, [r7, #0]
 8015588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801558c:	e0d1      	b.n	8015732 <_svfiprintf_r+0x1d2>
 801558e:	2340      	movs	r3, #64	; 0x40
 8015590:	616b      	str	r3, [r5, #20]
 8015592:	2300      	movs	r3, #0
 8015594:	9309      	str	r3, [sp, #36]	; 0x24
 8015596:	2320      	movs	r3, #32
 8015598:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801559c:	f8cd 800c 	str.w	r8, [sp, #12]
 80155a0:	2330      	movs	r3, #48	; 0x30
 80155a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801574c <_svfiprintf_r+0x1ec>
 80155a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80155aa:	f04f 0901 	mov.w	r9, #1
 80155ae:	4623      	mov	r3, r4
 80155b0:	469a      	mov	sl, r3
 80155b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80155b6:	b10a      	cbz	r2, 80155bc <_svfiprintf_r+0x5c>
 80155b8:	2a25      	cmp	r2, #37	; 0x25
 80155ba:	d1f9      	bne.n	80155b0 <_svfiprintf_r+0x50>
 80155bc:	ebba 0b04 	subs.w	fp, sl, r4
 80155c0:	d00b      	beq.n	80155da <_svfiprintf_r+0x7a>
 80155c2:	465b      	mov	r3, fp
 80155c4:	4622      	mov	r2, r4
 80155c6:	4629      	mov	r1, r5
 80155c8:	4638      	mov	r0, r7
 80155ca:	f7ff ff6d 	bl	80154a8 <__ssputs_r>
 80155ce:	3001      	adds	r0, #1
 80155d0:	f000 80aa 	beq.w	8015728 <_svfiprintf_r+0x1c8>
 80155d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80155d6:	445a      	add	r2, fp
 80155d8:	9209      	str	r2, [sp, #36]	; 0x24
 80155da:	f89a 3000 	ldrb.w	r3, [sl]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	f000 80a2 	beq.w	8015728 <_svfiprintf_r+0x1c8>
 80155e4:	2300      	movs	r3, #0
 80155e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80155ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80155ee:	f10a 0a01 	add.w	sl, sl, #1
 80155f2:	9304      	str	r3, [sp, #16]
 80155f4:	9307      	str	r3, [sp, #28]
 80155f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80155fa:	931a      	str	r3, [sp, #104]	; 0x68
 80155fc:	4654      	mov	r4, sl
 80155fe:	2205      	movs	r2, #5
 8015600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015604:	4851      	ldr	r0, [pc, #324]	; (801574c <_svfiprintf_r+0x1ec>)
 8015606:	f7ea fe1b 	bl	8000240 <memchr>
 801560a:	9a04      	ldr	r2, [sp, #16]
 801560c:	b9d8      	cbnz	r0, 8015646 <_svfiprintf_r+0xe6>
 801560e:	06d0      	lsls	r0, r2, #27
 8015610:	bf44      	itt	mi
 8015612:	2320      	movmi	r3, #32
 8015614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015618:	0711      	lsls	r1, r2, #28
 801561a:	bf44      	itt	mi
 801561c:	232b      	movmi	r3, #43	; 0x2b
 801561e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015622:	f89a 3000 	ldrb.w	r3, [sl]
 8015626:	2b2a      	cmp	r3, #42	; 0x2a
 8015628:	d015      	beq.n	8015656 <_svfiprintf_r+0xf6>
 801562a:	9a07      	ldr	r2, [sp, #28]
 801562c:	4654      	mov	r4, sl
 801562e:	2000      	movs	r0, #0
 8015630:	f04f 0c0a 	mov.w	ip, #10
 8015634:	4621      	mov	r1, r4
 8015636:	f811 3b01 	ldrb.w	r3, [r1], #1
 801563a:	3b30      	subs	r3, #48	; 0x30
 801563c:	2b09      	cmp	r3, #9
 801563e:	d94e      	bls.n	80156de <_svfiprintf_r+0x17e>
 8015640:	b1b0      	cbz	r0, 8015670 <_svfiprintf_r+0x110>
 8015642:	9207      	str	r2, [sp, #28]
 8015644:	e014      	b.n	8015670 <_svfiprintf_r+0x110>
 8015646:	eba0 0308 	sub.w	r3, r0, r8
 801564a:	fa09 f303 	lsl.w	r3, r9, r3
 801564e:	4313      	orrs	r3, r2
 8015650:	9304      	str	r3, [sp, #16]
 8015652:	46a2      	mov	sl, r4
 8015654:	e7d2      	b.n	80155fc <_svfiprintf_r+0x9c>
 8015656:	9b03      	ldr	r3, [sp, #12]
 8015658:	1d19      	adds	r1, r3, #4
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	9103      	str	r1, [sp, #12]
 801565e:	2b00      	cmp	r3, #0
 8015660:	bfbb      	ittet	lt
 8015662:	425b      	neglt	r3, r3
 8015664:	f042 0202 	orrlt.w	r2, r2, #2
 8015668:	9307      	strge	r3, [sp, #28]
 801566a:	9307      	strlt	r3, [sp, #28]
 801566c:	bfb8      	it	lt
 801566e:	9204      	strlt	r2, [sp, #16]
 8015670:	7823      	ldrb	r3, [r4, #0]
 8015672:	2b2e      	cmp	r3, #46	; 0x2e
 8015674:	d10c      	bne.n	8015690 <_svfiprintf_r+0x130>
 8015676:	7863      	ldrb	r3, [r4, #1]
 8015678:	2b2a      	cmp	r3, #42	; 0x2a
 801567a:	d135      	bne.n	80156e8 <_svfiprintf_r+0x188>
 801567c:	9b03      	ldr	r3, [sp, #12]
 801567e:	1d1a      	adds	r2, r3, #4
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	9203      	str	r2, [sp, #12]
 8015684:	2b00      	cmp	r3, #0
 8015686:	bfb8      	it	lt
 8015688:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801568c:	3402      	adds	r4, #2
 801568e:	9305      	str	r3, [sp, #20]
 8015690:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801575c <_svfiprintf_r+0x1fc>
 8015694:	7821      	ldrb	r1, [r4, #0]
 8015696:	2203      	movs	r2, #3
 8015698:	4650      	mov	r0, sl
 801569a:	f7ea fdd1 	bl	8000240 <memchr>
 801569e:	b140      	cbz	r0, 80156b2 <_svfiprintf_r+0x152>
 80156a0:	2340      	movs	r3, #64	; 0x40
 80156a2:	eba0 000a 	sub.w	r0, r0, sl
 80156a6:	fa03 f000 	lsl.w	r0, r3, r0
 80156aa:	9b04      	ldr	r3, [sp, #16]
 80156ac:	4303      	orrs	r3, r0
 80156ae:	3401      	adds	r4, #1
 80156b0:	9304      	str	r3, [sp, #16]
 80156b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156b6:	4826      	ldr	r0, [pc, #152]	; (8015750 <_svfiprintf_r+0x1f0>)
 80156b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80156bc:	2206      	movs	r2, #6
 80156be:	f7ea fdbf 	bl	8000240 <memchr>
 80156c2:	2800      	cmp	r0, #0
 80156c4:	d038      	beq.n	8015738 <_svfiprintf_r+0x1d8>
 80156c6:	4b23      	ldr	r3, [pc, #140]	; (8015754 <_svfiprintf_r+0x1f4>)
 80156c8:	bb1b      	cbnz	r3, 8015712 <_svfiprintf_r+0x1b2>
 80156ca:	9b03      	ldr	r3, [sp, #12]
 80156cc:	3307      	adds	r3, #7
 80156ce:	f023 0307 	bic.w	r3, r3, #7
 80156d2:	3308      	adds	r3, #8
 80156d4:	9303      	str	r3, [sp, #12]
 80156d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156d8:	4433      	add	r3, r6
 80156da:	9309      	str	r3, [sp, #36]	; 0x24
 80156dc:	e767      	b.n	80155ae <_svfiprintf_r+0x4e>
 80156de:	fb0c 3202 	mla	r2, ip, r2, r3
 80156e2:	460c      	mov	r4, r1
 80156e4:	2001      	movs	r0, #1
 80156e6:	e7a5      	b.n	8015634 <_svfiprintf_r+0xd4>
 80156e8:	2300      	movs	r3, #0
 80156ea:	3401      	adds	r4, #1
 80156ec:	9305      	str	r3, [sp, #20]
 80156ee:	4619      	mov	r1, r3
 80156f0:	f04f 0c0a 	mov.w	ip, #10
 80156f4:	4620      	mov	r0, r4
 80156f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80156fa:	3a30      	subs	r2, #48	; 0x30
 80156fc:	2a09      	cmp	r2, #9
 80156fe:	d903      	bls.n	8015708 <_svfiprintf_r+0x1a8>
 8015700:	2b00      	cmp	r3, #0
 8015702:	d0c5      	beq.n	8015690 <_svfiprintf_r+0x130>
 8015704:	9105      	str	r1, [sp, #20]
 8015706:	e7c3      	b.n	8015690 <_svfiprintf_r+0x130>
 8015708:	fb0c 2101 	mla	r1, ip, r1, r2
 801570c:	4604      	mov	r4, r0
 801570e:	2301      	movs	r3, #1
 8015710:	e7f0      	b.n	80156f4 <_svfiprintf_r+0x194>
 8015712:	ab03      	add	r3, sp, #12
 8015714:	9300      	str	r3, [sp, #0]
 8015716:	462a      	mov	r2, r5
 8015718:	4b0f      	ldr	r3, [pc, #60]	; (8015758 <_svfiprintf_r+0x1f8>)
 801571a:	a904      	add	r1, sp, #16
 801571c:	4638      	mov	r0, r7
 801571e:	f3af 8000 	nop.w
 8015722:	1c42      	adds	r2, r0, #1
 8015724:	4606      	mov	r6, r0
 8015726:	d1d6      	bne.n	80156d6 <_svfiprintf_r+0x176>
 8015728:	89ab      	ldrh	r3, [r5, #12]
 801572a:	065b      	lsls	r3, r3, #25
 801572c:	f53f af2c 	bmi.w	8015588 <_svfiprintf_r+0x28>
 8015730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015732:	b01d      	add	sp, #116	; 0x74
 8015734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015738:	ab03      	add	r3, sp, #12
 801573a:	9300      	str	r3, [sp, #0]
 801573c:	462a      	mov	r2, r5
 801573e:	4b06      	ldr	r3, [pc, #24]	; (8015758 <_svfiprintf_r+0x1f8>)
 8015740:	a904      	add	r1, sp, #16
 8015742:	4638      	mov	r0, r7
 8015744:	f000 f9d4 	bl	8015af0 <_printf_i>
 8015748:	e7eb      	b.n	8015722 <_svfiprintf_r+0x1c2>
 801574a:	bf00      	nop
 801574c:	08018dbe 	.word	0x08018dbe
 8015750:	08018dc8 	.word	0x08018dc8
 8015754:	00000000 	.word	0x00000000
 8015758:	080154a9 	.word	0x080154a9
 801575c:	08018dc4 	.word	0x08018dc4

08015760 <__sfputc_r>:
 8015760:	6893      	ldr	r3, [r2, #8]
 8015762:	3b01      	subs	r3, #1
 8015764:	2b00      	cmp	r3, #0
 8015766:	b410      	push	{r4}
 8015768:	6093      	str	r3, [r2, #8]
 801576a:	da08      	bge.n	801577e <__sfputc_r+0x1e>
 801576c:	6994      	ldr	r4, [r2, #24]
 801576e:	42a3      	cmp	r3, r4
 8015770:	db01      	blt.n	8015776 <__sfputc_r+0x16>
 8015772:	290a      	cmp	r1, #10
 8015774:	d103      	bne.n	801577e <__sfputc_r+0x1e>
 8015776:	f85d 4b04 	ldr.w	r4, [sp], #4
 801577a:	f7ff bce5 	b.w	8015148 <__swbuf_r>
 801577e:	6813      	ldr	r3, [r2, #0]
 8015780:	1c58      	adds	r0, r3, #1
 8015782:	6010      	str	r0, [r2, #0]
 8015784:	7019      	strb	r1, [r3, #0]
 8015786:	4608      	mov	r0, r1
 8015788:	f85d 4b04 	ldr.w	r4, [sp], #4
 801578c:	4770      	bx	lr

0801578e <__sfputs_r>:
 801578e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015790:	4606      	mov	r6, r0
 8015792:	460f      	mov	r7, r1
 8015794:	4614      	mov	r4, r2
 8015796:	18d5      	adds	r5, r2, r3
 8015798:	42ac      	cmp	r4, r5
 801579a:	d101      	bne.n	80157a0 <__sfputs_r+0x12>
 801579c:	2000      	movs	r0, #0
 801579e:	e007      	b.n	80157b0 <__sfputs_r+0x22>
 80157a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157a4:	463a      	mov	r2, r7
 80157a6:	4630      	mov	r0, r6
 80157a8:	f7ff ffda 	bl	8015760 <__sfputc_r>
 80157ac:	1c43      	adds	r3, r0, #1
 80157ae:	d1f3      	bne.n	8015798 <__sfputs_r+0xa>
 80157b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080157b4 <_vfiprintf_r>:
 80157b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157b8:	460d      	mov	r5, r1
 80157ba:	b09d      	sub	sp, #116	; 0x74
 80157bc:	4614      	mov	r4, r2
 80157be:	4698      	mov	r8, r3
 80157c0:	4606      	mov	r6, r0
 80157c2:	b118      	cbz	r0, 80157cc <_vfiprintf_r+0x18>
 80157c4:	6983      	ldr	r3, [r0, #24]
 80157c6:	b90b      	cbnz	r3, 80157cc <_vfiprintf_r+0x18>
 80157c8:	f7ff f8e6 	bl	8014998 <__sinit>
 80157cc:	4b89      	ldr	r3, [pc, #548]	; (80159f4 <_vfiprintf_r+0x240>)
 80157ce:	429d      	cmp	r5, r3
 80157d0:	d11b      	bne.n	801580a <_vfiprintf_r+0x56>
 80157d2:	6875      	ldr	r5, [r6, #4]
 80157d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80157d6:	07d9      	lsls	r1, r3, #31
 80157d8:	d405      	bmi.n	80157e6 <_vfiprintf_r+0x32>
 80157da:	89ab      	ldrh	r3, [r5, #12]
 80157dc:	059a      	lsls	r2, r3, #22
 80157de:	d402      	bmi.n	80157e6 <_vfiprintf_r+0x32>
 80157e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80157e2:	f7ff f99c 	bl	8014b1e <__retarget_lock_acquire_recursive>
 80157e6:	89ab      	ldrh	r3, [r5, #12]
 80157e8:	071b      	lsls	r3, r3, #28
 80157ea:	d501      	bpl.n	80157f0 <_vfiprintf_r+0x3c>
 80157ec:	692b      	ldr	r3, [r5, #16]
 80157ee:	b9eb      	cbnz	r3, 801582c <_vfiprintf_r+0x78>
 80157f0:	4629      	mov	r1, r5
 80157f2:	4630      	mov	r0, r6
 80157f4:	f7ff fd0c 	bl	8015210 <__swsetup_r>
 80157f8:	b1c0      	cbz	r0, 801582c <_vfiprintf_r+0x78>
 80157fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80157fc:	07dc      	lsls	r4, r3, #31
 80157fe:	d50e      	bpl.n	801581e <_vfiprintf_r+0x6a>
 8015800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015804:	b01d      	add	sp, #116	; 0x74
 8015806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801580a:	4b7b      	ldr	r3, [pc, #492]	; (80159f8 <_vfiprintf_r+0x244>)
 801580c:	429d      	cmp	r5, r3
 801580e:	d101      	bne.n	8015814 <_vfiprintf_r+0x60>
 8015810:	68b5      	ldr	r5, [r6, #8]
 8015812:	e7df      	b.n	80157d4 <_vfiprintf_r+0x20>
 8015814:	4b79      	ldr	r3, [pc, #484]	; (80159fc <_vfiprintf_r+0x248>)
 8015816:	429d      	cmp	r5, r3
 8015818:	bf08      	it	eq
 801581a:	68f5      	ldreq	r5, [r6, #12]
 801581c:	e7da      	b.n	80157d4 <_vfiprintf_r+0x20>
 801581e:	89ab      	ldrh	r3, [r5, #12]
 8015820:	0598      	lsls	r0, r3, #22
 8015822:	d4ed      	bmi.n	8015800 <_vfiprintf_r+0x4c>
 8015824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015826:	f7ff f97b 	bl	8014b20 <__retarget_lock_release_recursive>
 801582a:	e7e9      	b.n	8015800 <_vfiprintf_r+0x4c>
 801582c:	2300      	movs	r3, #0
 801582e:	9309      	str	r3, [sp, #36]	; 0x24
 8015830:	2320      	movs	r3, #32
 8015832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015836:	f8cd 800c 	str.w	r8, [sp, #12]
 801583a:	2330      	movs	r3, #48	; 0x30
 801583c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015a00 <_vfiprintf_r+0x24c>
 8015840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015844:	f04f 0901 	mov.w	r9, #1
 8015848:	4623      	mov	r3, r4
 801584a:	469a      	mov	sl, r3
 801584c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015850:	b10a      	cbz	r2, 8015856 <_vfiprintf_r+0xa2>
 8015852:	2a25      	cmp	r2, #37	; 0x25
 8015854:	d1f9      	bne.n	801584a <_vfiprintf_r+0x96>
 8015856:	ebba 0b04 	subs.w	fp, sl, r4
 801585a:	d00b      	beq.n	8015874 <_vfiprintf_r+0xc0>
 801585c:	465b      	mov	r3, fp
 801585e:	4622      	mov	r2, r4
 8015860:	4629      	mov	r1, r5
 8015862:	4630      	mov	r0, r6
 8015864:	f7ff ff93 	bl	801578e <__sfputs_r>
 8015868:	3001      	adds	r0, #1
 801586a:	f000 80aa 	beq.w	80159c2 <_vfiprintf_r+0x20e>
 801586e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015870:	445a      	add	r2, fp
 8015872:	9209      	str	r2, [sp, #36]	; 0x24
 8015874:	f89a 3000 	ldrb.w	r3, [sl]
 8015878:	2b00      	cmp	r3, #0
 801587a:	f000 80a2 	beq.w	80159c2 <_vfiprintf_r+0x20e>
 801587e:	2300      	movs	r3, #0
 8015880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015888:	f10a 0a01 	add.w	sl, sl, #1
 801588c:	9304      	str	r3, [sp, #16]
 801588e:	9307      	str	r3, [sp, #28]
 8015890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015894:	931a      	str	r3, [sp, #104]	; 0x68
 8015896:	4654      	mov	r4, sl
 8015898:	2205      	movs	r2, #5
 801589a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801589e:	4858      	ldr	r0, [pc, #352]	; (8015a00 <_vfiprintf_r+0x24c>)
 80158a0:	f7ea fcce 	bl	8000240 <memchr>
 80158a4:	9a04      	ldr	r2, [sp, #16]
 80158a6:	b9d8      	cbnz	r0, 80158e0 <_vfiprintf_r+0x12c>
 80158a8:	06d1      	lsls	r1, r2, #27
 80158aa:	bf44      	itt	mi
 80158ac:	2320      	movmi	r3, #32
 80158ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80158b2:	0713      	lsls	r3, r2, #28
 80158b4:	bf44      	itt	mi
 80158b6:	232b      	movmi	r3, #43	; 0x2b
 80158b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80158bc:	f89a 3000 	ldrb.w	r3, [sl]
 80158c0:	2b2a      	cmp	r3, #42	; 0x2a
 80158c2:	d015      	beq.n	80158f0 <_vfiprintf_r+0x13c>
 80158c4:	9a07      	ldr	r2, [sp, #28]
 80158c6:	4654      	mov	r4, sl
 80158c8:	2000      	movs	r0, #0
 80158ca:	f04f 0c0a 	mov.w	ip, #10
 80158ce:	4621      	mov	r1, r4
 80158d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80158d4:	3b30      	subs	r3, #48	; 0x30
 80158d6:	2b09      	cmp	r3, #9
 80158d8:	d94e      	bls.n	8015978 <_vfiprintf_r+0x1c4>
 80158da:	b1b0      	cbz	r0, 801590a <_vfiprintf_r+0x156>
 80158dc:	9207      	str	r2, [sp, #28]
 80158de:	e014      	b.n	801590a <_vfiprintf_r+0x156>
 80158e0:	eba0 0308 	sub.w	r3, r0, r8
 80158e4:	fa09 f303 	lsl.w	r3, r9, r3
 80158e8:	4313      	orrs	r3, r2
 80158ea:	9304      	str	r3, [sp, #16]
 80158ec:	46a2      	mov	sl, r4
 80158ee:	e7d2      	b.n	8015896 <_vfiprintf_r+0xe2>
 80158f0:	9b03      	ldr	r3, [sp, #12]
 80158f2:	1d19      	adds	r1, r3, #4
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	9103      	str	r1, [sp, #12]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	bfbb      	ittet	lt
 80158fc:	425b      	neglt	r3, r3
 80158fe:	f042 0202 	orrlt.w	r2, r2, #2
 8015902:	9307      	strge	r3, [sp, #28]
 8015904:	9307      	strlt	r3, [sp, #28]
 8015906:	bfb8      	it	lt
 8015908:	9204      	strlt	r2, [sp, #16]
 801590a:	7823      	ldrb	r3, [r4, #0]
 801590c:	2b2e      	cmp	r3, #46	; 0x2e
 801590e:	d10c      	bne.n	801592a <_vfiprintf_r+0x176>
 8015910:	7863      	ldrb	r3, [r4, #1]
 8015912:	2b2a      	cmp	r3, #42	; 0x2a
 8015914:	d135      	bne.n	8015982 <_vfiprintf_r+0x1ce>
 8015916:	9b03      	ldr	r3, [sp, #12]
 8015918:	1d1a      	adds	r2, r3, #4
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	9203      	str	r2, [sp, #12]
 801591e:	2b00      	cmp	r3, #0
 8015920:	bfb8      	it	lt
 8015922:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015926:	3402      	adds	r4, #2
 8015928:	9305      	str	r3, [sp, #20]
 801592a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015a10 <_vfiprintf_r+0x25c>
 801592e:	7821      	ldrb	r1, [r4, #0]
 8015930:	2203      	movs	r2, #3
 8015932:	4650      	mov	r0, sl
 8015934:	f7ea fc84 	bl	8000240 <memchr>
 8015938:	b140      	cbz	r0, 801594c <_vfiprintf_r+0x198>
 801593a:	2340      	movs	r3, #64	; 0x40
 801593c:	eba0 000a 	sub.w	r0, r0, sl
 8015940:	fa03 f000 	lsl.w	r0, r3, r0
 8015944:	9b04      	ldr	r3, [sp, #16]
 8015946:	4303      	orrs	r3, r0
 8015948:	3401      	adds	r4, #1
 801594a:	9304      	str	r3, [sp, #16]
 801594c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015950:	482c      	ldr	r0, [pc, #176]	; (8015a04 <_vfiprintf_r+0x250>)
 8015952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015956:	2206      	movs	r2, #6
 8015958:	f7ea fc72 	bl	8000240 <memchr>
 801595c:	2800      	cmp	r0, #0
 801595e:	d03f      	beq.n	80159e0 <_vfiprintf_r+0x22c>
 8015960:	4b29      	ldr	r3, [pc, #164]	; (8015a08 <_vfiprintf_r+0x254>)
 8015962:	bb1b      	cbnz	r3, 80159ac <_vfiprintf_r+0x1f8>
 8015964:	9b03      	ldr	r3, [sp, #12]
 8015966:	3307      	adds	r3, #7
 8015968:	f023 0307 	bic.w	r3, r3, #7
 801596c:	3308      	adds	r3, #8
 801596e:	9303      	str	r3, [sp, #12]
 8015970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015972:	443b      	add	r3, r7
 8015974:	9309      	str	r3, [sp, #36]	; 0x24
 8015976:	e767      	b.n	8015848 <_vfiprintf_r+0x94>
 8015978:	fb0c 3202 	mla	r2, ip, r2, r3
 801597c:	460c      	mov	r4, r1
 801597e:	2001      	movs	r0, #1
 8015980:	e7a5      	b.n	80158ce <_vfiprintf_r+0x11a>
 8015982:	2300      	movs	r3, #0
 8015984:	3401      	adds	r4, #1
 8015986:	9305      	str	r3, [sp, #20]
 8015988:	4619      	mov	r1, r3
 801598a:	f04f 0c0a 	mov.w	ip, #10
 801598e:	4620      	mov	r0, r4
 8015990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015994:	3a30      	subs	r2, #48	; 0x30
 8015996:	2a09      	cmp	r2, #9
 8015998:	d903      	bls.n	80159a2 <_vfiprintf_r+0x1ee>
 801599a:	2b00      	cmp	r3, #0
 801599c:	d0c5      	beq.n	801592a <_vfiprintf_r+0x176>
 801599e:	9105      	str	r1, [sp, #20]
 80159a0:	e7c3      	b.n	801592a <_vfiprintf_r+0x176>
 80159a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80159a6:	4604      	mov	r4, r0
 80159a8:	2301      	movs	r3, #1
 80159aa:	e7f0      	b.n	801598e <_vfiprintf_r+0x1da>
 80159ac:	ab03      	add	r3, sp, #12
 80159ae:	9300      	str	r3, [sp, #0]
 80159b0:	462a      	mov	r2, r5
 80159b2:	4b16      	ldr	r3, [pc, #88]	; (8015a0c <_vfiprintf_r+0x258>)
 80159b4:	a904      	add	r1, sp, #16
 80159b6:	4630      	mov	r0, r6
 80159b8:	f3af 8000 	nop.w
 80159bc:	4607      	mov	r7, r0
 80159be:	1c78      	adds	r0, r7, #1
 80159c0:	d1d6      	bne.n	8015970 <_vfiprintf_r+0x1bc>
 80159c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80159c4:	07d9      	lsls	r1, r3, #31
 80159c6:	d405      	bmi.n	80159d4 <_vfiprintf_r+0x220>
 80159c8:	89ab      	ldrh	r3, [r5, #12]
 80159ca:	059a      	lsls	r2, r3, #22
 80159cc:	d402      	bmi.n	80159d4 <_vfiprintf_r+0x220>
 80159ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80159d0:	f7ff f8a6 	bl	8014b20 <__retarget_lock_release_recursive>
 80159d4:	89ab      	ldrh	r3, [r5, #12]
 80159d6:	065b      	lsls	r3, r3, #25
 80159d8:	f53f af12 	bmi.w	8015800 <_vfiprintf_r+0x4c>
 80159dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80159de:	e711      	b.n	8015804 <_vfiprintf_r+0x50>
 80159e0:	ab03      	add	r3, sp, #12
 80159e2:	9300      	str	r3, [sp, #0]
 80159e4:	462a      	mov	r2, r5
 80159e6:	4b09      	ldr	r3, [pc, #36]	; (8015a0c <_vfiprintf_r+0x258>)
 80159e8:	a904      	add	r1, sp, #16
 80159ea:	4630      	mov	r0, r6
 80159ec:	f000 f880 	bl	8015af0 <_printf_i>
 80159f0:	e7e4      	b.n	80159bc <_vfiprintf_r+0x208>
 80159f2:	bf00      	nop
 80159f4:	08018ccc 	.word	0x08018ccc
 80159f8:	08018cec 	.word	0x08018cec
 80159fc:	08018cac 	.word	0x08018cac
 8015a00:	08018dbe 	.word	0x08018dbe
 8015a04:	08018dc8 	.word	0x08018dc8
 8015a08:	00000000 	.word	0x00000000
 8015a0c:	0801578f 	.word	0x0801578f
 8015a10:	08018dc4 	.word	0x08018dc4

08015a14 <_printf_common>:
 8015a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a18:	4616      	mov	r6, r2
 8015a1a:	4699      	mov	r9, r3
 8015a1c:	688a      	ldr	r2, [r1, #8]
 8015a1e:	690b      	ldr	r3, [r1, #16]
 8015a20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015a24:	4293      	cmp	r3, r2
 8015a26:	bfb8      	it	lt
 8015a28:	4613      	movlt	r3, r2
 8015a2a:	6033      	str	r3, [r6, #0]
 8015a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015a30:	4607      	mov	r7, r0
 8015a32:	460c      	mov	r4, r1
 8015a34:	b10a      	cbz	r2, 8015a3a <_printf_common+0x26>
 8015a36:	3301      	adds	r3, #1
 8015a38:	6033      	str	r3, [r6, #0]
 8015a3a:	6823      	ldr	r3, [r4, #0]
 8015a3c:	0699      	lsls	r1, r3, #26
 8015a3e:	bf42      	ittt	mi
 8015a40:	6833      	ldrmi	r3, [r6, #0]
 8015a42:	3302      	addmi	r3, #2
 8015a44:	6033      	strmi	r3, [r6, #0]
 8015a46:	6825      	ldr	r5, [r4, #0]
 8015a48:	f015 0506 	ands.w	r5, r5, #6
 8015a4c:	d106      	bne.n	8015a5c <_printf_common+0x48>
 8015a4e:	f104 0a19 	add.w	sl, r4, #25
 8015a52:	68e3      	ldr	r3, [r4, #12]
 8015a54:	6832      	ldr	r2, [r6, #0]
 8015a56:	1a9b      	subs	r3, r3, r2
 8015a58:	42ab      	cmp	r3, r5
 8015a5a:	dc26      	bgt.n	8015aaa <_printf_common+0x96>
 8015a5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015a60:	1e13      	subs	r3, r2, #0
 8015a62:	6822      	ldr	r2, [r4, #0]
 8015a64:	bf18      	it	ne
 8015a66:	2301      	movne	r3, #1
 8015a68:	0692      	lsls	r2, r2, #26
 8015a6a:	d42b      	bmi.n	8015ac4 <_printf_common+0xb0>
 8015a6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015a70:	4649      	mov	r1, r9
 8015a72:	4638      	mov	r0, r7
 8015a74:	47c0      	blx	r8
 8015a76:	3001      	adds	r0, #1
 8015a78:	d01e      	beq.n	8015ab8 <_printf_common+0xa4>
 8015a7a:	6823      	ldr	r3, [r4, #0]
 8015a7c:	68e5      	ldr	r5, [r4, #12]
 8015a7e:	6832      	ldr	r2, [r6, #0]
 8015a80:	f003 0306 	and.w	r3, r3, #6
 8015a84:	2b04      	cmp	r3, #4
 8015a86:	bf08      	it	eq
 8015a88:	1aad      	subeq	r5, r5, r2
 8015a8a:	68a3      	ldr	r3, [r4, #8]
 8015a8c:	6922      	ldr	r2, [r4, #16]
 8015a8e:	bf0c      	ite	eq
 8015a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015a94:	2500      	movne	r5, #0
 8015a96:	4293      	cmp	r3, r2
 8015a98:	bfc4      	itt	gt
 8015a9a:	1a9b      	subgt	r3, r3, r2
 8015a9c:	18ed      	addgt	r5, r5, r3
 8015a9e:	2600      	movs	r6, #0
 8015aa0:	341a      	adds	r4, #26
 8015aa2:	42b5      	cmp	r5, r6
 8015aa4:	d11a      	bne.n	8015adc <_printf_common+0xc8>
 8015aa6:	2000      	movs	r0, #0
 8015aa8:	e008      	b.n	8015abc <_printf_common+0xa8>
 8015aaa:	2301      	movs	r3, #1
 8015aac:	4652      	mov	r2, sl
 8015aae:	4649      	mov	r1, r9
 8015ab0:	4638      	mov	r0, r7
 8015ab2:	47c0      	blx	r8
 8015ab4:	3001      	adds	r0, #1
 8015ab6:	d103      	bne.n	8015ac0 <_printf_common+0xac>
 8015ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ac0:	3501      	adds	r5, #1
 8015ac2:	e7c6      	b.n	8015a52 <_printf_common+0x3e>
 8015ac4:	18e1      	adds	r1, r4, r3
 8015ac6:	1c5a      	adds	r2, r3, #1
 8015ac8:	2030      	movs	r0, #48	; 0x30
 8015aca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015ace:	4422      	add	r2, r4
 8015ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015ad4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015ad8:	3302      	adds	r3, #2
 8015ada:	e7c7      	b.n	8015a6c <_printf_common+0x58>
 8015adc:	2301      	movs	r3, #1
 8015ade:	4622      	mov	r2, r4
 8015ae0:	4649      	mov	r1, r9
 8015ae2:	4638      	mov	r0, r7
 8015ae4:	47c0      	blx	r8
 8015ae6:	3001      	adds	r0, #1
 8015ae8:	d0e6      	beq.n	8015ab8 <_printf_common+0xa4>
 8015aea:	3601      	adds	r6, #1
 8015aec:	e7d9      	b.n	8015aa2 <_printf_common+0x8e>
	...

08015af0 <_printf_i>:
 8015af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015af4:	7e0f      	ldrb	r7, [r1, #24]
 8015af6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015af8:	2f78      	cmp	r7, #120	; 0x78
 8015afa:	4691      	mov	r9, r2
 8015afc:	4680      	mov	r8, r0
 8015afe:	460c      	mov	r4, r1
 8015b00:	469a      	mov	sl, r3
 8015b02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015b06:	d807      	bhi.n	8015b18 <_printf_i+0x28>
 8015b08:	2f62      	cmp	r7, #98	; 0x62
 8015b0a:	d80a      	bhi.n	8015b22 <_printf_i+0x32>
 8015b0c:	2f00      	cmp	r7, #0
 8015b0e:	f000 80d8 	beq.w	8015cc2 <_printf_i+0x1d2>
 8015b12:	2f58      	cmp	r7, #88	; 0x58
 8015b14:	f000 80a3 	beq.w	8015c5e <_printf_i+0x16e>
 8015b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015b1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015b20:	e03a      	b.n	8015b98 <_printf_i+0xa8>
 8015b22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015b26:	2b15      	cmp	r3, #21
 8015b28:	d8f6      	bhi.n	8015b18 <_printf_i+0x28>
 8015b2a:	a101      	add	r1, pc, #4	; (adr r1, 8015b30 <_printf_i+0x40>)
 8015b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015b30:	08015b89 	.word	0x08015b89
 8015b34:	08015b9d 	.word	0x08015b9d
 8015b38:	08015b19 	.word	0x08015b19
 8015b3c:	08015b19 	.word	0x08015b19
 8015b40:	08015b19 	.word	0x08015b19
 8015b44:	08015b19 	.word	0x08015b19
 8015b48:	08015b9d 	.word	0x08015b9d
 8015b4c:	08015b19 	.word	0x08015b19
 8015b50:	08015b19 	.word	0x08015b19
 8015b54:	08015b19 	.word	0x08015b19
 8015b58:	08015b19 	.word	0x08015b19
 8015b5c:	08015ca9 	.word	0x08015ca9
 8015b60:	08015bcd 	.word	0x08015bcd
 8015b64:	08015c8b 	.word	0x08015c8b
 8015b68:	08015b19 	.word	0x08015b19
 8015b6c:	08015b19 	.word	0x08015b19
 8015b70:	08015ccb 	.word	0x08015ccb
 8015b74:	08015b19 	.word	0x08015b19
 8015b78:	08015bcd 	.word	0x08015bcd
 8015b7c:	08015b19 	.word	0x08015b19
 8015b80:	08015b19 	.word	0x08015b19
 8015b84:	08015c93 	.word	0x08015c93
 8015b88:	682b      	ldr	r3, [r5, #0]
 8015b8a:	1d1a      	adds	r2, r3, #4
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	602a      	str	r2, [r5, #0]
 8015b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015b98:	2301      	movs	r3, #1
 8015b9a:	e0a3      	b.n	8015ce4 <_printf_i+0x1f4>
 8015b9c:	6820      	ldr	r0, [r4, #0]
 8015b9e:	6829      	ldr	r1, [r5, #0]
 8015ba0:	0606      	lsls	r6, r0, #24
 8015ba2:	f101 0304 	add.w	r3, r1, #4
 8015ba6:	d50a      	bpl.n	8015bbe <_printf_i+0xce>
 8015ba8:	680e      	ldr	r6, [r1, #0]
 8015baa:	602b      	str	r3, [r5, #0]
 8015bac:	2e00      	cmp	r6, #0
 8015bae:	da03      	bge.n	8015bb8 <_printf_i+0xc8>
 8015bb0:	232d      	movs	r3, #45	; 0x2d
 8015bb2:	4276      	negs	r6, r6
 8015bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015bb8:	485e      	ldr	r0, [pc, #376]	; (8015d34 <_printf_i+0x244>)
 8015bba:	230a      	movs	r3, #10
 8015bbc:	e019      	b.n	8015bf2 <_printf_i+0x102>
 8015bbe:	680e      	ldr	r6, [r1, #0]
 8015bc0:	602b      	str	r3, [r5, #0]
 8015bc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015bc6:	bf18      	it	ne
 8015bc8:	b236      	sxthne	r6, r6
 8015bca:	e7ef      	b.n	8015bac <_printf_i+0xbc>
 8015bcc:	682b      	ldr	r3, [r5, #0]
 8015bce:	6820      	ldr	r0, [r4, #0]
 8015bd0:	1d19      	adds	r1, r3, #4
 8015bd2:	6029      	str	r1, [r5, #0]
 8015bd4:	0601      	lsls	r1, r0, #24
 8015bd6:	d501      	bpl.n	8015bdc <_printf_i+0xec>
 8015bd8:	681e      	ldr	r6, [r3, #0]
 8015bda:	e002      	b.n	8015be2 <_printf_i+0xf2>
 8015bdc:	0646      	lsls	r6, r0, #25
 8015bde:	d5fb      	bpl.n	8015bd8 <_printf_i+0xe8>
 8015be0:	881e      	ldrh	r6, [r3, #0]
 8015be2:	4854      	ldr	r0, [pc, #336]	; (8015d34 <_printf_i+0x244>)
 8015be4:	2f6f      	cmp	r7, #111	; 0x6f
 8015be6:	bf0c      	ite	eq
 8015be8:	2308      	moveq	r3, #8
 8015bea:	230a      	movne	r3, #10
 8015bec:	2100      	movs	r1, #0
 8015bee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015bf2:	6865      	ldr	r5, [r4, #4]
 8015bf4:	60a5      	str	r5, [r4, #8]
 8015bf6:	2d00      	cmp	r5, #0
 8015bf8:	bfa2      	ittt	ge
 8015bfa:	6821      	ldrge	r1, [r4, #0]
 8015bfc:	f021 0104 	bicge.w	r1, r1, #4
 8015c00:	6021      	strge	r1, [r4, #0]
 8015c02:	b90e      	cbnz	r6, 8015c08 <_printf_i+0x118>
 8015c04:	2d00      	cmp	r5, #0
 8015c06:	d04d      	beq.n	8015ca4 <_printf_i+0x1b4>
 8015c08:	4615      	mov	r5, r2
 8015c0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8015c0e:	fb03 6711 	mls	r7, r3, r1, r6
 8015c12:	5dc7      	ldrb	r7, [r0, r7]
 8015c14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015c18:	4637      	mov	r7, r6
 8015c1a:	42bb      	cmp	r3, r7
 8015c1c:	460e      	mov	r6, r1
 8015c1e:	d9f4      	bls.n	8015c0a <_printf_i+0x11a>
 8015c20:	2b08      	cmp	r3, #8
 8015c22:	d10b      	bne.n	8015c3c <_printf_i+0x14c>
 8015c24:	6823      	ldr	r3, [r4, #0]
 8015c26:	07de      	lsls	r6, r3, #31
 8015c28:	d508      	bpl.n	8015c3c <_printf_i+0x14c>
 8015c2a:	6923      	ldr	r3, [r4, #16]
 8015c2c:	6861      	ldr	r1, [r4, #4]
 8015c2e:	4299      	cmp	r1, r3
 8015c30:	bfde      	ittt	le
 8015c32:	2330      	movle	r3, #48	; 0x30
 8015c34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015c38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015c3c:	1b52      	subs	r2, r2, r5
 8015c3e:	6122      	str	r2, [r4, #16]
 8015c40:	f8cd a000 	str.w	sl, [sp]
 8015c44:	464b      	mov	r3, r9
 8015c46:	aa03      	add	r2, sp, #12
 8015c48:	4621      	mov	r1, r4
 8015c4a:	4640      	mov	r0, r8
 8015c4c:	f7ff fee2 	bl	8015a14 <_printf_common>
 8015c50:	3001      	adds	r0, #1
 8015c52:	d14c      	bne.n	8015cee <_printf_i+0x1fe>
 8015c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015c58:	b004      	add	sp, #16
 8015c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c5e:	4835      	ldr	r0, [pc, #212]	; (8015d34 <_printf_i+0x244>)
 8015c60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015c64:	6829      	ldr	r1, [r5, #0]
 8015c66:	6823      	ldr	r3, [r4, #0]
 8015c68:	f851 6b04 	ldr.w	r6, [r1], #4
 8015c6c:	6029      	str	r1, [r5, #0]
 8015c6e:	061d      	lsls	r5, r3, #24
 8015c70:	d514      	bpl.n	8015c9c <_printf_i+0x1ac>
 8015c72:	07df      	lsls	r7, r3, #31
 8015c74:	bf44      	itt	mi
 8015c76:	f043 0320 	orrmi.w	r3, r3, #32
 8015c7a:	6023      	strmi	r3, [r4, #0]
 8015c7c:	b91e      	cbnz	r6, 8015c86 <_printf_i+0x196>
 8015c7e:	6823      	ldr	r3, [r4, #0]
 8015c80:	f023 0320 	bic.w	r3, r3, #32
 8015c84:	6023      	str	r3, [r4, #0]
 8015c86:	2310      	movs	r3, #16
 8015c88:	e7b0      	b.n	8015bec <_printf_i+0xfc>
 8015c8a:	6823      	ldr	r3, [r4, #0]
 8015c8c:	f043 0320 	orr.w	r3, r3, #32
 8015c90:	6023      	str	r3, [r4, #0]
 8015c92:	2378      	movs	r3, #120	; 0x78
 8015c94:	4828      	ldr	r0, [pc, #160]	; (8015d38 <_printf_i+0x248>)
 8015c96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015c9a:	e7e3      	b.n	8015c64 <_printf_i+0x174>
 8015c9c:	0659      	lsls	r1, r3, #25
 8015c9e:	bf48      	it	mi
 8015ca0:	b2b6      	uxthmi	r6, r6
 8015ca2:	e7e6      	b.n	8015c72 <_printf_i+0x182>
 8015ca4:	4615      	mov	r5, r2
 8015ca6:	e7bb      	b.n	8015c20 <_printf_i+0x130>
 8015ca8:	682b      	ldr	r3, [r5, #0]
 8015caa:	6826      	ldr	r6, [r4, #0]
 8015cac:	6961      	ldr	r1, [r4, #20]
 8015cae:	1d18      	adds	r0, r3, #4
 8015cb0:	6028      	str	r0, [r5, #0]
 8015cb2:	0635      	lsls	r5, r6, #24
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	d501      	bpl.n	8015cbc <_printf_i+0x1cc>
 8015cb8:	6019      	str	r1, [r3, #0]
 8015cba:	e002      	b.n	8015cc2 <_printf_i+0x1d2>
 8015cbc:	0670      	lsls	r0, r6, #25
 8015cbe:	d5fb      	bpl.n	8015cb8 <_printf_i+0x1c8>
 8015cc0:	8019      	strh	r1, [r3, #0]
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	6123      	str	r3, [r4, #16]
 8015cc6:	4615      	mov	r5, r2
 8015cc8:	e7ba      	b.n	8015c40 <_printf_i+0x150>
 8015cca:	682b      	ldr	r3, [r5, #0]
 8015ccc:	1d1a      	adds	r2, r3, #4
 8015cce:	602a      	str	r2, [r5, #0]
 8015cd0:	681d      	ldr	r5, [r3, #0]
 8015cd2:	6862      	ldr	r2, [r4, #4]
 8015cd4:	2100      	movs	r1, #0
 8015cd6:	4628      	mov	r0, r5
 8015cd8:	f7ea fab2 	bl	8000240 <memchr>
 8015cdc:	b108      	cbz	r0, 8015ce2 <_printf_i+0x1f2>
 8015cde:	1b40      	subs	r0, r0, r5
 8015ce0:	6060      	str	r0, [r4, #4]
 8015ce2:	6863      	ldr	r3, [r4, #4]
 8015ce4:	6123      	str	r3, [r4, #16]
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015cec:	e7a8      	b.n	8015c40 <_printf_i+0x150>
 8015cee:	6923      	ldr	r3, [r4, #16]
 8015cf0:	462a      	mov	r2, r5
 8015cf2:	4649      	mov	r1, r9
 8015cf4:	4640      	mov	r0, r8
 8015cf6:	47d0      	blx	sl
 8015cf8:	3001      	adds	r0, #1
 8015cfa:	d0ab      	beq.n	8015c54 <_printf_i+0x164>
 8015cfc:	6823      	ldr	r3, [r4, #0]
 8015cfe:	079b      	lsls	r3, r3, #30
 8015d00:	d413      	bmi.n	8015d2a <_printf_i+0x23a>
 8015d02:	68e0      	ldr	r0, [r4, #12]
 8015d04:	9b03      	ldr	r3, [sp, #12]
 8015d06:	4298      	cmp	r0, r3
 8015d08:	bfb8      	it	lt
 8015d0a:	4618      	movlt	r0, r3
 8015d0c:	e7a4      	b.n	8015c58 <_printf_i+0x168>
 8015d0e:	2301      	movs	r3, #1
 8015d10:	4632      	mov	r2, r6
 8015d12:	4649      	mov	r1, r9
 8015d14:	4640      	mov	r0, r8
 8015d16:	47d0      	blx	sl
 8015d18:	3001      	adds	r0, #1
 8015d1a:	d09b      	beq.n	8015c54 <_printf_i+0x164>
 8015d1c:	3501      	adds	r5, #1
 8015d1e:	68e3      	ldr	r3, [r4, #12]
 8015d20:	9903      	ldr	r1, [sp, #12]
 8015d22:	1a5b      	subs	r3, r3, r1
 8015d24:	42ab      	cmp	r3, r5
 8015d26:	dcf2      	bgt.n	8015d0e <_printf_i+0x21e>
 8015d28:	e7eb      	b.n	8015d02 <_printf_i+0x212>
 8015d2a:	2500      	movs	r5, #0
 8015d2c:	f104 0619 	add.w	r6, r4, #25
 8015d30:	e7f5      	b.n	8015d1e <_printf_i+0x22e>
 8015d32:	bf00      	nop
 8015d34:	08018dcf 	.word	0x08018dcf
 8015d38:	08018de0 	.word	0x08018de0

08015d3c <_read_r>:
 8015d3c:	b538      	push	{r3, r4, r5, lr}
 8015d3e:	4d07      	ldr	r5, [pc, #28]	; (8015d5c <_read_r+0x20>)
 8015d40:	4604      	mov	r4, r0
 8015d42:	4608      	mov	r0, r1
 8015d44:	4611      	mov	r1, r2
 8015d46:	2200      	movs	r2, #0
 8015d48:	602a      	str	r2, [r5, #0]
 8015d4a:	461a      	mov	r2, r3
 8015d4c:	f7ea fefe 	bl	8000b4c <_read>
 8015d50:	1c43      	adds	r3, r0, #1
 8015d52:	d102      	bne.n	8015d5a <_read_r+0x1e>
 8015d54:	682b      	ldr	r3, [r5, #0]
 8015d56:	b103      	cbz	r3, 8015d5a <_read_r+0x1e>
 8015d58:	6023      	str	r3, [r4, #0]
 8015d5a:	bd38      	pop	{r3, r4, r5, pc}
 8015d5c:	20017be0 	.word	0x20017be0

08015d60 <abort>:
 8015d60:	b508      	push	{r3, lr}
 8015d62:	2006      	movs	r0, #6
 8015d64:	f000 f87e 	bl	8015e64 <raise>
 8015d68:	2001      	movs	r0, #1
 8015d6a:	f7ea fee5 	bl	8000b38 <_exit>
	...

08015d70 <_fstat_r>:
 8015d70:	b538      	push	{r3, r4, r5, lr}
 8015d72:	4d07      	ldr	r5, [pc, #28]	; (8015d90 <_fstat_r+0x20>)
 8015d74:	2300      	movs	r3, #0
 8015d76:	4604      	mov	r4, r0
 8015d78:	4608      	mov	r0, r1
 8015d7a:	4611      	mov	r1, r2
 8015d7c:	602b      	str	r3, [r5, #0]
 8015d7e:	f7ea ff0e 	bl	8000b9e <_fstat>
 8015d82:	1c43      	adds	r3, r0, #1
 8015d84:	d102      	bne.n	8015d8c <_fstat_r+0x1c>
 8015d86:	682b      	ldr	r3, [r5, #0]
 8015d88:	b103      	cbz	r3, 8015d8c <_fstat_r+0x1c>
 8015d8a:	6023      	str	r3, [r4, #0]
 8015d8c:	bd38      	pop	{r3, r4, r5, pc}
 8015d8e:	bf00      	nop
 8015d90:	20017be0 	.word	0x20017be0

08015d94 <_isatty_r>:
 8015d94:	b538      	push	{r3, r4, r5, lr}
 8015d96:	4d06      	ldr	r5, [pc, #24]	; (8015db0 <_isatty_r+0x1c>)
 8015d98:	2300      	movs	r3, #0
 8015d9a:	4604      	mov	r4, r0
 8015d9c:	4608      	mov	r0, r1
 8015d9e:	602b      	str	r3, [r5, #0]
 8015da0:	f7ea ff0d 	bl	8000bbe <_isatty>
 8015da4:	1c43      	adds	r3, r0, #1
 8015da6:	d102      	bne.n	8015dae <_isatty_r+0x1a>
 8015da8:	682b      	ldr	r3, [r5, #0]
 8015daa:	b103      	cbz	r3, 8015dae <_isatty_r+0x1a>
 8015dac:	6023      	str	r3, [r4, #0]
 8015dae:	bd38      	pop	{r3, r4, r5, pc}
 8015db0:	20017be0 	.word	0x20017be0

08015db4 <_realloc_r>:
 8015db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015db8:	4680      	mov	r8, r0
 8015dba:	4614      	mov	r4, r2
 8015dbc:	460e      	mov	r6, r1
 8015dbe:	b921      	cbnz	r1, 8015dca <_realloc_r+0x16>
 8015dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015dc4:	4611      	mov	r1, r2
 8015dc6:	f7fe bf59 	b.w	8014c7c <_malloc_r>
 8015dca:	b92a      	cbnz	r2, 8015dd8 <_realloc_r+0x24>
 8015dcc:	f7fe feea 	bl	8014ba4 <_free_r>
 8015dd0:	4625      	mov	r5, r4
 8015dd2:	4628      	mov	r0, r5
 8015dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dd8:	f000 f860 	bl	8015e9c <_malloc_usable_size_r>
 8015ddc:	4284      	cmp	r4, r0
 8015dde:	4607      	mov	r7, r0
 8015de0:	d802      	bhi.n	8015de8 <_realloc_r+0x34>
 8015de2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015de6:	d812      	bhi.n	8015e0e <_realloc_r+0x5a>
 8015de8:	4621      	mov	r1, r4
 8015dea:	4640      	mov	r0, r8
 8015dec:	f7fe ff46 	bl	8014c7c <_malloc_r>
 8015df0:	4605      	mov	r5, r0
 8015df2:	2800      	cmp	r0, #0
 8015df4:	d0ed      	beq.n	8015dd2 <_realloc_r+0x1e>
 8015df6:	42bc      	cmp	r4, r7
 8015df8:	4622      	mov	r2, r4
 8015dfa:	4631      	mov	r1, r6
 8015dfc:	bf28      	it	cs
 8015dfe:	463a      	movcs	r2, r7
 8015e00:	f7fe fe9f 	bl	8014b42 <memcpy>
 8015e04:	4631      	mov	r1, r6
 8015e06:	4640      	mov	r0, r8
 8015e08:	f7fe fecc 	bl	8014ba4 <_free_r>
 8015e0c:	e7e1      	b.n	8015dd2 <_realloc_r+0x1e>
 8015e0e:	4635      	mov	r5, r6
 8015e10:	e7df      	b.n	8015dd2 <_realloc_r+0x1e>

08015e12 <_raise_r>:
 8015e12:	291f      	cmp	r1, #31
 8015e14:	b538      	push	{r3, r4, r5, lr}
 8015e16:	4604      	mov	r4, r0
 8015e18:	460d      	mov	r5, r1
 8015e1a:	d904      	bls.n	8015e26 <_raise_r+0x14>
 8015e1c:	2316      	movs	r3, #22
 8015e1e:	6003      	str	r3, [r0, #0]
 8015e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e24:	bd38      	pop	{r3, r4, r5, pc}
 8015e26:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015e28:	b112      	cbz	r2, 8015e30 <_raise_r+0x1e>
 8015e2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015e2e:	b94b      	cbnz	r3, 8015e44 <_raise_r+0x32>
 8015e30:	4620      	mov	r0, r4
 8015e32:	f000 f831 	bl	8015e98 <_getpid_r>
 8015e36:	462a      	mov	r2, r5
 8015e38:	4601      	mov	r1, r0
 8015e3a:	4620      	mov	r0, r4
 8015e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e40:	f000 b818 	b.w	8015e74 <_kill_r>
 8015e44:	2b01      	cmp	r3, #1
 8015e46:	d00a      	beq.n	8015e5e <_raise_r+0x4c>
 8015e48:	1c59      	adds	r1, r3, #1
 8015e4a:	d103      	bne.n	8015e54 <_raise_r+0x42>
 8015e4c:	2316      	movs	r3, #22
 8015e4e:	6003      	str	r3, [r0, #0]
 8015e50:	2001      	movs	r0, #1
 8015e52:	e7e7      	b.n	8015e24 <_raise_r+0x12>
 8015e54:	2400      	movs	r4, #0
 8015e56:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015e5a:	4628      	mov	r0, r5
 8015e5c:	4798      	blx	r3
 8015e5e:	2000      	movs	r0, #0
 8015e60:	e7e0      	b.n	8015e24 <_raise_r+0x12>
	...

08015e64 <raise>:
 8015e64:	4b02      	ldr	r3, [pc, #8]	; (8015e70 <raise+0xc>)
 8015e66:	4601      	mov	r1, r0
 8015e68:	6818      	ldr	r0, [r3, #0]
 8015e6a:	f7ff bfd2 	b.w	8015e12 <_raise_r>
 8015e6e:	bf00      	nop
 8015e70:	20000030 	.word	0x20000030

08015e74 <_kill_r>:
 8015e74:	b538      	push	{r3, r4, r5, lr}
 8015e76:	4d07      	ldr	r5, [pc, #28]	; (8015e94 <_kill_r+0x20>)
 8015e78:	2300      	movs	r3, #0
 8015e7a:	4604      	mov	r4, r0
 8015e7c:	4608      	mov	r0, r1
 8015e7e:	4611      	mov	r1, r2
 8015e80:	602b      	str	r3, [r5, #0]
 8015e82:	f7ea fe47 	bl	8000b14 <_kill>
 8015e86:	1c43      	adds	r3, r0, #1
 8015e88:	d102      	bne.n	8015e90 <_kill_r+0x1c>
 8015e8a:	682b      	ldr	r3, [r5, #0]
 8015e8c:	b103      	cbz	r3, 8015e90 <_kill_r+0x1c>
 8015e8e:	6023      	str	r3, [r4, #0]
 8015e90:	bd38      	pop	{r3, r4, r5, pc}
 8015e92:	bf00      	nop
 8015e94:	20017be0 	.word	0x20017be0

08015e98 <_getpid_r>:
 8015e98:	f7ea be34 	b.w	8000b04 <_getpid>

08015e9c <_malloc_usable_size_r>:
 8015e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ea0:	1f18      	subs	r0, r3, #4
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	bfbc      	itt	lt
 8015ea6:	580b      	ldrlt	r3, [r1, r0]
 8015ea8:	18c0      	addlt	r0, r0, r3
 8015eaa:	4770      	bx	lr

08015eac <_gettimeofday>:
 8015eac:	4b02      	ldr	r3, [pc, #8]	; (8015eb8 <_gettimeofday+0xc>)
 8015eae:	2258      	movs	r2, #88	; 0x58
 8015eb0:	601a      	str	r2, [r3, #0]
 8015eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015eb6:	4770      	bx	lr
 8015eb8:	20017be0 	.word	0x20017be0

08015ebc <_init>:
 8015ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ebe:	bf00      	nop
 8015ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ec2:	bc08      	pop	{r3}
 8015ec4:	469e      	mov	lr, r3
 8015ec6:	4770      	bx	lr

08015ec8 <_fini>:
 8015ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015eca:	bf00      	nop
 8015ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ece:	bc08      	pop	{r3}
 8015ed0:	469e      	mov	lr, r3
 8015ed2:	4770      	bx	lr
