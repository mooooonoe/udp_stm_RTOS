
0328_ETH_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a94  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cbc  08010c94  08010c94  00020c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013950  08013950  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08013950  08013950  00023950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013958  08013958  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013958  08013958  00023958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801395c  0801395c  0002395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08013960  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  080139f0  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  08013a90  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000875c  200001d0  08013b30  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000892c  08013b30  0003892c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00023393  00000000  00000000  000301fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a5f  00000000  00000000  00053591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018a8  00000000  00000000  00058ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000017c8  00000000  00000000  0005a898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034cb5  00000000  00000000  0005c060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002a308  00000000  00000000  00090d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010c327  00000000  00000000  000bb01d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001c7344  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006d88  00000000  00000000  001c7394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d0 	.word	0x200001d0
 800021c:	00000000 	.word	0x00000000
 8000220:	08010c7c 	.word	0x08010c7c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d4 	.word	0x200001d4
 800023c:	08010c7c 	.word	0x08010c7c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <_write>:

PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f8:	68b9      	ldr	r1, [r7, #8]
 80005fa:	4804      	ldr	r0, [pc, #16]	; (800060c <_write+0x28>)
 80005fc:	f003 fc5a 	bl	8003eb4 <HAL_UART_Transmit>
    return len;
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200001ec 	.word	0x200001ec

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fd0b 	bl	800102e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f812 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 f8e0 	bl	80007e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000620:	f000 f880 	bl	8000724 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000624:	f000 f8ae 	bl	8000784 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000628:	f004 fc3e 	bl	8004ea8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  printf("hello STM32 ! \n");
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <main+0x2c>)
 800062e:	f00f fae5 	bl	800fbfc <puts>
  /* USER CODE END 2 */
  udp_echoserver_init();
 8000632:	f000 fb65 	bl	8000d00 <udp_echoserver_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000636:	f004 fd83 	bl	8005140 <MX_LWIP_Process>
 800063a:	e7fc      	b.n	8000636 <main+0x26>
 800063c:	08010c94 	.word	0x08010c94

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2234      	movs	r2, #52	; 0x34
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f00f fa46 	bl	800fae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000664:	f002 fa7c 	bl	8002b60 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	4b2c      	ldr	r3, [pc, #176]	; (800071c <SystemClock_Config+0xdc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a2b      	ldr	r2, [pc, #172]	; (800071c <SystemClock_Config+0xdc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b29      	ldr	r3, [pc, #164]	; (800071c <SystemClock_Config+0xdc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <SystemClock_Config+0xe0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000688:	4a25      	ldr	r2, [pc, #148]	; (8000720 <SystemClock_Config+0xe0>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <SystemClock_Config+0xe0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006b4:	2360      	movs	r3, #96	; 0x60
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 faa9 	bl	8002c20 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d4:	f000 f926 	bl	8000924 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006d8:	f002 fa52 	bl	8002b80 <HAL_PWREx_EnableOverDrive>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006e2:	f000 f91f 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2103      	movs	r1, #3
 8000702:	4618      	mov	r0, r3
 8000704:	f002 fd3a 	bl	800317c <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800070e:	f000 f909 	bl	8000924 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_USART3_UART_Init+0x58>)
 800072a:	4a15      	ldr	r2, [pc, #84]	; (8000780 <MX_USART3_UART_Init+0x5c>)
 800072c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_USART3_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USART3_UART_Init+0x58>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_USART3_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000768:	f003 fb56 	bl	8003e18 <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000772:	f000 f8d7 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200001ec 	.word	0x200001ec
 8000780:	40004800 	.word	0x40004800

08000784 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800078e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000792:	2206      	movs	r2, #6
 8000794:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000798:	2202      	movs	r2, #2
 800079a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007bc:	2201      	movs	r2, #1
 80007be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c8:	f002 f88f 	bl	80028ea <HAL_PCD_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007d2:	f000 f8a7 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000274 	.word	0x20000274

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	; 0x30
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b47      	ldr	r3, [pc, #284]	; (8000914 <MX_GPIO_Init+0x134>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a46      	ldr	r2, [pc, #280]	; (8000914 <MX_GPIO_Init+0x134>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b44      	ldr	r3, [pc, #272]	; (8000914 <MX_GPIO_Init+0x134>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	4b41      	ldr	r3, [pc, #260]	; (8000914 <MX_GPIO_Init+0x134>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a40      	ldr	r2, [pc, #256]	; (8000914 <MX_GPIO_Init+0x134>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b3e      	ldr	r3, [pc, #248]	; (8000914 <MX_GPIO_Init+0x134>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b3b      	ldr	r3, [pc, #236]	; (8000914 <MX_GPIO_Init+0x134>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a3a      	ldr	r2, [pc, #232]	; (8000914 <MX_GPIO_Init+0x134>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b38      	ldr	r3, [pc, #224]	; (8000914 <MX_GPIO_Init+0x134>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b35      	ldr	r3, [pc, #212]	; (8000914 <MX_GPIO_Init+0x134>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a34      	ldr	r2, [pc, #208]	; (8000914 <MX_GPIO_Init+0x134>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b32      	ldr	r3, [pc, #200]	; (8000914 <MX_GPIO_Init+0x134>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <MX_GPIO_Init+0x134>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a2e      	ldr	r2, [pc, #184]	; (8000914 <MX_GPIO_Init+0x134>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <MX_GPIO_Init+0x134>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <MX_GPIO_Init+0x134>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a28      	ldr	r2, [pc, #160]	; (8000914 <MX_GPIO_Init+0x134>)
 8000874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MX_GPIO_Init+0x134>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f244 0181 	movw	r1, #16513	; 0x4081
 800088c:	4822      	ldr	r0, [pc, #136]	; (8000918 <MX_GPIO_Init+0x138>)
 800088e:	f002 f813 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2140      	movs	r1, #64	; 0x40
 8000896:	4821      	ldr	r0, [pc, #132]	; (800091c <MX_GPIO_Init+0x13c>)
 8000898:	f002 f80e 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	481b      	ldr	r0, [pc, #108]	; (8000920 <MX_GPIO_Init+0x140>)
 80008b4:	f001 fe54 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008b8:	f244 0381 	movw	r3, #16513	; 0x4081
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4811      	ldr	r0, [pc, #68]	; (8000918 <MX_GPIO_Init+0x138>)
 80008d2:	f001 fe45 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008d6:	2340      	movs	r3, #64	; 0x40
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <MX_GPIO_Init+0x13c>)
 80008ee:	f001 fe37 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_GPIO_Init+0x13c>)
 8000906:	f001 fe2b 	bl	8002560 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090a:	bf00      	nop
 800090c:	3730      	adds	r7, #48	; 0x30
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400
 800091c:	40021800 	.word	0x40021800
 8000920:	40020800 	.word	0x40020800

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_MspInit+0x44>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_MspInit+0x44>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_MspInit+0x44>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x44>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x44>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x44>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0ae      	sub	sp, #184	; 0xb8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2290      	movs	r2, #144	; 0x90
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f00f f8a1 	bl	800fae0 <memset>
  if(huart->Instance==USART3)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a22      	ldr	r2, [pc, #136]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d13c      	bne.n	8000a22 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 fe06 	bl	80035c8 <HAL_RCCEx_PeriphCLKConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009c2:	f7ff ffaf 	bl	8000924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <HAL_UART_MspInit+0xb8>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <HAL_UART_MspInit+0xb8>)
 80009cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <HAL_UART_MspInit+0xb8>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_UART_MspInit+0xb8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <HAL_UART_MspInit+0xb8>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_UART_MspInit+0xb8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a10:	2307      	movs	r3, #7
 8000a12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <HAL_UART_MspInit+0xbc>)
 8000a1e:	f001 fd9f 	bl	8002560 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	37b8      	adds	r7, #184	; 0xb8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40004800 	.word	0x40004800
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020c00 	.word	0x40020c00

08000a38 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b0ae      	sub	sp, #184	; 0xb8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2290      	movs	r2, #144	; 0x90
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f00f f841 	bl	800fae0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a66:	d159      	bne.n	8000b1c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a6c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f002 fda5 	bl	80035c8 <HAL_RCCEx_PeriphCLKConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000a84:	f7ff ff4e 	bl	8000924 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <HAL_PCD_MspInit+0xec>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a25      	ldr	r2, [pc, #148]	; (8000b24 <HAL_PCD_MspInit+0xec>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
 8000a94:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <HAL_PCD_MspInit+0xec>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000aa0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aba:	230a      	movs	r3, #10
 8000abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4818      	ldr	r0, [pc, #96]	; (8000b28 <HAL_PCD_MspInit+0xf0>)
 8000ac8:	f001 fd4a 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4810      	ldr	r0, [pc, #64]	; (8000b28 <HAL_PCD_MspInit+0xf0>)
 8000ae8:	f001 fd3a 	bl	8002560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_PCD_MspInit+0xec>)
 8000aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af0:	4a0c      	ldr	r2, [pc, #48]	; (8000b24 <HAL_PCD_MspInit+0xec>)
 8000af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af6:	6353      	str	r3, [r2, #52]	; 0x34
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_PCD_MspInit+0xec>)
 8000afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <HAL_PCD_MspInit+0xec>)
 8000b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <HAL_PCD_MspInit+0xec>)
 8000b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <HAL_PCD_MspInit+0xec>)
 8000b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b1c:	bf00      	nop
 8000b1e:	37b8      	adds	r7, #184	; 0xb8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 fa96 	bl	80010a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return 1;
 8000b84:	2301      	movs	r3, #1
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_kill>:

int _kill(int pid, int sig)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <_kill+0x20>)
 8000b9c:	2216      	movs	r2, #22
 8000b9e:	601a      	str	r2, [r3, #0]
  return -1;
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	2000891c 	.word	0x2000891c

08000bb4 <_exit>:

void _exit (int status)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ffe5 	bl	8000b90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bc6:	e7fe      	b.n	8000bc6 <_exit+0x12>

08000bc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e00a      	b.n	8000bf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bda:	f3af 8000 	nop.w
 8000bde:	4601      	mov	r1, r0
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	b2ca      	uxtb	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf0      	blt.n	8000bda <_read+0x12>
  }

  return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_isatty>:

int _isatty(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b087      	sub	sp, #28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d205      	bcs.n	8000ca8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <_sbrk+0x6c>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ca6:	e009      	b.n	8000cbc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <_sbrk+0x64>)
 8000cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	371c      	adds	r7, #28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	20080000 	.word	0x20080000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	20000754 	.word	0x20000754
 8000cd4:	20008930 	.word	0x20008930
 8000cd8:	2000891c 	.word	0x2000891c

08000cdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8000d06:	f00c fb0b 	bl	800d320 <udp_new>
 8000d0a:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d013      	beq.n	8000d3a <udp_echoserver_init+0x3a>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8000d12:	2207      	movs	r2, #7
 8000d14:	490b      	ldr	r1, [pc, #44]	; (8000d44 <udp_echoserver_init+0x44>)
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f00c fa18 	bl	800d14c <udp_bind>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 8000d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d105      	bne.n	8000d34 <udp_echoserver_init+0x34>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4907      	ldr	r1, [pc, #28]	; (8000d48 <udp_echoserver_init+0x48>)
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f00c fa95 	bl	800d25c <udp_recv>
      else
      {
        udp_remove(upcb);
      }
   }
}
 8000d32:	e002      	b.n	8000d3a <udp_echoserver_init+0x3a>
        udp_remove(upcb);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f00c fab1 	bl	800d29c <udp_remove>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	080137f4 	.word	0x080137f4
 8000d48:	08000d4d 	.word	0x08000d4d

08000d4c <udp_echoserver_receive_callback>:
//  pbuf_free(p);
//
//}

void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	603b      	str	r3, [r7, #0]
    printf("udp_echoserver_receive_callback\n");
 8000d5a:	4819      	ldr	r0, [pc, #100]	; (8000dc0 <udp_echoserver_receive_callback+0x74>)
 8000d5c:	f00e ff4e 	bl	800fbfc <puts>

    if (p != NULL) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d028      	beq.n	8000db8 <udp_echoserver_receive_callback+0x6c>
        /* 수신된 데이터 터미널(UART) 출력 */
        printf("Received UDP packet from %s:%d\n", ipaddr_ntoa(addr), port);
 8000d66:	6838      	ldr	r0, [r7, #0]
 8000d68:	f00d fed4 	bl	800eb14 <ip4addr_ntoa>
 8000d6c:	4601      	mov	r1, r0
 8000d6e:	8c3b      	ldrh	r3, [r7, #32]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4814      	ldr	r0, [pc, #80]	; (8000dc4 <udp_echoserver_receive_callback+0x78>)
 8000d74:	f00e febc 	bl	800faf0 <iprintf>
        printf("Data (%d bytes): %.*s\n", p->len, p->len, (char *)p->payload);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	895b      	ldrh	r3, [r3, #10]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	895b      	ldrh	r3, [r3, #10]
 8000d82:	461a      	mov	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <udp_echoserver_receive_callback+0x7c>)
 8000d8a:	f00e feb1 	bl	800faf0 <iprintf>

        /* UDP 응답 보내기 */
        err_t err = udp_sendto(upcb, p, addr, port);
 8000d8e:	8c3b      	ldrh	r3, [r7, #32]
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	68b8      	ldr	r0, [r7, #8]
 8000d96:	f00c f823 	bl	800cde0 <udp_sendto>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	75fb      	strb	r3, [r7, #23]
        if (err != ERR_OK) {
 8000d9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d005      	beq.n	8000db2 <udp_echoserver_receive_callback+0x66>
            printf("udp_sendto failed! Error code: %d\n", err);
 8000da6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000daa:	4619      	mov	r1, r3
 8000dac:	4807      	ldr	r0, [pc, #28]	; (8000dcc <udp_echoserver_receive_callback+0x80>)
 8000dae:	f00e fe9f 	bl	800faf0 <iprintf>
        }

        /* 수신된 패킷 메모리 해제 */
        pbuf_free(p);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f006 f90e 	bl	8006fd4 <pbuf_free>
    }
}
 8000db8:	bf00      	nop
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	08010ca4 	.word	0x08010ca4
 8000dc4:	08010cc4 	.word	0x08010cc4
 8000dc8:	08010ce4 	.word	0x08010ce4
 8000dcc:	08010cfc 	.word	0x08010cfc

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dd4:	f7ff ff82 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dda:	490d      	ldr	r1, [pc, #52]	; (8000e10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df0:	4c0a      	ldr	r4, [pc, #40]	; (8000e1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f00e fe2d 	bl	800fa5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fc05 	bl	8000610 <main>
  bx  lr    
 8000e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e08:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e14:	08013960 	.word	0x08013960
  ldr r2, =_sbss
 8000e18:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000e1c:	2000892c 	.word	0x2000892c

08000e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC_IRQHandler>

08000e22 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00b      	beq.n	8000e4a <LAN8742_RegisterBusIO+0x28>
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d007      	beq.n	8000e4a <LAN8742_RegisterBusIO+0x28>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <LAN8742_RegisterBusIO+0x28>
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d102      	bne.n	8000e50 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e4e:	e014      	b.n	8000e7a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	691a      	ldr	r2, [r3, #16]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d139      	bne.n	8000f16 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d002      	beq.n	8000eb0 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	e01c      	b.n	8000ef6 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	f107 020c 	add.w	r2, r7, #12
 8000ec4:	2112      	movs	r1, #18
 8000ec6:	6978      	ldr	r0, [r7, #20]
 8000ec8:	4798      	blx	r3
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	da03      	bge.n	8000ed8 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000ed0:	f06f 0304 	mvn.w	r3, #4
 8000ed4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000ed6:	e00b      	b.n	8000ef0 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 031f 	and.w	r3, r3, #31
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d105      	bne.n	8000ef0 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
         break;
 8000eee:	e005      	b.n	8000efc <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	2b1f      	cmp	r3, #31
 8000efa:	d9df      	bls.n	8000ebc <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b1f      	cmp	r3, #31
 8000f02:	d902      	bls.n	8000f0a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f04:	f06f 0302 	mvn.w	r3, #2
 8000f08:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000f16:	693b      	ldr	r3, [r7, #16]
 }
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6810      	ldr	r0, [r2, #0]
 8000f34:	f107 020c 	add.w	r2, r7, #12
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4798      	blx	r3
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	da02      	bge.n	8000f48 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f42:	f06f 0304 	mvn.w	r3, #4
 8000f46:	e06e      	b.n	8001026 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6810      	ldr	r0, [r2, #0]
 8000f50:	f107 020c 	add.w	r2, r7, #12
 8000f54:	2101      	movs	r1, #1
 8000f56:	4798      	blx	r3
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	da02      	bge.n	8000f64 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f5e:	f06f 0304 	mvn.w	r3, #4
 8000f62:	e060      	b.n	8001026 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e059      	b.n	8001026 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	6810      	ldr	r0, [r2, #0]
 8000f7a:	f107 020c 	add.w	r2, r7, #12
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4798      	blx	r3
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	da02      	bge.n	8000f8e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f88:	f06f 0304 	mvn.w	r3, #4
 8000f8c:	e04b      	b.n	8001026 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d11b      	bne.n	8000fd0 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <LAN8742_GetLinkState+0x90>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000fac:	2302      	movs	r3, #2
 8000fae:	e03a      	b.n	8001026 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e033      	b.n	8001026 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	e02c      	b.n	8001026 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000fcc:	2305      	movs	r3, #5
 8000fce:	e02a      	b.n	8001026 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	6810      	ldr	r0, [r2, #0]
 8000fd8:	f107 020c 	add.w	r2, r7, #12
 8000fdc:	211f      	movs	r1, #31
 8000fde:	4798      	blx	r3
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	da02      	bge.n	8000fec <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000fe6:	f06f 0304 	mvn.w	r3, #4
 8000fea:	e01c      	b.n	8001026 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	e015      	b.n	8001026 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f003 031c 	and.w	r3, r3, #28
 8001000:	2b18      	cmp	r3, #24
 8001002:	d101      	bne.n	8001008 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001004:	2302      	movs	r3, #2
 8001006:	e00e      	b.n	8001026 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 031c 	and.w	r3, r3, #28
 800100e:	2b08      	cmp	r3, #8
 8001010:	d101      	bne.n	8001016 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001012:	2303      	movs	r3, #3
 8001014:	e007      	b.n	8001026 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f003 031c 	and.w	r3, r3, #28
 800101c:	2b14      	cmp	r3, #20
 800101e:	d101      	bne.n	8001024 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001020:	2304      	movs	r3, #4
 8001022:	e000      	b.n	8001026 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001024:	2305      	movs	r3, #5
    }
  }
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001032:	2003      	movs	r0, #3
 8001034:	f000 f92e 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001038:	2000      	movs	r0, #0
 800103a:	f000 f805 	bl	8001048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103e:	f7ff fc77 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_InitTick+0x54>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_InitTick+0x58>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001062:	fbb2 f3f3 	udiv	r3, r2, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f93b 	bl	80012e2 <HAL_SYSTICK_Config>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e00e      	b.n	8001094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b0f      	cmp	r3, #15
 800107a:	d80a      	bhi.n	8001092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800107c:	2200      	movs	r2, #0
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001084:	f000 f911 	bl	80012aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001088:	4a06      	ldr	r2, [pc, #24]	; (80010a4 <HAL_InitTick+0x5c>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	e000      	b.n	8001094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000000 	.word	0x20000000
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000004 	.word	0x20000004

080010a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_IncTick+0x20>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x24>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a04      	ldr	r2, [pc, #16]	; (80010cc <HAL_IncTick+0x24>)
 80010ba:	6013      	str	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000758 	.word	0x20000758

080010d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <HAL_GetTick+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000758 	.word	0x20000758

080010e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff ffee 	bl	80010d0 <HAL_GetTick>
 80010f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001100:	d005      	beq.n	800110e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_Delay+0x44>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800110e:	bf00      	nop
 8001110:	f7ff ffde 	bl	80010d0 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	429a      	cmp	r2, r3
 800111e:	d8f7      	bhi.n	8001110 <HAL_Delay+0x28>
  {
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008

08001130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <__NVIC_SetPriorityGrouping+0x40>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	4313      	orrs	r3, r2
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <__NVIC_SetPriorityGrouping+0x40>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00
 8001174:	05fa0000 	.word	0x05fa0000

08001178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	; (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001260:	d301      	bcc.n	8001266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2301      	movs	r3, #1
 8001264:	e00f      	b.n	8001286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <SysTick_Config+0x40>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126e:	210f      	movs	r1, #15
 8001270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001274:	f7ff ff8e 	bl	8001194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <SysTick_Config+0x40>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SysTick_Config+0x40>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff47 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff ff5c 	bl	8001178 <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff8e 	bl	80011e8 <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5d 	bl	8001194 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ffb0 	bl	8001250 <SysTick_Config>
 80012f0:	4603      	mov	r3, r0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e086      	b.n	800141c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001314:	2b00      	cmp	r3, #0
 8001316:	d106      	bne.n	8001326 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2223      	movs	r2, #35	; 0x23
 800131c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f004 f8f5 	bl	8005510 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <HAL_ETH_Init+0x128>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a3e      	ldr	r2, [pc, #248]	; (8001424 <HAL_ETH_Init+0x128>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b3c      	ldr	r3, [pc, #240]	; (8001424 <HAL_ETH_Init+0x128>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800133e:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <HAL_ETH_Init+0x12c>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	4a39      	ldr	r2, [pc, #228]	; (8001428 <HAL_ETH_Init+0x12c>)
 8001344:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001348:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800134a:	4b37      	ldr	r3, [pc, #220]	; (8001428 <HAL_ETH_Init+0x12c>)
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	4935      	ldr	r1, [pc, #212]	; (8001428 <HAL_ETH_Init+0x12c>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001358:	4b33      	ldr	r3, [pc, #204]	; (8001428 <HAL_ETH_Init+0x12c>)
 800135a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001372:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001374:	f7ff feac 	bl	80010d0 <HAL_GetTick>
 8001378:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800137a:	e011      	b.n	80013a0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800137c:	f7ff fea8 	bl	80010d0 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800138a:	d909      	bls.n	80013a0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2204      	movs	r2, #4
 8001390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	22e0      	movs	r2, #224	; 0xe0
 8001398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e03d      	b.n	800141c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1e4      	bne.n	800137c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 fe18 	bl	8001fe8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 fec3 	bl	8002144 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 ff19 	bl	80021f6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	461a      	mov	r2, r3
 80013ca:	2100      	movs	r1, #0
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fe81 	bl	80020d4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80013e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_ETH_Init+0x130>)
 80013f0:	430b      	orrs	r3, r1
 80013f2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001406:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2210      	movs	r2, #16
 8001416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40013800 	.word	0x40013800
 800142c:	00020060 	.word	0x00020060

08001430 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800143e:	2b10      	cmp	r3, #16
 8001440:	d150      	bne.n	80014e4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2223      	movs	r2, #35	; 0x23
 8001446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2204      	movs	r2, #4
 800144e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 f9f9 	bl	8001848 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 0208 	orr.w	r2, r2, #8
 8001464:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff fe3a 	bl	80010e8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0204 	orr.w	r2, r2, #4
 800148a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001494:	2001      	movs	r0, #1
 8001496:	f7ff fe27 	bl	80010e8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 fc3c 	bl	8001d20 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014be:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	f043 0302 	orr.w	r3, r3, #2
 80014d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014d6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2223      	movs	r2, #35	; 0x23
 80014dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	e000      	b.n	80014e6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
  }
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014fc:	2b23      	cmp	r3, #35	; 0x23
 80014fe:	d14a      	bne.n	8001596 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2223      	movs	r2, #35	; 0x23
 8001504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800151a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800151e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	f023 0302 	bic.w	r3, r3, #2
 8001532:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001536:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0204 	bic.w	r2, r2, #4
 8001546:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001550:	2001      	movs	r0, #1
 8001552:	f7ff fdc9 	bl	80010e8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fbde 	bl	8001d20 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0208 	bic.w	r2, r2, #8
 8001572:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800157c:	2001      	movs	r0, #1
 800157e:	f7ff fdb3 	bl	80010e8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2210      	movs	r2, #16
 800158e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
  }
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b8:	f043 0201 	orr.w	r2, r3, #1
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e07c      	b.n	80016c0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015cc:	2b23      	cmp	r3, #35	; 0x23
 80015ce:	d176      	bne.n	80016be <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80015d0:	2200      	movs	r2, #0
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f000 fe7d 	bl	80022d4 <ETH_Prepare_Tx_Descriptors>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d009      	beq.n	80015f4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e6:	f043 0202 	orr.w	r2, r3, #2
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e065      	b.n	80016c0 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015f4:	f3bf 8f4f 	dsb	sy
}
 80015f8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3206      	adds	r2, #6
 8001602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001606:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	629a      	str	r2, [r3, #40]	; 0x28
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001616:	2b03      	cmp	r3, #3
 8001618:	d904      	bls.n	8001624 <HAL_ETH_Transmit+0x84>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	1f1a      	subs	r2, r3, #4
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3106      	adds	r1, #6
 8001630:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001634:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001638:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800163a:	f7ff fd49 	bl	80010d0 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001640:	e037      	b.n	80016b2 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d011      	beq.n	8001678 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800165a:	f043 0208 	orr.w	r2, r3, #8
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e023      	b.n	80016c0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800167e:	d018      	beq.n	80016b2 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001680:	f7ff fd26 	bl	80010d0 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	d302      	bcc.n	8001696 <HAL_ETH_Transmit+0xf6>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10d      	bne.n	80016b2 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169c:	f043 0204 	orr.w	r2, r3, #4
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80016ac:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e006      	b.n	80016c0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	dbc3      	blt.n	8001642 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
  }
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d109      	bne.n	80016f4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e6:	f043 0201 	orr.w	r2, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0a4      	b.n	800183e <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016fa:	2b23      	cmp	r3, #35	; 0x23
 80016fc:	d001      	beq.n	8001702 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e09d      	b.n	800183e <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001706:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	3212      	adds	r2, #18
 800170e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001712:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001718:	f1c3 0304 	rsb	r3, r3, #4
 800171c:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800171e:	e066      	b.n	80017ee <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d007      	beq.n	800173c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	69da      	ldr	r2, [r3, #28]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	699a      	ldr	r2, [r3, #24]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001744:	2b00      	cmp	r3, #0
 8001746:	d103      	bne.n	8001750 <HAL_ETH_ReadData+0x88>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800174c:	2b00      	cmp	r3, #0
 800174e:	d03c      	beq.n	80017ca <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	0c1b      	lsrs	r3, r3, #16
 800176e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001772:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001788:	2301      	movs	r3, #1
 800178a:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80017a4:	461a      	mov	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	f004 f873 	bl	8005894 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	441a      	add	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3301      	adds	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d902      	bls.n	80017dc <HAL_ETH_ReadData+0x114>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3b04      	subs	r3, #4
 80017da:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	3212      	adds	r2, #18
 80017e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3301      	adds	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db06      	blt.n	8001804 <HAL_ETH_ReadData+0x13c>
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d202      	bcs.n	8001804 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80017fe:	7cfb      	ldrb	r3, [r7, #19]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d08d      	beq.n	8001720 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	441a      	add	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f815 	bl	8001848 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001824:	7cfb      	ldrb	r3, [r7, #19]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d108      	bne.n	800183c <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	e000      	b.n	800183e <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
}
 800183e:	4618      	mov	r0, r3
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001854:	2301      	movs	r3, #1
 8001856:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800185c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	3212      	adds	r2, #18
 8001864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001868:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800186e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001870:	e042      	b.n	80018f8 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d112      	bne.n	80018a0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	4618      	mov	r0, r3
 8001880:	f003 ffd8 	bl	8005834 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	74fb      	strb	r3, [r7, #19]
 800188e:	e007      	b.n	80018a0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	461a      	mov	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	461a      	mov	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80018a0:	7cfb      	ldrb	r3, [r7, #19]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d028      	beq.n	80018f8 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d106      	bne.n	80018bc <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <ETH_UpdateDescriptor+0x104>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	6053      	str	r3, [r2, #4]
 80018ba:	e005      	b.n	80018c8 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	3301      	adds	r3, #1
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d902      	bls.n	80018e6 <ETH_UpdateDescriptor+0x9e>
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	3b04      	subs	r3, #4
 80018e4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	3212      	adds	r2, #18
 80018ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f0:	617b      	str	r3, [r7, #20]
      desccount--;
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d002      	beq.n	8001904 <ETH_UpdateDescriptor+0xbc>
 80018fe:	7cfb      	ldrb	r3, [r7, #19]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1b6      	bne.n	8001872 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	429a      	cmp	r2, r3
 800190c:	d01a      	beq.n	8001944 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3301      	adds	r3, #1
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001918:	f3bf 8f5f 	dmb	sy
}
 800191c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6919      	ldr	r1, [r3, #16]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	18ca      	adds	r2, r1, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001936:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001944:	bf00      	nop
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	80004000 	.word	0x80004000

08001950 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f003 031c 	and.w	r3, r3, #28
 800196c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	02db      	lsls	r3, r3, #11
 8001972:	b29b      	uxth	r3, r3
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	4313      	orrs	r3, r2
 8001978:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	019b      	lsls	r3, r3, #6
 800197e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4313      	orrs	r3, r2
 8001986:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f023 0302 	bic.w	r3, r3, #2
 800198e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80019a0:	f7ff fb96 	bl	80010d0 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019a6:	e00d      	b.n	80019c4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80019a8:	f7ff fb92 	bl	80010d0 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b6:	d301      	bcc.n	80019bc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e010      	b.n	80019de <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1ec      	bne.n	80019a8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f003 031c 	and.w	r3, r3, #28
 8001a02:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	02db      	lsls	r3, r3, #11
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	019b      	lsls	r3, r3, #6
 8001a14:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a40:	f7ff fb46 	bl	80010d0 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a46:	e00d      	b.n	8001a64 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001a48:	f7ff fb42 	bl	80010d0 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a56:	d301      	bcc.n	8001a5c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e009      	b.n	8001a70 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1ec      	bne.n	8001a48 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0e6      	b.n	8001c5a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bf14      	ite	ne
 8001a9a:	2301      	movne	r3, #1
 8001a9c:	2300      	moveq	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	bf0c      	ite	eq
 8001ac4:	2301      	moveq	r3, #1
 8001ac6:	2300      	movne	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bf14      	ite	ne
 8001ae0:	2301      	movne	r3, #1
 8001ae2:	2300      	moveq	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	bf0c      	ite	eq
 8001afa:	2301      	moveq	r3, #1
 8001afc:	2300      	movne	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf14      	ite	ne
 8001b14:	2301      	movne	r3, #1
 8001b16:	2300      	moveq	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bf0c      	ite	eq
 8001b4a:	2301      	moveq	r3, #1
 8001b4c:	2300      	movne	r3, #0
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf0c      	ite	eq
 8001b64:	2301      	moveq	r3, #1
 8001b66:	2300      	movne	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf14      	ite	ne
 8001b7e:	2301      	movne	r3, #1
 8001b80:	2300      	moveq	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bf14      	ite	ne
 8001ba6:	2301      	movne	r3, #1
 8001ba8:	2300      	moveq	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	bf14      	ite	ne
 8001bda:	2301      	movne	r3, #1
 8001bdc:	2300      	moveq	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	bf0c      	ite	eq
 8001bf6:	2301      	moveq	r3, #1
 8001bf8:	2300      	movne	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	0c1b      	lsrs	r3, r3, #16
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bf14      	ite	ne
 8001c2e:	2301      	movne	r3, #1
 8001c30:	2300      	moveq	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	bf14      	ite	ne
 8001c4a:	2301      	movne	r3, #1
 8001c4c:	2300      	moveq	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00b      	b.n	8001c92 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c80:	2b10      	cmp	r3, #16
 8001c82:	d105      	bne.n	8001c90 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001c84:	6839      	ldr	r1, [r7, #0]
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f870 	bl	8001d6c <ETH_SetMACConfig>

    return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e000      	b.n	8001c92 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
  }
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f023 031c 	bic.w	r3, r3, #28
 8001cb2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001cb4:	f001 fc54 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 8001cb8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d804      	bhi.n	8001ccc <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f043 0308 	orr.w	r3, r3, #8
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	e019      	b.n	8001d00 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d204      	bcs.n	8001cde <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f043 030c 	orr.w	r3, r3, #12
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	e010      	b.n	8001d00 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d90c      	bls.n	8001d00 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	4a0c      	ldr	r2, [pc, #48]	; (8001d1c <HAL_ETH_SetMDIOClockRange+0x80>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d804      	bhi.n	8001cf8 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	e003      	b.n	8001d00 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f043 0310 	orr.w	r3, r3, #16
 8001cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	611a      	str	r2, [r3, #16]
}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	02160ebf 	.word	0x02160ebf
 8001d14:	03938700 	.word	0x03938700
 8001d18:	05f5e0ff 	.word	0x05f5e0ff
 8001d1c:	08f0d17f 	.word	0x08f0d17f

08001d20 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d42:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d50:	2001      	movs	r0, #1
 8001d52:	f7ff f9c9 	bl	80010e8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d60:	6193      	str	r3, [r2, #24]
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <ETH_SetMACConfig+0x164>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	7b9b      	ldrb	r3, [r3, #14]
 8001d8a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	7c12      	ldrb	r2, [r2, #16]
 8001d90:	2a00      	cmp	r2, #0
 8001d92:	d102      	bne.n	8001d9a <ETH_SetMACConfig+0x2e>
 8001d94:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d98:	e000      	b.n	8001d9c <ETH_SetMACConfig+0x30>
 8001d9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d9c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	7c52      	ldrb	r2, [r2, #17]
 8001da2:	2a00      	cmp	r2, #0
 8001da4:	d102      	bne.n	8001dac <ETH_SetMACConfig+0x40>
 8001da6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001daa:	e000      	b.n	8001dae <ETH_SetMACConfig+0x42>
 8001dac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001dae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001db4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	7fdb      	ldrb	r3, [r3, #31]
 8001dba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001dbc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001dc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	7f92      	ldrb	r2, [r2, #30]
 8001dc8:	2a00      	cmp	r2, #0
 8001dca:	d102      	bne.n	8001dd2 <ETH_SetMACConfig+0x66>
 8001dcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd0:	e000      	b.n	8001dd4 <ETH_SetMACConfig+0x68>
 8001dd2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001dd4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	7f1b      	ldrb	r3, [r3, #28]
 8001dda:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ddc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001de2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	791b      	ldrb	r3, [r3, #4]
 8001de8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001dea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001df2:	2a00      	cmp	r2, #0
 8001df4:	d102      	bne.n	8001dfc <ETH_SetMACConfig+0x90>
 8001df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dfa:	e000      	b.n	8001dfe <ETH_SetMACConfig+0x92>
 8001dfc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001dfe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	7bdb      	ldrb	r3, [r3, #15]
 8001e04:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e06:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e14:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e16:	4313      	orrs	r3, r2
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f7ff f95a 	bl	80010e8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e52:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	d101      	bne.n	8001e62 <ETH_SetMACConfig+0xf6>
 8001e5e:	2280      	movs	r2, #128	; 0x80
 8001e60:	e000      	b.n	8001e64 <ETH_SetMACConfig+0xf8>
 8001e62:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e64:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001e72:	2a01      	cmp	r2, #1
 8001e74:	d101      	bne.n	8001e7a <ETH_SetMACConfig+0x10e>
 8001e76:	2208      	movs	r2, #8
 8001e78:	e000      	b.n	8001e7c <ETH_SetMACConfig+0x110>
 8001e7a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e7c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001e84:	2a01      	cmp	r2, #1
 8001e86:	d101      	bne.n	8001e8c <ETH_SetMACConfig+0x120>
 8001e88:	2204      	movs	r2, #4
 8001e8a:	e000      	b.n	8001e8e <ETH_SetMACConfig+0x122>
 8001e8c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001e96:	2a01      	cmp	r2, #1
 8001e98:	d101      	bne.n	8001e9e <ETH_SetMACConfig+0x132>
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	e000      	b.n	8001ea0 <ETH_SetMACConfig+0x134>
 8001e9e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f7ff f915 	bl	80010e8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	619a      	str	r2, [r3, #24]
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	fd20810f 	.word	0xfd20810f

08001ed4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4b3d      	ldr	r3, [pc, #244]	; (8001fe4 <ETH_SetDMAConfig+0x110>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	7b1b      	ldrb	r3, [r3, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <ETH_SetDMAConfig+0x2c>
 8001efa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001efe:	e000      	b.n	8001f02 <ETH_SetDMAConfig+0x2e>
 8001f00:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	7b5b      	ldrb	r3, [r3, #13]
 8001f06:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f08:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	7f52      	ldrb	r2, [r2, #29]
 8001f0e:	2a00      	cmp	r2, #0
 8001f10:	d102      	bne.n	8001f18 <ETH_SetDMAConfig+0x44>
 8001f12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f16:	e000      	b.n	8001f1a <ETH_SetDMAConfig+0x46>
 8001f18:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f1a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	7b9b      	ldrb	r3, [r3, #14]
 8001f20:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f22:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f28:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	7f1b      	ldrb	r3, [r3, #28]
 8001f2e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f30:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	7f9b      	ldrb	r3, [r3, #30]
 8001f36:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f38:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f3e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f46:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f7ff f8bc 	bl	80010e8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	791b      	ldrb	r3, [r3, #4]
 8001f82:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f88:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f8e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f94:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f9c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001f9e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001fa6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001fac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f7ff f88d 	bl	80010e8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	f8de3f23 	.word	0xf8de3f23

08001fe8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b0a6      	sub	sp, #152	; 0x98
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002006:	2301      	movs	r3, #1
 8002008:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002012:	2301      	movs	r3, #1
 8002014:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002018:	2301      	movs	r3, #1
 800201a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800202a:	2300      	movs	r3, #0
 800202c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002034:	2300      	movs	r3, #0
 8002036:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002050:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002054:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002056:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800205a:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002062:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002066:	4619      	mov	r1, r3
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff fe7f 	bl	8001d6c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800206e:	2301      	movs	r3, #1
 8002070:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002072:	2301      	movs	r3, #1
 8002074:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002076:	2301      	movs	r3, #1
 8002078:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800207c:	2301      	movs	r3, #1
 800207e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002090:	2300      	movs	r3, #0
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002094:	2301      	movs	r3, #1
 8002096:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800209a:	2301      	movs	r3, #1
 800209c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800209e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020a2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020a8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ae:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80020be:	f107 0308 	add.w	r3, r7, #8
 80020c2:	4619      	mov	r1, r3
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff05 	bl	8001ed4 <ETH_SetDMAConfig>
}
 80020ca:	bf00      	nop
 80020cc:	3798      	adds	r7, #152	; 0x98
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3305      	adds	r3, #5
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	3204      	adds	r2, #4
 80020ec:	7812      	ldrb	r2, [r2, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <ETH_MACAddressConfig+0x68>)
 80020f6:	4413      	add	r3, r2
 80020f8:	461a      	mov	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3303      	adds	r3, #3
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	061a      	lsls	r2, r3, #24
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3302      	adds	r3, #2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	041b      	lsls	r3, r3, #16
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3301      	adds	r3, #1
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	4313      	orrs	r3, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	7812      	ldrb	r2, [r2, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <ETH_MACAddressConfig+0x6c>)
 8002126:	4413      	add	r3, r2
 8002128:	461a      	mov	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	6013      	str	r3, [r2, #0]
}
 800212e:	bf00      	nop
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40028040 	.word	0x40028040
 8002140:	40028044 	.word	0x40028044

08002144 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e03e      	b.n	80021d0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68d9      	ldr	r1, [r3, #12]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2200      	movs	r2, #0
 800216e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2200      	movs	r2, #0
 800217a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	3206      	adds	r2, #6
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d80c      	bhi.n	80021b4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68d9      	ldr	r1, [r3, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	e004      	b.n	80021be <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	461a      	mov	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3301      	adds	r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d9bd      	bls.n	8002152 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e8:	611a      	str	r2, [r3, #16]
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e048      	b.n	8002296 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6919      	ldr	r1, [r3, #16]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2200      	movs	r2, #0
 8002220:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2200      	movs	r2, #0
 8002232:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2200      	movs	r2, #0
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002240:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	3212      	adds	r2, #18
 8002262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d80c      	bhi.n	8002286 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6919      	ldr	r1, [r3, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	461a      	mov	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60da      	str	r2, [r3, #12]
 8002284:	e004      	b.n	8002290 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	461a      	mov	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3301      	adds	r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d9b3      	bls.n	8002204 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c6:	60da      	str	r2, [r3, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b091      	sub	sp, #68	; 0x44
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3318      	adds	r3, #24
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002316:	d007      	beq.n	8002328 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231c:	3304      	adds	r3, #4
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002328:	2302      	movs	r3, #2
 800232a:	e111      	b.n	8002550 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 800232c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232e:	3301      	adds	r3, #1
 8002330:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	4b86      	ldr	r3, [pc, #536]	; (800255c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002342:	4013      	ands	r3, r2
 8002344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002346:	6852      	ldr	r2, [r2, #4]
 8002348:	431a      	orrs	r2, r3
 800234a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800235a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	431a      	orrs	r2, r3
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	431a      	orrs	r2, r3
 8002386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002388:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80023a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ac:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80023ae:	e082      	b.n	80024b6 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80023b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80023b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ba:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d006      	beq.n	80023d0 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	e005      	b.n	80023dc <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023da:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80023dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023de:	3301      	adds	r3, #1
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d902      	bls.n	80023ee <ETH_Prepare_Tx_Descriptors+0x11a>
 80023e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ea:	3b04      	subs	r3, #4
 80023ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80023f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002404:	d007      	beq.n	8002416 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240a:	3304      	adds	r3, #4
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d029      	beq.n	800246a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800241e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002422:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002424:	2300      	movs	r3, #0
 8002426:	63bb      	str	r3, [r7, #56]	; 0x38
 8002428:	e019      	b.n	800245e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800242a:	f3bf 8f5f 	dmb	sy
}
 800242e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800243c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243e:	3301      	adds	r3, #1
 8002440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002444:	2b03      	cmp	r3, #3
 8002446:	d902      	bls.n	800244e <ETH_Prepare_Tx_Descriptors+0x17a>
 8002448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244a:	3b04      	subs	r3, #4
 800244c:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002456:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245a:	3301      	adds	r3, #1
 800245c:	63bb      	str	r3, [r7, #56]	; 0x38
 800245e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002462:	429a      	cmp	r2, r3
 8002464:	d3e1      	bcc.n	800242a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002466:	2302      	movs	r3, #2
 8002468:	e072      	b.n	8002550 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002478:	3301      	adds	r3, #1
 800247a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	4b32      	ldr	r3, [pc, #200]	; (800255c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002492:	4013      	ands	r3, r2
 8002494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002496:	6852      	ldr	r2, [r2, #4]
 8002498:	431a      	orrs	r2, r3
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	3301      	adds	r3, #1
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80024a4:	f3bf 8f5f 	dmb	sy
}
 80024a8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f47f af78 	bne.w	80023b0 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d006      	beq.n	80024d4 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	e005      	b.n	80024e0 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024de:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	6a3a      	ldr	r2, [r7, #32]
 80024f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80024f6:	f3bf 8f5f 	dmb	sy
}
 80024fa:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002506:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800250c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800250e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002510:	3304      	adds	r3, #4
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800251c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800251e:	f3ef 8310 	mrs	r3, PRIMASK
 8002522:	613b      	str	r3, [r7, #16]
  return(result);
 8002524:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	2301      	movs	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f383 8810 	msr	PRIMASK, r3
}
 8002532:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253a:	4413      	add	r3, r2
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	629a      	str	r2, [r3, #40]	; 0x28
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f383 8810 	msr	PRIMASK, r3
}
 800254c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3744      	adds	r7, #68	; 0x44
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	ffffe000 	.word	0xffffe000

08002560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	e175      	b.n	800286c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002580:	2201      	movs	r2, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	429a      	cmp	r2, r3
 800259a:	f040 8164 	bne.w	8002866 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d005      	beq.n	80025b6 <HAL_GPIO_Init+0x56>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d130      	bne.n	8002618 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2203      	movs	r2, #3
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ec:	2201      	movs	r2, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 0201 	and.w	r2, r3, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b03      	cmp	r3, #3
 8002622:	d017      	beq.n	8002654 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d123      	bne.n	80026a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	08da      	lsrs	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3208      	adds	r2, #8
 8002668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	220f      	movs	r2, #15
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	08da      	lsrs	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3208      	adds	r2, #8
 80026a2:	69b9      	ldr	r1, [r7, #24]
 80026a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0203 	and.w	r2, r3, #3
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80be 	beq.w	8002866 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ea:	4b66      	ldr	r3, [pc, #408]	; (8002884 <HAL_GPIO_Init+0x324>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	4a65      	ldr	r2, [pc, #404]	; (8002884 <HAL_GPIO_Init+0x324>)
 80026f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f4:	6453      	str	r3, [r2, #68]	; 0x44
 80026f6:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_GPIO_Init+0x324>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002702:	4a61      	ldr	r2, [pc, #388]	; (8002888 <HAL_GPIO_Init+0x328>)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	3302      	adds	r3, #2
 800270a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	220f      	movs	r2, #15
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a58      	ldr	r2, [pc, #352]	; (800288c <HAL_GPIO_Init+0x32c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d037      	beq.n	800279e <HAL_GPIO_Init+0x23e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a57      	ldr	r2, [pc, #348]	; (8002890 <HAL_GPIO_Init+0x330>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d031      	beq.n	800279a <HAL_GPIO_Init+0x23a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a56      	ldr	r2, [pc, #344]	; (8002894 <HAL_GPIO_Init+0x334>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d02b      	beq.n	8002796 <HAL_GPIO_Init+0x236>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a55      	ldr	r2, [pc, #340]	; (8002898 <HAL_GPIO_Init+0x338>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d025      	beq.n	8002792 <HAL_GPIO_Init+0x232>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a54      	ldr	r2, [pc, #336]	; (800289c <HAL_GPIO_Init+0x33c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01f      	beq.n	800278e <HAL_GPIO_Init+0x22e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a53      	ldr	r2, [pc, #332]	; (80028a0 <HAL_GPIO_Init+0x340>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d019      	beq.n	800278a <HAL_GPIO_Init+0x22a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a52      	ldr	r2, [pc, #328]	; (80028a4 <HAL_GPIO_Init+0x344>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_GPIO_Init+0x226>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a51      	ldr	r2, [pc, #324]	; (80028a8 <HAL_GPIO_Init+0x348>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00d      	beq.n	8002782 <HAL_GPIO_Init+0x222>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a50      	ldr	r2, [pc, #320]	; (80028ac <HAL_GPIO_Init+0x34c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <HAL_GPIO_Init+0x21e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4f      	ldr	r2, [pc, #316]	; (80028b0 <HAL_GPIO_Init+0x350>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_GPIO_Init+0x21a>
 8002776:	2309      	movs	r3, #9
 8002778:	e012      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800277a:	230a      	movs	r3, #10
 800277c:	e010      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800277e:	2308      	movs	r3, #8
 8002780:	e00e      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 8002782:	2307      	movs	r3, #7
 8002784:	e00c      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 8002786:	2306      	movs	r3, #6
 8002788:	e00a      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800278a:	2305      	movs	r3, #5
 800278c:	e008      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800278e:	2304      	movs	r3, #4
 8002790:	e006      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 8002792:	2303      	movs	r3, #3
 8002794:	e004      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 8002796:	2302      	movs	r3, #2
 8002798:	e002      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800279e:	2300      	movs	r3, #0
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	f002 0203 	and.w	r2, r2, #3
 80027a6:	0092      	lsls	r2, r2, #2
 80027a8:	4093      	lsls	r3, r2
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027b0:	4935      	ldr	r1, [pc, #212]	; (8002888 <HAL_GPIO_Init+0x328>)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	3302      	adds	r3, #2
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027be:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <HAL_GPIO_Init+0x354>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027e2:	4a34      	ldr	r2, [pc, #208]	; (80028b4 <HAL_GPIO_Init+0x354>)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e8:	4b32      	ldr	r3, [pc, #200]	; (80028b4 <HAL_GPIO_Init+0x354>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800280c:	4a29      	ldr	r2, [pc, #164]	; (80028b4 <HAL_GPIO_Init+0x354>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002812:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <HAL_GPIO_Init+0x354>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002836:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <HAL_GPIO_Init+0x354>)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_GPIO_Init+0x354>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002860:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <HAL_GPIO_Init+0x354>)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3301      	adds	r3, #1
 800286a:	61fb      	str	r3, [r7, #28]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b0f      	cmp	r3, #15
 8002870:	f67f ae86 	bls.w	8002580 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	3724      	adds	r7, #36	; 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	40013800 	.word	0x40013800
 800288c:	40020000 	.word	0x40020000
 8002890:	40020400 	.word	0x40020400
 8002894:	40020800 	.word	0x40020800
 8002898:	40020c00 	.word	0x40020c00
 800289c:	40021000 	.word	0x40021000
 80028a0:	40021400 	.word	0x40021400
 80028a4:	40021800 	.word	0x40021800
 80028a8:	40021c00 	.word	0x40021c00
 80028ac:	40022000 	.word	0x40022000
 80028b0:	40022400 	.word	0x40022400
 80028b4:	40013c00 	.word	0x40013c00

080028b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	807b      	strh	r3, [r7, #2]
 80028c4:	4613      	mov	r3, r2
 80028c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028c8:	787b      	ldrb	r3, [r7, #1]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ce:	887a      	ldrh	r2, [r7, #2]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028d4:	e003      	b.n	80028de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028d6:	887b      	ldrh	r3, [r7, #2]
 80028d8:	041a      	lsls	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	619a      	str	r2, [r3, #24]
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b086      	sub	sp, #24
 80028ee:	af02      	add	r7, sp, #8
 80028f0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e108      	b.n	8002b0e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7fe f88e 	bl	8000a38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2203      	movs	r2, #3
 8002920:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800292a:	d102      	bne.n	8002932 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f002 f820 	bl	800497c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	7c1a      	ldrb	r2, [r3, #16]
 8002944:	f88d 2000 	strb.w	r2, [sp]
 8002948:	3304      	adds	r3, #4
 800294a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800294c:	f001 ffbc 	bl	80048c8 <USB_CoreInit>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2202      	movs	r2, #2
 800295a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e0d5      	b.n	8002b0e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f002 f818 	bl	800499e <USB_SetCurrentMode>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0c6      	b.n	8002b0e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]
 8002984:	e04a      	b.n	8002a1c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	3315      	adds	r3, #21
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	3314      	adds	r3, #20
 80029aa:	7bfa      	ldrb	r2, [r7, #15]
 80029ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	b298      	uxth	r0, r3
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	332e      	adds	r3, #46	; 0x2e
 80029c2:	4602      	mov	r2, r0
 80029c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	3318      	adds	r3, #24
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029da:	7bfa      	ldrb	r2, [r7, #15]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	331c      	adds	r3, #28
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	3320      	adds	r3, #32
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	3324      	adds	r3, #36	; 0x24
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	791b      	ldrb	r3, [r3, #4]
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d3af      	bcc.n	8002986 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
 8002a2a:	e044      	b.n	8002ab6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a58:	7bfa      	ldrb	r2, [r7, #15]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a6e:	7bfa      	ldrb	r2, [r7, #15]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	791b      	ldrb	r3, [r3, #4]
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d3b5      	bcc.n	8002a2c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7c1a      	ldrb	r2, [r3, #16]
 8002ac8:	f88d 2000 	strb.w	r2, [sp]
 8002acc:	3304      	adds	r3, #4
 8002ace:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad0:	f001 ffb2 	bl	8004a38 <USB_DevInit>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e013      	b.n	8002b0e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	7b1b      	ldrb	r3, [r3, #12]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d102      	bne.n	8002b02 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f80b 	bl	8002b18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f002 f96d 	bl	8004de6 <USB_DevDisconnect>

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_PCDEx_ActivateLPM+0x44>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	10000003 	.word	0x10000003

08002b60 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6e:	6013      	str	r3, [r2, #0]
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40007000 	.word	0x40007000

08002b80 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b8a:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a22      	ldr	r2, [pc, #136]	; (8002c18 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ba2:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bae:	f7fe fa8f 	bl	80010d0 <HAL_GetTick>
 8002bb2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bb4:	e009      	b.n	8002bca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bb6:	f7fe fa8b 	bl	80010d0 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc4:	d901      	bls.n	8002bca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e022      	b.n	8002c10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd6:	d1ee      	bne.n	8002bb6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bd8:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a0f      	ldr	r2, [pc, #60]	; (8002c1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be4:	f7fe fa74 	bl	80010d0 <HAL_GetTick>
 8002be8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bea:	e009      	b.n	8002c00 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bec:	f7fe fa70 	bl	80010d0 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bfa:	d901      	bls.n	8002c00 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e007      	b.n	8002c10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c0c:	d1ee      	bne.n	8002bec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40007000 	.word	0x40007000

08002c20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e29b      	b.n	800316e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 8087 	beq.w	8002d52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c44:	4b96      	ldr	r3, [pc, #600]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d00c      	beq.n	8002c6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c50:	4b93      	ldr	r3, [pc, #588]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 030c 	and.w	r3, r3, #12
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d112      	bne.n	8002c82 <HAL_RCC_OscConfig+0x62>
 8002c5c:	4b90      	ldr	r3, [pc, #576]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c68:	d10b      	bne.n	8002c82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6a:	4b8d      	ldr	r3, [pc, #564]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d06c      	beq.n	8002d50 <HAL_RCC_OscConfig+0x130>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d168      	bne.n	8002d50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e275      	b.n	800316e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8a:	d106      	bne.n	8002c9a <HAL_RCC_OscConfig+0x7a>
 8002c8c:	4b84      	ldr	r3, [pc, #528]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a83      	ldr	r2, [pc, #524]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	e02e      	b.n	8002cf8 <HAL_RCC_OscConfig+0xd8>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x9c>
 8002ca2:	4b7f      	ldr	r3, [pc, #508]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a7e      	ldr	r2, [pc, #504]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	4b7c      	ldr	r3, [pc, #496]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a7b      	ldr	r2, [pc, #492]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e01d      	b.n	8002cf8 <HAL_RCC_OscConfig+0xd8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0xc0>
 8002cc6:	4b76      	ldr	r3, [pc, #472]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a75      	ldr	r2, [pc, #468]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b73      	ldr	r3, [pc, #460]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a72      	ldr	r2, [pc, #456]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCC_OscConfig+0xd8>
 8002ce0:	4b6f      	ldr	r3, [pc, #444]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a6e      	ldr	r2, [pc, #440]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b6c      	ldr	r3, [pc, #432]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a6b      	ldr	r2, [pc, #428]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d013      	beq.n	8002d28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe f9e6 	bl	80010d0 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fe f9e2 	bl	80010d0 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	; 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e229      	b.n	800316e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	4b61      	ldr	r3, [pc, #388]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0xe8>
 8002d26:	e014      	b.n	8002d52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fe f9d2 	bl	80010d0 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d30:	f7fe f9ce 	bl	80010d0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e215      	b.n	800316e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d42:	4b57      	ldr	r3, [pc, #348]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x110>
 8002d4e:	e000      	b.n	8002d52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d069      	beq.n	8002e32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d5e:	4b50      	ldr	r3, [pc, #320]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00b      	beq.n	8002d82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d6a:	4b4d      	ldr	r3, [pc, #308]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d11c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x190>
 8002d76:	4b4a      	ldr	r3, [pc, #296]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d116      	bne.n	8002db0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d82:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_RCC_OscConfig+0x17a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d001      	beq.n	8002d9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e1e9      	b.n	800316e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9a:	4b41      	ldr	r3, [pc, #260]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	493d      	ldr	r1, [pc, #244]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dae:	e040      	b.n	8002e32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d023      	beq.n	8002e00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db8:	4b39      	ldr	r3, [pc, #228]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a38      	ldr	r2, [pc, #224]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe f984 	bl	80010d0 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dcc:	f7fe f980 	bl	80010d0 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e1c7      	b.n	800316e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dde:	4b30      	ldr	r3, [pc, #192]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dea:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4929      	ldr	r1, [pc, #164]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
 8002dfe:	e018      	b.n	8002e32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e00:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a26      	ldr	r2, [pc, #152]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fe f960 	bl	80010d0 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e14:	f7fe f95c 	bl	80010d0 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e1a3      	b.n	800316e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e26:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d038      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d019      	beq.n	8002e7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e46:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4a:	4a15      	ldr	r2, [pc, #84]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e52:	f7fe f93d 	bl	80010d0 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e5a:	f7fe f939 	bl	80010d0 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e180      	b.n	800316e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x23a>
 8002e78:	e01a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7e:	4a08      	ldr	r2, [pc, #32]	; (8002ea0 <HAL_RCC_OscConfig+0x280>)
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e86:	f7fe f923 	bl	80010d0 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e8e:	f7fe f91f 	bl	80010d0 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d903      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e166      	b.n	800316e <HAL_RCC_OscConfig+0x54e>
 8002ea0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea4:	4b92      	ldr	r3, [pc, #584]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1ee      	bne.n	8002e8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80a4 	beq.w	8003006 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ebe:	4b8c      	ldr	r3, [pc, #560]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10d      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	4b89      	ldr	r3, [pc, #548]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	4a88      	ldr	r2, [pc, #544]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed6:	4b86      	ldr	r3, [pc, #536]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee6:	4b83      	ldr	r3, [pc, #524]	; (80030f4 <HAL_RCC_OscConfig+0x4d4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d118      	bne.n	8002f24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ef2:	4b80      	ldr	r3, [pc, #512]	; (80030f4 <HAL_RCC_OscConfig+0x4d4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a7f      	ldr	r2, [pc, #508]	; (80030f4 <HAL_RCC_OscConfig+0x4d4>)
 8002ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002efe:	f7fe f8e7 	bl	80010d0 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f06:	f7fe f8e3 	bl	80010d0 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b64      	cmp	r3, #100	; 0x64
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e12a      	b.n	800316e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f18:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <HAL_RCC_OscConfig+0x4d4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f0      	beq.n	8002f06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d106      	bne.n	8002f3a <HAL_RCC_OscConfig+0x31a>
 8002f2c:	4b70      	ldr	r3, [pc, #448]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	4a6f      	ldr	r2, [pc, #444]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6713      	str	r3, [r2, #112]	; 0x70
 8002f38:	e02d      	b.n	8002f96 <HAL_RCC_OscConfig+0x376>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x33c>
 8002f42:	4b6b      	ldr	r3, [pc, #428]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	4a6a      	ldr	r2, [pc, #424]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002f48:	f023 0301 	bic.w	r3, r3, #1
 8002f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4e:	4b68      	ldr	r3, [pc, #416]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	4a67      	ldr	r2, [pc, #412]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002f54:	f023 0304 	bic.w	r3, r3, #4
 8002f58:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5a:	e01c      	b.n	8002f96 <HAL_RCC_OscConfig+0x376>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b05      	cmp	r3, #5
 8002f62:	d10c      	bne.n	8002f7e <HAL_RCC_OscConfig+0x35e>
 8002f64:	4b62      	ldr	r3, [pc, #392]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4a61      	ldr	r2, [pc, #388]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002f6a:	f043 0304 	orr.w	r3, r3, #4
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f70:	4b5f      	ldr	r3, [pc, #380]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	4a5e      	ldr	r2, [pc, #376]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7c:	e00b      	b.n	8002f96 <HAL_RCC_OscConfig+0x376>
 8002f7e:	4b5c      	ldr	r3, [pc, #368]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a5b      	ldr	r2, [pc, #364]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8a:	4b59      	ldr	r3, [pc, #356]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	4a58      	ldr	r2, [pc, #352]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002f90:	f023 0304 	bic.w	r3, r3, #4
 8002f94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d015      	beq.n	8002fca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9e:	f7fe f897 	bl	80010d0 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa6:	f7fe f893 	bl	80010d0 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e0d8      	b.n	800316e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbc:	4b4c      	ldr	r3, [pc, #304]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0ee      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x386>
 8002fc8:	e014      	b.n	8002ff4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fca:	f7fe f881 	bl	80010d0 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd2:	f7fe f87d 	bl	80010d0 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e0c2      	b.n	800316e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe8:	4b41      	ldr	r3, [pc, #260]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1ee      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d105      	bne.n	8003006 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffa:	4b3d      	ldr	r3, [pc, #244]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	4a3c      	ldr	r2, [pc, #240]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8003000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003004:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 80ae 	beq.w	800316c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003010:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b08      	cmp	r3, #8
 800301a:	d06d      	beq.n	80030f8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d14b      	bne.n	80030bc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003024:	4b32      	ldr	r3, [pc, #200]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a31      	ldr	r2, [pc, #196]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 800302a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe f84e 	bl	80010d0 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003038:	f7fe f84a 	bl	80010d0 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e091      	b.n	800316e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304a:	4b29      	ldr	r3, [pc, #164]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69da      	ldr	r2, [r3, #28]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	019b      	lsls	r3, r3, #6
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	085b      	lsrs	r3, r3, #1
 800306e:	3b01      	subs	r3, #1
 8003070:	041b      	lsls	r3, r3, #16
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	061b      	lsls	r3, r3, #24
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	071b      	lsls	r3, r3, #28
 8003082:	491b      	ldr	r1, [pc, #108]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 800308e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe f81c 	bl	80010d0 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309c:	f7fe f818 	bl	80010d0 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e05f      	b.n	800316e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ae:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x47c>
 80030ba:	e057      	b.n	800316c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 80030c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fe f802 	bl	80010d0 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fd fffe 	bl	80010d0 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e045      	b.n	800316e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <HAL_RCC_OscConfig+0x4d0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x4b0>
 80030ee:	e03d      	b.n	800316c <HAL_RCC_OscConfig+0x54c>
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030f8:	4b1f      	ldr	r3, [pc, #124]	; (8003178 <HAL_RCC_OscConfig+0x558>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d030      	beq.n	8003168 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003110:	429a      	cmp	r2, r3
 8003112:	d129      	bne.n	8003168 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d122      	bne.n	8003168 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003128:	4013      	ands	r3, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800312e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003130:	4293      	cmp	r3, r2
 8003132:	d119      	bne.n	8003168 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	085b      	lsrs	r3, r3, #1
 8003140:	3b01      	subs	r3, #1
 8003142:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003144:	429a      	cmp	r2, r3
 8003146:	d10f      	bne.n	8003168 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d107      	bne.n	8003168 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800

0800317c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0d0      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003194:	4b6a      	ldr	r3, [pc, #424]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d910      	bls.n	80031c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a2:	4b67      	ldr	r3, [pc, #412]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 020f 	bic.w	r2, r3, #15
 80031aa:	4965      	ldr	r1, [pc, #404]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b63      	ldr	r3, [pc, #396]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0b8      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031dc:	4b59      	ldr	r3, [pc, #356]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a58      	ldr	r2, [pc, #352]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 80031e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f4:	4b53      	ldr	r3, [pc, #332]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4a52      	ldr	r2, [pc, #328]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 80031fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003200:	4b50      	ldr	r3, [pc, #320]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	494d      	ldr	r1, [pc, #308]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d040      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d107      	bne.n	8003236 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b47      	ldr	r3, [pc, #284]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d115      	bne.n	800325e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e07f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d107      	bne.n	800324e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323e:	4b41      	ldr	r3, [pc, #260]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e073      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324e:	4b3d      	ldr	r3, [pc, #244]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e06b      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325e:	4b39      	ldr	r3, [pc, #228]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f023 0203 	bic.w	r2, r3, #3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4936      	ldr	r1, [pc, #216]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 800326c:	4313      	orrs	r3, r2
 800326e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003270:	f7fd ff2e 	bl	80010d0 <HAL_GetTick>
 8003274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003276:	e00a      	b.n	800328e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003278:	f7fd ff2a 	bl	80010d0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	; 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e053      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328e:	4b2d      	ldr	r3, [pc, #180]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 020c 	and.w	r2, r3, #12
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	429a      	cmp	r2, r3
 800329e:	d1eb      	bne.n	8003278 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032a0:	4b27      	ldr	r3, [pc, #156]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d210      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4b24      	ldr	r3, [pc, #144]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 020f 	bic.w	r2, r3, #15
 80032b6:	4922      	ldr	r1, [pc, #136]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e032      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4916      	ldr	r1, [pc, #88]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	490e      	ldr	r1, [pc, #56]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800330e:	f000 f821 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003312:	4602      	mov	r2, r0
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	490a      	ldr	r1, [pc, #40]	; (8003348 <HAL_RCC_ClockConfig+0x1cc>)
 8003320:	5ccb      	ldrb	r3, [r1, r3]
 8003322:	fa22 f303 	lsr.w	r3, r2, r3
 8003326:	4a09      	ldr	r2, [pc, #36]	; (800334c <HAL_RCC_ClockConfig+0x1d0>)
 8003328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1d4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd fe8a 	bl	8001048 <HAL_InitTick>

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40023c00 	.word	0x40023c00
 8003344:	40023800 	.word	0x40023800
 8003348:	08013700 	.word	0x08013700
 800334c:	20000000 	.word	0x20000000
 8003350:	20000004 	.word	0x20000004

08003354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003358:	b094      	sub	sp, #80	; 0x50
 800335a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	647b      	str	r3, [r7, #68]	; 0x44
 8003360:	2300      	movs	r3, #0
 8003362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003364:	2300      	movs	r3, #0
 8003366:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800336c:	4b79      	ldr	r3, [pc, #484]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	2b08      	cmp	r3, #8
 8003376:	d00d      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x40>
 8003378:	2b08      	cmp	r3, #8
 800337a:	f200 80e1 	bhi.w	8003540 <HAL_RCC_GetSysClockFreq+0x1ec>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x34>
 8003382:	2b04      	cmp	r3, #4
 8003384:	d003      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0x3a>
 8003386:	e0db      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003388:	4b73      	ldr	r3, [pc, #460]	; (8003558 <HAL_RCC_GetSysClockFreq+0x204>)
 800338a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800338c:	e0db      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800338e:	4b73      	ldr	r3, [pc, #460]	; (800355c <HAL_RCC_GetSysClockFreq+0x208>)
 8003390:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003392:	e0d8      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003394:	4b6f      	ldr	r3, [pc, #444]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800339c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800339e:	4b6d      	ldr	r3, [pc, #436]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d063      	beq.n	8003472 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033aa:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	099b      	lsrs	r3, r3, #6
 80033b0:	2200      	movs	r2, #0
 80033b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80033b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033bc:	633b      	str	r3, [r7, #48]	; 0x30
 80033be:	2300      	movs	r3, #0
 80033c0:	637b      	str	r3, [r7, #52]	; 0x34
 80033c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033c6:	4622      	mov	r2, r4
 80033c8:	462b      	mov	r3, r5
 80033ca:	f04f 0000 	mov.w	r0, #0
 80033ce:	f04f 0100 	mov.w	r1, #0
 80033d2:	0159      	lsls	r1, r3, #5
 80033d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d8:	0150      	lsls	r0, r2, #5
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4621      	mov	r1, r4
 80033e0:	1a51      	subs	r1, r2, r1
 80033e2:	6139      	str	r1, [r7, #16]
 80033e4:	4629      	mov	r1, r5
 80033e6:	eb63 0301 	sbc.w	r3, r3, r1
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033f8:	4659      	mov	r1, fp
 80033fa:	018b      	lsls	r3, r1, #6
 80033fc:	4651      	mov	r1, sl
 80033fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003402:	4651      	mov	r1, sl
 8003404:	018a      	lsls	r2, r1, #6
 8003406:	4651      	mov	r1, sl
 8003408:	ebb2 0801 	subs.w	r8, r2, r1
 800340c:	4659      	mov	r1, fp
 800340e:	eb63 0901 	sbc.w	r9, r3, r1
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800341e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003426:	4690      	mov	r8, r2
 8003428:	4699      	mov	r9, r3
 800342a:	4623      	mov	r3, r4
 800342c:	eb18 0303 	adds.w	r3, r8, r3
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	462b      	mov	r3, r5
 8003434:	eb49 0303 	adc.w	r3, r9, r3
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003446:	4629      	mov	r1, r5
 8003448:	024b      	lsls	r3, r1, #9
 800344a:	4621      	mov	r1, r4
 800344c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003450:	4621      	mov	r1, r4
 8003452:	024a      	lsls	r2, r1, #9
 8003454:	4610      	mov	r0, r2
 8003456:	4619      	mov	r1, r3
 8003458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345a:	2200      	movs	r2, #0
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
 800345e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003460:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003464:	f7fc ff3c 	bl	80002e0 <__aeabi_uldivmod>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4613      	mov	r3, r2
 800346e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003470:	e058      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003472:	4b38      	ldr	r3, [pc, #224]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	099b      	lsrs	r3, r3, #6
 8003478:	2200      	movs	r2, #0
 800347a:	4618      	mov	r0, r3
 800347c:	4611      	mov	r1, r2
 800347e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003482:	623b      	str	r3, [r7, #32]
 8003484:	2300      	movs	r3, #0
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
 8003488:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800348c:	4642      	mov	r2, r8
 800348e:	464b      	mov	r3, r9
 8003490:	f04f 0000 	mov.w	r0, #0
 8003494:	f04f 0100 	mov.w	r1, #0
 8003498:	0159      	lsls	r1, r3, #5
 800349a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800349e:	0150      	lsls	r0, r2, #5
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4641      	mov	r1, r8
 80034a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80034aa:	4649      	mov	r1, r9
 80034ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034c4:	ebb2 040a 	subs.w	r4, r2, sl
 80034c8:	eb63 050b 	sbc.w	r5, r3, fp
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	00eb      	lsls	r3, r5, #3
 80034d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034da:	00e2      	lsls	r2, r4, #3
 80034dc:	4614      	mov	r4, r2
 80034de:	461d      	mov	r5, r3
 80034e0:	4643      	mov	r3, r8
 80034e2:	18e3      	adds	r3, r4, r3
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	464b      	mov	r3, r9
 80034e8:	eb45 0303 	adc.w	r3, r5, r3
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034fa:	4629      	mov	r1, r5
 80034fc:	028b      	lsls	r3, r1, #10
 80034fe:	4621      	mov	r1, r4
 8003500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003504:	4621      	mov	r1, r4
 8003506:	028a      	lsls	r2, r1, #10
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800350e:	2200      	movs	r2, #0
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	61fa      	str	r2, [r7, #28]
 8003514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003518:	f7fc fee2 	bl	80002e0 <__aeabi_uldivmod>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4613      	mov	r3, r2
 8003522:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCC_GetSysClockFreq+0x200>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	3301      	adds	r3, #1
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800353e:	e002      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_RCC_GetSysClockFreq+0x204>)
 8003542:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003548:	4618      	mov	r0, r3
 800354a:	3750      	adds	r7, #80	; 0x50
 800354c:	46bd      	mov	sp, r7
 800354e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800
 8003558:	00f42400 	.word	0x00f42400
 800355c:	007a1200 	.word	0x007a1200

08003560 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <HAL_RCC_GetHCLKFreq+0x14>)
 8003566:	681b      	ldr	r3, [r3, #0]
}
 8003568:	4618      	mov	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000000 	.word	0x20000000

08003578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800357c:	f7ff fff0 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	0a9b      	lsrs	r3, r3, #10
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	4903      	ldr	r1, [pc, #12]	; (800359c <HAL_RCC_GetPCLK1Freq+0x24>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40023800 	.word	0x40023800
 800359c:	08013710 	.word	0x08013710

080035a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035a4:	f7ff ffdc 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	0b5b      	lsrs	r3, r3, #13
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	4903      	ldr	r1, [pc, #12]	; (80035c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035bc:	4618      	mov	r0, r3
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40023800 	.word	0x40023800
 80035c4:	08013710 	.word	0x08013710

080035c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d012      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035f0:	4b69      	ldr	r3, [pc, #420]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	4a68      	ldr	r2, [pc, #416]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035fa:	6093      	str	r3, [r2, #8]
 80035fc:	4b66      	ldr	r3, [pc, #408]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	4964      	ldr	r1, [pc, #400]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003612:	2301      	movs	r3, #1
 8003614:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d017      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003622:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003628:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	4959      	ldr	r1, [pc, #356]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003640:	d101      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003642:	2301      	movs	r3, #1
 8003644:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800364e:	2301      	movs	r3, #1
 8003650:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d017      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800365e:	4b4e      	ldr	r3, [pc, #312]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003664:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	494a      	ldr	r1, [pc, #296]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800367c:	d101      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800368a:	2301      	movs	r3, #1
 800368c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800369a:	2301      	movs	r3, #1
 800369c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 808b 	beq.w	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036ac:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	4a39      	ldr	r2, [pc, #228]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b6:	6413      	str	r3, [r2, #64]	; 0x40
 80036b8:	4b37      	ldr	r3, [pc, #220]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036c4:	4b35      	ldr	r3, [pc, #212]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a34      	ldr	r2, [pc, #208]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d0:	f7fd fcfe 	bl	80010d0 <HAL_GetTick>
 80036d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d8:	f7fd fcfa 	bl	80010d0 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b64      	cmp	r3, #100	; 0x64
 80036e4:	d901      	bls.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e38f      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036ea:	4b2c      	ldr	r3, [pc, #176]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036f6:	4b28      	ldr	r3, [pc, #160]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d035      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	429a      	cmp	r2, r3
 8003712:	d02e      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003714:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800371e:	4b1e      	ldr	r3, [pc, #120]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003728:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800372a:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	4a1a      	ldr	r2, [pc, #104]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003734:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003736:	4a18      	ldr	r2, [pc, #96]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800373c:	4b16      	ldr	r3, [pc, #88]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b01      	cmp	r3, #1
 8003746:	d114      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003748:	f7fd fcc2 	bl	80010d0 <HAL_GetTick>
 800374c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374e:	e00a      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003750:	f7fd fcbe 	bl	80010d0 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	; 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e351      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003766:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0ee      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800377e:	d111      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800378e:	400b      	ands	r3, r1
 8003790:	4901      	ldr	r1, [pc, #4]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
 8003796:	e00b      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003798:	40023800 	.word	0x40023800
 800379c:	40007000 	.word	0x40007000
 80037a0:	0ffffcff 	.word	0x0ffffcff
 80037a4:	4bac      	ldr	r3, [pc, #688]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	4aab      	ldr	r2, [pc, #684]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037ae:	6093      	str	r3, [r2, #8]
 80037b0:	4ba9      	ldr	r3, [pc, #676]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037bc:	49a6      	ldr	r1, [pc, #664]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d010      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037ce:	4ba2      	ldr	r3, [pc, #648]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d4:	4aa0      	ldr	r2, [pc, #640]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80037de:	4b9e      	ldr	r3, [pc, #632]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	499b      	ldr	r1, [pc, #620]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037fc:	4b96      	ldr	r3, [pc, #600]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800380a:	4993      	ldr	r1, [pc, #588]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800381e:	4b8e      	ldr	r3, [pc, #568]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800382c:	498a      	ldr	r1, [pc, #552]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003840:	4b85      	ldr	r3, [pc, #532]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800384e:	4982      	ldr	r1, [pc, #520]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003862:	4b7d      	ldr	r3, [pc, #500]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	4979      	ldr	r1, [pc, #484]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003884:	4b74      	ldr	r3, [pc, #464]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	f023 0203 	bic.w	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	4971      	ldr	r1, [pc, #452]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038a6:	4b6c      	ldr	r3, [pc, #432]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ac:	f023 020c 	bic.w	r2, r3, #12
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b4:	4968      	ldr	r1, [pc, #416]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038c8:	4b63      	ldr	r3, [pc, #396]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d6:	4960      	ldr	r1, [pc, #384]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038ea:	4b5b      	ldr	r3, [pc, #364]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f8:	4957      	ldr	r1, [pc, #348]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800390c:	4b52      	ldr	r3, [pc, #328]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	494f      	ldr	r1, [pc, #316]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800392e:	4b4a      	ldr	r3, [pc, #296]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	4946      	ldr	r1, [pc, #280]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003950:	4b41      	ldr	r3, [pc, #260]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	493e      	ldr	r1, [pc, #248]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003972:	4b39      	ldr	r3, [pc, #228]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003978:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003980:	4935      	ldr	r1, [pc, #212]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003994:	4b30      	ldr	r3, [pc, #192]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039a2:	492d      	ldr	r1, [pc, #180]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d011      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039b6:	4b28      	ldr	r3, [pc, #160]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c4:	4924      	ldr	r1, [pc, #144]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039d4:	d101      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80039d6:	2301      	movs	r3, #1
 80039d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80039e6:	2301      	movs	r3, #1
 80039e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039f6:	4b18      	ldr	r3, [pc, #96]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a04:	4914      	ldr	r1, [pc, #80]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00b      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a18:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a28:	490b      	ldr	r1, [pc, #44]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00f      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003a3c:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4c:	4902      	ldr	r1, [pc, #8]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a54:	e002      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00b      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a68:	4b8a      	ldr	r3, [pc, #552]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	4986      	ldr	r1, [pc, #536]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00b      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a8c:	4b81      	ldr	r3, [pc, #516]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a92:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a9c:	497d      	ldr	r1, [pc, #500]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d006      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80d6 	beq.w	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ab8:	4b76      	ldr	r3, [pc, #472]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a75      	ldr	r2, [pc, #468]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003abe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac4:	f7fd fb04 	bl	80010d0 <HAL_GetTick>
 8003ac8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003acc:	f7fd fb00 	bl	80010d0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e195      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ade:	4b6d      	ldr	r3, [pc, #436]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d021      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d11d      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003afe:	4b65      	ldr	r3, [pc, #404]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b04:	0c1b      	lsrs	r3, r3, #16
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b0c:	4b61      	ldr	r3, [pc, #388]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b12:	0e1b      	lsrs	r3, r3, #24
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	019a      	lsls	r2, r3, #6
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	041b      	lsls	r3, r3, #16
 8003b24:	431a      	orrs	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	071b      	lsls	r3, r3, #28
 8003b32:	4958      	ldr	r1, [pc, #352]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d004      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d02e      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b64:	d129      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b66:	4b4b      	ldr	r3, [pc, #300]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b6c:	0c1b      	lsrs	r3, r3, #16
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b74:	4b47      	ldr	r3, [pc, #284]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7a:	0f1b      	lsrs	r3, r3, #28
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	019a      	lsls	r2, r3, #6
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	041b      	lsls	r3, r3, #16
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	061b      	lsls	r3, r3, #24
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	071b      	lsls	r3, r3, #28
 8003b9a:	493e      	ldr	r1, [pc, #248]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ba2:	4b3c      	ldr	r3, [pc, #240]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba8:	f023 021f 	bic.w	r2, r3, #31
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	4938      	ldr	r1, [pc, #224]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01d      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bc6:	4b33      	ldr	r3, [pc, #204]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bcc:	0e1b      	lsrs	r3, r3, #24
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bd4:	4b2f      	ldr	r3, [pc, #188]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bda:	0f1b      	lsrs	r3, r3, #28
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	019a      	lsls	r2, r3, #6
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	041b      	lsls	r3, r3, #16
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	061b      	lsls	r3, r3, #24
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	071b      	lsls	r3, r3, #28
 8003bfa:	4926      	ldr	r1, [pc, #152]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d011      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	019a      	lsls	r2, r3, #6
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	041b      	lsls	r3, r3, #16
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	061b      	lsls	r3, r3, #24
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	071b      	lsls	r3, r3, #28
 8003c2a:	491a      	ldr	r1, [pc, #104]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c32:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a17      	ldr	r2, [pc, #92]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c3e:	f7fd fa47 	bl	80010d0 <HAL_GetTick>
 8003c42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c46:	f7fd fa43 	bl	80010d0 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b64      	cmp	r3, #100	; 0x64
 8003c52:	d901      	bls.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e0d8      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c58:	4b0e      	ldr	r3, [pc, #56]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	f040 80ce 	bne.w	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c6c:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a08      	ldr	r2, [pc, #32]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c78:	f7fd fa2a 	bl	80010d0 <HAL_GetTick>
 8003c7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c7e:	e00b      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c80:	f7fd fa26 	bl	80010d0 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d904      	bls.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e0bb      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c98:	4b5e      	ldr	r3, [pc, #376]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ca4:	d0ec      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d02e      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d12a      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cce:	4b51      	ldr	r3, [pc, #324]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	0c1b      	lsrs	r3, r3, #16
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cdc:	4b4d      	ldr	r3, [pc, #308]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	0f1b      	lsrs	r3, r3, #28
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	019a      	lsls	r2, r3, #6
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	041b      	lsls	r3, r3, #16
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	061b      	lsls	r3, r3, #24
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	071b      	lsls	r3, r3, #28
 8003d02:	4944      	ldr	r1, [pc, #272]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d0a:	4b42      	ldr	r3, [pc, #264]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	021b      	lsls	r3, r3, #8
 8003d1c:	493d      	ldr	r1, [pc, #244]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d022      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d38:	d11d      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d3a:	4b36      	ldr	r3, [pc, #216]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	0e1b      	lsrs	r3, r3, #24
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d48:	4b32      	ldr	r3, [pc, #200]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	0f1b      	lsrs	r3, r3, #28
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	019a      	lsls	r2, r3, #6
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	041b      	lsls	r3, r3, #16
 8003d62:	431a      	orrs	r2, r3
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	061b      	lsls	r3, r3, #24
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	071b      	lsls	r3, r3, #28
 8003d6e:	4929      	ldr	r1, [pc, #164]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d028      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d82:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	0e1b      	lsrs	r3, r3, #24
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d90:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	0c1b      	lsrs	r3, r3, #16
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	019a      	lsls	r2, r3, #6
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	431a      	orrs	r2, r3
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	061b      	lsls	r3, r3, #24
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	071b      	lsls	r3, r3, #28
 8003db6:	4917      	ldr	r1, [pc, #92]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	4911      	ldr	r1, [pc, #68]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0e      	ldr	r2, [pc, #56]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de0:	f7fd f976 	bl	80010d0 <HAL_GetTick>
 8003de4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003de8:	f7fd f972 	bl	80010d0 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b64      	cmp	r3, #100	; 0x64
 8003df4:	d901      	bls.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e007      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e06:	d1ef      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3720      	adds	r7, #32
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800

08003e18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e040      	b.n	8003eac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fc fd9c 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2224      	movs	r2, #36	; 0x24
 8003e44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fb16 	bl	8004490 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f8af 	bl	8003fc8 <UART_SetConfig>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e01b      	b.n	8003eac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fb95 	bl	80045d4 <UART_CheckIdleState>
 8003eaa:	4603      	mov	r3, r0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08a      	sub	sp, #40	; 0x28
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	d177      	bne.n	8003fbc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <HAL_UART_Transmit+0x24>
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e070      	b.n	8003fbe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2221      	movs	r2, #33	; 0x21
 8003ee8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eea:	f7fd f8f1 	bl	80010d0 <HAL_GetTick>
 8003eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	88fa      	ldrh	r2, [r7, #6]
 8003ef4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	88fa      	ldrh	r2, [r7, #6]
 8003efc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f08:	d108      	bne.n	8003f1c <HAL_UART_Transmit+0x68>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d104      	bne.n	8003f1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	e003      	b.n	8003f24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f24:	e02f      	b.n	8003f86 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2180      	movs	r1, #128	; 0x80
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fbf7 	bl	8004724 <UART_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d004      	beq.n	8003f46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e03b      	b.n	8003fbe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10b      	bne.n	8003f64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	3302      	adds	r3, #2
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	e007      	b.n	8003f74 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	781a      	ldrb	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	3301      	adds	r3, #1
 8003f72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1c9      	bne.n	8003f26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2140      	movs	r1, #64	; 0x40
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 fbc1 	bl	8004724 <UART_WaitOnFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d004      	beq.n	8003fb2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e005      	b.n	8003fbe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e000      	b.n	8003fbe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
  }
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3720      	adds	r7, #32
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4ba6      	ldr	r3, [pc, #664]	; (800428c <UART_SetConfig+0x2c4>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	6979      	ldr	r1, [r7, #20]
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	430a      	orrs	r2, r1
 8004038:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a94      	ldr	r2, [pc, #592]	; (8004290 <UART_SetConfig+0x2c8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d120      	bne.n	8004086 <UART_SetConfig+0xbe>
 8004044:	4b93      	ldr	r3, [pc, #588]	; (8004294 <UART_SetConfig+0x2cc>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b03      	cmp	r3, #3
 8004050:	d816      	bhi.n	8004080 <UART_SetConfig+0xb8>
 8004052:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <UART_SetConfig+0x90>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	08004069 	.word	0x08004069
 800405c:	08004075 	.word	0x08004075
 8004060:	0800406f 	.word	0x0800406f
 8004064:	0800407b 	.word	0x0800407b
 8004068:	2301      	movs	r3, #1
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e150      	b.n	8004310 <UART_SetConfig+0x348>
 800406e:	2302      	movs	r3, #2
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e14d      	b.n	8004310 <UART_SetConfig+0x348>
 8004074:	2304      	movs	r3, #4
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e14a      	b.n	8004310 <UART_SetConfig+0x348>
 800407a:	2308      	movs	r3, #8
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e147      	b.n	8004310 <UART_SetConfig+0x348>
 8004080:	2310      	movs	r3, #16
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e144      	b.n	8004310 <UART_SetConfig+0x348>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a83      	ldr	r2, [pc, #524]	; (8004298 <UART_SetConfig+0x2d0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d132      	bne.n	80040f6 <UART_SetConfig+0x12e>
 8004090:	4b80      	ldr	r3, [pc, #512]	; (8004294 <UART_SetConfig+0x2cc>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	2b0c      	cmp	r3, #12
 800409c:	d828      	bhi.n	80040f0 <UART_SetConfig+0x128>
 800409e:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <UART_SetConfig+0xdc>)
 80040a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a4:	080040d9 	.word	0x080040d9
 80040a8:	080040f1 	.word	0x080040f1
 80040ac:	080040f1 	.word	0x080040f1
 80040b0:	080040f1 	.word	0x080040f1
 80040b4:	080040e5 	.word	0x080040e5
 80040b8:	080040f1 	.word	0x080040f1
 80040bc:	080040f1 	.word	0x080040f1
 80040c0:	080040f1 	.word	0x080040f1
 80040c4:	080040df 	.word	0x080040df
 80040c8:	080040f1 	.word	0x080040f1
 80040cc:	080040f1 	.word	0x080040f1
 80040d0:	080040f1 	.word	0x080040f1
 80040d4:	080040eb 	.word	0x080040eb
 80040d8:	2300      	movs	r3, #0
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	e118      	b.n	8004310 <UART_SetConfig+0x348>
 80040de:	2302      	movs	r3, #2
 80040e0:	77fb      	strb	r3, [r7, #31]
 80040e2:	e115      	b.n	8004310 <UART_SetConfig+0x348>
 80040e4:	2304      	movs	r3, #4
 80040e6:	77fb      	strb	r3, [r7, #31]
 80040e8:	e112      	b.n	8004310 <UART_SetConfig+0x348>
 80040ea:	2308      	movs	r3, #8
 80040ec:	77fb      	strb	r3, [r7, #31]
 80040ee:	e10f      	b.n	8004310 <UART_SetConfig+0x348>
 80040f0:	2310      	movs	r3, #16
 80040f2:	77fb      	strb	r3, [r7, #31]
 80040f4:	e10c      	b.n	8004310 <UART_SetConfig+0x348>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a68      	ldr	r2, [pc, #416]	; (800429c <UART_SetConfig+0x2d4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d120      	bne.n	8004142 <UART_SetConfig+0x17a>
 8004100:	4b64      	ldr	r3, [pc, #400]	; (8004294 <UART_SetConfig+0x2cc>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004106:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800410a:	2b30      	cmp	r3, #48	; 0x30
 800410c:	d013      	beq.n	8004136 <UART_SetConfig+0x16e>
 800410e:	2b30      	cmp	r3, #48	; 0x30
 8004110:	d814      	bhi.n	800413c <UART_SetConfig+0x174>
 8004112:	2b20      	cmp	r3, #32
 8004114:	d009      	beq.n	800412a <UART_SetConfig+0x162>
 8004116:	2b20      	cmp	r3, #32
 8004118:	d810      	bhi.n	800413c <UART_SetConfig+0x174>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <UART_SetConfig+0x15c>
 800411e:	2b10      	cmp	r3, #16
 8004120:	d006      	beq.n	8004130 <UART_SetConfig+0x168>
 8004122:	e00b      	b.n	800413c <UART_SetConfig+0x174>
 8004124:	2300      	movs	r3, #0
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	e0f2      	b.n	8004310 <UART_SetConfig+0x348>
 800412a:	2302      	movs	r3, #2
 800412c:	77fb      	strb	r3, [r7, #31]
 800412e:	e0ef      	b.n	8004310 <UART_SetConfig+0x348>
 8004130:	2304      	movs	r3, #4
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e0ec      	b.n	8004310 <UART_SetConfig+0x348>
 8004136:	2308      	movs	r3, #8
 8004138:	77fb      	strb	r3, [r7, #31]
 800413a:	e0e9      	b.n	8004310 <UART_SetConfig+0x348>
 800413c:	2310      	movs	r3, #16
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e0e6      	b.n	8004310 <UART_SetConfig+0x348>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a56      	ldr	r2, [pc, #344]	; (80042a0 <UART_SetConfig+0x2d8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d120      	bne.n	800418e <UART_SetConfig+0x1c6>
 800414c:	4b51      	ldr	r3, [pc, #324]	; (8004294 <UART_SetConfig+0x2cc>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004152:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004156:	2bc0      	cmp	r3, #192	; 0xc0
 8004158:	d013      	beq.n	8004182 <UART_SetConfig+0x1ba>
 800415a:	2bc0      	cmp	r3, #192	; 0xc0
 800415c:	d814      	bhi.n	8004188 <UART_SetConfig+0x1c0>
 800415e:	2b80      	cmp	r3, #128	; 0x80
 8004160:	d009      	beq.n	8004176 <UART_SetConfig+0x1ae>
 8004162:	2b80      	cmp	r3, #128	; 0x80
 8004164:	d810      	bhi.n	8004188 <UART_SetConfig+0x1c0>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <UART_SetConfig+0x1a8>
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d006      	beq.n	800417c <UART_SetConfig+0x1b4>
 800416e:	e00b      	b.n	8004188 <UART_SetConfig+0x1c0>
 8004170:	2300      	movs	r3, #0
 8004172:	77fb      	strb	r3, [r7, #31]
 8004174:	e0cc      	b.n	8004310 <UART_SetConfig+0x348>
 8004176:	2302      	movs	r3, #2
 8004178:	77fb      	strb	r3, [r7, #31]
 800417a:	e0c9      	b.n	8004310 <UART_SetConfig+0x348>
 800417c:	2304      	movs	r3, #4
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e0c6      	b.n	8004310 <UART_SetConfig+0x348>
 8004182:	2308      	movs	r3, #8
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e0c3      	b.n	8004310 <UART_SetConfig+0x348>
 8004188:	2310      	movs	r3, #16
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e0c0      	b.n	8004310 <UART_SetConfig+0x348>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a44      	ldr	r2, [pc, #272]	; (80042a4 <UART_SetConfig+0x2dc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d125      	bne.n	80041e4 <UART_SetConfig+0x21c>
 8004198:	4b3e      	ldr	r3, [pc, #248]	; (8004294 <UART_SetConfig+0x2cc>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041a6:	d017      	beq.n	80041d8 <UART_SetConfig+0x210>
 80041a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ac:	d817      	bhi.n	80041de <UART_SetConfig+0x216>
 80041ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b2:	d00b      	beq.n	80041cc <UART_SetConfig+0x204>
 80041b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b8:	d811      	bhi.n	80041de <UART_SetConfig+0x216>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <UART_SetConfig+0x1fe>
 80041be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c2:	d006      	beq.n	80041d2 <UART_SetConfig+0x20a>
 80041c4:	e00b      	b.n	80041de <UART_SetConfig+0x216>
 80041c6:	2300      	movs	r3, #0
 80041c8:	77fb      	strb	r3, [r7, #31]
 80041ca:	e0a1      	b.n	8004310 <UART_SetConfig+0x348>
 80041cc:	2302      	movs	r3, #2
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e09e      	b.n	8004310 <UART_SetConfig+0x348>
 80041d2:	2304      	movs	r3, #4
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e09b      	b.n	8004310 <UART_SetConfig+0x348>
 80041d8:	2308      	movs	r3, #8
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e098      	b.n	8004310 <UART_SetConfig+0x348>
 80041de:	2310      	movs	r3, #16
 80041e0:	77fb      	strb	r3, [r7, #31]
 80041e2:	e095      	b.n	8004310 <UART_SetConfig+0x348>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2f      	ldr	r2, [pc, #188]	; (80042a8 <UART_SetConfig+0x2e0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d125      	bne.n	800423a <UART_SetConfig+0x272>
 80041ee:	4b29      	ldr	r3, [pc, #164]	; (8004294 <UART_SetConfig+0x2cc>)
 80041f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041fc:	d017      	beq.n	800422e <UART_SetConfig+0x266>
 80041fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004202:	d817      	bhi.n	8004234 <UART_SetConfig+0x26c>
 8004204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004208:	d00b      	beq.n	8004222 <UART_SetConfig+0x25a>
 800420a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420e:	d811      	bhi.n	8004234 <UART_SetConfig+0x26c>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <UART_SetConfig+0x254>
 8004214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004218:	d006      	beq.n	8004228 <UART_SetConfig+0x260>
 800421a:	e00b      	b.n	8004234 <UART_SetConfig+0x26c>
 800421c:	2301      	movs	r3, #1
 800421e:	77fb      	strb	r3, [r7, #31]
 8004220:	e076      	b.n	8004310 <UART_SetConfig+0x348>
 8004222:	2302      	movs	r3, #2
 8004224:	77fb      	strb	r3, [r7, #31]
 8004226:	e073      	b.n	8004310 <UART_SetConfig+0x348>
 8004228:	2304      	movs	r3, #4
 800422a:	77fb      	strb	r3, [r7, #31]
 800422c:	e070      	b.n	8004310 <UART_SetConfig+0x348>
 800422e:	2308      	movs	r3, #8
 8004230:	77fb      	strb	r3, [r7, #31]
 8004232:	e06d      	b.n	8004310 <UART_SetConfig+0x348>
 8004234:	2310      	movs	r3, #16
 8004236:	77fb      	strb	r3, [r7, #31]
 8004238:	e06a      	b.n	8004310 <UART_SetConfig+0x348>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a1b      	ldr	r2, [pc, #108]	; (80042ac <UART_SetConfig+0x2e4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d138      	bne.n	80042b6 <UART_SetConfig+0x2ee>
 8004244:	4b13      	ldr	r3, [pc, #76]	; (8004294 <UART_SetConfig+0x2cc>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800424e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004252:	d017      	beq.n	8004284 <UART_SetConfig+0x2bc>
 8004254:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004258:	d82a      	bhi.n	80042b0 <UART_SetConfig+0x2e8>
 800425a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800425e:	d00b      	beq.n	8004278 <UART_SetConfig+0x2b0>
 8004260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004264:	d824      	bhi.n	80042b0 <UART_SetConfig+0x2e8>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <UART_SetConfig+0x2aa>
 800426a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426e:	d006      	beq.n	800427e <UART_SetConfig+0x2b6>
 8004270:	e01e      	b.n	80042b0 <UART_SetConfig+0x2e8>
 8004272:	2300      	movs	r3, #0
 8004274:	77fb      	strb	r3, [r7, #31]
 8004276:	e04b      	b.n	8004310 <UART_SetConfig+0x348>
 8004278:	2302      	movs	r3, #2
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	e048      	b.n	8004310 <UART_SetConfig+0x348>
 800427e:	2304      	movs	r3, #4
 8004280:	77fb      	strb	r3, [r7, #31]
 8004282:	e045      	b.n	8004310 <UART_SetConfig+0x348>
 8004284:	2308      	movs	r3, #8
 8004286:	77fb      	strb	r3, [r7, #31]
 8004288:	e042      	b.n	8004310 <UART_SetConfig+0x348>
 800428a:	bf00      	nop
 800428c:	efff69f3 	.word	0xefff69f3
 8004290:	40011000 	.word	0x40011000
 8004294:	40023800 	.word	0x40023800
 8004298:	40004400 	.word	0x40004400
 800429c:	40004800 	.word	0x40004800
 80042a0:	40004c00 	.word	0x40004c00
 80042a4:	40005000 	.word	0x40005000
 80042a8:	40011400 	.word	0x40011400
 80042ac:	40007800 	.word	0x40007800
 80042b0:	2310      	movs	r3, #16
 80042b2:	77fb      	strb	r3, [r7, #31]
 80042b4:	e02c      	b.n	8004310 <UART_SetConfig+0x348>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a72      	ldr	r2, [pc, #456]	; (8004484 <UART_SetConfig+0x4bc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d125      	bne.n	800430c <UART_SetConfig+0x344>
 80042c0:	4b71      	ldr	r3, [pc, #452]	; (8004488 <UART_SetConfig+0x4c0>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042ce:	d017      	beq.n	8004300 <UART_SetConfig+0x338>
 80042d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042d4:	d817      	bhi.n	8004306 <UART_SetConfig+0x33e>
 80042d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042da:	d00b      	beq.n	80042f4 <UART_SetConfig+0x32c>
 80042dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e0:	d811      	bhi.n	8004306 <UART_SetConfig+0x33e>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <UART_SetConfig+0x326>
 80042e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ea:	d006      	beq.n	80042fa <UART_SetConfig+0x332>
 80042ec:	e00b      	b.n	8004306 <UART_SetConfig+0x33e>
 80042ee:	2300      	movs	r3, #0
 80042f0:	77fb      	strb	r3, [r7, #31]
 80042f2:	e00d      	b.n	8004310 <UART_SetConfig+0x348>
 80042f4:	2302      	movs	r3, #2
 80042f6:	77fb      	strb	r3, [r7, #31]
 80042f8:	e00a      	b.n	8004310 <UART_SetConfig+0x348>
 80042fa:	2304      	movs	r3, #4
 80042fc:	77fb      	strb	r3, [r7, #31]
 80042fe:	e007      	b.n	8004310 <UART_SetConfig+0x348>
 8004300:	2308      	movs	r3, #8
 8004302:	77fb      	strb	r3, [r7, #31]
 8004304:	e004      	b.n	8004310 <UART_SetConfig+0x348>
 8004306:	2310      	movs	r3, #16
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e001      	b.n	8004310 <UART_SetConfig+0x348>
 800430c:	2310      	movs	r3, #16
 800430e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004318:	d15b      	bne.n	80043d2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800431a:	7ffb      	ldrb	r3, [r7, #31]
 800431c:	2b08      	cmp	r3, #8
 800431e:	d828      	bhi.n	8004372 <UART_SetConfig+0x3aa>
 8004320:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <UART_SetConfig+0x360>)
 8004322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004326:	bf00      	nop
 8004328:	0800434d 	.word	0x0800434d
 800432c:	08004355 	.word	0x08004355
 8004330:	0800435d 	.word	0x0800435d
 8004334:	08004373 	.word	0x08004373
 8004338:	08004363 	.word	0x08004363
 800433c:	08004373 	.word	0x08004373
 8004340:	08004373 	.word	0x08004373
 8004344:	08004373 	.word	0x08004373
 8004348:	0800436b 	.word	0x0800436b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800434c:	f7ff f914 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 8004350:	61b8      	str	r0, [r7, #24]
        break;
 8004352:	e013      	b.n	800437c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004354:	f7ff f924 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8004358:	61b8      	str	r0, [r7, #24]
        break;
 800435a:	e00f      	b.n	800437c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800435c:	4b4b      	ldr	r3, [pc, #300]	; (800448c <UART_SetConfig+0x4c4>)
 800435e:	61bb      	str	r3, [r7, #24]
        break;
 8004360:	e00c      	b.n	800437c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004362:	f7fe fff7 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8004366:	61b8      	str	r0, [r7, #24]
        break;
 8004368:	e008      	b.n	800437c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800436a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800436e:	61bb      	str	r3, [r7, #24]
        break;
 8004370:	e004      	b.n	800437c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	77bb      	strb	r3, [r7, #30]
        break;
 800437a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d074      	beq.n	800446c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	005a      	lsls	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	441a      	add	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	fbb2 f3f3 	udiv	r3, r2, r3
 8004396:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b0f      	cmp	r3, #15
 800439c:	d916      	bls.n	80043cc <UART_SetConfig+0x404>
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a4:	d212      	bcs.n	80043cc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	f023 030f 	bic.w	r3, r3, #15
 80043ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	89fb      	ldrh	r3, [r7, #14]
 80043be:	4313      	orrs	r3, r2
 80043c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	89fa      	ldrh	r2, [r7, #14]
 80043c8:	60da      	str	r2, [r3, #12]
 80043ca:	e04f      	b.n	800446c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	77bb      	strb	r3, [r7, #30]
 80043d0:	e04c      	b.n	800446c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043d2:	7ffb      	ldrb	r3, [r7, #31]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d828      	bhi.n	800442a <UART_SetConfig+0x462>
 80043d8:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <UART_SetConfig+0x418>)
 80043da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043de:	bf00      	nop
 80043e0:	08004405 	.word	0x08004405
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	08004415 	.word	0x08004415
 80043ec:	0800442b 	.word	0x0800442b
 80043f0:	0800441b 	.word	0x0800441b
 80043f4:	0800442b 	.word	0x0800442b
 80043f8:	0800442b 	.word	0x0800442b
 80043fc:	0800442b 	.word	0x0800442b
 8004400:	08004423 	.word	0x08004423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004404:	f7ff f8b8 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 8004408:	61b8      	str	r0, [r7, #24]
        break;
 800440a:	e013      	b.n	8004434 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800440c:	f7ff f8c8 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8004410:	61b8      	str	r0, [r7, #24]
        break;
 8004412:	e00f      	b.n	8004434 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004414:	4b1d      	ldr	r3, [pc, #116]	; (800448c <UART_SetConfig+0x4c4>)
 8004416:	61bb      	str	r3, [r7, #24]
        break;
 8004418:	e00c      	b.n	8004434 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800441a:	f7fe ff9b 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 800441e:	61b8      	str	r0, [r7, #24]
        break;
 8004420:	e008      	b.n	8004434 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004426:	61bb      	str	r3, [r7, #24]
        break;
 8004428:	e004      	b.n	8004434 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	77bb      	strb	r3, [r7, #30]
        break;
 8004432:	bf00      	nop
    }

    if (pclk != 0U)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d018      	beq.n	800446c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	085a      	lsrs	r2, r3, #1
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	441a      	add	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	2b0f      	cmp	r3, #15
 8004452:	d909      	bls.n	8004468 <UART_SetConfig+0x4a0>
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445a:	d205      	bcs.n	8004468 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	b29a      	uxth	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	60da      	str	r2, [r3, #12]
 8004466:	e001      	b.n	800446c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004478:	7fbb      	ldrb	r3, [r7, #30]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40007c00 	.word	0x40007c00
 8004488:	40023800 	.word	0x40023800
 800448c:	00f42400 	.word	0x00f42400

08004490 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00a      	beq.n	80044ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01a      	beq.n	80045a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800458e:	d10a      	bne.n	80045a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	605a      	str	r2, [r3, #4]
  }
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b098      	sub	sp, #96	; 0x60
 80045d8:	af02      	add	r7, sp, #8
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045e4:	f7fc fd74 	bl	80010d0 <HAL_GetTick>
 80045e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d12e      	bne.n	8004656 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004600:	2200      	movs	r2, #0
 8004602:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f88c 	bl	8004724 <UART_WaitOnFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d021      	beq.n	8004656 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004626:	653b      	str	r3, [r7, #80]	; 0x50
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004630:	647b      	str	r3, [r7, #68]	; 0x44
 8004632:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004638:	e841 2300 	strex	r3, r2, [r1]
 800463c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800463e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e6      	bne.n	8004612 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e062      	b.n	800471c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b04      	cmp	r3, #4
 8004662:	d149      	bne.n	80046f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800466c:	2200      	movs	r2, #0
 800466e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f856 	bl	8004724 <UART_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d03c      	beq.n	80046f8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	623b      	str	r3, [r7, #32]
   return(result);
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469c:	633b      	str	r3, [r7, #48]	; 0x30
 800469e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e6      	bne.n	800467e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3308      	adds	r3, #8
 80046b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	e853 3f00 	ldrex	r3, [r3]
 80046be:	60fb      	str	r3, [r7, #12]
   return(result);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0301 	bic.w	r3, r3, #1
 80046c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3308      	adds	r3, #8
 80046ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046d0:	61fa      	str	r2, [r7, #28]
 80046d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d4:	69b9      	ldr	r1, [r7, #24]
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	e841 2300 	strex	r3, r2, [r1]
 80046dc:	617b      	str	r3, [r7, #20]
   return(result);
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e5      	bne.n	80046b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e011      	b.n	800471c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3758      	adds	r7, #88	; 0x58
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	4613      	mov	r3, r2
 8004732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004734:	e04f      	b.n	80047d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800473c:	d04b      	beq.n	80047d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473e:	f7fc fcc7 	bl	80010d0 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	429a      	cmp	r2, r3
 800474c:	d302      	bcc.n	8004754 <UART_WaitOnFlagUntilTimeout+0x30>
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e04e      	b.n	80047f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	d037      	beq.n	80047d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b80      	cmp	r3, #128	; 0x80
 800476a:	d034      	beq.n	80047d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b40      	cmp	r3, #64	; 0x40
 8004770:	d031      	beq.n	80047d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b08      	cmp	r3, #8
 800477e:	d110      	bne.n	80047a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2208      	movs	r2, #8
 8004786:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f838 	bl	80047fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2208      	movs	r2, #8
 8004792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e029      	b.n	80047f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b0:	d111      	bne.n	80047d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f81e 	bl	80047fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e00f      	b.n	80047f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4013      	ands	r3, r2
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	bf0c      	ite	eq
 80047e6:	2301      	moveq	r3, #1
 80047e8:	2300      	movne	r3, #0
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d0a0      	beq.n	8004736 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047fe:	b480      	push	{r7}
 8004800:	b095      	sub	sp, #84	; 0x54
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480e:	e853 3f00 	ldrex	r3, [r3]
 8004812:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800481a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004824:	643b      	str	r3, [r7, #64]	; 0x40
 8004826:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800482a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800482c:	e841 2300 	strex	r3, r2, [r1]
 8004830:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e6      	bne.n	8004806 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3308      	adds	r3, #8
 800483e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	e853 3f00 	ldrex	r3, [r3]
 8004846:	61fb      	str	r3, [r7, #28]
   return(result);
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f023 0301 	bic.w	r3, r3, #1
 800484e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3308      	adds	r3, #8
 8004856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004858:	62fa      	str	r2, [r7, #44]	; 0x2c
 800485a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800485e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004860:	e841 2300 	strex	r3, r2, [r1]
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1e5      	bne.n	8004838 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004870:	2b01      	cmp	r3, #1
 8004872:	d118      	bne.n	80048a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	e853 3f00 	ldrex	r3, [r3]
 8004880:	60bb      	str	r3, [r7, #8]
   return(result);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f023 0310 	bic.w	r3, r3, #16
 8004888:	647b      	str	r3, [r7, #68]	; 0x44
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	6979      	ldr	r1, [r7, #20]
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	613b      	str	r3, [r7, #16]
   return(result);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e6      	bne.n	8004874 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80048ba:	bf00      	nop
 80048bc:	3754      	adds	r7, #84	; 0x54
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048c8:	b084      	sub	sp, #16
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	f107 001c 	add.w	r0, r7, #28
 80048d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048da:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d121      	bne.n	8004926 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	4b21      	ldr	r3, [pc, #132]	; (8004978 <USB_CoreInit+0xb0>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004906:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800490a:	2b01      	cmp	r3, #1
 800490c:	d105      	bne.n	800491a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fa92 	bl	8004e44 <USB_CoreReset>
 8004920:	4603      	mov	r3, r0
 8004922:	73fb      	strb	r3, [r7, #15]
 8004924:	e010      	b.n	8004948 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fa86 	bl	8004e44 <USB_CoreReset>
 8004938:	4603      	mov	r3, r0
 800493a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004940:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004948:	7fbb      	ldrb	r3, [r7, #30]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d10b      	bne.n	8004966 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f043 0206 	orr.w	r2, r3, #6
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f043 0220 	orr.w	r2, r3, #32
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004966:	7bfb      	ldrb	r3, [r7, #15]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004972:	b004      	add	sp, #16
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	ffbdffbf 	.word	0xffbdffbf

0800497c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f023 0201 	bic.w	r2, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	460b      	mov	r3, r1
 80049a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d115      	bne.n	80049ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049cc:	200a      	movs	r0, #10
 80049ce:	f7fc fb8b 	bl	80010e8 <HAL_Delay>
      ms += 10U;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	330a      	adds	r3, #10
 80049d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fa25 	bl	8004e28 <USB_GetMode>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d01e      	beq.n	8004a22 <USB_SetCurrentMode+0x84>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2bc7      	cmp	r3, #199	; 0xc7
 80049e8:	d9f0      	bls.n	80049cc <USB_SetCurrentMode+0x2e>
 80049ea:	e01a      	b.n	8004a22 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d115      	bne.n	8004a1e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049fe:	200a      	movs	r0, #10
 8004a00:	f7fc fb72 	bl	80010e8 <HAL_Delay>
      ms += 10U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	330a      	adds	r3, #10
 8004a08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fa0c 	bl	8004e28 <USB_GetMode>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <USB_SetCurrentMode+0x84>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2bc7      	cmp	r3, #199	; 0xc7
 8004a1a:	d9f0      	bls.n	80049fe <USB_SetCurrentMode+0x60>
 8004a1c:	e001      	b.n	8004a22 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e005      	b.n	8004a2e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2bc8      	cmp	r3, #200	; 0xc8
 8004a26:	d101      	bne.n	8004a2c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a38:	b084      	sub	sp, #16
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b086      	sub	sp, #24
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a52:	2300      	movs	r3, #0
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	e009      	b.n	8004a6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	3340      	adds	r3, #64	; 0x40
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	2200      	movs	r2, #0
 8004a64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b0e      	cmp	r3, #14
 8004a70:	d9f2      	bls.n	8004a58 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a72:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d11c      	bne.n	8004ab4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a88:	f043 0302 	orr.w	r3, r3, #2
 8004a8c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	e005      	b.n	8004ac0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	2300      	movs	r3, #0
 8004aca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004acc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d10d      	bne.n	8004af0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d104      	bne.n	8004ae6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004adc:	2100      	movs	r1, #0
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f968 	bl	8004db4 <USB_SetDevSpeed>
 8004ae4:	e008      	b.n	8004af8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f963 	bl	8004db4 <USB_SetDevSpeed>
 8004aee:	e003      	b.n	8004af8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004af0:	2103      	movs	r1, #3
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f95e 	bl	8004db4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004af8:	2110      	movs	r1, #16
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f8fa 	bl	8004cf4 <USB_FlushTxFifo>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f924 	bl	8004d58 <USB_FlushRxFifo>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b20:	461a      	mov	r2, r3
 8004b22:	2300      	movs	r3, #0
 8004b24:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	2300      	movs	r3, #0
 8004b30:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b38:	461a      	mov	r2, r3
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b3e:	2300      	movs	r3, #0
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	e043      	b.n	8004bcc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b5a:	d118      	bne.n	8004b8e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6e:	461a      	mov	r2, r3
 8004b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	e013      	b.n	8004ba0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b84:	461a      	mov	r2, r3
 8004b86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	e008      	b.n	8004ba0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bac:	461a      	mov	r2, r3
 8004bae:	2300      	movs	r3, #0
 8004bb0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bc4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d3b5      	bcc.n	8004b44 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	e043      	b.n	8004c66 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bf4:	d118      	bne.n	8004c28 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	e013      	b.n	8004c3a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	e008      	b.n	8004c3a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	461a      	mov	r2, r3
 8004c36:	2300      	movs	r3, #0
 8004c38:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c46:	461a      	mov	r2, r3
 8004c48:	2300      	movs	r3, #0
 8004c4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	3301      	adds	r3, #1
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d3b5      	bcc.n	8004bde <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c84:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c92:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	f043 0210 	orr.w	r2, r3, #16
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699a      	ldr	r2, [r3, #24]
 8004cac:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <USB_DevInit+0x2b4>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004cb4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	f043 0208 	orr.w	r2, r3, #8
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cc8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d105      	bne.n	8004cdc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699a      	ldr	r2, [r3, #24]
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <USB_DevInit+0x2b8>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ce8:	b004      	add	sp, #16
 8004cea:	4770      	bx	lr
 8004cec:	803c3800 	.word	0x803c3800
 8004cf0:	40000004 	.word	0x40000004

08004cf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3301      	adds	r3, #1
 8004d06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d0e:	d901      	bls.n	8004d14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e01b      	b.n	8004d4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	daf2      	bge.n	8004d02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	019b      	lsls	r3, r3, #6
 8004d24:	f043 0220 	orr.w	r2, r3, #32
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d38:	d901      	bls.n	8004d3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e006      	b.n	8004d4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d0f0      	beq.n	8004d2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3301      	adds	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d70:	d901      	bls.n	8004d76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e018      	b.n	8004da8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	daf2      	bge.n	8004d64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2210      	movs	r2, #16
 8004d86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d94:	d901      	bls.n	8004d9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e006      	b.n	8004da8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b10      	cmp	r3, #16
 8004da4:	d0f0      	beq.n	8004d88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	68f9      	ldr	r1, [r7, #12]
 8004dd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b085      	sub	sp, #20
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e00:	f023 0303 	bic.w	r3, r3, #3
 8004e04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e14:	f043 0302 	orr.w	r3, r3, #2
 8004e18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	f003 0301 	and.w	r3, r3, #1
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3301      	adds	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e5c:	d901      	bls.n	8004e62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e01b      	b.n	8004e9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	daf2      	bge.n	8004e50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f043 0201 	orr.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e86:	d901      	bls.n	8004e8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e006      	b.n	8004e9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d0f0      	beq.n	8004e7a <USB_CoreReset+0x36>

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004eae:	4b8d      	ldr	r3, [pc, #564]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004eb0:	22c0      	movs	r2, #192	; 0xc0
 8004eb2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004eb4:	4b8b      	ldr	r3, [pc, #556]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004eb6:	22a8      	movs	r2, #168	; 0xa8
 8004eb8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004eba:	4b8a      	ldr	r3, [pc, #552]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 3;
 8004ec0:	4b88      	ldr	r3, [pc, #544]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004ec2:	2203      	movs	r2, #3
 8004ec4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 0;
 8004ec6:	4b88      	ldr	r3, [pc, #544]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 0;
 8004ecc:	4b86      	ldr	r3, [pc, #536]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8004ed2:	4b85      	ldr	r3, [pc, #532]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004ed8:	4b83      	ldr	r3, [pc, #524]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8004ede:	4b83      	ldr	r3, [pc, #524]	; (80050ec <MX_LWIP_Init+0x244>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004ee4:	4b81      	ldr	r3, [pc, #516]	; (80050ec <MX_LWIP_Init+0x244>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004eea:	4b80      	ldr	r3, [pc, #512]	; (80050ec <MX_LWIP_Init+0x244>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8004ef0:	4b7e      	ldr	r3, [pc, #504]	; (80050ec <MX_LWIP_Init+0x244>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004ef6:	f000 fd3d 	bl	8005974 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004efa:	4b7a      	ldr	r3, [pc, #488]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	061a      	lsls	r2, r3, #24
 8004f00:	4b78      	ldr	r3, [pc, #480]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004f02:	785b      	ldrb	r3, [r3, #1]
 8004f04:	041b      	lsls	r3, r3, #16
 8004f06:	431a      	orrs	r2, r3
 8004f08:	4b76      	ldr	r3, [pc, #472]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004f0a:	789b      	ldrb	r3, [r3, #2]
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	4a74      	ldr	r2, [pc, #464]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004f12:	78d2      	ldrb	r2, [r2, #3]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	061a      	lsls	r2, r3, #24
 8004f18:	4b72      	ldr	r3, [pc, #456]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	0619      	lsls	r1, r3, #24
 8004f1e:	4b71      	ldr	r3, [pc, #452]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004f20:	785b      	ldrb	r3, [r3, #1]
 8004f22:	041b      	lsls	r3, r3, #16
 8004f24:	4319      	orrs	r1, r3
 8004f26:	4b6f      	ldr	r3, [pc, #444]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004f28:	789b      	ldrb	r3, [r3, #2]
 8004f2a:	021b      	lsls	r3, r3, #8
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	496d      	ldr	r1, [pc, #436]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004f30:	78c9      	ldrb	r1, [r1, #3]
 8004f32:	430b      	orrs	r3, r1
 8004f34:	021b      	lsls	r3, r3, #8
 8004f36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	4b69      	ldr	r3, [pc, #420]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	0619      	lsls	r1, r3, #24
 8004f42:	4b68      	ldr	r3, [pc, #416]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004f44:	785b      	ldrb	r3, [r3, #1]
 8004f46:	041b      	lsls	r3, r3, #16
 8004f48:	4319      	orrs	r1, r3
 8004f4a:	4b66      	ldr	r3, [pc, #408]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004f4c:	789b      	ldrb	r3, [r3, #2]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	430b      	orrs	r3, r1
 8004f52:	4964      	ldr	r1, [pc, #400]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004f54:	78c9      	ldrb	r1, [r1, #3]
 8004f56:	430b      	orrs	r3, r1
 8004f58:	0a1b      	lsrs	r3, r3, #8
 8004f5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	4b60      	ldr	r3, [pc, #384]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	0619      	lsls	r1, r3, #24
 8004f66:	4b5f      	ldr	r3, [pc, #380]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004f68:	785b      	ldrb	r3, [r3, #1]
 8004f6a:	041b      	lsls	r3, r3, #16
 8004f6c:	4319      	orrs	r1, r3
 8004f6e:	4b5d      	ldr	r3, [pc, #372]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004f70:	789b      	ldrb	r3, [r3, #2]
 8004f72:	021b      	lsls	r3, r3, #8
 8004f74:	430b      	orrs	r3, r1
 8004f76:	495b      	ldr	r1, [pc, #364]	; (80050e4 <MX_LWIP_Init+0x23c>)
 8004f78:	78c9      	ldrb	r1, [r1, #3]
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	0e1b      	lsrs	r3, r3, #24
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	4a5b      	ldr	r2, [pc, #364]	; (80050f0 <MX_LWIP_Init+0x248>)
 8004f82:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004f84:	4b58      	ldr	r3, [pc, #352]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	061a      	lsls	r2, r3, #24
 8004f8a:	4b57      	ldr	r3, [pc, #348]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004f8c:	785b      	ldrb	r3, [r3, #1]
 8004f8e:	041b      	lsls	r3, r3, #16
 8004f90:	431a      	orrs	r2, r3
 8004f92:	4b55      	ldr	r3, [pc, #340]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004f94:	789b      	ldrb	r3, [r3, #2]
 8004f96:	021b      	lsls	r3, r3, #8
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	4a53      	ldr	r2, [pc, #332]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004f9c:	78d2      	ldrb	r2, [r2, #3]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	061a      	lsls	r2, r3, #24
 8004fa2:	4b51      	ldr	r3, [pc, #324]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	0619      	lsls	r1, r3, #24
 8004fa8:	4b4f      	ldr	r3, [pc, #316]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004faa:	785b      	ldrb	r3, [r3, #1]
 8004fac:	041b      	lsls	r3, r3, #16
 8004fae:	4319      	orrs	r1, r3
 8004fb0:	4b4d      	ldr	r3, [pc, #308]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004fb2:	789b      	ldrb	r3, [r3, #2]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	430b      	orrs	r3, r1
 8004fb8:	494b      	ldr	r1, [pc, #300]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004fba:	78c9      	ldrb	r1, [r1, #3]
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	4b48      	ldr	r3, [pc, #288]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	0619      	lsls	r1, r3, #24
 8004fcc:	4b46      	ldr	r3, [pc, #280]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004fce:	785b      	ldrb	r3, [r3, #1]
 8004fd0:	041b      	lsls	r3, r3, #16
 8004fd2:	4319      	orrs	r1, r3
 8004fd4:	4b44      	ldr	r3, [pc, #272]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004fd6:	789b      	ldrb	r3, [r3, #2]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	4942      	ldr	r1, [pc, #264]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004fde:	78c9      	ldrb	r1, [r1, #3]
 8004fe0:	430b      	orrs	r3, r1
 8004fe2:	0a1b      	lsrs	r3, r3, #8
 8004fe4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	4b3f      	ldr	r3, [pc, #252]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	0619      	lsls	r1, r3, #24
 8004ff0:	4b3d      	ldr	r3, [pc, #244]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004ff2:	785b      	ldrb	r3, [r3, #1]
 8004ff4:	041b      	lsls	r3, r3, #16
 8004ff6:	4319      	orrs	r1, r3
 8004ff8:	4b3b      	ldr	r3, [pc, #236]	; (80050e8 <MX_LWIP_Init+0x240>)
 8004ffa:	789b      	ldrb	r3, [r3, #2]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	430b      	orrs	r3, r1
 8005000:	4939      	ldr	r1, [pc, #228]	; (80050e8 <MX_LWIP_Init+0x240>)
 8005002:	78c9      	ldrb	r1, [r1, #3]
 8005004:	430b      	orrs	r3, r1
 8005006:	0e1b      	lsrs	r3, r3, #24
 8005008:	4313      	orrs	r3, r2
 800500a:	4a3a      	ldr	r2, [pc, #232]	; (80050f4 <MX_LWIP_Init+0x24c>)
 800500c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800500e:	4b37      	ldr	r3, [pc, #220]	; (80050ec <MX_LWIP_Init+0x244>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	061a      	lsls	r2, r3, #24
 8005014:	4b35      	ldr	r3, [pc, #212]	; (80050ec <MX_LWIP_Init+0x244>)
 8005016:	785b      	ldrb	r3, [r3, #1]
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	431a      	orrs	r2, r3
 800501c:	4b33      	ldr	r3, [pc, #204]	; (80050ec <MX_LWIP_Init+0x244>)
 800501e:	789b      	ldrb	r3, [r3, #2]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	4313      	orrs	r3, r2
 8005024:	4a31      	ldr	r2, [pc, #196]	; (80050ec <MX_LWIP_Init+0x244>)
 8005026:	78d2      	ldrb	r2, [r2, #3]
 8005028:	4313      	orrs	r3, r2
 800502a:	061a      	lsls	r2, r3, #24
 800502c:	4b2f      	ldr	r3, [pc, #188]	; (80050ec <MX_LWIP_Init+0x244>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	0619      	lsls	r1, r3, #24
 8005032:	4b2e      	ldr	r3, [pc, #184]	; (80050ec <MX_LWIP_Init+0x244>)
 8005034:	785b      	ldrb	r3, [r3, #1]
 8005036:	041b      	lsls	r3, r3, #16
 8005038:	4319      	orrs	r1, r3
 800503a:	4b2c      	ldr	r3, [pc, #176]	; (80050ec <MX_LWIP_Init+0x244>)
 800503c:	789b      	ldrb	r3, [r3, #2]
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	430b      	orrs	r3, r1
 8005042:	492a      	ldr	r1, [pc, #168]	; (80050ec <MX_LWIP_Init+0x244>)
 8005044:	78c9      	ldrb	r1, [r1, #3]
 8005046:	430b      	orrs	r3, r1
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800504e:	431a      	orrs	r2, r3
 8005050:	4b26      	ldr	r3, [pc, #152]	; (80050ec <MX_LWIP_Init+0x244>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	0619      	lsls	r1, r3, #24
 8005056:	4b25      	ldr	r3, [pc, #148]	; (80050ec <MX_LWIP_Init+0x244>)
 8005058:	785b      	ldrb	r3, [r3, #1]
 800505a:	041b      	lsls	r3, r3, #16
 800505c:	4319      	orrs	r1, r3
 800505e:	4b23      	ldr	r3, [pc, #140]	; (80050ec <MX_LWIP_Init+0x244>)
 8005060:	789b      	ldrb	r3, [r3, #2]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	430b      	orrs	r3, r1
 8005066:	4921      	ldr	r1, [pc, #132]	; (80050ec <MX_LWIP_Init+0x244>)
 8005068:	78c9      	ldrb	r1, [r1, #3]
 800506a:	430b      	orrs	r3, r1
 800506c:	0a1b      	lsrs	r3, r3, #8
 800506e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005072:	431a      	orrs	r2, r3
 8005074:	4b1d      	ldr	r3, [pc, #116]	; (80050ec <MX_LWIP_Init+0x244>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	0619      	lsls	r1, r3, #24
 800507a:	4b1c      	ldr	r3, [pc, #112]	; (80050ec <MX_LWIP_Init+0x244>)
 800507c:	785b      	ldrb	r3, [r3, #1]
 800507e:	041b      	lsls	r3, r3, #16
 8005080:	4319      	orrs	r1, r3
 8005082:	4b1a      	ldr	r3, [pc, #104]	; (80050ec <MX_LWIP_Init+0x244>)
 8005084:	789b      	ldrb	r3, [r3, #2]
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	430b      	orrs	r3, r1
 800508a:	4918      	ldr	r1, [pc, #96]	; (80050ec <MX_LWIP_Init+0x244>)
 800508c:	78c9      	ldrb	r1, [r1, #3]
 800508e:	430b      	orrs	r3, r1
 8005090:	0e1b      	lsrs	r3, r3, #24
 8005092:	4313      	orrs	r3, r2
 8005094:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <MX_LWIP_Init+0x250>)
 8005096:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005098:	4b18      	ldr	r3, [pc, #96]	; (80050fc <MX_LWIP_Init+0x254>)
 800509a:	9302      	str	r3, [sp, #8]
 800509c:	4b18      	ldr	r3, [pc, #96]	; (8005100 <MX_LWIP_Init+0x258>)
 800509e:	9301      	str	r3, [sp, #4]
 80050a0:	2300      	movs	r3, #0
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <MX_LWIP_Init+0x250>)
 80050a6:	4a13      	ldr	r2, [pc, #76]	; (80050f4 <MX_LWIP_Init+0x24c>)
 80050a8:	4911      	ldr	r1, [pc, #68]	; (80050f0 <MX_LWIP_Init+0x248>)
 80050aa:	4816      	ldr	r0, [pc, #88]	; (8005104 <MX_LWIP_Init+0x25c>)
 80050ac:	f001 f94e 	bl	800634c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80050b0:	4814      	ldr	r0, [pc, #80]	; (8005104 <MX_LWIP_Init+0x25c>)
 80050b2:	f001 fafd 	bl	80066b0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80050b6:	4b13      	ldr	r3, [pc, #76]	; (8005104 <MX_LWIP_Init+0x25c>)
 80050b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050bc:	089b      	lsrs	r3, r3, #2
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80050c8:	480e      	ldr	r0, [pc, #56]	; (8005104 <MX_LWIP_Init+0x25c>)
 80050ca:	f001 fb01 	bl	80066d0 <netif_set_up>
 80050ce:	e002      	b.n	80050d6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80050d0:	480c      	ldr	r0, [pc, #48]	; (8005104 <MX_LWIP_Init+0x25c>)
 80050d2:	f001 fb69 	bl	80067a8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80050d6:	490c      	ldr	r1, [pc, #48]	; (8005108 <MX_LWIP_Init+0x260>)
 80050d8:	480a      	ldr	r0, [pc, #40]	; (8005104 <MX_LWIP_Init+0x25c>)
 80050da:	f001 fbfb 	bl	80068d4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80050de:	bf00      	nop
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	200007a0 	.word	0x200007a0
 80050e8:	200007a4 	.word	0x200007a4
 80050ec:	200007a8 	.word	0x200007a8
 80050f0:	20000794 	.word	0x20000794
 80050f4:	20000798 	.word	0x20000798
 80050f8:	2000079c 	.word	0x2000079c
 80050fc:	0800f8b1 	.word	0x0800f8b1
 8005100:	08005471 	.word	0x08005471
 8005104:	20000760 	.word	0x20000760
 8005108:	0800515d 	.word	0x0800515d

0800510c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005114:	f7fb ffdc 	bl	80010d0 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	4b08      	ldr	r3, [pc, #32]	; (800513c <Ethernet_Link_Periodic_Handle+0x30>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b63      	cmp	r3, #99	; 0x63
 8005122:	d907      	bls.n	8005134 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005124:	f7fb ffd4 	bl	80010d0 <HAL_GetTick>
 8005128:	4603      	mov	r3, r0
 800512a:	4a04      	ldr	r2, [pc, #16]	; (800513c <Ethernet_Link_Periodic_Handle+0x30>)
 800512c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 faf4 	bl	800571c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005134:	bf00      	nop
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	2000075c 	.word	0x2000075c

08005140 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005144:	4804      	ldr	r0, [pc, #16]	; (8005158 <MX_LWIP_Process+0x18>)
 8005146:	f000 f973 	bl	8005430 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800514a:	f007 fc45 	bl	800c9d8 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800514e:	4802      	ldr	r0, [pc, #8]	; (8005158 <MX_LWIP_Process+0x18>)
 8005150:	f7ff ffdc 	bl	800510c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005154:	bf00      	nop
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000760 	.word	0x20000760

0800515c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <SCB_InvalidateDCache_by_Addr>:
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005182:	2320      	movs	r3, #32
 8005184:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005186:	f3bf 8f4f 	dsb	sy
}
 800518a:	bf00      	nop
    while (op_size > 0) {
 800518c:	e00b      	b.n	80051a6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800518e:	4a0d      	ldr	r2, [pc, #52]	; (80051c4 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4413      	add	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	dcf0      	bgt.n	800518e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80051ac:	f3bf 8f4f 	dsb	sy
}
 80051b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80051b2:	f3bf 8f6f 	isb	sy
}
 80051b6:	bf00      	nop
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	e000ed00 	.word	0xe000ed00

080051c8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80051d4:	4b40      	ldr	r3, [pc, #256]	; (80052d8 <low_level_init+0x110>)
 80051d6:	4a41      	ldr	r2, [pc, #260]	; (80052dc <low_level_init+0x114>)
 80051d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80051da:	2300      	movs	r3, #0
 80051dc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80051de:	2380      	movs	r3, #128	; 0x80
 80051e0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80051e2:	23e1      	movs	r3, #225	; 0xe1
 80051e4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80051e6:	2300      	movs	r3, #0
 80051e8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80051ea:	2300      	movs	r3, #0
 80051ec:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80051ee:	2300      	movs	r3, #0
 80051f0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80051f2:	4a39      	ldr	r2, [pc, #228]	; (80052d8 <low_level_init+0x110>)
 80051f4:	f107 0308 	add.w	r3, r7, #8
 80051f8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80051fa:	4b37      	ldr	r3, [pc, #220]	; (80052d8 <low_level_init+0x110>)
 80051fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005200:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005202:	4b35      	ldr	r3, [pc, #212]	; (80052d8 <low_level_init+0x110>)
 8005204:	4a36      	ldr	r2, [pc, #216]	; (80052e0 <low_level_init+0x118>)
 8005206:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005208:	4b33      	ldr	r3, [pc, #204]	; (80052d8 <low_level_init+0x110>)
 800520a:	4a36      	ldr	r2, [pc, #216]	; (80052e4 <low_level_init+0x11c>)
 800520c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800520e:	4b32      	ldr	r3, [pc, #200]	; (80052d8 <low_level_init+0x110>)
 8005210:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005214:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005216:	4830      	ldr	r0, [pc, #192]	; (80052d8 <low_level_init+0x110>)
 8005218:	f7fc f870 	bl	80012fc <HAL_ETH_Init>
 800521c:	4603      	mov	r3, r0
 800521e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005220:	2238      	movs	r2, #56	; 0x38
 8005222:	2100      	movs	r1, #0
 8005224:	4830      	ldr	r0, [pc, #192]	; (80052e8 <low_level_init+0x120>)
 8005226:	f00a fc5b 	bl	800fae0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800522a:	4b2f      	ldr	r3, [pc, #188]	; (80052e8 <low_level_init+0x120>)
 800522c:	2221      	movs	r2, #33	; 0x21
 800522e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005230:	4b2d      	ldr	r3, [pc, #180]	; (80052e8 <low_level_init+0x120>)
 8005232:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005236:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005238:	4b2b      	ldr	r3, [pc, #172]	; (80052e8 <low_level_init+0x120>)
 800523a:	2200      	movs	r2, #0
 800523c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800523e:	482b      	ldr	r0, [pc, #172]	; (80052ec <low_level_init+0x124>)
 8005240:	f000 ff4c 	bl	80060dc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2206      	movs	r2, #6
 8005248:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800524c:	4b22      	ldr	r3, [pc, #136]	; (80052d8 <low_level_init+0x110>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	781a      	ldrb	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005258:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <low_level_init+0x110>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	785a      	ldrb	r2, [r3, #1]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005264:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <low_level_init+0x110>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	789a      	ldrb	r2, [r3, #2]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005270:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <low_level_init+0x110>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	78da      	ldrb	r2, [r3, #3]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800527c:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <low_level_init+0x110>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	791a      	ldrb	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005288:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <low_level_init+0x110>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	795a      	ldrb	r2, [r3, #5]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800529a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80052a2:	f043 030a 	orr.w	r3, r3, #10
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80052ae:	4910      	ldr	r1, [pc, #64]	; (80052f0 <low_level_init+0x128>)
 80052b0:	4810      	ldr	r0, [pc, #64]	; (80052f4 <low_level_init+0x12c>)
 80052b2:	f7fb fdb6 	bl	8000e22 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80052b6:	480f      	ldr	r0, [pc, #60]	; (80052f4 <low_level_init+0x12c>)
 80052b8:	f7fb fde5 	bl	8000e86 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d103      	bne.n	80052ca <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fa2a 	bl	800571c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80052c8:	e001      	b.n	80052ce <low_level_init+0x106>
    Error_Handler();
 80052ca:	f7fb fb2b 	bl	8000924 <Error_Handler>
}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20005138 	.word	0x20005138
 80052dc:	40028000 	.word	0x40028000
 80052e0:	20000130 	.word	0x20000130
 80052e4:	20000090 	.word	0x20000090
 80052e8:	200051e8 	.word	0x200051e8
 80052ec:	08013718 	.word	0x08013718
 80052f0:	2000000c 	.word	0x2000000c
 80052f4:	20005220 	.word	0x20005220

080052f8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b092      	sub	sp, #72	; 0x48
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005302:	2300      	movs	r3, #0
 8005304:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005306:	2300      	movs	r3, #0
 8005308:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005310:	f107 030c 	add.w	r3, r7, #12
 8005314:	2230      	movs	r2, #48	; 0x30
 8005316:	2100      	movs	r1, #0
 8005318:	4618      	mov	r0, r3
 800531a:	f00a fbe1 	bl	800fae0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800531e:	f107 030c 	add.w	r3, r7, #12
 8005322:	2230      	movs	r2, #48	; 0x30
 8005324:	2100      	movs	r1, #0
 8005326:	4618      	mov	r0, r3
 8005328:	f00a fbda 	bl	800fae0 <memset>

  for(q = p; q != NULL; q = q->next)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	643b      	str	r3, [r7, #64]	; 0x40
 8005330:	e045      	b.n	80053be <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005334:	2b03      	cmp	r3, #3
 8005336:	d902      	bls.n	800533e <low_level_output+0x46>
      return ERR_IF;
 8005338:	f06f 030b 	mvn.w	r3, #11
 800533c:	e055      	b.n	80053ea <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800533e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005340:	6859      	ldr	r1, [r3, #4]
 8005342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005344:	4613      	mov	r3, r2
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	3348      	adds	r3, #72	; 0x48
 800534e:	443b      	add	r3, r7
 8005350:	3b3c      	subs	r3, #60	; 0x3c
 8005352:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005356:	895b      	ldrh	r3, [r3, #10]
 8005358:	4619      	mov	r1, r3
 800535a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800535c:	4613      	mov	r3, r2
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	3348      	adds	r3, #72	; 0x48
 8005366:	443b      	add	r3, r7
 8005368:	3b38      	subs	r3, #56	; 0x38
 800536a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800536c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800536e:	2b00      	cmp	r3, #0
 8005370:	d011      	beq.n	8005396 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005374:	1e5a      	subs	r2, r3, #1
 8005376:	f107 000c 	add.w	r0, r7, #12
 800537a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800537c:	460b      	mov	r3, r1
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	440b      	add	r3, r1
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	18c1      	adds	r1, r0, r3
 8005386:	4613      	mov	r3, r2
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	3348      	adds	r3, #72	; 0x48
 8005390:	443b      	add	r3, r7
 8005392:	3b34      	subs	r3, #52	; 0x34
 8005394:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d109      	bne.n	80053b2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800539e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053a0:	4613      	mov	r3, r2
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	3348      	adds	r3, #72	; 0x48
 80053aa:	443b      	add	r3, r7
 80053ac:	3b34      	subs	r3, #52	; 0x34
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
    }

    i++;
 80053b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b4:	3301      	adds	r3, #1
 80053b6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80053b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	643b      	str	r3, [r7, #64]	; 0x40
 80053be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1b6      	bne.n	8005332 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	891b      	ldrh	r3, [r3, #8]
 80053c8:	461a      	mov	r2, r3
 80053ca:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <low_level_output+0xfc>)
 80053cc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80053ce:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <low_level_output+0xfc>)
 80053d0:	f107 030c 	add.w	r3, r7, #12
 80053d4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80053d6:	4a07      	ldr	r2, [pc, #28]	; (80053f4 <low_level_output+0xfc>)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80053dc:	2214      	movs	r2, #20
 80053de:	4905      	ldr	r1, [pc, #20]	; (80053f4 <low_level_output+0xfc>)
 80053e0:	4805      	ldr	r0, [pc, #20]	; (80053f8 <low_level_output+0x100>)
 80053e2:	f7fc f8dd 	bl	80015a0 <HAL_ETH_Transmit>

  return errval;
 80053e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3748      	adds	r7, #72	; 0x48
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	200051e8 	.word	0x200051e8
 80053f8:	20005138 	.word	0x20005138

080053fc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005408:	4b07      	ldr	r3, [pc, #28]	; (8005428 <low_level_input+0x2c>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d105      	bne.n	800541c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005410:	f107 030c 	add.w	r3, r7, #12
 8005414:	4619      	mov	r1, r3
 8005416:	4805      	ldr	r0, [pc, #20]	; (800542c <low_level_input+0x30>)
 8005418:	f7fc f956 	bl	80016c8 <HAL_ETH_ReadData>
  }

  return p;
 800541c:	68fb      	ldr	r3, [r7, #12]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20005134 	.word	0x20005134
 800542c:	20005138 	.word	0x20005138

08005430 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7ff ffdd 	bl	80053fc <low_level_input>
 8005442:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	4798      	blx	r3
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f001 fdba 	bl	8006fd4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1ea      	bne.n	800543c <ethernetif_input+0xc>
}
 8005466:	bf00      	nop
 8005468:	bf00      	nop
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d106      	bne.n	800548c <ethernetif_init+0x1c>
 800547e:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <ethernetif_init+0x48>)
 8005480:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 8005484:	490d      	ldr	r1, [pc, #52]	; (80054bc <ethernetif_init+0x4c>)
 8005486:	480e      	ldr	r0, [pc, #56]	; (80054c0 <ethernetif_init+0x50>)
 8005488:	f00a fb32 	bl	800faf0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2273      	movs	r2, #115	; 0x73
 8005490:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2274      	movs	r2, #116	; 0x74
 8005498:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a09      	ldr	r2, [pc, #36]	; (80054c4 <ethernetif_init+0x54>)
 80054a0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a08      	ldr	r2, [pc, #32]	; (80054c8 <ethernetif_init+0x58>)
 80054a6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff fe8d 	bl	80051c8 <low_level_init>

  return ERR_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	08010d20 	.word	0x08010d20
 80054bc:	08010d3c 	.word	0x08010d3c
 80054c0:	08010d4c 	.word	0x08010d4c
 80054c4:	0800dc49 	.word	0x0800dc49
 80054c8:	080052f9 	.word	0x080052f9

080054cc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80054d8:	68f9      	ldr	r1, [r7, #12]
 80054da:	4807      	ldr	r0, [pc, #28]	; (80054f8 <pbuf_free_custom+0x2c>)
 80054dc:	f000 fee0 	bl	80062a0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <pbuf_free_custom+0x30>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d102      	bne.n	80054ee <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80054e8:	4b04      	ldr	r3, [pc, #16]	; (80054fc <pbuf_free_custom+0x30>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
  }
}
 80054ee:	bf00      	nop
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	08013718 	.word	0x08013718
 80054fc:	20005134 	.word	0x20005134

08005500 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005504:	f7fb fde4 	bl	80010d0 <HAL_GetTick>
 8005508:	4603      	mov	r3, r0
}
 800550a:	4618      	mov	r0, r3
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08e      	sub	sp, #56	; 0x38
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	605a      	str	r2, [r3, #4]
 8005522:	609a      	str	r2, [r3, #8]
 8005524:	60da      	str	r2, [r3, #12]
 8005526:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a4e      	ldr	r2, [pc, #312]	; (8005668 <HAL_ETH_MspInit+0x158>)
 800552e:	4293      	cmp	r3, r2
 8005530:	f040 8096 	bne.w	8005660 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005534:	4b4d      	ldr	r3, [pc, #308]	; (800566c <HAL_ETH_MspInit+0x15c>)
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	4a4c      	ldr	r2, [pc, #304]	; (800566c <HAL_ETH_MspInit+0x15c>)
 800553a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800553e:	6313      	str	r3, [r2, #48]	; 0x30
 8005540:	4b4a      	ldr	r3, [pc, #296]	; (800566c <HAL_ETH_MspInit+0x15c>)
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005548:	623b      	str	r3, [r7, #32]
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	4b47      	ldr	r3, [pc, #284]	; (800566c <HAL_ETH_MspInit+0x15c>)
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	4a46      	ldr	r2, [pc, #280]	; (800566c <HAL_ETH_MspInit+0x15c>)
 8005552:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005556:	6313      	str	r3, [r2, #48]	; 0x30
 8005558:	4b44      	ldr	r3, [pc, #272]	; (800566c <HAL_ETH_MspInit+0x15c>)
 800555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005560:	61fb      	str	r3, [r7, #28]
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	4b41      	ldr	r3, [pc, #260]	; (800566c <HAL_ETH_MspInit+0x15c>)
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	4a40      	ldr	r2, [pc, #256]	; (800566c <HAL_ETH_MspInit+0x15c>)
 800556a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800556e:	6313      	str	r3, [r2, #48]	; 0x30
 8005570:	4b3e      	ldr	r3, [pc, #248]	; (800566c <HAL_ETH_MspInit+0x15c>)
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800557c:	4b3b      	ldr	r3, [pc, #236]	; (800566c <HAL_ETH_MspInit+0x15c>)
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	4a3a      	ldr	r2, [pc, #232]	; (800566c <HAL_ETH_MspInit+0x15c>)
 8005582:	f043 0304 	orr.w	r3, r3, #4
 8005586:	6313      	str	r3, [r2, #48]	; 0x30
 8005588:	4b38      	ldr	r3, [pc, #224]	; (800566c <HAL_ETH_MspInit+0x15c>)
 800558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005594:	4b35      	ldr	r3, [pc, #212]	; (800566c <HAL_ETH_MspInit+0x15c>)
 8005596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005598:	4a34      	ldr	r2, [pc, #208]	; (800566c <HAL_ETH_MspInit+0x15c>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	6313      	str	r3, [r2, #48]	; 0x30
 80055a0:	4b32      	ldr	r3, [pc, #200]	; (800566c <HAL_ETH_MspInit+0x15c>)
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055ac:	4b2f      	ldr	r3, [pc, #188]	; (800566c <HAL_ETH_MspInit+0x15c>)
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	4a2e      	ldr	r2, [pc, #184]	; (800566c <HAL_ETH_MspInit+0x15c>)
 80055b2:	f043 0302 	orr.w	r3, r3, #2
 80055b6:	6313      	str	r3, [r2, #48]	; 0x30
 80055b8:	4b2c      	ldr	r3, [pc, #176]	; (800566c <HAL_ETH_MspInit+0x15c>)
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80055c4:	4b29      	ldr	r3, [pc, #164]	; (800566c <HAL_ETH_MspInit+0x15c>)
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	4a28      	ldr	r2, [pc, #160]	; (800566c <HAL_ETH_MspInit+0x15c>)
 80055ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ce:	6313      	str	r3, [r2, #48]	; 0x30
 80055d0:	4b26      	ldr	r3, [pc, #152]	; (800566c <HAL_ETH_MspInit+0x15c>)
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d8:	60bb      	str	r3, [r7, #8]
 80055da:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80055dc:	2332      	movs	r3, #50	; 0x32
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e0:	2302      	movs	r3, #2
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055e8:	2303      	movs	r3, #3
 80055ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80055ec:	230b      	movs	r3, #11
 80055ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055f4:	4619      	mov	r1, r3
 80055f6:	481e      	ldr	r0, [pc, #120]	; (8005670 <HAL_ETH_MspInit+0x160>)
 80055f8:	f7fc ffb2 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80055fc:	2386      	movs	r3, #134	; 0x86
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005600:	2302      	movs	r3, #2
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005604:	2300      	movs	r3, #0
 8005606:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005608:	2303      	movs	r3, #3
 800560a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800560c:	230b      	movs	r3, #11
 800560e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005614:	4619      	mov	r1, r3
 8005616:	4817      	ldr	r0, [pc, #92]	; (8005674 <HAL_ETH_MspInit+0x164>)
 8005618:	f7fc ffa2 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800561c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005622:	2302      	movs	r3, #2
 8005624:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005626:	2300      	movs	r3, #0
 8005628:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800562a:	2303      	movs	r3, #3
 800562c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800562e:	230b      	movs	r3, #11
 8005630:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005636:	4619      	mov	r1, r3
 8005638:	480f      	ldr	r0, [pc, #60]	; (8005678 <HAL_ETH_MspInit+0x168>)
 800563a:	f7fc ff91 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800563e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005644:	2302      	movs	r3, #2
 8005646:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005648:	2300      	movs	r3, #0
 800564a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800564c:	2303      	movs	r3, #3
 800564e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005650:	230b      	movs	r3, #11
 8005652:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005658:	4619      	mov	r1, r3
 800565a:	4808      	ldr	r0, [pc, #32]	; (800567c <HAL_ETH_MspInit+0x16c>)
 800565c:	f7fc ff80 	bl	8002560 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005660:	bf00      	nop
 8005662:	3738      	adds	r7, #56	; 0x38
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40028000 	.word	0x40028000
 800566c:	40023800 	.word	0x40023800
 8005670:	40020800 	.word	0x40020800
 8005674:	40020000 	.word	0x40020000
 8005678:	40020400 	.word	0x40020400
 800567c:	40021800 	.word	0x40021800

08005680 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005684:	4802      	ldr	r0, [pc, #8]	; (8005690 <ETH_PHY_IO_Init+0x10>)
 8005686:	f7fc fb09 	bl	8001c9c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	bd80      	pop	{r7, pc}
 8005690:	20005138 	.word	0x20005138

08005694 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  return 0;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	68f9      	ldr	r1, [r7, #12]
 80056b6:	4807      	ldr	r0, [pc, #28]	; (80056d4 <ETH_PHY_IO_ReadReg+0x30>)
 80056b8:	f7fc f94a 	bl	8001950 <HAL_ETH_ReadPHYRegister>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056c6:	e000      	b.n	80056ca <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20005138 	.word	0x20005138

080056d8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	68f9      	ldr	r1, [r7, #12]
 80056ea:	4807      	ldr	r0, [pc, #28]	; (8005708 <ETH_PHY_IO_WriteReg+0x30>)
 80056ec:	f7fc f97b 	bl	80019e6 <HAL_ETH_WritePHYRegister>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80056f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056fa:	e000      	b.n	80056fe <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20005138 	.word	0x20005138

0800570c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005710:	f7fb fcde 	bl	80010d0 <HAL_GetTick>
 8005714:	4603      	mov	r3, r0
}
 8005716:	4618      	mov	r0, r3
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b0a0      	sub	sp, #128	; 0x80
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005724:	f107 030c 	add.w	r3, r7, #12
 8005728:	2264      	movs	r2, #100	; 0x64
 800572a:	2100      	movs	r1, #0
 800572c:	4618      	mov	r0, r3
 800572e:	f00a f9d7 	bl	800fae0 <memset>
  int32_t PHYLinkState = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	67fb      	str	r3, [r7, #124]	; 0x7c
 800573a:	2300      	movs	r3, #0
 800573c:	67bb      	str	r3, [r7, #120]	; 0x78
 800573e:	2300      	movs	r3, #0
 8005740:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005742:	483a      	ldr	r0, [pc, #232]	; (800582c <ethernet_link_check_state+0x110>)
 8005744:	f7fb fbec 	bl	8000f20 <LAN8742_GetLinkState>
 8005748:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005750:	089b      	lsrs	r3, r3, #2
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00c      	beq.n	8005776 <ethernet_link_check_state+0x5a>
 800575c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800575e:	2b01      	cmp	r3, #1
 8005760:	dc09      	bgt.n	8005776 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8005762:	4833      	ldr	r0, [pc, #204]	; (8005830 <ethernet_link_check_state+0x114>)
 8005764:	f7fb fec3 	bl	80014ee <HAL_ETH_Stop>
    netif_set_down(netif);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f001 f81d 	bl	80067a8 <netif_set_down>
    netif_set_link_down(netif);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f001 f880 	bl	8006874 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8005774:	e055      	b.n	8005822 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d14e      	bne.n	8005822 <ethernet_link_check_state+0x106>
 8005784:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005786:	2b01      	cmp	r3, #1
 8005788:	dd4b      	ble.n	8005822 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800578a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800578c:	3b02      	subs	r3, #2
 800578e:	2b03      	cmp	r3, #3
 8005790:	d82a      	bhi.n	80057e8 <ethernet_link_check_state+0xcc>
 8005792:	a201      	add	r2, pc, #4	; (adr r2, 8005798 <ethernet_link_check_state+0x7c>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057a9 	.word	0x080057a9
 800579c:	080057bb 	.word	0x080057bb
 80057a0:	080057cb 	.word	0x080057cb
 80057a4:	080057db 	.word	0x080057db
      duplex = ETH_FULLDUPLEX_MODE;
 80057a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057ac:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80057ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057b2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80057b4:	2301      	movs	r3, #1
 80057b6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80057b8:	e017      	b.n	80057ea <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80057ba:	2300      	movs	r3, #0
 80057bc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80057be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057c2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80057c4:	2301      	movs	r3, #1
 80057c6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80057c8:	e00f      	b.n	80057ea <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80057ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057ce:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80057d0:	2300      	movs	r3, #0
 80057d2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80057d4:	2301      	movs	r3, #1
 80057d6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80057d8:	e007      	b.n	80057ea <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80057da:	2300      	movs	r3, #0
 80057dc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80057de:	2300      	movs	r3, #0
 80057e0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80057e2:	2301      	movs	r3, #1
 80057e4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80057e6:	e000      	b.n	80057ea <ethernet_link_check_state+0xce>
      break;
 80057e8:	bf00      	nop
    if(linkchanged)
 80057ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d018      	beq.n	8005822 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80057f0:	f107 030c 	add.w	r3, r7, #12
 80057f4:	4619      	mov	r1, r3
 80057f6:	480e      	ldr	r0, [pc, #56]	; (8005830 <ethernet_link_check_state+0x114>)
 80057f8:	f7fc f93e 	bl	8001a78 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80057fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057fe:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8005800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005802:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005804:	f107 030c 	add.w	r3, r7, #12
 8005808:	4619      	mov	r1, r3
 800580a:	4809      	ldr	r0, [pc, #36]	; (8005830 <ethernet_link_check_state+0x114>)
 800580c:	f7fc fa2b 	bl	8001c66 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005810:	4807      	ldr	r0, [pc, #28]	; (8005830 <ethernet_link_check_state+0x114>)
 8005812:	f7fb fe0d 	bl	8001430 <HAL_ETH_Start>
      netif_set_up(netif);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 ff5a 	bl	80066d0 <netif_set_up>
      netif_set_link_up(netif);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fff5 	bl	800680c <netif_set_link_up>
}
 8005822:	bf00      	nop
 8005824:	3780      	adds	r7, #128	; 0x80
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20005220 	.word	0x20005220
 8005830:	20005138 	.word	0x20005138

08005834 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af02      	add	r7, sp, #8
 800583a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800583c:	4812      	ldr	r0, [pc, #72]	; (8005888 <HAL_ETH_RxAllocateCallback+0x54>)
 800583e:	f000 fcc1 	bl	80061c4 <memp_malloc_pool>
 8005842:	60f8      	str	r0, [r7, #12]
  if (p)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d014      	beq.n	8005874 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f103 0220 	add.w	r2, r3, #32
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4a0d      	ldr	r2, [pc, #52]	; (800588c <HAL_ETH_RxAllocateCallback+0x58>)
 8005858:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005862:	9201      	str	r2, [sp, #4]
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2241      	movs	r2, #65	; 0x41
 800586a:	2100      	movs	r1, #0
 800586c:	2000      	movs	r0, #0
 800586e:	f001 f9f7 	bl	8006c60 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005872:	e005      	b.n	8005880 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005874:	4b06      	ldr	r3, [pc, #24]	; (8005890 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005876:	2201      	movs	r2, #1
 8005878:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	08013718 	.word	0x08013718
 800588c:	080054cd 	.word	0x080054cd
 8005890:	20005134 	.word	0x20005134

08005894 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3b20      	subs	r3, #32
 80058b2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	2200      	movs	r2, #0
 80058be:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	887a      	ldrh	r2, [r7, #2]
 80058c4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d103      	bne.n	80058d6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	e003      	b.n	80058de <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	e009      	b.n	8005900 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	891a      	ldrh	r2, [r3, #8]
 80058f0:	887b      	ldrh	r3, [r7, #2]
 80058f2:	4413      	add	r3, r2
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f2      	bne.n	80058ec <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8005906:	887b      	ldrh	r3, [r7, #2]
 8005908:	4619      	mov	r1, r3
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7ff fc30 	bl	8005170 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005910:	bf00      	nop
 8005912:	3720      	adds	r7, #32
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	4603      	mov	r3, r0
 8005920:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005922:	88fb      	ldrh	r3, [r7, #6]
 8005924:	021b      	lsls	r3, r3, #8
 8005926:	b21a      	sxth	r2, r3
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	0a1b      	lsrs	r3, r3, #8
 800592c:	b29b      	uxth	r3, r3
 800592e:	b21b      	sxth	r3, r3
 8005930:	4313      	orrs	r3, r2
 8005932:	b21b      	sxth	r3, r3
 8005934:	b29b      	uxth	r3, r3
}
 8005936:	4618      	mov	r0, r3
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	061a      	lsls	r2, r3, #24
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	0a1b      	lsrs	r3, r3, #8
 800595c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	0e1b      	lsrs	r3, r3, #24
 8005966:	4313      	orrs	r3, r2
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800597e:	f000 f8d5 	bl	8005b2c <mem_init>
  memp_init();
 8005982:	f000 fbdb 	bl	800613c <memp_init>
  pbuf_init();
  netif_init();
 8005986:	f000 fcd9 	bl	800633c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800598a:	f007 f867 	bl	800ca5c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800598e:	f001 fdbf 	bl	8007510 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005992:	f006 ffd9 	bl	800c948 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005996:	bf00      	nop
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	4603      	mov	r3, r0
 80059a8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80059aa:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <ptr_to_mem+0x20>)
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	4413      	add	r3, r2
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	200058ac 	.word	0x200058ac

080059c4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80059cc:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <mem_to_ptr+0x20>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	b29b      	uxth	r3, r3
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	200058ac 	.word	0x200058ac

080059e8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80059e8:	b590      	push	{r4, r7, lr}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80059f0:	4b45      	ldr	r3, [pc, #276]	; (8005b08 <plug_holes+0x120>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d206      	bcs.n	8005a08 <plug_holes+0x20>
 80059fa:	4b44      	ldr	r3, [pc, #272]	; (8005b0c <plug_holes+0x124>)
 80059fc:	f240 12df 	movw	r2, #479	; 0x1df
 8005a00:	4943      	ldr	r1, [pc, #268]	; (8005b10 <plug_holes+0x128>)
 8005a02:	4844      	ldr	r0, [pc, #272]	; (8005b14 <plug_holes+0x12c>)
 8005a04:	f00a f874 	bl	800faf0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005a08:	4b43      	ldr	r3, [pc, #268]	; (8005b18 <plug_holes+0x130>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d306      	bcc.n	8005a20 <plug_holes+0x38>
 8005a12:	4b3e      	ldr	r3, [pc, #248]	; (8005b0c <plug_holes+0x124>)
 8005a14:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005a18:	4940      	ldr	r1, [pc, #256]	; (8005b1c <plug_holes+0x134>)
 8005a1a:	483e      	ldr	r0, [pc, #248]	; (8005b14 <plug_holes+0x12c>)
 8005a1c:	f00a f868 	bl	800faf0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	791b      	ldrb	r3, [r3, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d006      	beq.n	8005a36 <plug_holes+0x4e>
 8005a28:	4b38      	ldr	r3, [pc, #224]	; (8005b0c <plug_holes+0x124>)
 8005a2a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005a2e:	493c      	ldr	r1, [pc, #240]	; (8005b20 <plug_holes+0x138>)
 8005a30:	4838      	ldr	r0, [pc, #224]	; (8005b14 <plug_holes+0x12c>)
 8005a32:	f00a f85d 	bl	800faf0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a3e:	d906      	bls.n	8005a4e <plug_holes+0x66>
 8005a40:	4b32      	ldr	r3, [pc, #200]	; (8005b0c <plug_holes+0x124>)
 8005a42:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005a46:	4937      	ldr	r1, [pc, #220]	; (8005b24 <plug_holes+0x13c>)
 8005a48:	4832      	ldr	r0, [pc, #200]	; (8005b14 <plug_holes+0x12c>)
 8005a4a:	f00a f851 	bl	800faf0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff ffa4 	bl	80059a0 <ptr_to_mem>
 8005a58:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d024      	beq.n	8005aac <plug_holes+0xc4>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	791b      	ldrb	r3, [r3, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d120      	bne.n	8005aac <plug_holes+0xc4>
 8005a6a:	4b2b      	ldr	r3, [pc, #172]	; (8005b18 <plug_holes+0x130>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d01b      	beq.n	8005aac <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005a74:	4b2c      	ldr	r3, [pc, #176]	; (8005b28 <plug_holes+0x140>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d102      	bne.n	8005a84 <plug_holes+0x9c>
      lfree = mem;
 8005a7e:	4a2a      	ldr	r2, [pc, #168]	; (8005b28 <plug_holes+0x140>)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	881a      	ldrh	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a94:	d00a      	beq.n	8005aac <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff ff80 	bl	80059a0 <ptr_to_mem>
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff ff8e 	bl	80059c4 <mem_to_ptr>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	885b      	ldrh	r3, [r3, #2]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff ff75 	bl	80059a0 <ptr_to_mem>
 8005ab6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d01f      	beq.n	8005b00 <plug_holes+0x118>
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	791b      	ldrb	r3, [r3, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d11b      	bne.n	8005b00 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005ac8:	4b17      	ldr	r3, [pc, #92]	; (8005b28 <plug_holes+0x140>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d102      	bne.n	8005ad8 <plug_holes+0xf0>
      lfree = pmem;
 8005ad2:	4a15      	ldr	r2, [pc, #84]	; (8005b28 <plug_holes+0x140>)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	881a      	ldrh	r2, [r3, #0]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005ae8:	d00a      	beq.n	8005b00 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff ff56 	bl	80059a0 <ptr_to_mem>
 8005af4:	4604      	mov	r4, r0
 8005af6:	68b8      	ldr	r0, [r7, #8]
 8005af8:	f7ff ff64 	bl	80059c4 <mem_to_ptr>
 8005afc:	4603      	mov	r3, r0
 8005afe:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005b00:	bf00      	nop
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd90      	pop	{r4, r7, pc}
 8005b08:	200058ac 	.word	0x200058ac
 8005b0c:	08010d74 	.word	0x08010d74
 8005b10:	08010da4 	.word	0x08010da4
 8005b14:	08010dbc 	.word	0x08010dbc
 8005b18:	200058b0 	.word	0x200058b0
 8005b1c:	08010de4 	.word	0x08010de4
 8005b20:	08010e00 	.word	0x08010e00
 8005b24:	08010e1c 	.word	0x08010e1c
 8005b28:	200058b4 	.word	0x200058b4

08005b2c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005b32:	4b18      	ldr	r3, [pc, #96]	; (8005b94 <mem_init+0x68>)
 8005b34:	3303      	adds	r3, #3
 8005b36:	f023 0303 	bic.w	r3, r3, #3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	4b16      	ldr	r3, [pc, #88]	; (8005b98 <mem_init+0x6c>)
 8005b3e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005b40:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <mem_init+0x6c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005b4c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005b5a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005b5e:	f7ff ff1f 	bl	80059a0 <ptr_to_mem>
 8005b62:	4603      	mov	r3, r0
 8005b64:	4a0d      	ldr	r2, [pc, #52]	; (8005b9c <mem_init+0x70>)
 8005b66:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005b68:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <mem_init+0x70>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <mem_init+0x70>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005b78:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005b7a:	4b08      	ldr	r3, [pc, #32]	; (8005b9c <mem_init+0x70>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005b82:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005b84:	4b04      	ldr	r3, [pc, #16]	; (8005b98 <mem_init+0x6c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a05      	ldr	r2, [pc, #20]	; (8005ba0 <mem_init+0x74>)
 8005b8a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005b8c:	bf00      	nop
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20005258 	.word	0x20005258
 8005b98:	200058ac 	.word	0x200058ac
 8005b9c:	200058b0 	.word	0x200058b0
 8005ba0:	200058b4 	.word	0x200058b4

08005ba4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff ff09 	bl	80059c4 <mem_to_ptr>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff fef0 	bl	80059a0 <ptr_to_mem>
 8005bc0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	885b      	ldrh	r3, [r3, #2]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff feea 	bl	80059a0 <ptr_to_mem>
 8005bcc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005bd6:	d818      	bhi.n	8005c0a <mem_link_valid+0x66>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	885b      	ldrh	r3, [r3, #2]
 8005bdc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005be0:	d813      	bhi.n	8005c0a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005be6:	8afa      	ldrh	r2, [r7, #22]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d004      	beq.n	8005bf6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	8afa      	ldrh	r2, [r7, #22]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d109      	bne.n	8005c0a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005bf6:	4b08      	ldr	r3, [pc, #32]	; (8005c18 <mem_link_valid+0x74>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d006      	beq.n	8005c0e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	885b      	ldrh	r3, [r3, #2]
 8005c04:	8afa      	ldrh	r2, [r7, #22]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d001      	beq.n	8005c0e <mem_link_valid+0x6a>
    return 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	e000      	b.n	8005c10 <mem_link_valid+0x6c>
  }
  return 1;
 8005c0e:	2301      	movs	r3, #1
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	200058b0 	.word	0x200058b0

08005c1c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d04c      	beq.n	8005cc4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d007      	beq.n	8005c44 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005c34:	4b25      	ldr	r3, [pc, #148]	; (8005ccc <mem_free+0xb0>)
 8005c36:	f240 2273 	movw	r2, #627	; 0x273
 8005c3a:	4925      	ldr	r1, [pc, #148]	; (8005cd0 <mem_free+0xb4>)
 8005c3c:	4825      	ldr	r0, [pc, #148]	; (8005cd4 <mem_free+0xb8>)
 8005c3e:	f009 ff57 	bl	800faf0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005c42:	e040      	b.n	8005cc6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3b08      	subs	r3, #8
 8005c48:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005c4a:	4b23      	ldr	r3, [pc, #140]	; (8005cd8 <mem_free+0xbc>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d306      	bcc.n	8005c62 <mem_free+0x46>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f103 020c 	add.w	r2, r3, #12
 8005c5a:	4b20      	ldr	r3, [pc, #128]	; (8005cdc <mem_free+0xc0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d907      	bls.n	8005c72 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005c62:	4b1a      	ldr	r3, [pc, #104]	; (8005ccc <mem_free+0xb0>)
 8005c64:	f240 227f 	movw	r2, #639	; 0x27f
 8005c68:	491d      	ldr	r1, [pc, #116]	; (8005ce0 <mem_free+0xc4>)
 8005c6a:	481a      	ldr	r0, [pc, #104]	; (8005cd4 <mem_free+0xb8>)
 8005c6c:	f009 ff40 	bl	800faf0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005c70:	e029      	b.n	8005cc6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	791b      	ldrb	r3, [r3, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d107      	bne.n	8005c8a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005c7a:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <mem_free+0xb0>)
 8005c7c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005c80:	4918      	ldr	r1, [pc, #96]	; (8005ce4 <mem_free+0xc8>)
 8005c82:	4814      	ldr	r0, [pc, #80]	; (8005cd4 <mem_free+0xb8>)
 8005c84:	f009 ff34 	bl	800faf0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005c88:	e01d      	b.n	8005cc6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7ff ff8a 	bl	8005ba4 <mem_link_valid>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d107      	bne.n	8005ca6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005c96:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <mem_free+0xb0>)
 8005c98:	f240 2295 	movw	r2, #661	; 0x295
 8005c9c:	4912      	ldr	r1, [pc, #72]	; (8005ce8 <mem_free+0xcc>)
 8005c9e:	480d      	ldr	r0, [pc, #52]	; (8005cd4 <mem_free+0xb8>)
 8005ca0:	f009 ff26 	bl	800faf0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005ca4:	e00f      	b.n	8005cc6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005cac:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <mem_free+0xd0>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d202      	bcs.n	8005cbc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005cb6:	4a0d      	ldr	r2, [pc, #52]	; (8005cec <mem_free+0xd0>)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f7ff fe93 	bl	80059e8 <plug_holes>
 8005cc2:	e000      	b.n	8005cc6 <mem_free+0xaa>
    return;
 8005cc4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	08010d74 	.word	0x08010d74
 8005cd0:	08010e48 	.word	0x08010e48
 8005cd4:	08010dbc 	.word	0x08010dbc
 8005cd8:	200058ac 	.word	0x200058ac
 8005cdc:	200058b0 	.word	0x200058b0
 8005ce0:	08010e6c 	.word	0x08010e6c
 8005ce4:	08010e88 	.word	0x08010e88
 8005ce8:	08010eb0 	.word	0x08010eb0
 8005cec:	200058b4 	.word	0x200058b4

08005cf0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b088      	sub	sp, #32
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005cfc:	887b      	ldrh	r3, [r7, #2]
 8005cfe:	3303      	adds	r3, #3
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005d08:	8bfb      	ldrh	r3, [r7, #30]
 8005d0a:	2b0b      	cmp	r3, #11
 8005d0c:	d801      	bhi.n	8005d12 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005d0e:	230c      	movs	r3, #12
 8005d10:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005d12:	8bfb      	ldrh	r3, [r7, #30]
 8005d14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d18:	d803      	bhi.n	8005d22 <mem_trim+0x32>
 8005d1a:	8bfa      	ldrh	r2, [r7, #30]
 8005d1c:	887b      	ldrh	r3, [r7, #2]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d201      	bcs.n	8005d26 <mem_trim+0x36>
    return NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	e0cc      	b.n	8005ec0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005d26:	4b68      	ldr	r3, [pc, #416]	; (8005ec8 <mem_trim+0x1d8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d304      	bcc.n	8005d3a <mem_trim+0x4a>
 8005d30:	4b66      	ldr	r3, [pc, #408]	; (8005ecc <mem_trim+0x1dc>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d306      	bcc.n	8005d48 <mem_trim+0x58>
 8005d3a:	4b65      	ldr	r3, [pc, #404]	; (8005ed0 <mem_trim+0x1e0>)
 8005d3c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005d40:	4964      	ldr	r1, [pc, #400]	; (8005ed4 <mem_trim+0x1e4>)
 8005d42:	4865      	ldr	r0, [pc, #404]	; (8005ed8 <mem_trim+0x1e8>)
 8005d44:	f009 fed4 	bl	800faf0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005d48:	4b5f      	ldr	r3, [pc, #380]	; (8005ec8 <mem_trim+0x1d8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d304      	bcc.n	8005d5c <mem_trim+0x6c>
 8005d52:	4b5e      	ldr	r3, [pc, #376]	; (8005ecc <mem_trim+0x1dc>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d301      	bcc.n	8005d60 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	e0af      	b.n	8005ec0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3b08      	subs	r3, #8
 8005d64:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005d66:	69b8      	ldr	r0, [r7, #24]
 8005d68:	f7ff fe2c 	bl	80059c4 <mem_to_ptr>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	881a      	ldrh	r2, [r3, #0]
 8005d74:	8afb      	ldrh	r3, [r7, #22]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b08      	subs	r3, #8
 8005d7c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005d7e:	8bfa      	ldrh	r2, [r7, #30]
 8005d80:	8abb      	ldrh	r3, [r7, #20]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d906      	bls.n	8005d94 <mem_trim+0xa4>
 8005d86:	4b52      	ldr	r3, [pc, #328]	; (8005ed0 <mem_trim+0x1e0>)
 8005d88:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005d8c:	4953      	ldr	r1, [pc, #332]	; (8005edc <mem_trim+0x1ec>)
 8005d8e:	4852      	ldr	r0, [pc, #328]	; (8005ed8 <mem_trim+0x1e8>)
 8005d90:	f009 feae 	bl	800faf0 <iprintf>
  if (newsize > size) {
 8005d94:	8bfa      	ldrh	r2, [r7, #30]
 8005d96:	8abb      	ldrh	r3, [r7, #20]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d901      	bls.n	8005da0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	e08f      	b.n	8005ec0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005da0:	8bfa      	ldrh	r2, [r7, #30]
 8005da2:	8abb      	ldrh	r3, [r7, #20]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d101      	bne.n	8005dac <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	e089      	b.n	8005ec0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff fdf5 	bl	80059a0 <ptr_to_mem>
 8005db6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	791b      	ldrb	r3, [r3, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d13f      	bne.n	8005e40 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005dc8:	d106      	bne.n	8005dd8 <mem_trim+0xe8>
 8005dca:	4b41      	ldr	r3, [pc, #260]	; (8005ed0 <mem_trim+0x1e0>)
 8005dcc:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005dd0:	4943      	ldr	r1, [pc, #268]	; (8005ee0 <mem_trim+0x1f0>)
 8005dd2:	4841      	ldr	r0, [pc, #260]	; (8005ed8 <mem_trim+0x1e8>)
 8005dd4:	f009 fe8c 	bl	800faf0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005dde:	8afa      	ldrh	r2, [r7, #22]
 8005de0:	8bfb      	ldrh	r3, [r7, #30]
 8005de2:	4413      	add	r3, r2
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	3308      	adds	r3, #8
 8005de8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005dea:	4b3e      	ldr	r3, [pc, #248]	; (8005ee4 <mem_trim+0x1f4>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d106      	bne.n	8005e02 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005df4:	89fb      	ldrh	r3, [r7, #14]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff fdd2 	bl	80059a0 <ptr_to_mem>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	4a39      	ldr	r2, [pc, #228]	; (8005ee4 <mem_trim+0x1f4>)
 8005e00:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005e02:	89fb      	ldrh	r3, [r7, #14]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff fdcb 	bl	80059a0 <ptr_to_mem>
 8005e0a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	89ba      	ldrh	r2, [r7, #12]
 8005e16:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	8afa      	ldrh	r2, [r7, #22]
 8005e1c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	89fa      	ldrh	r2, [r7, #14]
 8005e22:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005e2c:	d047      	beq.n	8005ebe <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff fdb4 	bl	80059a0 <ptr_to_mem>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	89fb      	ldrh	r3, [r7, #14]
 8005e3c:	8053      	strh	r3, [r2, #2]
 8005e3e:	e03e      	b.n	8005ebe <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005e40:	8bfb      	ldrh	r3, [r7, #30]
 8005e42:	f103 0214 	add.w	r2, r3, #20
 8005e46:	8abb      	ldrh	r3, [r7, #20]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d838      	bhi.n	8005ebe <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005e4c:	8afa      	ldrh	r2, [r7, #22]
 8005e4e:	8bfb      	ldrh	r3, [r7, #30]
 8005e50:	4413      	add	r3, r2
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3308      	adds	r3, #8
 8005e56:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005e60:	d106      	bne.n	8005e70 <mem_trim+0x180>
 8005e62:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <mem_trim+0x1e0>)
 8005e64:	f240 3216 	movw	r2, #790	; 0x316
 8005e68:	491d      	ldr	r1, [pc, #116]	; (8005ee0 <mem_trim+0x1f0>)
 8005e6a:	481b      	ldr	r0, [pc, #108]	; (8005ed8 <mem_trim+0x1e8>)
 8005e6c:	f009 fe40 	bl	800faf0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005e70:	89fb      	ldrh	r3, [r7, #14]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff fd94 	bl	80059a0 <ptr_to_mem>
 8005e78:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005e7a:	4b1a      	ldr	r3, [pc, #104]	; (8005ee4 <mem_trim+0x1f4>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d202      	bcs.n	8005e8a <mem_trim+0x19a>
      lfree = mem2;
 8005e84:	4a17      	ldr	r2, [pc, #92]	; (8005ee4 <mem_trim+0x1f4>)
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	881a      	ldrh	r2, [r3, #0]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	8afa      	ldrh	r2, [r7, #22]
 8005e9c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	89fa      	ldrh	r2, [r7, #14]
 8005ea2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005eac:	d007      	beq.n	8005ebe <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff fd74 	bl	80059a0 <ptr_to_mem>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	89fb      	ldrh	r3, [r7, #14]
 8005ebc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005ebe:	687b      	ldr	r3, [r7, #4]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3720      	adds	r7, #32
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	200058ac 	.word	0x200058ac
 8005ecc:	200058b0 	.word	0x200058b0
 8005ed0:	08010d74 	.word	0x08010d74
 8005ed4:	08010ee4 	.word	0x08010ee4
 8005ed8:	08010dbc 	.word	0x08010dbc
 8005edc:	08010efc 	.word	0x08010efc
 8005ee0:	08010f1c 	.word	0x08010f1c
 8005ee4:	200058b4 	.word	0x200058b4

08005ee8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <mem_malloc+0x14>
    return NULL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e0d9      	b.n	80060b0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005efc:	88fb      	ldrh	r3, [r7, #6]
 8005efe:	3303      	adds	r3, #3
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f023 0303 	bic.w	r3, r3, #3
 8005f06:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005f08:	8bbb      	ldrh	r3, [r7, #28]
 8005f0a:	2b0b      	cmp	r3, #11
 8005f0c:	d801      	bhi.n	8005f12 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005f0e:	230c      	movs	r3, #12
 8005f10:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005f12:	8bbb      	ldrh	r3, [r7, #28]
 8005f14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005f18:	d803      	bhi.n	8005f22 <mem_malloc+0x3a>
 8005f1a:	8bba      	ldrh	r2, [r7, #28]
 8005f1c:	88fb      	ldrh	r3, [r7, #6]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d201      	bcs.n	8005f26 <mem_malloc+0x3e>
    return NULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	e0c4      	b.n	80060b0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005f26:	4b64      	ldr	r3, [pc, #400]	; (80060b8 <mem_malloc+0x1d0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff fd4a 	bl	80059c4 <mem_to_ptr>
 8005f30:	4603      	mov	r3, r0
 8005f32:	83fb      	strh	r3, [r7, #30]
 8005f34:	e0b4      	b.n	80060a0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005f36:	8bfb      	ldrh	r3, [r7, #30]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff fd31 	bl	80059a0 <ptr_to_mem>
 8005f3e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	791b      	ldrb	r3, [r3, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f040 80a4 	bne.w	8006092 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	8bfb      	ldrh	r3, [r7, #30]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	f1a3 0208 	sub.w	r2, r3, #8
 8005f58:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	f0c0 8099 	bcc.w	8006092 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	8bfb      	ldrh	r3, [r7, #30]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	f1a3 0208 	sub.w	r2, r3, #8
 8005f6e:	8bbb      	ldrh	r3, [r7, #28]
 8005f70:	3314      	adds	r3, #20
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d333      	bcc.n	8005fde <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005f76:	8bfa      	ldrh	r2, [r7, #30]
 8005f78:	8bbb      	ldrh	r3, [r7, #28]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3308      	adds	r3, #8
 8005f80:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005f82:	8a7b      	ldrh	r3, [r7, #18]
 8005f84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005f88:	d106      	bne.n	8005f98 <mem_malloc+0xb0>
 8005f8a:	4b4c      	ldr	r3, [pc, #304]	; (80060bc <mem_malloc+0x1d4>)
 8005f8c:	f240 3287 	movw	r2, #903	; 0x387
 8005f90:	494b      	ldr	r1, [pc, #300]	; (80060c0 <mem_malloc+0x1d8>)
 8005f92:	484c      	ldr	r0, [pc, #304]	; (80060c4 <mem_malloc+0x1dc>)
 8005f94:	f009 fdac 	bl	800faf0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005f98:	8a7b      	ldrh	r3, [r7, #18]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff fd00 	bl	80059a0 <ptr_to_mem>
 8005fa0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	881a      	ldrh	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8bfa      	ldrh	r2, [r7, #30]
 8005fb4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	8a7a      	ldrh	r2, [r7, #18]
 8005fba:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005fca:	d00b      	beq.n	8005fe4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff fce5 	bl	80059a0 <ptr_to_mem>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	8a7b      	ldrh	r3, [r7, #18]
 8005fda:	8053      	strh	r3, [r2, #2]
 8005fdc:	e002      	b.n	8005fe4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005fe4:	4b34      	ldr	r3, [pc, #208]	; (80060b8 <mem_malloc+0x1d0>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d127      	bne.n	800603e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005fee:	4b32      	ldr	r3, [pc, #200]	; (80060b8 <mem_malloc+0x1d0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005ff4:	e005      	b.n	8006002 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7ff fcd0 	bl	80059a0 <ptr_to_mem>
 8006000:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	791b      	ldrb	r3, [r3, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d004      	beq.n	8006014 <mem_malloc+0x12c>
 800600a:	4b2f      	ldr	r3, [pc, #188]	; (80060c8 <mem_malloc+0x1e0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	429a      	cmp	r2, r3
 8006012:	d1f0      	bne.n	8005ff6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006014:	4a28      	ldr	r2, [pc, #160]	; (80060b8 <mem_malloc+0x1d0>)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800601a:	4b27      	ldr	r3, [pc, #156]	; (80060b8 <mem_malloc+0x1d0>)
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	4b2a      	ldr	r3, [pc, #168]	; (80060c8 <mem_malloc+0x1e0>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d00b      	beq.n	800603e <mem_malloc+0x156>
 8006026:	4b24      	ldr	r3, [pc, #144]	; (80060b8 <mem_malloc+0x1d0>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	791b      	ldrb	r3, [r3, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d006      	beq.n	800603e <mem_malloc+0x156>
 8006030:	4b22      	ldr	r3, [pc, #136]	; (80060bc <mem_malloc+0x1d4>)
 8006032:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006036:	4925      	ldr	r1, [pc, #148]	; (80060cc <mem_malloc+0x1e4>)
 8006038:	4822      	ldr	r0, [pc, #136]	; (80060c4 <mem_malloc+0x1dc>)
 800603a:	f009 fd59 	bl	800faf0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800603e:	8bba      	ldrh	r2, [r7, #28]
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	4413      	add	r3, r2
 8006044:	3308      	adds	r3, #8
 8006046:	4a20      	ldr	r2, [pc, #128]	; (80060c8 <mem_malloc+0x1e0>)
 8006048:	6812      	ldr	r2, [r2, #0]
 800604a:	4293      	cmp	r3, r2
 800604c:	d906      	bls.n	800605c <mem_malloc+0x174>
 800604e:	4b1b      	ldr	r3, [pc, #108]	; (80060bc <mem_malloc+0x1d4>)
 8006050:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006054:	491e      	ldr	r1, [pc, #120]	; (80060d0 <mem_malloc+0x1e8>)
 8006056:	481b      	ldr	r0, [pc, #108]	; (80060c4 <mem_malloc+0x1dc>)
 8006058:	f009 fd4a 	bl	800faf0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d006      	beq.n	8006074 <mem_malloc+0x18c>
 8006066:	4b15      	ldr	r3, [pc, #84]	; (80060bc <mem_malloc+0x1d4>)
 8006068:	f240 32bb 	movw	r2, #955	; 0x3bb
 800606c:	4919      	ldr	r1, [pc, #100]	; (80060d4 <mem_malloc+0x1ec>)
 800606e:	4815      	ldr	r0, [pc, #84]	; (80060c4 <mem_malloc+0x1dc>)
 8006070:	f009 fd3e 	bl	800faf0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d006      	beq.n	800608c <mem_malloc+0x1a4>
 800607e:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <mem_malloc+0x1d4>)
 8006080:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006084:	4914      	ldr	r1, [pc, #80]	; (80060d8 <mem_malloc+0x1f0>)
 8006086:	480f      	ldr	r0, [pc, #60]	; (80060c4 <mem_malloc+0x1dc>)
 8006088:	f009 fd32 	bl	800faf0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	3308      	adds	r3, #8
 8006090:	e00e      	b.n	80060b0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006092:	8bfb      	ldrh	r3, [r7, #30]
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff fc83 	bl	80059a0 <ptr_to_mem>
 800609a:	4603      	mov	r3, r0
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80060a0:	8bfa      	ldrh	r2, [r7, #30]
 80060a2:	8bbb      	ldrh	r3, [r7, #28]
 80060a4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80060a8:	429a      	cmp	r2, r3
 80060aa:	f4ff af44 	bcc.w	8005f36 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	200058b4 	.word	0x200058b4
 80060bc:	08010d74 	.word	0x08010d74
 80060c0:	08010f1c 	.word	0x08010f1c
 80060c4:	08010dbc 	.word	0x08010dbc
 80060c8:	200058b0 	.word	0x200058b0
 80060cc:	08010f30 	.word	0x08010f30
 80060d0:	08010f4c 	.word	0x08010f4c
 80060d4:	08010f7c 	.word	0x08010f7c
 80060d8:	08010fac 	.word	0x08010fac

080060dc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	3303      	adds	r3, #3
 80060f2:	f023 0303 	bic.w	r3, r3, #3
 80060f6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	e011      	b.n	8006122 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	4413      	add	r3, r2
 800611a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	3301      	adds	r3, #1
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	885b      	ldrh	r3, [r3, #2]
 8006126:	461a      	mov	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4293      	cmp	r3, r2
 800612c:	dbe7      	blt.n	80060fe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006142:	2300      	movs	r3, #0
 8006144:	80fb      	strh	r3, [r7, #6]
 8006146:	e009      	b.n	800615c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006148:	88fb      	ldrh	r3, [r7, #6]
 800614a:	4a08      	ldr	r2, [pc, #32]	; (800616c <memp_init+0x30>)
 800614c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff ffc3 	bl	80060dc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	3301      	adds	r3, #1
 800615a:	80fb      	strh	r3, [r7, #6]
 800615c:	88fb      	ldrh	r3, [r7, #6]
 800615e:	2b08      	cmp	r3, #8
 8006160:	d9f2      	bls.n	8006148 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	08013790 	.word	0x08013790

08006170 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d012      	beq.n	80061ac <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d006      	beq.n	80061a8 <do_memp_malloc_pool+0x38>
 800619a:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <do_memp_malloc_pool+0x48>)
 800619c:	f44f 728c 	mov.w	r2, #280	; 0x118
 80061a0:	4906      	ldr	r1, [pc, #24]	; (80061bc <do_memp_malloc_pool+0x4c>)
 80061a2:	4807      	ldr	r0, [pc, #28]	; (80061c0 <do_memp_malloc_pool+0x50>)
 80061a4:	f009 fca4 	bl	800faf0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	e000      	b.n	80061ae <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	08010fd0 	.word	0x08010fd0
 80061bc:	08011000 	.word	0x08011000
 80061c0:	08011024 	.word	0x08011024

080061c4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <memp_malloc_pool+0x1c>
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <memp_malloc_pool+0x38>)
 80061d4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80061d8:	4909      	ldr	r1, [pc, #36]	; (8006200 <memp_malloc_pool+0x3c>)
 80061da:	480a      	ldr	r0, [pc, #40]	; (8006204 <memp_malloc_pool+0x40>)
 80061dc:	f009 fc88 	bl	800faf0 <iprintf>
  if (desc == NULL) {
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <memp_malloc_pool+0x26>
    return NULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	e003      	b.n	80061f2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff ffc0 	bl	8006170 <do_memp_malloc_pool>
 80061f0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	08010fd0 	.word	0x08010fd0
 8006200:	0801104c 	.word	0x0801104c
 8006204:	08011024 	.word	0x08011024

08006208 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	4603      	mov	r3, r0
 8006210:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006212:	79fb      	ldrb	r3, [r7, #7]
 8006214:	2b08      	cmp	r3, #8
 8006216:	d908      	bls.n	800622a <memp_malloc+0x22>
 8006218:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <memp_malloc+0x3c>)
 800621a:	f240 1257 	movw	r2, #343	; 0x157
 800621e:	490a      	ldr	r1, [pc, #40]	; (8006248 <memp_malloc+0x40>)
 8006220:	480a      	ldr	r0, [pc, #40]	; (800624c <memp_malloc+0x44>)
 8006222:	f009 fc65 	bl	800faf0 <iprintf>
 8006226:	2300      	movs	r3, #0
 8006228:	e008      	b.n	800623c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	4a08      	ldr	r2, [pc, #32]	; (8006250 <memp_malloc+0x48>)
 800622e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff ff9c 	bl	8006170 <do_memp_malloc_pool>
 8006238:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800623a:	68fb      	ldr	r3, [r7, #12]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	08010fd0 	.word	0x08010fd0
 8006248:	08011060 	.word	0x08011060
 800624c:	08011024 	.word	0x08011024
 8006250:	08013790 	.word	0x08013790

08006254 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	f003 0303 	and.w	r3, r3, #3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d006      	beq.n	8006276 <do_memp_free_pool+0x22>
 8006268:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <do_memp_free_pool+0x40>)
 800626a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800626e:	490a      	ldr	r1, [pc, #40]	; (8006298 <do_memp_free_pool+0x44>)
 8006270:	480a      	ldr	r0, [pc, #40]	; (800629c <do_memp_free_pool+0x48>)
 8006272:	f009 fc3d 	bl	800faf0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800628c:	bf00      	nop
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	08010fd0 	.word	0x08010fd0
 8006298:	08011080 	.word	0x08011080
 800629c:	08011024 	.word	0x08011024

080062a0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d106      	bne.n	80062be <memp_free_pool+0x1e>
 80062b0:	4b0a      	ldr	r3, [pc, #40]	; (80062dc <memp_free_pool+0x3c>)
 80062b2:	f240 1295 	movw	r2, #405	; 0x195
 80062b6:	490a      	ldr	r1, [pc, #40]	; (80062e0 <memp_free_pool+0x40>)
 80062b8:	480a      	ldr	r0, [pc, #40]	; (80062e4 <memp_free_pool+0x44>)
 80062ba:	f009 fc19 	bl	800faf0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d007      	beq.n	80062d4 <memp_free_pool+0x34>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d004      	beq.n	80062d4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff ffc1 	bl	8006254 <do_memp_free_pool>
 80062d2:	e000      	b.n	80062d6 <memp_free_pool+0x36>
    return;
 80062d4:	bf00      	nop
}
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	08010fd0 	.word	0x08010fd0
 80062e0:	0801104c 	.word	0x0801104c
 80062e4:	08011024 	.word	0x08011024

080062e8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	6039      	str	r1, [r7, #0]
 80062f2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d907      	bls.n	800630a <memp_free+0x22>
 80062fa:	4b0c      	ldr	r3, [pc, #48]	; (800632c <memp_free+0x44>)
 80062fc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006300:	490b      	ldr	r1, [pc, #44]	; (8006330 <memp_free+0x48>)
 8006302:	480c      	ldr	r0, [pc, #48]	; (8006334 <memp_free+0x4c>)
 8006304:	f009 fbf4 	bl	800faf0 <iprintf>
 8006308:	e00c      	b.n	8006324 <memp_free+0x3c>

  if (mem == NULL) {
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d008      	beq.n	8006322 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006310:	79fb      	ldrb	r3, [r7, #7]
 8006312:	4a09      	ldr	r2, [pc, #36]	; (8006338 <memp_free+0x50>)
 8006314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff ff9a 	bl	8006254 <do_memp_free_pool>
 8006320:	e000      	b.n	8006324 <memp_free+0x3c>
    return;
 8006322:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	08010fd0 	.word	0x08010fd0
 8006330:	080110a0 	.word	0x080110a0
 8006334:	08011024 	.word	0x08011024
 8006338:	08013790 	.word	0x08013790

0800633c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006340:	bf00      	nop
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
	...

0800634c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d108      	bne.n	8006372 <netif_add+0x26>
 8006360:	4b57      	ldr	r3, [pc, #348]	; (80064c0 <netif_add+0x174>)
 8006362:	f240 1227 	movw	r2, #295	; 0x127
 8006366:	4957      	ldr	r1, [pc, #348]	; (80064c4 <netif_add+0x178>)
 8006368:	4857      	ldr	r0, [pc, #348]	; (80064c8 <netif_add+0x17c>)
 800636a:	f009 fbc1 	bl	800faf0 <iprintf>
 800636e:	2300      	movs	r3, #0
 8006370:	e0a2      	b.n	80064b8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	2b00      	cmp	r3, #0
 8006376:	d108      	bne.n	800638a <netif_add+0x3e>
 8006378:	4b51      	ldr	r3, [pc, #324]	; (80064c0 <netif_add+0x174>)
 800637a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800637e:	4953      	ldr	r1, [pc, #332]	; (80064cc <netif_add+0x180>)
 8006380:	4851      	ldr	r0, [pc, #324]	; (80064c8 <netif_add+0x17c>)
 8006382:	f009 fbb5 	bl	800faf0 <iprintf>
 8006386:	2300      	movs	r3, #0
 8006388:	e096      	b.n	80064b8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006390:	4b4f      	ldr	r3, [pc, #316]	; (80064d0 <netif_add+0x184>)
 8006392:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800639a:	4b4d      	ldr	r3, [pc, #308]	; (80064d0 <netif_add+0x184>)
 800639c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80063a4:	4b4a      	ldr	r3, [pc, #296]	; (80064d0 <netif_add+0x184>)
 80063a6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4a45      	ldr	r2, [pc, #276]	; (80064d4 <netif_add+0x188>)
 80063be:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a3a      	ldr	r2, [r7, #32]
 80063d8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80063da:	4b3f      	ldr	r3, [pc, #252]	; (80064d8 <netif_add+0x18c>)
 80063dc:	781a      	ldrb	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063e8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	68b9      	ldr	r1, [r7, #8]
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 f913 	bl	800661c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	4798      	blx	r3
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <netif_add+0xba>
    return NULL;
 8006402:	2300      	movs	r3, #0
 8006404:	e058      	b.n	80064b8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800640c:	2bff      	cmp	r3, #255	; 0xff
 800640e:	d103      	bne.n	8006418 <netif_add+0xcc>
        netif->num = 0;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006418:	2300      	movs	r3, #0
 800641a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800641c:	4b2f      	ldr	r3, [pc, #188]	; (80064dc <netif_add+0x190>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	e02b      	b.n	800647c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	429a      	cmp	r2, r3
 800642a:	d106      	bne.n	800643a <netif_add+0xee>
 800642c:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <netif_add+0x174>)
 800642e:	f240 128b 	movw	r2, #395	; 0x18b
 8006432:	492b      	ldr	r1, [pc, #172]	; (80064e0 <netif_add+0x194>)
 8006434:	4824      	ldr	r0, [pc, #144]	; (80064c8 <netif_add+0x17c>)
 8006436:	f009 fb5b 	bl	800faf0 <iprintf>
        num_netifs++;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	3301      	adds	r3, #1
 800643e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2bff      	cmp	r3, #255	; 0xff
 8006444:	dd06      	ble.n	8006454 <netif_add+0x108>
 8006446:	4b1e      	ldr	r3, [pc, #120]	; (80064c0 <netif_add+0x174>)
 8006448:	f240 128d 	movw	r2, #397	; 0x18d
 800644c:	4925      	ldr	r1, [pc, #148]	; (80064e4 <netif_add+0x198>)
 800644e:	481e      	ldr	r0, [pc, #120]	; (80064c8 <netif_add+0x17c>)
 8006450:	f009 fb4e 	bl	800faf0 <iprintf>
        if (netif2->num == netif->num) {
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006460:	429a      	cmp	r2, r3
 8006462:	d108      	bne.n	8006476 <netif_add+0x12a>
          netif->num++;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800646a:	3301      	adds	r3, #1
 800646c:	b2da      	uxtb	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006474:	e005      	b.n	8006482 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1d0      	bne.n	8006424 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1be      	bne.n	8006406 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800648e:	2bfe      	cmp	r3, #254	; 0xfe
 8006490:	d103      	bne.n	800649a <netif_add+0x14e>
    netif_num = 0;
 8006492:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <netif_add+0x18c>)
 8006494:	2200      	movs	r2, #0
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	e006      	b.n	80064a8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064a0:	3301      	adds	r3, #1
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <netif_add+0x18c>)
 80064a6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80064a8:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <netif_add+0x190>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80064b0:	4a0a      	ldr	r2, [pc, #40]	; (80064dc <netif_add+0x190>)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80064b6:	68fb      	ldr	r3, [r7, #12]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	080110bc 	.word	0x080110bc
 80064c4:	08011150 	.word	0x08011150
 80064c8:	0801110c 	.word	0x0801110c
 80064cc:	0801116c 	.word	0x0801116c
 80064d0:	080137f4 	.word	0x080137f4
 80064d4:	080068f7 	.word	0x080068f7
 80064d8:	200087ac 	.word	0x200087ac
 80064dc:	200087a4 	.word	0x200087a4
 80064e0:	08011190 	.word	0x08011190
 80064e4:	080111a4 	.word	0x080111a4

080064e8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f002 fb53 	bl	8008ba0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f006 ff27 	bl	800d350 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006502:	bf00      	nop
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
	...

0800650c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <netif_do_set_ipaddr+0x20>
 800651e:	4b1d      	ldr	r3, [pc, #116]	; (8006594 <netif_do_set_ipaddr+0x88>)
 8006520:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006524:	491c      	ldr	r1, [pc, #112]	; (8006598 <netif_do_set_ipaddr+0x8c>)
 8006526:	481d      	ldr	r0, [pc, #116]	; (800659c <netif_do_set_ipaddr+0x90>)
 8006528:	f009 fae2 	bl	800faf0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <netif_do_set_ipaddr+0x34>
 8006532:	4b18      	ldr	r3, [pc, #96]	; (8006594 <netif_do_set_ipaddr+0x88>)
 8006534:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006538:	4917      	ldr	r1, [pc, #92]	; (8006598 <netif_do_set_ipaddr+0x8c>)
 800653a:	4818      	ldr	r0, [pc, #96]	; (800659c <netif_do_set_ipaddr+0x90>)
 800653c:	f009 fad8 	bl	800faf0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3304      	adds	r3, #4
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d01c      	beq.n	8006588 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3304      	adds	r3, #4
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800655e:	f107 0314 	add.w	r3, r7, #20
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff ffbf 	bl	80064e8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <netif_do_set_ipaddr+0x6a>
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	e000      	b.n	8006578 <netif_do_set_ipaddr+0x6c>
 8006576:	2300      	movs	r3, #0
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800657c:	2101      	movs	r1, #1
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 f8d2 	bl	8006728 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006584:	2301      	movs	r3, #1
 8006586:	e000      	b.n	800658a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	080110bc 	.word	0x080110bc
 8006598:	080111d4 	.word	0x080111d4
 800659c:	0801110c 	.word	0x0801110c

080065a0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3308      	adds	r3, #8
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d00a      	beq.n	80065d0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <netif_do_set_netmask+0x26>
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	e000      	b.n	80065c8 <netif_do_set_netmask+0x28>
 80065c6:	2300      	movs	r3, #0
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80065cc:	2301      	movs	r3, #1
 80065ce:	e000      	b.n	80065d2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80065de:	b480      	push	{r7}
 80065e0:	b085      	sub	sp, #20
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	330c      	adds	r3, #12
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d00a      	beq.n	800660e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <netif_do_set_gw+0x26>
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	e000      	b.n	8006606 <netif_do_set_gw+0x28>
 8006604:	2300      	movs	r3, #0
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b088      	sub	sp, #32
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
 8006628:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800662a:	2300      	movs	r3, #0
 800662c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006638:	4b1c      	ldr	r3, [pc, #112]	; (80066ac <netif_set_addr+0x90>)
 800663a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006642:	4b1a      	ldr	r3, [pc, #104]	; (80066ac <netif_set_addr+0x90>)
 8006644:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800664c:	4b17      	ldr	r3, [pc, #92]	; (80066ac <netif_set_addr+0x90>)
 800664e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <netif_set_addr+0x42>
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <netif_set_addr+0x46>
 800665e:	2301      	movs	r3, #1
 8006660:	e000      	b.n	8006664 <netif_set_addr+0x48>
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d006      	beq.n	800667a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800666c:	f107 0310 	add.w	r3, r7, #16
 8006670:	461a      	mov	r2, r3
 8006672:	68b9      	ldr	r1, [r7, #8]
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f7ff ff49 	bl	800650c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f7ff ff8e 	bl	80065a0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7ff ffa8 	bl	80065de <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d106      	bne.n	80066a2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006694:	f107 0310 	add.w	r3, r7, #16
 8006698:	461a      	mov	r2, r3
 800669a:	68b9      	ldr	r1, [r7, #8]
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f7ff ff35 	bl	800650c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80066a2:	bf00      	nop
 80066a4:	3720      	adds	r7, #32
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	080137f4 	.word	0x080137f4

080066b0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80066b8:	4a04      	ldr	r2, [pc, #16]	; (80066cc <netif_set_default+0x1c>)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	200087a8 	.word	0x200087a8

080066d0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d107      	bne.n	80066ee <netif_set_up+0x1e>
 80066de:	4b0f      	ldr	r3, [pc, #60]	; (800671c <netif_set_up+0x4c>)
 80066e0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80066e4:	490e      	ldr	r1, [pc, #56]	; (8006720 <netif_set_up+0x50>)
 80066e6:	480f      	ldr	r0, [pc, #60]	; (8006724 <netif_set_up+0x54>)
 80066e8:	f009 fa02 	bl	800faf0 <iprintf>
 80066ec:	e013      	b.n	8006716 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10c      	bne.n	8006716 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006702:	f043 0301 	orr.w	r3, r3, #1
 8006706:	b2da      	uxtb	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800670e:	2103      	movs	r1, #3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f809 	bl	8006728 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	080110bc 	.word	0x080110bc
 8006720:	08011244 	.word	0x08011244
 8006724:	0801110c 	.word	0x0801110c

08006728 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	460b      	mov	r3, r1
 8006732:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <netif_issue_reports+0x20>
 800673a:	4b18      	ldr	r3, [pc, #96]	; (800679c <netif_issue_reports+0x74>)
 800673c:	f240 326d 	movw	r2, #877	; 0x36d
 8006740:	4917      	ldr	r1, [pc, #92]	; (80067a0 <netif_issue_reports+0x78>)
 8006742:	4818      	ldr	r0, [pc, #96]	; (80067a4 <netif_issue_reports+0x7c>)
 8006744:	f009 f9d4 	bl	800faf0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b00      	cmp	r3, #0
 8006754:	d01e      	beq.n	8006794 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800675c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006760:	2b00      	cmp	r3, #0
 8006762:	d017      	beq.n	8006794 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006764:	78fb      	ldrb	r3, [r7, #3]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d013      	beq.n	8006796 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	3304      	adds	r3, #4
 8006772:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00e      	beq.n	8006796 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800677e:	f003 0308 	and.w	r3, r3, #8
 8006782:	2b00      	cmp	r3, #0
 8006784:	d007      	beq.n	8006796 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	3304      	adds	r3, #4
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f007 fd49 	bl	800e224 <etharp_request>
 8006792:	e000      	b.n	8006796 <netif_issue_reports+0x6e>
    return;
 8006794:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	080110bc 	.word	0x080110bc
 80067a0:	08011260 	.word	0x08011260
 80067a4:	0801110c 	.word	0x0801110c

080067a8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d107      	bne.n	80067c6 <netif_set_down+0x1e>
 80067b6:	4b12      	ldr	r3, [pc, #72]	; (8006800 <netif_set_down+0x58>)
 80067b8:	f240 329b 	movw	r2, #923	; 0x39b
 80067bc:	4911      	ldr	r1, [pc, #68]	; (8006804 <netif_set_down+0x5c>)
 80067be:	4812      	ldr	r0, [pc, #72]	; (8006808 <netif_set_down+0x60>)
 80067c0:	f009 f996 	bl	800faf0 <iprintf>
 80067c4:	e019      	b.n	80067fa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d012      	beq.n	80067fa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067ec:	f003 0308 	and.w	r3, r3, #8
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f007 f8d3 	bl	800d9a0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	080110bc 	.word	0x080110bc
 8006804:	08011284 	.word	0x08011284
 8006808:	0801110c 	.word	0x0801110c

0800680c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d107      	bne.n	800682a <netif_set_link_up+0x1e>
 800681a:	4b13      	ldr	r3, [pc, #76]	; (8006868 <netif_set_link_up+0x5c>)
 800681c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8006820:	4912      	ldr	r1, [pc, #72]	; (800686c <netif_set_link_up+0x60>)
 8006822:	4813      	ldr	r0, [pc, #76]	; (8006870 <netif_set_link_up+0x64>)
 8006824:	f009 f964 	bl	800faf0 <iprintf>
 8006828:	e01b      	b.n	8006862 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d114      	bne.n	8006862 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800683e:	f043 0304 	orr.w	r3, r3, #4
 8006842:	b2da      	uxtb	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800684a:	2103      	movs	r1, #3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff ff6b 	bl	8006728 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <netif_set_link_up+0x56>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	080110bc 	.word	0x080110bc
 800686c:	080112a4 	.word	0x080112a4
 8006870:	0801110c 	.word	0x0801110c

08006874 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d107      	bne.n	8006892 <netif_set_link_down+0x1e>
 8006882:	4b11      	ldr	r3, [pc, #68]	; (80068c8 <netif_set_link_down+0x54>)
 8006884:	f240 4206 	movw	r2, #1030	; 0x406
 8006888:	4910      	ldr	r1, [pc, #64]	; (80068cc <netif_set_link_down+0x58>)
 800688a:	4811      	ldr	r0, [pc, #68]	; (80068d0 <netif_set_link_down+0x5c>)
 800688c:	f009 f930 	bl	800faf0 <iprintf>
 8006890:	e017      	b.n	80068c2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b00      	cmp	r3, #0
 800689e:	d010      	beq.n	80068c2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80068a6:	f023 0304 	bic.w	r3, r3, #4
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <netif_set_link_down+0x4e>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	080110bc 	.word	0x080110bc
 80068cc:	080112c8 	.word	0x080112c8
 80068d0:	0801110c 	.word	0x0801110c

080068d4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	61da      	str	r2, [r3, #28]
  }
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b085      	sub	sp, #20
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	60f8      	str	r0, [r7, #12]
 80068fe:	60b9      	str	r1, [r7, #8]
 8006900:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006902:	f06f 030b 	mvn.w	r3, #11
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
	...

08006914 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d013      	beq.n	800694c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006924:	4b0d      	ldr	r3, [pc, #52]	; (800695c <netif_get_by_index+0x48>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	e00c      	b.n	8006946 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006932:	3301      	adds	r3, #1
 8006934:	b2db      	uxtb	r3, r3
 8006936:	79fa      	ldrb	r2, [r7, #7]
 8006938:	429a      	cmp	r2, r3
 800693a:	d101      	bne.n	8006940 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	e006      	b.n	800694e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1ef      	bne.n	800692c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	200087a4 	.word	0x200087a4

08006960 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006966:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <pbuf_free_ooseq+0x38>)
 8006968:	2200      	movs	r2, #0
 800696a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800696c:	4b0b      	ldr	r3, [pc, #44]	; (800699c <pbuf_free_ooseq+0x3c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	607b      	str	r3, [r7, #4]
 8006972:	e00a      	b.n	800698a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f002 f94d 	bl	8008c1c <tcp_free_ooseq>
      return;
 8006982:	e005      	b.n	8006990 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	607b      	str	r3, [r7, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f1      	bne.n	8006974 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	200087ad 	.word	0x200087ad
 800699c:	200087bc 	.word	0x200087bc

080069a0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80069a4:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <pbuf_pool_is_empty+0x14>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80069aa:	bf00      	nop
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	200087ad 	.word	0x200087ad

080069b8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	4611      	mov	r1, r2
 80069c4:	461a      	mov	r2, r3
 80069c6:	460b      	mov	r3, r1
 80069c8:	80fb      	strh	r3, [r7, #6]
 80069ca:	4613      	mov	r3, r2
 80069cc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	88fa      	ldrh	r2, [r7, #6]
 80069de:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	88ba      	ldrh	r2, [r7, #4]
 80069e4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80069e6:	8b3b      	ldrh	r3, [r7, #24]
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	7f3a      	ldrb	r2, [r7, #28]
 80069f2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2201      	movs	r2, #1
 80069f8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	73da      	strb	r2, [r3, #15]
}
 8006a00:	bf00      	nop
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08c      	sub	sp, #48	; 0x30
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	4603      	mov	r3, r0
 8006a14:	71fb      	strb	r3, [r7, #7]
 8006a16:	460b      	mov	r3, r1
 8006a18:	80bb      	strh	r3, [r7, #4]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006a1e:	79fb      	ldrb	r3, [r7, #7]
 8006a20:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006a22:	887b      	ldrh	r3, [r7, #2]
 8006a24:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006a28:	d07f      	beq.n	8006b2a <pbuf_alloc+0x11e>
 8006a2a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006a2e:	f300 80c8 	bgt.w	8006bc2 <pbuf_alloc+0x1b6>
 8006a32:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006a36:	d010      	beq.n	8006a5a <pbuf_alloc+0x4e>
 8006a38:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006a3c:	f300 80c1 	bgt.w	8006bc2 <pbuf_alloc+0x1b6>
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d002      	beq.n	8006a4a <pbuf_alloc+0x3e>
 8006a44:	2b41      	cmp	r3, #65	; 0x41
 8006a46:	f040 80bc 	bne.w	8006bc2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006a4a:	887a      	ldrh	r2, [r7, #2]
 8006a4c:	88bb      	ldrh	r3, [r7, #4]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	2000      	movs	r0, #0
 8006a52:	f000 f8d1 	bl	8006bf8 <pbuf_alloc_reference>
 8006a56:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006a58:	e0bd      	b.n	8006bd6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006a62:	88bb      	ldrh	r3, [r7, #4]
 8006a64:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006a66:	2008      	movs	r0, #8
 8006a68:	f7ff fbce 	bl	8006208 <memp_malloc>
 8006a6c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d109      	bne.n	8006a88 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006a74:	f7ff ff94 	bl	80069a0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <pbuf_alloc+0x78>
            pbuf_free(p);
 8006a7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a80:	f000 faa8 	bl	8006fd4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006a84:	2300      	movs	r3, #0
 8006a86:	e0a7      	b.n	8006bd8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006a88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a8a:	3303      	adds	r3, #3
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f023 0303 	bic.w	r3, r3, #3
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	8b7a      	ldrh	r2, [r7, #26]
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	bf28      	it	cs
 8006aa0:	4613      	movcs	r3, r2
 8006aa2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006aa4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006aa6:	3310      	adds	r3, #16
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4413      	add	r3, r2
 8006aac:	3303      	adds	r3, #3
 8006aae:	f023 0303 	bic.w	r3, r3, #3
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	89f9      	ldrh	r1, [r7, #14]
 8006ab6:	8b7a      	ldrh	r2, [r7, #26]
 8006ab8:	2300      	movs	r3, #0
 8006aba:	9301      	str	r3, [sp, #4]
 8006abc:	887b      	ldrh	r3, [r7, #2]
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4601      	mov	r1, r0
 8006ac4:	6938      	ldr	r0, [r7, #16]
 8006ac6:	f7ff ff77 	bl	80069b8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d006      	beq.n	8006ae4 <pbuf_alloc+0xd8>
 8006ad6:	4b42      	ldr	r3, [pc, #264]	; (8006be0 <pbuf_alloc+0x1d4>)
 8006ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006adc:	4941      	ldr	r1, [pc, #260]	; (8006be4 <pbuf_alloc+0x1d8>)
 8006ade:	4842      	ldr	r0, [pc, #264]	; (8006be8 <pbuf_alloc+0x1dc>)
 8006ae0:	f009 f806 	bl	800faf0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006ae4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ae6:	3303      	adds	r3, #3
 8006ae8:	f023 0303 	bic.w	r3, r3, #3
 8006aec:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006af0:	d106      	bne.n	8006b00 <pbuf_alloc+0xf4>
 8006af2:	4b3b      	ldr	r3, [pc, #236]	; (8006be0 <pbuf_alloc+0x1d4>)
 8006af4:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006af8:	493c      	ldr	r1, [pc, #240]	; (8006bec <pbuf_alloc+0x1e0>)
 8006afa:	483b      	ldr	r0, [pc, #236]	; (8006be8 <pbuf_alloc+0x1dc>)
 8006afc:	f008 fff8 	bl	800faf0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d102      	bne.n	8006b0c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
 8006b0a:	e002      	b.n	8006b12 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006b16:	8b7a      	ldrh	r2, [r7, #26]
 8006b18:	89fb      	ldrh	r3, [r7, #14]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006b22:	8b7b      	ldrh	r3, [r7, #26]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d19e      	bne.n	8006a66 <pbuf_alloc+0x5a>
      break;
 8006b28:	e055      	b.n	8006bd6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006b2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b2c:	3303      	adds	r3, #3
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	f023 0303 	bic.w	r3, r3, #3
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	88bb      	ldrh	r3, [r7, #4]
 8006b38:	3303      	adds	r3, #3
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f023 0303 	bic.w	r3, r3, #3
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	4413      	add	r3, r2
 8006b44:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006b46:	8b3b      	ldrh	r3, [r7, #24]
 8006b48:	3310      	adds	r3, #16
 8006b4a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006b4c:	8b3a      	ldrh	r2, [r7, #24]
 8006b4e:	88bb      	ldrh	r3, [r7, #4]
 8006b50:	3303      	adds	r3, #3
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d306      	bcc.n	8006b68 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006b5a:	8afa      	ldrh	r2, [r7, #22]
 8006b5c:	88bb      	ldrh	r3, [r7, #4]
 8006b5e:	3303      	adds	r3, #3
 8006b60:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d201      	bcs.n	8006b6c <pbuf_alloc+0x160>
        return NULL;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e035      	b.n	8006bd8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006b6c:	8afb      	ldrh	r3, [r7, #22]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff f9ba 	bl	8005ee8 <mem_malloc>
 8006b74:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <pbuf_alloc+0x174>
        return NULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e02b      	b.n	8006bd8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006b80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b82:	3310      	adds	r3, #16
 8006b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b86:	4413      	add	r3, r2
 8006b88:	3303      	adds	r3, #3
 8006b8a:	f023 0303 	bic.w	r3, r3, #3
 8006b8e:	4618      	mov	r0, r3
 8006b90:	88b9      	ldrh	r1, [r7, #4]
 8006b92:	88ba      	ldrh	r2, [r7, #4]
 8006b94:	2300      	movs	r3, #0
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	887b      	ldrh	r3, [r7, #2]
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4601      	mov	r1, r0
 8006ba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ba2:	f7ff ff09 	bl	80069b8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d010      	beq.n	8006bd4 <pbuf_alloc+0x1c8>
 8006bb2:	4b0b      	ldr	r3, [pc, #44]	; (8006be0 <pbuf_alloc+0x1d4>)
 8006bb4:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006bb8:	490d      	ldr	r1, [pc, #52]	; (8006bf0 <pbuf_alloc+0x1e4>)
 8006bba:	480b      	ldr	r0, [pc, #44]	; (8006be8 <pbuf_alloc+0x1dc>)
 8006bbc:	f008 ff98 	bl	800faf0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006bc0:	e008      	b.n	8006bd4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006bc2:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <pbuf_alloc+0x1d4>)
 8006bc4:	f240 1227 	movw	r2, #295	; 0x127
 8006bc8:	490a      	ldr	r1, [pc, #40]	; (8006bf4 <pbuf_alloc+0x1e8>)
 8006bca:	4807      	ldr	r0, [pc, #28]	; (8006be8 <pbuf_alloc+0x1dc>)
 8006bcc:	f008 ff90 	bl	800faf0 <iprintf>
      return NULL;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e001      	b.n	8006bd8 <pbuf_alloc+0x1cc>
      break;
 8006bd4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3728      	adds	r7, #40	; 0x28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	080112ec 	.word	0x080112ec
 8006be4:	0801131c 	.word	0x0801131c
 8006be8:	0801134c 	.word	0x0801134c
 8006bec:	08011374 	.word	0x08011374
 8006bf0:	080113a8 	.word	0x080113a8
 8006bf4:	080113d4 	.word	0x080113d4

08006bf8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af02      	add	r7, sp, #8
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	460b      	mov	r3, r1
 8006c02:	807b      	strh	r3, [r7, #2]
 8006c04:	4613      	mov	r3, r2
 8006c06:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006c08:	883b      	ldrh	r3, [r7, #0]
 8006c0a:	2b41      	cmp	r3, #65	; 0x41
 8006c0c:	d009      	beq.n	8006c22 <pbuf_alloc_reference+0x2a>
 8006c0e:	883b      	ldrh	r3, [r7, #0]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d006      	beq.n	8006c22 <pbuf_alloc_reference+0x2a>
 8006c14:	4b0f      	ldr	r3, [pc, #60]	; (8006c54 <pbuf_alloc_reference+0x5c>)
 8006c16:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006c1a:	490f      	ldr	r1, [pc, #60]	; (8006c58 <pbuf_alloc_reference+0x60>)
 8006c1c:	480f      	ldr	r0, [pc, #60]	; (8006c5c <pbuf_alloc_reference+0x64>)
 8006c1e:	f008 ff67 	bl	800faf0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006c22:	2007      	movs	r0, #7
 8006c24:	f7ff faf0 	bl	8006208 <memp_malloc>
 8006c28:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006c30:	2300      	movs	r3, #0
 8006c32:	e00b      	b.n	8006c4c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006c34:	8879      	ldrh	r1, [r7, #2]
 8006c36:	887a      	ldrh	r2, [r7, #2]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	9301      	str	r3, [sp, #4]
 8006c3c:	883b      	ldrh	r3, [r7, #0]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	460b      	mov	r3, r1
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f7ff feb7 	bl	80069b8 <pbuf_init_alloced_pbuf>
  return p;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	080112ec 	.word	0x080112ec
 8006c58:	080113f0 	.word	0x080113f0
 8006c5c:	0801134c 	.word	0x0801134c

08006c60 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	607b      	str	r3, [r7, #4]
 8006c68:	4603      	mov	r3, r0
 8006c6a:	73fb      	strb	r3, [r7, #15]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	81bb      	strh	r3, [r7, #12]
 8006c70:	4613      	mov	r3, r2
 8006c72:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006c78:	8a7b      	ldrh	r3, [r7, #18]
 8006c7a:	3303      	adds	r3, #3
 8006c7c:	f023 0203 	bic.w	r2, r3, #3
 8006c80:	89bb      	ldrh	r3, [r7, #12]
 8006c82:	441a      	add	r2, r3
 8006c84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d901      	bls.n	8006c8e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e018      	b.n	8006cc0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d007      	beq.n	8006ca4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006c94:	8a7b      	ldrh	r3, [r7, #18]
 8006c96:	3303      	adds	r3, #3
 8006c98:	f023 0303 	bic.w	r3, r3, #3
 8006c9c:	6a3a      	ldr	r2, [r7, #32]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	e001      	b.n	8006ca8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	89b9      	ldrh	r1, [r7, #12]
 8006cac:	89ba      	ldrh	r2, [r7, #12]
 8006cae:	2302      	movs	r3, #2
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	897b      	ldrh	r3, [r7, #10]
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	6979      	ldr	r1, [r7, #20]
 8006cba:	f7ff fe7d 	bl	80069b8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006cbe:	687b      	ldr	r3, [r7, #4]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d106      	bne.n	8006ce8 <pbuf_realloc+0x20>
 8006cda:	4b3a      	ldr	r3, [pc, #232]	; (8006dc4 <pbuf_realloc+0xfc>)
 8006cdc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006ce0:	4939      	ldr	r1, [pc, #228]	; (8006dc8 <pbuf_realloc+0x100>)
 8006ce2:	483a      	ldr	r0, [pc, #232]	; (8006dcc <pbuf_realloc+0x104>)
 8006ce4:	f008 ff04 	bl	800faf0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	891b      	ldrh	r3, [r3, #8]
 8006cec:	887a      	ldrh	r2, [r7, #2]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d263      	bcs.n	8006dba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	891a      	ldrh	r2, [r3, #8]
 8006cf6:	887b      	ldrh	r3, [r7, #2]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006cfc:	887b      	ldrh	r3, [r7, #2]
 8006cfe:	817b      	strh	r3, [r7, #10]
  q = p;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006d04:	e018      	b.n	8006d38 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	895b      	ldrh	r3, [r3, #10]
 8006d0a:	897a      	ldrh	r2, [r7, #10]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	891a      	ldrh	r2, [r3, #8]
 8006d14:	893b      	ldrh	r3, [r7, #8]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d106      	bne.n	8006d38 <pbuf_realloc+0x70>
 8006d2a:	4b26      	ldr	r3, [pc, #152]	; (8006dc4 <pbuf_realloc+0xfc>)
 8006d2c:	f240 12af 	movw	r2, #431	; 0x1af
 8006d30:	4927      	ldr	r1, [pc, #156]	; (8006dd0 <pbuf_realloc+0x108>)
 8006d32:	4826      	ldr	r0, [pc, #152]	; (8006dcc <pbuf_realloc+0x104>)
 8006d34:	f008 fedc 	bl	800faf0 <iprintf>
  while (rem_len > q->len) {
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	895b      	ldrh	r3, [r3, #10]
 8006d3c:	897a      	ldrh	r2, [r7, #10]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d8e1      	bhi.n	8006d06 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	7b1b      	ldrb	r3, [r3, #12]
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d121      	bne.n	8006d92 <pbuf_realloc+0xca>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	895b      	ldrh	r3, [r3, #10]
 8006d52:	897a      	ldrh	r2, [r7, #10]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d01c      	beq.n	8006d92 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	7b5b      	ldrb	r3, [r3, #13]
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d116      	bne.n	8006d92 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	897b      	ldrh	r3, [r7, #10]
 8006d70:	4413      	add	r3, r2
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	4619      	mov	r1, r3
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f7fe ffba 	bl	8005cf0 <mem_trim>
 8006d7c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d106      	bne.n	8006d92 <pbuf_realloc+0xca>
 8006d84:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <pbuf_realloc+0xfc>)
 8006d86:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006d8a:	4912      	ldr	r1, [pc, #72]	; (8006dd4 <pbuf_realloc+0x10c>)
 8006d8c:	480f      	ldr	r0, [pc, #60]	; (8006dcc <pbuf_realloc+0x104>)
 8006d8e:	f008 feaf 	bl	800faf0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	897a      	ldrh	r2, [r7, #10]
 8006d96:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	895a      	ldrh	r2, [r3, #10]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d004      	beq.n	8006db2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 f911 	bl	8006fd4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	e000      	b.n	8006dbc <pbuf_realloc+0xf4>
    return;
 8006dba:	bf00      	nop

}
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	080112ec 	.word	0x080112ec
 8006dc8:	08011404 	.word	0x08011404
 8006dcc:	0801134c 	.word	0x0801134c
 8006dd0:	0801141c 	.word	0x0801141c
 8006dd4:	08011434 	.word	0x08011434

08006dd8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	4613      	mov	r3, r2
 8006de4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d106      	bne.n	8006dfa <pbuf_add_header_impl+0x22>
 8006dec:	4b2b      	ldr	r3, [pc, #172]	; (8006e9c <pbuf_add_header_impl+0xc4>)
 8006dee:	f240 12df 	movw	r2, #479	; 0x1df
 8006df2:	492b      	ldr	r1, [pc, #172]	; (8006ea0 <pbuf_add_header_impl+0xc8>)
 8006df4:	482b      	ldr	r0, [pc, #172]	; (8006ea4 <pbuf_add_header_impl+0xcc>)
 8006df6:	f008 fe7b 	bl	800faf0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <pbuf_add_header_impl+0x30>
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e06:	d301      	bcc.n	8006e0c <pbuf_add_header_impl+0x34>
    return 1;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e043      	b.n	8006e94 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <pbuf_add_header_impl+0x3e>
    return 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	e03e      	b.n	8006e94 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	891a      	ldrh	r2, [r3, #8]
 8006e1e:	8a7b      	ldrh	r3, [r7, #18]
 8006e20:	4413      	add	r3, r2
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	8a7a      	ldrh	r2, [r7, #18]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d901      	bls.n	8006e2e <pbuf_add_header_impl+0x56>
    return 1;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e032      	b.n	8006e94 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	7b1b      	ldrb	r3, [r3, #12]
 8006e32:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006e34:	8a3b      	ldrh	r3, [r7, #16]
 8006e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00c      	beq.n	8006e58 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	425b      	negs	r3, r3
 8006e46:	4413      	add	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3310      	adds	r3, #16
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d20d      	bcs.n	8006e70 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e01d      	b.n	8006e94 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006e58:	79fb      	ldrb	r3, [r7, #7]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d006      	beq.n	8006e6c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	425b      	negs	r3, r3
 8006e66:	4413      	add	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]
 8006e6a:	e001      	b.n	8006e70 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e011      	b.n	8006e94 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	895a      	ldrh	r2, [r3, #10]
 8006e7a:	8a7b      	ldrh	r3, [r7, #18]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	891a      	ldrh	r2, [r3, #8]
 8006e88:	8a7b      	ldrh	r3, [r7, #18]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	811a      	strh	r2, [r3, #8]


  return 0;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	080112ec 	.word	0x080112ec
 8006ea0:	08011450 	.word	0x08011450
 8006ea4:	0801134c 	.word	0x0801134c

08006ea8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7ff ff8e 	bl	8006dd8 <pbuf_add_header_impl>
 8006ebc:	4603      	mov	r3, r0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d106      	bne.n	8006ee6 <pbuf_remove_header+0x1e>
 8006ed8:	4b20      	ldr	r3, [pc, #128]	; (8006f5c <pbuf_remove_header+0x94>)
 8006eda:	f240 224b 	movw	r2, #587	; 0x24b
 8006ede:	4920      	ldr	r1, [pc, #128]	; (8006f60 <pbuf_remove_header+0x98>)
 8006ee0:	4820      	ldr	r0, [pc, #128]	; (8006f64 <pbuf_remove_header+0x9c>)
 8006ee2:	f008 fe05 	bl	800faf0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <pbuf_remove_header+0x2c>
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef2:	d301      	bcc.n	8006ef8 <pbuf_remove_header+0x30>
    return 1;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e02c      	b.n	8006f52 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <pbuf_remove_header+0x3a>
    return 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	e027      	b.n	8006f52 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	895b      	ldrh	r3, [r3, #10]
 8006f0a:	89fa      	ldrh	r2, [r7, #14]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d908      	bls.n	8006f22 <pbuf_remove_header+0x5a>
 8006f10:	4b12      	ldr	r3, [pc, #72]	; (8006f5c <pbuf_remove_header+0x94>)
 8006f12:	f240 2255 	movw	r2, #597	; 0x255
 8006f16:	4914      	ldr	r1, [pc, #80]	; (8006f68 <pbuf_remove_header+0xa0>)
 8006f18:	4812      	ldr	r0, [pc, #72]	; (8006f64 <pbuf_remove_header+0x9c>)
 8006f1a:	f008 fde9 	bl	800faf0 <iprintf>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e017      	b.n	8006f52 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	441a      	add	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	895a      	ldrh	r2, [r3, #10]
 8006f38:	89fb      	ldrh	r3, [r7, #14]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	891a      	ldrh	r2, [r3, #8]
 8006f46:	89fb      	ldrh	r3, [r7, #14]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	080112ec 	.word	0x080112ec
 8006f60:	08011450 	.word	0x08011450
 8006f64:	0801134c 	.word	0x0801134c
 8006f68:	0801145c 	.word	0x0801145c

08006f6c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	807b      	strh	r3, [r7, #2]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006f7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	da08      	bge.n	8006f96 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006f84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f88:	425b      	negs	r3, r3
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff ff9b 	bl	8006ec8 <pbuf_remove_header>
 8006f92:	4603      	mov	r3, r0
 8006f94:	e007      	b.n	8006fa6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006f96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f9a:	787a      	ldrb	r2, [r7, #1]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff ff1a 	bl	8006dd8 <pbuf_add_header_impl>
 8006fa4:	4603      	mov	r3, r0
  }
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006fba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff ffd2 	bl	8006f6c <pbuf_header_impl>
 8006fc8:	4603      	mov	r3, r0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10b      	bne.n	8006ffa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d106      	bne.n	8006ff6 <pbuf_free+0x22>
 8006fe8:	4b38      	ldr	r3, [pc, #224]	; (80070cc <pbuf_free+0xf8>)
 8006fea:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006fee:	4938      	ldr	r1, [pc, #224]	; (80070d0 <pbuf_free+0xfc>)
 8006ff0:	4838      	ldr	r0, [pc, #224]	; (80070d4 <pbuf_free+0x100>)
 8006ff2:	f008 fd7d 	bl	800faf0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	e063      	b.n	80070c2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006ffe:	e05c      	b.n	80070ba <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	7b9b      	ldrb	r3, [r3, #14]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d106      	bne.n	8007016 <pbuf_free+0x42>
 8007008:	4b30      	ldr	r3, [pc, #192]	; (80070cc <pbuf_free+0xf8>)
 800700a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800700e:	4932      	ldr	r1, [pc, #200]	; (80070d8 <pbuf_free+0x104>)
 8007010:	4830      	ldr	r0, [pc, #192]	; (80070d4 <pbuf_free+0x100>)
 8007012:	f008 fd6d 	bl	800faf0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	7b9b      	ldrb	r3, [r3, #14]
 800701a:	3b01      	subs	r3, #1
 800701c:	b2da      	uxtb	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	739a      	strb	r2, [r3, #14]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	7b9b      	ldrb	r3, [r3, #14]
 8007026:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007028:	7dbb      	ldrb	r3, [r7, #22]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d143      	bne.n	80070b6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	7b1b      	ldrb	r3, [r3, #12]
 8007038:	f003 030f 	and.w	r3, r3, #15
 800703c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	7b5b      	ldrb	r3, [r3, #13]
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d011      	beq.n	800706e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d106      	bne.n	8007064 <pbuf_free+0x90>
 8007056:	4b1d      	ldr	r3, [pc, #116]	; (80070cc <pbuf_free+0xf8>)
 8007058:	f240 22ff 	movw	r2, #767	; 0x2ff
 800705c:	491f      	ldr	r1, [pc, #124]	; (80070dc <pbuf_free+0x108>)
 800705e:	481d      	ldr	r0, [pc, #116]	; (80070d4 <pbuf_free+0x100>)
 8007060:	f008 fd46 	bl	800faf0 <iprintf>
        pc->custom_free_function(p);
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	4798      	blx	r3
 800706c:	e01d      	b.n	80070aa <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800706e:	7bfb      	ldrb	r3, [r7, #15]
 8007070:	2b02      	cmp	r3, #2
 8007072:	d104      	bne.n	800707e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007074:	6879      	ldr	r1, [r7, #4]
 8007076:	2008      	movs	r0, #8
 8007078:	f7ff f936 	bl	80062e8 <memp_free>
 800707c:	e015      	b.n	80070aa <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d104      	bne.n	800708e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007084:	6879      	ldr	r1, [r7, #4]
 8007086:	2007      	movs	r0, #7
 8007088:	f7ff f92e 	bl	80062e8 <memp_free>
 800708c:	e00d      	b.n	80070aa <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800708e:	7bfb      	ldrb	r3, [r7, #15]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d103      	bne.n	800709c <pbuf_free+0xc8>
          mem_free(p);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7fe fdc1 	bl	8005c1c <mem_free>
 800709a:	e006      	b.n	80070aa <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800709c:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <pbuf_free+0xf8>)
 800709e:	f240 320f 	movw	r2, #783	; 0x30f
 80070a2:	490f      	ldr	r1, [pc, #60]	; (80070e0 <pbuf_free+0x10c>)
 80070a4:	480b      	ldr	r0, [pc, #44]	; (80070d4 <pbuf_free+0x100>)
 80070a6:	f008 fd23 	bl	800faf0 <iprintf>
        }
      }
      count++;
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	3301      	adds	r3, #1
 80070ae:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	607b      	str	r3, [r7, #4]
 80070b4:	e001      	b.n	80070ba <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d19f      	bne.n	8007000 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80070c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3718      	adds	r7, #24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	080112ec 	.word	0x080112ec
 80070d0:	08011450 	.word	0x08011450
 80070d4:	0801134c 	.word	0x0801134c
 80070d8:	0801147c 	.word	0x0801147c
 80070dc:	08011494 	.word	0x08011494
 80070e0:	080114b8 	.word	0x080114b8

080070e4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80070f0:	e005      	b.n	80070fe <pbuf_clen+0x1a>
    ++len;
 80070f2:	89fb      	ldrh	r3, [r7, #14]
 80070f4:	3301      	adds	r3, #1
 80070f6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1f6      	bne.n	80070f2 <pbuf_clen+0xe>
  }
  return len;
 8007104:	89fb      	ldrh	r3, [r7, #14]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d010      	beq.n	8007144 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	7b9b      	ldrb	r3, [r3, #14]
 8007126:	3301      	adds	r3, #1
 8007128:	b2da      	uxtb	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	7b9b      	ldrb	r3, [r3, #14]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d106      	bne.n	8007144 <pbuf_ref+0x30>
 8007136:	4b05      	ldr	r3, [pc, #20]	; (800714c <pbuf_ref+0x38>)
 8007138:	f240 3242 	movw	r2, #834	; 0x342
 800713c:	4904      	ldr	r1, [pc, #16]	; (8007150 <pbuf_ref+0x3c>)
 800713e:	4805      	ldr	r0, [pc, #20]	; (8007154 <pbuf_ref+0x40>)
 8007140:	f008 fcd6 	bl	800faf0 <iprintf>
  }
}
 8007144:	bf00      	nop
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	080112ec 	.word	0x080112ec
 8007150:	080114cc 	.word	0x080114cc
 8007154:	0801134c 	.word	0x0801134c

08007158 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <pbuf_cat+0x16>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d107      	bne.n	800717e <pbuf_cat+0x26>
 800716e:	4b20      	ldr	r3, [pc, #128]	; (80071f0 <pbuf_cat+0x98>)
 8007170:	f240 3259 	movw	r2, #857	; 0x359
 8007174:	491f      	ldr	r1, [pc, #124]	; (80071f4 <pbuf_cat+0x9c>)
 8007176:	4820      	ldr	r0, [pc, #128]	; (80071f8 <pbuf_cat+0xa0>)
 8007178:	f008 fcba 	bl	800faf0 <iprintf>
 800717c:	e034      	b.n	80071e8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	e00a      	b.n	800719a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	891a      	ldrh	r2, [r3, #8]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	891b      	ldrh	r3, [r3, #8]
 800718c:	4413      	add	r3, r2
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1f0      	bne.n	8007184 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	891a      	ldrh	r2, [r3, #8]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	895b      	ldrh	r3, [r3, #10]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d006      	beq.n	80071bc <pbuf_cat+0x64>
 80071ae:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <pbuf_cat+0x98>)
 80071b0:	f240 3262 	movw	r2, #866	; 0x362
 80071b4:	4911      	ldr	r1, [pc, #68]	; (80071fc <pbuf_cat+0xa4>)
 80071b6:	4810      	ldr	r0, [pc, #64]	; (80071f8 <pbuf_cat+0xa0>)
 80071b8:	f008 fc9a 	bl	800faf0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d006      	beq.n	80071d2 <pbuf_cat+0x7a>
 80071c4:	4b0a      	ldr	r3, [pc, #40]	; (80071f0 <pbuf_cat+0x98>)
 80071c6:	f240 3263 	movw	r2, #867	; 0x363
 80071ca:	490d      	ldr	r1, [pc, #52]	; (8007200 <pbuf_cat+0xa8>)
 80071cc:	480a      	ldr	r0, [pc, #40]	; (80071f8 <pbuf_cat+0xa0>)
 80071ce:	f008 fc8f 	bl	800faf0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	891a      	ldrh	r2, [r3, #8]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	891b      	ldrh	r3, [r3, #8]
 80071da:	4413      	add	r3, r2
 80071dc:	b29a      	uxth	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	080112ec 	.word	0x080112ec
 80071f4:	080114e0 	.word	0x080114e0
 80071f8:	0801134c 	.word	0x0801134c
 80071fc:	08011518 	.word	0x08011518
 8007200:	08011548 	.word	0x08011548

08007204 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff ffa1 	bl	8007158 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007216:	6838      	ldr	r0, [r7, #0]
 8007218:	f7ff ff7c 	bl	8007114 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800722e:	2300      	movs	r3, #0
 8007230:	617b      	str	r3, [r7, #20]
 8007232:	2300      	movs	r3, #0
 8007234:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d008      	beq.n	800724e <pbuf_copy+0x2a>
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <pbuf_copy+0x2a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	891a      	ldrh	r2, [r3, #8]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	891b      	ldrh	r3, [r3, #8]
 800724a:	429a      	cmp	r2, r3
 800724c:	d209      	bcs.n	8007262 <pbuf_copy+0x3e>
 800724e:	4b57      	ldr	r3, [pc, #348]	; (80073ac <pbuf_copy+0x188>)
 8007250:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007254:	4956      	ldr	r1, [pc, #344]	; (80073b0 <pbuf_copy+0x18c>)
 8007256:	4857      	ldr	r0, [pc, #348]	; (80073b4 <pbuf_copy+0x190>)
 8007258:	f008 fc4a 	bl	800faf0 <iprintf>
 800725c:	f06f 030f 	mvn.w	r3, #15
 8007260:	e09f      	b.n	80073a2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	895b      	ldrh	r3, [r3, #10]
 8007266:	461a      	mov	r2, r3
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	1ad2      	subs	r2, r2, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	895b      	ldrh	r3, [r3, #10]
 8007270:	4619      	mov	r1, r3
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1acb      	subs	r3, r1, r3
 8007276:	429a      	cmp	r2, r3
 8007278:	d306      	bcc.n	8007288 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	895b      	ldrh	r3, [r3, #10]
 800727e:	461a      	mov	r2, r3
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	e005      	b.n	8007294 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	895b      	ldrh	r3, [r3, #10]
 800728c:	461a      	mov	r2, r3
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	18d0      	adds	r0, r2, r3
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	4413      	add	r3, r2
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	4619      	mov	r1, r3
 80072a8:	f008 fc0c 	bl	800fac4 <memcpy>
    offset_to += len;
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	4413      	add	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4413      	add	r3, r2
 80072ba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	895b      	ldrh	r3, [r3, #10]
 80072c0:	461a      	mov	r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d906      	bls.n	80072d6 <pbuf_copy+0xb2>
 80072c8:	4b38      	ldr	r3, [pc, #224]	; (80073ac <pbuf_copy+0x188>)
 80072ca:	f240 32d9 	movw	r2, #985	; 0x3d9
 80072ce:	493a      	ldr	r1, [pc, #232]	; (80073b8 <pbuf_copy+0x194>)
 80072d0:	4838      	ldr	r0, [pc, #224]	; (80073b4 <pbuf_copy+0x190>)
 80072d2:	f008 fc0d 	bl	800faf0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	895b      	ldrh	r3, [r3, #10]
 80072da:	461a      	mov	r2, r3
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	4293      	cmp	r3, r2
 80072e0:	d906      	bls.n	80072f0 <pbuf_copy+0xcc>
 80072e2:	4b32      	ldr	r3, [pc, #200]	; (80073ac <pbuf_copy+0x188>)
 80072e4:	f240 32da 	movw	r2, #986	; 0x3da
 80072e8:	4934      	ldr	r1, [pc, #208]	; (80073bc <pbuf_copy+0x198>)
 80072ea:	4832      	ldr	r0, [pc, #200]	; (80073b4 <pbuf_copy+0x190>)
 80072ec:	f008 fc00 	bl	800faf0 <iprintf>
    if (offset_from >= p_from->len) {
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	895b      	ldrh	r3, [r3, #10]
 80072f4:	461a      	mov	r2, r3
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d304      	bcc.n	8007306 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	895b      	ldrh	r3, [r3, #10]
 800730a:	461a      	mov	r2, r3
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	4293      	cmp	r3, r2
 8007310:	d114      	bne.n	800733c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10c      	bne.n	800733c <pbuf_copy+0x118>
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d009      	beq.n	800733c <pbuf_copy+0x118>
 8007328:	4b20      	ldr	r3, [pc, #128]	; (80073ac <pbuf_copy+0x188>)
 800732a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800732e:	4924      	ldr	r1, [pc, #144]	; (80073c0 <pbuf_copy+0x19c>)
 8007330:	4820      	ldr	r0, [pc, #128]	; (80073b4 <pbuf_copy+0x190>)
 8007332:	f008 fbdd 	bl	800faf0 <iprintf>
 8007336:	f06f 030f 	mvn.w	r3, #15
 800733a:	e032      	b.n	80073a2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d013      	beq.n	800736a <pbuf_copy+0x146>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	895a      	ldrh	r2, [r3, #10]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	891b      	ldrh	r3, [r3, #8]
 800734a:	429a      	cmp	r2, r3
 800734c:	d10d      	bne.n	800736a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d009      	beq.n	800736a <pbuf_copy+0x146>
 8007356:	4b15      	ldr	r3, [pc, #84]	; (80073ac <pbuf_copy+0x188>)
 8007358:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800735c:	4919      	ldr	r1, [pc, #100]	; (80073c4 <pbuf_copy+0x1a0>)
 800735e:	4815      	ldr	r0, [pc, #84]	; (80073b4 <pbuf_copy+0x190>)
 8007360:	f008 fbc6 	bl	800faf0 <iprintf>
 8007364:	f06f 0305 	mvn.w	r3, #5
 8007368:	e01b      	b.n	80073a2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d013      	beq.n	8007398 <pbuf_copy+0x174>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	895a      	ldrh	r2, [r3, #10]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	891b      	ldrh	r3, [r3, #8]
 8007378:	429a      	cmp	r2, r3
 800737a:	d10d      	bne.n	8007398 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d009      	beq.n	8007398 <pbuf_copy+0x174>
 8007384:	4b09      	ldr	r3, [pc, #36]	; (80073ac <pbuf_copy+0x188>)
 8007386:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800738a:	490e      	ldr	r1, [pc, #56]	; (80073c4 <pbuf_copy+0x1a0>)
 800738c:	4809      	ldr	r0, [pc, #36]	; (80073b4 <pbuf_copy+0x190>)
 800738e:	f008 fbaf 	bl	800faf0 <iprintf>
 8007392:	f06f 0305 	mvn.w	r3, #5
 8007396:	e004      	b.n	80073a2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	f47f af61 	bne.w	8007262 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	080112ec 	.word	0x080112ec
 80073b0:	08011594 	.word	0x08011594
 80073b4:	0801134c 	.word	0x0801134c
 80073b8:	080115c4 	.word	0x080115c4
 80073bc:	080115dc 	.word	0x080115dc
 80073c0:	080115f8 	.word	0x080115f8
 80073c4:	08011608 	.word	0x08011608

080073c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	4611      	mov	r1, r2
 80073d4:	461a      	mov	r2, r3
 80073d6:	460b      	mov	r3, r1
 80073d8:	80fb      	strh	r3, [r7, #6]
 80073da:	4613      	mov	r3, r2
 80073dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80073de:	2300      	movs	r3, #0
 80073e0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80073e2:	2300      	movs	r3, #0
 80073e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d108      	bne.n	80073fe <pbuf_copy_partial+0x36>
 80073ec:	4b2b      	ldr	r3, [pc, #172]	; (800749c <pbuf_copy_partial+0xd4>)
 80073ee:	f240 420a 	movw	r2, #1034	; 0x40a
 80073f2:	492b      	ldr	r1, [pc, #172]	; (80074a0 <pbuf_copy_partial+0xd8>)
 80073f4:	482b      	ldr	r0, [pc, #172]	; (80074a4 <pbuf_copy_partial+0xdc>)
 80073f6:	f008 fb7b 	bl	800faf0 <iprintf>
 80073fa:	2300      	movs	r3, #0
 80073fc:	e04a      	b.n	8007494 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d108      	bne.n	8007416 <pbuf_copy_partial+0x4e>
 8007404:	4b25      	ldr	r3, [pc, #148]	; (800749c <pbuf_copy_partial+0xd4>)
 8007406:	f240 420b 	movw	r2, #1035	; 0x40b
 800740a:	4927      	ldr	r1, [pc, #156]	; (80074a8 <pbuf_copy_partial+0xe0>)
 800740c:	4825      	ldr	r0, [pc, #148]	; (80074a4 <pbuf_copy_partial+0xdc>)
 800740e:	f008 fb6f 	bl	800faf0 <iprintf>
 8007412:	2300      	movs	r3, #0
 8007414:	e03e      	b.n	8007494 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	61fb      	str	r3, [r7, #28]
 800741a:	e034      	b.n	8007486 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800741c:	88bb      	ldrh	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <pbuf_copy_partial+0x70>
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	895b      	ldrh	r3, [r3, #10]
 8007426:	88ba      	ldrh	r2, [r7, #4]
 8007428:	429a      	cmp	r2, r3
 800742a:	d305      	bcc.n	8007438 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	895b      	ldrh	r3, [r3, #10]
 8007430:	88ba      	ldrh	r2, [r7, #4]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	80bb      	strh	r3, [r7, #4]
 8007436:	e023      	b.n	8007480 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	895a      	ldrh	r2, [r3, #10]
 800743c:	88bb      	ldrh	r3, [r7, #4]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007442:	8b3a      	ldrh	r2, [r7, #24]
 8007444:	88fb      	ldrh	r3, [r7, #6]
 8007446:	429a      	cmp	r2, r3
 8007448:	d901      	bls.n	800744e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800744a:	88fb      	ldrh	r3, [r7, #6]
 800744c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800744e:	8b7b      	ldrh	r3, [r7, #26]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	18d0      	adds	r0, r2, r3
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	88bb      	ldrh	r3, [r7, #4]
 800745a:	4413      	add	r3, r2
 800745c:	8b3a      	ldrh	r2, [r7, #24]
 800745e:	4619      	mov	r1, r3
 8007460:	f008 fb30 	bl	800fac4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007464:	8afa      	ldrh	r2, [r7, #22]
 8007466:	8b3b      	ldrh	r3, [r7, #24]
 8007468:	4413      	add	r3, r2
 800746a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800746c:	8b7a      	ldrh	r2, [r7, #26]
 800746e:	8b3b      	ldrh	r3, [r7, #24]
 8007470:	4413      	add	r3, r2
 8007472:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007474:	88fa      	ldrh	r2, [r7, #6]
 8007476:	8b3b      	ldrh	r3, [r7, #24]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	61fb      	str	r3, [r7, #28]
 8007486:	88fb      	ldrh	r3, [r7, #6]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <pbuf_copy_partial+0xca>
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1c4      	bne.n	800741c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007492:	8afb      	ldrh	r3, [r7, #22]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3720      	adds	r7, #32
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	080112ec 	.word	0x080112ec
 80074a0:	08011634 	.word	0x08011634
 80074a4:	0801134c 	.word	0x0801134c
 80074a8:	08011654 	.word	0x08011654

080074ac <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	603a      	str	r2, [r7, #0]
 80074b6:	71fb      	strb	r3, [r7, #7]
 80074b8:	460b      	mov	r3, r1
 80074ba:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	8919      	ldrh	r1, [r3, #8]
 80074c0:	88ba      	ldrh	r2, [r7, #4]
 80074c2:	79fb      	ldrb	r3, [r7, #7]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff faa1 	bl	8006a0c <pbuf_alloc>
 80074ca:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <pbuf_clone+0x2a>
    return NULL;
 80074d2:	2300      	movs	r3, #0
 80074d4:	e011      	b.n	80074fa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f7ff fea3 	bl	8007224 <pbuf_copy>
 80074de:	4603      	mov	r3, r0
 80074e0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80074e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d006      	beq.n	80074f8 <pbuf_clone+0x4c>
 80074ea:	4b06      	ldr	r3, [pc, #24]	; (8007504 <pbuf_clone+0x58>)
 80074ec:	f240 5224 	movw	r2, #1316	; 0x524
 80074f0:	4905      	ldr	r1, [pc, #20]	; (8007508 <pbuf_clone+0x5c>)
 80074f2:	4806      	ldr	r0, [pc, #24]	; (800750c <pbuf_clone+0x60>)
 80074f4:	f008 fafc 	bl	800faf0 <iprintf>
  return q;
 80074f8:	68fb      	ldr	r3, [r7, #12]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	080112ec 	.word	0x080112ec
 8007508:	08011760 	.word	0x08011760
 800750c:	0801134c 	.word	0x0801134c

08007510 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007514:	f008 fb7a 	bl	800fc0c <rand>
 8007518:	4603      	mov	r3, r0
 800751a:	b29b      	uxth	r3, r3
 800751c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007520:	b29b      	uxth	r3, r3
 8007522:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007526:	b29a      	uxth	r2, r3
 8007528:	4b01      	ldr	r3, [pc, #4]	; (8007530 <tcp_init+0x20>)
 800752a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800752c:	bf00      	nop
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20000020 	.word	0x20000020

08007534 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	7d1b      	ldrb	r3, [r3, #20]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d105      	bne.n	8007550 <tcp_free+0x1c>
 8007544:	4b06      	ldr	r3, [pc, #24]	; (8007560 <tcp_free+0x2c>)
 8007546:	22d4      	movs	r2, #212	; 0xd4
 8007548:	4906      	ldr	r1, [pc, #24]	; (8007564 <tcp_free+0x30>)
 800754a:	4807      	ldr	r0, [pc, #28]	; (8007568 <tcp_free+0x34>)
 800754c:	f008 fad0 	bl	800faf0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007550:	6879      	ldr	r1, [r7, #4]
 8007552:	2001      	movs	r0, #1
 8007554:	f7fe fec8 	bl	80062e8 <memp_free>
}
 8007558:	bf00      	nop
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	080117ec 	.word	0x080117ec
 8007564:	0801181c 	.word	0x0801181c
 8007568:	08011830 	.word	0x08011830

0800756c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	7d1b      	ldrb	r3, [r3, #20]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d105      	bne.n	8007588 <tcp_free_listen+0x1c>
 800757c:	4b06      	ldr	r3, [pc, #24]	; (8007598 <tcp_free_listen+0x2c>)
 800757e:	22df      	movs	r2, #223	; 0xdf
 8007580:	4906      	ldr	r1, [pc, #24]	; (800759c <tcp_free_listen+0x30>)
 8007582:	4807      	ldr	r0, [pc, #28]	; (80075a0 <tcp_free_listen+0x34>)
 8007584:	f008 fab4 	bl	800faf0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007588:	6879      	ldr	r1, [r7, #4]
 800758a:	2002      	movs	r0, #2
 800758c:	f7fe feac 	bl	80062e8 <memp_free>
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	080117ec 	.word	0x080117ec
 800759c:	08011858 	.word	0x08011858
 80075a0:	08011830 	.word	0x08011830

080075a4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80075a8:	f000 fea2 	bl	80082f0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80075ac:	4b07      	ldr	r3, [pc, #28]	; (80075cc <tcp_tmr+0x28>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	3301      	adds	r3, #1
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	4b05      	ldr	r3, [pc, #20]	; (80075cc <tcp_tmr+0x28>)
 80075b6:	701a      	strb	r2, [r3, #0]
 80075b8:	4b04      	ldr	r3, [pc, #16]	; (80075cc <tcp_tmr+0x28>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80075c4:	f000 fb54 	bl	8007c70 <tcp_slowtmr>
  }
}
 80075c8:	bf00      	nop
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	200087c5 	.word	0x200087c5

080075d0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d105      	bne.n	80075ec <tcp_remove_listener+0x1c>
 80075e0:	4b0d      	ldr	r3, [pc, #52]	; (8007618 <tcp_remove_listener+0x48>)
 80075e2:	22ff      	movs	r2, #255	; 0xff
 80075e4:	490d      	ldr	r1, [pc, #52]	; (800761c <tcp_remove_listener+0x4c>)
 80075e6:	480e      	ldr	r0, [pc, #56]	; (8007620 <tcp_remove_listener+0x50>)
 80075e8:	f008 fa82 	bl	800faf0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	e00a      	b.n	8007608 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d102      	bne.n	8007602 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1f1      	bne.n	80075f2 <tcp_remove_listener+0x22>
    }
  }
}
 800760e:	bf00      	nop
 8007610:	bf00      	nop
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	080117ec 	.word	0x080117ec
 800761c:	08011874 	.word	0x08011874
 8007620:	08011830 	.word	0x08011830

08007624 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d106      	bne.n	8007640 <tcp_listen_closed+0x1c>
 8007632:	4b14      	ldr	r3, [pc, #80]	; (8007684 <tcp_listen_closed+0x60>)
 8007634:	f240 1211 	movw	r2, #273	; 0x111
 8007638:	4913      	ldr	r1, [pc, #76]	; (8007688 <tcp_listen_closed+0x64>)
 800763a:	4814      	ldr	r0, [pc, #80]	; (800768c <tcp_listen_closed+0x68>)
 800763c:	f008 fa58 	bl	800faf0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	7d1b      	ldrb	r3, [r3, #20]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d006      	beq.n	8007656 <tcp_listen_closed+0x32>
 8007648:	4b0e      	ldr	r3, [pc, #56]	; (8007684 <tcp_listen_closed+0x60>)
 800764a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800764e:	4910      	ldr	r1, [pc, #64]	; (8007690 <tcp_listen_closed+0x6c>)
 8007650:	480e      	ldr	r0, [pc, #56]	; (800768c <tcp_listen_closed+0x68>)
 8007652:	f008 fa4d 	bl	800faf0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007656:	2301      	movs	r3, #1
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	e00b      	b.n	8007674 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800765c:	4a0d      	ldr	r2, [pc, #52]	; (8007694 <tcp_listen_closed+0x70>)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6879      	ldr	r1, [r7, #4]
 8007668:	4618      	mov	r0, r3
 800766a:	f7ff ffb1 	bl	80075d0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3301      	adds	r3, #1
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b03      	cmp	r3, #3
 8007678:	d9f0      	bls.n	800765c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800767a:	bf00      	nop
 800767c:	bf00      	nop
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	080117ec 	.word	0x080117ec
 8007688:	0801189c 	.word	0x0801189c
 800768c:	08011830 	.word	0x08011830
 8007690:	080118a8 	.word	0x080118a8
 8007694:	080137cc 	.word	0x080137cc

08007698 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007698:	b5b0      	push	{r4, r5, r7, lr}
 800769a:	b088      	sub	sp, #32
 800769c:	af04      	add	r7, sp, #16
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d106      	bne.n	80076b8 <tcp_close_shutdown+0x20>
 80076aa:	4b63      	ldr	r3, [pc, #396]	; (8007838 <tcp_close_shutdown+0x1a0>)
 80076ac:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80076b0:	4962      	ldr	r1, [pc, #392]	; (800783c <tcp_close_shutdown+0x1a4>)
 80076b2:	4863      	ldr	r0, [pc, #396]	; (8007840 <tcp_close_shutdown+0x1a8>)
 80076b4:	f008 fa1c 	bl	800faf0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80076b8:	78fb      	ldrb	r3, [r7, #3]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d066      	beq.n	800778c <tcp_close_shutdown+0xf4>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	7d1b      	ldrb	r3, [r3, #20]
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	d003      	beq.n	80076ce <tcp_close_shutdown+0x36>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	7d1b      	ldrb	r3, [r3, #20]
 80076ca:	2b07      	cmp	r3, #7
 80076cc:	d15e      	bne.n	800778c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d104      	bne.n	80076e0 <tcp_close_shutdown+0x48>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076da:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80076de:	d055      	beq.n	800778c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	8b5b      	ldrh	r3, [r3, #26]
 80076e4:	f003 0310 	and.w	r3, r3, #16
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d106      	bne.n	80076fa <tcp_close_shutdown+0x62>
 80076ec:	4b52      	ldr	r3, [pc, #328]	; (8007838 <tcp_close_shutdown+0x1a0>)
 80076ee:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80076f2:	4954      	ldr	r1, [pc, #336]	; (8007844 <tcp_close_shutdown+0x1ac>)
 80076f4:	4852      	ldr	r0, [pc, #328]	; (8007840 <tcp_close_shutdown+0x1a8>)
 80076f6:	f008 f9fb 	bl	800faf0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007702:	687d      	ldr	r5, [r7, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3304      	adds	r3, #4
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	8ad2      	ldrh	r2, [r2, #22]
 800770c:	6879      	ldr	r1, [r7, #4]
 800770e:	8b09      	ldrh	r1, [r1, #24]
 8007710:	9102      	str	r1, [sp, #8]
 8007712:	9201      	str	r2, [sp, #4]
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	462b      	mov	r3, r5
 8007718:	4622      	mov	r2, r4
 800771a:	4601      	mov	r1, r0
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f004 fe91 	bl	800c444 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 f8c6 	bl	80088b4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007728:	4b47      	ldr	r3, [pc, #284]	; (8007848 <tcp_close_shutdown+0x1b0>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	429a      	cmp	r2, r3
 8007730:	d105      	bne.n	800773e <tcp_close_shutdown+0xa6>
 8007732:	4b45      	ldr	r3, [pc, #276]	; (8007848 <tcp_close_shutdown+0x1b0>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	4a43      	ldr	r2, [pc, #268]	; (8007848 <tcp_close_shutdown+0x1b0>)
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	e013      	b.n	8007766 <tcp_close_shutdown+0xce>
 800773e:	4b42      	ldr	r3, [pc, #264]	; (8007848 <tcp_close_shutdown+0x1b0>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	e00c      	b.n	8007760 <tcp_close_shutdown+0xc8>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	429a      	cmp	r2, r3
 800774e:	d104      	bne.n	800775a <tcp_close_shutdown+0xc2>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	60da      	str	r2, [r3, #12]
 8007758:	e005      	b.n	8007766 <tcp_close_shutdown+0xce>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1ef      	bne.n	8007746 <tcp_close_shutdown+0xae>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	60da      	str	r2, [r3, #12]
 800776c:	4b37      	ldr	r3, [pc, #220]	; (800784c <tcp_close_shutdown+0x1b4>)
 800776e:	2201      	movs	r2, #1
 8007770:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007772:	4b37      	ldr	r3, [pc, #220]	; (8007850 <tcp_close_shutdown+0x1b8>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	429a      	cmp	r2, r3
 800777a:	d102      	bne.n	8007782 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800777c:	f003 fd5e 	bl	800b23c <tcp_trigger_input_pcb_close>
 8007780:	e002      	b.n	8007788 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7ff fed6 	bl	8007534 <tcp_free>
      }
      return ERR_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	e050      	b.n	800782e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	7d1b      	ldrb	r3, [r3, #20]
 8007790:	2b02      	cmp	r3, #2
 8007792:	d03b      	beq.n	800780c <tcp_close_shutdown+0x174>
 8007794:	2b02      	cmp	r3, #2
 8007796:	dc44      	bgt.n	8007822 <tcp_close_shutdown+0x18a>
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <tcp_close_shutdown+0x10a>
 800779c:	2b01      	cmp	r3, #1
 800779e:	d02a      	beq.n	80077f6 <tcp_close_shutdown+0x15e>
 80077a0:	e03f      	b.n	8007822 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	8adb      	ldrh	r3, [r3, #22]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d021      	beq.n	80077ee <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80077aa:	4b2a      	ldr	r3, [pc, #168]	; (8007854 <tcp_close_shutdown+0x1bc>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d105      	bne.n	80077c0 <tcp_close_shutdown+0x128>
 80077b4:	4b27      	ldr	r3, [pc, #156]	; (8007854 <tcp_close_shutdown+0x1bc>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	4a26      	ldr	r2, [pc, #152]	; (8007854 <tcp_close_shutdown+0x1bc>)
 80077bc:	6013      	str	r3, [r2, #0]
 80077be:	e013      	b.n	80077e8 <tcp_close_shutdown+0x150>
 80077c0:	4b24      	ldr	r3, [pc, #144]	; (8007854 <tcp_close_shutdown+0x1bc>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	60bb      	str	r3, [r7, #8]
 80077c6:	e00c      	b.n	80077e2 <tcp_close_shutdown+0x14a>
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d104      	bne.n	80077dc <tcp_close_shutdown+0x144>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	60da      	str	r2, [r3, #12]
 80077da:	e005      	b.n	80077e8 <tcp_close_shutdown+0x150>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	60bb      	str	r3, [r7, #8]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1ef      	bne.n	80077c8 <tcp_close_shutdown+0x130>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7ff fea0 	bl	8007534 <tcp_free>
      break;
 80077f4:	e01a      	b.n	800782c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff ff14 	bl	8007624 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80077fc:	6879      	ldr	r1, [r7, #4]
 80077fe:	4816      	ldr	r0, [pc, #88]	; (8007858 <tcp_close_shutdown+0x1c0>)
 8007800:	f001 f8a8 	bl	8008954 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7ff feb1 	bl	800756c <tcp_free_listen>
      break;
 800780a:	e00f      	b.n	800782c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800780c:	6879      	ldr	r1, [r7, #4]
 800780e:	480e      	ldr	r0, [pc, #56]	; (8007848 <tcp_close_shutdown+0x1b0>)
 8007810:	f001 f8a0 	bl	8008954 <tcp_pcb_remove>
 8007814:	4b0d      	ldr	r3, [pc, #52]	; (800784c <tcp_close_shutdown+0x1b4>)
 8007816:	2201      	movs	r2, #1
 8007818:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff fe8a 	bl	8007534 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007820:	e004      	b.n	800782c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f81a 	bl	800785c <tcp_close_shutdown_fin>
 8007828:	4603      	mov	r3, r0
 800782a:	e000      	b.n	800782e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bdb0      	pop	{r4, r5, r7, pc}
 8007836:	bf00      	nop
 8007838:	080117ec 	.word	0x080117ec
 800783c:	080118c0 	.word	0x080118c0
 8007840:	08011830 	.word	0x08011830
 8007844:	080118e0 	.word	0x080118e0
 8007848:	200087bc 	.word	0x200087bc
 800784c:	200087c4 	.word	0x200087c4
 8007850:	200087fc 	.word	0x200087fc
 8007854:	200087b4 	.word	0x200087b4
 8007858:	200087b8 	.word	0x200087b8

0800785c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d106      	bne.n	8007878 <tcp_close_shutdown_fin+0x1c>
 800786a:	4b2e      	ldr	r3, [pc, #184]	; (8007924 <tcp_close_shutdown_fin+0xc8>)
 800786c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007870:	492d      	ldr	r1, [pc, #180]	; (8007928 <tcp_close_shutdown_fin+0xcc>)
 8007872:	482e      	ldr	r0, [pc, #184]	; (800792c <tcp_close_shutdown_fin+0xd0>)
 8007874:	f008 f93c 	bl	800faf0 <iprintf>

  switch (pcb->state) {
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	7d1b      	ldrb	r3, [r3, #20]
 800787c:	2b07      	cmp	r3, #7
 800787e:	d020      	beq.n	80078c2 <tcp_close_shutdown_fin+0x66>
 8007880:	2b07      	cmp	r3, #7
 8007882:	dc2b      	bgt.n	80078dc <tcp_close_shutdown_fin+0x80>
 8007884:	2b03      	cmp	r3, #3
 8007886:	d002      	beq.n	800788e <tcp_close_shutdown_fin+0x32>
 8007888:	2b04      	cmp	r3, #4
 800788a:	d00d      	beq.n	80078a8 <tcp_close_shutdown_fin+0x4c>
 800788c:	e026      	b.n	80078dc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f003 fee6 	bl	800b660 <tcp_send_fin>
 8007894:	4603      	mov	r3, r0
 8007896:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d11f      	bne.n	80078e0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2205      	movs	r2, #5
 80078a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80078a6:	e01b      	b.n	80078e0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f003 fed9 	bl	800b660 <tcp_send_fin>
 80078ae:	4603      	mov	r3, r0
 80078b0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80078b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d114      	bne.n	80078e4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2205      	movs	r2, #5
 80078be:	751a      	strb	r2, [r3, #20]
      }
      break;
 80078c0:	e010      	b.n	80078e4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f003 fecc 	bl	800b660 <tcp_send_fin>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80078cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d109      	bne.n	80078e8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2209      	movs	r2, #9
 80078d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80078da:	e005      	b.n	80078e8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	e01c      	b.n	800791a <tcp_close_shutdown_fin+0xbe>
      break;
 80078e0:	bf00      	nop
 80078e2:	e002      	b.n	80078ea <tcp_close_shutdown_fin+0x8e>
      break;
 80078e4:	bf00      	nop
 80078e6:	e000      	b.n	80078ea <tcp_close_shutdown_fin+0x8e>
      break;
 80078e8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80078ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d103      	bne.n	80078fa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f003 fff2 	bl	800b8dc <tcp_output>
 80078f8:	e00d      	b.n	8007916 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80078fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007902:	d108      	bne.n	8007916 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	8b5b      	ldrh	r3, [r3, #26]
 8007908:	f043 0308 	orr.w	r3, r3, #8
 800790c:	b29a      	uxth	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	e001      	b.n	800791a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007916:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	080117ec 	.word	0x080117ec
 8007928:	0801189c 	.word	0x0801189c
 800792c:	08011830 	.word	0x08011830

08007930 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d109      	bne.n	8007952 <tcp_close+0x22>
 800793e:	4b0f      	ldr	r3, [pc, #60]	; (800797c <tcp_close+0x4c>)
 8007940:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007944:	490e      	ldr	r1, [pc, #56]	; (8007980 <tcp_close+0x50>)
 8007946:	480f      	ldr	r0, [pc, #60]	; (8007984 <tcp_close+0x54>)
 8007948:	f008 f8d2 	bl	800faf0 <iprintf>
 800794c:	f06f 030f 	mvn.w	r3, #15
 8007950:	e00f      	b.n	8007972 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	7d1b      	ldrb	r3, [r3, #20]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d006      	beq.n	8007968 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	8b5b      	ldrh	r3, [r3, #26]
 800795e:	f043 0310 	orr.w	r3, r3, #16
 8007962:	b29a      	uxth	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007968:	2101      	movs	r1, #1
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7ff fe94 	bl	8007698 <tcp_close_shutdown>
 8007970:	4603      	mov	r3, r0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	080117ec 	.word	0x080117ec
 8007980:	080118fc 	.word	0x080118fc
 8007984:	08011830 	.word	0x08011830

08007988 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08e      	sub	sp, #56	; 0x38
 800798c:	af04      	add	r7, sp, #16
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d107      	bne.n	80079a8 <tcp_abandon+0x20>
 8007998:	4b52      	ldr	r3, [pc, #328]	; (8007ae4 <tcp_abandon+0x15c>)
 800799a:	f240 223d 	movw	r2, #573	; 0x23d
 800799e:	4952      	ldr	r1, [pc, #328]	; (8007ae8 <tcp_abandon+0x160>)
 80079a0:	4852      	ldr	r0, [pc, #328]	; (8007aec <tcp_abandon+0x164>)
 80079a2:	f008 f8a5 	bl	800faf0 <iprintf>
 80079a6:	e099      	b.n	8007adc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	7d1b      	ldrb	r3, [r3, #20]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d106      	bne.n	80079be <tcp_abandon+0x36>
 80079b0:	4b4c      	ldr	r3, [pc, #304]	; (8007ae4 <tcp_abandon+0x15c>)
 80079b2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80079b6:	494e      	ldr	r1, [pc, #312]	; (8007af0 <tcp_abandon+0x168>)
 80079b8:	484c      	ldr	r0, [pc, #304]	; (8007aec <tcp_abandon+0x164>)
 80079ba:	f008 f899 	bl	800faf0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	7d1b      	ldrb	r3, [r3, #20]
 80079c2:	2b0a      	cmp	r3, #10
 80079c4:	d107      	bne.n	80079d6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80079c6:	6879      	ldr	r1, [r7, #4]
 80079c8:	484a      	ldr	r0, [pc, #296]	; (8007af4 <tcp_abandon+0x16c>)
 80079ca:	f000 ffc3 	bl	8008954 <tcp_pcb_remove>
    tcp_free(pcb);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff fdb0 	bl	8007534 <tcp_free>
 80079d4:	e082      	b.n	8007adc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80079d6:	2300      	movs	r3, #0
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	7d1b      	ldrb	r3, [r3, #20]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d126      	bne.n	8007a4e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	8adb      	ldrh	r3, [r3, #22]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d02e      	beq.n	8007a66 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007a08:	4b3b      	ldr	r3, [pc, #236]	; (8007af8 <tcp_abandon+0x170>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d105      	bne.n	8007a1e <tcp_abandon+0x96>
 8007a12:	4b39      	ldr	r3, [pc, #228]	; (8007af8 <tcp_abandon+0x170>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	4a37      	ldr	r2, [pc, #220]	; (8007af8 <tcp_abandon+0x170>)
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	e013      	b.n	8007a46 <tcp_abandon+0xbe>
 8007a1e:	4b36      	ldr	r3, [pc, #216]	; (8007af8 <tcp_abandon+0x170>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	61fb      	str	r3, [r7, #28]
 8007a24:	e00c      	b.n	8007a40 <tcp_abandon+0xb8>
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d104      	bne.n	8007a3a <tcp_abandon+0xb2>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	60da      	str	r2, [r3, #12]
 8007a38:	e005      	b.n	8007a46 <tcp_abandon+0xbe>
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	61fb      	str	r3, [r7, #28]
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1ef      	bne.n	8007a26 <tcp_abandon+0x9e>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	60da      	str	r2, [r3, #12]
 8007a4c:	e00b      	b.n	8007a66 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	8adb      	ldrh	r3, [r3, #22]
 8007a56:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007a58:	6879      	ldr	r1, [r7, #4]
 8007a5a:	4828      	ldr	r0, [pc, #160]	; (8007afc <tcp_abandon+0x174>)
 8007a5c:	f000 ff7a 	bl	8008954 <tcp_pcb_remove>
 8007a60:	4b27      	ldr	r3, [pc, #156]	; (8007b00 <tcp_abandon+0x178>)
 8007a62:	2201      	movs	r2, #1
 8007a64:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d004      	beq.n	8007a78 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 fd1c 	bl	80084b0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fd13 	bl	80084b0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d004      	beq.n	8007a9c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fd0a 	bl	80084b0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00e      	beq.n	8007ac0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007aa2:	6879      	ldr	r1, [r7, #4]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	8b12      	ldrh	r2, [r2, #24]
 8007aac:	9202      	str	r2, [sp, #8]
 8007aae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007ab0:	9201      	str	r2, [sp, #4]
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	69b9      	ldr	r1, [r7, #24]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f004 fcc2 	bl	800c444 <tcp_rst>
    }
    last_state = pcb->state;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	7d1b      	ldrb	r3, [r3, #20]
 8007ac4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7ff fd34 	bl	8007534 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d004      	beq.n	8007adc <tcp_abandon+0x154>
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f06f 010c 	mvn.w	r1, #12
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	4798      	blx	r3
  }
}
 8007adc:	3728      	adds	r7, #40	; 0x28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	080117ec 	.word	0x080117ec
 8007ae8:	08011930 	.word	0x08011930
 8007aec:	08011830 	.word	0x08011830
 8007af0:	0801194c 	.word	0x0801194c
 8007af4:	200087c0 	.word	0x200087c0
 8007af8:	200087b4 	.word	0x200087b4
 8007afc:	200087bc 	.word	0x200087bc
 8007b00:	200087c4 	.word	0x200087c4

08007b04 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7ff ff3a 	bl	8007988 <tcp_abandon>
}
 8007b14:	bf00      	nop
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d106      	bne.n	8007b38 <tcp_update_rcv_ann_wnd+0x1c>
 8007b2a:	4b25      	ldr	r3, [pc, #148]	; (8007bc0 <tcp_update_rcv_ann_wnd+0xa4>)
 8007b2c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007b30:	4924      	ldr	r1, [pc, #144]	; (8007bc4 <tcp_update_rcv_ann_wnd+0xa8>)
 8007b32:	4825      	ldr	r0, [pc, #148]	; (8007bc8 <tcp_update_rcv_ann_wnd+0xac>)
 8007b34:	f007 ffdc 	bl	800faf0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007b40:	4413      	add	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007b4c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007b50:	bf28      	it	cs
 8007b52:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007b56:	b292      	uxth	r2, r2
 8007b58:	4413      	add	r3, r2
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	db08      	blt.n	8007b74 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	e020      	b.n	8007bb6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	dd03      	ble.n	8007b8a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b88:	e014      	b.n	8007bb4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b9c:	d306      	bcc.n	8007bac <tcp_update_rcv_ann_wnd+0x90>
 8007b9e:	4b08      	ldr	r3, [pc, #32]	; (8007bc0 <tcp_update_rcv_ann_wnd+0xa4>)
 8007ba0:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007ba4:	4909      	ldr	r1, [pc, #36]	; (8007bcc <tcp_update_rcv_ann_wnd+0xb0>)
 8007ba6:	4808      	ldr	r0, [pc, #32]	; (8007bc8 <tcp_update_rcv_ann_wnd+0xac>)
 8007ba8:	f007 ffa2 	bl	800faf0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007bb4:	2300      	movs	r3, #0
  }
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	080117ec 	.word	0x080117ec
 8007bc4:	08011a48 	.word	0x08011a48
 8007bc8:	08011830 	.word	0x08011830
 8007bcc:	08011a6c 	.word	0x08011a6c

08007bd0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d107      	bne.n	8007bf2 <tcp_recved+0x22>
 8007be2:	4b1f      	ldr	r3, [pc, #124]	; (8007c60 <tcp_recved+0x90>)
 8007be4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007be8:	491e      	ldr	r1, [pc, #120]	; (8007c64 <tcp_recved+0x94>)
 8007bea:	481f      	ldr	r0, [pc, #124]	; (8007c68 <tcp_recved+0x98>)
 8007bec:	f007 ff80 	bl	800faf0 <iprintf>
 8007bf0:	e032      	b.n	8007c58 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	7d1b      	ldrb	r3, [r3, #20]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d106      	bne.n	8007c08 <tcp_recved+0x38>
 8007bfa:	4b19      	ldr	r3, [pc, #100]	; (8007c60 <tcp_recved+0x90>)
 8007bfc:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007c00:	491a      	ldr	r1, [pc, #104]	; (8007c6c <tcp_recved+0x9c>)
 8007c02:	4819      	ldr	r0, [pc, #100]	; (8007c68 <tcp_recved+0x98>)
 8007c04:	f007 ff74 	bl	800faf0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007c0c:	887b      	ldrh	r3, [r7, #2]
 8007c0e:	4413      	add	r3, r2
 8007c10:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007c12:	89fb      	ldrh	r3, [r7, #14]
 8007c14:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007c18:	d804      	bhi.n	8007c24 <tcp_recved+0x54>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1e:	89fa      	ldrh	r2, [r7, #14]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d204      	bcs.n	8007c2e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007c2a:	851a      	strh	r2, [r3, #40]	; 0x28
 8007c2c:	e002      	b.n	8007c34 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	89fa      	ldrh	r2, [r7, #14]
 8007c32:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7ff ff71 	bl	8007b1c <tcp_update_rcv_ann_wnd>
 8007c3a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007c42:	d309      	bcc.n	8007c58 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	8b5b      	ldrh	r3, [r3, #26]
 8007c48:	f043 0302 	orr.w	r3, r3, #2
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f003 fe42 	bl	800b8dc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	080117ec 	.word	0x080117ec
 8007c64:	08011a88 	.word	0x08011a88
 8007c68:	08011830 	.word	0x08011830
 8007c6c:	08011aa0 	.word	0x08011aa0

08007c70 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007c70:	b5b0      	push	{r4, r5, r7, lr}
 8007c72:	b090      	sub	sp, #64	; 0x40
 8007c74:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007c7c:	4b94      	ldr	r3, [pc, #592]	; (8007ed0 <tcp_slowtmr+0x260>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3301      	adds	r3, #1
 8007c82:	4a93      	ldr	r2, [pc, #588]	; (8007ed0 <tcp_slowtmr+0x260>)
 8007c84:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007c86:	4b93      	ldr	r3, [pc, #588]	; (8007ed4 <tcp_slowtmr+0x264>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	4b91      	ldr	r3, [pc, #580]	; (8007ed4 <tcp_slowtmr+0x264>)
 8007c90:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007c92:	2300      	movs	r3, #0
 8007c94:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007c96:	4b90      	ldr	r3, [pc, #576]	; (8007ed8 <tcp_slowtmr+0x268>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007c9c:	e29d      	b.n	80081da <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca0:	7d1b      	ldrb	r3, [r3, #20]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d106      	bne.n	8007cb4 <tcp_slowtmr+0x44>
 8007ca6:	4b8d      	ldr	r3, [pc, #564]	; (8007edc <tcp_slowtmr+0x26c>)
 8007ca8:	f240 42be 	movw	r2, #1214	; 0x4be
 8007cac:	498c      	ldr	r1, [pc, #560]	; (8007ee0 <tcp_slowtmr+0x270>)
 8007cae:	488d      	ldr	r0, [pc, #564]	; (8007ee4 <tcp_slowtmr+0x274>)
 8007cb0:	f007 ff1e 	bl	800faf0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	7d1b      	ldrb	r3, [r3, #20]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d106      	bne.n	8007cca <tcp_slowtmr+0x5a>
 8007cbc:	4b87      	ldr	r3, [pc, #540]	; (8007edc <tcp_slowtmr+0x26c>)
 8007cbe:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007cc2:	4989      	ldr	r1, [pc, #548]	; (8007ee8 <tcp_slowtmr+0x278>)
 8007cc4:	4887      	ldr	r0, [pc, #540]	; (8007ee4 <tcp_slowtmr+0x274>)
 8007cc6:	f007 ff13 	bl	800faf0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ccc:	7d1b      	ldrb	r3, [r3, #20]
 8007cce:	2b0a      	cmp	r3, #10
 8007cd0:	d106      	bne.n	8007ce0 <tcp_slowtmr+0x70>
 8007cd2:	4b82      	ldr	r3, [pc, #520]	; (8007edc <tcp_slowtmr+0x26c>)
 8007cd4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007cd8:	4984      	ldr	r1, [pc, #528]	; (8007eec <tcp_slowtmr+0x27c>)
 8007cda:	4882      	ldr	r0, [pc, #520]	; (8007ee4 <tcp_slowtmr+0x274>)
 8007cdc:	f007 ff08 	bl	800faf0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	7f9a      	ldrb	r2, [r3, #30]
 8007ce4:	4b7b      	ldr	r3, [pc, #492]	; (8007ed4 <tcp_slowtmr+0x264>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d105      	bne.n	8007cf8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007cf6:	e270      	b.n	80081da <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007cf8:	4b76      	ldr	r3, [pc, #472]	; (8007ed4 <tcp_slowtmr+0x264>)
 8007cfa:	781a      	ldrb	r2, [r3, #0]
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007d06:	2300      	movs	r3, #0
 8007d08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0e:	7d1b      	ldrb	r3, [r3, #20]
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d10a      	bne.n	8007d2a <tcp_slowtmr+0xba>
 8007d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	d905      	bls.n	8007d2a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d22:	3301      	adds	r3, #1
 8007d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d28:	e11e      	b.n	8007f68 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d30:	2b0b      	cmp	r3, #11
 8007d32:	d905      	bls.n	8007d40 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d38:	3301      	adds	r3, #1
 8007d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d3e:	e113      	b.n	8007f68 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d075      	beq.n	8007e36 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d006      	beq.n	8007d60 <tcp_slowtmr+0xf0>
 8007d52:	4b62      	ldr	r3, [pc, #392]	; (8007edc <tcp_slowtmr+0x26c>)
 8007d54:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007d58:	4965      	ldr	r1, [pc, #404]	; (8007ef0 <tcp_slowtmr+0x280>)
 8007d5a:	4862      	ldr	r0, [pc, #392]	; (8007ee4 <tcp_slowtmr+0x274>)
 8007d5c:	f007 fec8 	bl	800faf0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d106      	bne.n	8007d76 <tcp_slowtmr+0x106>
 8007d68:	4b5c      	ldr	r3, [pc, #368]	; (8007edc <tcp_slowtmr+0x26c>)
 8007d6a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007d6e:	4961      	ldr	r1, [pc, #388]	; (8007ef4 <tcp_slowtmr+0x284>)
 8007d70:	485c      	ldr	r0, [pc, #368]	; (8007ee4 <tcp_slowtmr+0x274>)
 8007d72:	f007 febd 	bl	800faf0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d78:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007d7c:	2b0b      	cmp	r3, #11
 8007d7e:	d905      	bls.n	8007d8c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d84:	3301      	adds	r3, #1
 8007d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d8a:	e0ed      	b.n	8007f68 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007d92:	3b01      	subs	r3, #1
 8007d94:	4a58      	ldr	r2, [pc, #352]	; (8007ef8 <tcp_slowtmr+0x288>)
 8007d96:	5cd3      	ldrb	r3, [r2, r3]
 8007d98:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007da0:	7c7a      	ldrb	r2, [r7, #17]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d907      	bls.n	8007db6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007dac:	3301      	adds	r3, #1
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007dbc:	7c7a      	ldrb	r2, [r7, #17]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	f200 80d2 	bhi.w	8007f68 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d108      	bne.n	8007de4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007dd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dd4:	f004 fc2a 	bl	800c62c <tcp_zero_window_probe>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d014      	beq.n	8007e08 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007dde:	2300      	movs	r3, #0
 8007de0:	623b      	str	r3, [r7, #32]
 8007de2:	e011      	b.n	8007e08 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007dea:	4619      	mov	r1, r3
 8007dec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dee:	f003 faef 	bl	800b3d0 <tcp_split_unsent_seg>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d107      	bne.n	8007e08 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007df8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dfa:	f003 fd6f 	bl	800b8dc <tcp_output>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f000 80ac 	beq.w	8007f68 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007e1e:	2b06      	cmp	r3, #6
 8007e20:	f200 80a2 	bhi.w	8007f68 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e26:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e30:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007e34:	e098      	b.n	8007f68 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e38:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	db0f      	blt.n	8007e60 <tcp_slowtmr+0x1f0>
 8007e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e42:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007e46:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d008      	beq.n	8007e60 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	3301      	adds	r3, #1
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	b21a      	sxth	r2, r3
 8007e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e62:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e68:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	db7b      	blt.n	8007f68 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007e70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e72:	f004 f825 	bl	800bec0 <tcp_rexmit_rto_prepare>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d007      	beq.n	8007e8c <tcp_slowtmr+0x21c>
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d171      	bne.n	8007f68 <tcp_slowtmr+0x2f8>
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d06d      	beq.n	8007f68 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8e:	7d1b      	ldrb	r3, [r3, #20]
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d03a      	beq.n	8007f0a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e9a:	2b0c      	cmp	r3, #12
 8007e9c:	bf28      	it	cs
 8007e9e:	230c      	movcs	r3, #12
 8007ea0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007ea8:	10db      	asrs	r3, r3, #3
 8007eaa:	b21b      	sxth	r3, r3
 8007eac:	461a      	mov	r2, r3
 8007eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007eb4:	4413      	add	r3, r2
 8007eb6:	7efa      	ldrb	r2, [r7, #27]
 8007eb8:	4910      	ldr	r1, [pc, #64]	; (8007efc <tcp_slowtmr+0x28c>)
 8007eba:	5c8a      	ldrb	r2, [r1, r2]
 8007ebc:	4093      	lsls	r3, r2
 8007ebe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	dc1a      	bgt.n	8007f00 <tcp_slowtmr+0x290>
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	b21a      	sxth	r2, r3
 8007ece:	e019      	b.n	8007f04 <tcp_slowtmr+0x294>
 8007ed0:	200087b0 	.word	0x200087b0
 8007ed4:	200087c6 	.word	0x200087c6
 8007ed8:	200087bc 	.word	0x200087bc
 8007edc:	080117ec 	.word	0x080117ec
 8007ee0:	08011b30 	.word	0x08011b30
 8007ee4:	08011830 	.word	0x08011830
 8007ee8:	08011b5c 	.word	0x08011b5c
 8007eec:	08011b88 	.word	0x08011b88
 8007ef0:	08011bb8 	.word	0x08011bb8
 8007ef4:	08011bec 	.word	0x08011bec
 8007ef8:	080137c4 	.word	0x080137c4
 8007efc:	080137b4 	.word	0x080137b4
 8007f00:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	bf28      	it	cs
 8007f20:	4613      	movcs	r3, r2
 8007f22:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007f24:	8a7b      	ldrh	r3, [r7, #18]
 8007f26:	085b      	lsrs	r3, r3, #1
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f32:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f3a:	005b      	lsls	r3, r3, #1
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d206      	bcs.n	8007f50 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f52:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007f62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f64:	f004 f81c 	bl	800bfa0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6a:	7d1b      	ldrb	r3, [r3, #20]
 8007f6c:	2b06      	cmp	r3, #6
 8007f6e:	d111      	bne.n	8007f94 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	8b5b      	ldrh	r3, [r3, #26]
 8007f74:	f003 0310 	and.w	r3, r3, #16
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00b      	beq.n	8007f94 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f7c:	4b9c      	ldr	r3, [pc, #624]	; (80081f0 <tcp_slowtmr+0x580>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	2b28      	cmp	r3, #40	; 0x28
 8007f88:	d904      	bls.n	8007f94 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f8e:	3301      	adds	r3, #1
 8007f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f96:	7a5b      	ldrb	r3, [r3, #9]
 8007f98:	f003 0308 	and.w	r3, r3, #8
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d04a      	beq.n	8008036 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007fa4:	2b04      	cmp	r3, #4
 8007fa6:	d003      	beq.n	8007fb0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007faa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007fac:	2b07      	cmp	r3, #7
 8007fae:	d142      	bne.n	8008036 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007fb0:	4b8f      	ldr	r3, [pc, #572]	; (80081f0 <tcp_slowtmr+0x580>)
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb6:	6a1b      	ldr	r3, [r3, #32]
 8007fb8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007fc0:	4b8c      	ldr	r3, [pc, #560]	; (80081f4 <tcp_slowtmr+0x584>)
 8007fc2:	440b      	add	r3, r1
 8007fc4:	498c      	ldr	r1, [pc, #560]	; (80081f8 <tcp_slowtmr+0x588>)
 8007fc6:	fba1 1303 	umull	r1, r3, r1, r3
 8007fca:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d90a      	bls.n	8007fe6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007fda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fde:	3301      	adds	r3, #1
 8007fe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007fe4:	e027      	b.n	8008036 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007fe6:	4b82      	ldr	r3, [pc, #520]	; (80081f0 <tcp_slowtmr+0x580>)
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	4b7f      	ldr	r3, [pc, #508]	; (80081fc <tcp_slowtmr+0x58c>)
 8008000:	fb00 f303 	mul.w	r3, r0, r3
 8008004:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008006:	497c      	ldr	r1, [pc, #496]	; (80081f8 <tcp_slowtmr+0x588>)
 8008008:	fba1 1303 	umull	r1, r3, r1, r3
 800800c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800800e:	429a      	cmp	r2, r3
 8008010:	d911      	bls.n	8008036 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8008012:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008014:	f004 faca 	bl	800c5ac <tcp_keepalive>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800801e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008022:	2b00      	cmp	r3, #0
 8008024:	d107      	bne.n	8008036 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800802c:	3301      	adds	r3, #1
 800802e:	b2da      	uxtb	r2, r3
 8008030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008032:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800803a:	2b00      	cmp	r3, #0
 800803c:	d011      	beq.n	8008062 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800803e:	4b6c      	ldr	r3, [pc, #432]	; (80081f0 <tcp_slowtmr+0x580>)
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	1ad2      	subs	r2, r2, r3
 8008048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800804e:	4619      	mov	r1, r3
 8008050:	460b      	mov	r3, r1
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	440b      	add	r3, r1
 8008056:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008058:	429a      	cmp	r2, r3
 800805a:	d302      	bcc.n	8008062 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800805c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800805e:	f000 fddd 	bl	8008c1c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008064:	7d1b      	ldrb	r3, [r3, #20]
 8008066:	2b03      	cmp	r3, #3
 8008068:	d10b      	bne.n	8008082 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800806a:	4b61      	ldr	r3, [pc, #388]	; (80081f0 <tcp_slowtmr+0x580>)
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	2b28      	cmp	r3, #40	; 0x28
 8008076:	d904      	bls.n	8008082 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800807c:	3301      	adds	r3, #1
 800807e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008084:	7d1b      	ldrb	r3, [r3, #20]
 8008086:	2b09      	cmp	r3, #9
 8008088:	d10b      	bne.n	80080a2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800808a:	4b59      	ldr	r3, [pc, #356]	; (80081f0 <tcp_slowtmr+0x580>)
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	2bf0      	cmp	r3, #240	; 0xf0
 8008096:	d904      	bls.n	80080a2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800809c:	3301      	adds	r3, #1
 800809e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80080a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d060      	beq.n	800816c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80080aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80080b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080b4:	f000 fbfe 	bl	80088b4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80080b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d010      	beq.n	80080e0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80080be:	4b50      	ldr	r3, [pc, #320]	; (8008200 <tcp_slowtmr+0x590>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d106      	bne.n	80080d6 <tcp_slowtmr+0x466>
 80080c8:	4b4e      	ldr	r3, [pc, #312]	; (8008204 <tcp_slowtmr+0x594>)
 80080ca:	f240 526d 	movw	r2, #1389	; 0x56d
 80080ce:	494e      	ldr	r1, [pc, #312]	; (8008208 <tcp_slowtmr+0x598>)
 80080d0:	484e      	ldr	r0, [pc, #312]	; (800820c <tcp_slowtmr+0x59c>)
 80080d2:	f007 fd0d 	bl	800faf0 <iprintf>
        prev->next = pcb->next;
 80080d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d8:	68da      	ldr	r2, [r3, #12]
 80080da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080dc:	60da      	str	r2, [r3, #12]
 80080de:	e00f      	b.n	8008100 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80080e0:	4b47      	ldr	r3, [pc, #284]	; (8008200 <tcp_slowtmr+0x590>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d006      	beq.n	80080f8 <tcp_slowtmr+0x488>
 80080ea:	4b46      	ldr	r3, [pc, #280]	; (8008204 <tcp_slowtmr+0x594>)
 80080ec:	f240 5271 	movw	r2, #1393	; 0x571
 80080f0:	4947      	ldr	r1, [pc, #284]	; (8008210 <tcp_slowtmr+0x5a0>)
 80080f2:	4846      	ldr	r0, [pc, #280]	; (800820c <tcp_slowtmr+0x59c>)
 80080f4:	f007 fcfc 	bl	800faf0 <iprintf>
        tcp_active_pcbs = pcb->next;
 80080f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	4a40      	ldr	r2, [pc, #256]	; (8008200 <tcp_slowtmr+0x590>)
 80080fe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008100:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008104:	2b00      	cmp	r3, #0
 8008106:	d013      	beq.n	8008130 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008110:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008114:	3304      	adds	r3, #4
 8008116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008118:	8ad2      	ldrh	r2, [r2, #22]
 800811a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800811c:	8b09      	ldrh	r1, [r1, #24]
 800811e:	9102      	str	r1, [sp, #8]
 8008120:	9201      	str	r2, [sp, #4]
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	462b      	mov	r3, r5
 8008126:	4622      	mov	r2, r4
 8008128:	4601      	mov	r1, r0
 800812a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800812c:	f004 f98a 	bl	800c444 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008138:	7d1b      	ldrb	r3, [r3, #20]
 800813a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008146:	6838      	ldr	r0, [r7, #0]
 8008148:	f7ff f9f4 	bl	8007534 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800814c:	4b31      	ldr	r3, [pc, #196]	; (8008214 <tcp_slowtmr+0x5a4>)
 800814e:	2200      	movs	r2, #0
 8008150:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d004      	beq.n	8008162 <tcp_slowtmr+0x4f2>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f06f 010c 	mvn.w	r1, #12
 800815e:	68b8      	ldr	r0, [r7, #8]
 8008160:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008162:	4b2c      	ldr	r3, [pc, #176]	; (8008214 <tcp_slowtmr+0x5a4>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d037      	beq.n	80081da <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800816a:	e592      	b.n	8007c92 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800816c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008178:	7f1b      	ldrb	r3, [r3, #28]
 800817a:	3301      	adds	r3, #1
 800817c:	b2da      	uxtb	r2, r3
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008184:	7f1a      	ldrb	r2, [r3, #28]
 8008186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008188:	7f5b      	ldrb	r3, [r3, #29]
 800818a:	429a      	cmp	r2, r3
 800818c:	d325      	bcc.n	80081da <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	2200      	movs	r2, #0
 8008192:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008194:	4b1f      	ldr	r3, [pc, #124]	; (8008214 <tcp_slowtmr+0x5a4>)
 8008196:	2200      	movs	r2, #0
 8008198:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800819a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00b      	beq.n	80081bc <tcp_slowtmr+0x54c>
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081ac:	6912      	ldr	r2, [r2, #16]
 80081ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081b0:	4610      	mov	r0, r2
 80081b2:	4798      	blx	r3
 80081b4:	4603      	mov	r3, r0
 80081b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80081ba:	e002      	b.n	80081c2 <tcp_slowtmr+0x552>
 80081bc:	2300      	movs	r3, #0
 80081be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80081c2:	4b14      	ldr	r3, [pc, #80]	; (8008214 <tcp_slowtmr+0x5a4>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d000      	beq.n	80081cc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80081ca:	e562      	b.n	8007c92 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80081cc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d102      	bne.n	80081da <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80081d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081d6:	f003 fb81 	bl	800b8dc <tcp_output>
  while (pcb != NULL) {
 80081da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f47f ad5e 	bne.w	8007c9e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80081e6:	4b0c      	ldr	r3, [pc, #48]	; (8008218 <tcp_slowtmr+0x5a8>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80081ec:	e069      	b.n	80082c2 <tcp_slowtmr+0x652>
 80081ee:	bf00      	nop
 80081f0:	200087b0 	.word	0x200087b0
 80081f4:	000a4cb8 	.word	0x000a4cb8
 80081f8:	10624dd3 	.word	0x10624dd3
 80081fc:	000124f8 	.word	0x000124f8
 8008200:	200087bc 	.word	0x200087bc
 8008204:	080117ec 	.word	0x080117ec
 8008208:	08011c24 	.word	0x08011c24
 800820c:	08011830 	.word	0x08011830
 8008210:	08011c50 	.word	0x08011c50
 8008214:	200087c4 	.word	0x200087c4
 8008218:	200087c0 	.word	0x200087c0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800821c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821e:	7d1b      	ldrb	r3, [r3, #20]
 8008220:	2b0a      	cmp	r3, #10
 8008222:	d006      	beq.n	8008232 <tcp_slowtmr+0x5c2>
 8008224:	4b2b      	ldr	r3, [pc, #172]	; (80082d4 <tcp_slowtmr+0x664>)
 8008226:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800822a:	492b      	ldr	r1, [pc, #172]	; (80082d8 <tcp_slowtmr+0x668>)
 800822c:	482b      	ldr	r0, [pc, #172]	; (80082dc <tcp_slowtmr+0x66c>)
 800822e:	f007 fc5f 	bl	800faf0 <iprintf>
    pcb_remove = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008238:	4b29      	ldr	r3, [pc, #164]	; (80082e0 <tcp_slowtmr+0x670>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2bf0      	cmp	r3, #240	; 0xf0
 8008244:	d904      	bls.n	8008250 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800824a:	3301      	adds	r3, #1
 800824c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008254:	2b00      	cmp	r3, #0
 8008256:	d02f      	beq.n	80082b8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008258:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800825a:	f000 fb2b 	bl	80088b4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800825e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008260:	2b00      	cmp	r3, #0
 8008262:	d010      	beq.n	8008286 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008264:	4b1f      	ldr	r3, [pc, #124]	; (80082e4 <tcp_slowtmr+0x674>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800826a:	429a      	cmp	r2, r3
 800826c:	d106      	bne.n	800827c <tcp_slowtmr+0x60c>
 800826e:	4b19      	ldr	r3, [pc, #100]	; (80082d4 <tcp_slowtmr+0x664>)
 8008270:	f240 52af 	movw	r2, #1455	; 0x5af
 8008274:	491c      	ldr	r1, [pc, #112]	; (80082e8 <tcp_slowtmr+0x678>)
 8008276:	4819      	ldr	r0, [pc, #100]	; (80082dc <tcp_slowtmr+0x66c>)
 8008278:	f007 fc3a 	bl	800faf0 <iprintf>
        prev->next = pcb->next;
 800827c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	60da      	str	r2, [r3, #12]
 8008284:	e00f      	b.n	80082a6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008286:	4b17      	ldr	r3, [pc, #92]	; (80082e4 <tcp_slowtmr+0x674>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800828c:	429a      	cmp	r2, r3
 800828e:	d006      	beq.n	800829e <tcp_slowtmr+0x62e>
 8008290:	4b10      	ldr	r3, [pc, #64]	; (80082d4 <tcp_slowtmr+0x664>)
 8008292:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008296:	4915      	ldr	r1, [pc, #84]	; (80082ec <tcp_slowtmr+0x67c>)
 8008298:	4810      	ldr	r0, [pc, #64]	; (80082dc <tcp_slowtmr+0x66c>)
 800829a:	f007 fc29 	bl	800faf0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800829e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	4a10      	ldr	r2, [pc, #64]	; (80082e4 <tcp_slowtmr+0x674>)
 80082a4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80082a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80082aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80082b0:	69f8      	ldr	r0, [r7, #28]
 80082b2:	f7ff f93f 	bl	8007534 <tcp_free>
 80082b6:	e004      	b.n	80082c2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80082b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1a9      	bne.n	800821c <tcp_slowtmr+0x5ac>
    }
  }
}
 80082c8:	bf00      	nop
 80082ca:	bf00      	nop
 80082cc:	3730      	adds	r7, #48	; 0x30
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bdb0      	pop	{r4, r5, r7, pc}
 80082d2:	bf00      	nop
 80082d4:	080117ec 	.word	0x080117ec
 80082d8:	08011c7c 	.word	0x08011c7c
 80082dc:	08011830 	.word	0x08011830
 80082e0:	200087b0 	.word	0x200087b0
 80082e4:	200087c0 	.word	0x200087c0
 80082e8:	08011cac 	.word	0x08011cac
 80082ec:	08011cd4 	.word	0x08011cd4

080082f0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80082f6:	4b2d      	ldr	r3, [pc, #180]	; (80083ac <tcp_fasttmr+0xbc>)
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	3301      	adds	r3, #1
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	4b2b      	ldr	r3, [pc, #172]	; (80083ac <tcp_fasttmr+0xbc>)
 8008300:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008302:	4b2b      	ldr	r3, [pc, #172]	; (80083b0 <tcp_fasttmr+0xc0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008308:	e048      	b.n	800839c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	7f9a      	ldrb	r2, [r3, #30]
 800830e:	4b27      	ldr	r3, [pc, #156]	; (80083ac <tcp_fasttmr+0xbc>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	429a      	cmp	r2, r3
 8008314:	d03f      	beq.n	8008396 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008316:	4b25      	ldr	r3, [pc, #148]	; (80083ac <tcp_fasttmr+0xbc>)
 8008318:	781a      	ldrb	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	8b5b      	ldrh	r3, [r3, #26]
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	d010      	beq.n	800834c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	8b5b      	ldrh	r3, [r3, #26]
 800832e:	f043 0302 	orr.w	r3, r3, #2
 8008332:	b29a      	uxth	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f003 facf 	bl	800b8dc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	8b5b      	ldrh	r3, [r3, #26]
 8008342:	f023 0303 	bic.w	r3, r3, #3
 8008346:	b29a      	uxth	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	8b5b      	ldrh	r3, [r3, #26]
 8008350:	f003 0308 	and.w	r3, r3, #8
 8008354:	2b00      	cmp	r3, #0
 8008356:	d009      	beq.n	800836c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	8b5b      	ldrh	r3, [r3, #26]
 800835c:	f023 0308 	bic.w	r3, r3, #8
 8008360:	b29a      	uxth	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7ff fa78 	bl	800785c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800837a:	4b0e      	ldr	r3, [pc, #56]	; (80083b4 <tcp_fasttmr+0xc4>)
 800837c:	2200      	movs	r2, #0
 800837e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f819 	bl	80083b8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008386:	4b0b      	ldr	r3, [pc, #44]	; (80083b4 <tcp_fasttmr+0xc4>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d000      	beq.n	8008390 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800838e:	e7b8      	b.n	8008302 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	607b      	str	r3, [r7, #4]
 8008394:	e002      	b.n	800839c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1b3      	bne.n	800830a <tcp_fasttmr+0x1a>
    }
  }
}
 80083a2:	bf00      	nop
 80083a4:	bf00      	nop
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	200087c6 	.word	0x200087c6
 80083b0:	200087bc 	.word	0x200087bc
 80083b4:	200087c4 	.word	0x200087c4

080083b8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80083b8:	b590      	push	{r4, r7, lr}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d109      	bne.n	80083da <tcp_process_refused_data+0x22>
 80083c6:	4b37      	ldr	r3, [pc, #220]	; (80084a4 <tcp_process_refused_data+0xec>)
 80083c8:	f240 6209 	movw	r2, #1545	; 0x609
 80083cc:	4936      	ldr	r1, [pc, #216]	; (80084a8 <tcp_process_refused_data+0xf0>)
 80083ce:	4837      	ldr	r0, [pc, #220]	; (80084ac <tcp_process_refused_data+0xf4>)
 80083d0:	f007 fb8e 	bl	800faf0 <iprintf>
 80083d4:	f06f 030f 	mvn.w	r3, #15
 80083d8:	e060      	b.n	800849c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083de:	7b5b      	ldrb	r3, [r3, #13]
 80083e0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083e6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00b      	beq.n	8008410 <tcp_process_refused_data+0x58>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6918      	ldr	r0, [r3, #16]
 8008402:	2300      	movs	r3, #0
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	47a0      	blx	r4
 800840a:	4603      	mov	r3, r0
 800840c:	73fb      	strb	r3, [r7, #15]
 800840e:	e007      	b.n	8008420 <tcp_process_refused_data+0x68>
 8008410:	2300      	movs	r3, #0
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	6879      	ldr	r1, [r7, #4]
 8008416:	2000      	movs	r0, #0
 8008418:	f000 f8a4 	bl	8008564 <tcp_recv_null>
 800841c:	4603      	mov	r3, r0
 800841e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d12a      	bne.n	800847e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	f003 0320 	and.w	r3, r3, #32
 800842e:	2b00      	cmp	r3, #0
 8008430:	d033      	beq.n	800849a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008436:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800843a:	d005      	beq.n	8008448 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008440:	3301      	adds	r3, #1
 8008442:	b29a      	uxth	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00b      	beq.n	800846a <tcp_process_refused_data+0xb2>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6918      	ldr	r0, [r3, #16]
 800845c:	2300      	movs	r3, #0
 800845e:	2200      	movs	r2, #0
 8008460:	6879      	ldr	r1, [r7, #4]
 8008462:	47a0      	blx	r4
 8008464:	4603      	mov	r3, r0
 8008466:	73fb      	strb	r3, [r7, #15]
 8008468:	e001      	b.n	800846e <tcp_process_refused_data+0xb6>
 800846a:	2300      	movs	r3, #0
 800846c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800846e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008472:	f113 0f0d 	cmn.w	r3, #13
 8008476:	d110      	bne.n	800849a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008478:	f06f 030c 	mvn.w	r3, #12
 800847c:	e00e      	b.n	800849c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800847e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008482:	f113 0f0d 	cmn.w	r3, #13
 8008486:	d102      	bne.n	800848e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008488:	f06f 030c 	mvn.w	r3, #12
 800848c:	e006      	b.n	800849c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008494:	f06f 0304 	mvn.w	r3, #4
 8008498:	e000      	b.n	800849c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd90      	pop	{r4, r7, pc}
 80084a4:	080117ec 	.word	0x080117ec
 80084a8:	08011cfc 	.word	0x08011cfc
 80084ac:	08011830 	.word	0x08011830

080084b0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80084b8:	e007      	b.n	80084ca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f80a 	bl	80084da <tcp_seg_free>
    seg = next;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1f4      	bne.n	80084ba <tcp_segs_free+0xa>
  }
}
 80084d0:	bf00      	nop
 80084d2:	bf00      	nop
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00c      	beq.n	8008502 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d004      	beq.n	80084fa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe fd6d 	bl	8006fd4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80084fa:	6879      	ldr	r1, [r7, #4]
 80084fc:	2003      	movs	r0, #3
 80084fe:	f7fd fef3 	bl	80062e8 <memp_free>
  }
}
 8008502:	bf00      	nop
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d106      	bne.n	8008528 <tcp_seg_copy+0x1c>
 800851a:	4b0f      	ldr	r3, [pc, #60]	; (8008558 <tcp_seg_copy+0x4c>)
 800851c:	f240 6282 	movw	r2, #1666	; 0x682
 8008520:	490e      	ldr	r1, [pc, #56]	; (800855c <tcp_seg_copy+0x50>)
 8008522:	480f      	ldr	r0, [pc, #60]	; (8008560 <tcp_seg_copy+0x54>)
 8008524:	f007 fae4 	bl	800faf0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008528:	2003      	movs	r0, #3
 800852a:	f7fd fe6d 	bl	8006208 <memp_malloc>
 800852e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <tcp_seg_copy+0x2e>
    return NULL;
 8008536:	2300      	movs	r3, #0
 8008538:	e00a      	b.n	8008550 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800853a:	2210      	movs	r2, #16
 800853c:	6879      	ldr	r1, [r7, #4]
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f007 fac0 	bl	800fac4 <memcpy>
  pbuf_ref(cseg->p);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	4618      	mov	r0, r3
 800854a:	f7fe fde3 	bl	8007114 <pbuf_ref>
  return cseg;
 800854e:	68fb      	ldr	r3, [r7, #12]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	080117ec 	.word	0x080117ec
 800855c:	08011d40 	.word	0x08011d40
 8008560:	08011830 	.word	0x08011830

08008564 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
 8008570:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d109      	bne.n	800858c <tcp_recv_null+0x28>
 8008578:	4b12      	ldr	r3, [pc, #72]	; (80085c4 <tcp_recv_null+0x60>)
 800857a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800857e:	4912      	ldr	r1, [pc, #72]	; (80085c8 <tcp_recv_null+0x64>)
 8008580:	4812      	ldr	r0, [pc, #72]	; (80085cc <tcp_recv_null+0x68>)
 8008582:	f007 fab5 	bl	800faf0 <iprintf>
 8008586:	f06f 030f 	mvn.w	r3, #15
 800858a:	e016      	b.n	80085ba <tcp_recv_null+0x56>

  if (p != NULL) {
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d009      	beq.n	80085a6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	891b      	ldrh	r3, [r3, #8]
 8008596:	4619      	mov	r1, r3
 8008598:	68b8      	ldr	r0, [r7, #8]
 800859a:	f7ff fb19 	bl	8007bd0 <tcp_recved>
    pbuf_free(p);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7fe fd18 	bl	8006fd4 <pbuf_free>
 80085a4:	e008      	b.n	80085b8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80085a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d104      	bne.n	80085b8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80085ae:	68b8      	ldr	r0, [r7, #8]
 80085b0:	f7ff f9be 	bl	8007930 <tcp_close>
 80085b4:	4603      	mov	r3, r0
 80085b6:	e000      	b.n	80085ba <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	080117ec 	.word	0x080117ec
 80085c8:	08011d5c 	.word	0x08011d5c
 80085cc:	08011830 	.word	0x08011830

080085d0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	4603      	mov	r3, r0
 80085d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80085da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	db01      	blt.n	80085e6 <tcp_kill_prio+0x16>
 80085e2:	79fb      	ldrb	r3, [r7, #7]
 80085e4:	e000      	b.n	80085e8 <tcp_kill_prio+0x18>
 80085e6:	237f      	movs	r3, #127	; 0x7f
 80085e8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80085ea:	7afb      	ldrb	r3, [r7, #11]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d034      	beq.n	800865a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80085f0:	7afb      	ldrb	r3, [r7, #11]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80085fa:	2300      	movs	r3, #0
 80085fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80085fe:	4b19      	ldr	r3, [pc, #100]	; (8008664 <tcp_kill_prio+0x94>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	617b      	str	r3, [r7, #20]
 8008604:	e01f      	b.n	8008646 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	7d5b      	ldrb	r3, [r3, #21]
 800860a:	7afa      	ldrb	r2, [r7, #11]
 800860c:	429a      	cmp	r2, r3
 800860e:	d80c      	bhi.n	800862a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008614:	7afa      	ldrb	r2, [r7, #11]
 8008616:	429a      	cmp	r2, r3
 8008618:	d112      	bne.n	8008640 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800861a:	4b13      	ldr	r3, [pc, #76]	; (8008668 <tcp_kill_prio+0x98>)
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	429a      	cmp	r2, r3
 8008628:	d80a      	bhi.n	8008640 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800862a:	4b0f      	ldr	r3, [pc, #60]	; (8008668 <tcp_kill_prio+0x98>)
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	7d5b      	ldrb	r3, [r3, #21]
 800863e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	617b      	str	r3, [r7, #20]
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1dc      	bne.n	8008606 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d004      	beq.n	800865c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008652:	6938      	ldr	r0, [r7, #16]
 8008654:	f7ff fa56 	bl	8007b04 <tcp_abort>
 8008658:	e000      	b.n	800865c <tcp_kill_prio+0x8c>
    return;
 800865a:	bf00      	nop
  }
}
 800865c:	3718      	adds	r7, #24
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	200087bc 	.word	0x200087bc
 8008668:	200087b0 	.word	0x200087b0

0800866c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	4603      	mov	r3, r0
 8008674:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	2b08      	cmp	r3, #8
 800867a:	d009      	beq.n	8008690 <tcp_kill_state+0x24>
 800867c:	79fb      	ldrb	r3, [r7, #7]
 800867e:	2b09      	cmp	r3, #9
 8008680:	d006      	beq.n	8008690 <tcp_kill_state+0x24>
 8008682:	4b1a      	ldr	r3, [pc, #104]	; (80086ec <tcp_kill_state+0x80>)
 8008684:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008688:	4919      	ldr	r1, [pc, #100]	; (80086f0 <tcp_kill_state+0x84>)
 800868a:	481a      	ldr	r0, [pc, #104]	; (80086f4 <tcp_kill_state+0x88>)
 800868c:	f007 fa30 	bl	800faf0 <iprintf>

  inactivity = 0;
 8008690:	2300      	movs	r3, #0
 8008692:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008694:	2300      	movs	r3, #0
 8008696:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008698:	4b17      	ldr	r3, [pc, #92]	; (80086f8 <tcp_kill_state+0x8c>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	e017      	b.n	80086d0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	7d1b      	ldrb	r3, [r3, #20]
 80086a4:	79fa      	ldrb	r2, [r7, #7]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d10f      	bne.n	80086ca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80086aa:	4b14      	ldr	r3, [pc, #80]	; (80086fc <tcp_kill_state+0x90>)
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d807      	bhi.n	80086ca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80086ba:	4b10      	ldr	r3, [pc, #64]	; (80086fc <tcp_kill_state+0x90>)
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	617b      	str	r3, [r7, #20]
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e4      	bne.n	80086a0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80086dc:	2100      	movs	r1, #0
 80086de:	6938      	ldr	r0, [r7, #16]
 80086e0:	f7ff f952 	bl	8007988 <tcp_abandon>
  }
}
 80086e4:	bf00      	nop
 80086e6:	3718      	adds	r7, #24
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	080117ec 	.word	0x080117ec
 80086f0:	08011d78 	.word	0x08011d78
 80086f4:	08011830 	.word	0x08011830
 80086f8:	200087bc 	.word	0x200087bc
 80086fc:	200087b0 	.word	0x200087b0

08008700 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008706:	2300      	movs	r3, #0
 8008708:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800870a:	2300      	movs	r3, #0
 800870c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800870e:	4b12      	ldr	r3, [pc, #72]	; (8008758 <tcp_kill_timewait+0x58>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	e012      	b.n	800873c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008716:	4b11      	ldr	r3, [pc, #68]	; (800875c <tcp_kill_timewait+0x5c>)
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	429a      	cmp	r2, r3
 8008724:	d807      	bhi.n	8008736 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008726:	4b0d      	ldr	r3, [pc, #52]	; (800875c <tcp_kill_timewait+0x5c>)
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e9      	bne.n	8008716 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008748:	68b8      	ldr	r0, [r7, #8]
 800874a:	f7ff f9db 	bl	8007b04 <tcp_abort>
  }
}
 800874e:	bf00      	nop
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	200087c0 	.word	0x200087c0
 800875c:	200087b0 	.word	0x200087b0

08008760 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008766:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <tcp_handle_closepend+0x48>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800876c:	e014      	b.n	8008798 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	8b5b      	ldrh	r3, [r3, #26]
 8008778:	f003 0308 	and.w	r3, r3, #8
 800877c:	2b00      	cmp	r3, #0
 800877e:	d009      	beq.n	8008794 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	8b5b      	ldrh	r3, [r3, #26]
 8008784:	f023 0308 	bic.w	r3, r3, #8
 8008788:	b29a      	uxth	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff f864 	bl	800785c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1e7      	bne.n	800876e <tcp_handle_closepend+0xe>
  }
}
 800879e:	bf00      	nop
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	200087bc 	.word	0x200087bc

080087ac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80087b6:	2001      	movs	r0, #1
 80087b8:	f7fd fd26 	bl	8006208 <memp_malloc>
 80087bc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d126      	bne.n	8008812 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80087c4:	f7ff ffcc 	bl	8008760 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80087c8:	f7ff ff9a 	bl	8008700 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80087cc:	2001      	movs	r0, #1
 80087ce:	f7fd fd1b 	bl	8006208 <memp_malloc>
 80087d2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d11b      	bne.n	8008812 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80087da:	2009      	movs	r0, #9
 80087dc:	f7ff ff46 	bl	800866c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80087e0:	2001      	movs	r0, #1
 80087e2:	f7fd fd11 	bl	8006208 <memp_malloc>
 80087e6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d111      	bne.n	8008812 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80087ee:	2008      	movs	r0, #8
 80087f0:	f7ff ff3c 	bl	800866c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80087f4:	2001      	movs	r0, #1
 80087f6:	f7fd fd07 	bl	8006208 <memp_malloc>
 80087fa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d107      	bne.n	8008812 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008802:	79fb      	ldrb	r3, [r7, #7]
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff fee3 	bl	80085d0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800880a:	2001      	movs	r0, #1
 800880c:	f7fd fcfc 	bl	8006208 <memp_malloc>
 8008810:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d03f      	beq.n	8008898 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008818:	229c      	movs	r2, #156	; 0x9c
 800881a:	2100      	movs	r1, #0
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f007 f95f 	bl	800fae0 <memset>
    pcb->prio = prio;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	79fa      	ldrb	r2, [r7, #7]
 8008826:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800882e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008838:	855a      	strh	r2, [r3, #42]	; 0x2a
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	22ff      	movs	r2, #255	; 0xff
 8008846:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800884e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2206      	movs	r2, #6
 8008854:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2206      	movs	r2, #6
 800885c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008864:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2201      	movs	r2, #1
 800886a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800886e:	4b0d      	ldr	r3, [pc, #52]	; (80088a4 <tcp_alloc+0xf8>)
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008876:	4b0c      	ldr	r3, [pc, #48]	; (80088a8 <tcp_alloc+0xfc>)
 8008878:	781a      	ldrb	r2, [r3, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008884:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4a08      	ldr	r2, [pc, #32]	; (80088ac <tcp_alloc+0x100>)
 800888c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4a07      	ldr	r2, [pc, #28]	; (80088b0 <tcp_alloc+0x104>)
 8008894:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008898:	68fb      	ldr	r3, [r7, #12]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	200087b0 	.word	0x200087b0
 80088a8:	200087c6 	.word	0x200087c6
 80088ac:	08008565 	.word	0x08008565
 80088b0:	006ddd00 	.word	0x006ddd00

080088b4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d107      	bne.n	80088d2 <tcp_pcb_purge+0x1e>
 80088c2:	4b21      	ldr	r3, [pc, #132]	; (8008948 <tcp_pcb_purge+0x94>)
 80088c4:	f640 0251 	movw	r2, #2129	; 0x851
 80088c8:	4920      	ldr	r1, [pc, #128]	; (800894c <tcp_pcb_purge+0x98>)
 80088ca:	4821      	ldr	r0, [pc, #132]	; (8008950 <tcp_pcb_purge+0x9c>)
 80088cc:	f007 f910 	bl	800faf0 <iprintf>
 80088d0:	e037      	b.n	8008942 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	7d1b      	ldrb	r3, [r3, #20]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d033      	beq.n	8008942 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80088de:	2b0a      	cmp	r3, #10
 80088e0:	d02f      	beq.n	8008942 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d02b      	beq.n	8008942 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d007      	beq.n	8008902 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fe fb6c 	bl	8006fd4 <pbuf_free>
      pcb->refused_data = NULL;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f986 	bl	8008c1c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008916:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800891c:	4618      	mov	r0, r3
 800891e:	f7ff fdc7 	bl	80084b0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008926:	4618      	mov	r0, r3
 8008928:	f7ff fdc2 	bl	80084b0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	66da      	str	r2, [r3, #108]	; 0x6c
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	080117ec 	.word	0x080117ec
 800894c:	08011e38 	.word	0x08011e38
 8008950:	08011830 	.word	0x08011830

08008954 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d106      	bne.n	8008972 <tcp_pcb_remove+0x1e>
 8008964:	4b3e      	ldr	r3, [pc, #248]	; (8008a60 <tcp_pcb_remove+0x10c>)
 8008966:	f640 0283 	movw	r2, #2179	; 0x883
 800896a:	493e      	ldr	r1, [pc, #248]	; (8008a64 <tcp_pcb_remove+0x110>)
 800896c:	483e      	ldr	r0, [pc, #248]	; (8008a68 <tcp_pcb_remove+0x114>)
 800896e:	f007 f8bf 	bl	800faf0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d106      	bne.n	8008986 <tcp_pcb_remove+0x32>
 8008978:	4b39      	ldr	r3, [pc, #228]	; (8008a60 <tcp_pcb_remove+0x10c>)
 800897a:	f640 0284 	movw	r2, #2180	; 0x884
 800897e:	493b      	ldr	r1, [pc, #236]	; (8008a6c <tcp_pcb_remove+0x118>)
 8008980:	4839      	ldr	r0, [pc, #228]	; (8008a68 <tcp_pcb_remove+0x114>)
 8008982:	f007 f8b5 	bl	800faf0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	429a      	cmp	r2, r3
 800898e:	d105      	bne.n	800899c <tcp_pcb_remove+0x48>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68da      	ldr	r2, [r3, #12]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	e013      	b.n	80089c4 <tcp_pcb_remove+0x70>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	e00c      	b.n	80089be <tcp_pcb_remove+0x6a>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d104      	bne.n	80089b8 <tcp_pcb_remove+0x64>
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	68da      	ldr	r2, [r3, #12]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	60da      	str	r2, [r3, #12]
 80089b6:	e005      	b.n	80089c4 <tcp_pcb_remove+0x70>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	60fb      	str	r3, [r7, #12]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1ef      	bne.n	80089a4 <tcp_pcb_remove+0x50>
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2200      	movs	r2, #0
 80089c8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80089ca:	6838      	ldr	r0, [r7, #0]
 80089cc:	f7ff ff72 	bl	80088b4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	7d1b      	ldrb	r3, [r3, #20]
 80089d4:	2b0a      	cmp	r3, #10
 80089d6:	d013      	beq.n	8008a00 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d00f      	beq.n	8008a00 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	8b5b      	ldrh	r3, [r3, #26]
 80089e4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d009      	beq.n	8008a00 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	8b5b      	ldrh	r3, [r3, #26]
 80089f0:	f043 0302 	orr.w	r3, r3, #2
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80089fa:	6838      	ldr	r0, [r7, #0]
 80089fc:	f002 ff6e 	bl	800b8dc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	7d1b      	ldrb	r3, [r3, #20]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d020      	beq.n	8008a4a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d006      	beq.n	8008a1e <tcp_pcb_remove+0xca>
 8008a10:	4b13      	ldr	r3, [pc, #76]	; (8008a60 <tcp_pcb_remove+0x10c>)
 8008a12:	f640 0293 	movw	r2, #2195	; 0x893
 8008a16:	4916      	ldr	r1, [pc, #88]	; (8008a70 <tcp_pcb_remove+0x11c>)
 8008a18:	4813      	ldr	r0, [pc, #76]	; (8008a68 <tcp_pcb_remove+0x114>)
 8008a1a:	f007 f869 	bl	800faf0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d006      	beq.n	8008a34 <tcp_pcb_remove+0xe0>
 8008a26:	4b0e      	ldr	r3, [pc, #56]	; (8008a60 <tcp_pcb_remove+0x10c>)
 8008a28:	f640 0294 	movw	r2, #2196	; 0x894
 8008a2c:	4911      	ldr	r1, [pc, #68]	; (8008a74 <tcp_pcb_remove+0x120>)
 8008a2e:	480e      	ldr	r0, [pc, #56]	; (8008a68 <tcp_pcb_remove+0x114>)
 8008a30:	f007 f85e 	bl	800faf0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d006      	beq.n	8008a4a <tcp_pcb_remove+0xf6>
 8008a3c:	4b08      	ldr	r3, [pc, #32]	; (8008a60 <tcp_pcb_remove+0x10c>)
 8008a3e:	f640 0296 	movw	r2, #2198	; 0x896
 8008a42:	490d      	ldr	r1, [pc, #52]	; (8008a78 <tcp_pcb_remove+0x124>)
 8008a44:	4808      	ldr	r0, [pc, #32]	; (8008a68 <tcp_pcb_remove+0x114>)
 8008a46:	f007 f853 	bl	800faf0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	2200      	movs	r2, #0
 8008a54:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008a56:	bf00      	nop
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	080117ec 	.word	0x080117ec
 8008a64:	08011e54 	.word	0x08011e54
 8008a68:	08011830 	.word	0x08011830
 8008a6c:	08011e70 	.word	0x08011e70
 8008a70:	08011e90 	.word	0x08011e90
 8008a74:	08011ea8 	.word	0x08011ea8
 8008a78:	08011ec4 	.word	0x08011ec4

08008a7c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d106      	bne.n	8008a98 <tcp_next_iss+0x1c>
 8008a8a:	4b0a      	ldr	r3, [pc, #40]	; (8008ab4 <tcp_next_iss+0x38>)
 8008a8c:	f640 02af 	movw	r2, #2223	; 0x8af
 8008a90:	4909      	ldr	r1, [pc, #36]	; (8008ab8 <tcp_next_iss+0x3c>)
 8008a92:	480a      	ldr	r0, [pc, #40]	; (8008abc <tcp_next_iss+0x40>)
 8008a94:	f007 f82c 	bl	800faf0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008a98:	4b09      	ldr	r3, [pc, #36]	; (8008ac0 <tcp_next_iss+0x44>)
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <tcp_next_iss+0x48>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	4a07      	ldr	r2, [pc, #28]	; (8008ac0 <tcp_next_iss+0x44>)
 8008aa4:	6013      	str	r3, [r2, #0]
  return iss;
 8008aa6:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <tcp_next_iss+0x44>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	080117ec 	.word	0x080117ec
 8008ab8:	08011edc 	.word	0x08011edc
 8008abc:	08011830 	.word	0x08011830
 8008ac0:	20000024 	.word	0x20000024
 8008ac4:	200087b0 	.word	0x200087b0

08008ac8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
 8008ad4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d106      	bne.n	8008aea <tcp_eff_send_mss_netif+0x22>
 8008adc:	4b14      	ldr	r3, [pc, #80]	; (8008b30 <tcp_eff_send_mss_netif+0x68>)
 8008ade:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008ae2:	4914      	ldr	r1, [pc, #80]	; (8008b34 <tcp_eff_send_mss_netif+0x6c>)
 8008ae4:	4814      	ldr	r0, [pc, #80]	; (8008b38 <tcp_eff_send_mss_netif+0x70>)
 8008ae6:	f007 f803 	bl	800faf0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008af0:	89fb      	ldrh	r3, [r7, #14]
 8008af2:	e019      	b.n	8008b28 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008af8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008afa:	8afb      	ldrh	r3, [r7, #22]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d012      	beq.n	8008b26 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008b00:	2328      	movs	r3, #40	; 0x28
 8008b02:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008b04:	8afa      	ldrh	r2, [r7, #22]
 8008b06:	8abb      	ldrh	r3, [r7, #20]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d904      	bls.n	8008b16 <tcp_eff_send_mss_netif+0x4e>
 8008b0c:	8afa      	ldrh	r2, [r7, #22]
 8008b0e:	8abb      	ldrh	r3, [r7, #20]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	e000      	b.n	8008b18 <tcp_eff_send_mss_netif+0x50>
 8008b16:	2300      	movs	r3, #0
 8008b18:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008b1a:	8a7a      	ldrh	r2, [r7, #18]
 8008b1c:	89fb      	ldrh	r3, [r7, #14]
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	bf28      	it	cs
 8008b22:	4613      	movcs	r3, r2
 8008b24:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008b26:	89fb      	ldrh	r3, [r7, #14]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	080117ec 	.word	0x080117ec
 8008b34:	08011ef8 	.word	0x08011ef8
 8008b38:	08011830 	.word	0x08011830

08008b3c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d119      	bne.n	8008b84 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008b50:	4b10      	ldr	r3, [pc, #64]	; (8008b94 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008b52:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008b56:	4910      	ldr	r1, [pc, #64]	; (8008b98 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008b58:	4810      	ldr	r0, [pc, #64]	; (8008b9c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008b5a:	f006 ffc9 	bl	800faf0 <iprintf>

  while (pcb != NULL) {
 8008b5e:	e011      	b.n	8008b84 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d108      	bne.n	8008b7e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f7fe ffc6 	bl	8007b04 <tcp_abort>
      pcb = next;
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	e002      	b.n	8008b84 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1ea      	bne.n	8008b60 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008b8a:	bf00      	nop
 8008b8c:	bf00      	nop
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	080117ec 	.word	0x080117ec
 8008b98:	08011f20 	.word	0x08011f20
 8008b9c:	08011830 	.word	0x08011830

08008ba0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d02a      	beq.n	8008c06 <tcp_netif_ip_addr_changed+0x66>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d026      	beq.n	8008c06 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008bb8:	4b15      	ldr	r3, [pc, #84]	; (8008c10 <tcp_netif_ip_addr_changed+0x70>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7ff ffbc 	bl	8008b3c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008bc4:	4b13      	ldr	r3, [pc, #76]	; (8008c14 <tcp_netif_ip_addr_changed+0x74>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7ff ffb6 	bl	8008b3c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d017      	beq.n	8008c06 <tcp_netif_ip_addr_changed+0x66>
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d013      	beq.n	8008c06 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008bde:	4b0e      	ldr	r3, [pc, #56]	; (8008c18 <tcp_netif_ip_addr_changed+0x78>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	e00c      	b.n	8008c00 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d103      	bne.n	8008bfa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1ef      	bne.n	8008be6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008c06:	bf00      	nop
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	200087bc 	.word	0x200087bc
 8008c14:	200087b4 	.word	0x200087b4
 8008c18:	200087b8 	.word	0x200087b8

08008c1c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d007      	beq.n	8008c3c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7ff fc3d 	bl	80084b0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008c3c:	bf00      	nop
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008c44:	b590      	push	{r4, r7, lr}
 8008c46:	b08d      	sub	sp, #52	; 0x34
 8008c48:	af04      	add	r7, sp, #16
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d105      	bne.n	8008c60 <tcp_input+0x1c>
 8008c54:	4b9b      	ldr	r3, [pc, #620]	; (8008ec4 <tcp_input+0x280>)
 8008c56:	2283      	movs	r2, #131	; 0x83
 8008c58:	499b      	ldr	r1, [pc, #620]	; (8008ec8 <tcp_input+0x284>)
 8008c5a:	489c      	ldr	r0, [pc, #624]	; (8008ecc <tcp_input+0x288>)
 8008c5c:	f006 ff48 	bl	800faf0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	4a9a      	ldr	r2, [pc, #616]	; (8008ed0 <tcp_input+0x28c>)
 8008c66:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	895b      	ldrh	r3, [r3, #10]
 8008c6c:	2b13      	cmp	r3, #19
 8008c6e:	f240 83d1 	bls.w	8009414 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008c72:	4b98      	ldr	r3, [pc, #608]	; (8008ed4 <tcp_input+0x290>)
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	4a97      	ldr	r2, [pc, #604]	; (8008ed4 <tcp_input+0x290>)
 8008c78:	6812      	ldr	r2, [r2, #0]
 8008c7a:	4611      	mov	r1, r2
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f005 ff07 	bl	800ea90 <ip4_addr_isbroadcast_u32>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f040 83c7 	bne.w	8009418 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008c8a:	4b92      	ldr	r3, [pc, #584]	; (8008ed4 <tcp_input+0x290>)
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008c92:	2be0      	cmp	r3, #224	; 0xe0
 8008c94:	f000 83c0 	beq.w	8009418 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008c98:	4b8d      	ldr	r3, [pc, #564]	; (8008ed0 <tcp_input+0x28c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	899b      	ldrh	r3, [r3, #12]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7fc fe39 	bl	8005918 <lwip_htons>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	0b1b      	lsrs	r3, r3, #12
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008cb2:	7cbb      	ldrb	r3, [r7, #18]
 8008cb4:	2b13      	cmp	r3, #19
 8008cb6:	f240 83b1 	bls.w	800941c <tcp_input+0x7d8>
 8008cba:	7cbb      	ldrb	r3, [r7, #18]
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	891b      	ldrh	r3, [r3, #8]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	f200 83aa 	bhi.w	800941c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008cc8:	7cbb      	ldrb	r3, [r7, #18]
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	3b14      	subs	r3, #20
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	4b81      	ldr	r3, [pc, #516]	; (8008ed8 <tcp_input+0x294>)
 8008cd2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008cd4:	4b81      	ldr	r3, [pc, #516]	; (8008edc <tcp_input+0x298>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	895a      	ldrh	r2, [r3, #10]
 8008cde:	7cbb      	ldrb	r3, [r7, #18]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d309      	bcc.n	8008cfa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008ce6:	4b7c      	ldr	r3, [pc, #496]	; (8008ed8 <tcp_input+0x294>)
 8008ce8:	881a      	ldrh	r2, [r3, #0]
 8008cea:	4b7d      	ldr	r3, [pc, #500]	; (8008ee0 <tcp_input+0x29c>)
 8008cec:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008cee:	7cbb      	ldrb	r3, [r7, #18]
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7fe f8e8 	bl	8006ec8 <pbuf_remove_header>
 8008cf8:	e04e      	b.n	8008d98 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d105      	bne.n	8008d0e <tcp_input+0xca>
 8008d02:	4b70      	ldr	r3, [pc, #448]	; (8008ec4 <tcp_input+0x280>)
 8008d04:	22c2      	movs	r2, #194	; 0xc2
 8008d06:	4977      	ldr	r1, [pc, #476]	; (8008ee4 <tcp_input+0x2a0>)
 8008d08:	4870      	ldr	r0, [pc, #448]	; (8008ecc <tcp_input+0x288>)
 8008d0a:	f006 fef1 	bl	800faf0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008d0e:	2114      	movs	r1, #20
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7fe f8d9 	bl	8006ec8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	895a      	ldrh	r2, [r3, #10]
 8008d1a:	4b71      	ldr	r3, [pc, #452]	; (8008ee0 <tcp_input+0x29c>)
 8008d1c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008d1e:	4b6e      	ldr	r3, [pc, #440]	; (8008ed8 <tcp_input+0x294>)
 8008d20:	881a      	ldrh	r2, [r3, #0]
 8008d22:	4b6f      	ldr	r3, [pc, #444]	; (8008ee0 <tcp_input+0x29c>)
 8008d24:	881b      	ldrh	r3, [r3, #0]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008d2a:	4b6d      	ldr	r3, [pc, #436]	; (8008ee0 <tcp_input+0x29c>)
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7fe f8c9 	bl	8006ec8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	895b      	ldrh	r3, [r3, #10]
 8008d3c:	8a3a      	ldrh	r2, [r7, #16]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	f200 836e 	bhi.w	8009420 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	4a64      	ldr	r2, [pc, #400]	; (8008edc <tcp_input+0x298>)
 8008d4c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	8a3a      	ldrh	r2, [r7, #16]
 8008d54:	4611      	mov	r1, r2
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fe f8b6 	bl	8006ec8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	891a      	ldrh	r2, [r3, #8]
 8008d60:	8a3b      	ldrh	r3, [r7, #16]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	895b      	ldrh	r3, [r3, #10]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d005      	beq.n	8008d7e <tcp_input+0x13a>
 8008d72:	4b54      	ldr	r3, [pc, #336]	; (8008ec4 <tcp_input+0x280>)
 8008d74:	22df      	movs	r2, #223	; 0xdf
 8008d76:	495c      	ldr	r1, [pc, #368]	; (8008ee8 <tcp_input+0x2a4>)
 8008d78:	4854      	ldr	r0, [pc, #336]	; (8008ecc <tcp_input+0x288>)
 8008d7a:	f006 feb9 	bl	800faf0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	891a      	ldrh	r2, [r3, #8]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	891b      	ldrh	r3, [r3, #8]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d005      	beq.n	8008d98 <tcp_input+0x154>
 8008d8c:	4b4d      	ldr	r3, [pc, #308]	; (8008ec4 <tcp_input+0x280>)
 8008d8e:	22e0      	movs	r2, #224	; 0xe0
 8008d90:	4956      	ldr	r1, [pc, #344]	; (8008eec <tcp_input+0x2a8>)
 8008d92:	484e      	ldr	r0, [pc, #312]	; (8008ecc <tcp_input+0x288>)
 8008d94:	f006 feac 	bl	800faf0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008d98:	4b4d      	ldr	r3, [pc, #308]	; (8008ed0 <tcp_input+0x28c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	4a4b      	ldr	r2, [pc, #300]	; (8008ed0 <tcp_input+0x28c>)
 8008da2:	6814      	ldr	r4, [r2, #0]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fc fdb7 	bl	8005918 <lwip_htons>
 8008daa:	4603      	mov	r3, r0
 8008dac:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008dae:	4b48      	ldr	r3, [pc, #288]	; (8008ed0 <tcp_input+0x28c>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	885b      	ldrh	r3, [r3, #2]
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	4a46      	ldr	r2, [pc, #280]	; (8008ed0 <tcp_input+0x28c>)
 8008db8:	6814      	ldr	r4, [r2, #0]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fc fdac 	bl	8005918 <lwip_htons>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008dc4:	4b42      	ldr	r3, [pc, #264]	; (8008ed0 <tcp_input+0x28c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	4a41      	ldr	r2, [pc, #260]	; (8008ed0 <tcp_input+0x28c>)
 8008dcc:	6814      	ldr	r4, [r2, #0]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fc fdb7 	bl	8005942 <lwip_htonl>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	6063      	str	r3, [r4, #4]
 8008dd8:	6863      	ldr	r3, [r4, #4]
 8008dda:	4a45      	ldr	r2, [pc, #276]	; (8008ef0 <tcp_input+0x2ac>)
 8008ddc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008dde:	4b3c      	ldr	r3, [pc, #240]	; (8008ed0 <tcp_input+0x28c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	4a3a      	ldr	r2, [pc, #232]	; (8008ed0 <tcp_input+0x28c>)
 8008de6:	6814      	ldr	r4, [r2, #0]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7fc fdaa 	bl	8005942 <lwip_htonl>
 8008dee:	4603      	mov	r3, r0
 8008df0:	60a3      	str	r3, [r4, #8]
 8008df2:	68a3      	ldr	r3, [r4, #8]
 8008df4:	4a3f      	ldr	r2, [pc, #252]	; (8008ef4 <tcp_input+0x2b0>)
 8008df6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008df8:	4b35      	ldr	r3, [pc, #212]	; (8008ed0 <tcp_input+0x28c>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	89db      	ldrh	r3, [r3, #14]
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	4a33      	ldr	r2, [pc, #204]	; (8008ed0 <tcp_input+0x28c>)
 8008e02:	6814      	ldr	r4, [r2, #0]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fc fd87 	bl	8005918 <lwip_htons>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008e0e:	4b30      	ldr	r3, [pc, #192]	; (8008ed0 <tcp_input+0x28c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	899b      	ldrh	r3, [r3, #12]
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fc fd7e 	bl	8005918 <lwip_htons>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	4b34      	ldr	r3, [pc, #208]	; (8008ef8 <tcp_input+0x2b4>)
 8008e28:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	891a      	ldrh	r2, [r3, #8]
 8008e2e:	4b33      	ldr	r3, [pc, #204]	; (8008efc <tcp_input+0x2b8>)
 8008e30:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008e32:	4b31      	ldr	r3, [pc, #196]	; (8008ef8 <tcp_input+0x2b4>)
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	f003 0303 	and.w	r3, r3, #3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00c      	beq.n	8008e58 <tcp_input+0x214>
    tcplen++;
 8008e3e:	4b2f      	ldr	r3, [pc, #188]	; (8008efc <tcp_input+0x2b8>)
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	3301      	adds	r3, #1
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	4b2d      	ldr	r3, [pc, #180]	; (8008efc <tcp_input+0x2b8>)
 8008e48:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	891a      	ldrh	r2, [r3, #8]
 8008e4e:	4b2b      	ldr	r3, [pc, #172]	; (8008efc <tcp_input+0x2b8>)
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	f200 82e6 	bhi.w	8009424 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e5c:	4b28      	ldr	r3, [pc, #160]	; (8008f00 <tcp_input+0x2bc>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	61fb      	str	r3, [r7, #28]
 8008e62:	e09d      	b.n	8008fa0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	7d1b      	ldrb	r3, [r3, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d105      	bne.n	8008e78 <tcp_input+0x234>
 8008e6c:	4b15      	ldr	r3, [pc, #84]	; (8008ec4 <tcp_input+0x280>)
 8008e6e:	22fb      	movs	r2, #251	; 0xfb
 8008e70:	4924      	ldr	r1, [pc, #144]	; (8008f04 <tcp_input+0x2c0>)
 8008e72:	4816      	ldr	r0, [pc, #88]	; (8008ecc <tcp_input+0x288>)
 8008e74:	f006 fe3c 	bl	800faf0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	7d1b      	ldrb	r3, [r3, #20]
 8008e7c:	2b0a      	cmp	r3, #10
 8008e7e:	d105      	bne.n	8008e8c <tcp_input+0x248>
 8008e80:	4b10      	ldr	r3, [pc, #64]	; (8008ec4 <tcp_input+0x280>)
 8008e82:	22fc      	movs	r2, #252	; 0xfc
 8008e84:	4920      	ldr	r1, [pc, #128]	; (8008f08 <tcp_input+0x2c4>)
 8008e86:	4811      	ldr	r0, [pc, #68]	; (8008ecc <tcp_input+0x288>)
 8008e88:	f006 fe32 	bl	800faf0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	7d1b      	ldrb	r3, [r3, #20]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d105      	bne.n	8008ea0 <tcp_input+0x25c>
 8008e94:	4b0b      	ldr	r3, [pc, #44]	; (8008ec4 <tcp_input+0x280>)
 8008e96:	22fd      	movs	r2, #253	; 0xfd
 8008e98:	491c      	ldr	r1, [pc, #112]	; (8008f0c <tcp_input+0x2c8>)
 8008e9a:	480c      	ldr	r0, [pc, #48]	; (8008ecc <tcp_input+0x288>)
 8008e9c:	f006 fe28 	bl	800faf0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	7a1b      	ldrb	r3, [r3, #8]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d033      	beq.n	8008f10 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	7a1a      	ldrb	r2, [r3, #8]
 8008eac:	4b09      	ldr	r3, [pc, #36]	; (8008ed4 <tcp_input+0x290>)
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d029      	beq.n	8008f10 <tcp_input+0x2cc>
      prev = pcb;
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	61bb      	str	r3, [r7, #24]
      continue;
 8008ec0:	e06b      	b.n	8008f9a <tcp_input+0x356>
 8008ec2:	bf00      	nop
 8008ec4:	08011f54 	.word	0x08011f54
 8008ec8:	08011f88 	.word	0x08011f88
 8008ecc:	08011fa0 	.word	0x08011fa0
 8008ed0:	200087d8 	.word	0x200087d8
 8008ed4:	20005240 	.word	0x20005240
 8008ed8:	200087dc 	.word	0x200087dc
 8008edc:	200087e0 	.word	0x200087e0
 8008ee0:	200087de 	.word	0x200087de
 8008ee4:	08011fc8 	.word	0x08011fc8
 8008ee8:	08011fd8 	.word	0x08011fd8
 8008eec:	08011fe4 	.word	0x08011fe4
 8008ef0:	200087e8 	.word	0x200087e8
 8008ef4:	200087ec 	.word	0x200087ec
 8008ef8:	200087f4 	.word	0x200087f4
 8008efc:	200087f2 	.word	0x200087f2
 8008f00:	200087bc 	.word	0x200087bc
 8008f04:	08012004 	.word	0x08012004
 8008f08:	0801202c 	.word	0x0801202c
 8008f0c:	08012058 	.word	0x08012058
    }

    if (pcb->remote_port == tcphdr->src &&
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	8b1a      	ldrh	r2, [r3, #24]
 8008f14:	4b72      	ldr	r3, [pc, #456]	; (80090e0 <tcp_input+0x49c>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d13a      	bne.n	8008f96 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	8ada      	ldrh	r2, [r3, #22]
 8008f24:	4b6e      	ldr	r3, [pc, #440]	; (80090e0 <tcp_input+0x49c>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	885b      	ldrh	r3, [r3, #2]
 8008f2a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d132      	bne.n	8008f96 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	4b6b      	ldr	r3, [pc, #428]	; (80090e4 <tcp_input+0x4a0>)
 8008f36:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d12c      	bne.n	8008f96 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	4b68      	ldr	r3, [pc, #416]	; (80090e4 <tcp_input+0x4a0>)
 8008f42:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d126      	bne.n	8008f96 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	69fa      	ldr	r2, [r7, #28]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d106      	bne.n	8008f60 <tcp_input+0x31c>
 8008f52:	4b65      	ldr	r3, [pc, #404]	; (80090e8 <tcp_input+0x4a4>)
 8008f54:	f240 120d 	movw	r2, #269	; 0x10d
 8008f58:	4964      	ldr	r1, [pc, #400]	; (80090ec <tcp_input+0x4a8>)
 8008f5a:	4865      	ldr	r0, [pc, #404]	; (80090f0 <tcp_input+0x4ac>)
 8008f5c:	f006 fdc8 	bl	800faf0 <iprintf>
      if (prev != NULL) {
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00a      	beq.n	8008f7c <tcp_input+0x338>
        prev->next = pcb->next;
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	68da      	ldr	r2, [r3, #12]
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008f6e:	4b61      	ldr	r3, [pc, #388]	; (80090f4 <tcp_input+0x4b0>)
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008f76:	4a5f      	ldr	r2, [pc, #380]	; (80090f4 <tcp_input+0x4b0>)
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	69fa      	ldr	r2, [r7, #28]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d111      	bne.n	8008faa <tcp_input+0x366>
 8008f86:	4b58      	ldr	r3, [pc, #352]	; (80090e8 <tcp_input+0x4a4>)
 8008f88:	f240 1215 	movw	r2, #277	; 0x115
 8008f8c:	495a      	ldr	r1, [pc, #360]	; (80090f8 <tcp_input+0x4b4>)
 8008f8e:	4858      	ldr	r0, [pc, #352]	; (80090f0 <tcp_input+0x4ac>)
 8008f90:	f006 fdae 	bl	800faf0 <iprintf>
      break;
 8008f94:	e009      	b.n	8008faa <tcp_input+0x366>
    }
    prev = pcb;
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	61fb      	str	r3, [r7, #28]
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f47f af5e 	bne.w	8008e64 <tcp_input+0x220>
 8008fa8:	e000      	b.n	8008fac <tcp_input+0x368>
      break;
 8008faa:	bf00      	nop
  }

  if (pcb == NULL) {
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f040 80aa 	bne.w	8009108 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008fb4:	4b51      	ldr	r3, [pc, #324]	; (80090fc <tcp_input+0x4b8>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	61fb      	str	r3, [r7, #28]
 8008fba:	e03f      	b.n	800903c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	7d1b      	ldrb	r3, [r3, #20]
 8008fc0:	2b0a      	cmp	r3, #10
 8008fc2:	d006      	beq.n	8008fd2 <tcp_input+0x38e>
 8008fc4:	4b48      	ldr	r3, [pc, #288]	; (80090e8 <tcp_input+0x4a4>)
 8008fc6:	f240 121f 	movw	r2, #287	; 0x11f
 8008fca:	494d      	ldr	r1, [pc, #308]	; (8009100 <tcp_input+0x4bc>)
 8008fcc:	4848      	ldr	r0, [pc, #288]	; (80090f0 <tcp_input+0x4ac>)
 8008fce:	f006 fd8f 	bl	800faf0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	7a1b      	ldrb	r3, [r3, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d009      	beq.n	8008fee <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	7a1a      	ldrb	r2, [r3, #8]
 8008fde:	4b41      	ldr	r3, [pc, #260]	; (80090e4 <tcp_input+0x4a0>)
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d122      	bne.n	8009034 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	8b1a      	ldrh	r2, [r3, #24]
 8008ff2:	4b3b      	ldr	r3, [pc, #236]	; (80090e0 <tcp_input+0x49c>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	881b      	ldrh	r3, [r3, #0]
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d11b      	bne.n	8009036 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	8ada      	ldrh	r2, [r3, #22]
 8009002:	4b37      	ldr	r3, [pc, #220]	; (80090e0 <tcp_input+0x49c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	885b      	ldrh	r3, [r3, #2]
 8009008:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800900a:	429a      	cmp	r2, r3
 800900c:	d113      	bne.n	8009036 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	4b34      	ldr	r3, [pc, #208]	; (80090e4 <tcp_input+0x4a0>)
 8009014:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009016:	429a      	cmp	r2, r3
 8009018:	d10d      	bne.n	8009036 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	4b31      	ldr	r3, [pc, #196]	; (80090e4 <tcp_input+0x4a0>)
 8009020:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009022:	429a      	cmp	r2, r3
 8009024:	d107      	bne.n	8009036 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009026:	69f8      	ldr	r0, [r7, #28]
 8009028:	f000 fb56 	bl	80096d8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7fd ffd1 	bl	8006fd4 <pbuf_free>
        return;
 8009032:	e1fd      	b.n	8009430 <tcp_input+0x7ec>
        continue;
 8009034:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	61fb      	str	r3, [r7, #28]
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1bc      	bne.n	8008fbc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009042:	2300      	movs	r3, #0
 8009044:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009046:	4b2f      	ldr	r3, [pc, #188]	; (8009104 <tcp_input+0x4c0>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	617b      	str	r3, [r7, #20]
 800904c:	e02a      	b.n	80090a4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	7a1b      	ldrb	r3, [r3, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00c      	beq.n	8009070 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	7a1a      	ldrb	r2, [r3, #8]
 800905a:	4b22      	ldr	r3, [pc, #136]	; (80090e4 <tcp_input+0x4a0>)
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009062:	3301      	adds	r3, #1
 8009064:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009066:	429a      	cmp	r2, r3
 8009068:	d002      	beq.n	8009070 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	61bb      	str	r3, [r7, #24]
        continue;
 800906e:	e016      	b.n	800909e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	8ada      	ldrh	r2, [r3, #22]
 8009074:	4b1a      	ldr	r3, [pc, #104]	; (80090e0 <tcp_input+0x49c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	885b      	ldrh	r3, [r3, #2]
 800907a:	b29b      	uxth	r3, r3
 800907c:	429a      	cmp	r2, r3
 800907e:	d10c      	bne.n	800909a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	4b17      	ldr	r3, [pc, #92]	; (80090e4 <tcp_input+0x4a0>)
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	429a      	cmp	r2, r3
 800908a:	d00f      	beq.n	80090ac <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00d      	beq.n	80090ae <tcp_input+0x46a>
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d009      	beq.n	80090ae <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	617b      	str	r3, [r7, #20]
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1d1      	bne.n	800904e <tcp_input+0x40a>
 80090aa:	e000      	b.n	80090ae <tcp_input+0x46a>
            break;
 80090ac:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d029      	beq.n	8009108 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00a      	beq.n	80090d0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80090c2:	4b10      	ldr	r3, [pc, #64]	; (8009104 <tcp_input+0x4c0>)
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80090ca:	4a0e      	ldr	r2, [pc, #56]	; (8009104 <tcp_input+0x4c0>)
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80090d0:	6978      	ldr	r0, [r7, #20]
 80090d2:	f000 fa03 	bl	80094dc <tcp_listen_input>
      }
      pbuf_free(p);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7fd ff7c 	bl	8006fd4 <pbuf_free>
      return;
 80090dc:	e1a8      	b.n	8009430 <tcp_input+0x7ec>
 80090de:	bf00      	nop
 80090e0:	200087d8 	.word	0x200087d8
 80090e4:	20005240 	.word	0x20005240
 80090e8:	08011f54 	.word	0x08011f54
 80090ec:	08012080 	.word	0x08012080
 80090f0:	08011fa0 	.word	0x08011fa0
 80090f4:	200087bc 	.word	0x200087bc
 80090f8:	080120ac 	.word	0x080120ac
 80090fc:	200087c0 	.word	0x200087c0
 8009100:	080120d8 	.word	0x080120d8
 8009104:	200087b8 	.word	0x200087b8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 8158 	beq.w	80093c0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009110:	4b95      	ldr	r3, [pc, #596]	; (8009368 <tcp_input+0x724>)
 8009112:	2200      	movs	r2, #0
 8009114:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	891a      	ldrh	r2, [r3, #8]
 800911a:	4b93      	ldr	r3, [pc, #588]	; (8009368 <tcp_input+0x724>)
 800911c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800911e:	4a92      	ldr	r2, [pc, #584]	; (8009368 <tcp_input+0x724>)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009124:	4b91      	ldr	r3, [pc, #580]	; (800936c <tcp_input+0x728>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a8f      	ldr	r2, [pc, #572]	; (8009368 <tcp_input+0x724>)
 800912a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800912c:	4b90      	ldr	r3, [pc, #576]	; (8009370 <tcp_input+0x72c>)
 800912e:	2200      	movs	r2, #0
 8009130:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009132:	4b90      	ldr	r3, [pc, #576]	; (8009374 <tcp_input+0x730>)
 8009134:	2200      	movs	r2, #0
 8009136:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009138:	4b8f      	ldr	r3, [pc, #572]	; (8009378 <tcp_input+0x734>)
 800913a:	2200      	movs	r2, #0
 800913c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800913e:	4b8f      	ldr	r3, [pc, #572]	; (800937c <tcp_input+0x738>)
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	f003 0308 	and.w	r3, r3, #8
 8009146:	2b00      	cmp	r3, #0
 8009148:	d006      	beq.n	8009158 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	7b5b      	ldrb	r3, [r3, #13]
 800914e:	f043 0301 	orr.w	r3, r3, #1
 8009152:	b2da      	uxtb	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800915c:	2b00      	cmp	r3, #0
 800915e:	d017      	beq.n	8009190 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009160:	69f8      	ldr	r0, [r7, #28]
 8009162:	f7ff f929 	bl	80083b8 <tcp_process_refused_data>
 8009166:	4603      	mov	r3, r0
 8009168:	f113 0f0d 	cmn.w	r3, #13
 800916c:	d007      	beq.n	800917e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00c      	beq.n	8009190 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009176:	4b82      	ldr	r3, [pc, #520]	; (8009380 <tcp_input+0x73c>)
 8009178:	881b      	ldrh	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d008      	beq.n	8009190 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009182:	2b00      	cmp	r3, #0
 8009184:	f040 80e3 	bne.w	800934e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009188:	69f8      	ldr	r0, [r7, #28]
 800918a:	f003 f9ad 	bl	800c4e8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800918e:	e0de      	b.n	800934e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009190:	4a7c      	ldr	r2, [pc, #496]	; (8009384 <tcp_input+0x740>)
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009196:	69f8      	ldr	r0, [r7, #28]
 8009198:	f000 fb18 	bl	80097cc <tcp_process>
 800919c:	4603      	mov	r3, r0
 800919e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80091a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80091a4:	f113 0f0d 	cmn.w	r3, #13
 80091a8:	f000 80d3 	beq.w	8009352 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80091ac:	4b71      	ldr	r3, [pc, #452]	; (8009374 <tcp_input+0x730>)
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	f003 0308 	and.w	r3, r3, #8
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d015      	beq.n	80091e4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d008      	beq.n	80091d4 <tcp_input+0x590>
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091c8:	69fa      	ldr	r2, [r7, #28]
 80091ca:	6912      	ldr	r2, [r2, #16]
 80091cc:	f06f 010d 	mvn.w	r1, #13
 80091d0:	4610      	mov	r0, r2
 80091d2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80091d4:	69f9      	ldr	r1, [r7, #28]
 80091d6:	486c      	ldr	r0, [pc, #432]	; (8009388 <tcp_input+0x744>)
 80091d8:	f7ff fbbc 	bl	8008954 <tcp_pcb_remove>
        tcp_free(pcb);
 80091dc:	69f8      	ldr	r0, [r7, #28]
 80091de:	f7fe f9a9 	bl	8007534 <tcp_free>
 80091e2:	e0da      	b.n	800939a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80091e8:	4b63      	ldr	r3, [pc, #396]	; (8009378 <tcp_input+0x734>)
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d01d      	beq.n	800922c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80091f0:	4b61      	ldr	r3, [pc, #388]	; (8009378 <tcp_input+0x734>)
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00a      	beq.n	8009216 <tcp_input+0x5d2>
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009206:	69fa      	ldr	r2, [r7, #28]
 8009208:	6910      	ldr	r0, [r2, #16]
 800920a:	89fa      	ldrh	r2, [r7, #14]
 800920c:	69f9      	ldr	r1, [r7, #28]
 800920e:	4798      	blx	r3
 8009210:	4603      	mov	r3, r0
 8009212:	74fb      	strb	r3, [r7, #19]
 8009214:	e001      	b.n	800921a <tcp_input+0x5d6>
 8009216:	2300      	movs	r3, #0
 8009218:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800921a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800921e:	f113 0f0d 	cmn.w	r3, #13
 8009222:	f000 8098 	beq.w	8009356 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009226:	4b54      	ldr	r3, [pc, #336]	; (8009378 <tcp_input+0x734>)
 8009228:	2200      	movs	r2, #0
 800922a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800922c:	69f8      	ldr	r0, [r7, #28]
 800922e:	f000 f915 	bl	800945c <tcp_input_delayed_close>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	f040 8090 	bne.w	800935a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800923a:	4b4d      	ldr	r3, [pc, #308]	; (8009370 <tcp_input+0x72c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d041      	beq.n	80092c6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009246:	2b00      	cmp	r3, #0
 8009248:	d006      	beq.n	8009258 <tcp_input+0x614>
 800924a:	4b50      	ldr	r3, [pc, #320]	; (800938c <tcp_input+0x748>)
 800924c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009250:	494f      	ldr	r1, [pc, #316]	; (8009390 <tcp_input+0x74c>)
 8009252:	4850      	ldr	r0, [pc, #320]	; (8009394 <tcp_input+0x750>)
 8009254:	f006 fc4c 	bl	800faf0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	8b5b      	ldrh	r3, [r3, #26]
 800925c:	f003 0310 	and.w	r3, r3, #16
 8009260:	2b00      	cmp	r3, #0
 8009262:	d008      	beq.n	8009276 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009264:	4b42      	ldr	r3, [pc, #264]	; (8009370 <tcp_input+0x72c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4618      	mov	r0, r3
 800926a:	f7fd feb3 	bl	8006fd4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800926e:	69f8      	ldr	r0, [r7, #28]
 8009270:	f7fe fc48 	bl	8007b04 <tcp_abort>
            goto aborted;
 8009274:	e091      	b.n	800939a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00c      	beq.n	800929a <tcp_input+0x656>
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	6918      	ldr	r0, [r3, #16]
 800928a:	4b39      	ldr	r3, [pc, #228]	; (8009370 <tcp_input+0x72c>)
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	2300      	movs	r3, #0
 8009290:	69f9      	ldr	r1, [r7, #28]
 8009292:	47a0      	blx	r4
 8009294:	4603      	mov	r3, r0
 8009296:	74fb      	strb	r3, [r7, #19]
 8009298:	e008      	b.n	80092ac <tcp_input+0x668>
 800929a:	4b35      	ldr	r3, [pc, #212]	; (8009370 <tcp_input+0x72c>)
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	2300      	movs	r3, #0
 80092a0:	69f9      	ldr	r1, [r7, #28]
 80092a2:	2000      	movs	r0, #0
 80092a4:	f7ff f95e 	bl	8008564 <tcp_recv_null>
 80092a8:	4603      	mov	r3, r0
 80092aa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80092ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80092b0:	f113 0f0d 	cmn.w	r3, #13
 80092b4:	d053      	beq.n	800935e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80092b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d003      	beq.n	80092c6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80092be:	4b2c      	ldr	r3, [pc, #176]	; (8009370 <tcp_input+0x72c>)
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80092c6:	4b2b      	ldr	r3, [pc, #172]	; (8009374 <tcp_input+0x730>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	f003 0320 	and.w	r3, r3, #32
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d030      	beq.n	8009334 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d009      	beq.n	80092ee <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092de:	7b5a      	ldrb	r2, [r3, #13]
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092e4:	f042 0220 	orr.w	r2, r2, #32
 80092e8:	b2d2      	uxtb	r2, r2
 80092ea:	735a      	strb	r2, [r3, #13]
 80092ec:	e022      	b.n	8009334 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80092f6:	d005      	beq.n	8009304 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092fc:	3301      	adds	r3, #1
 80092fe:	b29a      	uxth	r2, r3
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00b      	beq.n	8009326 <tcp_input+0x6e2>
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	6918      	ldr	r0, [r3, #16]
 8009318:	2300      	movs	r3, #0
 800931a:	2200      	movs	r2, #0
 800931c:	69f9      	ldr	r1, [r7, #28]
 800931e:	47a0      	blx	r4
 8009320:	4603      	mov	r3, r0
 8009322:	74fb      	strb	r3, [r7, #19]
 8009324:	e001      	b.n	800932a <tcp_input+0x6e6>
 8009326:	2300      	movs	r3, #0
 8009328:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800932a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800932e:	f113 0f0d 	cmn.w	r3, #13
 8009332:	d016      	beq.n	8009362 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009334:	4b13      	ldr	r3, [pc, #76]	; (8009384 <tcp_input+0x740>)
 8009336:	2200      	movs	r2, #0
 8009338:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800933a:	69f8      	ldr	r0, [r7, #28]
 800933c:	f000 f88e 	bl	800945c <tcp_input_delayed_close>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d128      	bne.n	8009398 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009346:	69f8      	ldr	r0, [r7, #28]
 8009348:	f002 fac8 	bl	800b8dc <tcp_output>
 800934c:	e025      	b.n	800939a <tcp_input+0x756>
        goto aborted;
 800934e:	bf00      	nop
 8009350:	e023      	b.n	800939a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009352:	bf00      	nop
 8009354:	e021      	b.n	800939a <tcp_input+0x756>
              goto aborted;
 8009356:	bf00      	nop
 8009358:	e01f      	b.n	800939a <tcp_input+0x756>
          goto aborted;
 800935a:	bf00      	nop
 800935c:	e01d      	b.n	800939a <tcp_input+0x756>
            goto aborted;
 800935e:	bf00      	nop
 8009360:	e01b      	b.n	800939a <tcp_input+0x756>
              goto aborted;
 8009362:	bf00      	nop
 8009364:	e019      	b.n	800939a <tcp_input+0x756>
 8009366:	bf00      	nop
 8009368:	200087c8 	.word	0x200087c8
 800936c:	200087d8 	.word	0x200087d8
 8009370:	200087f8 	.word	0x200087f8
 8009374:	200087f5 	.word	0x200087f5
 8009378:	200087f0 	.word	0x200087f0
 800937c:	200087f4 	.word	0x200087f4
 8009380:	200087f2 	.word	0x200087f2
 8009384:	200087fc 	.word	0x200087fc
 8009388:	200087bc 	.word	0x200087bc
 800938c:	08011f54 	.word	0x08011f54
 8009390:	08012108 	.word	0x08012108
 8009394:	08011fa0 	.word	0x08011fa0
          goto aborted;
 8009398:	bf00      	nop
    tcp_input_pcb = NULL;
 800939a:	4b27      	ldr	r3, [pc, #156]	; (8009438 <tcp_input+0x7f4>)
 800939c:	2200      	movs	r2, #0
 800939e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80093a0:	4b26      	ldr	r3, [pc, #152]	; (800943c <tcp_input+0x7f8>)
 80093a2:	2200      	movs	r2, #0
 80093a4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80093a6:	4b26      	ldr	r3, [pc, #152]	; (8009440 <tcp_input+0x7fc>)
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d03f      	beq.n	800942e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80093ae:	4b24      	ldr	r3, [pc, #144]	; (8009440 <tcp_input+0x7fc>)
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fd fe0e 	bl	8006fd4 <pbuf_free>
      inseg.p = NULL;
 80093b8:	4b21      	ldr	r3, [pc, #132]	; (8009440 <tcp_input+0x7fc>)
 80093ba:	2200      	movs	r2, #0
 80093bc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80093be:	e036      	b.n	800942e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80093c0:	4b20      	ldr	r3, [pc, #128]	; (8009444 <tcp_input+0x800>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	899b      	ldrh	r3, [r3, #12]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7fc faa5 	bl	8005918 <lwip_htons>
 80093ce:	4603      	mov	r3, r0
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	f003 0304 	and.w	r3, r3, #4
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d118      	bne.n	800940c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093da:	4b1b      	ldr	r3, [pc, #108]	; (8009448 <tcp_input+0x804>)
 80093dc:	6819      	ldr	r1, [r3, #0]
 80093de:	4b1b      	ldr	r3, [pc, #108]	; (800944c <tcp_input+0x808>)
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	461a      	mov	r2, r3
 80093e4:	4b1a      	ldr	r3, [pc, #104]	; (8009450 <tcp_input+0x80c>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093ea:	4b16      	ldr	r3, [pc, #88]	; (8009444 <tcp_input+0x800>)
 80093ec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093ee:	885b      	ldrh	r3, [r3, #2]
 80093f0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093f2:	4a14      	ldr	r2, [pc, #80]	; (8009444 <tcp_input+0x800>)
 80093f4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093f6:	8812      	ldrh	r2, [r2, #0]
 80093f8:	b292      	uxth	r2, r2
 80093fa:	9202      	str	r2, [sp, #8]
 80093fc:	9301      	str	r3, [sp, #4]
 80093fe:	4b15      	ldr	r3, [pc, #84]	; (8009454 <tcp_input+0x810>)
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	4b15      	ldr	r3, [pc, #84]	; (8009458 <tcp_input+0x814>)
 8009404:	4602      	mov	r2, r0
 8009406:	2000      	movs	r0, #0
 8009408:	f003 f81c 	bl	800c444 <tcp_rst>
    pbuf_free(p);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7fd fde1 	bl	8006fd4 <pbuf_free>
  return;
 8009412:	e00c      	b.n	800942e <tcp_input+0x7ea>
    goto dropped;
 8009414:	bf00      	nop
 8009416:	e006      	b.n	8009426 <tcp_input+0x7e2>
    goto dropped;
 8009418:	bf00      	nop
 800941a:	e004      	b.n	8009426 <tcp_input+0x7e2>
    goto dropped;
 800941c:	bf00      	nop
 800941e:	e002      	b.n	8009426 <tcp_input+0x7e2>
      goto dropped;
 8009420:	bf00      	nop
 8009422:	e000      	b.n	8009426 <tcp_input+0x7e2>
      goto dropped;
 8009424:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f7fd fdd4 	bl	8006fd4 <pbuf_free>
 800942c:	e000      	b.n	8009430 <tcp_input+0x7ec>
  return;
 800942e:	bf00      	nop
}
 8009430:	3724      	adds	r7, #36	; 0x24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd90      	pop	{r4, r7, pc}
 8009436:	bf00      	nop
 8009438:	200087fc 	.word	0x200087fc
 800943c:	200087f8 	.word	0x200087f8
 8009440:	200087c8 	.word	0x200087c8
 8009444:	200087d8 	.word	0x200087d8
 8009448:	200087ec 	.word	0x200087ec
 800944c:	200087f2 	.word	0x200087f2
 8009450:	200087e8 	.word	0x200087e8
 8009454:	20005250 	.word	0x20005250
 8009458:	20005254 	.word	0x20005254

0800945c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d106      	bne.n	8009478 <tcp_input_delayed_close+0x1c>
 800946a:	4b17      	ldr	r3, [pc, #92]	; (80094c8 <tcp_input_delayed_close+0x6c>)
 800946c:	f240 225a 	movw	r2, #602	; 0x25a
 8009470:	4916      	ldr	r1, [pc, #88]	; (80094cc <tcp_input_delayed_close+0x70>)
 8009472:	4817      	ldr	r0, [pc, #92]	; (80094d0 <tcp_input_delayed_close+0x74>)
 8009474:	f006 fb3c 	bl	800faf0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009478:	4b16      	ldr	r3, [pc, #88]	; (80094d4 <tcp_input_delayed_close+0x78>)
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	f003 0310 	and.w	r3, r3, #16
 8009480:	2b00      	cmp	r3, #0
 8009482:	d01c      	beq.n	80094be <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	8b5b      	ldrh	r3, [r3, #26]
 8009488:	f003 0310 	and.w	r3, r3, #16
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10d      	bne.n	80094ac <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009496:	2b00      	cmp	r3, #0
 8009498:	d008      	beq.n	80094ac <tcp_input_delayed_close+0x50>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	6912      	ldr	r2, [r2, #16]
 80094a4:	f06f 010e 	mvn.w	r1, #14
 80094a8:	4610      	mov	r0, r2
 80094aa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80094ac:	6879      	ldr	r1, [r7, #4]
 80094ae:	480a      	ldr	r0, [pc, #40]	; (80094d8 <tcp_input_delayed_close+0x7c>)
 80094b0:	f7ff fa50 	bl	8008954 <tcp_pcb_remove>
    tcp_free(pcb);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7fe f83d 	bl	8007534 <tcp_free>
    return 1;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e000      	b.n	80094c0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	08011f54 	.word	0x08011f54
 80094cc:	08012124 	.word	0x08012124
 80094d0:	08011fa0 	.word	0x08011fa0
 80094d4:	200087f5 	.word	0x200087f5
 80094d8:	200087bc 	.word	0x200087bc

080094dc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80094dc:	b590      	push	{r4, r7, lr}
 80094de:	b08b      	sub	sp, #44	; 0x2c
 80094e0:	af04      	add	r7, sp, #16
 80094e2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80094e4:	4b6f      	ldr	r3, [pc, #444]	; (80096a4 <tcp_listen_input+0x1c8>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	f003 0304 	and.w	r3, r3, #4
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f040 80d2 	bne.w	8009696 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d106      	bne.n	8009506 <tcp_listen_input+0x2a>
 80094f8:	4b6b      	ldr	r3, [pc, #428]	; (80096a8 <tcp_listen_input+0x1cc>)
 80094fa:	f240 2281 	movw	r2, #641	; 0x281
 80094fe:	496b      	ldr	r1, [pc, #428]	; (80096ac <tcp_listen_input+0x1d0>)
 8009500:	486b      	ldr	r0, [pc, #428]	; (80096b0 <tcp_listen_input+0x1d4>)
 8009502:	f006 faf5 	bl	800faf0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009506:	4b67      	ldr	r3, [pc, #412]	; (80096a4 <tcp_listen_input+0x1c8>)
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	f003 0310 	and.w	r3, r3, #16
 800950e:	2b00      	cmp	r3, #0
 8009510:	d019      	beq.n	8009546 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009512:	4b68      	ldr	r3, [pc, #416]	; (80096b4 <tcp_listen_input+0x1d8>)
 8009514:	6819      	ldr	r1, [r3, #0]
 8009516:	4b68      	ldr	r3, [pc, #416]	; (80096b8 <tcp_listen_input+0x1dc>)
 8009518:	881b      	ldrh	r3, [r3, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	4b67      	ldr	r3, [pc, #412]	; (80096bc <tcp_listen_input+0x1e0>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009522:	4b67      	ldr	r3, [pc, #412]	; (80096c0 <tcp_listen_input+0x1e4>)
 8009524:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009526:	885b      	ldrh	r3, [r3, #2]
 8009528:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800952a:	4a65      	ldr	r2, [pc, #404]	; (80096c0 <tcp_listen_input+0x1e4>)
 800952c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800952e:	8812      	ldrh	r2, [r2, #0]
 8009530:	b292      	uxth	r2, r2
 8009532:	9202      	str	r2, [sp, #8]
 8009534:	9301      	str	r3, [sp, #4]
 8009536:	4b63      	ldr	r3, [pc, #396]	; (80096c4 <tcp_listen_input+0x1e8>)
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	4b63      	ldr	r3, [pc, #396]	; (80096c8 <tcp_listen_input+0x1ec>)
 800953c:	4602      	mov	r2, r0
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f002 ff80 	bl	800c444 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009544:	e0a9      	b.n	800969a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009546:	4b57      	ldr	r3, [pc, #348]	; (80096a4 <tcp_listen_input+0x1c8>)
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	f003 0302 	and.w	r3, r3, #2
 800954e:	2b00      	cmp	r3, #0
 8009550:	f000 80a3 	beq.w	800969a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	7d5b      	ldrb	r3, [r3, #21]
 8009558:	4618      	mov	r0, r3
 800955a:	f7ff f927 	bl	80087ac <tcp_alloc>
 800955e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d111      	bne.n	800958a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00a      	beq.n	8009584 <tcp_listen_input+0xa8>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	6910      	ldr	r0, [r2, #16]
 8009576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800957a:	2100      	movs	r1, #0
 800957c:	4798      	blx	r3
 800957e:	4603      	mov	r3, r0
 8009580:	73bb      	strb	r3, [r7, #14]
      return;
 8009582:	e08b      	b.n	800969c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009584:	23f0      	movs	r3, #240	; 0xf0
 8009586:	73bb      	strb	r3, [r7, #14]
      return;
 8009588:	e088      	b.n	800969c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800958a:	4b50      	ldr	r3, [pc, #320]	; (80096cc <tcp_listen_input+0x1f0>)
 800958c:	695a      	ldr	r2, [r3, #20]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009592:	4b4e      	ldr	r3, [pc, #312]	; (80096cc <tcp_listen_input+0x1f0>)
 8009594:	691a      	ldr	r2, [r3, #16]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	8ada      	ldrh	r2, [r3, #22]
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80095a2:	4b47      	ldr	r3, [pc, #284]	; (80096c0 <tcp_listen_input+0x1e4>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2203      	movs	r2, #3
 80095b2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80095b4:	4b41      	ldr	r3, [pc, #260]	; (80096bc <tcp_listen_input+0x1e0>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80095c6:	6978      	ldr	r0, [r7, #20]
 80095c8:	f7ff fa58 	bl	8008a7c <tcp_next_iss>
 80095cc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80095e6:	4b35      	ldr	r3, [pc, #212]	; (80096bc <tcp_listen_input+0x1e0>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	1e5a      	subs	r2, r3, #1
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	691a      	ldr	r2, [r3, #16]
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	7a5b      	ldrb	r3, [r3, #9]
 8009602:	f003 030c 	and.w	r3, r3, #12
 8009606:	b2da      	uxtb	r2, r3
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	7a1a      	ldrb	r2, [r3, #8]
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009614:	4b2e      	ldr	r3, [pc, #184]	; (80096d0 <tcp_listen_input+0x1f4>)
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	60da      	str	r2, [r3, #12]
 800961c:	4a2c      	ldr	r2, [pc, #176]	; (80096d0 <tcp_listen_input+0x1f4>)
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	6013      	str	r3, [r2, #0]
 8009622:	f003 f8d1 	bl	800c7c8 <tcp_timer_needed>
 8009626:	4b2b      	ldr	r3, [pc, #172]	; (80096d4 <tcp_listen_input+0x1f8>)
 8009628:	2201      	movs	r2, #1
 800962a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800962c:	6978      	ldr	r0, [r7, #20]
 800962e:	f001 fd8f 	bl	800b150 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009632:	4b23      	ldr	r3, [pc, #140]	; (80096c0 <tcp_listen_input+0x1e4>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	89db      	ldrh	r3, [r3, #14]
 8009638:	b29a      	uxth	r2, r3
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	3304      	adds	r3, #4
 8009654:	4618      	mov	r0, r3
 8009656:	f004 ff85 	bl	800e564 <ip4_route>
 800965a:	4601      	mov	r1, r0
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	3304      	adds	r3, #4
 8009660:	461a      	mov	r2, r3
 8009662:	4620      	mov	r0, r4
 8009664:	f7ff fa30 	bl	8008ac8 <tcp_eff_send_mss_netif>
 8009668:	4603      	mov	r3, r0
 800966a:	461a      	mov	r2, r3
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009670:	2112      	movs	r1, #18
 8009672:	6978      	ldr	r0, [r7, #20]
 8009674:	f002 f844 	bl	800b700 <tcp_enqueue_flags>
 8009678:	4603      	mov	r3, r0
 800967a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800967c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d004      	beq.n	800968e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009684:	2100      	movs	r1, #0
 8009686:	6978      	ldr	r0, [r7, #20]
 8009688:	f7fe f97e 	bl	8007988 <tcp_abandon>
      return;
 800968c:	e006      	b.n	800969c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800968e:	6978      	ldr	r0, [r7, #20]
 8009690:	f002 f924 	bl	800b8dc <tcp_output>
  return;
 8009694:	e001      	b.n	800969a <tcp_listen_input+0x1be>
    return;
 8009696:	bf00      	nop
 8009698:	e000      	b.n	800969c <tcp_listen_input+0x1c0>
  return;
 800969a:	bf00      	nop
}
 800969c:	371c      	adds	r7, #28
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd90      	pop	{r4, r7, pc}
 80096a2:	bf00      	nop
 80096a4:	200087f4 	.word	0x200087f4
 80096a8:	08011f54 	.word	0x08011f54
 80096ac:	0801214c 	.word	0x0801214c
 80096b0:	08011fa0 	.word	0x08011fa0
 80096b4:	200087ec 	.word	0x200087ec
 80096b8:	200087f2 	.word	0x200087f2
 80096bc:	200087e8 	.word	0x200087e8
 80096c0:	200087d8 	.word	0x200087d8
 80096c4:	20005250 	.word	0x20005250
 80096c8:	20005254 	.word	0x20005254
 80096cc:	20005240 	.word	0x20005240
 80096d0:	200087bc 	.word	0x200087bc
 80096d4:	200087c4 	.word	0x200087c4

080096d8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af04      	add	r7, sp, #16
 80096de:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80096e0:	4b2f      	ldr	r3, [pc, #188]	; (80097a0 <tcp_timewait_input+0xc8>)
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	f003 0304 	and.w	r3, r3, #4
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d153      	bne.n	8009794 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <tcp_timewait_input+0x28>
 80096f2:	4b2c      	ldr	r3, [pc, #176]	; (80097a4 <tcp_timewait_input+0xcc>)
 80096f4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80096f8:	492b      	ldr	r1, [pc, #172]	; (80097a8 <tcp_timewait_input+0xd0>)
 80096fa:	482c      	ldr	r0, [pc, #176]	; (80097ac <tcp_timewait_input+0xd4>)
 80096fc:	f006 f9f8 	bl	800faf0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009700:	4b27      	ldr	r3, [pc, #156]	; (80097a0 <tcp_timewait_input+0xc8>)
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	f003 0302 	and.w	r3, r3, #2
 8009708:	2b00      	cmp	r3, #0
 800970a:	d02a      	beq.n	8009762 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800970c:	4b28      	ldr	r3, [pc, #160]	; (80097b0 <tcp_timewait_input+0xd8>)
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	db2d      	blt.n	8009776 <tcp_timewait_input+0x9e>
 800971a:	4b25      	ldr	r3, [pc, #148]	; (80097b0 <tcp_timewait_input+0xd8>)
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009722:	6879      	ldr	r1, [r7, #4]
 8009724:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009726:	440b      	add	r3, r1
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	dc23      	bgt.n	8009776 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800972e:	4b21      	ldr	r3, [pc, #132]	; (80097b4 <tcp_timewait_input+0xdc>)
 8009730:	6819      	ldr	r1, [r3, #0]
 8009732:	4b21      	ldr	r3, [pc, #132]	; (80097b8 <tcp_timewait_input+0xe0>)
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	4b1d      	ldr	r3, [pc, #116]	; (80097b0 <tcp_timewait_input+0xd8>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800973e:	4b1f      	ldr	r3, [pc, #124]	; (80097bc <tcp_timewait_input+0xe4>)
 8009740:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009742:	885b      	ldrh	r3, [r3, #2]
 8009744:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009746:	4a1d      	ldr	r2, [pc, #116]	; (80097bc <tcp_timewait_input+0xe4>)
 8009748:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800974a:	8812      	ldrh	r2, [r2, #0]
 800974c:	b292      	uxth	r2, r2
 800974e:	9202      	str	r2, [sp, #8]
 8009750:	9301      	str	r3, [sp, #4]
 8009752:	4b1b      	ldr	r3, [pc, #108]	; (80097c0 <tcp_timewait_input+0xe8>)
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	4b1b      	ldr	r3, [pc, #108]	; (80097c4 <tcp_timewait_input+0xec>)
 8009758:	4602      	mov	r2, r0
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f002 fe72 	bl	800c444 <tcp_rst>
      return;
 8009760:	e01b      	b.n	800979a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8009762:	4b0f      	ldr	r3, [pc, #60]	; (80097a0 <tcp_timewait_input+0xc8>)
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	f003 0301 	and.w	r3, r3, #1
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800976e:	4b16      	ldr	r3, [pc, #88]	; (80097c8 <tcp_timewait_input+0xf0>)
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009776:	4b10      	ldr	r3, [pc, #64]	; (80097b8 <tcp_timewait_input+0xe0>)
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00c      	beq.n	8009798 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	8b5b      	ldrh	r3, [r3, #26]
 8009782:	f043 0302 	orr.w	r3, r3, #2
 8009786:	b29a      	uxth	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f002 f8a5 	bl	800b8dc <tcp_output>
  }
  return;
 8009792:	e001      	b.n	8009798 <tcp_timewait_input+0xc0>
    return;
 8009794:	bf00      	nop
 8009796:	e000      	b.n	800979a <tcp_timewait_input+0xc2>
  return;
 8009798:	bf00      	nop
}
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	200087f4 	.word	0x200087f4
 80097a4:	08011f54 	.word	0x08011f54
 80097a8:	0801216c 	.word	0x0801216c
 80097ac:	08011fa0 	.word	0x08011fa0
 80097b0:	200087e8 	.word	0x200087e8
 80097b4:	200087ec 	.word	0x200087ec
 80097b8:	200087f2 	.word	0x200087f2
 80097bc:	200087d8 	.word	0x200087d8
 80097c0:	20005250 	.word	0x20005250
 80097c4:	20005254 	.word	0x20005254
 80097c8:	200087b0 	.word	0x200087b0

080097cc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80097cc:	b590      	push	{r4, r7, lr}
 80097ce:	b08d      	sub	sp, #52	; 0x34
 80097d0:	af04      	add	r7, sp, #16
 80097d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d106      	bne.n	80097f0 <tcp_process+0x24>
 80097e2:	4b9d      	ldr	r3, [pc, #628]	; (8009a58 <tcp_process+0x28c>)
 80097e4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80097e8:	499c      	ldr	r1, [pc, #624]	; (8009a5c <tcp_process+0x290>)
 80097ea:	489d      	ldr	r0, [pc, #628]	; (8009a60 <tcp_process+0x294>)
 80097ec:	f006 f980 	bl	800faf0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80097f0:	4b9c      	ldr	r3, [pc, #624]	; (8009a64 <tcp_process+0x298>)
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	f003 0304 	and.w	r3, r3, #4
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d04e      	beq.n	800989a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	7d1b      	ldrb	r3, [r3, #20]
 8009800:	2b02      	cmp	r3, #2
 8009802:	d108      	bne.n	8009816 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009808:	4b97      	ldr	r3, [pc, #604]	; (8009a68 <tcp_process+0x29c>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	429a      	cmp	r2, r3
 800980e:	d123      	bne.n	8009858 <tcp_process+0x8c>
        acceptable = 1;
 8009810:	2301      	movs	r3, #1
 8009812:	76fb      	strb	r3, [r7, #27]
 8009814:	e020      	b.n	8009858 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800981a:	4b94      	ldr	r3, [pc, #592]	; (8009a6c <tcp_process+0x2a0>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	429a      	cmp	r2, r3
 8009820:	d102      	bne.n	8009828 <tcp_process+0x5c>
        acceptable = 1;
 8009822:	2301      	movs	r3, #1
 8009824:	76fb      	strb	r3, [r7, #27]
 8009826:	e017      	b.n	8009858 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009828:	4b90      	ldr	r3, [pc, #576]	; (8009a6c <tcp_process+0x2a0>)
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	2b00      	cmp	r3, #0
 8009834:	db10      	blt.n	8009858 <tcp_process+0x8c>
 8009836:	4b8d      	ldr	r3, [pc, #564]	; (8009a6c <tcp_process+0x2a0>)
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	6879      	ldr	r1, [r7, #4]
 8009840:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009842:	440b      	add	r3, r1
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	2b00      	cmp	r3, #0
 8009848:	dc06      	bgt.n	8009858 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	8b5b      	ldrh	r3, [r3, #26]
 800984e:	f043 0302 	orr.w	r3, r3, #2
 8009852:	b29a      	uxth	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009858:	7efb      	ldrb	r3, [r7, #27]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d01b      	beq.n	8009896 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	7d1b      	ldrb	r3, [r3, #20]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d106      	bne.n	8009874 <tcp_process+0xa8>
 8009866:	4b7c      	ldr	r3, [pc, #496]	; (8009a58 <tcp_process+0x28c>)
 8009868:	f44f 724e 	mov.w	r2, #824	; 0x338
 800986c:	4980      	ldr	r1, [pc, #512]	; (8009a70 <tcp_process+0x2a4>)
 800986e:	487c      	ldr	r0, [pc, #496]	; (8009a60 <tcp_process+0x294>)
 8009870:	f006 f93e 	bl	800faf0 <iprintf>
      recv_flags |= TF_RESET;
 8009874:	4b7f      	ldr	r3, [pc, #508]	; (8009a74 <tcp_process+0x2a8>)
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	f043 0308 	orr.w	r3, r3, #8
 800987c:	b2da      	uxtb	r2, r3
 800987e:	4b7d      	ldr	r3, [pc, #500]	; (8009a74 <tcp_process+0x2a8>)
 8009880:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	8b5b      	ldrh	r3, [r3, #26]
 8009886:	f023 0301 	bic.w	r3, r3, #1
 800988a:	b29a      	uxth	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009890:	f06f 030d 	mvn.w	r3, #13
 8009894:	e37a      	b.n	8009f8c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	e378      	b.n	8009f8c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800989a:	4b72      	ldr	r3, [pc, #456]	; (8009a64 <tcp_process+0x298>)
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	f003 0302 	and.w	r3, r3, #2
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d010      	beq.n	80098c8 <tcp_process+0xfc>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	7d1b      	ldrb	r3, [r3, #20]
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d00c      	beq.n	80098c8 <tcp_process+0xfc>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	7d1b      	ldrb	r3, [r3, #20]
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	d008      	beq.n	80098c8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	8b5b      	ldrh	r3, [r3, #26]
 80098ba:	f043 0302 	orr.w	r3, r3, #2
 80098be:	b29a      	uxth	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	e361      	b.n	8009f8c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	8b5b      	ldrh	r3, [r3, #26]
 80098cc:	f003 0310 	and.w	r3, r3, #16
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d103      	bne.n	80098dc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80098d4:	4b68      	ldr	r3, [pc, #416]	; (8009a78 <tcp_process+0x2ac>)
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f001 fc2f 	bl	800b150 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	7d1b      	ldrb	r3, [r3, #20]
 80098f6:	3b02      	subs	r3, #2
 80098f8:	2b07      	cmp	r3, #7
 80098fa:	f200 8337 	bhi.w	8009f6c <tcp_process+0x7a0>
 80098fe:	a201      	add	r2, pc, #4	; (adr r2, 8009904 <tcp_process+0x138>)
 8009900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009904:	08009925 	.word	0x08009925
 8009908:	08009b55 	.word	0x08009b55
 800990c:	08009ccd 	.word	0x08009ccd
 8009910:	08009cf7 	.word	0x08009cf7
 8009914:	08009e1b 	.word	0x08009e1b
 8009918:	08009ccd 	.word	0x08009ccd
 800991c:	08009ea7 	.word	0x08009ea7
 8009920:	08009f37 	.word	0x08009f37
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009924:	4b4f      	ldr	r3, [pc, #316]	; (8009a64 <tcp_process+0x298>)
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	f003 0310 	and.w	r3, r3, #16
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 80e4 	beq.w	8009afa <tcp_process+0x32e>
 8009932:	4b4c      	ldr	r3, [pc, #304]	; (8009a64 <tcp_process+0x298>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 80dd 	beq.w	8009afa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009944:	1c5a      	adds	r2, r3, #1
 8009946:	4b48      	ldr	r3, [pc, #288]	; (8009a68 <tcp_process+0x29c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	f040 80d5 	bne.w	8009afa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009950:	4b46      	ldr	r3, [pc, #280]	; (8009a6c <tcp_process+0x2a0>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	1c5a      	adds	r2, r3, #1
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009962:	4b41      	ldr	r3, [pc, #260]	; (8009a68 <tcp_process+0x29c>)
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800996a:	4b44      	ldr	r3, [pc, #272]	; (8009a7c <tcp_process+0x2b0>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	89db      	ldrh	r3, [r3, #14]
 8009970:	b29a      	uxth	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009984:	4b39      	ldr	r3, [pc, #228]	; (8009a6c <tcp_process+0x2a0>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	1e5a      	subs	r2, r3, #1
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2204      	movs	r2, #4
 8009992:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	3304      	adds	r3, #4
 800999c:	4618      	mov	r0, r3
 800999e:	f004 fde1 	bl	800e564 <ip4_route>
 80099a2:	4601      	mov	r1, r0
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	3304      	adds	r3, #4
 80099a8:	461a      	mov	r2, r3
 80099aa:	4620      	mov	r0, r4
 80099ac:	f7ff f88c 	bl	8008ac8 <tcp_eff_send_mss_netif>
 80099b0:	4603      	mov	r3, r0
 80099b2:	461a      	mov	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099bc:	009a      	lsls	r2, r3, #2
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099c2:	005b      	lsls	r3, r3, #1
 80099c4:	f241 111c 	movw	r1, #4380	; 0x111c
 80099c8:	428b      	cmp	r3, r1
 80099ca:	bf38      	it	cc
 80099cc:	460b      	movcc	r3, r1
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d204      	bcs.n	80099dc <tcp_process+0x210>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	b29b      	uxth	r3, r3
 80099da:	e00d      	b.n	80099f8 <tcp_process+0x22c>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099e0:	005b      	lsls	r3, r3, #1
 80099e2:	f241 121c 	movw	r2, #4380	; 0x111c
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d904      	bls.n	80099f4 <tcp_process+0x228>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099ee:	005b      	lsls	r3, r3, #1
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	e001      	b.n	80099f8 <tcp_process+0x22c>
 80099f4:	f241 131c 	movw	r3, #4380	; 0x111c
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d106      	bne.n	8009a16 <tcp_process+0x24a>
 8009a08:	4b13      	ldr	r3, [pc, #76]	; (8009a58 <tcp_process+0x28c>)
 8009a0a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009a0e:	491c      	ldr	r1, [pc, #112]	; (8009a80 <tcp_process+0x2b4>)
 8009a10:	4813      	ldr	r0, [pc, #76]	; (8009a60 <tcp_process+0x294>)
 8009a12:	f006 f86d 	bl	800faf0 <iprintf>
        --pcb->snd_queuelen;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a2a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d12a      	bne.n	8009a88 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a36:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d106      	bne.n	8009a4c <tcp_process+0x280>
 8009a3e:	4b06      	ldr	r3, [pc, #24]	; (8009a58 <tcp_process+0x28c>)
 8009a40:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009a44:	490f      	ldr	r1, [pc, #60]	; (8009a84 <tcp_process+0x2b8>)
 8009a46:	4806      	ldr	r0, [pc, #24]	; (8009a60 <tcp_process+0x294>)
 8009a48:	f006 f852 	bl	800faf0 <iprintf>
          pcb->unsent = rseg->next;
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	66da      	str	r2, [r3, #108]	; 0x6c
 8009a54:	e01c      	b.n	8009a90 <tcp_process+0x2c4>
 8009a56:	bf00      	nop
 8009a58:	08011f54 	.word	0x08011f54
 8009a5c:	0801218c 	.word	0x0801218c
 8009a60:	08011fa0 	.word	0x08011fa0
 8009a64:	200087f4 	.word	0x200087f4
 8009a68:	200087ec 	.word	0x200087ec
 8009a6c:	200087e8 	.word	0x200087e8
 8009a70:	080121a8 	.word	0x080121a8
 8009a74:	200087f5 	.word	0x200087f5
 8009a78:	200087b0 	.word	0x200087b0
 8009a7c:	200087d8 	.word	0x200087d8
 8009a80:	080121c8 	.word	0x080121c8
 8009a84:	080121e0 	.word	0x080121e0
        } else {
          pcb->unacked = rseg->next;
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009a90:	69f8      	ldr	r0, [r7, #28]
 8009a92:	f7fe fd22 	bl	80084da <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d104      	bne.n	8009aa8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009aa4:	861a      	strh	r2, [r3, #48]	; 0x30
 8009aa6:	e006      	b.n	8009ab6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00a      	beq.n	8009ad6 <tcp_process+0x30a>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	6910      	ldr	r0, [r2, #16]
 8009aca:	2200      	movs	r2, #0
 8009acc:	6879      	ldr	r1, [r7, #4]
 8009ace:	4798      	blx	r3
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	76bb      	strb	r3, [r7, #26]
 8009ad4:	e001      	b.n	8009ada <tcp_process+0x30e>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009ada:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009ade:	f113 0f0d 	cmn.w	r3, #13
 8009ae2:	d102      	bne.n	8009aea <tcp_process+0x31e>
          return ERR_ABRT;
 8009ae4:	f06f 030c 	mvn.w	r3, #12
 8009ae8:	e250      	b.n	8009f8c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	8b5b      	ldrh	r3, [r3, #26]
 8009aee:	f043 0302 	orr.w	r3, r3, #2
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009af8:	e23a      	b.n	8009f70 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009afa:	4b98      	ldr	r3, [pc, #608]	; (8009d5c <tcp_process+0x590>)
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	f003 0310 	and.w	r3, r3, #16
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 8234 	beq.w	8009f70 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b08:	4b95      	ldr	r3, [pc, #596]	; (8009d60 <tcp_process+0x594>)
 8009b0a:	6819      	ldr	r1, [r3, #0]
 8009b0c:	4b95      	ldr	r3, [pc, #596]	; (8009d64 <tcp_process+0x598>)
 8009b0e:	881b      	ldrh	r3, [r3, #0]
 8009b10:	461a      	mov	r2, r3
 8009b12:	4b95      	ldr	r3, [pc, #596]	; (8009d68 <tcp_process+0x59c>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b18:	4b94      	ldr	r3, [pc, #592]	; (8009d6c <tcp_process+0x5a0>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b1c:	885b      	ldrh	r3, [r3, #2]
 8009b1e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b20:	4a92      	ldr	r2, [pc, #584]	; (8009d6c <tcp_process+0x5a0>)
 8009b22:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b24:	8812      	ldrh	r2, [r2, #0]
 8009b26:	b292      	uxth	r2, r2
 8009b28:	9202      	str	r2, [sp, #8]
 8009b2a:	9301      	str	r3, [sp, #4]
 8009b2c:	4b90      	ldr	r3, [pc, #576]	; (8009d70 <tcp_process+0x5a4>)
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	4b90      	ldr	r3, [pc, #576]	; (8009d74 <tcp_process+0x5a8>)
 8009b32:	4602      	mov	r2, r0
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f002 fc85 	bl	800c444 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b40:	2b05      	cmp	r3, #5
 8009b42:	f200 8215 	bhi.w	8009f70 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f002 fa4f 	bl	800bff0 <tcp_rexmit_rto>
      break;
 8009b52:	e20d      	b.n	8009f70 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009b54:	4b81      	ldr	r3, [pc, #516]	; (8009d5c <tcp_process+0x590>)
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	f003 0310 	and.w	r3, r3, #16
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f000 80a1 	beq.w	8009ca4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009b62:	4b7f      	ldr	r3, [pc, #508]	; (8009d60 <tcp_process+0x594>)
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	db7e      	blt.n	8009c70 <tcp_process+0x4a4>
 8009b72:	4b7b      	ldr	r3, [pc, #492]	; (8009d60 <tcp_process+0x594>)
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	dc77      	bgt.n	8009c70 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2204      	movs	r2, #4
 8009b84:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d102      	bne.n	8009b94 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009b8e:	23fa      	movs	r3, #250	; 0xfa
 8009b90:	76bb      	strb	r3, [r7, #26]
 8009b92:	e01d      	b.n	8009bd0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d106      	bne.n	8009bac <tcp_process+0x3e0>
 8009b9e:	4b76      	ldr	r3, [pc, #472]	; (8009d78 <tcp_process+0x5ac>)
 8009ba0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009ba4:	4975      	ldr	r1, [pc, #468]	; (8009d7c <tcp_process+0x5b0>)
 8009ba6:	4876      	ldr	r0, [pc, #472]	; (8009d80 <tcp_process+0x5b4>)
 8009ba8:	f005 ffa2 	bl	800faf0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <tcp_process+0x400>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	6910      	ldr	r0, [r2, #16]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	6879      	ldr	r1, [r7, #4]
 8009bc4:	4798      	blx	r3
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	76bb      	strb	r3, [r7, #26]
 8009bca:	e001      	b.n	8009bd0 <tcp_process+0x404>
 8009bcc:	23f0      	movs	r3, #240	; 0xf0
 8009bce:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009bd0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00a      	beq.n	8009bee <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009bd8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009bdc:	f113 0f0d 	cmn.w	r3, #13
 8009be0:	d002      	beq.n	8009be8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7fd ff8e 	bl	8007b04 <tcp_abort>
            }
            return ERR_ABRT;
 8009be8:	f06f 030c 	mvn.w	r3, #12
 8009bec:	e1ce      	b.n	8009f8c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fae0 	bl	800a1b4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009bf4:	4b63      	ldr	r3, [pc, #396]	; (8009d84 <tcp_process+0x5b8>)
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d005      	beq.n	8009c08 <tcp_process+0x43c>
            recv_acked--;
 8009bfc:	4b61      	ldr	r3, [pc, #388]	; (8009d84 <tcp_process+0x5b8>)
 8009bfe:	881b      	ldrh	r3, [r3, #0]
 8009c00:	3b01      	subs	r3, #1
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	4b5f      	ldr	r3, [pc, #380]	; (8009d84 <tcp_process+0x5b8>)
 8009c06:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c0c:	009a      	lsls	r2, r3, #2
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c12:	005b      	lsls	r3, r3, #1
 8009c14:	f241 111c 	movw	r1, #4380	; 0x111c
 8009c18:	428b      	cmp	r3, r1
 8009c1a:	bf38      	it	cc
 8009c1c:	460b      	movcc	r3, r1
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d204      	bcs.n	8009c2c <tcp_process+0x460>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	e00d      	b.n	8009c48 <tcp_process+0x47c>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c30:	005b      	lsls	r3, r3, #1
 8009c32:	f241 121c 	movw	r2, #4380	; 0x111c
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d904      	bls.n	8009c44 <tcp_process+0x478>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	e001      	b.n	8009c48 <tcp_process+0x47c>
 8009c44:	f241 131c 	movw	r3, #4380	; 0x111c
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009c4e:	4b4e      	ldr	r3, [pc, #312]	; (8009d88 <tcp_process+0x5bc>)
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	f003 0320 	and.w	r3, r3, #32
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d037      	beq.n	8009cca <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	8b5b      	ldrh	r3, [r3, #26]
 8009c5e:	f043 0302 	orr.w	r3, r3, #2
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2207      	movs	r2, #7
 8009c6c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009c6e:	e02c      	b.n	8009cca <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c70:	4b3b      	ldr	r3, [pc, #236]	; (8009d60 <tcp_process+0x594>)
 8009c72:	6819      	ldr	r1, [r3, #0]
 8009c74:	4b3b      	ldr	r3, [pc, #236]	; (8009d64 <tcp_process+0x598>)
 8009c76:	881b      	ldrh	r3, [r3, #0]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	4b3b      	ldr	r3, [pc, #236]	; (8009d68 <tcp_process+0x59c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c80:	4b3a      	ldr	r3, [pc, #232]	; (8009d6c <tcp_process+0x5a0>)
 8009c82:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c84:	885b      	ldrh	r3, [r3, #2]
 8009c86:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c88:	4a38      	ldr	r2, [pc, #224]	; (8009d6c <tcp_process+0x5a0>)
 8009c8a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c8c:	8812      	ldrh	r2, [r2, #0]
 8009c8e:	b292      	uxth	r2, r2
 8009c90:	9202      	str	r2, [sp, #8]
 8009c92:	9301      	str	r3, [sp, #4]
 8009c94:	4b36      	ldr	r3, [pc, #216]	; (8009d70 <tcp_process+0x5a4>)
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	4b36      	ldr	r3, [pc, #216]	; (8009d74 <tcp_process+0x5a8>)
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f002 fbd1 	bl	800c444 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009ca2:	e167      	b.n	8009f74 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009ca4:	4b2d      	ldr	r3, [pc, #180]	; (8009d5c <tcp_process+0x590>)
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	f003 0302 	and.w	r3, r3, #2
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 8161 	beq.w	8009f74 <tcp_process+0x7a8>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb6:	1e5a      	subs	r2, r3, #1
 8009cb8:	4b2b      	ldr	r3, [pc, #172]	; (8009d68 <tcp_process+0x59c>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	f040 8159 	bne.w	8009f74 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f002 f9b6 	bl	800c034 <tcp_rexmit>
      break;
 8009cc8:	e154      	b.n	8009f74 <tcp_process+0x7a8>
 8009cca:	e153      	b.n	8009f74 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fa71 	bl	800a1b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009cd2:	4b2d      	ldr	r3, [pc, #180]	; (8009d88 <tcp_process+0x5bc>)
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	f003 0320 	and.w	r3, r3, #32
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 814c 	beq.w	8009f78 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	8b5b      	ldrh	r3, [r3, #26]
 8009ce4:	f043 0302 	orr.w	r3, r3, #2
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2207      	movs	r2, #7
 8009cf2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009cf4:	e140      	b.n	8009f78 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fa5c 	bl	800a1b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009cfc:	4b22      	ldr	r3, [pc, #136]	; (8009d88 <tcp_process+0x5bc>)
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	f003 0320 	and.w	r3, r3, #32
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d071      	beq.n	8009dec <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d08:	4b14      	ldr	r3, [pc, #80]	; (8009d5c <tcp_process+0x590>)
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	f003 0310 	and.w	r3, r3, #16
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d060      	beq.n	8009dd6 <tcp_process+0x60a>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d18:	4b11      	ldr	r3, [pc, #68]	; (8009d60 <tcp_process+0x594>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d15a      	bne.n	8009dd6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d156      	bne.n	8009dd6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	8b5b      	ldrh	r3, [r3, #26]
 8009d2c:	f043 0302 	orr.w	r3, r3, #2
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7fe fdbc 	bl	80088b4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009d3c:	4b13      	ldr	r3, [pc, #76]	; (8009d8c <tcp_process+0x5c0>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d105      	bne.n	8009d52 <tcp_process+0x586>
 8009d46:	4b11      	ldr	r3, [pc, #68]	; (8009d8c <tcp_process+0x5c0>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	4a0f      	ldr	r2, [pc, #60]	; (8009d8c <tcp_process+0x5c0>)
 8009d4e:	6013      	str	r3, [r2, #0]
 8009d50:	e02e      	b.n	8009db0 <tcp_process+0x5e4>
 8009d52:	4b0e      	ldr	r3, [pc, #56]	; (8009d8c <tcp_process+0x5c0>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	617b      	str	r3, [r7, #20]
 8009d58:	e027      	b.n	8009daa <tcp_process+0x5de>
 8009d5a:	bf00      	nop
 8009d5c:	200087f4 	.word	0x200087f4
 8009d60:	200087ec 	.word	0x200087ec
 8009d64:	200087f2 	.word	0x200087f2
 8009d68:	200087e8 	.word	0x200087e8
 8009d6c:	200087d8 	.word	0x200087d8
 8009d70:	20005250 	.word	0x20005250
 8009d74:	20005254 	.word	0x20005254
 8009d78:	08011f54 	.word	0x08011f54
 8009d7c:	080121f4 	.word	0x080121f4
 8009d80:	08011fa0 	.word	0x08011fa0
 8009d84:	200087f0 	.word	0x200087f0
 8009d88:	200087f5 	.word	0x200087f5
 8009d8c:	200087bc 	.word	0x200087bc
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d104      	bne.n	8009da4 <tcp_process+0x5d8>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68da      	ldr	r2, [r3, #12]
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	60da      	str	r2, [r3, #12]
 8009da2:	e005      	b.n	8009db0 <tcp_process+0x5e4>
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	617b      	str	r3, [r7, #20]
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1ef      	bne.n	8009d90 <tcp_process+0x5c4>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	60da      	str	r2, [r3, #12]
 8009db6:	4b77      	ldr	r3, [pc, #476]	; (8009f94 <tcp_process+0x7c8>)
 8009db8:	2201      	movs	r2, #1
 8009dba:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	220a      	movs	r2, #10
 8009dc0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009dc2:	4b75      	ldr	r3, [pc, #468]	; (8009f98 <tcp_process+0x7cc>)
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	60da      	str	r2, [r3, #12]
 8009dca:	4a73      	ldr	r2, [pc, #460]	; (8009f98 <tcp_process+0x7cc>)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	f002 fcfa 	bl	800c7c8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009dd4:	e0d2      	b.n	8009f7c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	8b5b      	ldrh	r3, [r3, #26]
 8009dda:	f043 0302 	orr.w	r3, r3, #2
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2208      	movs	r2, #8
 8009de8:	751a      	strb	r2, [r3, #20]
      break;
 8009dea:	e0c7      	b.n	8009f7c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009dec:	4b6b      	ldr	r3, [pc, #428]	; (8009f9c <tcp_process+0x7d0>)
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	f003 0310 	and.w	r3, r3, #16
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f000 80c1 	beq.w	8009f7c <tcp_process+0x7b0>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009dfe:	4b68      	ldr	r3, [pc, #416]	; (8009fa0 <tcp_process+0x7d4>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	f040 80ba 	bne.w	8009f7c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f040 80b5 	bne.w	8009f7c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2206      	movs	r2, #6
 8009e16:	751a      	strb	r2, [r3, #20]
      break;
 8009e18:	e0b0      	b.n	8009f7c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f9ca 	bl	800a1b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009e20:	4b60      	ldr	r3, [pc, #384]	; (8009fa4 <tcp_process+0x7d8>)
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	f003 0320 	and.w	r3, r3, #32
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f000 80a9 	beq.w	8009f80 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	8b5b      	ldrh	r3, [r3, #26]
 8009e32:	f043 0302 	orr.w	r3, r3, #2
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f7fe fd39 	bl	80088b4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009e42:	4b59      	ldr	r3, [pc, #356]	; (8009fa8 <tcp_process+0x7dc>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d105      	bne.n	8009e58 <tcp_process+0x68c>
 8009e4c:	4b56      	ldr	r3, [pc, #344]	; (8009fa8 <tcp_process+0x7dc>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	4a55      	ldr	r2, [pc, #340]	; (8009fa8 <tcp_process+0x7dc>)
 8009e54:	6013      	str	r3, [r2, #0]
 8009e56:	e013      	b.n	8009e80 <tcp_process+0x6b4>
 8009e58:	4b53      	ldr	r3, [pc, #332]	; (8009fa8 <tcp_process+0x7dc>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	613b      	str	r3, [r7, #16]
 8009e5e:	e00c      	b.n	8009e7a <tcp_process+0x6ae>
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d104      	bne.n	8009e74 <tcp_process+0x6a8>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68da      	ldr	r2, [r3, #12]
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	60da      	str	r2, [r3, #12]
 8009e72:	e005      	b.n	8009e80 <tcp_process+0x6b4>
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	613b      	str	r3, [r7, #16]
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1ef      	bne.n	8009e60 <tcp_process+0x694>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	60da      	str	r2, [r3, #12]
 8009e86:	4b43      	ldr	r3, [pc, #268]	; (8009f94 <tcp_process+0x7c8>)
 8009e88:	2201      	movs	r2, #1
 8009e8a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	220a      	movs	r2, #10
 8009e90:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009e92:	4b41      	ldr	r3, [pc, #260]	; (8009f98 <tcp_process+0x7cc>)
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	60da      	str	r2, [r3, #12]
 8009e9a:	4a3f      	ldr	r2, [pc, #252]	; (8009f98 <tcp_process+0x7cc>)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6013      	str	r3, [r2, #0]
 8009ea0:	f002 fc92 	bl	800c7c8 <tcp_timer_needed>
      }
      break;
 8009ea4:	e06c      	b.n	8009f80 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f984 	bl	800a1b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009eac:	4b3b      	ldr	r3, [pc, #236]	; (8009f9c <tcp_process+0x7d0>)
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	f003 0310 	and.w	r3, r3, #16
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d065      	beq.n	8009f84 <tcp_process+0x7b8>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ebc:	4b38      	ldr	r3, [pc, #224]	; (8009fa0 <tcp_process+0x7d4>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d15f      	bne.n	8009f84 <tcp_process+0x7b8>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d15b      	bne.n	8009f84 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7fe fcf1 	bl	80088b4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009ed2:	4b35      	ldr	r3, [pc, #212]	; (8009fa8 <tcp_process+0x7dc>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d105      	bne.n	8009ee8 <tcp_process+0x71c>
 8009edc:	4b32      	ldr	r3, [pc, #200]	; (8009fa8 <tcp_process+0x7dc>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	4a31      	ldr	r2, [pc, #196]	; (8009fa8 <tcp_process+0x7dc>)
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	e013      	b.n	8009f10 <tcp_process+0x744>
 8009ee8:	4b2f      	ldr	r3, [pc, #188]	; (8009fa8 <tcp_process+0x7dc>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	60fb      	str	r3, [r7, #12]
 8009eee:	e00c      	b.n	8009f0a <tcp_process+0x73e>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d104      	bne.n	8009f04 <tcp_process+0x738>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68da      	ldr	r2, [r3, #12]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	60da      	str	r2, [r3, #12]
 8009f02:	e005      	b.n	8009f10 <tcp_process+0x744>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	60fb      	str	r3, [r7, #12]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1ef      	bne.n	8009ef0 <tcp_process+0x724>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	60da      	str	r2, [r3, #12]
 8009f16:	4b1f      	ldr	r3, [pc, #124]	; (8009f94 <tcp_process+0x7c8>)
 8009f18:	2201      	movs	r2, #1
 8009f1a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	220a      	movs	r2, #10
 8009f20:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009f22:	4b1d      	ldr	r3, [pc, #116]	; (8009f98 <tcp_process+0x7cc>)
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	60da      	str	r2, [r3, #12]
 8009f2a:	4a1b      	ldr	r2, [pc, #108]	; (8009f98 <tcp_process+0x7cc>)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6013      	str	r3, [r2, #0]
 8009f30:	f002 fc4a 	bl	800c7c8 <tcp_timer_needed>
      }
      break;
 8009f34:	e026      	b.n	8009f84 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f93c 	bl	800a1b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009f3c:	4b17      	ldr	r3, [pc, #92]	; (8009f9c <tcp_process+0x7d0>)
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	f003 0310 	and.w	r3, r3, #16
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d01f      	beq.n	8009f88 <tcp_process+0x7bc>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f4c:	4b14      	ldr	r3, [pc, #80]	; (8009fa0 <tcp_process+0x7d4>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d119      	bne.n	8009f88 <tcp_process+0x7bc>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d115      	bne.n	8009f88 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009f5c:	4b11      	ldr	r3, [pc, #68]	; (8009fa4 <tcp_process+0x7d8>)
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	f043 0310 	orr.w	r3, r3, #16
 8009f64:	b2da      	uxtb	r2, r3
 8009f66:	4b0f      	ldr	r3, [pc, #60]	; (8009fa4 <tcp_process+0x7d8>)
 8009f68:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009f6a:	e00d      	b.n	8009f88 <tcp_process+0x7bc>
    default:
      break;
 8009f6c:	bf00      	nop
 8009f6e:	e00c      	b.n	8009f8a <tcp_process+0x7be>
      break;
 8009f70:	bf00      	nop
 8009f72:	e00a      	b.n	8009f8a <tcp_process+0x7be>
      break;
 8009f74:	bf00      	nop
 8009f76:	e008      	b.n	8009f8a <tcp_process+0x7be>
      break;
 8009f78:	bf00      	nop
 8009f7a:	e006      	b.n	8009f8a <tcp_process+0x7be>
      break;
 8009f7c:	bf00      	nop
 8009f7e:	e004      	b.n	8009f8a <tcp_process+0x7be>
      break;
 8009f80:	bf00      	nop
 8009f82:	e002      	b.n	8009f8a <tcp_process+0x7be>
      break;
 8009f84:	bf00      	nop
 8009f86:	e000      	b.n	8009f8a <tcp_process+0x7be>
      break;
 8009f88:	bf00      	nop
  }
  return ERR_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3724      	adds	r7, #36	; 0x24
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd90      	pop	{r4, r7, pc}
 8009f94:	200087c4 	.word	0x200087c4
 8009f98:	200087c0 	.word	0x200087c0
 8009f9c:	200087f4 	.word	0x200087f4
 8009fa0:	200087ec 	.word	0x200087ec
 8009fa4:	200087f5 	.word	0x200087f5
 8009fa8:	200087bc 	.word	0x200087bc

08009fac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009fac:	b590      	push	{r4, r7, lr}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d106      	bne.n	8009fca <tcp_oos_insert_segment+0x1e>
 8009fbc:	4b3b      	ldr	r3, [pc, #236]	; (800a0ac <tcp_oos_insert_segment+0x100>)
 8009fbe:	f240 421f 	movw	r2, #1055	; 0x41f
 8009fc2:	493b      	ldr	r1, [pc, #236]	; (800a0b0 <tcp_oos_insert_segment+0x104>)
 8009fc4:	483b      	ldr	r0, [pc, #236]	; (800a0b4 <tcp_oos_insert_segment+0x108>)
 8009fc6:	f005 fd93 	bl	800faf0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	899b      	ldrh	r3, [r3, #12]
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fb fca0 	bl	8005918 <lwip_htons>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	f003 0301 	and.w	r3, r3, #1
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d028      	beq.n	800a036 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009fe4:	6838      	ldr	r0, [r7, #0]
 8009fe6:	f7fe fa63 	bl	80084b0 <tcp_segs_free>
    next = NULL;
 8009fea:	2300      	movs	r3, #0
 8009fec:	603b      	str	r3, [r7, #0]
 8009fee:	e056      	b.n	800a09e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	899b      	ldrh	r3, [r3, #12]
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7fb fc8d 	bl	8005918 <lwip_htons>
 8009ffe:	4603      	mov	r3, r0
 800a000:	b2db      	uxtb	r3, r3
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00d      	beq.n	800a026 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	899b      	ldrh	r3, [r3, #12]
 800a010:	b29c      	uxth	r4, r3
 800a012:	2001      	movs	r0, #1
 800a014:	f7fb fc80 	bl	8005918 <lwip_htons>
 800a018:	4603      	mov	r3, r0
 800a01a:	461a      	mov	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	4322      	orrs	r2, r4
 800a022:	b292      	uxth	r2, r2
 800a024:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f7fe fa52 	bl	80084da <tcp_seg_free>
    while (next &&
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00e      	beq.n	800a05a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	891b      	ldrh	r3, [r3, #8]
 800a040:	461a      	mov	r2, r3
 800a042:	4b1d      	ldr	r3, [pc, #116]	; (800a0b8 <tcp_oos_insert_segment+0x10c>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	441a      	add	r2, r3
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	6839      	ldr	r1, [r7, #0]
 800a050:	8909      	ldrh	r1, [r1, #8]
 800a052:	440b      	add	r3, r1
 800a054:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a056:	2b00      	cmp	r3, #0
 800a058:	daca      	bge.n	8009ff0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d01e      	beq.n	800a09e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	891b      	ldrh	r3, [r3, #8]
 800a064:	461a      	mov	r2, r3
 800a066:	4b14      	ldr	r3, [pc, #80]	; (800a0b8 <tcp_oos_insert_segment+0x10c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	441a      	add	r2, r3
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a074:	2b00      	cmp	r3, #0
 800a076:	dd12      	ble.n	800a09e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	b29a      	uxth	r2, r3
 800a080:	4b0d      	ldr	r3, [pc, #52]	; (800a0b8 <tcp_oos_insert_segment+0x10c>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	b29b      	uxth	r3, r3
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	b29a      	uxth	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	685a      	ldr	r2, [r3, #4]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	891b      	ldrh	r3, [r3, #8]
 800a096:	4619      	mov	r1, r3
 800a098:	4610      	mov	r0, r2
 800a09a:	f7fc fe15 	bl	8006cc8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	683a      	ldr	r2, [r7, #0]
 800a0a2:	601a      	str	r2, [r3, #0]
}
 800a0a4:	bf00      	nop
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd90      	pop	{r4, r7, pc}
 800a0ac:	08011f54 	.word	0x08011f54
 800a0b0:	08012214 	.word	0x08012214
 800a0b4:	08011fa0 	.word	0x08011fa0
 800a0b8:	200087e8 	.word	0x200087e8

0800a0bc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a0bc:	b5b0      	push	{r4, r5, r7, lr}
 800a0be:	b086      	sub	sp, #24
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
 800a0c8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a0ca:	e03e      	b.n	800a14a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fd f802 	bl	80070e4 <pbuf_clen>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a0ea:	8a7a      	ldrh	r2, [r7, #18]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d906      	bls.n	800a0fe <tcp_free_acked_segments+0x42>
 800a0f0:	4b2a      	ldr	r3, [pc, #168]	; (800a19c <tcp_free_acked_segments+0xe0>)
 800a0f2:	f240 4257 	movw	r2, #1111	; 0x457
 800a0f6:	492a      	ldr	r1, [pc, #168]	; (800a1a0 <tcp_free_acked_segments+0xe4>)
 800a0f8:	482a      	ldr	r0, [pc, #168]	; (800a1a4 <tcp_free_acked_segments+0xe8>)
 800a0fa:	f005 fcf9 	bl	800faf0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a104:	8a7b      	ldrh	r3, [r7, #18]
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	b29a      	uxth	r2, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	891a      	ldrh	r2, [r3, #8]
 800a114:	4b24      	ldr	r3, [pc, #144]	; (800a1a8 <tcp_free_acked_segments+0xec>)
 800a116:	881b      	ldrh	r3, [r3, #0]
 800a118:	4413      	add	r3, r2
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	4b22      	ldr	r3, [pc, #136]	; (800a1a8 <tcp_free_acked_segments+0xec>)
 800a11e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a120:	6978      	ldr	r0, [r7, #20]
 800a122:	f7fe f9da 	bl	80084da <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00c      	beq.n	800a14a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d109      	bne.n	800a14a <tcp_free_acked_segments+0x8e>
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d106      	bne.n	800a14a <tcp_free_acked_segments+0x8e>
 800a13c:	4b17      	ldr	r3, [pc, #92]	; (800a19c <tcp_free_acked_segments+0xe0>)
 800a13e:	f240 4261 	movw	r2, #1121	; 0x461
 800a142:	491a      	ldr	r1, [pc, #104]	; (800a1ac <tcp_free_acked_segments+0xf0>)
 800a144:	4817      	ldr	r0, [pc, #92]	; (800a1a4 <tcp_free_acked_segments+0xe8>)
 800a146:	f005 fcd3 	bl	800faf0 <iprintf>
  while (seg_list != NULL &&
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d020      	beq.n	800a192 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	4618      	mov	r0, r3
 800a158:	f7fb fbf3 	bl	8005942 <lwip_htonl>
 800a15c:	4604      	mov	r4, r0
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	891b      	ldrh	r3, [r3, #8]
 800a162:	461d      	mov	r5, r3
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	899b      	ldrh	r3, [r3, #12]
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fb fbd3 	bl	8005918 <lwip_htons>
 800a172:	4603      	mov	r3, r0
 800a174:	b2db      	uxtb	r3, r3
 800a176:	f003 0303 	and.w	r3, r3, #3
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <tcp_free_acked_segments+0xc6>
 800a17e:	2301      	movs	r3, #1
 800a180:	e000      	b.n	800a184 <tcp_free_acked_segments+0xc8>
 800a182:	2300      	movs	r3, #0
 800a184:	442b      	add	r3, r5
 800a186:	18e2      	adds	r2, r4, r3
 800a188:	4b09      	ldr	r3, [pc, #36]	; (800a1b0 <tcp_free_acked_segments+0xf4>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a18e:	2b00      	cmp	r3, #0
 800a190:	dd9c      	ble.n	800a0cc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a192:	68bb      	ldr	r3, [r7, #8]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bdb0      	pop	{r4, r5, r7, pc}
 800a19c:	08011f54 	.word	0x08011f54
 800a1a0:	0801223c 	.word	0x0801223c
 800a1a4:	08011fa0 	.word	0x08011fa0
 800a1a8:	200087f0 	.word	0x200087f0
 800a1ac:	08012264 	.word	0x08012264
 800a1b0:	200087ec 	.word	0x200087ec

0800a1b4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a1b4:	b5b0      	push	{r4, r5, r7, lr}
 800a1b6:	b094      	sub	sp, #80	; 0x50
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d106      	bne.n	800a1d4 <tcp_receive+0x20>
 800a1c6:	4b91      	ldr	r3, [pc, #580]	; (800a40c <tcp_receive+0x258>)
 800a1c8:	f240 427b 	movw	r2, #1147	; 0x47b
 800a1cc:	4990      	ldr	r1, [pc, #576]	; (800a410 <tcp_receive+0x25c>)
 800a1ce:	4891      	ldr	r0, [pc, #580]	; (800a414 <tcp_receive+0x260>)
 800a1d0:	f005 fc8e 	bl	800faf0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	7d1b      	ldrb	r3, [r3, #20]
 800a1d8:	2b03      	cmp	r3, #3
 800a1da:	d806      	bhi.n	800a1ea <tcp_receive+0x36>
 800a1dc:	4b8b      	ldr	r3, [pc, #556]	; (800a40c <tcp_receive+0x258>)
 800a1de:	f240 427c 	movw	r2, #1148	; 0x47c
 800a1e2:	498d      	ldr	r1, [pc, #564]	; (800a418 <tcp_receive+0x264>)
 800a1e4:	488b      	ldr	r0, [pc, #556]	; (800a414 <tcp_receive+0x260>)
 800a1e6:	f005 fc83 	bl	800faf0 <iprintf>

  if (flags & TCP_ACK) {
 800a1ea:	4b8c      	ldr	r3, [pc, #560]	; (800a41c <tcp_receive+0x268>)
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	f003 0310 	and.w	r3, r3, #16
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 8264 	beq.w	800a6c0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a1fe:	461a      	mov	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a204:	4413      	add	r3, r2
 800a206:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a20c:	4b84      	ldr	r3, [pc, #528]	; (800a420 <tcp_receive+0x26c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	1ad3      	subs	r3, r2, r3
 800a212:	2b00      	cmp	r3, #0
 800a214:	db1b      	blt.n	800a24e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a21a:	4b81      	ldr	r3, [pc, #516]	; (800a420 <tcp_receive+0x26c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a21e:	429a      	cmp	r2, r3
 800a220:	d106      	bne.n	800a230 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a226:	4b7f      	ldr	r3, [pc, #508]	; (800a424 <tcp_receive+0x270>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	db0e      	blt.n	800a24e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a234:	4b7b      	ldr	r3, [pc, #492]	; (800a424 <tcp_receive+0x270>)
 800a236:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a238:	429a      	cmp	r2, r3
 800a23a:	d125      	bne.n	800a288 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a23c:	4b7a      	ldr	r3, [pc, #488]	; (800a428 <tcp_receive+0x274>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	89db      	ldrh	r3, [r3, #14]
 800a242:	b29a      	uxth	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d91c      	bls.n	800a288 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a24e:	4b76      	ldr	r3, [pc, #472]	; (800a428 <tcp_receive+0x274>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	89db      	ldrh	r3, [r3, #14]
 800a254:	b29a      	uxth	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a268:	429a      	cmp	r2, r3
 800a26a:	d205      	bcs.n	800a278 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a278:	4b69      	ldr	r3, [pc, #420]	; (800a420 <tcp_receive+0x26c>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a280:	4b68      	ldr	r3, [pc, #416]	; (800a424 <tcp_receive+0x270>)
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a288:	4b66      	ldr	r3, [pc, #408]	; (800a424 <tcp_receive+0x270>)
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	2b00      	cmp	r3, #0
 800a294:	dc58      	bgt.n	800a348 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a296:	4b65      	ldr	r3, [pc, #404]	; (800a42c <tcp_receive+0x278>)
 800a298:	881b      	ldrh	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d14b      	bne.n	800a336 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a2a8:	4413      	add	r3, r2
 800a2aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d142      	bne.n	800a336 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	db3d      	blt.n	800a336 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2be:	4b59      	ldr	r3, [pc, #356]	; (800a424 <tcp_receive+0x270>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d137      	bne.n	800a336 <tcp_receive+0x182>
              found_dupack = 1;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a2d0:	2bff      	cmp	r3, #255	; 0xff
 800a2d2:	d007      	beq.n	800a2e4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a2da:	3301      	adds	r3, #1
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a2ea:	2b03      	cmp	r3, #3
 800a2ec:	d91b      	bls.n	800a326 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2f8:	4413      	add	r3, r2
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a302:	429a      	cmp	r2, r3
 800a304:	d30a      	bcc.n	800a31c <tcp_receive+0x168>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a310:	4413      	add	r3, r2
 800a312:	b29a      	uxth	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a31a:	e004      	b.n	800a326 <tcp_receive+0x172>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a322:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d902      	bls.n	800a336 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f001 feeb 	bl	800c10c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f040 8161 	bne.w	800a600 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a346:	e15b      	b.n	800a600 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a348:	4b36      	ldr	r3, [pc, #216]	; (800a424 <tcp_receive+0x270>)
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	3b01      	subs	r3, #1
 800a354:	2b00      	cmp	r3, #0
 800a356:	f2c0 814e 	blt.w	800a5f6 <tcp_receive+0x442>
 800a35a:	4b32      	ldr	r3, [pc, #200]	; (800a424 <tcp_receive+0x270>)
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	2b00      	cmp	r3, #0
 800a366:	f300 8146 	bgt.w	800a5f6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	8b5b      	ldrh	r3, [r3, #26]
 800a36e:	f003 0304 	and.w	r3, r3, #4
 800a372:	2b00      	cmp	r3, #0
 800a374:	d010      	beq.n	800a398 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	8b5b      	ldrh	r3, [r3, #26]
 800a37a:	f023 0304 	bic.w	r3, r3, #4
 800a37e:	b29a      	uxth	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a3a6:	10db      	asrs	r3, r3, #3
 800a3a8:	b21b      	sxth	r3, r3
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	4413      	add	r3, r2
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	b21a      	sxth	r2, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a3c0:	4b18      	ldr	r3, [pc, #96]	; (800a424 <tcp_receive+0x270>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a3d8:	4b12      	ldr	r3, [pc, #72]	; (800a424 <tcp_receive+0x270>)
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	7d1b      	ldrb	r3, [r3, #20]
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	f240 8097 	bls.w	800a518 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d245      	bcs.n	800a486 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	8b5b      	ldrh	r3, [r3, #26]
 800a3fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a402:	2b00      	cmp	r3, #0
 800a404:	d014      	beq.n	800a430 <tcp_receive+0x27c>
 800a406:	2301      	movs	r3, #1
 800a408:	e013      	b.n	800a432 <tcp_receive+0x27e>
 800a40a:	bf00      	nop
 800a40c:	08011f54 	.word	0x08011f54
 800a410:	08012284 	.word	0x08012284
 800a414:	08011fa0 	.word	0x08011fa0
 800a418:	080122a0 	.word	0x080122a0
 800a41c:	200087f4 	.word	0x200087f4
 800a420:	200087e8 	.word	0x200087e8
 800a424:	200087ec 	.word	0x200087ec
 800a428:	200087d8 	.word	0x200087d8
 800a42c:	200087f2 	.word	0x200087f2
 800a430:	2302      	movs	r3, #2
 800a432:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a436:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a440:	fb12 f303 	smulbb	r3, r2, r3
 800a444:	b29b      	uxth	r3, r3
 800a446:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a448:	4293      	cmp	r3, r2
 800a44a:	bf28      	it	cs
 800a44c:	4613      	movcs	r3, r2
 800a44e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a456:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a458:	4413      	add	r3, r2
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a462:	429a      	cmp	r2, r3
 800a464:	d309      	bcc.n	800a47a <tcp_receive+0x2c6>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a46c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a46e:	4413      	add	r3, r2
 800a470:	b29a      	uxth	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a478:	e04e      	b.n	800a518 <tcp_receive+0x364>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a480:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a484:	e048      	b.n	800a518 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a48c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a48e:	4413      	add	r3, r2
 800a490:	b29a      	uxth	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a498:	429a      	cmp	r2, r3
 800a49a:	d309      	bcc.n	800a4b0 <tcp_receive+0x2fc>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a4a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a4a4:	4413      	add	r3, r2
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a4ae:	e004      	b.n	800a4ba <tcp_receive+0x306>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d326      	bcc.n	800a518 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4ea:	4413      	add	r3, r2
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d30a      	bcc.n	800a50e <tcp_receive+0x35a>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a502:	4413      	add	r3, r2
 800a504:	b29a      	uxth	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a50c:	e004      	b.n	800a518 <tcp_receive+0x364>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a514:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a520:	4a98      	ldr	r2, [pc, #608]	; (800a784 <tcp_receive+0x5d0>)
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7ff fdca 	bl	800a0bc <tcp_free_acked_segments>
 800a528:	4602      	mov	r2, r0
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a536:	4a94      	ldr	r2, [pc, #592]	; (800a788 <tcp_receive+0x5d4>)
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f7ff fdbf 	bl	800a0bc <tcp_free_acked_segments>
 800a53e:	4602      	mov	r2, r0
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d104      	bne.n	800a556 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a552:	861a      	strh	r2, [r3, #48]	; 0x30
 800a554:	e002      	b.n	800a55c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a566:	2b00      	cmp	r3, #0
 800a568:	d103      	bne.n	800a572 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a578:	4b84      	ldr	r3, [pc, #528]	; (800a78c <tcp_receive+0x5d8>)
 800a57a:	881b      	ldrh	r3, [r3, #0]
 800a57c:	4413      	add	r3, r2
 800a57e:	b29a      	uxth	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	8b5b      	ldrh	r3, [r3, #26]
 800a58a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d035      	beq.n	800a5fe <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a596:	2b00      	cmp	r3, #0
 800a598:	d118      	bne.n	800a5cc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00c      	beq.n	800a5bc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fb f9c7 	bl	8005942 <lwip_htonl>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	dc20      	bgt.n	800a5fe <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	8b5b      	ldrh	r3, [r3, #26]
 800a5c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a5c4:	b29a      	uxth	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a5ca:	e018      	b.n	800a5fe <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7fb f9b2 	bl	8005942 <lwip_htonl>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	1ae3      	subs	r3, r4, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	dc0b      	bgt.n	800a5fe <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	8b5b      	ldrh	r3, [r3, #26]
 800a5ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a5f4:	e003      	b.n	800a5fe <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f001 ff76 	bl	800c4e8 <tcp_send_empty_ack>
 800a5fc:	e000      	b.n	800a600 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a5fe:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a604:	2b00      	cmp	r3, #0
 800a606:	d05b      	beq.n	800a6c0 <tcp_receive+0x50c>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a60c:	4b60      	ldr	r3, [pc, #384]	; (800a790 <tcp_receive+0x5dc>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	2b00      	cmp	r3, #0
 800a614:	da54      	bge.n	800a6c0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a616:	4b5f      	ldr	r3, [pc, #380]	; (800a794 <tcp_receive+0x5e0>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a620:	b29b      	uxth	r3, r3
 800a622:	1ad3      	subs	r3, r2, r3
 800a624:	b29b      	uxth	r3, r3
 800a626:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a62a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a634:	10db      	asrs	r3, r3, #3
 800a636:	b21b      	sxth	r3, r3
 800a638:	b29b      	uxth	r3, r3
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a648:	b29a      	uxth	r2, r3
 800a64a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a64e:	4413      	add	r3, r2
 800a650:	b29b      	uxth	r3, r3
 800a652:	b21a      	sxth	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a658:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	da05      	bge.n	800a66c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a660:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a664:	425b      	negs	r3, r3
 800a666:	b29b      	uxth	r3, r3
 800a668:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a66c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a676:	109b      	asrs	r3, r3, #2
 800a678:	b21b      	sxth	r3, r3
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	1ad3      	subs	r3, r2, r3
 800a67e:	b29b      	uxth	r3, r3
 800a680:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a690:	4413      	add	r3, r2
 800a692:	b29b      	uxth	r3, r3
 800a694:	b21a      	sxth	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a6a0:	10db      	asrs	r3, r3, #3
 800a6a2:	b21b      	sxth	r3, r3
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	4413      	add	r3, r2
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	b21a      	sxth	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a6c0:	4b35      	ldr	r3, [pc, #212]	; (800a798 <tcp_receive+0x5e4>)
 800a6c2:	881b      	ldrh	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f000 84e2 	beq.w	800b08e <tcp_receive+0xeda>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	7d1b      	ldrb	r3, [r3, #20]
 800a6ce:	2b06      	cmp	r3, #6
 800a6d0:	f200 84dd 	bhi.w	800b08e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6d8:	4b30      	ldr	r3, [pc, #192]	; (800a79c <tcp_receive+0x5e8>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f2c0 808f 	blt.w	800a804 <tcp_receive+0x650>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6ea:	4b2b      	ldr	r3, [pc, #172]	; (800a798 <tcp_receive+0x5e4>)
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	4b2a      	ldr	r3, [pc, #168]	; (800a79c <tcp_receive+0x5e8>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	440b      	add	r3, r1
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f300 8082 	bgt.w	800a804 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a700:	4b27      	ldr	r3, [pc, #156]	; (800a7a0 <tcp_receive+0x5ec>)
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a70a:	4b24      	ldr	r3, [pc, #144]	; (800a79c <tcp_receive+0x5e8>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a712:	4b23      	ldr	r3, [pc, #140]	; (800a7a0 <tcp_receive+0x5ec>)
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d106      	bne.n	800a728 <tcp_receive+0x574>
 800a71a:	4b22      	ldr	r3, [pc, #136]	; (800a7a4 <tcp_receive+0x5f0>)
 800a71c:	f240 5294 	movw	r2, #1428	; 0x594
 800a720:	4921      	ldr	r1, [pc, #132]	; (800a7a8 <tcp_receive+0x5f4>)
 800a722:	4822      	ldr	r0, [pc, #136]	; (800a7ac <tcp_receive+0x5f8>)
 800a724:	f005 f9e4 	bl	800faf0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a72e:	4293      	cmp	r3, r2
 800a730:	d906      	bls.n	800a740 <tcp_receive+0x58c>
 800a732:	4b1c      	ldr	r3, [pc, #112]	; (800a7a4 <tcp_receive+0x5f0>)
 800a734:	f240 5295 	movw	r2, #1429	; 0x595
 800a738:	491d      	ldr	r1, [pc, #116]	; (800a7b0 <tcp_receive+0x5fc>)
 800a73a:	481c      	ldr	r0, [pc, #112]	; (800a7ac <tcp_receive+0x5f8>)
 800a73c:	f005 f9d8 	bl	800faf0 <iprintf>
      off = (u16_t)off32;
 800a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a742:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a746:	4b16      	ldr	r3, [pc, #88]	; (800a7a0 <tcp_receive+0x5ec>)
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	891b      	ldrh	r3, [r3, #8]
 800a74c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a750:	429a      	cmp	r2, r3
 800a752:	d906      	bls.n	800a762 <tcp_receive+0x5ae>
 800a754:	4b13      	ldr	r3, [pc, #76]	; (800a7a4 <tcp_receive+0x5f0>)
 800a756:	f240 5297 	movw	r2, #1431	; 0x597
 800a75a:	4916      	ldr	r1, [pc, #88]	; (800a7b4 <tcp_receive+0x600>)
 800a75c:	4813      	ldr	r0, [pc, #76]	; (800a7ac <tcp_receive+0x5f8>)
 800a75e:	f005 f9c7 	bl	800faf0 <iprintf>
      inseg.len -= off;
 800a762:	4b0f      	ldr	r3, [pc, #60]	; (800a7a0 <tcp_receive+0x5ec>)
 800a764:	891a      	ldrh	r2, [r3, #8]
 800a766:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	4b0c      	ldr	r3, [pc, #48]	; (800a7a0 <tcp_receive+0x5ec>)
 800a770:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a772:	4b0b      	ldr	r3, [pc, #44]	; (800a7a0 <tcp_receive+0x5ec>)
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	891a      	ldrh	r2, [r3, #8]
 800a778:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a780:	e02a      	b.n	800a7d8 <tcp_receive+0x624>
 800a782:	bf00      	nop
 800a784:	080122bc 	.word	0x080122bc
 800a788:	080122c4 	.word	0x080122c4
 800a78c:	200087f0 	.word	0x200087f0
 800a790:	200087ec 	.word	0x200087ec
 800a794:	200087b0 	.word	0x200087b0
 800a798:	200087f2 	.word	0x200087f2
 800a79c:	200087e8 	.word	0x200087e8
 800a7a0:	200087c8 	.word	0x200087c8
 800a7a4:	08011f54 	.word	0x08011f54
 800a7a8:	080122cc 	.word	0x080122cc
 800a7ac:	08011fa0 	.word	0x08011fa0
 800a7b0:	080122dc 	.word	0x080122dc
 800a7b4:	080122ec 	.word	0x080122ec
        off -= p->len;
 800a7b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7ba:	895b      	ldrh	r3, [r3, #10]
 800a7bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a7c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a7ca:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a7cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a7d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a7d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7da:	895b      	ldrh	r3, [r3, #10]
 800a7dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d8e9      	bhi.n	800a7b8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a7e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a7ec:	f7fc fb6c 	bl	8006ec8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f4:	4a91      	ldr	r2, [pc, #580]	; (800aa3c <tcp_receive+0x888>)
 800a7f6:	6013      	str	r3, [r2, #0]
 800a7f8:	4b91      	ldr	r3, [pc, #580]	; (800aa40 <tcp_receive+0x88c>)
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	4a8f      	ldr	r2, [pc, #572]	; (800aa3c <tcp_receive+0x888>)
 800a7fe:	6812      	ldr	r2, [r2, #0]
 800a800:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a802:	e00d      	b.n	800a820 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a804:	4b8d      	ldr	r3, [pc, #564]	; (800aa3c <tcp_receive+0x888>)
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	2b00      	cmp	r3, #0
 800a810:	da06      	bge.n	800a820 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	8b5b      	ldrh	r3, [r3, #26]
 800a816:	f043 0302 	orr.w	r3, r3, #2
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a820:	4b86      	ldr	r3, [pc, #536]	; (800aa3c <tcp_receive+0x888>)
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	f2c0 842a 	blt.w	800b084 <tcp_receive+0xed0>
 800a830:	4b82      	ldr	r3, [pc, #520]	; (800aa3c <tcp_receive+0x888>)
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a838:	6879      	ldr	r1, [r7, #4]
 800a83a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a83c:	440b      	add	r3, r1
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	3301      	adds	r3, #1
 800a842:	2b00      	cmp	r3, #0
 800a844:	f300 841e 	bgt.w	800b084 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a84c:	4b7b      	ldr	r3, [pc, #492]	; (800aa3c <tcp_receive+0x888>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	429a      	cmp	r2, r3
 800a852:	f040 829a 	bne.w	800ad8a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a856:	4b7a      	ldr	r3, [pc, #488]	; (800aa40 <tcp_receive+0x88c>)
 800a858:	891c      	ldrh	r4, [r3, #8]
 800a85a:	4b79      	ldr	r3, [pc, #484]	; (800aa40 <tcp_receive+0x88c>)
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	899b      	ldrh	r3, [r3, #12]
 800a860:	b29b      	uxth	r3, r3
 800a862:	4618      	mov	r0, r3
 800a864:	f7fb f858 	bl	8005918 <lwip_htons>
 800a868:	4603      	mov	r3, r0
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	f003 0303 	and.w	r3, r3, #3
 800a870:	2b00      	cmp	r3, #0
 800a872:	d001      	beq.n	800a878 <tcp_receive+0x6c4>
 800a874:	2301      	movs	r3, #1
 800a876:	e000      	b.n	800a87a <tcp_receive+0x6c6>
 800a878:	2300      	movs	r3, #0
 800a87a:	4423      	add	r3, r4
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	4b71      	ldr	r3, [pc, #452]	; (800aa44 <tcp_receive+0x890>)
 800a880:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a886:	4b6f      	ldr	r3, [pc, #444]	; (800aa44 <tcp_receive+0x890>)
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d275      	bcs.n	800a97a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a88e:	4b6c      	ldr	r3, [pc, #432]	; (800aa40 <tcp_receive+0x88c>)
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	899b      	ldrh	r3, [r3, #12]
 800a894:	b29b      	uxth	r3, r3
 800a896:	4618      	mov	r0, r3
 800a898:	f7fb f83e 	bl	8005918 <lwip_htons>
 800a89c:	4603      	mov	r3, r0
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	f003 0301 	and.w	r3, r3, #1
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d01f      	beq.n	800a8e8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a8a8:	4b65      	ldr	r3, [pc, #404]	; (800aa40 <tcp_receive+0x88c>)
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	899b      	ldrh	r3, [r3, #12]
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	b21b      	sxth	r3, r3
 800a8b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a8b6:	b21c      	sxth	r4, r3
 800a8b8:	4b61      	ldr	r3, [pc, #388]	; (800aa40 <tcp_receive+0x88c>)
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	899b      	ldrh	r3, [r3, #12]
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fb f829 	bl	8005918 <lwip_htons>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fb f820 	bl	8005918 <lwip_htons>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	b21b      	sxth	r3, r3
 800a8dc:	4323      	orrs	r3, r4
 800a8de:	b21a      	sxth	r2, r3
 800a8e0:	4b57      	ldr	r3, [pc, #348]	; (800aa40 <tcp_receive+0x88c>)
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	b292      	uxth	r2, r2
 800a8e6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a8ec:	4b54      	ldr	r3, [pc, #336]	; (800aa40 <tcp_receive+0x88c>)
 800a8ee:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a8f0:	4b53      	ldr	r3, [pc, #332]	; (800aa40 <tcp_receive+0x88c>)
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	899b      	ldrh	r3, [r3, #12]
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fb f80d 	bl	8005918 <lwip_htons>
 800a8fe:	4603      	mov	r3, r0
 800a900:	b2db      	uxtb	r3, r3
 800a902:	f003 0302 	and.w	r3, r3, #2
 800a906:	2b00      	cmp	r3, #0
 800a908:	d005      	beq.n	800a916 <tcp_receive+0x762>
            inseg.len -= 1;
 800a90a:	4b4d      	ldr	r3, [pc, #308]	; (800aa40 <tcp_receive+0x88c>)
 800a90c:	891b      	ldrh	r3, [r3, #8]
 800a90e:	3b01      	subs	r3, #1
 800a910:	b29a      	uxth	r2, r3
 800a912:	4b4b      	ldr	r3, [pc, #300]	; (800aa40 <tcp_receive+0x88c>)
 800a914:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a916:	4b4a      	ldr	r3, [pc, #296]	; (800aa40 <tcp_receive+0x88c>)
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	4a49      	ldr	r2, [pc, #292]	; (800aa40 <tcp_receive+0x88c>)
 800a91c:	8912      	ldrh	r2, [r2, #8]
 800a91e:	4611      	mov	r1, r2
 800a920:	4618      	mov	r0, r3
 800a922:	f7fc f9d1 	bl	8006cc8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a926:	4b46      	ldr	r3, [pc, #280]	; (800aa40 <tcp_receive+0x88c>)
 800a928:	891c      	ldrh	r4, [r3, #8]
 800a92a:	4b45      	ldr	r3, [pc, #276]	; (800aa40 <tcp_receive+0x88c>)
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	899b      	ldrh	r3, [r3, #12]
 800a930:	b29b      	uxth	r3, r3
 800a932:	4618      	mov	r0, r3
 800a934:	f7fa fff0 	bl	8005918 <lwip_htons>
 800a938:	4603      	mov	r3, r0
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	f003 0303 	and.w	r3, r3, #3
 800a940:	2b00      	cmp	r3, #0
 800a942:	d001      	beq.n	800a948 <tcp_receive+0x794>
 800a944:	2301      	movs	r3, #1
 800a946:	e000      	b.n	800a94a <tcp_receive+0x796>
 800a948:	2300      	movs	r3, #0
 800a94a:	4423      	add	r3, r4
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	4b3d      	ldr	r3, [pc, #244]	; (800aa44 <tcp_receive+0x890>)
 800a950:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a952:	4b3c      	ldr	r3, [pc, #240]	; (800aa44 <tcp_receive+0x890>)
 800a954:	881b      	ldrh	r3, [r3, #0]
 800a956:	461a      	mov	r2, r3
 800a958:	4b38      	ldr	r3, [pc, #224]	; (800aa3c <tcp_receive+0x888>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	441a      	add	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a962:	6879      	ldr	r1, [r7, #4]
 800a964:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a966:	440b      	add	r3, r1
 800a968:	429a      	cmp	r2, r3
 800a96a:	d006      	beq.n	800a97a <tcp_receive+0x7c6>
 800a96c:	4b36      	ldr	r3, [pc, #216]	; (800aa48 <tcp_receive+0x894>)
 800a96e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a972:	4936      	ldr	r1, [pc, #216]	; (800aa4c <tcp_receive+0x898>)
 800a974:	4836      	ldr	r0, [pc, #216]	; (800aa50 <tcp_receive+0x89c>)
 800a976:	f005 f8bb 	bl	800faf0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f000 80e7 	beq.w	800ab52 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a984:	4b2e      	ldr	r3, [pc, #184]	; (800aa40 <tcp_receive+0x88c>)
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	899b      	ldrh	r3, [r3, #12]
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fa ffc3 	bl	8005918 <lwip_htons>
 800a992:	4603      	mov	r3, r0
 800a994:	b2db      	uxtb	r3, r3
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d010      	beq.n	800a9c0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a99e:	e00a      	b.n	800a9b6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9a4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f7fd fd92 	bl	80084da <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1f0      	bne.n	800a9a0 <tcp_receive+0x7ec>
 800a9be:	e0c8      	b.n	800ab52 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a9c6:	e052      	b.n	800aa6e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a9c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	899b      	ldrh	r3, [r3, #12]
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fa ffa1 	bl	8005918 <lwip_htons>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	f003 0301 	and.w	r3, r3, #1
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d03d      	beq.n	800aa5e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a9e2:	4b17      	ldr	r3, [pc, #92]	; (800aa40 <tcp_receive+0x88c>)
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	899b      	ldrh	r3, [r3, #12]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fa ff94 	bl	8005918 <lwip_htons>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d130      	bne.n	800aa5e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a9fc:	4b10      	ldr	r3, [pc, #64]	; (800aa40 <tcp_receive+0x88c>)
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	899b      	ldrh	r3, [r3, #12]
 800aa02:	b29c      	uxth	r4, r3
 800aa04:	2001      	movs	r0, #1
 800aa06:	f7fa ff87 	bl	8005918 <lwip_htons>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	4b0c      	ldr	r3, [pc, #48]	; (800aa40 <tcp_receive+0x88c>)
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	4322      	orrs	r2, r4
 800aa14:	b292      	uxth	r2, r2
 800aa16:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800aa18:	4b09      	ldr	r3, [pc, #36]	; (800aa40 <tcp_receive+0x88c>)
 800aa1a:	891c      	ldrh	r4, [r3, #8]
 800aa1c:	4b08      	ldr	r3, [pc, #32]	; (800aa40 <tcp_receive+0x88c>)
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	899b      	ldrh	r3, [r3, #12]
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fa ff77 	bl	8005918 <lwip_htons>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	f003 0303 	and.w	r3, r3, #3
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00e      	beq.n	800aa54 <tcp_receive+0x8a0>
 800aa36:	2301      	movs	r3, #1
 800aa38:	e00d      	b.n	800aa56 <tcp_receive+0x8a2>
 800aa3a:	bf00      	nop
 800aa3c:	200087e8 	.word	0x200087e8
 800aa40:	200087c8 	.word	0x200087c8
 800aa44:	200087f2 	.word	0x200087f2
 800aa48:	08011f54 	.word	0x08011f54
 800aa4c:	080122fc 	.word	0x080122fc
 800aa50:	08011fa0 	.word	0x08011fa0
 800aa54:	2300      	movs	r3, #0
 800aa56:	4423      	add	r3, r4
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	4b98      	ldr	r3, [pc, #608]	; (800acbc <tcp_receive+0xb08>)
 800aa5c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800aa5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa60:	613b      	str	r3, [r7, #16]
              next = next->next;
 800aa62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800aa68:	6938      	ldr	r0, [r7, #16]
 800aa6a:	f7fd fd36 	bl	80084da <tcp_seg_free>
            while (next &&
 800aa6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00e      	beq.n	800aa92 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800aa74:	4b91      	ldr	r3, [pc, #580]	; (800acbc <tcp_receive+0xb08>)
 800aa76:	881b      	ldrh	r3, [r3, #0]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	4b91      	ldr	r3, [pc, #580]	; (800acc0 <tcp_receive+0xb0c>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	441a      	add	r2, r3
 800aa80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa88:	8909      	ldrh	r1, [r1, #8]
 800aa8a:	440b      	add	r3, r1
 800aa8c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	da9a      	bge.n	800a9c8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800aa92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d059      	beq.n	800ab4c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800aa98:	4b88      	ldr	r3, [pc, #544]	; (800acbc <tcp_receive+0xb08>)
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	4b88      	ldr	r3, [pc, #544]	; (800acc0 <tcp_receive+0xb0c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	441a      	add	r2, r3
 800aaa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	1ad3      	subs	r3, r2, r3
            if (next &&
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	dd4d      	ble.n	800ab4c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800aab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	4b81      	ldr	r3, [pc, #516]	; (800acc0 <tcp_receive+0xb0c>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	1ad3      	subs	r3, r2, r3
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	4b80      	ldr	r3, [pc, #512]	; (800acc4 <tcp_receive+0xb10>)
 800aac4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aac6:	4b7f      	ldr	r3, [pc, #508]	; (800acc4 <tcp_receive+0xb10>)
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	899b      	ldrh	r3, [r3, #12]
 800aacc:	b29b      	uxth	r3, r3
 800aace:	4618      	mov	r0, r3
 800aad0:	f7fa ff22 	bl	8005918 <lwip_htons>
 800aad4:	4603      	mov	r3, r0
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	f003 0302 	and.w	r3, r3, #2
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d005      	beq.n	800aaec <tcp_receive+0x938>
                inseg.len -= 1;
 800aae0:	4b78      	ldr	r3, [pc, #480]	; (800acc4 <tcp_receive+0xb10>)
 800aae2:	891b      	ldrh	r3, [r3, #8]
 800aae4:	3b01      	subs	r3, #1
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	4b76      	ldr	r3, [pc, #472]	; (800acc4 <tcp_receive+0xb10>)
 800aaea:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800aaec:	4b75      	ldr	r3, [pc, #468]	; (800acc4 <tcp_receive+0xb10>)
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	4a74      	ldr	r2, [pc, #464]	; (800acc4 <tcp_receive+0xb10>)
 800aaf2:	8912      	ldrh	r2, [r2, #8]
 800aaf4:	4611      	mov	r1, r2
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fc f8e6 	bl	8006cc8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800aafc:	4b71      	ldr	r3, [pc, #452]	; (800acc4 <tcp_receive+0xb10>)
 800aafe:	891c      	ldrh	r4, [r3, #8]
 800ab00:	4b70      	ldr	r3, [pc, #448]	; (800acc4 <tcp_receive+0xb10>)
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	899b      	ldrh	r3, [r3, #12]
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fa ff05 	bl	8005918 <lwip_htons>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	f003 0303 	and.w	r3, r3, #3
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d001      	beq.n	800ab1e <tcp_receive+0x96a>
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e000      	b.n	800ab20 <tcp_receive+0x96c>
 800ab1e:	2300      	movs	r3, #0
 800ab20:	4423      	add	r3, r4
 800ab22:	b29a      	uxth	r2, r3
 800ab24:	4b65      	ldr	r3, [pc, #404]	; (800acbc <tcp_receive+0xb08>)
 800ab26:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ab28:	4b64      	ldr	r3, [pc, #400]	; (800acbc <tcp_receive+0xb08>)
 800ab2a:	881b      	ldrh	r3, [r3, #0]
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	4b64      	ldr	r3, [pc, #400]	; (800acc0 <tcp_receive+0xb0c>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	441a      	add	r2, r3
 800ab34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d006      	beq.n	800ab4c <tcp_receive+0x998>
 800ab3e:	4b62      	ldr	r3, [pc, #392]	; (800acc8 <tcp_receive+0xb14>)
 800ab40:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ab44:	4961      	ldr	r1, [pc, #388]	; (800accc <tcp_receive+0xb18>)
 800ab46:	4862      	ldr	r0, [pc, #392]	; (800acd0 <tcp_receive+0xb1c>)
 800ab48:	f004 ffd2 	bl	800faf0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab50:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ab52:	4b5a      	ldr	r3, [pc, #360]	; (800acbc <tcp_receive+0xb08>)
 800ab54:	881b      	ldrh	r3, [r3, #0]
 800ab56:	461a      	mov	r2, r3
 800ab58:	4b59      	ldr	r3, [pc, #356]	; (800acc0 <tcp_receive+0xb0c>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	441a      	add	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ab66:	4b55      	ldr	r3, [pc, #340]	; (800acbc <tcp_receive+0xb08>)
 800ab68:	881b      	ldrh	r3, [r3, #0]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d206      	bcs.n	800ab7c <tcp_receive+0x9c8>
 800ab6e:	4b56      	ldr	r3, [pc, #344]	; (800acc8 <tcp_receive+0xb14>)
 800ab70:	f240 6207 	movw	r2, #1543	; 0x607
 800ab74:	4957      	ldr	r1, [pc, #348]	; (800acd4 <tcp_receive+0xb20>)
 800ab76:	4856      	ldr	r0, [pc, #344]	; (800acd0 <tcp_receive+0xb1c>)
 800ab78:	f004 ffba 	bl	800faf0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ab80:	4b4e      	ldr	r3, [pc, #312]	; (800acbc <tcp_receive+0xb08>)
 800ab82:	881b      	ldrh	r3, [r3, #0]
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f7fc ffc5 	bl	8007b1c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ab92:	4b4c      	ldr	r3, [pc, #304]	; (800acc4 <tcp_receive+0xb10>)
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	891b      	ldrh	r3, [r3, #8]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d006      	beq.n	800abaa <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800ab9c:	4b49      	ldr	r3, [pc, #292]	; (800acc4 <tcp_receive+0xb10>)
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	4a4d      	ldr	r2, [pc, #308]	; (800acd8 <tcp_receive+0xb24>)
 800aba2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800aba4:	4b47      	ldr	r3, [pc, #284]	; (800acc4 <tcp_receive+0xb10>)
 800aba6:	2200      	movs	r2, #0
 800aba8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800abaa:	4b46      	ldr	r3, [pc, #280]	; (800acc4 <tcp_receive+0xb10>)
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	899b      	ldrh	r3, [r3, #12]
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fa feb0 	bl	8005918 <lwip_htons>
 800abb8:	4603      	mov	r3, r0
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	f003 0301 	and.w	r3, r3, #1
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f000 80b8 	beq.w	800ad36 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800abc6:	4b45      	ldr	r3, [pc, #276]	; (800acdc <tcp_receive+0xb28>)
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	f043 0320 	orr.w	r3, r3, #32
 800abce:	b2da      	uxtb	r2, r3
 800abd0:	4b42      	ldr	r3, [pc, #264]	; (800acdc <tcp_receive+0xb28>)
 800abd2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800abd4:	e0af      	b.n	800ad36 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abda:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	4a36      	ldr	r2, [pc, #216]	; (800acc0 <tcp_receive+0xb0c>)
 800abe6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	891b      	ldrh	r3, [r3, #8]
 800abec:	461c      	mov	r4, r3
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	899b      	ldrh	r3, [r3, #12]
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fa fe8e 	bl	8005918 <lwip_htons>
 800abfc:	4603      	mov	r3, r0
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	f003 0303 	and.w	r3, r3, #3
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d001      	beq.n	800ac0c <tcp_receive+0xa58>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e000      	b.n	800ac0e <tcp_receive+0xa5a>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	191a      	adds	r2, r3, r4
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac14:	441a      	add	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac1e:	461c      	mov	r4, r3
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	891b      	ldrh	r3, [r3, #8]
 800ac24:	461d      	mov	r5, r3
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	899b      	ldrh	r3, [r3, #12]
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fa fe72 	bl	8005918 <lwip_htons>
 800ac34:	4603      	mov	r3, r0
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	f003 0303 	and.w	r3, r3, #3
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d001      	beq.n	800ac44 <tcp_receive+0xa90>
 800ac40:	2301      	movs	r3, #1
 800ac42:	e000      	b.n	800ac46 <tcp_receive+0xa92>
 800ac44:	2300      	movs	r3, #0
 800ac46:	442b      	add	r3, r5
 800ac48:	429c      	cmp	r4, r3
 800ac4a:	d206      	bcs.n	800ac5a <tcp_receive+0xaa6>
 800ac4c:	4b1e      	ldr	r3, [pc, #120]	; (800acc8 <tcp_receive+0xb14>)
 800ac4e:	f240 622b 	movw	r2, #1579	; 0x62b
 800ac52:	4923      	ldr	r1, [pc, #140]	; (800ace0 <tcp_receive+0xb2c>)
 800ac54:	481e      	ldr	r0, [pc, #120]	; (800acd0 <tcp_receive+0xb1c>)
 800ac56:	f004 ff4b 	bl	800faf0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	891b      	ldrh	r3, [r3, #8]
 800ac5e:	461c      	mov	r4, r3
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	899b      	ldrh	r3, [r3, #12]
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7fa fe55 	bl	8005918 <lwip_htons>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	f003 0303 	and.w	r3, r3, #3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d001      	beq.n	800ac7e <tcp_receive+0xaca>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e000      	b.n	800ac80 <tcp_receive+0xacc>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	1919      	adds	r1, r3, r4
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ac86:	b28b      	uxth	r3, r1
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7fc ff43 	bl	8007b1c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	891b      	ldrh	r3, [r3, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d028      	beq.n	800acf2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800aca0:	4b0d      	ldr	r3, [pc, #52]	; (800acd8 <tcp_receive+0xb24>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d01d      	beq.n	800ace4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800aca8:	4b0b      	ldr	r3, [pc, #44]	; (800acd8 <tcp_receive+0xb24>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	4619      	mov	r1, r3
 800acb2:	4610      	mov	r0, r2
 800acb4:	f7fc fa50 	bl	8007158 <pbuf_cat>
 800acb8:	e018      	b.n	800acec <tcp_receive+0xb38>
 800acba:	bf00      	nop
 800acbc:	200087f2 	.word	0x200087f2
 800acc0:	200087e8 	.word	0x200087e8
 800acc4:	200087c8 	.word	0x200087c8
 800acc8:	08011f54 	.word	0x08011f54
 800accc:	08012334 	.word	0x08012334
 800acd0:	08011fa0 	.word	0x08011fa0
 800acd4:	08012370 	.word	0x08012370
 800acd8:	200087f8 	.word	0x200087f8
 800acdc:	200087f5 	.word	0x200087f5
 800ace0:	08012390 	.word	0x08012390
            } else {
              recv_data = cseg->p;
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	4a70      	ldr	r2, [pc, #448]	; (800aeac <tcp_receive+0xcf8>)
 800acea:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	2200      	movs	r2, #0
 800acf0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	899b      	ldrh	r3, [r3, #12]
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fa fe0c 	bl	8005918 <lwip_htons>
 800ad00:	4603      	mov	r3, r0
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	f003 0301 	and.w	r3, r3, #1
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00d      	beq.n	800ad28 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ad0c:	4b68      	ldr	r3, [pc, #416]	; (800aeb0 <tcp_receive+0xcfc>)
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	f043 0320 	orr.w	r3, r3, #32
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	4b66      	ldr	r3, [pc, #408]	; (800aeb0 <tcp_receive+0xcfc>)
 800ad18:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	7d1b      	ldrb	r3, [r3, #20]
 800ad1e:	2b04      	cmp	r3, #4
 800ad20:	d102      	bne.n	800ad28 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2207      	movs	r2, #7
 800ad26:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ad30:	68b8      	ldr	r0, [r7, #8]
 800ad32:	f7fd fbd2 	bl	80084da <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d008      	beq.n	800ad50 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	685a      	ldr	r2, [r3, #4]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	f43f af43 	beq.w	800abd6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	8b5b      	ldrh	r3, [r3, #26]
 800ad54:	f003 0301 	and.w	r3, r3, #1
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00e      	beq.n	800ad7a <tcp_receive+0xbc6>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	8b5b      	ldrh	r3, [r3, #26]
 800ad60:	f023 0301 	bic.w	r3, r3, #1
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	835a      	strh	r2, [r3, #26]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	8b5b      	ldrh	r3, [r3, #26]
 800ad6e:	f043 0302 	orr.w	r3, r3, #2
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ad78:	e188      	b.n	800b08c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	8b5b      	ldrh	r3, [r3, #26]
 800ad7e:	f043 0301 	orr.w	r3, r3, #1
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ad88:	e180      	b.n	800b08c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d106      	bne.n	800ada0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ad92:	4848      	ldr	r0, [pc, #288]	; (800aeb4 <tcp_receive+0xd00>)
 800ad94:	f7fd fbba 	bl	800850c <tcp_seg_copy>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	675a      	str	r2, [r3, #116]	; 0x74
 800ad9e:	e16d      	b.n	800b07c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ada0:	2300      	movs	r3, #0
 800ada2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ada8:	63bb      	str	r3, [r7, #56]	; 0x38
 800adaa:	e157      	b.n	800b05c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800adac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	4b41      	ldr	r3, [pc, #260]	; (800aeb8 <tcp_receive+0xd04>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d11d      	bne.n	800adf6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800adba:	4b3e      	ldr	r3, [pc, #248]	; (800aeb4 <tcp_receive+0xd00>)
 800adbc:	891a      	ldrh	r2, [r3, #8]
 800adbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc0:	891b      	ldrh	r3, [r3, #8]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	f240 814f 	bls.w	800b066 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800adc8:	483a      	ldr	r0, [pc, #232]	; (800aeb4 <tcp_receive+0xd00>)
 800adca:	f7fd fb9f 	bl	800850c <tcp_seg_copy>
 800adce:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	2b00      	cmp	r3, #0
 800add4:	f000 8149 	beq.w	800b06a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800add8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adda:	2b00      	cmp	r3, #0
 800addc:	d003      	beq.n	800ade6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800adde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade0:	697a      	ldr	r2, [r7, #20]
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	e002      	b.n	800adec <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	697a      	ldr	r2, [r7, #20]
 800adea:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800adec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800adee:	6978      	ldr	r0, [r7, #20]
 800adf0:	f7ff f8dc 	bl	8009fac <tcp_oos_insert_segment>
                }
                break;
 800adf4:	e139      	b.n	800b06a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800adf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d117      	bne.n	800ae2c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800adfc:	4b2e      	ldr	r3, [pc, #184]	; (800aeb8 <tcp_receive+0xd04>)
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	da57      	bge.n	800aebc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ae0c:	4829      	ldr	r0, [pc, #164]	; (800aeb4 <tcp_receive+0xd00>)
 800ae0e:	f7fd fb7d 	bl	800850c <tcp_seg_copy>
 800ae12:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f000 8129 	beq.w	800b06e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	69ba      	ldr	r2, [r7, #24]
 800ae20:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ae22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae24:	69b8      	ldr	r0, [r7, #24]
 800ae26:	f7ff f8c1 	bl	8009fac <tcp_oos_insert_segment>
                  }
                  break;
 800ae2a:	e120      	b.n	800b06e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ae2c:	4b22      	ldr	r3, [pc, #136]	; (800aeb8 <tcp_receive+0xd04>)
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	db3e      	blt.n	800aebc <tcp_receive+0xd08>
 800ae3e:	4b1e      	ldr	r3, [pc, #120]	; (800aeb8 <tcp_receive+0xd04>)
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	1ad3      	subs	r3, r2, r3
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	dc35      	bgt.n	800aebc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ae50:	4818      	ldr	r0, [pc, #96]	; (800aeb4 <tcp_receive+0xd00>)
 800ae52:	f7fd fb5b 	bl	800850c <tcp_seg_copy>
 800ae56:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f000 8109 	beq.w	800b072 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ae60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae68:	8912      	ldrh	r2, [r2, #8]
 800ae6a:	441a      	add	r2, r3
 800ae6c:	4b12      	ldr	r3, [pc, #72]	; (800aeb8 <tcp_receive+0xd04>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	1ad3      	subs	r3, r2, r3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	dd12      	ble.n	800ae9c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ae76:	4b10      	ldr	r3, [pc, #64]	; (800aeb8 <tcp_receive+0xd04>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ae8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8e:	685a      	ldr	r2, [r3, #4]
 800ae90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae92:	891b      	ldrh	r3, [r3, #8]
 800ae94:	4619      	mov	r1, r3
 800ae96:	4610      	mov	r0, r2
 800ae98:	f7fb ff16 	bl	8006cc8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ae9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae9e:	69fa      	ldr	r2, [r7, #28]
 800aea0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800aea2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aea4:	69f8      	ldr	r0, [r7, #28]
 800aea6:	f7ff f881 	bl	8009fac <tcp_oos_insert_segment>
                  }
                  break;
 800aeaa:	e0e2      	b.n	800b072 <tcp_receive+0xebe>
 800aeac:	200087f8 	.word	0x200087f8
 800aeb0:	200087f5 	.word	0x200087f5
 800aeb4:	200087c8 	.word	0x200087c8
 800aeb8:	200087e8 	.word	0x200087e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800aebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebe:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800aec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f040 80c6 	bne.w	800b056 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800aeca:	4b80      	ldr	r3, [pc, #512]	; (800b0cc <tcp_receive+0xf18>)
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f340 80bd 	ble.w	800b056 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800aedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	899b      	ldrh	r3, [r3, #12]
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7fa fd17 	bl	8005918 <lwip_htons>
 800aeea:	4603      	mov	r3, r0
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	f003 0301 	and.w	r3, r3, #1
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f040 80bf 	bne.w	800b076 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800aef8:	4875      	ldr	r0, [pc, #468]	; (800b0d0 <tcp_receive+0xf1c>)
 800aefa:	f7fd fb07 	bl	800850c <tcp_seg_copy>
 800aefe:	4602      	mov	r2, r0
 800af00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af02:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800af04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f000 80b6 	beq.w	800b07a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800af0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af16:	8912      	ldrh	r2, [r2, #8]
 800af18:	441a      	add	r2, r3
 800af1a:	4b6c      	ldr	r3, [pc, #432]	; (800b0cc <tcp_receive+0xf18>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	1ad3      	subs	r3, r2, r3
 800af20:	2b00      	cmp	r3, #0
 800af22:	dd12      	ble.n	800af4a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800af24:	4b69      	ldr	r3, [pc, #420]	; (800b0cc <tcp_receive+0xf18>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	b29a      	uxth	r2, r3
 800af2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	b29b      	uxth	r3, r3
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	b29a      	uxth	r2, r3
 800af36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af38:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800af3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af40:	891b      	ldrh	r3, [r3, #8]
 800af42:	4619      	mov	r1, r3
 800af44:	4610      	mov	r0, r2
 800af46:	f7fb febf 	bl	8006cc8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800af4a:	4b62      	ldr	r3, [pc, #392]	; (800b0d4 <tcp_receive+0xf20>)
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	461a      	mov	r2, r3
 800af50:	4b5e      	ldr	r3, [pc, #376]	; (800b0cc <tcp_receive+0xf18>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	441a      	add	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5a:	6879      	ldr	r1, [r7, #4]
 800af5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800af5e:	440b      	add	r3, r1
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	2b00      	cmp	r3, #0
 800af64:	f340 8089 	ble.w	800b07a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800af68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	899b      	ldrh	r3, [r3, #12]
 800af70:	b29b      	uxth	r3, r3
 800af72:	4618      	mov	r0, r3
 800af74:	f7fa fcd0 	bl	8005918 <lwip_htons>
 800af78:	4603      	mov	r3, r0
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	f003 0301 	and.w	r3, r3, #1
 800af80:	2b00      	cmp	r3, #0
 800af82:	d022      	beq.n	800afca <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800af84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	899b      	ldrh	r3, [r3, #12]
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	b21b      	sxth	r3, r3
 800af90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800af94:	b21c      	sxth	r4, r3
 800af96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	899b      	ldrh	r3, [r3, #12]
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fa fcb9 	bl	8005918 <lwip_htons>
 800afa6:	4603      	mov	r3, r0
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	b29b      	uxth	r3, r3
 800afac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fa fcb0 	bl	8005918 <lwip_htons>
 800afb8:	4603      	mov	r3, r0
 800afba:	b21b      	sxth	r3, r3
 800afbc:	4323      	orrs	r3, r4
 800afbe:	b21a      	sxth	r2, r3
 800afc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	b292      	uxth	r2, r2
 800afc8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afce:	b29a      	uxth	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afd4:	4413      	add	r3, r2
 800afd6:	b299      	uxth	r1, r3
 800afd8:	4b3c      	ldr	r3, [pc, #240]	; (800b0cc <tcp_receive+0xf18>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	b29a      	uxth	r2, r3
 800afde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	1a8a      	subs	r2, r1, r2
 800afe4:	b292      	uxth	r2, r2
 800afe6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800afe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685a      	ldr	r2, [r3, #4]
 800afee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	891b      	ldrh	r3, [r3, #8]
 800aff4:	4619      	mov	r1, r3
 800aff6:	4610      	mov	r0, r2
 800aff8:	f7fb fe66 	bl	8006cc8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800affc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	891c      	ldrh	r4, [r3, #8]
 800b002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	899b      	ldrh	r3, [r3, #12]
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7fa fc83 	bl	8005918 <lwip_htons>
 800b012:	4603      	mov	r3, r0
 800b014:	b2db      	uxtb	r3, r3
 800b016:	f003 0303 	and.w	r3, r3, #3
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d001      	beq.n	800b022 <tcp_receive+0xe6e>
 800b01e:	2301      	movs	r3, #1
 800b020:	e000      	b.n	800b024 <tcp_receive+0xe70>
 800b022:	2300      	movs	r3, #0
 800b024:	4423      	add	r3, r4
 800b026:	b29a      	uxth	r2, r3
 800b028:	4b2a      	ldr	r3, [pc, #168]	; (800b0d4 <tcp_receive+0xf20>)
 800b02a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b02c:	4b29      	ldr	r3, [pc, #164]	; (800b0d4 <tcp_receive+0xf20>)
 800b02e:	881b      	ldrh	r3, [r3, #0]
 800b030:	461a      	mov	r2, r3
 800b032:	4b26      	ldr	r3, [pc, #152]	; (800b0cc <tcp_receive+0xf18>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	441a      	add	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03c:	6879      	ldr	r1, [r7, #4]
 800b03e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b040:	440b      	add	r3, r1
 800b042:	429a      	cmp	r2, r3
 800b044:	d019      	beq.n	800b07a <tcp_receive+0xec6>
 800b046:	4b24      	ldr	r3, [pc, #144]	; (800b0d8 <tcp_receive+0xf24>)
 800b048:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800b04c:	4923      	ldr	r1, [pc, #140]	; (800b0dc <tcp_receive+0xf28>)
 800b04e:	4824      	ldr	r0, [pc, #144]	; (800b0e0 <tcp_receive+0xf2c>)
 800b050:	f004 fd4e 	bl	800faf0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b054:	e011      	b.n	800b07a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05e:	2b00      	cmp	r3, #0
 800b060:	f47f aea4 	bne.w	800adac <tcp_receive+0xbf8>
 800b064:	e00a      	b.n	800b07c <tcp_receive+0xec8>
                break;
 800b066:	bf00      	nop
 800b068:	e008      	b.n	800b07c <tcp_receive+0xec8>
                break;
 800b06a:	bf00      	nop
 800b06c:	e006      	b.n	800b07c <tcp_receive+0xec8>
                  break;
 800b06e:	bf00      	nop
 800b070:	e004      	b.n	800b07c <tcp_receive+0xec8>
                  break;
 800b072:	bf00      	nop
 800b074:	e002      	b.n	800b07c <tcp_receive+0xec8>
                  break;
 800b076:	bf00      	nop
 800b078:	e000      	b.n	800b07c <tcp_receive+0xec8>
                break;
 800b07a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f001 fa33 	bl	800c4e8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b082:	e003      	b.n	800b08c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f001 fa2f 	bl	800c4e8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b08a:	e01a      	b.n	800b0c2 <tcp_receive+0xf0e>
 800b08c:	e019      	b.n	800b0c2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b08e:	4b0f      	ldr	r3, [pc, #60]	; (800b0cc <tcp_receive+0xf18>)
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b096:	1ad3      	subs	r3, r2, r3
 800b098:	2b00      	cmp	r3, #0
 800b09a:	db0a      	blt.n	800b0b2 <tcp_receive+0xefe>
 800b09c:	4b0b      	ldr	r3, [pc, #44]	; (800b0cc <tcp_receive+0xf18>)
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a4:	6879      	ldr	r1, [r7, #4]
 800b0a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b0a8:	440b      	add	r3, r1
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	dd07      	ble.n	800b0c2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	8b5b      	ldrh	r3, [r3, #26]
 800b0b6:	f043 0302 	orr.w	r3, r3, #2
 800b0ba:	b29a      	uxth	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b0c0:	e7ff      	b.n	800b0c2 <tcp_receive+0xf0e>
 800b0c2:	bf00      	nop
 800b0c4:	3750      	adds	r7, #80	; 0x50
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bdb0      	pop	{r4, r5, r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	200087e8 	.word	0x200087e8
 800b0d0:	200087c8 	.word	0x200087c8
 800b0d4:	200087f2 	.word	0x200087f2
 800b0d8:	08011f54 	.word	0x08011f54
 800b0dc:	080122fc 	.word	0x080122fc
 800b0e0:	08011fa0 	.word	0x08011fa0

0800b0e4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b0ea:	4b15      	ldr	r3, [pc, #84]	; (800b140 <tcp_get_next_optbyte+0x5c>)
 800b0ec:	881b      	ldrh	r3, [r3, #0]
 800b0ee:	1c5a      	adds	r2, r3, #1
 800b0f0:	b291      	uxth	r1, r2
 800b0f2:	4a13      	ldr	r2, [pc, #76]	; (800b140 <tcp_get_next_optbyte+0x5c>)
 800b0f4:	8011      	strh	r1, [r2, #0]
 800b0f6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b0f8:	4b12      	ldr	r3, [pc, #72]	; (800b144 <tcp_get_next_optbyte+0x60>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d004      	beq.n	800b10a <tcp_get_next_optbyte+0x26>
 800b100:	4b11      	ldr	r3, [pc, #68]	; (800b148 <tcp_get_next_optbyte+0x64>)
 800b102:	881b      	ldrh	r3, [r3, #0]
 800b104:	88fa      	ldrh	r2, [r7, #6]
 800b106:	429a      	cmp	r2, r3
 800b108:	d208      	bcs.n	800b11c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b10a:	4b10      	ldr	r3, [pc, #64]	; (800b14c <tcp_get_next_optbyte+0x68>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	3314      	adds	r3, #20
 800b110:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b112:	88fb      	ldrh	r3, [r7, #6]
 800b114:	683a      	ldr	r2, [r7, #0]
 800b116:	4413      	add	r3, r2
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	e00b      	b.n	800b134 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b11c:	88fb      	ldrh	r3, [r7, #6]
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	4b09      	ldr	r3, [pc, #36]	; (800b148 <tcp_get_next_optbyte+0x64>)
 800b122:	881b      	ldrh	r3, [r3, #0]
 800b124:	b2db      	uxtb	r3, r3
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b12a:	4b06      	ldr	r3, [pc, #24]	; (800b144 <tcp_get_next_optbyte+0x60>)
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	797b      	ldrb	r3, [r7, #5]
 800b130:	4413      	add	r3, r2
 800b132:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b134:	4618      	mov	r0, r3
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr
 800b140:	200087e4 	.word	0x200087e4
 800b144:	200087e0 	.word	0x200087e0
 800b148:	200087de 	.word	0x200087de
 800b14c:	200087d8 	.word	0x200087d8

0800b150 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d106      	bne.n	800b16c <tcp_parseopt+0x1c>
 800b15e:	4b32      	ldr	r3, [pc, #200]	; (800b228 <tcp_parseopt+0xd8>)
 800b160:	f240 727d 	movw	r2, #1917	; 0x77d
 800b164:	4931      	ldr	r1, [pc, #196]	; (800b22c <tcp_parseopt+0xdc>)
 800b166:	4832      	ldr	r0, [pc, #200]	; (800b230 <tcp_parseopt+0xe0>)
 800b168:	f004 fcc2 	bl	800faf0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b16c:	4b31      	ldr	r3, [pc, #196]	; (800b234 <tcp_parseopt+0xe4>)
 800b16e:	881b      	ldrh	r3, [r3, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d055      	beq.n	800b220 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b174:	4b30      	ldr	r3, [pc, #192]	; (800b238 <tcp_parseopt+0xe8>)
 800b176:	2200      	movs	r2, #0
 800b178:	801a      	strh	r2, [r3, #0]
 800b17a:	e045      	b.n	800b208 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800b17c:	f7ff ffb2 	bl	800b0e4 <tcp_get_next_optbyte>
 800b180:	4603      	mov	r3, r0
 800b182:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b184:	7bfb      	ldrb	r3, [r7, #15]
 800b186:	2b02      	cmp	r3, #2
 800b188:	d006      	beq.n	800b198 <tcp_parseopt+0x48>
 800b18a:	2b02      	cmp	r3, #2
 800b18c:	dc2b      	bgt.n	800b1e6 <tcp_parseopt+0x96>
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d041      	beq.n	800b216 <tcp_parseopt+0xc6>
 800b192:	2b01      	cmp	r3, #1
 800b194:	d127      	bne.n	800b1e6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800b196:	e037      	b.n	800b208 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b198:	f7ff ffa4 	bl	800b0e4 <tcp_get_next_optbyte>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b04      	cmp	r3, #4
 800b1a0:	d13b      	bne.n	800b21a <tcp_parseopt+0xca>
 800b1a2:	4b25      	ldr	r3, [pc, #148]	; (800b238 <tcp_parseopt+0xe8>)
 800b1a4:	881b      	ldrh	r3, [r3, #0]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	4a22      	ldr	r2, [pc, #136]	; (800b234 <tcp_parseopt+0xe4>)
 800b1aa:	8812      	ldrh	r2, [r2, #0]
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	da34      	bge.n	800b21a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b1b0:	f7ff ff98 	bl	800b0e4 <tcp_get_next_optbyte>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	021b      	lsls	r3, r3, #8
 800b1ba:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b1bc:	f7ff ff92 	bl	800b0e4 <tcp_get_next_optbyte>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	89bb      	ldrh	r3, [r7, #12]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b1ca:	89bb      	ldrh	r3, [r7, #12]
 800b1cc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b1d0:	d804      	bhi.n	800b1dc <tcp_parseopt+0x8c>
 800b1d2:	89bb      	ldrh	r3, [r7, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d001      	beq.n	800b1dc <tcp_parseopt+0x8c>
 800b1d8:	89ba      	ldrh	r2, [r7, #12]
 800b1da:	e001      	b.n	800b1e0 <tcp_parseopt+0x90>
 800b1dc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b1e4:	e010      	b.n	800b208 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b1e6:	f7ff ff7d 	bl	800b0e4 <tcp_get_next_optbyte>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b1ee:	7afb      	ldrb	r3, [r7, #11]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d914      	bls.n	800b21e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b1f4:	7afb      	ldrb	r3, [r7, #11]
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	4b0f      	ldr	r3, [pc, #60]	; (800b238 <tcp_parseopt+0xe8>)
 800b1fa:	881b      	ldrh	r3, [r3, #0]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	3b02      	subs	r3, #2
 800b202:	b29a      	uxth	r2, r3
 800b204:	4b0c      	ldr	r3, [pc, #48]	; (800b238 <tcp_parseopt+0xe8>)
 800b206:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b208:	4b0b      	ldr	r3, [pc, #44]	; (800b238 <tcp_parseopt+0xe8>)
 800b20a:	881a      	ldrh	r2, [r3, #0]
 800b20c:	4b09      	ldr	r3, [pc, #36]	; (800b234 <tcp_parseopt+0xe4>)
 800b20e:	881b      	ldrh	r3, [r3, #0]
 800b210:	429a      	cmp	r2, r3
 800b212:	d3b3      	bcc.n	800b17c <tcp_parseopt+0x2c>
 800b214:	e004      	b.n	800b220 <tcp_parseopt+0xd0>
          return;
 800b216:	bf00      	nop
 800b218:	e002      	b.n	800b220 <tcp_parseopt+0xd0>
            return;
 800b21a:	bf00      	nop
 800b21c:	e000      	b.n	800b220 <tcp_parseopt+0xd0>
            return;
 800b21e:	bf00      	nop
      }
    }
  }
}
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	08011f54 	.word	0x08011f54
 800b22c:	080123b8 	.word	0x080123b8
 800b230:	08011fa0 	.word	0x08011fa0
 800b234:	200087dc 	.word	0x200087dc
 800b238:	200087e4 	.word	0x200087e4

0800b23c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b23c:	b480      	push	{r7}
 800b23e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b240:	4b05      	ldr	r3, [pc, #20]	; (800b258 <tcp_trigger_input_pcb_close+0x1c>)
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	f043 0310 	orr.w	r3, r3, #16
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	4b03      	ldr	r3, [pc, #12]	; (800b258 <tcp_trigger_input_pcb_close+0x1c>)
 800b24c:	701a      	strb	r2, [r3, #0]
}
 800b24e:	bf00      	nop
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr
 800b258:	200087f5 	.word	0x200087f5

0800b25c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00a      	beq.n	800b284 <tcp_route+0x28>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	7a1b      	ldrb	r3, [r3, #8]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d006      	beq.n	800b284 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	7a1b      	ldrb	r3, [r3, #8]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fb fb4a 	bl	8006914 <netif_get_by_index>
 800b280:	4603      	mov	r3, r0
 800b282:	e003      	b.n	800b28c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f003 f96d 	bl	800e564 <ip4_route>
 800b28a:	4603      	mov	r3, r0
  }
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b294:	b590      	push	{r4, r7, lr}
 800b296:	b087      	sub	sp, #28
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	603b      	str	r3, [r7, #0]
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d105      	bne.n	800b2b6 <tcp_create_segment+0x22>
 800b2aa:	4b44      	ldr	r3, [pc, #272]	; (800b3bc <tcp_create_segment+0x128>)
 800b2ac:	22a3      	movs	r2, #163	; 0xa3
 800b2ae:	4944      	ldr	r1, [pc, #272]	; (800b3c0 <tcp_create_segment+0x12c>)
 800b2b0:	4844      	ldr	r0, [pc, #272]	; (800b3c4 <tcp_create_segment+0x130>)
 800b2b2:	f004 fc1d 	bl	800faf0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d105      	bne.n	800b2c8 <tcp_create_segment+0x34>
 800b2bc:	4b3f      	ldr	r3, [pc, #252]	; (800b3bc <tcp_create_segment+0x128>)
 800b2be:	22a4      	movs	r2, #164	; 0xa4
 800b2c0:	4941      	ldr	r1, [pc, #260]	; (800b3c8 <tcp_create_segment+0x134>)
 800b2c2:	4840      	ldr	r0, [pc, #256]	; (800b3c4 <tcp_create_segment+0x130>)
 800b2c4:	f004 fc14 	bl	800faf0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b2c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	f003 0304 	and.w	r3, r3, #4
 800b2d4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b2d6:	2003      	movs	r0, #3
 800b2d8:	f7fa ff96 	bl	8006208 <memp_malloc>
 800b2dc:	6138      	str	r0, [r7, #16]
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d104      	bne.n	800b2ee <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b2e4:	68b8      	ldr	r0, [r7, #8]
 800b2e6:	f7fb fe75 	bl	8006fd4 <pbuf_free>
    return NULL;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e061      	b.n	800b3b2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b2f4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	891a      	ldrh	r2, [r3, #8]
 800b306:	7dfb      	ldrb	r3, [r7, #23]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d205      	bcs.n	800b31a <tcp_create_segment+0x86>
 800b30e:	4b2b      	ldr	r3, [pc, #172]	; (800b3bc <tcp_create_segment+0x128>)
 800b310:	22b0      	movs	r2, #176	; 0xb0
 800b312:	492e      	ldr	r1, [pc, #184]	; (800b3cc <tcp_create_segment+0x138>)
 800b314:	482b      	ldr	r0, [pc, #172]	; (800b3c4 <tcp_create_segment+0x130>)
 800b316:	f004 fbeb 	bl	800faf0 <iprintf>
  seg->len = p->tot_len - optlen;
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	891a      	ldrh	r2, [r3, #8]
 800b31e:	7dfb      	ldrb	r3, [r7, #23]
 800b320:	b29b      	uxth	r3, r3
 800b322:	1ad3      	subs	r3, r2, r3
 800b324:	b29a      	uxth	r2, r3
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b32a:	2114      	movs	r1, #20
 800b32c:	68b8      	ldr	r0, [r7, #8]
 800b32e:	f7fb fdbb 	bl	8006ea8 <pbuf_add_header>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d004      	beq.n	800b342 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b338:	6938      	ldr	r0, [r7, #16]
 800b33a:	f7fd f8ce 	bl	80084da <tcp_seg_free>
    return NULL;
 800b33e:	2300      	movs	r3, #0
 800b340:	e037      	b.n	800b3b2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	685a      	ldr	r2, [r3, #4]
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	8ada      	ldrh	r2, [r3, #22]
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	68dc      	ldr	r4, [r3, #12]
 800b354:	4610      	mov	r0, r2
 800b356:	f7fa fadf 	bl	8005918 <lwip_htons>
 800b35a:	4603      	mov	r3, r0
 800b35c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	8b1a      	ldrh	r2, [r3, #24]
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	68dc      	ldr	r4, [r3, #12]
 800b366:	4610      	mov	r0, r2
 800b368:	f7fa fad6 	bl	8005918 <lwip_htons>
 800b36c:	4603      	mov	r3, r0
 800b36e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	68dc      	ldr	r4, [r3, #12]
 800b374:	6838      	ldr	r0, [r7, #0]
 800b376:	f7fa fae4 	bl	8005942 <lwip_htonl>
 800b37a:	4603      	mov	r3, r0
 800b37c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b37e:	7dfb      	ldrb	r3, [r7, #23]
 800b380:	089b      	lsrs	r3, r3, #2
 800b382:	b2db      	uxtb	r3, r3
 800b384:	b29b      	uxth	r3, r3
 800b386:	3305      	adds	r3, #5
 800b388:	b29b      	uxth	r3, r3
 800b38a:	031b      	lsls	r3, r3, #12
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	79fb      	ldrb	r3, [r7, #7]
 800b390:	b29b      	uxth	r3, r3
 800b392:	4313      	orrs	r3, r2
 800b394:	b29a      	uxth	r2, r3
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	68dc      	ldr	r4, [r3, #12]
 800b39a:	4610      	mov	r0, r2
 800b39c:	f7fa fabc 	bl	8005918 <lwip_htons>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	749a      	strb	r2, [r3, #18]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	74da      	strb	r2, [r3, #19]
  return seg;
 800b3b0:	693b      	ldr	r3, [r7, #16]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	371c      	adds	r7, #28
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd90      	pop	{r4, r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	080123d4 	.word	0x080123d4
 800b3c0:	08012408 	.word	0x08012408
 800b3c4:	08012428 	.word	0x08012428
 800b3c8:	08012450 	.word	0x08012450
 800b3cc:	08012474 	.word	0x08012474

0800b3d0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b3d0:	b590      	push	{r4, r7, lr}
 800b3d2:	b08b      	sub	sp, #44	; 0x2c
 800b3d4:	af02      	add	r7, sp, #8
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	61fb      	str	r3, [r7, #28]
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d106      	bne.n	800b3fc <tcp_split_unsent_seg+0x2c>
 800b3ee:	4b95      	ldr	r3, [pc, #596]	; (800b644 <tcp_split_unsent_seg+0x274>)
 800b3f0:	f240 324b 	movw	r2, #843	; 0x34b
 800b3f4:	4994      	ldr	r1, [pc, #592]	; (800b648 <tcp_split_unsent_seg+0x278>)
 800b3f6:	4895      	ldr	r0, [pc, #596]	; (800b64c <tcp_split_unsent_seg+0x27c>)
 800b3f8:	f004 fb7a 	bl	800faf0 <iprintf>

  useg = pcb->unsent;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b400:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d102      	bne.n	800b40e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b40c:	e116      	b.n	800b63c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b40e:	887b      	ldrh	r3, [r7, #2]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d109      	bne.n	800b428 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b414:	4b8b      	ldr	r3, [pc, #556]	; (800b644 <tcp_split_unsent_seg+0x274>)
 800b416:	f240 3253 	movw	r2, #851	; 0x353
 800b41a:	498d      	ldr	r1, [pc, #564]	; (800b650 <tcp_split_unsent_seg+0x280>)
 800b41c:	488b      	ldr	r0, [pc, #556]	; (800b64c <tcp_split_unsent_seg+0x27c>)
 800b41e:	f004 fb67 	bl	800faf0 <iprintf>
    return ERR_VAL;
 800b422:	f06f 0305 	mvn.w	r3, #5
 800b426:	e109      	b.n	800b63c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	891b      	ldrh	r3, [r3, #8]
 800b42c:	887a      	ldrh	r2, [r7, #2]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d301      	bcc.n	800b436 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b432:	2300      	movs	r3, #0
 800b434:	e102      	b.n	800b63c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b43a:	887a      	ldrh	r2, [r7, #2]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d906      	bls.n	800b44e <tcp_split_unsent_seg+0x7e>
 800b440:	4b80      	ldr	r3, [pc, #512]	; (800b644 <tcp_split_unsent_seg+0x274>)
 800b442:	f240 325b 	movw	r2, #859	; 0x35b
 800b446:	4983      	ldr	r1, [pc, #524]	; (800b654 <tcp_split_unsent_seg+0x284>)
 800b448:	4880      	ldr	r0, [pc, #512]	; (800b64c <tcp_split_unsent_seg+0x27c>)
 800b44a:	f004 fb51 	bl	800faf0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	891b      	ldrh	r3, [r3, #8]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d106      	bne.n	800b464 <tcp_split_unsent_seg+0x94>
 800b456:	4b7b      	ldr	r3, [pc, #492]	; (800b644 <tcp_split_unsent_seg+0x274>)
 800b458:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b45c:	497e      	ldr	r1, [pc, #504]	; (800b658 <tcp_split_unsent_seg+0x288>)
 800b45e:	487b      	ldr	r0, [pc, #492]	; (800b64c <tcp_split_unsent_seg+0x27c>)
 800b460:	f004 fb46 	bl	800faf0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	7a9b      	ldrb	r3, [r3, #10]
 800b468:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b46a:	7bfb      	ldrb	r3, [r7, #15]
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	f003 0304 	and.w	r3, r3, #4
 800b474:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	891a      	ldrh	r2, [r3, #8]
 800b47a:	887b      	ldrh	r3, [r7, #2]
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b480:	7bbb      	ldrb	r3, [r7, #14]
 800b482:	b29a      	uxth	r2, r3
 800b484:	89bb      	ldrh	r3, [r7, #12]
 800b486:	4413      	add	r3, r2
 800b488:	b29b      	uxth	r3, r3
 800b48a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b48e:	4619      	mov	r1, r3
 800b490:	2036      	movs	r0, #54	; 0x36
 800b492:	f7fb fabb 	bl	8006a0c <pbuf_alloc>
 800b496:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f000 80b7 	beq.w	800b60e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	891a      	ldrh	r2, [r3, #8]
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	891b      	ldrh	r3, [r3, #8]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	887b      	ldrh	r3, [r7, #2]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	6858      	ldr	r0, [r3, #4]
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	685a      	ldr	r2, [r3, #4]
 800b4bc:	7bbb      	ldrb	r3, [r7, #14]
 800b4be:	18d1      	adds	r1, r2, r3
 800b4c0:	897b      	ldrh	r3, [r7, #10]
 800b4c2:	89ba      	ldrh	r2, [r7, #12]
 800b4c4:	f7fb ff80 	bl	80073c8 <pbuf_copy_partial>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	89bb      	ldrh	r3, [r7, #12]
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	f040 809f 	bne.w	800b612 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	899b      	ldrh	r3, [r3, #12]
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7fa fa1b 	bl	8005918 <lwip_htons>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4ea:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b4f0:	7efb      	ldrb	r3, [r7, #27]
 800b4f2:	f003 0308 	and.w	r3, r3, #8
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d007      	beq.n	800b50a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b4fa:	7efb      	ldrb	r3, [r7, #27]
 800b4fc:	f023 0308 	bic.w	r3, r3, #8
 800b500:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b502:	7ebb      	ldrb	r3, [r7, #26]
 800b504:	f043 0308 	orr.w	r3, r3, #8
 800b508:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b50a:	7efb      	ldrb	r3, [r7, #27]
 800b50c:	f003 0301 	and.w	r3, r3, #1
 800b510:	2b00      	cmp	r3, #0
 800b512:	d007      	beq.n	800b524 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b514:	7efb      	ldrb	r3, [r7, #27]
 800b516:	f023 0301 	bic.w	r3, r3, #1
 800b51a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b51c:	7ebb      	ldrb	r3, [r7, #26]
 800b51e:	f043 0301 	orr.w	r3, r3, #1
 800b522:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fa fa09 	bl	8005942 <lwip_htonl>
 800b530:	4602      	mov	r2, r0
 800b532:	887b      	ldrh	r3, [r7, #2]
 800b534:	18d1      	adds	r1, r2, r3
 800b536:	7eba      	ldrb	r2, [r7, #26]
 800b538:	7bfb      	ldrb	r3, [r7, #15]
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	460b      	mov	r3, r1
 800b53e:	6939      	ldr	r1, [r7, #16]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7ff fea7 	bl	800b294 <tcp_create_segment>
 800b546:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d063      	beq.n	800b616 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	4618      	mov	r0, r3
 800b554:	f7fb fdc6 	bl	80070e4 <pbuf_clen>
 800b558:	4603      	mov	r3, r0
 800b55a:	461a      	mov	r2, r3
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b562:	1a9b      	subs	r3, r3, r2
 800b564:	b29a      	uxth	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	6858      	ldr	r0, [r3, #4]
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	891a      	ldrh	r2, [r3, #8]
 800b576:	89bb      	ldrh	r3, [r7, #12]
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	4619      	mov	r1, r3
 800b57e:	f7fb fba3 	bl	8006cc8 <pbuf_realloc>
  useg->len -= remainder;
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	891a      	ldrh	r2, [r3, #8]
 800b586:	89bb      	ldrh	r3, [r7, #12]
 800b588:	1ad3      	subs	r3, r2, r3
 800b58a:	b29a      	uxth	r2, r3
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	899b      	ldrh	r3, [r3, #12]
 800b596:	b29c      	uxth	r4, r3
 800b598:	7efb      	ldrb	r3, [r7, #27]
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7fa f9bb 	bl	8005918 <lwip_htons>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	4322      	orrs	r2, r4
 800b5ac:	b292      	uxth	r2, r2
 800b5ae:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7fb fd95 	bl	80070e4 <pbuf_clen>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	461a      	mov	r2, r3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b5c4:	4413      	add	r3, r2
 800b5c6:	b29a      	uxth	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fb fd86 	bl	80070e4 <pbuf_clen>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	461a      	mov	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b5e2:	4413      	add	r3, r2
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	69fa      	ldr	r2, [r7, #28]
 800b5f8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d103      	bne.n	800b60a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b60a:	2300      	movs	r3, #0
 800b60c:	e016      	b.n	800b63c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b60e:	bf00      	nop
 800b610:	e002      	b.n	800b618 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b612:	bf00      	nop
 800b614:	e000      	b.n	800b618 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b616:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d006      	beq.n	800b62c <tcp_split_unsent_seg+0x25c>
 800b61e:	4b09      	ldr	r3, [pc, #36]	; (800b644 <tcp_split_unsent_seg+0x274>)
 800b620:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b624:	490d      	ldr	r1, [pc, #52]	; (800b65c <tcp_split_unsent_seg+0x28c>)
 800b626:	4809      	ldr	r0, [pc, #36]	; (800b64c <tcp_split_unsent_seg+0x27c>)
 800b628:	f004 fa62 	bl	800faf0 <iprintf>
  if (p != NULL) {
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d002      	beq.n	800b638 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b632:	6938      	ldr	r0, [r7, #16]
 800b634:	f7fb fcce 	bl	8006fd4 <pbuf_free>
  }

  return ERR_MEM;
 800b638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3724      	adds	r7, #36	; 0x24
 800b640:	46bd      	mov	sp, r7
 800b642:	bd90      	pop	{r4, r7, pc}
 800b644:	080123d4 	.word	0x080123d4
 800b648:	08012768 	.word	0x08012768
 800b64c:	08012428 	.word	0x08012428
 800b650:	0801278c 	.word	0x0801278c
 800b654:	080127b0 	.word	0x080127b0
 800b658:	080127c0 	.word	0x080127c0
 800b65c:	080127d0 	.word	0x080127d0

0800b660 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b660:	b590      	push	{r4, r7, lr}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d106      	bne.n	800b67c <tcp_send_fin+0x1c>
 800b66e:	4b21      	ldr	r3, [pc, #132]	; (800b6f4 <tcp_send_fin+0x94>)
 800b670:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b674:	4920      	ldr	r1, [pc, #128]	; (800b6f8 <tcp_send_fin+0x98>)
 800b676:	4821      	ldr	r0, [pc, #132]	; (800b6fc <tcp_send_fin+0x9c>)
 800b678:	f004 fa3a 	bl	800faf0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b680:	2b00      	cmp	r3, #0
 800b682:	d02e      	beq.n	800b6e2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b688:	60fb      	str	r3, [r7, #12]
 800b68a:	e002      	b.n	800b692 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1f8      	bne.n	800b68c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	899b      	ldrh	r3, [r3, #12]
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7fa f938 	bl	8005918 <lwip_htons>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	f003 0307 	and.w	r3, r3, #7
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d116      	bne.n	800b6e2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	899b      	ldrh	r3, [r3, #12]
 800b6ba:	b29c      	uxth	r4, r3
 800b6bc:	2001      	movs	r0, #1
 800b6be:	f7fa f92b 	bl	8005918 <lwip_htons>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	4322      	orrs	r2, r4
 800b6cc:	b292      	uxth	r2, r2
 800b6ce:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	8b5b      	ldrh	r3, [r3, #26]
 800b6d4:	f043 0320 	orr.w	r3, r3, #32
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	e004      	b.n	800b6ec <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b6e2:	2101      	movs	r1, #1
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 f80b 	bl	800b700 <tcp_enqueue_flags>
 800b6ea:	4603      	mov	r3, r0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3714      	adds	r7, #20
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd90      	pop	{r4, r7, pc}
 800b6f4:	080123d4 	.word	0x080123d4
 800b6f8:	080127dc 	.word	0x080127dc
 800b6fc:	08012428 	.word	0x08012428

0800b700 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b08a      	sub	sp, #40	; 0x28
 800b704:	af02      	add	r7, sp, #8
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	460b      	mov	r3, r1
 800b70a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b714:	78fb      	ldrb	r3, [r7, #3]
 800b716:	f003 0303 	and.w	r3, r3, #3
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d106      	bne.n	800b72c <tcp_enqueue_flags+0x2c>
 800b71e:	4b67      	ldr	r3, [pc, #412]	; (800b8bc <tcp_enqueue_flags+0x1bc>)
 800b720:	f240 4211 	movw	r2, #1041	; 0x411
 800b724:	4966      	ldr	r1, [pc, #408]	; (800b8c0 <tcp_enqueue_flags+0x1c0>)
 800b726:	4867      	ldr	r0, [pc, #412]	; (800b8c4 <tcp_enqueue_flags+0x1c4>)
 800b728:	f004 f9e2 	bl	800faf0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d106      	bne.n	800b740 <tcp_enqueue_flags+0x40>
 800b732:	4b62      	ldr	r3, [pc, #392]	; (800b8bc <tcp_enqueue_flags+0x1bc>)
 800b734:	f240 4213 	movw	r2, #1043	; 0x413
 800b738:	4963      	ldr	r1, [pc, #396]	; (800b8c8 <tcp_enqueue_flags+0x1c8>)
 800b73a:	4862      	ldr	r0, [pc, #392]	; (800b8c4 <tcp_enqueue_flags+0x1c4>)
 800b73c:	f004 f9d8 	bl	800faf0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b740:	78fb      	ldrb	r3, [r7, #3]
 800b742:	f003 0302 	and.w	r3, r3, #2
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b74a:	2301      	movs	r3, #1
 800b74c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b74e:	7ffb      	ldrb	r3, [r7, #31]
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	b2db      	uxtb	r3, r3
 800b754:	f003 0304 	and.w	r3, r3, #4
 800b758:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b75a:	7dfb      	ldrb	r3, [r7, #23]
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b762:	4619      	mov	r1, r3
 800b764:	2036      	movs	r0, #54	; 0x36
 800b766:	f7fb f951 	bl	8006a0c <pbuf_alloc>
 800b76a:	6138      	str	r0, [r7, #16]
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d109      	bne.n	800b786 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	8b5b      	ldrh	r3, [r3, #26]
 800b776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b784:	e095      	b.n	800b8b2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	895a      	ldrh	r2, [r3, #10]
 800b78a:	7dfb      	ldrb	r3, [r7, #23]
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	429a      	cmp	r2, r3
 800b790:	d206      	bcs.n	800b7a0 <tcp_enqueue_flags+0xa0>
 800b792:	4b4a      	ldr	r3, [pc, #296]	; (800b8bc <tcp_enqueue_flags+0x1bc>)
 800b794:	f240 4239 	movw	r2, #1081	; 0x439
 800b798:	494c      	ldr	r1, [pc, #304]	; (800b8cc <tcp_enqueue_flags+0x1cc>)
 800b79a:	484a      	ldr	r0, [pc, #296]	; (800b8c4 <tcp_enqueue_flags+0x1c4>)
 800b79c:	f004 f9a8 	bl	800faf0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b7a4:	78fa      	ldrb	r2, [r7, #3]
 800b7a6:	7ffb      	ldrb	r3, [r7, #31]
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	6939      	ldr	r1, [r7, #16]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff fd70 	bl	800b294 <tcp_create_segment>
 800b7b4:	60f8      	str	r0, [r7, #12]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d109      	bne.n	800b7d0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	8b5b      	ldrh	r3, [r3, #26]
 800b7c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b7ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7ce:	e070      	b.n	800b8b2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	f003 0303 	and.w	r3, r3, #3
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d006      	beq.n	800b7ea <tcp_enqueue_flags+0xea>
 800b7dc:	4b37      	ldr	r3, [pc, #220]	; (800b8bc <tcp_enqueue_flags+0x1bc>)
 800b7de:	f240 4242 	movw	r2, #1090	; 0x442
 800b7e2:	493b      	ldr	r1, [pc, #236]	; (800b8d0 <tcp_enqueue_flags+0x1d0>)
 800b7e4:	4837      	ldr	r0, [pc, #220]	; (800b8c4 <tcp_enqueue_flags+0x1c4>)
 800b7e6:	f004 f983 	bl	800faf0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	891b      	ldrh	r3, [r3, #8]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d006      	beq.n	800b800 <tcp_enqueue_flags+0x100>
 800b7f2:	4b32      	ldr	r3, [pc, #200]	; (800b8bc <tcp_enqueue_flags+0x1bc>)
 800b7f4:	f240 4243 	movw	r2, #1091	; 0x443
 800b7f8:	4936      	ldr	r1, [pc, #216]	; (800b8d4 <tcp_enqueue_flags+0x1d4>)
 800b7fa:	4832      	ldr	r0, [pc, #200]	; (800b8c4 <tcp_enqueue_flags+0x1c4>)
 800b7fc:	f004 f978 	bl	800faf0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b804:	2b00      	cmp	r3, #0
 800b806:	d103      	bne.n	800b810 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	68fa      	ldr	r2, [r7, #12]
 800b80c:	66da      	str	r2, [r3, #108]	; 0x6c
 800b80e:	e00d      	b.n	800b82c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b814:	61bb      	str	r3, [r7, #24]
 800b816:	e002      	b.n	800b81e <tcp_enqueue_flags+0x11e>
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	61bb      	str	r3, [r7, #24]
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1f8      	bne.n	800b818 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b834:	78fb      	ldrb	r3, [r7, #3]
 800b836:	f003 0302 	and.w	r3, r3, #2
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d104      	bne.n	800b848 <tcp_enqueue_flags+0x148>
 800b83e:	78fb      	ldrb	r3, [r7, #3]
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	2b00      	cmp	r3, #0
 800b846:	d004      	beq.n	800b852 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b84c:	1c5a      	adds	r2, r3, #1
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b852:	78fb      	ldrb	r3, [r7, #3]
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d006      	beq.n	800b86a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	8b5b      	ldrh	r3, [r3, #26]
 800b860:	f043 0320 	orr.w	r3, r3, #32
 800b864:	b29a      	uxth	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	4618      	mov	r0, r3
 800b870:	f7fb fc38 	bl	80070e4 <pbuf_clen>
 800b874:	4603      	mov	r3, r0
 800b876:	461a      	mov	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b87e:	4413      	add	r3, r2
 800b880:	b29a      	uxth	r2, r3
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00e      	beq.n	800b8b0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10a      	bne.n	800b8b0 <tcp_enqueue_flags+0x1b0>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d106      	bne.n	800b8b0 <tcp_enqueue_flags+0x1b0>
 800b8a2:	4b06      	ldr	r3, [pc, #24]	; (800b8bc <tcp_enqueue_flags+0x1bc>)
 800b8a4:	f240 4265 	movw	r2, #1125	; 0x465
 800b8a8:	490b      	ldr	r1, [pc, #44]	; (800b8d8 <tcp_enqueue_flags+0x1d8>)
 800b8aa:	4806      	ldr	r0, [pc, #24]	; (800b8c4 <tcp_enqueue_flags+0x1c4>)
 800b8ac:	f004 f920 	bl	800faf0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3720      	adds	r7, #32
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	080123d4 	.word	0x080123d4
 800b8c0:	080127f8 	.word	0x080127f8
 800b8c4:	08012428 	.word	0x08012428
 800b8c8:	08012850 	.word	0x08012850
 800b8cc:	08012870 	.word	0x08012870
 800b8d0:	080128ac 	.word	0x080128ac
 800b8d4:	080128c4 	.word	0x080128c4
 800b8d8:	080128f0 	.word	0x080128f0

0800b8dc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b8dc:	b5b0      	push	{r4, r5, r7, lr}
 800b8de:	b08a      	sub	sp, #40	; 0x28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d106      	bne.n	800b8f8 <tcp_output+0x1c>
 800b8ea:	4b8a      	ldr	r3, [pc, #552]	; (800bb14 <tcp_output+0x238>)
 800b8ec:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b8f0:	4989      	ldr	r1, [pc, #548]	; (800bb18 <tcp_output+0x23c>)
 800b8f2:	488a      	ldr	r0, [pc, #552]	; (800bb1c <tcp_output+0x240>)
 800b8f4:	f004 f8fc 	bl	800faf0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	7d1b      	ldrb	r3, [r3, #20]
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d106      	bne.n	800b90e <tcp_output+0x32>
 800b900:	4b84      	ldr	r3, [pc, #528]	; (800bb14 <tcp_output+0x238>)
 800b902:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b906:	4986      	ldr	r1, [pc, #536]	; (800bb20 <tcp_output+0x244>)
 800b908:	4884      	ldr	r0, [pc, #528]	; (800bb1c <tcp_output+0x240>)
 800b90a:	f004 f8f1 	bl	800faf0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b90e:	4b85      	ldr	r3, [pc, #532]	; (800bb24 <tcp_output+0x248>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	429a      	cmp	r2, r3
 800b916:	d101      	bne.n	800b91c <tcp_output+0x40>
    return ERR_OK;
 800b918:	2300      	movs	r3, #0
 800b91a:	e1ce      	b.n	800bcba <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b928:	4293      	cmp	r3, r2
 800b92a:	bf28      	it	cs
 800b92c:	4613      	movcs	r3, r2
 800b92e:	b29b      	uxth	r3, r3
 800b930:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b936:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10b      	bne.n	800b956 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	8b5b      	ldrh	r3, [r3, #26]
 800b942:	f003 0302 	and.w	r3, r3, #2
 800b946:	2b00      	cmp	r3, #0
 800b948:	f000 81aa 	beq.w	800bca0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 fdcb 	bl	800c4e8 <tcp_send_empty_ack>
 800b952:	4603      	mov	r3, r0
 800b954:	e1b1      	b.n	800bcba <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b956:	6879      	ldr	r1, [r7, #4]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	3304      	adds	r3, #4
 800b95c:	461a      	mov	r2, r3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7ff fc7c 	bl	800b25c <tcp_route>
 800b964:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d102      	bne.n	800b972 <tcp_output+0x96>
    return ERR_RTE;
 800b96c:	f06f 0303 	mvn.w	r3, #3
 800b970:	e1a3      	b.n	800bcba <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d003      	beq.n	800b980 <tcp_output+0xa4>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d111      	bne.n	800b9a4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d002      	beq.n	800b98c <tcp_output+0xb0>
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	3304      	adds	r3, #4
 800b98a:	e000      	b.n	800b98e <tcp_output+0xb2>
 800b98c:	2300      	movs	r3, #0
 800b98e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d102      	bne.n	800b99c <tcp_output+0xc0>
      return ERR_RTE;
 800b996:	f06f 0303 	mvn.w	r3, #3
 800b99a:	e18e      	b.n	800bcba <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7f9 ffc9 	bl	8005942 <lwip_htonl>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9b6:	1ad3      	subs	r3, r2, r3
 800b9b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ba:	8912      	ldrh	r2, [r2, #8]
 800b9bc:	4413      	add	r3, r2
 800b9be:	69ba      	ldr	r2, [r7, #24]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d227      	bcs.n	800ba14 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d114      	bne.n	800b9fc <tcp_output+0x120>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d110      	bne.n	800b9fc <tcp_output+0x120>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d10b      	bne.n	800b9fc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	8b5b      	ldrh	r3, [r3, #26]
 800ba00:	f003 0302 	and.w	r3, r3, #2
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f000 814d 	beq.w	800bca4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 fd6c 	bl	800c4e8 <tcp_send_empty_ack>
 800ba10:	4603      	mov	r3, r0
 800ba12:	e152      	b.n	800bcba <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba20:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f000 811c 	beq.w	800bc62 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ba2a:	e002      	b.n	800ba32 <tcp_output+0x156>
 800ba2c:	6a3b      	ldr	r3, [r7, #32]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	623b      	str	r3, [r7, #32]
 800ba32:	6a3b      	ldr	r3, [r7, #32]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1f8      	bne.n	800ba2c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ba3a:	e112      	b.n	800bc62 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	899b      	ldrh	r3, [r3, #12]
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7f9 ff67 	bl	8005918 <lwip_htons>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	f003 0304 	and.w	r3, r3, #4
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d006      	beq.n	800ba64 <tcp_output+0x188>
 800ba56:	4b2f      	ldr	r3, [pc, #188]	; (800bb14 <tcp_output+0x238>)
 800ba58:	f240 5236 	movw	r2, #1334	; 0x536
 800ba5c:	4932      	ldr	r1, [pc, #200]	; (800bb28 <tcp_output+0x24c>)
 800ba5e:	482f      	ldr	r0, [pc, #188]	; (800bb1c <tcp_output+0x240>)
 800ba60:	f004 f846 	bl	800faf0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d01f      	beq.n	800baac <tcp_output+0x1d0>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	8b5b      	ldrh	r3, [r3, #26]
 800ba70:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d119      	bne.n	800baac <tcp_output+0x1d0>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00b      	beq.n	800ba98 <tcp_output+0x1bc>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d110      	bne.n	800baac <tcp_output+0x1d0>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba8e:	891a      	ldrh	r2, [r3, #8]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d209      	bcs.n	800baac <tcp_output+0x1d0>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d004      	beq.n	800baac <tcp_output+0x1d0>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800baa8:	2b08      	cmp	r3, #8
 800baaa:	d901      	bls.n	800bab0 <tcp_output+0x1d4>
 800baac:	2301      	movs	r3, #1
 800baae:	e000      	b.n	800bab2 <tcp_output+0x1d6>
 800bab0:	2300      	movs	r3, #0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d106      	bne.n	800bac4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	8b5b      	ldrh	r3, [r3, #26]
 800baba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f000 80e4 	beq.w	800bc8c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	7d1b      	ldrb	r3, [r3, #20]
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d00d      	beq.n	800bae8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800bacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	899b      	ldrh	r3, [r3, #12]
 800bad2:	b29c      	uxth	r4, r3
 800bad4:	2010      	movs	r0, #16
 800bad6:	f7f9 ff1f 	bl	8005918 <lwip_htons>
 800bada:	4603      	mov	r3, r0
 800badc:	461a      	mov	r2, r3
 800bade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	4322      	orrs	r2, r4
 800bae4:	b292      	uxth	r2, r2
 800bae6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800bae8:	697a      	ldr	r2, [r7, #20]
 800baea:	6879      	ldr	r1, [r7, #4]
 800baec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800baee:	f000 f909 	bl	800bd04 <tcp_output_segment>
 800baf2:	4603      	mov	r3, r0
 800baf4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800baf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d016      	beq.n	800bb2c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	8b5b      	ldrh	r3, [r3, #26]
 800bb02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	835a      	strh	r2, [r3, #26]
      return err;
 800bb0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb10:	e0d3      	b.n	800bcba <tcp_output+0x3de>
 800bb12:	bf00      	nop
 800bb14:	080123d4 	.word	0x080123d4
 800bb18:	08012918 	.word	0x08012918
 800bb1c:	08012428 	.word	0x08012428
 800bb20:	08012930 	.word	0x08012930
 800bb24:	200087fc 	.word	0x200087fc
 800bb28:	08012958 	.word	0x08012958
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800bb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	7d1b      	ldrb	r3, [r3, #20]
 800bb38:	2b02      	cmp	r3, #2
 800bb3a:	d006      	beq.n	800bb4a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	8b5b      	ldrh	r3, [r3, #26]
 800bb40:	f023 0303 	bic.w	r3, r3, #3
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7f9 fef6 	bl	8005942 <lwip_htonl>
 800bb56:	4604      	mov	r4, r0
 800bb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5a:	891b      	ldrh	r3, [r3, #8]
 800bb5c:	461d      	mov	r5, r3
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	899b      	ldrh	r3, [r3, #12]
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7f9 fed6 	bl	8005918 <lwip_htons>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	f003 0303 	and.w	r3, r3, #3
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d001      	beq.n	800bb7c <tcp_output+0x2a0>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e000      	b.n	800bb7e <tcp_output+0x2a2>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	442b      	add	r3, r5
 800bb80:	4423      	add	r3, r4
 800bb82:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	da02      	bge.n	800bb96 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	68ba      	ldr	r2, [r7, #8]
 800bb94:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800bb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb98:	891b      	ldrh	r3, [r3, #8]
 800bb9a:	461c      	mov	r4, r3
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	899b      	ldrh	r3, [r3, #12]
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7f9 feb7 	bl	8005918 <lwip_htons>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	f003 0303 	and.w	r3, r3, #3
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d001      	beq.n	800bbba <tcp_output+0x2de>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e000      	b.n	800bbbc <tcp_output+0x2e0>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	4423      	add	r3, r4
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d049      	beq.n	800bc56 <tcp_output+0x37a>
      seg->next = NULL;
 800bbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d105      	bne.n	800bbdc <tcp_output+0x300>
        pcb->unacked = seg;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbd4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd8:	623b      	str	r3, [r7, #32]
 800bbda:	e03f      	b.n	800bc5c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7f9 fead 	bl	8005942 <lwip_htonl>
 800bbe8:	4604      	mov	r4, r0
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7f9 fea6 	bl	8005942 <lwip_htonl>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	1ae3      	subs	r3, r4, r3
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	da24      	bge.n	800bc48 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	3370      	adds	r3, #112	; 0x70
 800bc02:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bc04:	e002      	b.n	800bc0c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d011      	beq.n	800bc38 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7f9 fe90 	bl	8005942 <lwip_htonl>
 800bc22:	4604      	mov	r4, r0
 800bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7f9 fe89 	bl	8005942 <lwip_htonl>
 800bc30:	4603      	mov	r3, r0
 800bc32:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	dbe6      	blt.n	800bc06 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc44:	601a      	str	r2, [r3, #0]
 800bc46:	e009      	b.n	800bc5c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bc48:	6a3b      	ldr	r3, [r7, #32]
 800bc4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc4c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bc4e:	6a3b      	ldr	r3, [r7, #32]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	623b      	str	r3, [r7, #32]
 800bc54:	e002      	b.n	800bc5c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bc56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc58:	f7fc fc3f 	bl	80084da <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc60:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800bc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d012      	beq.n	800bc8e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7f9 fe67 	bl	8005942 <lwip_htonl>
 800bc74:	4602      	mov	r2, r0
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc7e:	8912      	ldrh	r2, [r2, #8]
 800bc80:	4413      	add	r3, r2
  while (seg != NULL &&
 800bc82:	69ba      	ldr	r2, [r7, #24]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	f4bf aed9 	bcs.w	800ba3c <tcp_output+0x160>
 800bc8a:	e000      	b.n	800bc8e <tcp_output+0x3b2>
      break;
 800bc8c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d108      	bne.n	800bca8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800bc9e:	e004      	b.n	800bcaa <tcp_output+0x3ce>
    goto output_done;
 800bca0:	bf00      	nop
 800bca2:	e002      	b.n	800bcaa <tcp_output+0x3ce>
    goto output_done;
 800bca4:	bf00      	nop
 800bca6:	e000      	b.n	800bcaa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bca8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	8b5b      	ldrh	r3, [r3, #26]
 800bcae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bcb8:	2300      	movs	r3, #0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3728      	adds	r7, #40	; 0x28
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bdb0      	pop	{r4, r5, r7, pc}
 800bcc2:	bf00      	nop

0800bcc4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d106      	bne.n	800bce0 <tcp_output_segment_busy+0x1c>
 800bcd2:	4b09      	ldr	r3, [pc, #36]	; (800bcf8 <tcp_output_segment_busy+0x34>)
 800bcd4:	f240 529a 	movw	r2, #1434	; 0x59a
 800bcd8:	4908      	ldr	r1, [pc, #32]	; (800bcfc <tcp_output_segment_busy+0x38>)
 800bcda:	4809      	ldr	r0, [pc, #36]	; (800bd00 <tcp_output_segment_busy+0x3c>)
 800bcdc:	f003 ff08 	bl	800faf0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	7b9b      	ldrb	r3, [r3, #14]
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d001      	beq.n	800bcee <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bcea:	2301      	movs	r3, #1
 800bcec:	e000      	b.n	800bcf0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	080123d4 	.word	0x080123d4
 800bcfc:	08012970 	.word	0x08012970
 800bd00:	08012428 	.word	0x08012428

0800bd04 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bd04:	b5b0      	push	{r4, r5, r7, lr}
 800bd06:	b08c      	sub	sp, #48	; 0x30
 800bd08:	af04      	add	r7, sp, #16
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d106      	bne.n	800bd24 <tcp_output_segment+0x20>
 800bd16:	4b63      	ldr	r3, [pc, #396]	; (800bea4 <tcp_output_segment+0x1a0>)
 800bd18:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bd1c:	4962      	ldr	r1, [pc, #392]	; (800bea8 <tcp_output_segment+0x1a4>)
 800bd1e:	4863      	ldr	r0, [pc, #396]	; (800beac <tcp_output_segment+0x1a8>)
 800bd20:	f003 fee6 	bl	800faf0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d106      	bne.n	800bd38 <tcp_output_segment+0x34>
 800bd2a:	4b5e      	ldr	r3, [pc, #376]	; (800bea4 <tcp_output_segment+0x1a0>)
 800bd2c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bd30:	495f      	ldr	r1, [pc, #380]	; (800beb0 <tcp_output_segment+0x1ac>)
 800bd32:	485e      	ldr	r0, [pc, #376]	; (800beac <tcp_output_segment+0x1a8>)
 800bd34:	f003 fedc 	bl	800faf0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d106      	bne.n	800bd4c <tcp_output_segment+0x48>
 800bd3e:	4b59      	ldr	r3, [pc, #356]	; (800bea4 <tcp_output_segment+0x1a0>)
 800bd40:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bd44:	495b      	ldr	r1, [pc, #364]	; (800beb4 <tcp_output_segment+0x1b0>)
 800bd46:	4859      	ldr	r0, [pc, #356]	; (800beac <tcp_output_segment+0x1a8>)
 800bd48:	f003 fed2 	bl	800faf0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f7ff ffb9 	bl	800bcc4 <tcp_output_segment_busy>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d001      	beq.n	800bd5c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	e09f      	b.n	800be9c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	68dc      	ldr	r4, [r3, #12]
 800bd64:	4610      	mov	r0, r2
 800bd66:	f7f9 fdec 	bl	8005942 <lwip_htonl>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	68dc      	ldr	r4, [r3, #12]
 800bd76:	4610      	mov	r0, r2
 800bd78:	f7f9 fdce 	bl	8005918 <lwip_htons>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd84:	68ba      	ldr	r2, [r7, #8]
 800bd86:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bd88:	441a      	add	r2, r3
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	3314      	adds	r3, #20
 800bd94:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	7a9b      	ldrb	r3, [r3, #10]
 800bd9a:	f003 0301 	and.w	r3, r3, #1
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d015      	beq.n	800bdce <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	3304      	adds	r3, #4
 800bda6:	461a      	mov	r2, r3
 800bda8:	6879      	ldr	r1, [r7, #4]
 800bdaa:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bdae:	f7fc fe8b 	bl	8008ac8 <tcp_eff_send_mss_netif>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bdb6:	8b7b      	ldrh	r3, [r7, #26]
 800bdb8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7f9 fdc0 	bl	8005942 <lwip_htonl>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	3304      	adds	r3, #4
 800bdcc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	da02      	bge.n	800bdde <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	2200      	movs	r2, #0
 800bddc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d10c      	bne.n	800be00 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bde6:	4b34      	ldr	r3, [pc, #208]	; (800beb8 <tcp_output_segment+0x1b4>)
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	68db      	ldr	r3, [r3, #12]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7f9 fda4 	bl	8005942 <lwip_htonl>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	68da      	ldr	r2, [r3, #12]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	1ad3      	subs	r3, r2, r3
 800be0c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	8959      	ldrh	r1, [r3, #10]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	8b3a      	ldrh	r2, [r7, #24]
 800be1a:	1a8a      	subs	r2, r1, r2
 800be1c:	b292      	uxth	r2, r2
 800be1e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	8919      	ldrh	r1, [r3, #8]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	8b3a      	ldrh	r2, [r7, #24]
 800be2c:	1a8a      	subs	r2, r1, r2
 800be2e:	b292      	uxth	r2, r2
 800be30:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	68d2      	ldr	r2, [r2, #12]
 800be3a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	2200      	movs	r2, #0
 800be42:	741a      	strb	r2, [r3, #16]
 800be44:	2200      	movs	r2, #0
 800be46:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	f103 0214 	add.w	r2, r3, #20
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	7a9b      	ldrb	r3, [r3, #10]
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	f003 0304 	and.w	r3, r3, #4
 800be5a:	4413      	add	r3, r2
 800be5c:	69fa      	ldr	r2, [r7, #28]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d006      	beq.n	800be70 <tcp_output_segment+0x16c>
 800be62:	4b10      	ldr	r3, [pc, #64]	; (800bea4 <tcp_output_segment+0x1a0>)
 800be64:	f240 621c 	movw	r2, #1564	; 0x61c
 800be68:	4914      	ldr	r1, [pc, #80]	; (800bebc <tcp_output_segment+0x1b8>)
 800be6a:	4810      	ldr	r0, [pc, #64]	; (800beac <tcp_output_segment+0x1a8>)
 800be6c:	f003 fe40 	bl	800faf0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6858      	ldr	r0, [r3, #4]
 800be74:	68b9      	ldr	r1, [r7, #8]
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	1d1c      	adds	r4, r3, #4
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	7add      	ldrb	r5, [r3, #11]
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	7a9b      	ldrb	r3, [r3, #10]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	9202      	str	r2, [sp, #8]
 800be86:	2206      	movs	r2, #6
 800be88:	9201      	str	r2, [sp, #4]
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	462b      	mov	r3, r5
 800be8e:	4622      	mov	r2, r4
 800be90:	f002 fd26 	bl	800e8e0 <ip4_output_if>
 800be94:	4603      	mov	r3, r0
 800be96:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800be98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3720      	adds	r7, #32
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bdb0      	pop	{r4, r5, r7, pc}
 800bea4:	080123d4 	.word	0x080123d4
 800bea8:	08012998 	.word	0x08012998
 800beac:	08012428 	.word	0x08012428
 800beb0:	080129b8 	.word	0x080129b8
 800beb4:	080129d8 	.word	0x080129d8
 800beb8:	200087b0 	.word	0x200087b0
 800bebc:	080129fc 	.word	0x080129fc

0800bec0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800bec0:	b5b0      	push	{r4, r5, r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d106      	bne.n	800bedc <tcp_rexmit_rto_prepare+0x1c>
 800bece:	4b31      	ldr	r3, [pc, #196]	; (800bf94 <tcp_rexmit_rto_prepare+0xd4>)
 800bed0:	f240 6263 	movw	r2, #1635	; 0x663
 800bed4:	4930      	ldr	r1, [pc, #192]	; (800bf98 <tcp_rexmit_rto_prepare+0xd8>)
 800bed6:	4831      	ldr	r0, [pc, #196]	; (800bf9c <tcp_rexmit_rto_prepare+0xdc>)
 800bed8:	f003 fe0a 	bl	800faf0 <iprintf>

  if (pcb->unacked == NULL) {
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d102      	bne.n	800beea <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800bee4:	f06f 0305 	mvn.w	r3, #5
 800bee8:	e050      	b.n	800bf8c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beee:	60fb      	str	r3, [r7, #12]
 800bef0:	e00b      	b.n	800bf0a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f7ff fee6 	bl	800bcc4 <tcp_output_segment_busy>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d002      	beq.n	800bf04 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800befe:	f06f 0305 	mvn.w	r3, #5
 800bf02:	e043      	b.n	800bf8c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	60fb      	str	r3, [r7, #12]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d1ef      	bne.n	800bef2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f7ff fed6 	bl	800bcc4 <tcp_output_segment_busy>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d002      	beq.n	800bf24 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bf1e:	f06f 0305 	mvn.w	r3, #5
 800bf22:	e033      	b.n	800bf8c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	8b5b      	ldrh	r3, [r3, #26]
 800bf3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bf42:	b29a      	uxth	r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7f9 fcf7 	bl	8005942 <lwip_htonl>
 800bf54:	4604      	mov	r4, r0
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	891b      	ldrh	r3, [r3, #8]
 800bf5a:	461d      	mov	r5, r3
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	899b      	ldrh	r3, [r3, #12]
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7f9 fcd7 	bl	8005918 <lwip_htons>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	f003 0303 	and.w	r3, r3, #3
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d001      	beq.n	800bf7a <tcp_rexmit_rto_prepare+0xba>
 800bf76:	2301      	movs	r3, #1
 800bf78:	e000      	b.n	800bf7c <tcp_rexmit_rto_prepare+0xbc>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	442b      	add	r3, r5
 800bf7e:	18e2      	adds	r2, r4, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bdb0      	pop	{r4, r5, r7, pc}
 800bf94:	080123d4 	.word	0x080123d4
 800bf98:	08012a10 	.word	0x08012a10
 800bf9c:	08012428 	.word	0x08012428

0800bfa0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d106      	bne.n	800bfbc <tcp_rexmit_rto_commit+0x1c>
 800bfae:	4b0d      	ldr	r3, [pc, #52]	; (800bfe4 <tcp_rexmit_rto_commit+0x44>)
 800bfb0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bfb4:	490c      	ldr	r1, [pc, #48]	; (800bfe8 <tcp_rexmit_rto_commit+0x48>)
 800bfb6:	480d      	ldr	r0, [pc, #52]	; (800bfec <tcp_rexmit_rto_commit+0x4c>)
 800bfb8:	f003 fd9a 	bl	800faf0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bfc2:	2bff      	cmp	r3, #255	; 0xff
 800bfc4:	d007      	beq.n	800bfd6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bfcc:	3301      	adds	r3, #1
 800bfce:	b2da      	uxtb	r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7ff fc80 	bl	800b8dc <tcp_output>
}
 800bfdc:	bf00      	nop
 800bfde:	3708      	adds	r7, #8
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	080123d4 	.word	0x080123d4
 800bfe8:	08012a34 	.word	0x08012a34
 800bfec:	08012428 	.word	0x08012428

0800bff0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d106      	bne.n	800c00c <tcp_rexmit_rto+0x1c>
 800bffe:	4b0a      	ldr	r3, [pc, #40]	; (800c028 <tcp_rexmit_rto+0x38>)
 800c000:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c004:	4909      	ldr	r1, [pc, #36]	; (800c02c <tcp_rexmit_rto+0x3c>)
 800c006:	480a      	ldr	r0, [pc, #40]	; (800c030 <tcp_rexmit_rto+0x40>)
 800c008:	f003 fd72 	bl	800faf0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f7ff ff57 	bl	800bec0 <tcp_rexmit_rto_prepare>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d102      	bne.n	800c01e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7ff ffc1 	bl	800bfa0 <tcp_rexmit_rto_commit>
  }
}
 800c01e:	bf00      	nop
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	080123d4 	.word	0x080123d4
 800c02c:	08012a58 	.word	0x08012a58
 800c030:	08012428 	.word	0x08012428

0800c034 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c034:	b590      	push	{r4, r7, lr}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d106      	bne.n	800c050 <tcp_rexmit+0x1c>
 800c042:	4b2f      	ldr	r3, [pc, #188]	; (800c100 <tcp_rexmit+0xcc>)
 800c044:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c048:	492e      	ldr	r1, [pc, #184]	; (800c104 <tcp_rexmit+0xd0>)
 800c04a:	482f      	ldr	r0, [pc, #188]	; (800c108 <tcp_rexmit+0xd4>)
 800c04c:	f003 fd50 	bl	800faf0 <iprintf>

  if (pcb->unacked == NULL) {
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c054:	2b00      	cmp	r3, #0
 800c056:	d102      	bne.n	800c05e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c058:	f06f 0305 	mvn.w	r3, #5
 800c05c:	e04c      	b.n	800c0f8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c062:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c064:	68b8      	ldr	r0, [r7, #8]
 800c066:	f7ff fe2d 	bl	800bcc4 <tcp_output_segment_busy>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d002      	beq.n	800c076 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c070:	f06f 0305 	mvn.w	r3, #5
 800c074:	e040      	b.n	800c0f8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	336c      	adds	r3, #108	; 0x6c
 800c082:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c084:	e002      	b.n	800c08c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d011      	beq.n	800c0b8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7f9 fc50 	bl	8005942 <lwip_htonl>
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7f9 fc49 	bl	8005942 <lwip_htonl>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	dbe6      	blt.n	800c086 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	68ba      	ldr	r2, [r7, #8]
 800c0c4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d103      	bne.n	800c0d6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0dc:	2bff      	cmp	r3, #255	; 0xff
 800c0de:	d007      	beq.n	800c0f0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	b2da      	uxtb	r2, r3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3714      	adds	r7, #20
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd90      	pop	{r4, r7, pc}
 800c100:	080123d4 	.word	0x080123d4
 800c104:	08012a74 	.word	0x08012a74
 800c108:	08012428 	.word	0x08012428

0800c10c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d106      	bne.n	800c128 <tcp_rexmit_fast+0x1c>
 800c11a:	4b2a      	ldr	r3, [pc, #168]	; (800c1c4 <tcp_rexmit_fast+0xb8>)
 800c11c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c120:	4929      	ldr	r1, [pc, #164]	; (800c1c8 <tcp_rexmit_fast+0xbc>)
 800c122:	482a      	ldr	r0, [pc, #168]	; (800c1cc <tcp_rexmit_fast+0xc0>)
 800c124:	f003 fce4 	bl	800faf0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d045      	beq.n	800c1bc <tcp_rexmit_fast+0xb0>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	8b5b      	ldrh	r3, [r3, #26]
 800c134:	f003 0304 	and.w	r3, r3, #4
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d13f      	bne.n	800c1bc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f7ff ff79 	bl	800c034 <tcp_rexmit>
 800c142:	4603      	mov	r3, r0
 800c144:	2b00      	cmp	r3, #0
 800c146:	d139      	bne.n	800c1bc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c154:	4293      	cmp	r3, r2
 800c156:	bf28      	it	cs
 800c158:	4613      	movcs	r3, r2
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	da00      	bge.n	800c162 <tcp_rexmit_fast+0x56>
 800c160:	3301      	adds	r3, #1
 800c162:	105b      	asrs	r3, r3, #1
 800c164:	b29a      	uxth	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c172:	461a      	mov	r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c178:	005b      	lsls	r3, r3, #1
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d206      	bcs.n	800c18c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c182:	005b      	lsls	r3, r3, #1
 800c184:	b29a      	uxth	r2, r3
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c196:	4619      	mov	r1, r3
 800c198:	0049      	lsls	r1, r1, #1
 800c19a:	440b      	add	r3, r1
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	4413      	add	r3, r2
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	8b5b      	ldrh	r3, [r3, #26]
 800c1ac:	f043 0304 	orr.w	r3, r3, #4
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c1bc:	bf00      	nop
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	080123d4 	.word	0x080123d4
 800c1c8:	08012a8c 	.word	0x08012a8c
 800c1cc:	08012428 	.word	0x08012428

0800c1d0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	607b      	str	r3, [r7, #4]
 800c1da:	460b      	mov	r3, r1
 800c1dc:	817b      	strh	r3, [r7, #10]
 800c1de:	4613      	mov	r3, r2
 800c1e0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c1e2:	897a      	ldrh	r2, [r7, #10]
 800c1e4:	893b      	ldrh	r3, [r7, #8]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	3314      	adds	r3, #20
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	2022      	movs	r0, #34	; 0x22
 800c1f6:	f7fa fc09 	bl	8006a0c <pbuf_alloc>
 800c1fa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d04d      	beq.n	800c29e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c202:	897b      	ldrh	r3, [r7, #10]
 800c204:	3313      	adds	r3, #19
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	8952      	ldrh	r2, [r2, #10]
 800c20a:	4293      	cmp	r3, r2
 800c20c:	db06      	blt.n	800c21c <tcp_output_alloc_header_common+0x4c>
 800c20e:	4b26      	ldr	r3, [pc, #152]	; (800c2a8 <tcp_output_alloc_header_common+0xd8>)
 800c210:	f240 7223 	movw	r2, #1827	; 0x723
 800c214:	4925      	ldr	r1, [pc, #148]	; (800c2ac <tcp_output_alloc_header_common+0xdc>)
 800c216:	4826      	ldr	r0, [pc, #152]	; (800c2b0 <tcp_output_alloc_header_common+0xe0>)
 800c218:	f003 fc6a 	bl	800faf0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c222:	8c3b      	ldrh	r3, [r7, #32]
 800c224:	4618      	mov	r0, r3
 800c226:	f7f9 fb77 	bl	8005918 <lwip_htons>
 800c22a:	4603      	mov	r3, r0
 800c22c:	461a      	mov	r2, r3
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c234:	4618      	mov	r0, r3
 800c236:	f7f9 fb6f 	bl	8005918 <lwip_htons>
 800c23a:	4603      	mov	r3, r0
 800c23c:	461a      	mov	r2, r3
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f7f9 fb7a 	bl	8005942 <lwip_htonl>
 800c24e:	4602      	mov	r2, r0
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c254:	897b      	ldrh	r3, [r7, #10]
 800c256:	089b      	lsrs	r3, r3, #2
 800c258:	b29b      	uxth	r3, r3
 800c25a:	3305      	adds	r3, #5
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	031b      	lsls	r3, r3, #12
 800c260:	b29a      	uxth	r2, r3
 800c262:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c266:	b29b      	uxth	r3, r3
 800c268:	4313      	orrs	r3, r2
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7f9 fb53 	bl	8005918 <lwip_htons>
 800c272:	4603      	mov	r3, r0
 800c274:	461a      	mov	r2, r3
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c27a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7f9 fb4b 	bl	8005918 <lwip_htons>
 800c282:	4603      	mov	r3, r0
 800c284:	461a      	mov	r2, r3
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	2200      	movs	r2, #0
 800c28e:	741a      	strb	r2, [r3, #16]
 800c290:	2200      	movs	r2, #0
 800c292:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	2200      	movs	r2, #0
 800c298:	749a      	strb	r2, [r3, #18]
 800c29a:	2200      	movs	r2, #0
 800c29c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c29e:	697b      	ldr	r3, [r7, #20]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3718      	adds	r7, #24
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	080123d4 	.word	0x080123d4
 800c2ac:	08012aac 	.word	0x08012aac
 800c2b0:	08012428 	.word	0x08012428

0800c2b4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c2b4:	b5b0      	push	{r4, r5, r7, lr}
 800c2b6:	b08a      	sub	sp, #40	; 0x28
 800c2b8:	af04      	add	r7, sp, #16
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	607b      	str	r3, [r7, #4]
 800c2be:	460b      	mov	r3, r1
 800c2c0:	817b      	strh	r3, [r7, #10]
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d106      	bne.n	800c2da <tcp_output_alloc_header+0x26>
 800c2cc:	4b15      	ldr	r3, [pc, #84]	; (800c324 <tcp_output_alloc_header+0x70>)
 800c2ce:	f240 7242 	movw	r2, #1858	; 0x742
 800c2d2:	4915      	ldr	r1, [pc, #84]	; (800c328 <tcp_output_alloc_header+0x74>)
 800c2d4:	4815      	ldr	r0, [pc, #84]	; (800c32c <tcp_output_alloc_header+0x78>)
 800c2d6:	f003 fc0b 	bl	800faf0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	8adb      	ldrh	r3, [r3, #22]
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	8b12      	ldrh	r2, [r2, #24]
 800c2e6:	68f9      	ldr	r1, [r7, #12]
 800c2e8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c2ea:	893d      	ldrh	r5, [r7, #8]
 800c2ec:	897c      	ldrh	r4, [r7, #10]
 800c2ee:	9103      	str	r1, [sp, #12]
 800c2f0:	2110      	movs	r1, #16
 800c2f2:	9102      	str	r1, [sp, #8]
 800c2f4:	9201      	str	r2, [sp, #4]
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	462a      	mov	r2, r5
 800c2fc:	4621      	mov	r1, r4
 800c2fe:	f7ff ff67 	bl	800c1d0 <tcp_output_alloc_header_common>
 800c302:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d006      	beq.n	800c318 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c30e:	68fa      	ldr	r2, [r7, #12]
 800c310:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c312:	441a      	add	r2, r3
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c318:	697b      	ldr	r3, [r7, #20]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3718      	adds	r7, #24
 800c31e:	46bd      	mov	sp, r7
 800c320:	bdb0      	pop	{r4, r5, r7, pc}
 800c322:	bf00      	nop
 800c324:	080123d4 	.word	0x080123d4
 800c328:	08012adc 	.word	0x08012adc
 800c32c:	08012428 	.word	0x08012428

0800c330 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b088      	sub	sp, #32
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	4611      	mov	r1, r2
 800c33c:	461a      	mov	r2, r3
 800c33e:	460b      	mov	r3, r1
 800c340:	71fb      	strb	r3, [r7, #7]
 800c342:	4613      	mov	r3, r2
 800c344:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c346:	2300      	movs	r3, #0
 800c348:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d106      	bne.n	800c35e <tcp_output_fill_options+0x2e>
 800c350:	4b13      	ldr	r3, [pc, #76]	; (800c3a0 <tcp_output_fill_options+0x70>)
 800c352:	f240 7256 	movw	r2, #1878	; 0x756
 800c356:	4913      	ldr	r1, [pc, #76]	; (800c3a4 <tcp_output_fill_options+0x74>)
 800c358:	4813      	ldr	r0, [pc, #76]	; (800c3a8 <tcp_output_fill_options+0x78>)
 800c35a:	f003 fbc9 	bl	800faf0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	3314      	adds	r3, #20
 800c368:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	f103 0214 	add.w	r2, r3, #20
 800c370:	8bfb      	ldrh	r3, [r7, #30]
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	4619      	mov	r1, r3
 800c376:	79fb      	ldrb	r3, [r7, #7]
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	f003 0304 	and.w	r3, r3, #4
 800c37e:	440b      	add	r3, r1
 800c380:	4413      	add	r3, r2
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	429a      	cmp	r2, r3
 800c386:	d006      	beq.n	800c396 <tcp_output_fill_options+0x66>
 800c388:	4b05      	ldr	r3, [pc, #20]	; (800c3a0 <tcp_output_fill_options+0x70>)
 800c38a:	f240 7275 	movw	r2, #1909	; 0x775
 800c38e:	4907      	ldr	r1, [pc, #28]	; (800c3ac <tcp_output_fill_options+0x7c>)
 800c390:	4805      	ldr	r0, [pc, #20]	; (800c3a8 <tcp_output_fill_options+0x78>)
 800c392:	f003 fbad 	bl	800faf0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c396:	bf00      	nop
 800c398:	3720      	adds	r7, #32
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	080123d4 	.word	0x080123d4
 800c3a4:	08012b04 	.word	0x08012b04
 800c3a8:	08012428 	.word	0x08012428
 800c3ac:	080129fc 	.word	0x080129fc

0800c3b0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b08a      	sub	sp, #40	; 0x28
 800c3b4:	af04      	add	r7, sp, #16
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
 800c3bc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d106      	bne.n	800c3d2 <tcp_output_control_segment+0x22>
 800c3c4:	4b1c      	ldr	r3, [pc, #112]	; (800c438 <tcp_output_control_segment+0x88>)
 800c3c6:	f240 7287 	movw	r2, #1927	; 0x787
 800c3ca:	491c      	ldr	r1, [pc, #112]	; (800c43c <tcp_output_control_segment+0x8c>)
 800c3cc:	481c      	ldr	r0, [pc, #112]	; (800c440 <tcp_output_control_segment+0x90>)
 800c3ce:	f003 fb8f 	bl	800faf0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c3d2:	683a      	ldr	r2, [r7, #0]
 800c3d4:	6879      	ldr	r1, [r7, #4]
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f7fe ff40 	bl	800b25c <tcp_route>
 800c3dc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d102      	bne.n	800c3ea <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c3e4:	23fc      	movs	r3, #252	; 0xfc
 800c3e6:	75fb      	strb	r3, [r7, #23]
 800c3e8:	e01c      	b.n	800c424 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d006      	beq.n	800c3fe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	7adb      	ldrb	r3, [r3, #11]
 800c3f4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	7a9b      	ldrb	r3, [r3, #10]
 800c3fa:	757b      	strb	r3, [r7, #21]
 800c3fc:	e003      	b.n	800c406 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c3fe:	23ff      	movs	r3, #255	; 0xff
 800c400:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c402:	2300      	movs	r3, #0
 800c404:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c406:	7dba      	ldrb	r2, [r7, #22]
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	9302      	str	r3, [sp, #8]
 800c40c:	2306      	movs	r3, #6
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	7d7b      	ldrb	r3, [r7, #21]
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	4613      	mov	r3, r2
 800c416:	683a      	ldr	r2, [r7, #0]
 800c418:	6879      	ldr	r1, [r7, #4]
 800c41a:	68b8      	ldr	r0, [r7, #8]
 800c41c:	f002 fa60 	bl	800e8e0 <ip4_output_if>
 800c420:	4603      	mov	r3, r0
 800c422:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c424:	68b8      	ldr	r0, [r7, #8]
 800c426:	f7fa fdd5 	bl	8006fd4 <pbuf_free>
  return err;
 800c42a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3718      	adds	r7, #24
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	080123d4 	.word	0x080123d4
 800c43c:	08012b2c 	.word	0x08012b2c
 800c440:	08012428 	.word	0x08012428

0800c444 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c444:	b590      	push	{r4, r7, lr}
 800c446:	b08b      	sub	sp, #44	; 0x2c
 800c448:	af04      	add	r7, sp, #16
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]
 800c450:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d106      	bne.n	800c466 <tcp_rst+0x22>
 800c458:	4b1f      	ldr	r3, [pc, #124]	; (800c4d8 <tcp_rst+0x94>)
 800c45a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c45e:	491f      	ldr	r1, [pc, #124]	; (800c4dc <tcp_rst+0x98>)
 800c460:	481f      	ldr	r0, [pc, #124]	; (800c4e0 <tcp_rst+0x9c>)
 800c462:	f003 fb45 	bl	800faf0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d106      	bne.n	800c47a <tcp_rst+0x36>
 800c46c:	4b1a      	ldr	r3, [pc, #104]	; (800c4d8 <tcp_rst+0x94>)
 800c46e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c472:	491c      	ldr	r1, [pc, #112]	; (800c4e4 <tcp_rst+0xa0>)
 800c474:	481a      	ldr	r0, [pc, #104]	; (800c4e0 <tcp_rst+0x9c>)
 800c476:	f003 fb3b 	bl	800faf0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c47a:	2300      	movs	r3, #0
 800c47c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c47e:	f246 0308 	movw	r3, #24584	; 0x6008
 800c482:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c484:	7dfb      	ldrb	r3, [r7, #23]
 800c486:	b29c      	uxth	r4, r3
 800c488:	68b8      	ldr	r0, [r7, #8]
 800c48a:	f7f9 fa5a 	bl	8005942 <lwip_htonl>
 800c48e:	4602      	mov	r2, r0
 800c490:	8abb      	ldrh	r3, [r7, #20]
 800c492:	9303      	str	r3, [sp, #12]
 800c494:	2314      	movs	r3, #20
 800c496:	9302      	str	r3, [sp, #8]
 800c498:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c49a:	9301      	str	r3, [sp, #4]
 800c49c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c49e:	9300      	str	r3, [sp, #0]
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	4621      	mov	r1, r4
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f7ff fe92 	bl	800c1d0 <tcp_output_alloc_header_common>
 800c4ac:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00c      	beq.n	800c4ce <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c4b4:	7dfb      	ldrb	r3, [r7, #23]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	6939      	ldr	r1, [r7, #16]
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f7ff ff38 	bl	800c330 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c2:	683a      	ldr	r2, [r7, #0]
 800c4c4:	6939      	ldr	r1, [r7, #16]
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f7ff ff72 	bl	800c3b0 <tcp_output_control_segment>
 800c4cc:	e000      	b.n	800c4d0 <tcp_rst+0x8c>
    return;
 800c4ce:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c4d0:	371c      	adds	r7, #28
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd90      	pop	{r4, r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	080123d4 	.word	0x080123d4
 800c4dc:	08012b58 	.word	0x08012b58
 800c4e0:	08012428 	.word	0x08012428
 800c4e4:	08012b74 	.word	0x08012b74

0800c4e8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c4e8:	b590      	push	{r4, r7, lr}
 800c4ea:	b087      	sub	sp, #28
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d106      	bne.n	800c50c <tcp_send_empty_ack+0x24>
 800c4fe:	4b28      	ldr	r3, [pc, #160]	; (800c5a0 <tcp_send_empty_ack+0xb8>)
 800c500:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c504:	4927      	ldr	r1, [pc, #156]	; (800c5a4 <tcp_send_empty_ack+0xbc>)
 800c506:	4828      	ldr	r0, [pc, #160]	; (800c5a8 <tcp_send_empty_ack+0xc0>)
 800c508:	f003 faf2 	bl	800faf0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c50c:	7dfb      	ldrb	r3, [r7, #23]
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	b2db      	uxtb	r3, r3
 800c512:	f003 0304 	and.w	r3, r3, #4
 800c516:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c518:	7d7b      	ldrb	r3, [r7, #21]
 800c51a:	b29c      	uxth	r4, r3
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c520:	4618      	mov	r0, r3
 800c522:	f7f9 fa0e 	bl	8005942 <lwip_htonl>
 800c526:	4603      	mov	r3, r0
 800c528:	2200      	movs	r2, #0
 800c52a:	4621      	mov	r1, r4
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7ff fec1 	bl	800c2b4 <tcp_output_alloc_header>
 800c532:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d109      	bne.n	800c54e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	8b5b      	ldrh	r3, [r3, #26]
 800c53e:	f043 0303 	orr.w	r3, r3, #3
 800c542:	b29a      	uxth	r2, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c548:	f06f 0301 	mvn.w	r3, #1
 800c54c:	e023      	b.n	800c596 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c54e:	7dbb      	ldrb	r3, [r7, #22]
 800c550:	7dfa      	ldrb	r2, [r7, #23]
 800c552:	6939      	ldr	r1, [r7, #16]
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f7ff feeb 	bl	800c330 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	3304      	adds	r3, #4
 800c560:	6939      	ldr	r1, [r7, #16]
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7ff ff24 	bl	800c3b0 <tcp_output_control_segment>
 800c568:	4603      	mov	r3, r0
 800c56a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c56c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d007      	beq.n	800c584 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	8b5b      	ldrh	r3, [r3, #26]
 800c578:	f043 0303 	orr.w	r3, r3, #3
 800c57c:	b29a      	uxth	r2, r3
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	835a      	strh	r2, [r3, #26]
 800c582:	e006      	b.n	800c592 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	8b5b      	ldrh	r3, [r3, #26]
 800c588:	f023 0303 	bic.w	r3, r3, #3
 800c58c:	b29a      	uxth	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c592:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c596:	4618      	mov	r0, r3
 800c598:	371c      	adds	r7, #28
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd90      	pop	{r4, r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	080123d4 	.word	0x080123d4
 800c5a4:	08012b90 	.word	0x08012b90
 800c5a8:	08012428 	.word	0x08012428

0800c5ac <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c5ac:	b590      	push	{r4, r7, lr}
 800c5ae:	b087      	sub	sp, #28
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d106      	bne.n	800c5cc <tcp_keepalive+0x20>
 800c5be:	4b18      	ldr	r3, [pc, #96]	; (800c620 <tcp_keepalive+0x74>)
 800c5c0:	f640 0224 	movw	r2, #2084	; 0x824
 800c5c4:	4917      	ldr	r1, [pc, #92]	; (800c624 <tcp_keepalive+0x78>)
 800c5c6:	4818      	ldr	r0, [pc, #96]	; (800c628 <tcp_keepalive+0x7c>)
 800c5c8:	f003 fa92 	bl	800faf0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c5cc:	7dfb      	ldrb	r3, [r7, #23]
 800c5ce:	b29c      	uxth	r4, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5d4:	3b01      	subs	r3, #1
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7f9 f9b3 	bl	8005942 <lwip_htonl>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2200      	movs	r2, #0
 800c5e0:	4621      	mov	r1, r4
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f7ff fe66 	bl	800c2b4 <tcp_output_alloc_header>
 800c5e8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d102      	bne.n	800c5f6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c5f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5f4:	e010      	b.n	800c618 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c5f6:	7dfb      	ldrb	r3, [r7, #23]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	6939      	ldr	r1, [r7, #16]
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f7ff fe97 	bl	800c330 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	3304      	adds	r3, #4
 800c608:	6939      	ldr	r1, [r7, #16]
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f7ff fed0 	bl	800c3b0 <tcp_output_control_segment>
 800c610:	4603      	mov	r3, r0
 800c612:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c614:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c618:	4618      	mov	r0, r3
 800c61a:	371c      	adds	r7, #28
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd90      	pop	{r4, r7, pc}
 800c620:	080123d4 	.word	0x080123d4
 800c624:	08012bb0 	.word	0x08012bb0
 800c628:	08012428 	.word	0x08012428

0800c62c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c62c:	b590      	push	{r4, r7, lr}
 800c62e:	b08b      	sub	sp, #44	; 0x2c
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c634:	2300      	movs	r3, #0
 800c636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d106      	bne.n	800c64e <tcp_zero_window_probe+0x22>
 800c640:	4b4c      	ldr	r3, [pc, #304]	; (800c774 <tcp_zero_window_probe+0x148>)
 800c642:	f640 024f 	movw	r2, #2127	; 0x84f
 800c646:	494c      	ldr	r1, [pc, #304]	; (800c778 <tcp_zero_window_probe+0x14c>)
 800c648:	484c      	ldr	r0, [pc, #304]	; (800c77c <tcp_zero_window_probe+0x150>)
 800c64a:	f003 fa51 	bl	800faf0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c652:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c654:	6a3b      	ldr	r3, [r7, #32]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d101      	bne.n	800c65e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	e086      	b.n	800c76c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c664:	2bff      	cmp	r3, #255	; 0xff
 800c666:	d007      	beq.n	800c678 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c66e:	3301      	adds	r3, #1
 800c670:	b2da      	uxtb	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	899b      	ldrh	r3, [r3, #12]
 800c67e:	b29b      	uxth	r3, r3
 800c680:	4618      	mov	r0, r3
 800c682:	f7f9 f949 	bl	8005918 <lwip_htons>
 800c686:	4603      	mov	r3, r0
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	f003 0301 	and.w	r3, r3, #1
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d005      	beq.n	800c69e <tcp_zero_window_probe+0x72>
 800c692:	6a3b      	ldr	r3, [r7, #32]
 800c694:	891b      	ldrh	r3, [r3, #8]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d101      	bne.n	800c69e <tcp_zero_window_probe+0x72>
 800c69a:	2301      	movs	r3, #1
 800c69c:	e000      	b.n	800c6a0 <tcp_zero_window_probe+0x74>
 800c69e:	2300      	movs	r3, #0
 800c6a0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c6a2:	7ffb      	ldrb	r3, [r7, #31]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	bf0c      	ite	eq
 800c6a8:	2301      	moveq	r3, #1
 800c6aa:	2300      	movne	r3, #0
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6b4:	b299      	uxth	r1, r3
 800c6b6:	6a3b      	ldr	r3, [r7, #32]
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	8bba      	ldrh	r2, [r7, #28]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f7ff fdf8 	bl	800c2b4 <tcp_output_alloc_header>
 800c6c4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d102      	bne.n	800c6d2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c6cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6d0:	e04c      	b.n	800c76c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c6d2:	69bb      	ldr	r3, [r7, #24]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c6d8:	7ffb      	ldrb	r3, [r7, #31]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d011      	beq.n	800c702 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	899b      	ldrh	r3, [r3, #12]
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	b21b      	sxth	r3, r3
 800c6e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c6ea:	b21c      	sxth	r4, r3
 800c6ec:	2011      	movs	r0, #17
 800c6ee:	f7f9 f913 	bl	8005918 <lwip_htons>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	b21b      	sxth	r3, r3
 800c6f6:	4323      	orrs	r3, r4
 800c6f8:	b21b      	sxth	r3, r3
 800c6fa:	b29a      	uxth	r2, r3
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	819a      	strh	r2, [r3, #12]
 800c700:	e010      	b.n	800c724 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	3314      	adds	r3, #20
 800c708:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c70a:	6a3b      	ldr	r3, [r7, #32]
 800c70c:	6858      	ldr	r0, [r3, #4]
 800c70e:	6a3b      	ldr	r3, [r7, #32]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	891a      	ldrh	r2, [r3, #8]
 800c714:	6a3b      	ldr	r3, [r7, #32]
 800c716:	891b      	ldrh	r3, [r3, #8]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	2201      	movs	r2, #1
 800c71e:	6939      	ldr	r1, [r7, #16]
 800c720:	f7fa fe52 	bl	80073c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c724:	6a3b      	ldr	r3, [r7, #32]
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7f9 f909 	bl	8005942 <lwip_htonl>
 800c730:	4603      	mov	r3, r0
 800c732:	3301      	adds	r3, #1
 800c734:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	2b00      	cmp	r3, #0
 800c740:	da02      	bge.n	800c748 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c74c:	2200      	movs	r2, #0
 800c74e:	69b9      	ldr	r1, [r7, #24]
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7ff fded 	bl	800c330 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	3304      	adds	r3, #4
 800c75c:	69b9      	ldr	r1, [r7, #24]
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f7ff fe26 	bl	800c3b0 <tcp_output_control_segment>
 800c764:	4603      	mov	r3, r0
 800c766:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c768:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	372c      	adds	r7, #44	; 0x2c
 800c770:	46bd      	mov	sp, r7
 800c772:	bd90      	pop	{r4, r7, pc}
 800c774:	080123d4 	.word	0x080123d4
 800c778:	08012bcc 	.word	0x08012bcc
 800c77c:	08012428 	.word	0x08012428

0800c780 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c788:	f7fa ff0c 	bl	80075a4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c78c:	4b0a      	ldr	r3, [pc, #40]	; (800c7b8 <tcpip_tcp_timer+0x38>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d103      	bne.n	800c79c <tcpip_tcp_timer+0x1c>
 800c794:	4b09      	ldr	r3, [pc, #36]	; (800c7bc <tcpip_tcp_timer+0x3c>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d005      	beq.n	800c7a8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c79c:	2200      	movs	r2, #0
 800c79e:	4908      	ldr	r1, [pc, #32]	; (800c7c0 <tcpip_tcp_timer+0x40>)
 800c7a0:	20fa      	movs	r0, #250	; 0xfa
 800c7a2:	f000 f8f3 	bl	800c98c <sys_timeout>
 800c7a6:	e003      	b.n	800c7b0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c7a8:	4b06      	ldr	r3, [pc, #24]	; (800c7c4 <tcpip_tcp_timer+0x44>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	601a      	str	r2, [r3, #0]
  }
}
 800c7ae:	bf00      	nop
 800c7b0:	bf00      	nop
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	200087bc 	.word	0x200087bc
 800c7bc:	200087c0 	.word	0x200087c0
 800c7c0:	0800c781 	.word	0x0800c781
 800c7c4:	20008808 	.word	0x20008808

0800c7c8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c7cc:	4b0a      	ldr	r3, [pc, #40]	; (800c7f8 <tcp_timer_needed+0x30>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10f      	bne.n	800c7f4 <tcp_timer_needed+0x2c>
 800c7d4:	4b09      	ldr	r3, [pc, #36]	; (800c7fc <tcp_timer_needed+0x34>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d103      	bne.n	800c7e4 <tcp_timer_needed+0x1c>
 800c7dc:	4b08      	ldr	r3, [pc, #32]	; (800c800 <tcp_timer_needed+0x38>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d007      	beq.n	800c7f4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c7e4:	4b04      	ldr	r3, [pc, #16]	; (800c7f8 <tcp_timer_needed+0x30>)
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	4905      	ldr	r1, [pc, #20]	; (800c804 <tcp_timer_needed+0x3c>)
 800c7ee:	20fa      	movs	r0, #250	; 0xfa
 800c7f0:	f000 f8cc 	bl	800c98c <sys_timeout>
  }
}
 800c7f4:	bf00      	nop
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	20008808 	.word	0x20008808
 800c7fc:	200087bc 	.word	0x200087bc
 800c800:	200087c0 	.word	0x200087c0
 800c804:	0800c781 	.word	0x0800c781

0800c808 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b086      	sub	sp, #24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c814:	2006      	movs	r0, #6
 800c816:	f7f9 fcf7 	bl	8006208 <memp_malloc>
 800c81a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d109      	bne.n	800c836 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d151      	bne.n	800c8cc <sys_timeout_abs+0xc4>
 800c828:	4b2a      	ldr	r3, [pc, #168]	; (800c8d4 <sys_timeout_abs+0xcc>)
 800c82a:	22be      	movs	r2, #190	; 0xbe
 800c82c:	492a      	ldr	r1, [pc, #168]	; (800c8d8 <sys_timeout_abs+0xd0>)
 800c82e:	482b      	ldr	r0, [pc, #172]	; (800c8dc <sys_timeout_abs+0xd4>)
 800c830:	f003 f95e 	bl	800faf0 <iprintf>
    return;
 800c834:	e04a      	b.n	800c8cc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	2200      	movs	r2, #0
 800c83a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	68ba      	ldr	r2, [r7, #8]
 800c840:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	68fa      	ldr	r2, [r7, #12]
 800c84c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c84e:	4b24      	ldr	r3, [pc, #144]	; (800c8e0 <sys_timeout_abs+0xd8>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d103      	bne.n	800c85e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c856:	4a22      	ldr	r2, [pc, #136]	; (800c8e0 <sys_timeout_abs+0xd8>)
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	6013      	str	r3, [r2, #0]
    return;
 800c85c:	e037      	b.n	800c8ce <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	685a      	ldr	r2, [r3, #4]
 800c862:	4b1f      	ldr	r3, [pc, #124]	; (800c8e0 <sys_timeout_abs+0xd8>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	1ad3      	subs	r3, r2, r3
 800c86a:	0fdb      	lsrs	r3, r3, #31
 800c86c:	f003 0301 	and.w	r3, r3, #1
 800c870:	b2db      	uxtb	r3, r3
 800c872:	2b00      	cmp	r3, #0
 800c874:	d007      	beq.n	800c886 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c876:	4b1a      	ldr	r3, [pc, #104]	; (800c8e0 <sys_timeout_abs+0xd8>)
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c87e:	4a18      	ldr	r2, [pc, #96]	; (800c8e0 <sys_timeout_abs+0xd8>)
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	6013      	str	r3, [r2, #0]
 800c884:	e023      	b.n	800c8ce <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c886:	4b16      	ldr	r3, [pc, #88]	; (800c8e0 <sys_timeout_abs+0xd8>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	617b      	str	r3, [r7, #20]
 800c88c:	e01a      	b.n	800c8c4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d00b      	beq.n	800c8ae <sys_timeout_abs+0xa6>
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	685a      	ldr	r2, [r3, #4]
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	0fdb      	lsrs	r3, r3, #31
 800c8a4:	f003 0301 	and.w	r3, r3, #1
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d007      	beq.n	800c8be <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	693a      	ldr	r2, [r7, #16]
 800c8ba:	601a      	str	r2, [r3, #0]
        break;
 800c8bc:	e007      	b.n	800c8ce <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	617b      	str	r3, [r7, #20]
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1e1      	bne.n	800c88e <sys_timeout_abs+0x86>
 800c8ca:	e000      	b.n	800c8ce <sys_timeout_abs+0xc6>
    return;
 800c8cc:	bf00      	nop
      }
    }
  }
}
 800c8ce:	3718      	adds	r7, #24
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	08012bf0 	.word	0x08012bf0
 800c8d8:	08012c24 	.word	0x08012c24
 800c8dc:	08012c64 	.word	0x08012c64
 800c8e0:	20008800 	.word	0x20008800

0800c8e4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	4798      	blx	r3

  now = sys_now();
 800c8f6:	f7f8 fe03 	bl	8005500 <sys_now>
 800c8fa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	4b0f      	ldr	r3, [pc, #60]	; (800c940 <lwip_cyclic_timer+0x5c>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4413      	add	r3, r2
 800c906:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	1ad3      	subs	r3, r2, r3
 800c90e:	0fdb      	lsrs	r3, r3, #31
 800c910:	f003 0301 	and.w	r3, r3, #1
 800c914:	b2db      	uxtb	r3, r3
 800c916:	2b00      	cmp	r3, #0
 800c918:	d009      	beq.n	800c92e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	4413      	add	r3, r2
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	4907      	ldr	r1, [pc, #28]	; (800c944 <lwip_cyclic_timer+0x60>)
 800c926:	4618      	mov	r0, r3
 800c928:	f7ff ff6e 	bl	800c808 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c92c:	e004      	b.n	800c938 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	4904      	ldr	r1, [pc, #16]	; (800c944 <lwip_cyclic_timer+0x60>)
 800c932:	68f8      	ldr	r0, [r7, #12]
 800c934:	f7ff ff68 	bl	800c808 <sys_timeout_abs>
}
 800c938:	bf00      	nop
 800c93a:	3718      	adds	r7, #24
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	20008804 	.word	0x20008804
 800c944:	0800c8e5 	.word	0x0800c8e5

0800c948 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c94e:	2301      	movs	r3, #1
 800c950:	607b      	str	r3, [r7, #4]
 800c952:	e00e      	b.n	800c972 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c954:	4a0b      	ldr	r2, [pc, #44]	; (800c984 <sys_timeouts_init+0x3c>)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	00db      	lsls	r3, r3, #3
 800c960:	4a08      	ldr	r2, [pc, #32]	; (800c984 <sys_timeouts_init+0x3c>)
 800c962:	4413      	add	r3, r2
 800c964:	461a      	mov	r2, r3
 800c966:	4908      	ldr	r1, [pc, #32]	; (800c988 <sys_timeouts_init+0x40>)
 800c968:	f000 f810 	bl	800c98c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	3301      	adds	r3, #1
 800c970:	607b      	str	r3, [r7, #4]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2b02      	cmp	r3, #2
 800c976:	d9ed      	bls.n	800c954 <sys_timeouts_init+0xc>
  }
}
 800c978:	bf00      	nop
 800c97a:	bf00      	nop
 800c97c:	3708      	adds	r7, #8
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	080137dc 	.word	0x080137dc
 800c988:	0800c8e5 	.word	0x0800c8e5

0800c98c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b086      	sub	sp, #24
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c99e:	d306      	bcc.n	800c9ae <sys_timeout+0x22>
 800c9a0:	4b0a      	ldr	r3, [pc, #40]	; (800c9cc <sys_timeout+0x40>)
 800c9a2:	f240 1229 	movw	r2, #297	; 0x129
 800c9a6:	490a      	ldr	r1, [pc, #40]	; (800c9d0 <sys_timeout+0x44>)
 800c9a8:	480a      	ldr	r0, [pc, #40]	; (800c9d4 <sys_timeout+0x48>)
 800c9aa:	f003 f8a1 	bl	800faf0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c9ae:	f7f8 fda7 	bl	8005500 <sys_now>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	4413      	add	r3, r2
 800c9b8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	68b9      	ldr	r1, [r7, #8]
 800c9be:	6978      	ldr	r0, [r7, #20]
 800c9c0:	f7ff ff22 	bl	800c808 <sys_timeout_abs>
#endif
}
 800c9c4:	bf00      	nop
 800c9c6:	3718      	adds	r7, #24
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	08012bf0 	.word	0x08012bf0
 800c9d0:	08012c8c 	.word	0x08012c8c
 800c9d4:	08012c64 	.word	0x08012c64

0800c9d8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c9de:	f7f8 fd8f 	bl	8005500 <sys_now>
 800c9e2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c9e4:	4b1a      	ldr	r3, [pc, #104]	; (800ca50 <sys_check_timeouts+0x78>)
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d001      	beq.n	800c9f2 <sys_check_timeouts+0x1a>
 800c9ee:	f7f9 ffb7 	bl	8006960 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c9f2:	4b18      	ldr	r3, [pc, #96]	; (800ca54 <sys_check_timeouts+0x7c>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d022      	beq.n	800ca44 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	1ad3      	subs	r3, r2, r3
 800ca06:	0fdb      	lsrs	r3, r3, #31
 800ca08:	f003 0301 	and.w	r3, r3, #1
 800ca0c:	b2db      	uxtb	r3, r3
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d11a      	bne.n	800ca48 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a0f      	ldr	r2, [pc, #60]	; (800ca54 <sys_check_timeouts+0x7c>)
 800ca18:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	4a0b      	ldr	r2, [pc, #44]	; (800ca58 <sys_check_timeouts+0x80>)
 800ca2c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ca2e:	68b9      	ldr	r1, [r7, #8]
 800ca30:	2006      	movs	r0, #6
 800ca32:	f7f9 fc59 	bl	80062e8 <memp_free>
    if (handler != NULL) {
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d0d3      	beq.n	800c9e4 <sys_check_timeouts+0xc>
      handler(arg);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6838      	ldr	r0, [r7, #0]
 800ca40:	4798      	blx	r3
  do {
 800ca42:	e7cf      	b.n	800c9e4 <sys_check_timeouts+0xc>
      return;
 800ca44:	bf00      	nop
 800ca46:	e000      	b.n	800ca4a <sys_check_timeouts+0x72>
      return;
 800ca48:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	200087ad 	.word	0x200087ad
 800ca54:	20008800 	.word	0x20008800
 800ca58:	20008804 	.word	0x20008804

0800ca5c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ca60:	f003 f8d4 	bl	800fc0c <rand>
 800ca64:	4603      	mov	r3, r0
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ca72:	b29a      	uxth	r2, r3
 800ca74:	4b01      	ldr	r3, [pc, #4]	; (800ca7c <udp_init+0x20>)
 800ca76:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ca78:	bf00      	nop
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	20000028 	.word	0x20000028

0800ca80 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ca86:	2300      	movs	r3, #0
 800ca88:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ca8a:	4b17      	ldr	r3, [pc, #92]	; (800cae8 <udp_new_port+0x68>)
 800ca8c:	881b      	ldrh	r3, [r3, #0]
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	b291      	uxth	r1, r2
 800ca92:	4a15      	ldr	r2, [pc, #84]	; (800cae8 <udp_new_port+0x68>)
 800ca94:	8011      	strh	r1, [r2, #0]
 800ca96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d103      	bne.n	800caa6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ca9e:	4b12      	ldr	r3, [pc, #72]	; (800cae8 <udp_new_port+0x68>)
 800caa0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800caa4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800caa6:	4b11      	ldr	r3, [pc, #68]	; (800caec <udp_new_port+0x6c>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	603b      	str	r3, [r7, #0]
 800caac:	e011      	b.n	800cad2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	8a5a      	ldrh	r2, [r3, #18]
 800cab2:	4b0d      	ldr	r3, [pc, #52]	; (800cae8 <udp_new_port+0x68>)
 800cab4:	881b      	ldrh	r3, [r3, #0]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d108      	bne.n	800cacc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800caba:	88fb      	ldrh	r3, [r7, #6]
 800cabc:	3301      	adds	r3, #1
 800cabe:	80fb      	strh	r3, [r7, #6]
 800cac0:	88fb      	ldrh	r3, [r7, #6]
 800cac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cac6:	d3e0      	bcc.n	800ca8a <udp_new_port+0xa>
        return 0;
 800cac8:	2300      	movs	r3, #0
 800caca:	e007      	b.n	800cadc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	603b      	str	r3, [r7, #0]
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d1ea      	bne.n	800caae <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800cad8:	4b03      	ldr	r3, [pc, #12]	; (800cae8 <udp_new_port+0x68>)
 800cada:	881b      	ldrh	r3, [r3, #0]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	370c      	adds	r7, #12
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr
 800cae8:	20000028 	.word	0x20000028
 800caec:	2000880c 	.word	0x2000880c

0800caf0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	4613      	mov	r3, r2
 800cafc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d105      	bne.n	800cb10 <udp_input_local_match+0x20>
 800cb04:	4b27      	ldr	r3, [pc, #156]	; (800cba4 <udp_input_local_match+0xb4>)
 800cb06:	2287      	movs	r2, #135	; 0x87
 800cb08:	4927      	ldr	r1, [pc, #156]	; (800cba8 <udp_input_local_match+0xb8>)
 800cb0a:	4828      	ldr	r0, [pc, #160]	; (800cbac <udp_input_local_match+0xbc>)
 800cb0c:	f002 fff0 	bl	800faf0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d105      	bne.n	800cb22 <udp_input_local_match+0x32>
 800cb16:	4b23      	ldr	r3, [pc, #140]	; (800cba4 <udp_input_local_match+0xb4>)
 800cb18:	2288      	movs	r2, #136	; 0x88
 800cb1a:	4925      	ldr	r1, [pc, #148]	; (800cbb0 <udp_input_local_match+0xc0>)
 800cb1c:	4823      	ldr	r0, [pc, #140]	; (800cbac <udp_input_local_match+0xbc>)
 800cb1e:	f002 ffe7 	bl	800faf0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	7a1b      	ldrb	r3, [r3, #8]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00b      	beq.n	800cb42 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	7a1a      	ldrb	r2, [r3, #8]
 800cb2e:	4b21      	ldr	r3, [pc, #132]	; (800cbb4 <udp_input_local_match+0xc4>)
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb36:	3301      	adds	r3, #1
 800cb38:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d001      	beq.n	800cb42 <udp_input_local_match+0x52>
    return 0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	e02b      	b.n	800cb9a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800cb42:	79fb      	ldrb	r3, [r7, #7]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d018      	beq.n	800cb7a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d013      	beq.n	800cb76 <udp_input_local_match+0x86>
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d00f      	beq.n	800cb76 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cb56:	4b17      	ldr	r3, [pc, #92]	; (800cbb4 <udp_input_local_match+0xc4>)
 800cb58:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cb5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb5e:	d00a      	beq.n	800cb76 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	4b13      	ldr	r3, [pc, #76]	; (800cbb4 <udp_input_local_match+0xc4>)
 800cb66:	695b      	ldr	r3, [r3, #20]
 800cb68:	405a      	eors	r2, r3
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	3308      	adds	r3, #8
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d110      	bne.n	800cb98 <udp_input_local_match+0xa8>
          return 1;
 800cb76:	2301      	movs	r3, #1
 800cb78:	e00f      	b.n	800cb9a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d009      	beq.n	800cb94 <udp_input_local_match+0xa4>
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d005      	beq.n	800cb94 <udp_input_local_match+0xa4>
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	4b09      	ldr	r3, [pc, #36]	; (800cbb4 <udp_input_local_match+0xc4>)
 800cb8e:	695b      	ldr	r3, [r3, #20]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d101      	bne.n	800cb98 <udp_input_local_match+0xa8>
        return 1;
 800cb94:	2301      	movs	r3, #1
 800cb96:	e000      	b.n	800cb9a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	08012cd8 	.word	0x08012cd8
 800cba8:	08012d08 	.word	0x08012d08
 800cbac:	08012d2c 	.word	0x08012d2c
 800cbb0:	08012d54 	.word	0x08012d54
 800cbb4:	20005240 	.word	0x20005240

0800cbb8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cbb8:	b590      	push	{r4, r7, lr}
 800cbba:	b08d      	sub	sp, #52	; 0x34
 800cbbc:	af02      	add	r7, sp, #8
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d105      	bne.n	800cbd8 <udp_input+0x20>
 800cbcc:	4b7c      	ldr	r3, [pc, #496]	; (800cdc0 <udp_input+0x208>)
 800cbce:	22cf      	movs	r2, #207	; 0xcf
 800cbd0:	497c      	ldr	r1, [pc, #496]	; (800cdc4 <udp_input+0x20c>)
 800cbd2:	487d      	ldr	r0, [pc, #500]	; (800cdc8 <udp_input+0x210>)
 800cbd4:	f002 ff8c 	bl	800faf0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d105      	bne.n	800cbea <udp_input+0x32>
 800cbde:	4b78      	ldr	r3, [pc, #480]	; (800cdc0 <udp_input+0x208>)
 800cbe0:	22d0      	movs	r2, #208	; 0xd0
 800cbe2:	497a      	ldr	r1, [pc, #488]	; (800cdcc <udp_input+0x214>)
 800cbe4:	4878      	ldr	r0, [pc, #480]	; (800cdc8 <udp_input+0x210>)
 800cbe6:	f002 ff83 	bl	800faf0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	895b      	ldrh	r3, [r3, #10]
 800cbee:	2b07      	cmp	r3, #7
 800cbf0:	d803      	bhi.n	800cbfa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f7fa f9ee 	bl	8006fd4 <pbuf_free>
    goto end;
 800cbf8:	e0de      	b.n	800cdb8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cc00:	4b73      	ldr	r3, [pc, #460]	; (800cdd0 <udp_input+0x218>)
 800cc02:	695b      	ldr	r3, [r3, #20]
 800cc04:	4a72      	ldr	r2, [pc, #456]	; (800cdd0 <udp_input+0x218>)
 800cc06:	6812      	ldr	r2, [r2, #0]
 800cc08:	4611      	mov	r1, r2
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f001 ff40 	bl	800ea90 <ip4_addr_isbroadcast_u32>
 800cc10:	4603      	mov	r3, r0
 800cc12:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	881b      	ldrh	r3, [r3, #0]
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7f8 fe7c 	bl	8005918 <lwip_htons>
 800cc20:	4603      	mov	r3, r0
 800cc22:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	885b      	ldrh	r3, [r3, #2]
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7f8 fe74 	bl	8005918 <lwip_htons>
 800cc30:	4603      	mov	r3, r0
 800cc32:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cc34:	2300      	movs	r3, #0
 800cc36:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc40:	4b64      	ldr	r3, [pc, #400]	; (800cdd4 <udp_input+0x21c>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	627b      	str	r3, [r7, #36]	; 0x24
 800cc46:	e054      	b.n	800ccf2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4a:	8a5b      	ldrh	r3, [r3, #18]
 800cc4c:	89fa      	ldrh	r2, [r7, #14]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d14a      	bne.n	800cce8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cc52:	7cfb      	ldrb	r3, [r7, #19]
 800cc54:	461a      	mov	r2, r3
 800cc56:	6839      	ldr	r1, [r7, #0]
 800cc58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc5a:	f7ff ff49 	bl	800caf0 <udp_input_local_match>
 800cc5e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d041      	beq.n	800cce8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc66:	7c1b      	ldrb	r3, [r3, #16]
 800cc68:	f003 0304 	and.w	r3, r3, #4
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d11d      	bne.n	800ccac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d102      	bne.n	800cc7c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc78:	61fb      	str	r3, [r7, #28]
 800cc7a:	e017      	b.n	800ccac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cc7c:	7cfb      	ldrb	r3, [r7, #19]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d014      	beq.n	800ccac <udp_input+0xf4>
 800cc82:	4b53      	ldr	r3, [pc, #332]	; (800cdd0 <udp_input+0x218>)
 800cc84:	695b      	ldr	r3, [r3, #20]
 800cc86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc8a:	d10f      	bne.n	800ccac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	3304      	adds	r3, #4
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d008      	beq.n	800ccac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	3304      	adds	r3, #4
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d101      	bne.n	800ccac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800cca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccaa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ccac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccae:	8a9b      	ldrh	r3, [r3, #20]
 800ccb0:	8a3a      	ldrh	r2, [r7, #16]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d118      	bne.n	800cce8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ccb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d005      	beq.n	800ccca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ccbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc0:	685a      	ldr	r2, [r3, #4]
 800ccc2:	4b43      	ldr	r3, [pc, #268]	; (800cdd0 <udp_input+0x218>)
 800ccc4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d10e      	bne.n	800cce8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ccca:	6a3b      	ldr	r3, [r7, #32]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d014      	beq.n	800ccfa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ccd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd2:	68da      	ldr	r2, [r3, #12]
 800ccd4:	6a3b      	ldr	r3, [r7, #32]
 800ccd6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ccd8:	4b3e      	ldr	r3, [pc, #248]	; (800cdd4 <udp_input+0x21c>)
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccde:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cce0:	4a3c      	ldr	r2, [pc, #240]	; (800cdd4 <udp_input+0x21c>)
 800cce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cce6:	e008      	b.n	800ccfa <udp_input+0x142>
      }
    }

    prev = pcb;
 800cce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	627b      	str	r3, [r7, #36]	; 0x24
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d1a7      	bne.n	800cc48 <udp_input+0x90>
 800ccf8:	e000      	b.n	800ccfc <udp_input+0x144>
        break;
 800ccfa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ccfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d101      	bne.n	800cd06 <udp_input+0x14e>
    pcb = uncon_pcb;
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d002      	beq.n	800cd12 <udp_input+0x15a>
    for_us = 1;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	76fb      	strb	r3, [r7, #27]
 800cd10:	e00a      	b.n	800cd28 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	3304      	adds	r3, #4
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	4b2d      	ldr	r3, [pc, #180]	; (800cdd0 <udp_input+0x218>)
 800cd1a:	695b      	ldr	r3, [r3, #20]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	bf0c      	ite	eq
 800cd20:	2301      	moveq	r3, #1
 800cd22:	2300      	movne	r3, #0
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cd28:	7efb      	ldrb	r3, [r7, #27]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d041      	beq.n	800cdb2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cd2e:	2108      	movs	r1, #8
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f7fa f8c9 	bl	8006ec8 <pbuf_remove_header>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00a      	beq.n	800cd52 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800cd3c:	4b20      	ldr	r3, [pc, #128]	; (800cdc0 <udp_input+0x208>)
 800cd3e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800cd42:	4925      	ldr	r1, [pc, #148]	; (800cdd8 <udp_input+0x220>)
 800cd44:	4820      	ldr	r0, [pc, #128]	; (800cdc8 <udp_input+0x210>)
 800cd46:	f002 fed3 	bl	800faf0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7fa f942 	bl	8006fd4 <pbuf_free>
      goto end;
 800cd50:	e032      	b.n	800cdb8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800cd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d012      	beq.n	800cd7e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5a:	699b      	ldr	r3, [r3, #24]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d00a      	beq.n	800cd76 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd62:	699c      	ldr	r4, [r3, #24]
 800cd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd66:	69d8      	ldr	r0, [r3, #28]
 800cd68:	8a3b      	ldrh	r3, [r7, #16]
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	4b1b      	ldr	r3, [pc, #108]	; (800cddc <udp_input+0x224>)
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd72:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cd74:	e021      	b.n	800cdba <udp_input+0x202>
        pbuf_free(p);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f7fa f92c 	bl	8006fd4 <pbuf_free>
        goto end;
 800cd7c:	e01c      	b.n	800cdb8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cd7e:	7cfb      	ldrb	r3, [r7, #19]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d112      	bne.n	800cdaa <udp_input+0x1f2>
 800cd84:	4b12      	ldr	r3, [pc, #72]	; (800cdd0 <udp_input+0x218>)
 800cd86:	695b      	ldr	r3, [r3, #20]
 800cd88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd8c:	2be0      	cmp	r3, #224	; 0xe0
 800cd8e:	d00c      	beq.n	800cdaa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cd90:	4b0f      	ldr	r3, [pc, #60]	; (800cdd0 <udp_input+0x218>)
 800cd92:	899b      	ldrh	r3, [r3, #12]
 800cd94:	3308      	adds	r3, #8
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	b21b      	sxth	r3, r3
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f7fa f906 	bl	8006fae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cda2:	2103      	movs	r1, #3
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f001 fb53 	bl	800e450 <icmp_dest_unreach>
      pbuf_free(p);
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f7fa f912 	bl	8006fd4 <pbuf_free>
  return;
 800cdb0:	e003      	b.n	800cdba <udp_input+0x202>
    pbuf_free(p);
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f7fa f90e 	bl	8006fd4 <pbuf_free>
  return;
 800cdb8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cdba:	372c      	adds	r7, #44	; 0x2c
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd90      	pop	{r4, r7, pc}
 800cdc0:	08012cd8 	.word	0x08012cd8
 800cdc4:	08012d7c 	.word	0x08012d7c
 800cdc8:	08012d2c 	.word	0x08012d2c
 800cdcc:	08012d94 	.word	0x08012d94
 800cdd0:	20005240 	.word	0x20005240
 800cdd4:	2000880c 	.word	0x2000880c
 800cdd8:	08012db0 	.word	0x08012db0
 800cddc:	20005250 	.word	0x20005250

0800cde0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b088      	sub	sp, #32
 800cde4:	af02      	add	r7, sp, #8
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	607a      	str	r2, [r7, #4]
 800cdec:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d109      	bne.n	800ce08 <udp_sendto+0x28>
 800cdf4:	4b23      	ldr	r3, [pc, #140]	; (800ce84 <udp_sendto+0xa4>)
 800cdf6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cdfa:	4923      	ldr	r1, [pc, #140]	; (800ce88 <udp_sendto+0xa8>)
 800cdfc:	4823      	ldr	r0, [pc, #140]	; (800ce8c <udp_sendto+0xac>)
 800cdfe:	f002 fe77 	bl	800faf0 <iprintf>
 800ce02:	f06f 030f 	mvn.w	r3, #15
 800ce06:	e038      	b.n	800ce7a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d109      	bne.n	800ce22 <udp_sendto+0x42>
 800ce0e:	4b1d      	ldr	r3, [pc, #116]	; (800ce84 <udp_sendto+0xa4>)
 800ce10:	f240 2219 	movw	r2, #537	; 0x219
 800ce14:	491e      	ldr	r1, [pc, #120]	; (800ce90 <udp_sendto+0xb0>)
 800ce16:	481d      	ldr	r0, [pc, #116]	; (800ce8c <udp_sendto+0xac>)
 800ce18:	f002 fe6a 	bl	800faf0 <iprintf>
 800ce1c:	f06f 030f 	mvn.w	r3, #15
 800ce20:	e02b      	b.n	800ce7a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d109      	bne.n	800ce3c <udp_sendto+0x5c>
 800ce28:	4b16      	ldr	r3, [pc, #88]	; (800ce84 <udp_sendto+0xa4>)
 800ce2a:	f240 221a 	movw	r2, #538	; 0x21a
 800ce2e:	4919      	ldr	r1, [pc, #100]	; (800ce94 <udp_sendto+0xb4>)
 800ce30:	4816      	ldr	r0, [pc, #88]	; (800ce8c <udp_sendto+0xac>)
 800ce32:	f002 fe5d 	bl	800faf0 <iprintf>
 800ce36:	f06f 030f 	mvn.w	r3, #15
 800ce3a:	e01e      	b.n	800ce7a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	7a1b      	ldrb	r3, [r3, #8]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d006      	beq.n	800ce52 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	7a1b      	ldrb	r3, [r3, #8]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7f9 fd63 	bl	8006914 <netif_get_by_index>
 800ce4e:	6178      	str	r0, [r7, #20]
 800ce50:	e003      	b.n	800ce5a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f001 fb86 	bl	800e564 <ip4_route>
 800ce58:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d102      	bne.n	800ce66 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800ce60:	f06f 0303 	mvn.w	r3, #3
 800ce64:	e009      	b.n	800ce7a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800ce66:	887a      	ldrh	r2, [r7, #2]
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	68b9      	ldr	r1, [r7, #8]
 800ce72:	68f8      	ldr	r0, [r7, #12]
 800ce74:	f000 f810 	bl	800ce98 <udp_sendto_if>
 800ce78:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3718      	adds	r7, #24
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	08012cd8 	.word	0x08012cd8
 800ce88:	08012dfc 	.word	0x08012dfc
 800ce8c:	08012d2c 	.word	0x08012d2c
 800ce90:	08012e14 	.word	0x08012e14
 800ce94:	08012e30 	.word	0x08012e30

0800ce98 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b088      	sub	sp, #32
 800ce9c:	af02      	add	r7, sp, #8
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	607a      	str	r2, [r7, #4]
 800cea4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d109      	bne.n	800cec0 <udp_sendto_if+0x28>
 800ceac:	4b2e      	ldr	r3, [pc, #184]	; (800cf68 <udp_sendto_if+0xd0>)
 800ceae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ceb2:	492e      	ldr	r1, [pc, #184]	; (800cf6c <udp_sendto_if+0xd4>)
 800ceb4:	482e      	ldr	r0, [pc, #184]	; (800cf70 <udp_sendto_if+0xd8>)
 800ceb6:	f002 fe1b 	bl	800faf0 <iprintf>
 800ceba:	f06f 030f 	mvn.w	r3, #15
 800cebe:	e04f      	b.n	800cf60 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d109      	bne.n	800ceda <udp_sendto_if+0x42>
 800cec6:	4b28      	ldr	r3, [pc, #160]	; (800cf68 <udp_sendto_if+0xd0>)
 800cec8:	f240 2281 	movw	r2, #641	; 0x281
 800cecc:	4929      	ldr	r1, [pc, #164]	; (800cf74 <udp_sendto_if+0xdc>)
 800cece:	4828      	ldr	r0, [pc, #160]	; (800cf70 <udp_sendto_if+0xd8>)
 800ced0:	f002 fe0e 	bl	800faf0 <iprintf>
 800ced4:	f06f 030f 	mvn.w	r3, #15
 800ced8:	e042      	b.n	800cf60 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d109      	bne.n	800cef4 <udp_sendto_if+0x5c>
 800cee0:	4b21      	ldr	r3, [pc, #132]	; (800cf68 <udp_sendto_if+0xd0>)
 800cee2:	f240 2282 	movw	r2, #642	; 0x282
 800cee6:	4924      	ldr	r1, [pc, #144]	; (800cf78 <udp_sendto_if+0xe0>)
 800cee8:	4821      	ldr	r0, [pc, #132]	; (800cf70 <udp_sendto_if+0xd8>)
 800ceea:	f002 fe01 	bl	800faf0 <iprintf>
 800ceee:	f06f 030f 	mvn.w	r3, #15
 800cef2:	e035      	b.n	800cf60 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800cef4:	6a3b      	ldr	r3, [r7, #32]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d109      	bne.n	800cf0e <udp_sendto_if+0x76>
 800cefa:	4b1b      	ldr	r3, [pc, #108]	; (800cf68 <udp_sendto_if+0xd0>)
 800cefc:	f240 2283 	movw	r2, #643	; 0x283
 800cf00:	491e      	ldr	r1, [pc, #120]	; (800cf7c <udp_sendto_if+0xe4>)
 800cf02:	481b      	ldr	r0, [pc, #108]	; (800cf70 <udp_sendto_if+0xd8>)
 800cf04:	f002 fdf4 	bl	800faf0 <iprintf>
 800cf08:	f06f 030f 	mvn.w	r3, #15
 800cf0c:	e028      	b.n	800cf60 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d009      	beq.n	800cf28 <udp_sendto_if+0x90>
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d005      	beq.n	800cf28 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cf24:	2be0      	cmp	r3, #224	; 0xe0
 800cf26:	d103      	bne.n	800cf30 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800cf28:	6a3b      	ldr	r3, [r7, #32]
 800cf2a:	3304      	adds	r3, #4
 800cf2c:	617b      	str	r3, [r7, #20]
 800cf2e:	e00b      	b.n	800cf48 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	6a3b      	ldr	r3, [r7, #32]
 800cf36:	3304      	adds	r3, #4
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d002      	beq.n	800cf44 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800cf3e:	f06f 0303 	mvn.w	r3, #3
 800cf42:	e00d      	b.n	800cf60 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800cf48:	887a      	ldrh	r2, [r7, #2]
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	9301      	str	r3, [sp, #4]
 800cf4e:	6a3b      	ldr	r3, [r7, #32]
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	4613      	mov	r3, r2
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	68b9      	ldr	r1, [r7, #8]
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f000 f811 	bl	800cf80 <udp_sendto_if_src>
 800cf5e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3718      	adds	r7, #24
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	08012cd8 	.word	0x08012cd8
 800cf6c:	08012e4c 	.word	0x08012e4c
 800cf70:	08012d2c 	.word	0x08012d2c
 800cf74:	08012e68 	.word	0x08012e68
 800cf78:	08012e84 	.word	0x08012e84
 800cf7c:	08012ea4 	.word	0x08012ea4

0800cf80 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b08c      	sub	sp, #48	; 0x30
 800cf84:	af04      	add	r7, sp, #16
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	607a      	str	r2, [r7, #4]
 800cf8c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d109      	bne.n	800cfa8 <udp_sendto_if_src+0x28>
 800cf94:	4b65      	ldr	r3, [pc, #404]	; (800d12c <udp_sendto_if_src+0x1ac>)
 800cf96:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cf9a:	4965      	ldr	r1, [pc, #404]	; (800d130 <udp_sendto_if_src+0x1b0>)
 800cf9c:	4865      	ldr	r0, [pc, #404]	; (800d134 <udp_sendto_if_src+0x1b4>)
 800cf9e:	f002 fda7 	bl	800faf0 <iprintf>
 800cfa2:	f06f 030f 	mvn.w	r3, #15
 800cfa6:	e0bc      	b.n	800d122 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d109      	bne.n	800cfc2 <udp_sendto_if_src+0x42>
 800cfae:	4b5f      	ldr	r3, [pc, #380]	; (800d12c <udp_sendto_if_src+0x1ac>)
 800cfb0:	f240 22d2 	movw	r2, #722	; 0x2d2
 800cfb4:	4960      	ldr	r1, [pc, #384]	; (800d138 <udp_sendto_if_src+0x1b8>)
 800cfb6:	485f      	ldr	r0, [pc, #380]	; (800d134 <udp_sendto_if_src+0x1b4>)
 800cfb8:	f002 fd9a 	bl	800faf0 <iprintf>
 800cfbc:	f06f 030f 	mvn.w	r3, #15
 800cfc0:	e0af      	b.n	800d122 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d109      	bne.n	800cfdc <udp_sendto_if_src+0x5c>
 800cfc8:	4b58      	ldr	r3, [pc, #352]	; (800d12c <udp_sendto_if_src+0x1ac>)
 800cfca:	f240 22d3 	movw	r2, #723	; 0x2d3
 800cfce:	495b      	ldr	r1, [pc, #364]	; (800d13c <udp_sendto_if_src+0x1bc>)
 800cfd0:	4858      	ldr	r0, [pc, #352]	; (800d134 <udp_sendto_if_src+0x1b4>)
 800cfd2:	f002 fd8d 	bl	800faf0 <iprintf>
 800cfd6:	f06f 030f 	mvn.w	r3, #15
 800cfda:	e0a2      	b.n	800d122 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800cfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d109      	bne.n	800cff6 <udp_sendto_if_src+0x76>
 800cfe2:	4b52      	ldr	r3, [pc, #328]	; (800d12c <udp_sendto_if_src+0x1ac>)
 800cfe4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800cfe8:	4955      	ldr	r1, [pc, #340]	; (800d140 <udp_sendto_if_src+0x1c0>)
 800cfea:	4852      	ldr	r0, [pc, #328]	; (800d134 <udp_sendto_if_src+0x1b4>)
 800cfec:	f002 fd80 	bl	800faf0 <iprintf>
 800cff0:	f06f 030f 	mvn.w	r3, #15
 800cff4:	e095      	b.n	800d122 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800cff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d109      	bne.n	800d010 <udp_sendto_if_src+0x90>
 800cffc:	4b4b      	ldr	r3, [pc, #300]	; (800d12c <udp_sendto_if_src+0x1ac>)
 800cffe:	f240 22d5 	movw	r2, #725	; 0x2d5
 800d002:	4950      	ldr	r1, [pc, #320]	; (800d144 <udp_sendto_if_src+0x1c4>)
 800d004:	484b      	ldr	r0, [pc, #300]	; (800d134 <udp_sendto_if_src+0x1b4>)
 800d006:	f002 fd73 	bl	800faf0 <iprintf>
 800d00a:	f06f 030f 	mvn.w	r3, #15
 800d00e:	e088      	b.n	800d122 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	8a5b      	ldrh	r3, [r3, #18]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d10f      	bne.n	800d038 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d018:	68f9      	ldr	r1, [r7, #12]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	8a5b      	ldrh	r3, [r3, #18]
 800d01e:	461a      	mov	r2, r3
 800d020:	68f8      	ldr	r0, [r7, #12]
 800d022:	f000 f893 	bl	800d14c <udp_bind>
 800d026:	4603      	mov	r3, r0
 800d028:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800d02a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d002      	beq.n	800d038 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800d032:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d036:	e074      	b.n	800d122 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	891b      	ldrh	r3, [r3, #8]
 800d03c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800d040:	4293      	cmp	r3, r2
 800d042:	d902      	bls.n	800d04a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800d044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d048:	e06b      	b.n	800d122 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d04a:	2108      	movs	r1, #8
 800d04c:	68b8      	ldr	r0, [r7, #8]
 800d04e:	f7f9 ff2b 	bl	8006ea8 <pbuf_add_header>
 800d052:	4603      	mov	r3, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	d015      	beq.n	800d084 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d058:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d05c:	2108      	movs	r1, #8
 800d05e:	2022      	movs	r0, #34	; 0x22
 800d060:	f7f9 fcd4 	bl	8006a0c <pbuf_alloc>
 800d064:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d066:	69fb      	ldr	r3, [r7, #28]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d102      	bne.n	800d072 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800d06c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d070:	e057      	b.n	800d122 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	891b      	ldrh	r3, [r3, #8]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d006      	beq.n	800d088 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d07a:	68b9      	ldr	r1, [r7, #8]
 800d07c:	69f8      	ldr	r0, [r7, #28]
 800d07e:	f7fa f8c1 	bl	8007204 <pbuf_chain>
 800d082:	e001      	b.n	800d088 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	895b      	ldrh	r3, [r3, #10]
 800d08c:	2b07      	cmp	r3, #7
 800d08e:	d806      	bhi.n	800d09e <udp_sendto_if_src+0x11e>
 800d090:	4b26      	ldr	r3, [pc, #152]	; (800d12c <udp_sendto_if_src+0x1ac>)
 800d092:	f240 320d 	movw	r2, #781	; 0x30d
 800d096:	492c      	ldr	r1, [pc, #176]	; (800d148 <udp_sendto_if_src+0x1c8>)
 800d098:	4826      	ldr	r0, [pc, #152]	; (800d134 <udp_sendto_if_src+0x1b4>)
 800d09a:	f002 fd29 	bl	800faf0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	8a5b      	ldrh	r3, [r3, #18]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7f8 fc35 	bl	8005918 <lwip_htons>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d0b6:	887b      	ldrh	r3, [r7, #2]
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7f8 fc2d 	bl	8005918 <lwip_htons>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	719a      	strb	r2, [r3, #6]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	891b      	ldrh	r3, [r3, #8]
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7f8 fc1f 	bl	8005918 <lwip_htons>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	461a      	mov	r2, r3
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d0e2:	2311      	movs	r3, #17
 800d0e4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	7adb      	ldrb	r3, [r3, #11]
 800d0ea:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	7a9b      	ldrb	r3, [r3, #10]
 800d0f0:	7cb9      	ldrb	r1, [r7, #18]
 800d0f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0f4:	9202      	str	r2, [sp, #8]
 800d0f6:	7cfa      	ldrb	r2, [r7, #19]
 800d0f8:	9201      	str	r2, [sp, #4]
 800d0fa:	9300      	str	r3, [sp, #0]
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d102:	69f8      	ldr	r0, [r7, #28]
 800d104:	f001 fc16 	bl	800e934 <ip4_output_if_src>
 800d108:	4603      	mov	r3, r0
 800d10a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d10c:	69fa      	ldr	r2, [r7, #28]
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	429a      	cmp	r2, r3
 800d112:	d004      	beq.n	800d11e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800d114:	69f8      	ldr	r0, [r7, #28]
 800d116:	f7f9 ff5d 	bl	8006fd4 <pbuf_free>
    q = NULL;
 800d11a:	2300      	movs	r3, #0
 800d11c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800d11e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3720      	adds	r7, #32
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	08012cd8 	.word	0x08012cd8
 800d130:	08012ec4 	.word	0x08012ec4
 800d134:	08012d2c 	.word	0x08012d2c
 800d138:	08012ee4 	.word	0x08012ee4
 800d13c:	08012f04 	.word	0x08012f04
 800d140:	08012f28 	.word	0x08012f28
 800d144:	08012f4c 	.word	0x08012f4c
 800d148:	08012f70 	.word	0x08012f70

0800d14c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	4613      	mov	r3, r2
 800d158:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d101      	bne.n	800d164 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d160:	4b39      	ldr	r3, [pc, #228]	; (800d248 <udp_bind+0xfc>)
 800d162:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d109      	bne.n	800d17e <udp_bind+0x32>
 800d16a:	4b38      	ldr	r3, [pc, #224]	; (800d24c <udp_bind+0x100>)
 800d16c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d170:	4937      	ldr	r1, [pc, #220]	; (800d250 <udp_bind+0x104>)
 800d172:	4838      	ldr	r0, [pc, #224]	; (800d254 <udp_bind+0x108>)
 800d174:	f002 fcbc 	bl	800faf0 <iprintf>
 800d178:	f06f 030f 	mvn.w	r3, #15
 800d17c:	e060      	b.n	800d240 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d17e:	2300      	movs	r3, #0
 800d180:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d182:	4b35      	ldr	r3, [pc, #212]	; (800d258 <udp_bind+0x10c>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	617b      	str	r3, [r7, #20]
 800d188:	e009      	b.n	800d19e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d102      	bne.n	800d198 <udp_bind+0x4c>
      rebind = 1;
 800d192:	2301      	movs	r3, #1
 800d194:	74fb      	strb	r3, [r7, #19]
      break;
 800d196:	e005      	b.n	800d1a4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	617b      	str	r3, [r7, #20]
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1f2      	bne.n	800d18a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d1a4:	88fb      	ldrh	r3, [r7, #6]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d109      	bne.n	800d1be <udp_bind+0x72>
    port = udp_new_port();
 800d1aa:	f7ff fc69 	bl	800ca80 <udp_new_port>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d1b2:	88fb      	ldrh	r3, [r7, #6]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d12c      	bne.n	800d212 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d1b8:	f06f 0307 	mvn.w	r3, #7
 800d1bc:	e040      	b.n	800d240 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d1be:	4b26      	ldr	r3, [pc, #152]	; (800d258 <udp_bind+0x10c>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	617b      	str	r3, [r7, #20]
 800d1c4:	e022      	b.n	800d20c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800d1c6:	68fa      	ldr	r2, [r7, #12]
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d01b      	beq.n	800d206 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	8a5b      	ldrh	r3, [r3, #18]
 800d1d2:	88fa      	ldrh	r2, [r7, #6]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d116      	bne.n	800d206 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d00d      	beq.n	800d200 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d00a      	beq.n	800d200 <udp_bind+0xb4>
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d006      	beq.n	800d200 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d1f2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d003      	beq.n	800d200 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d102      	bne.n	800d206 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d200:	f06f 0307 	mvn.w	r3, #7
 800d204:	e01c      	b.n	800d240 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	68db      	ldr	r3, [r3, #12]
 800d20a:	617b      	str	r3, [r7, #20]
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1d9      	bne.n	800d1c6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d002      	beq.n	800d21e <udp_bind+0xd2>
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	e000      	b.n	800d220 <udp_bind+0xd4>
 800d21e:	2300      	movs	r3, #0
 800d220:	68fa      	ldr	r2, [r7, #12]
 800d222:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	88fa      	ldrh	r2, [r7, #6]
 800d228:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d22a:	7cfb      	ldrb	r3, [r7, #19]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d106      	bne.n	800d23e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d230:	4b09      	ldr	r3, [pc, #36]	; (800d258 <udp_bind+0x10c>)
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d238:	4a07      	ldr	r2, [pc, #28]	; (800d258 <udp_bind+0x10c>)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3718      	adds	r7, #24
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	080137f4 	.word	0x080137f4
 800d24c:	08012cd8 	.word	0x08012cd8
 800d250:	08012fa0 	.word	0x08012fa0
 800d254:	08012d2c 	.word	0x08012d2c
 800d258:	2000880c 	.word	0x2000880c

0800d25c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d107      	bne.n	800d27e <udp_recv+0x22>
 800d26e:	4b08      	ldr	r3, [pc, #32]	; (800d290 <udp_recv+0x34>)
 800d270:	f240 428a 	movw	r2, #1162	; 0x48a
 800d274:	4907      	ldr	r1, [pc, #28]	; (800d294 <udp_recv+0x38>)
 800d276:	4808      	ldr	r0, [pc, #32]	; (800d298 <udp_recv+0x3c>)
 800d278:	f002 fc3a 	bl	800faf0 <iprintf>
 800d27c:	e005      	b.n	800d28a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	68ba      	ldr	r2, [r7, #8]
 800d282:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	61da      	str	r2, [r3, #28]
}
 800d28a:	3710      	adds	r7, #16
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	08012cd8 	.word	0x08012cd8
 800d294:	0801300c 	.word	0x0801300c
 800d298:	08012d2c 	.word	0x08012d2c

0800d29c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d107      	bne.n	800d2ba <udp_remove+0x1e>
 800d2aa:	4b19      	ldr	r3, [pc, #100]	; (800d310 <udp_remove+0x74>)
 800d2ac:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800d2b0:	4918      	ldr	r1, [pc, #96]	; (800d314 <udp_remove+0x78>)
 800d2b2:	4819      	ldr	r0, [pc, #100]	; (800d318 <udp_remove+0x7c>)
 800d2b4:	f002 fc1c 	bl	800faf0 <iprintf>
 800d2b8:	e026      	b.n	800d308 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d2ba:	4b18      	ldr	r3, [pc, #96]	; (800d31c <udp_remove+0x80>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d105      	bne.n	800d2d0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800d2c4:	4b15      	ldr	r3, [pc, #84]	; (800d31c <udp_remove+0x80>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	4a14      	ldr	r2, [pc, #80]	; (800d31c <udp_remove+0x80>)
 800d2cc:	6013      	str	r3, [r2, #0]
 800d2ce:	e017      	b.n	800d300 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d2d0:	4b12      	ldr	r3, [pc, #72]	; (800d31c <udp_remove+0x80>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	60fb      	str	r3, [r7, #12]
 800d2d6:	e010      	b.n	800d2fa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d009      	beq.n	800d2f4 <udp_remove+0x58>
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	68db      	ldr	r3, [r3, #12]
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d104      	bne.n	800d2f4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	68da      	ldr	r2, [r3, #12]
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	60da      	str	r2, [r3, #12]
        break;
 800d2f2:	e005      	b.n	800d300 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	60fb      	str	r3, [r7, #12]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d1eb      	bne.n	800d2d8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d300:	6879      	ldr	r1, [r7, #4]
 800d302:	2000      	movs	r0, #0
 800d304:	f7f8 fff0 	bl	80062e8 <memp_free>
}
 800d308:	3710      	adds	r7, #16
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	08012cd8 	.word	0x08012cd8
 800d314:	08013024 	.word	0x08013024
 800d318:	08012d2c 	.word	0x08012d2c
 800d31c:	2000880c 	.word	0x2000880c

0800d320 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d326:	2000      	movs	r0, #0
 800d328:	f7f8 ff6e 	bl	8006208 <memp_malloc>
 800d32c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d007      	beq.n	800d344 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d334:	2220      	movs	r2, #32
 800d336:	2100      	movs	r1, #0
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f002 fbd1 	bl	800fae0 <memset>
    pcb->ttl = UDP_TTL;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	22ff      	movs	r2, #255	; 0xff
 800d342:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800d344:	687b      	ldr	r3, [r7, #4]
}
 800d346:	4618      	mov	r0, r3
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
	...

0800d350 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d350:	b480      	push	{r7}
 800d352:	b085      	sub	sp, #20
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d01e      	beq.n	800d39e <udp_netif_ip_addr_changed+0x4e>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d01a      	beq.n	800d39e <udp_netif_ip_addr_changed+0x4e>
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d017      	beq.n	800d39e <udp_netif_ip_addr_changed+0x4e>
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d013      	beq.n	800d39e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d376:	4b0d      	ldr	r3, [pc, #52]	; (800d3ac <udp_netif_ip_addr_changed+0x5c>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	60fb      	str	r3, [r7, #12]
 800d37c:	e00c      	b.n	800d398 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	429a      	cmp	r2, r3
 800d388:	d103      	bne.n	800d392 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	60fb      	str	r3, [r7, #12]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1ef      	bne.n	800d37e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d39e:	bf00      	nop
 800d3a0:	3714      	adds	r7, #20
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop
 800d3ac:	2000880c 	.word	0x2000880c

0800d3b0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b082      	sub	sp, #8
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d3b8:	4915      	ldr	r1, [pc, #84]	; (800d410 <etharp_free_entry+0x60>)
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	4613      	mov	r3, r2
 800d3be:	005b      	lsls	r3, r3, #1
 800d3c0:	4413      	add	r3, r2
 800d3c2:	00db      	lsls	r3, r3, #3
 800d3c4:	440b      	add	r3, r1
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d013      	beq.n	800d3f4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d3cc:	4910      	ldr	r1, [pc, #64]	; (800d410 <etharp_free_entry+0x60>)
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	4613      	mov	r3, r2
 800d3d2:	005b      	lsls	r3, r3, #1
 800d3d4:	4413      	add	r3, r2
 800d3d6:	00db      	lsls	r3, r3, #3
 800d3d8:	440b      	add	r3, r1
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7f9 fdf9 	bl	8006fd4 <pbuf_free>
    arp_table[i].q = NULL;
 800d3e2:	490b      	ldr	r1, [pc, #44]	; (800d410 <etharp_free_entry+0x60>)
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	4613      	mov	r3, r2
 800d3e8:	005b      	lsls	r3, r3, #1
 800d3ea:	4413      	add	r3, r2
 800d3ec:	00db      	lsls	r3, r3, #3
 800d3ee:	440b      	add	r3, r1
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d3f4:	4906      	ldr	r1, [pc, #24]	; (800d410 <etharp_free_entry+0x60>)
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	4613      	mov	r3, r2
 800d3fa:	005b      	lsls	r3, r3, #1
 800d3fc:	4413      	add	r3, r2
 800d3fe:	00db      	lsls	r3, r3, #3
 800d400:	440b      	add	r3, r1
 800d402:	3314      	adds	r3, #20
 800d404:	2200      	movs	r2, #0
 800d406:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d408:	bf00      	nop
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	20008810 	.word	0x20008810

0800d414 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d41a:	2300      	movs	r3, #0
 800d41c:	607b      	str	r3, [r7, #4]
 800d41e:	e096      	b.n	800d54e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d420:	494f      	ldr	r1, [pc, #316]	; (800d560 <etharp_tmr+0x14c>)
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	4613      	mov	r3, r2
 800d426:	005b      	lsls	r3, r3, #1
 800d428:	4413      	add	r3, r2
 800d42a:	00db      	lsls	r3, r3, #3
 800d42c:	440b      	add	r3, r1
 800d42e:	3314      	adds	r3, #20
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d434:	78fb      	ldrb	r3, [r7, #3]
 800d436:	2b00      	cmp	r3, #0
 800d438:	f000 8086 	beq.w	800d548 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d43c:	4948      	ldr	r1, [pc, #288]	; (800d560 <etharp_tmr+0x14c>)
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	4613      	mov	r3, r2
 800d442:	005b      	lsls	r3, r3, #1
 800d444:	4413      	add	r3, r2
 800d446:	00db      	lsls	r3, r3, #3
 800d448:	440b      	add	r3, r1
 800d44a:	3312      	adds	r3, #18
 800d44c:	881b      	ldrh	r3, [r3, #0]
 800d44e:	3301      	adds	r3, #1
 800d450:	b298      	uxth	r0, r3
 800d452:	4943      	ldr	r1, [pc, #268]	; (800d560 <etharp_tmr+0x14c>)
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	4613      	mov	r3, r2
 800d458:	005b      	lsls	r3, r3, #1
 800d45a:	4413      	add	r3, r2
 800d45c:	00db      	lsls	r3, r3, #3
 800d45e:	440b      	add	r3, r1
 800d460:	3312      	adds	r3, #18
 800d462:	4602      	mov	r2, r0
 800d464:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d466:	493e      	ldr	r1, [pc, #248]	; (800d560 <etharp_tmr+0x14c>)
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	4613      	mov	r3, r2
 800d46c:	005b      	lsls	r3, r3, #1
 800d46e:	4413      	add	r3, r2
 800d470:	00db      	lsls	r3, r3, #3
 800d472:	440b      	add	r3, r1
 800d474:	3312      	adds	r3, #18
 800d476:	881b      	ldrh	r3, [r3, #0]
 800d478:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d47c:	d215      	bcs.n	800d4aa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d47e:	4938      	ldr	r1, [pc, #224]	; (800d560 <etharp_tmr+0x14c>)
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	4613      	mov	r3, r2
 800d484:	005b      	lsls	r3, r3, #1
 800d486:	4413      	add	r3, r2
 800d488:	00db      	lsls	r3, r3, #3
 800d48a:	440b      	add	r3, r1
 800d48c:	3314      	adds	r3, #20
 800d48e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d490:	2b01      	cmp	r3, #1
 800d492:	d10e      	bne.n	800d4b2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d494:	4932      	ldr	r1, [pc, #200]	; (800d560 <etharp_tmr+0x14c>)
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	4613      	mov	r3, r2
 800d49a:	005b      	lsls	r3, r3, #1
 800d49c:	4413      	add	r3, r2
 800d49e:	00db      	lsls	r3, r3, #3
 800d4a0:	440b      	add	r3, r1
 800d4a2:	3312      	adds	r3, #18
 800d4a4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d4a6:	2b04      	cmp	r3, #4
 800d4a8:	d903      	bls.n	800d4b2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f7ff ff80 	bl	800d3b0 <etharp_free_entry>
 800d4b0:	e04a      	b.n	800d548 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d4b2:	492b      	ldr	r1, [pc, #172]	; (800d560 <etharp_tmr+0x14c>)
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	4613      	mov	r3, r2
 800d4b8:	005b      	lsls	r3, r3, #1
 800d4ba:	4413      	add	r3, r2
 800d4bc:	00db      	lsls	r3, r3, #3
 800d4be:	440b      	add	r3, r1
 800d4c0:	3314      	adds	r3, #20
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	2b03      	cmp	r3, #3
 800d4c6:	d10a      	bne.n	800d4de <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d4c8:	4925      	ldr	r1, [pc, #148]	; (800d560 <etharp_tmr+0x14c>)
 800d4ca:	687a      	ldr	r2, [r7, #4]
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	005b      	lsls	r3, r3, #1
 800d4d0:	4413      	add	r3, r2
 800d4d2:	00db      	lsls	r3, r3, #3
 800d4d4:	440b      	add	r3, r1
 800d4d6:	3314      	adds	r3, #20
 800d4d8:	2204      	movs	r2, #4
 800d4da:	701a      	strb	r2, [r3, #0]
 800d4dc:	e034      	b.n	800d548 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d4de:	4920      	ldr	r1, [pc, #128]	; (800d560 <etharp_tmr+0x14c>)
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	005b      	lsls	r3, r3, #1
 800d4e6:	4413      	add	r3, r2
 800d4e8:	00db      	lsls	r3, r3, #3
 800d4ea:	440b      	add	r3, r1
 800d4ec:	3314      	adds	r3, #20
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	2b04      	cmp	r3, #4
 800d4f2:	d10a      	bne.n	800d50a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d4f4:	491a      	ldr	r1, [pc, #104]	; (800d560 <etharp_tmr+0x14c>)
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	005b      	lsls	r3, r3, #1
 800d4fc:	4413      	add	r3, r2
 800d4fe:	00db      	lsls	r3, r3, #3
 800d500:	440b      	add	r3, r1
 800d502:	3314      	adds	r3, #20
 800d504:	2202      	movs	r2, #2
 800d506:	701a      	strb	r2, [r3, #0]
 800d508:	e01e      	b.n	800d548 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d50a:	4915      	ldr	r1, [pc, #84]	; (800d560 <etharp_tmr+0x14c>)
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	4613      	mov	r3, r2
 800d510:	005b      	lsls	r3, r3, #1
 800d512:	4413      	add	r3, r2
 800d514:	00db      	lsls	r3, r3, #3
 800d516:	440b      	add	r3, r1
 800d518:	3314      	adds	r3, #20
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d113      	bne.n	800d548 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d520:	490f      	ldr	r1, [pc, #60]	; (800d560 <etharp_tmr+0x14c>)
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	4613      	mov	r3, r2
 800d526:	005b      	lsls	r3, r3, #1
 800d528:	4413      	add	r3, r2
 800d52a:	00db      	lsls	r3, r3, #3
 800d52c:	440b      	add	r3, r1
 800d52e:	3308      	adds	r3, #8
 800d530:	6818      	ldr	r0, [r3, #0]
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	4613      	mov	r3, r2
 800d536:	005b      	lsls	r3, r3, #1
 800d538:	4413      	add	r3, r2
 800d53a:	00db      	lsls	r3, r3, #3
 800d53c:	4a08      	ldr	r2, [pc, #32]	; (800d560 <etharp_tmr+0x14c>)
 800d53e:	4413      	add	r3, r2
 800d540:	3304      	adds	r3, #4
 800d542:	4619      	mov	r1, r3
 800d544:	f000 fe6e 	bl	800e224 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	3301      	adds	r3, #1
 800d54c:	607b      	str	r3, [r7, #4]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b09      	cmp	r3, #9
 800d552:	f77f af65 	ble.w	800d420 <etharp_tmr+0xc>
      }
    }
  }
}
 800d556:	bf00      	nop
 800d558:	bf00      	nop
 800d55a:	3708      	adds	r7, #8
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	20008810 	.word	0x20008810

0800d564 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b08a      	sub	sp, #40	; 0x28
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	460b      	mov	r3, r1
 800d56e:	607a      	str	r2, [r7, #4]
 800d570:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d572:	230a      	movs	r3, #10
 800d574:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d576:	230a      	movs	r3, #10
 800d578:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d57a:	230a      	movs	r3, #10
 800d57c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d57e:	2300      	movs	r3, #0
 800d580:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d582:	230a      	movs	r3, #10
 800d584:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d586:	2300      	movs	r3, #0
 800d588:	83bb      	strh	r3, [r7, #28]
 800d58a:	2300      	movs	r3, #0
 800d58c:	837b      	strh	r3, [r7, #26]
 800d58e:	2300      	movs	r3, #0
 800d590:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d592:	2300      	movs	r3, #0
 800d594:	843b      	strh	r3, [r7, #32]
 800d596:	e0ae      	b.n	800d6f6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d598:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d59c:	49a6      	ldr	r1, [pc, #664]	; (800d838 <etharp_find_entry+0x2d4>)
 800d59e:	4613      	mov	r3, r2
 800d5a0:	005b      	lsls	r3, r3, #1
 800d5a2:	4413      	add	r3, r2
 800d5a4:	00db      	lsls	r3, r3, #3
 800d5a6:	440b      	add	r3, r1
 800d5a8:	3314      	adds	r3, #20
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d5ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d5b2:	2b0a      	cmp	r3, #10
 800d5b4:	d105      	bne.n	800d5c2 <etharp_find_entry+0x5e>
 800d5b6:	7dfb      	ldrb	r3, [r7, #23]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d102      	bne.n	800d5c2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d5bc:	8c3b      	ldrh	r3, [r7, #32]
 800d5be:	847b      	strh	r3, [r7, #34]	; 0x22
 800d5c0:	e095      	b.n	800d6ee <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d5c2:	7dfb      	ldrb	r3, [r7, #23]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	f000 8092 	beq.w	800d6ee <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d5ca:	7dfb      	ldrb	r3, [r7, #23]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d009      	beq.n	800d5e4 <etharp_find_entry+0x80>
 800d5d0:	7dfb      	ldrb	r3, [r7, #23]
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d806      	bhi.n	800d5e4 <etharp_find_entry+0x80>
 800d5d6:	4b99      	ldr	r3, [pc, #612]	; (800d83c <etharp_find_entry+0x2d8>)
 800d5d8:	f240 1223 	movw	r2, #291	; 0x123
 800d5dc:	4998      	ldr	r1, [pc, #608]	; (800d840 <etharp_find_entry+0x2dc>)
 800d5de:	4899      	ldr	r0, [pc, #612]	; (800d844 <etharp_find_entry+0x2e0>)
 800d5e0:	f002 fa86 	bl	800faf0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d020      	beq.n	800d62c <etharp_find_entry+0xc8>
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6819      	ldr	r1, [r3, #0]
 800d5ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d5f2:	4891      	ldr	r0, [pc, #580]	; (800d838 <etharp_find_entry+0x2d4>)
 800d5f4:	4613      	mov	r3, r2
 800d5f6:	005b      	lsls	r3, r3, #1
 800d5f8:	4413      	add	r3, r2
 800d5fa:	00db      	lsls	r3, r3, #3
 800d5fc:	4403      	add	r3, r0
 800d5fe:	3304      	adds	r3, #4
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	4299      	cmp	r1, r3
 800d604:	d112      	bne.n	800d62c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d00c      	beq.n	800d626 <etharp_find_entry+0xc2>
 800d60c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d610:	4989      	ldr	r1, [pc, #548]	; (800d838 <etharp_find_entry+0x2d4>)
 800d612:	4613      	mov	r3, r2
 800d614:	005b      	lsls	r3, r3, #1
 800d616:	4413      	add	r3, r2
 800d618:	00db      	lsls	r3, r3, #3
 800d61a:	440b      	add	r3, r1
 800d61c:	3308      	adds	r3, #8
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	429a      	cmp	r2, r3
 800d624:	d102      	bne.n	800d62c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d626:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d62a:	e100      	b.n	800d82e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d62c:	7dfb      	ldrb	r3, [r7, #23]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d140      	bne.n	800d6b4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d632:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d636:	4980      	ldr	r1, [pc, #512]	; (800d838 <etharp_find_entry+0x2d4>)
 800d638:	4613      	mov	r3, r2
 800d63a:	005b      	lsls	r3, r3, #1
 800d63c:	4413      	add	r3, r2
 800d63e:	00db      	lsls	r3, r3, #3
 800d640:	440b      	add	r3, r1
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d01a      	beq.n	800d67e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d648:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d64c:	497a      	ldr	r1, [pc, #488]	; (800d838 <etharp_find_entry+0x2d4>)
 800d64e:	4613      	mov	r3, r2
 800d650:	005b      	lsls	r3, r3, #1
 800d652:	4413      	add	r3, r2
 800d654:	00db      	lsls	r3, r3, #3
 800d656:	440b      	add	r3, r1
 800d658:	3312      	adds	r3, #18
 800d65a:	881b      	ldrh	r3, [r3, #0]
 800d65c:	8bba      	ldrh	r2, [r7, #28]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d845      	bhi.n	800d6ee <etharp_find_entry+0x18a>
            old_queue = i;
 800d662:	8c3b      	ldrh	r3, [r7, #32]
 800d664:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d666:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d66a:	4973      	ldr	r1, [pc, #460]	; (800d838 <etharp_find_entry+0x2d4>)
 800d66c:	4613      	mov	r3, r2
 800d66e:	005b      	lsls	r3, r3, #1
 800d670:	4413      	add	r3, r2
 800d672:	00db      	lsls	r3, r3, #3
 800d674:	440b      	add	r3, r1
 800d676:	3312      	adds	r3, #18
 800d678:	881b      	ldrh	r3, [r3, #0]
 800d67a:	83bb      	strh	r3, [r7, #28]
 800d67c:	e037      	b.n	800d6ee <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d67e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d682:	496d      	ldr	r1, [pc, #436]	; (800d838 <etharp_find_entry+0x2d4>)
 800d684:	4613      	mov	r3, r2
 800d686:	005b      	lsls	r3, r3, #1
 800d688:	4413      	add	r3, r2
 800d68a:	00db      	lsls	r3, r3, #3
 800d68c:	440b      	add	r3, r1
 800d68e:	3312      	adds	r3, #18
 800d690:	881b      	ldrh	r3, [r3, #0]
 800d692:	8b7a      	ldrh	r2, [r7, #26]
 800d694:	429a      	cmp	r2, r3
 800d696:	d82a      	bhi.n	800d6ee <etharp_find_entry+0x18a>
            old_pending = i;
 800d698:	8c3b      	ldrh	r3, [r7, #32]
 800d69a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d69c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6a0:	4965      	ldr	r1, [pc, #404]	; (800d838 <etharp_find_entry+0x2d4>)
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	005b      	lsls	r3, r3, #1
 800d6a6:	4413      	add	r3, r2
 800d6a8:	00db      	lsls	r3, r3, #3
 800d6aa:	440b      	add	r3, r1
 800d6ac:	3312      	adds	r3, #18
 800d6ae:	881b      	ldrh	r3, [r3, #0]
 800d6b0:	837b      	strh	r3, [r7, #26]
 800d6b2:	e01c      	b.n	800d6ee <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d6b4:	7dfb      	ldrb	r3, [r7, #23]
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d919      	bls.n	800d6ee <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d6ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6be:	495e      	ldr	r1, [pc, #376]	; (800d838 <etharp_find_entry+0x2d4>)
 800d6c0:	4613      	mov	r3, r2
 800d6c2:	005b      	lsls	r3, r3, #1
 800d6c4:	4413      	add	r3, r2
 800d6c6:	00db      	lsls	r3, r3, #3
 800d6c8:	440b      	add	r3, r1
 800d6ca:	3312      	adds	r3, #18
 800d6cc:	881b      	ldrh	r3, [r3, #0]
 800d6ce:	8b3a      	ldrh	r2, [r7, #24]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d80c      	bhi.n	800d6ee <etharp_find_entry+0x18a>
            old_stable = i;
 800d6d4:	8c3b      	ldrh	r3, [r7, #32]
 800d6d6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d6d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6dc:	4956      	ldr	r1, [pc, #344]	; (800d838 <etharp_find_entry+0x2d4>)
 800d6de:	4613      	mov	r3, r2
 800d6e0:	005b      	lsls	r3, r3, #1
 800d6e2:	4413      	add	r3, r2
 800d6e4:	00db      	lsls	r3, r3, #3
 800d6e6:	440b      	add	r3, r1
 800d6e8:	3312      	adds	r3, #18
 800d6ea:	881b      	ldrh	r3, [r3, #0]
 800d6ec:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d6ee:	8c3b      	ldrh	r3, [r7, #32]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	843b      	strh	r3, [r7, #32]
 800d6f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d6fa:	2b09      	cmp	r3, #9
 800d6fc:	f77f af4c 	ble.w	800d598 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d700:	7afb      	ldrb	r3, [r7, #11]
 800d702:	f003 0302 	and.w	r3, r3, #2
 800d706:	2b00      	cmp	r3, #0
 800d708:	d108      	bne.n	800d71c <etharp_find_entry+0x1b8>
 800d70a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d70e:	2b0a      	cmp	r3, #10
 800d710:	d107      	bne.n	800d722 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d712:	7afb      	ldrb	r3, [r7, #11]
 800d714:	f003 0301 	and.w	r3, r3, #1
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d102      	bne.n	800d722 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d71c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d720:	e085      	b.n	800d82e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d722:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d726:	2b09      	cmp	r3, #9
 800d728:	dc02      	bgt.n	800d730 <etharp_find_entry+0x1cc>
    i = empty;
 800d72a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d72c:	843b      	strh	r3, [r7, #32]
 800d72e:	e039      	b.n	800d7a4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d730:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d734:	2b09      	cmp	r3, #9
 800d736:	dc14      	bgt.n	800d762 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d73a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d73c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d740:	493d      	ldr	r1, [pc, #244]	; (800d838 <etharp_find_entry+0x2d4>)
 800d742:	4613      	mov	r3, r2
 800d744:	005b      	lsls	r3, r3, #1
 800d746:	4413      	add	r3, r2
 800d748:	00db      	lsls	r3, r3, #3
 800d74a:	440b      	add	r3, r1
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d018      	beq.n	800d784 <etharp_find_entry+0x220>
 800d752:	4b3a      	ldr	r3, [pc, #232]	; (800d83c <etharp_find_entry+0x2d8>)
 800d754:	f240 126d 	movw	r2, #365	; 0x16d
 800d758:	493b      	ldr	r1, [pc, #236]	; (800d848 <etharp_find_entry+0x2e4>)
 800d75a:	483a      	ldr	r0, [pc, #232]	; (800d844 <etharp_find_entry+0x2e0>)
 800d75c:	f002 f9c8 	bl	800faf0 <iprintf>
 800d760:	e010      	b.n	800d784 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d762:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d766:	2b09      	cmp	r3, #9
 800d768:	dc02      	bgt.n	800d770 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d76a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d76c:	843b      	strh	r3, [r7, #32]
 800d76e:	e009      	b.n	800d784 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d770:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d774:	2b09      	cmp	r3, #9
 800d776:	dc02      	bgt.n	800d77e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d778:	8bfb      	ldrh	r3, [r7, #30]
 800d77a:	843b      	strh	r3, [r7, #32]
 800d77c:	e002      	b.n	800d784 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d77e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d782:	e054      	b.n	800d82e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d784:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d788:	2b09      	cmp	r3, #9
 800d78a:	dd06      	ble.n	800d79a <etharp_find_entry+0x236>
 800d78c:	4b2b      	ldr	r3, [pc, #172]	; (800d83c <etharp_find_entry+0x2d8>)
 800d78e:	f240 127f 	movw	r2, #383	; 0x17f
 800d792:	492e      	ldr	r1, [pc, #184]	; (800d84c <etharp_find_entry+0x2e8>)
 800d794:	482b      	ldr	r0, [pc, #172]	; (800d844 <etharp_find_entry+0x2e0>)
 800d796:	f002 f9ab 	bl	800faf0 <iprintf>
    etharp_free_entry(i);
 800d79a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7ff fe06 	bl	800d3b0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d7a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d7a8:	2b09      	cmp	r3, #9
 800d7aa:	dd06      	ble.n	800d7ba <etharp_find_entry+0x256>
 800d7ac:	4b23      	ldr	r3, [pc, #140]	; (800d83c <etharp_find_entry+0x2d8>)
 800d7ae:	f240 1283 	movw	r2, #387	; 0x183
 800d7b2:	4926      	ldr	r1, [pc, #152]	; (800d84c <etharp_find_entry+0x2e8>)
 800d7b4:	4823      	ldr	r0, [pc, #140]	; (800d844 <etharp_find_entry+0x2e0>)
 800d7b6:	f002 f99b 	bl	800faf0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d7ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7be:	491e      	ldr	r1, [pc, #120]	; (800d838 <etharp_find_entry+0x2d4>)
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	005b      	lsls	r3, r3, #1
 800d7c4:	4413      	add	r3, r2
 800d7c6:	00db      	lsls	r3, r3, #3
 800d7c8:	440b      	add	r3, r1
 800d7ca:	3314      	adds	r3, #20
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d006      	beq.n	800d7e0 <etharp_find_entry+0x27c>
 800d7d2:	4b1a      	ldr	r3, [pc, #104]	; (800d83c <etharp_find_entry+0x2d8>)
 800d7d4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d7d8:	491d      	ldr	r1, [pc, #116]	; (800d850 <etharp_find_entry+0x2ec>)
 800d7da:	481a      	ldr	r0, [pc, #104]	; (800d844 <etharp_find_entry+0x2e0>)
 800d7dc:	f002 f988 	bl	800faf0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00b      	beq.n	800d7fe <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d7e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6819      	ldr	r1, [r3, #0]
 800d7ee:	4812      	ldr	r0, [pc, #72]	; (800d838 <etharp_find_entry+0x2d4>)
 800d7f0:	4613      	mov	r3, r2
 800d7f2:	005b      	lsls	r3, r3, #1
 800d7f4:	4413      	add	r3, r2
 800d7f6:	00db      	lsls	r3, r3, #3
 800d7f8:	4403      	add	r3, r0
 800d7fa:	3304      	adds	r3, #4
 800d7fc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d7fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d802:	490d      	ldr	r1, [pc, #52]	; (800d838 <etharp_find_entry+0x2d4>)
 800d804:	4613      	mov	r3, r2
 800d806:	005b      	lsls	r3, r3, #1
 800d808:	4413      	add	r3, r2
 800d80a:	00db      	lsls	r3, r3, #3
 800d80c:	440b      	add	r3, r1
 800d80e:	3312      	adds	r3, #18
 800d810:	2200      	movs	r2, #0
 800d812:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d814:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d818:	4907      	ldr	r1, [pc, #28]	; (800d838 <etharp_find_entry+0x2d4>)
 800d81a:	4613      	mov	r3, r2
 800d81c:	005b      	lsls	r3, r3, #1
 800d81e:	4413      	add	r3, r2
 800d820:	00db      	lsls	r3, r3, #3
 800d822:	440b      	add	r3, r1
 800d824:	3308      	adds	r3, #8
 800d826:	687a      	ldr	r2, [r7, #4]
 800d828:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d82a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3728      	adds	r7, #40	; 0x28
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	20008810 	.word	0x20008810
 800d83c:	0801303c 	.word	0x0801303c
 800d840:	08013074 	.word	0x08013074
 800d844:	080130b4 	.word	0x080130b4
 800d848:	080130dc 	.word	0x080130dc
 800d84c:	080130f4 	.word	0x080130f4
 800d850:	08013108 	.word	0x08013108

0800d854 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b088      	sub	sp, #32
 800d858:	af02      	add	r7, sp, #8
 800d85a:	60f8      	str	r0, [r7, #12]
 800d85c:	60b9      	str	r1, [r7, #8]
 800d85e:	607a      	str	r2, [r7, #4]
 800d860:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d868:	2b06      	cmp	r3, #6
 800d86a:	d006      	beq.n	800d87a <etharp_update_arp_entry+0x26>
 800d86c:	4b48      	ldr	r3, [pc, #288]	; (800d990 <etharp_update_arp_entry+0x13c>)
 800d86e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d872:	4948      	ldr	r1, [pc, #288]	; (800d994 <etharp_update_arp_entry+0x140>)
 800d874:	4848      	ldr	r0, [pc, #288]	; (800d998 <etharp_update_arp_entry+0x144>)
 800d876:	f002 f93b 	bl	800faf0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d012      	beq.n	800d8a6 <etharp_update_arp_entry+0x52>
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d00e      	beq.n	800d8a6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	68f9      	ldr	r1, [r7, #12]
 800d88e:	4618      	mov	r0, r3
 800d890:	f001 f8fe 	bl	800ea90 <ip4_addr_isbroadcast_u32>
 800d894:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d896:	2b00      	cmp	r3, #0
 800d898:	d105      	bne.n	800d8a6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d8a2:	2be0      	cmp	r3, #224	; 0xe0
 800d8a4:	d102      	bne.n	800d8ac <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d8a6:	f06f 030f 	mvn.w	r3, #15
 800d8aa:	e06c      	b.n	800d986 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d8ac:	78fb      	ldrb	r3, [r7, #3]
 800d8ae:	68fa      	ldr	r2, [r7, #12]
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	68b8      	ldr	r0, [r7, #8]
 800d8b4:	f7ff fe56 	bl	800d564 <etharp_find_entry>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d8bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	da02      	bge.n	800d8ca <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d8c4:	8afb      	ldrh	r3, [r7, #22]
 800d8c6:	b25b      	sxtb	r3, r3
 800d8c8:	e05d      	b.n	800d986 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d8ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d8ce:	4933      	ldr	r1, [pc, #204]	; (800d99c <etharp_update_arp_entry+0x148>)
 800d8d0:	4613      	mov	r3, r2
 800d8d2:	005b      	lsls	r3, r3, #1
 800d8d4:	4413      	add	r3, r2
 800d8d6:	00db      	lsls	r3, r3, #3
 800d8d8:	440b      	add	r3, r1
 800d8da:	3314      	adds	r3, #20
 800d8dc:	2202      	movs	r2, #2
 800d8de:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d8e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d8e4:	492d      	ldr	r1, [pc, #180]	; (800d99c <etharp_update_arp_entry+0x148>)
 800d8e6:	4613      	mov	r3, r2
 800d8e8:	005b      	lsls	r3, r3, #1
 800d8ea:	4413      	add	r3, r2
 800d8ec:	00db      	lsls	r3, r3, #3
 800d8ee:	440b      	add	r3, r1
 800d8f0:	3308      	adds	r3, #8
 800d8f2:	68fa      	ldr	r2, [r7, #12]
 800d8f4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d8f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d8fa:	4613      	mov	r3, r2
 800d8fc:	005b      	lsls	r3, r3, #1
 800d8fe:	4413      	add	r3, r2
 800d900:	00db      	lsls	r3, r3, #3
 800d902:	3308      	adds	r3, #8
 800d904:	4a25      	ldr	r2, [pc, #148]	; (800d99c <etharp_update_arp_entry+0x148>)
 800d906:	4413      	add	r3, r2
 800d908:	3304      	adds	r3, #4
 800d90a:	2206      	movs	r2, #6
 800d90c:	6879      	ldr	r1, [r7, #4]
 800d90e:	4618      	mov	r0, r3
 800d910:	f002 f8d8 	bl	800fac4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d914:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d918:	4920      	ldr	r1, [pc, #128]	; (800d99c <etharp_update_arp_entry+0x148>)
 800d91a:	4613      	mov	r3, r2
 800d91c:	005b      	lsls	r3, r3, #1
 800d91e:	4413      	add	r3, r2
 800d920:	00db      	lsls	r3, r3, #3
 800d922:	440b      	add	r3, r1
 800d924:	3312      	adds	r3, #18
 800d926:	2200      	movs	r2, #0
 800d928:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d92a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d92e:	491b      	ldr	r1, [pc, #108]	; (800d99c <etharp_update_arp_entry+0x148>)
 800d930:	4613      	mov	r3, r2
 800d932:	005b      	lsls	r3, r3, #1
 800d934:	4413      	add	r3, r2
 800d936:	00db      	lsls	r3, r3, #3
 800d938:	440b      	add	r3, r1
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d021      	beq.n	800d984 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d940:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d944:	4915      	ldr	r1, [pc, #84]	; (800d99c <etharp_update_arp_entry+0x148>)
 800d946:	4613      	mov	r3, r2
 800d948:	005b      	lsls	r3, r3, #1
 800d94a:	4413      	add	r3, r2
 800d94c:	00db      	lsls	r3, r3, #3
 800d94e:	440b      	add	r3, r1
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d954:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d958:	4910      	ldr	r1, [pc, #64]	; (800d99c <etharp_update_arp_entry+0x148>)
 800d95a:	4613      	mov	r3, r2
 800d95c:	005b      	lsls	r3, r3, #1
 800d95e:	4413      	add	r3, r2
 800d960:	00db      	lsls	r3, r3, #3
 800d962:	440b      	add	r3, r1
 800d964:	2200      	movs	r2, #0
 800d966:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d96e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d972:	9300      	str	r3, [sp, #0]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6939      	ldr	r1, [r7, #16]
 800d978:	68f8      	ldr	r0, [r7, #12]
 800d97a:	f002 f827 	bl	800f9cc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d97e:	6938      	ldr	r0, [r7, #16]
 800d980:	f7f9 fb28 	bl	8006fd4 <pbuf_free>
  }
  return ERR_OK;
 800d984:	2300      	movs	r3, #0
}
 800d986:	4618      	mov	r0, r3
 800d988:	3718      	adds	r7, #24
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	0801303c 	.word	0x0801303c
 800d994:	08013134 	.word	0x08013134
 800d998:	080130b4 	.word	0x080130b4
 800d99c:	20008810 	.word	0x20008810

0800d9a0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	60fb      	str	r3, [r7, #12]
 800d9ac:	e01e      	b.n	800d9ec <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d9ae:	4913      	ldr	r1, [pc, #76]	; (800d9fc <etharp_cleanup_netif+0x5c>)
 800d9b0:	68fa      	ldr	r2, [r7, #12]
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	005b      	lsls	r3, r3, #1
 800d9b6:	4413      	add	r3, r2
 800d9b8:	00db      	lsls	r3, r3, #3
 800d9ba:	440b      	add	r3, r1
 800d9bc:	3314      	adds	r3, #20
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d9c2:	7afb      	ldrb	r3, [r7, #11]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d00e      	beq.n	800d9e6 <etharp_cleanup_netif+0x46>
 800d9c8:	490c      	ldr	r1, [pc, #48]	; (800d9fc <etharp_cleanup_netif+0x5c>)
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	4613      	mov	r3, r2
 800d9ce:	005b      	lsls	r3, r3, #1
 800d9d0:	4413      	add	r3, r2
 800d9d2:	00db      	lsls	r3, r3, #3
 800d9d4:	440b      	add	r3, r1
 800d9d6:	3308      	adds	r3, #8
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d102      	bne.n	800d9e6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	f7ff fce5 	bl	800d3b0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	60fb      	str	r3, [r7, #12]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2b09      	cmp	r3, #9
 800d9f0:	dddd      	ble.n	800d9ae <etharp_cleanup_netif+0xe>
    }
  }
}
 800d9f2:	bf00      	nop
 800d9f4:	bf00      	nop
 800d9f6:	3710      	adds	r7, #16
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	20008810 	.word	0x20008810

0800da00 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800da00:	b5b0      	push	{r4, r5, r7, lr}
 800da02:	b08a      	sub	sp, #40	; 0x28
 800da04:	af04      	add	r7, sp, #16
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d107      	bne.n	800da20 <etharp_input+0x20>
 800da10:	4b3d      	ldr	r3, [pc, #244]	; (800db08 <etharp_input+0x108>)
 800da12:	f240 228a 	movw	r2, #650	; 0x28a
 800da16:	493d      	ldr	r1, [pc, #244]	; (800db0c <etharp_input+0x10c>)
 800da18:	483d      	ldr	r0, [pc, #244]	; (800db10 <etharp_input+0x110>)
 800da1a:	f002 f869 	bl	800faf0 <iprintf>
 800da1e:	e06f      	b.n	800db00 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	881b      	ldrh	r3, [r3, #0]
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da30:	d10c      	bne.n	800da4c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800da36:	2b06      	cmp	r3, #6
 800da38:	d108      	bne.n	800da4c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800da3e:	2b04      	cmp	r3, #4
 800da40:	d104      	bne.n	800da4c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	885b      	ldrh	r3, [r3, #2]
 800da46:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800da48:	2b08      	cmp	r3, #8
 800da4a:	d003      	beq.n	800da54 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f7f9 fac1 	bl	8006fd4 <pbuf_free>
    return;
 800da52:	e055      	b.n	800db00 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	330e      	adds	r3, #14
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	3318      	adds	r3, #24
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	3304      	adds	r3, #4
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d102      	bne.n	800da74 <etharp_input+0x74>
    for_us = 0;
 800da6e:	2300      	movs	r3, #0
 800da70:	75fb      	strb	r3, [r7, #23]
 800da72:	e009      	b.n	800da88 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	3304      	adds	r3, #4
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	bf0c      	ite	eq
 800da80:	2301      	moveq	r3, #1
 800da82:	2300      	movne	r3, #0
 800da84:	b2db      	uxtb	r3, r3
 800da86:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	f103 0208 	add.w	r2, r3, #8
 800da8e:	7dfb      	ldrb	r3, [r7, #23]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d001      	beq.n	800da98 <etharp_input+0x98>
 800da94:	2301      	movs	r3, #1
 800da96:	e000      	b.n	800da9a <etharp_input+0x9a>
 800da98:	2302      	movs	r3, #2
 800da9a:	f107 010c 	add.w	r1, r7, #12
 800da9e:	6838      	ldr	r0, [r7, #0]
 800daa0:	f7ff fed8 	bl	800d854 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	88db      	ldrh	r3, [r3, #6]
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800daae:	d003      	beq.n	800dab8 <etharp_input+0xb8>
 800dab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dab4:	d01e      	beq.n	800daf4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800dab6:	e020      	b.n	800dafa <etharp_input+0xfa>
      if (for_us) {
 800dab8:	7dfb      	ldrb	r3, [r7, #23]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d01c      	beq.n	800daf8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800dad4:	693a      	ldr	r2, [r7, #16]
 800dad6:	3208      	adds	r2, #8
        etharp_raw(netif,
 800dad8:	2102      	movs	r1, #2
 800dada:	9103      	str	r1, [sp, #12]
 800dadc:	f107 010c 	add.w	r1, r7, #12
 800dae0:	9102      	str	r1, [sp, #8]
 800dae2:	9201      	str	r2, [sp, #4]
 800dae4:	9300      	str	r3, [sp, #0]
 800dae6:	462b      	mov	r3, r5
 800dae8:	4622      	mov	r2, r4
 800daea:	4601      	mov	r1, r0
 800daec:	6838      	ldr	r0, [r7, #0]
 800daee:	f000 faeb 	bl	800e0c8 <etharp_raw>
      break;
 800daf2:	e001      	b.n	800daf8 <etharp_input+0xf8>
      break;
 800daf4:	bf00      	nop
 800daf6:	e000      	b.n	800dafa <etharp_input+0xfa>
      break;
 800daf8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f7f9 fa6a 	bl	8006fd4 <pbuf_free>
}
 800db00:	3718      	adds	r7, #24
 800db02:	46bd      	mov	sp, r7
 800db04:	bdb0      	pop	{r4, r5, r7, pc}
 800db06:	bf00      	nop
 800db08:	0801303c 	.word	0x0801303c
 800db0c:	0801318c 	.word	0x0801318c
 800db10:	080130b4 	.word	0x080130b4

0800db14 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b086      	sub	sp, #24
 800db18:	af02      	add	r7, sp, #8
 800db1a:	60f8      	str	r0, [r7, #12]
 800db1c:	60b9      	str	r1, [r7, #8]
 800db1e:	4613      	mov	r3, r2
 800db20:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800db22:	79fa      	ldrb	r2, [r7, #7]
 800db24:	4944      	ldr	r1, [pc, #272]	; (800dc38 <etharp_output_to_arp_index+0x124>)
 800db26:	4613      	mov	r3, r2
 800db28:	005b      	lsls	r3, r3, #1
 800db2a:	4413      	add	r3, r2
 800db2c:	00db      	lsls	r3, r3, #3
 800db2e:	440b      	add	r3, r1
 800db30:	3314      	adds	r3, #20
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	2b01      	cmp	r3, #1
 800db36:	d806      	bhi.n	800db46 <etharp_output_to_arp_index+0x32>
 800db38:	4b40      	ldr	r3, [pc, #256]	; (800dc3c <etharp_output_to_arp_index+0x128>)
 800db3a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800db3e:	4940      	ldr	r1, [pc, #256]	; (800dc40 <etharp_output_to_arp_index+0x12c>)
 800db40:	4840      	ldr	r0, [pc, #256]	; (800dc44 <etharp_output_to_arp_index+0x130>)
 800db42:	f001 ffd5 	bl	800faf0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800db46:	79fa      	ldrb	r2, [r7, #7]
 800db48:	493b      	ldr	r1, [pc, #236]	; (800dc38 <etharp_output_to_arp_index+0x124>)
 800db4a:	4613      	mov	r3, r2
 800db4c:	005b      	lsls	r3, r3, #1
 800db4e:	4413      	add	r3, r2
 800db50:	00db      	lsls	r3, r3, #3
 800db52:	440b      	add	r3, r1
 800db54:	3314      	adds	r3, #20
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	2b02      	cmp	r3, #2
 800db5a:	d153      	bne.n	800dc04 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800db5c:	79fa      	ldrb	r2, [r7, #7]
 800db5e:	4936      	ldr	r1, [pc, #216]	; (800dc38 <etharp_output_to_arp_index+0x124>)
 800db60:	4613      	mov	r3, r2
 800db62:	005b      	lsls	r3, r3, #1
 800db64:	4413      	add	r3, r2
 800db66:	00db      	lsls	r3, r3, #3
 800db68:	440b      	add	r3, r1
 800db6a:	3312      	adds	r3, #18
 800db6c:	881b      	ldrh	r3, [r3, #0]
 800db6e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800db72:	d919      	bls.n	800dba8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800db74:	79fa      	ldrb	r2, [r7, #7]
 800db76:	4613      	mov	r3, r2
 800db78:	005b      	lsls	r3, r3, #1
 800db7a:	4413      	add	r3, r2
 800db7c:	00db      	lsls	r3, r3, #3
 800db7e:	4a2e      	ldr	r2, [pc, #184]	; (800dc38 <etharp_output_to_arp_index+0x124>)
 800db80:	4413      	add	r3, r2
 800db82:	3304      	adds	r3, #4
 800db84:	4619      	mov	r1, r3
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f000 fb4c 	bl	800e224 <etharp_request>
 800db8c:	4603      	mov	r3, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d138      	bne.n	800dc04 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800db92:	79fa      	ldrb	r2, [r7, #7]
 800db94:	4928      	ldr	r1, [pc, #160]	; (800dc38 <etharp_output_to_arp_index+0x124>)
 800db96:	4613      	mov	r3, r2
 800db98:	005b      	lsls	r3, r3, #1
 800db9a:	4413      	add	r3, r2
 800db9c:	00db      	lsls	r3, r3, #3
 800db9e:	440b      	add	r3, r1
 800dba0:	3314      	adds	r3, #20
 800dba2:	2203      	movs	r2, #3
 800dba4:	701a      	strb	r2, [r3, #0]
 800dba6:	e02d      	b.n	800dc04 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800dba8:	79fa      	ldrb	r2, [r7, #7]
 800dbaa:	4923      	ldr	r1, [pc, #140]	; (800dc38 <etharp_output_to_arp_index+0x124>)
 800dbac:	4613      	mov	r3, r2
 800dbae:	005b      	lsls	r3, r3, #1
 800dbb0:	4413      	add	r3, r2
 800dbb2:	00db      	lsls	r3, r3, #3
 800dbb4:	440b      	add	r3, r1
 800dbb6:	3312      	adds	r3, #18
 800dbb8:	881b      	ldrh	r3, [r3, #0]
 800dbba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800dbbe:	d321      	bcc.n	800dc04 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dbc0:	79fa      	ldrb	r2, [r7, #7]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	005b      	lsls	r3, r3, #1
 800dbc6:	4413      	add	r3, r2
 800dbc8:	00db      	lsls	r3, r3, #3
 800dbca:	4a1b      	ldr	r2, [pc, #108]	; (800dc38 <etharp_output_to_arp_index+0x124>)
 800dbcc:	4413      	add	r3, r2
 800dbce:	1d19      	adds	r1, r3, #4
 800dbd0:	79fa      	ldrb	r2, [r7, #7]
 800dbd2:	4613      	mov	r3, r2
 800dbd4:	005b      	lsls	r3, r3, #1
 800dbd6:	4413      	add	r3, r2
 800dbd8:	00db      	lsls	r3, r3, #3
 800dbda:	3308      	adds	r3, #8
 800dbdc:	4a16      	ldr	r2, [pc, #88]	; (800dc38 <etharp_output_to_arp_index+0x124>)
 800dbde:	4413      	add	r3, r2
 800dbe0:	3304      	adds	r3, #4
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f000 fafb 	bl	800e1e0 <etharp_request_dst>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d109      	bne.n	800dc04 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dbf0:	79fa      	ldrb	r2, [r7, #7]
 800dbf2:	4911      	ldr	r1, [pc, #68]	; (800dc38 <etharp_output_to_arp_index+0x124>)
 800dbf4:	4613      	mov	r3, r2
 800dbf6:	005b      	lsls	r3, r3, #1
 800dbf8:	4413      	add	r3, r2
 800dbfa:	00db      	lsls	r3, r3, #3
 800dbfc:	440b      	add	r3, r1
 800dbfe:	3314      	adds	r3, #20
 800dc00:	2203      	movs	r2, #3
 800dc02:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800dc0a:	79fa      	ldrb	r2, [r7, #7]
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	005b      	lsls	r3, r3, #1
 800dc10:	4413      	add	r3, r2
 800dc12:	00db      	lsls	r3, r3, #3
 800dc14:	3308      	adds	r3, #8
 800dc16:	4a08      	ldr	r2, [pc, #32]	; (800dc38 <etharp_output_to_arp_index+0x124>)
 800dc18:	4413      	add	r3, r2
 800dc1a:	3304      	adds	r3, #4
 800dc1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc20:	9200      	str	r2, [sp, #0]
 800dc22:	460a      	mov	r2, r1
 800dc24:	68b9      	ldr	r1, [r7, #8]
 800dc26:	68f8      	ldr	r0, [r7, #12]
 800dc28:	f001 fed0 	bl	800f9cc <ethernet_output>
 800dc2c:	4603      	mov	r3, r0
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3710      	adds	r7, #16
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
 800dc36:	bf00      	nop
 800dc38:	20008810 	.word	0x20008810
 800dc3c:	0801303c 	.word	0x0801303c
 800dc40:	080131ac 	.word	0x080131ac
 800dc44:	080130b4 	.word	0x080130b4

0800dc48 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b08a      	sub	sp, #40	; 0x28
 800dc4c:	af02      	add	r7, sp, #8
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d106      	bne.n	800dc6c <etharp_output+0x24>
 800dc5e:	4b73      	ldr	r3, [pc, #460]	; (800de2c <etharp_output+0x1e4>)
 800dc60:	f240 321e 	movw	r2, #798	; 0x31e
 800dc64:	4972      	ldr	r1, [pc, #456]	; (800de30 <etharp_output+0x1e8>)
 800dc66:	4873      	ldr	r0, [pc, #460]	; (800de34 <etharp_output+0x1ec>)
 800dc68:	f001 ff42 	bl	800faf0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d106      	bne.n	800dc80 <etharp_output+0x38>
 800dc72:	4b6e      	ldr	r3, [pc, #440]	; (800de2c <etharp_output+0x1e4>)
 800dc74:	f240 321f 	movw	r2, #799	; 0x31f
 800dc78:	496f      	ldr	r1, [pc, #444]	; (800de38 <etharp_output+0x1f0>)
 800dc7a:	486e      	ldr	r0, [pc, #440]	; (800de34 <etharp_output+0x1ec>)
 800dc7c:	f001 ff38 	bl	800faf0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d106      	bne.n	800dc94 <etharp_output+0x4c>
 800dc86:	4b69      	ldr	r3, [pc, #420]	; (800de2c <etharp_output+0x1e4>)
 800dc88:	f44f 7248 	mov.w	r2, #800	; 0x320
 800dc8c:	496b      	ldr	r1, [pc, #428]	; (800de3c <etharp_output+0x1f4>)
 800dc8e:	4869      	ldr	r0, [pc, #420]	; (800de34 <etharp_output+0x1ec>)
 800dc90:	f001 ff2e 	bl	800faf0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	68f9      	ldr	r1, [r7, #12]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 fef8 	bl	800ea90 <ip4_addr_isbroadcast_u32>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d002      	beq.n	800dcac <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800dca6:	4b66      	ldr	r3, [pc, #408]	; (800de40 <etharp_output+0x1f8>)
 800dca8:	61fb      	str	r3, [r7, #28]
 800dcaa:	e0af      	b.n	800de0c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcb4:	2be0      	cmp	r3, #224	; 0xe0
 800dcb6:	d118      	bne.n	800dcea <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800dcb8:	2301      	movs	r3, #1
 800dcba:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800dcc0:	235e      	movs	r3, #94	; 0x5e
 800dcc2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	3302      	adds	r3, #2
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	3303      	adds	r3, #3
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800dce2:	f107 0310 	add.w	r3, r7, #16
 800dce6:	61fb      	str	r3, [r7, #28]
 800dce8:	e090      	b.n	800de0c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	3304      	adds	r3, #4
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	405a      	eors	r2, r3
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	3308      	adds	r3, #8
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4013      	ands	r3, r2
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d012      	beq.n	800dd28 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dd08:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d00b      	beq.n	800dd28 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	330c      	adds	r3, #12
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d003      	beq.n	800dd22 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	330c      	adds	r3, #12
 800dd1e:	61bb      	str	r3, [r7, #24]
 800dd20:	e002      	b.n	800dd28 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800dd22:	f06f 0303 	mvn.w	r3, #3
 800dd26:	e07d      	b.n	800de24 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dd28:	4b46      	ldr	r3, [pc, #280]	; (800de44 <etharp_output+0x1fc>)
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	4a46      	ldr	r2, [pc, #280]	; (800de48 <etharp_output+0x200>)
 800dd30:	460b      	mov	r3, r1
 800dd32:	005b      	lsls	r3, r3, #1
 800dd34:	440b      	add	r3, r1
 800dd36:	00db      	lsls	r3, r3, #3
 800dd38:	4413      	add	r3, r2
 800dd3a:	3314      	adds	r3, #20
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d925      	bls.n	800dd8e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800dd42:	4b40      	ldr	r3, [pc, #256]	; (800de44 <etharp_output+0x1fc>)
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	4619      	mov	r1, r3
 800dd48:	4a3f      	ldr	r2, [pc, #252]	; (800de48 <etharp_output+0x200>)
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	005b      	lsls	r3, r3, #1
 800dd4e:	440b      	add	r3, r1
 800dd50:	00db      	lsls	r3, r3, #3
 800dd52:	4413      	add	r3, r2
 800dd54:	3308      	adds	r3, #8
 800dd56:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dd58:	68fa      	ldr	r2, [r7, #12]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d117      	bne.n	800dd8e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	681a      	ldr	r2, [r3, #0]
 800dd62:	4b38      	ldr	r3, [pc, #224]	; (800de44 <etharp_output+0x1fc>)
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	4618      	mov	r0, r3
 800dd68:	4937      	ldr	r1, [pc, #220]	; (800de48 <etharp_output+0x200>)
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	005b      	lsls	r3, r3, #1
 800dd6e:	4403      	add	r3, r0
 800dd70:	00db      	lsls	r3, r3, #3
 800dd72:	440b      	add	r3, r1
 800dd74:	3304      	adds	r3, #4
 800dd76:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d108      	bne.n	800dd8e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800dd7c:	4b31      	ldr	r3, [pc, #196]	; (800de44 <etharp_output+0x1fc>)
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	461a      	mov	r2, r3
 800dd82:	68b9      	ldr	r1, [r7, #8]
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f7ff fec5 	bl	800db14 <etharp_output_to_arp_index>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	e04a      	b.n	800de24 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dd8e:	2300      	movs	r3, #0
 800dd90:	75fb      	strb	r3, [r7, #23]
 800dd92:	e031      	b.n	800ddf8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dd94:	7dfa      	ldrb	r2, [r7, #23]
 800dd96:	492c      	ldr	r1, [pc, #176]	; (800de48 <etharp_output+0x200>)
 800dd98:	4613      	mov	r3, r2
 800dd9a:	005b      	lsls	r3, r3, #1
 800dd9c:	4413      	add	r3, r2
 800dd9e:	00db      	lsls	r3, r3, #3
 800dda0:	440b      	add	r3, r1
 800dda2:	3314      	adds	r3, #20
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	d923      	bls.n	800ddf2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ddaa:	7dfa      	ldrb	r2, [r7, #23]
 800ddac:	4926      	ldr	r1, [pc, #152]	; (800de48 <etharp_output+0x200>)
 800ddae:	4613      	mov	r3, r2
 800ddb0:	005b      	lsls	r3, r3, #1
 800ddb2:	4413      	add	r3, r2
 800ddb4:	00db      	lsls	r3, r3, #3
 800ddb6:	440b      	add	r3, r1
 800ddb8:	3308      	adds	r3, #8
 800ddba:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ddbc:	68fa      	ldr	r2, [r7, #12]
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d117      	bne.n	800ddf2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ddc2:	69bb      	ldr	r3, [r7, #24]
 800ddc4:	6819      	ldr	r1, [r3, #0]
 800ddc6:	7dfa      	ldrb	r2, [r7, #23]
 800ddc8:	481f      	ldr	r0, [pc, #124]	; (800de48 <etharp_output+0x200>)
 800ddca:	4613      	mov	r3, r2
 800ddcc:	005b      	lsls	r3, r3, #1
 800ddce:	4413      	add	r3, r2
 800ddd0:	00db      	lsls	r3, r3, #3
 800ddd2:	4403      	add	r3, r0
 800ddd4:	3304      	adds	r3, #4
 800ddd6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ddd8:	4299      	cmp	r1, r3
 800ddda:	d10a      	bne.n	800ddf2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800dddc:	4a19      	ldr	r2, [pc, #100]	; (800de44 <etharp_output+0x1fc>)
 800ddde:	7dfb      	ldrb	r3, [r7, #23]
 800dde0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800dde2:	7dfb      	ldrb	r3, [r7, #23]
 800dde4:	461a      	mov	r2, r3
 800dde6:	68b9      	ldr	r1, [r7, #8]
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f7ff fe93 	bl	800db14 <etharp_output_to_arp_index>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	e018      	b.n	800de24 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ddf2:	7dfb      	ldrb	r3, [r7, #23]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	75fb      	strb	r3, [r7, #23]
 800ddf8:	7dfb      	ldrb	r3, [r7, #23]
 800ddfa:	2b09      	cmp	r3, #9
 800ddfc:	d9ca      	bls.n	800dd94 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ddfe:	68ba      	ldr	r2, [r7, #8]
 800de00:	69b9      	ldr	r1, [r7, #24]
 800de02:	68f8      	ldr	r0, [r7, #12]
 800de04:	f000 f822 	bl	800de4c <etharp_query>
 800de08:	4603      	mov	r3, r0
 800de0a:	e00b      	b.n	800de24 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800de12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de16:	9300      	str	r3, [sp, #0]
 800de18:	69fb      	ldr	r3, [r7, #28]
 800de1a:	68b9      	ldr	r1, [r7, #8]
 800de1c:	68f8      	ldr	r0, [r7, #12]
 800de1e:	f001 fdd5 	bl	800f9cc <ethernet_output>
 800de22:	4603      	mov	r3, r0
}
 800de24:	4618      	mov	r0, r3
 800de26:	3720      	adds	r7, #32
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	0801303c 	.word	0x0801303c
 800de30:	0801318c 	.word	0x0801318c
 800de34:	080130b4 	.word	0x080130b4
 800de38:	080131dc 	.word	0x080131dc
 800de3c:	0801317c 	.word	0x0801317c
 800de40:	080137f8 	.word	0x080137f8
 800de44:	20008900 	.word	0x20008900
 800de48:	20008810 	.word	0x20008810

0800de4c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b08c      	sub	sp, #48	; 0x30
 800de50:	af02      	add	r7, sp, #8
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	60b9      	str	r1, [r7, #8]
 800de56:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	3326      	adds	r3, #38	; 0x26
 800de5c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800de5e:	23ff      	movs	r3, #255	; 0xff
 800de60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800de64:	2300      	movs	r3, #0
 800de66:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	68f9      	ldr	r1, [r7, #12]
 800de6e:	4618      	mov	r0, r3
 800de70:	f000 fe0e 	bl	800ea90 <ip4_addr_isbroadcast_u32>
 800de74:	4603      	mov	r3, r0
 800de76:	2b00      	cmp	r3, #0
 800de78:	d10c      	bne.n	800de94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800de82:	2be0      	cmp	r3, #224	; 0xe0
 800de84:	d006      	beq.n	800de94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d003      	beq.n	800de94 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d102      	bne.n	800de9a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800de94:	f06f 030f 	mvn.w	r3, #15
 800de98:	e101      	b.n	800e09e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800de9a:	68fa      	ldr	r2, [r7, #12]
 800de9c:	2101      	movs	r1, #1
 800de9e:	68b8      	ldr	r0, [r7, #8]
 800dea0:	f7ff fb60 	bl	800d564 <etharp_find_entry>
 800dea4:	4603      	mov	r3, r0
 800dea6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800dea8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800deac:	2b00      	cmp	r3, #0
 800deae:	da02      	bge.n	800deb6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800deb0:	8a7b      	ldrh	r3, [r7, #18]
 800deb2:	b25b      	sxtb	r3, r3
 800deb4:	e0f3      	b.n	800e09e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800deb6:	8a7b      	ldrh	r3, [r7, #18]
 800deb8:	2b7e      	cmp	r3, #126	; 0x7e
 800deba:	d906      	bls.n	800deca <etharp_query+0x7e>
 800debc:	4b7a      	ldr	r3, [pc, #488]	; (800e0a8 <etharp_query+0x25c>)
 800debe:	f240 32c1 	movw	r2, #961	; 0x3c1
 800dec2:	497a      	ldr	r1, [pc, #488]	; (800e0ac <etharp_query+0x260>)
 800dec4:	487a      	ldr	r0, [pc, #488]	; (800e0b0 <etharp_query+0x264>)
 800dec6:	f001 fe13 	bl	800faf0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800deca:	8a7b      	ldrh	r3, [r7, #18]
 800decc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800dece:	7c7a      	ldrb	r2, [r7, #17]
 800ded0:	4978      	ldr	r1, [pc, #480]	; (800e0b4 <etharp_query+0x268>)
 800ded2:	4613      	mov	r3, r2
 800ded4:	005b      	lsls	r3, r3, #1
 800ded6:	4413      	add	r3, r2
 800ded8:	00db      	lsls	r3, r3, #3
 800deda:	440b      	add	r3, r1
 800dedc:	3314      	adds	r3, #20
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d115      	bne.n	800df10 <etharp_query+0xc4>
    is_new_entry = 1;
 800dee4:	2301      	movs	r3, #1
 800dee6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800dee8:	7c7a      	ldrb	r2, [r7, #17]
 800deea:	4972      	ldr	r1, [pc, #456]	; (800e0b4 <etharp_query+0x268>)
 800deec:	4613      	mov	r3, r2
 800deee:	005b      	lsls	r3, r3, #1
 800def0:	4413      	add	r3, r2
 800def2:	00db      	lsls	r3, r3, #3
 800def4:	440b      	add	r3, r1
 800def6:	3314      	adds	r3, #20
 800def8:	2201      	movs	r2, #1
 800defa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800defc:	7c7a      	ldrb	r2, [r7, #17]
 800defe:	496d      	ldr	r1, [pc, #436]	; (800e0b4 <etharp_query+0x268>)
 800df00:	4613      	mov	r3, r2
 800df02:	005b      	lsls	r3, r3, #1
 800df04:	4413      	add	r3, r2
 800df06:	00db      	lsls	r3, r3, #3
 800df08:	440b      	add	r3, r1
 800df0a:	3308      	adds	r3, #8
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800df10:	7c7a      	ldrb	r2, [r7, #17]
 800df12:	4968      	ldr	r1, [pc, #416]	; (800e0b4 <etharp_query+0x268>)
 800df14:	4613      	mov	r3, r2
 800df16:	005b      	lsls	r3, r3, #1
 800df18:	4413      	add	r3, r2
 800df1a:	00db      	lsls	r3, r3, #3
 800df1c:	440b      	add	r3, r1
 800df1e:	3314      	adds	r3, #20
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	2b01      	cmp	r3, #1
 800df24:	d011      	beq.n	800df4a <etharp_query+0xfe>
 800df26:	7c7a      	ldrb	r2, [r7, #17]
 800df28:	4962      	ldr	r1, [pc, #392]	; (800e0b4 <etharp_query+0x268>)
 800df2a:	4613      	mov	r3, r2
 800df2c:	005b      	lsls	r3, r3, #1
 800df2e:	4413      	add	r3, r2
 800df30:	00db      	lsls	r3, r3, #3
 800df32:	440b      	add	r3, r1
 800df34:	3314      	adds	r3, #20
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d806      	bhi.n	800df4a <etharp_query+0xfe>
 800df3c:	4b5a      	ldr	r3, [pc, #360]	; (800e0a8 <etharp_query+0x25c>)
 800df3e:	f240 32cd 	movw	r2, #973	; 0x3cd
 800df42:	495d      	ldr	r1, [pc, #372]	; (800e0b8 <etharp_query+0x26c>)
 800df44:	485a      	ldr	r0, [pc, #360]	; (800e0b0 <etharp_query+0x264>)
 800df46:	f001 fdd3 	bl	800faf0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800df4a:	6a3b      	ldr	r3, [r7, #32]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d102      	bne.n	800df56 <etharp_query+0x10a>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d10c      	bne.n	800df70 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800df56:	68b9      	ldr	r1, [r7, #8]
 800df58:	68f8      	ldr	r0, [r7, #12]
 800df5a:	f000 f963 	bl	800e224 <etharp_request>
 800df5e:	4603      	mov	r3, r0
 800df60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d102      	bne.n	800df70 <etharp_query+0x124>
      return result;
 800df6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800df6e:	e096      	b.n	800e09e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d106      	bne.n	800df84 <etharp_query+0x138>
 800df76:	4b4c      	ldr	r3, [pc, #304]	; (800e0a8 <etharp_query+0x25c>)
 800df78:	f240 32e1 	movw	r2, #993	; 0x3e1
 800df7c:	494f      	ldr	r1, [pc, #316]	; (800e0bc <etharp_query+0x270>)
 800df7e:	484c      	ldr	r0, [pc, #304]	; (800e0b0 <etharp_query+0x264>)
 800df80:	f001 fdb6 	bl	800faf0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800df84:	7c7a      	ldrb	r2, [r7, #17]
 800df86:	494b      	ldr	r1, [pc, #300]	; (800e0b4 <etharp_query+0x268>)
 800df88:	4613      	mov	r3, r2
 800df8a:	005b      	lsls	r3, r3, #1
 800df8c:	4413      	add	r3, r2
 800df8e:	00db      	lsls	r3, r3, #3
 800df90:	440b      	add	r3, r1
 800df92:	3314      	adds	r3, #20
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	2b01      	cmp	r3, #1
 800df98:	d917      	bls.n	800dfca <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800df9a:	4a49      	ldr	r2, [pc, #292]	; (800e0c0 <etharp_query+0x274>)
 800df9c:	7c7b      	ldrb	r3, [r7, #17]
 800df9e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800dfa0:	7c7a      	ldrb	r2, [r7, #17]
 800dfa2:	4613      	mov	r3, r2
 800dfa4:	005b      	lsls	r3, r3, #1
 800dfa6:	4413      	add	r3, r2
 800dfa8:	00db      	lsls	r3, r3, #3
 800dfaa:	3308      	adds	r3, #8
 800dfac:	4a41      	ldr	r2, [pc, #260]	; (800e0b4 <etharp_query+0x268>)
 800dfae:	4413      	add	r3, r2
 800dfb0:	3304      	adds	r3, #4
 800dfb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dfb6:	9200      	str	r2, [sp, #0]
 800dfb8:	697a      	ldr	r2, [r7, #20]
 800dfba:	6879      	ldr	r1, [r7, #4]
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f001 fd05 	bl	800f9cc <ethernet_output>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfc8:	e067      	b.n	800e09a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dfca:	7c7a      	ldrb	r2, [r7, #17]
 800dfcc:	4939      	ldr	r1, [pc, #228]	; (800e0b4 <etharp_query+0x268>)
 800dfce:	4613      	mov	r3, r2
 800dfd0:	005b      	lsls	r3, r3, #1
 800dfd2:	4413      	add	r3, r2
 800dfd4:	00db      	lsls	r3, r3, #3
 800dfd6:	440b      	add	r3, r1
 800dfd8:	3314      	adds	r3, #20
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d15c      	bne.n	800e09a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800dfe8:	e01c      	b.n	800e024 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800dfea:	69fb      	ldr	r3, [r7, #28]
 800dfec:	895a      	ldrh	r2, [r3, #10]
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	891b      	ldrh	r3, [r3, #8]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d10a      	bne.n	800e00c <etharp_query+0x1c0>
 800dff6:	69fb      	ldr	r3, [r7, #28]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d006      	beq.n	800e00c <etharp_query+0x1c0>
 800dffe:	4b2a      	ldr	r3, [pc, #168]	; (800e0a8 <etharp_query+0x25c>)
 800e000:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e004:	492f      	ldr	r1, [pc, #188]	; (800e0c4 <etharp_query+0x278>)
 800e006:	482a      	ldr	r0, [pc, #168]	; (800e0b0 <etharp_query+0x264>)
 800e008:	f001 fd72 	bl	800faf0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	7b1b      	ldrb	r3, [r3, #12]
 800e010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e014:	2b00      	cmp	r3, #0
 800e016:	d002      	beq.n	800e01e <etharp_query+0x1d2>
        copy_needed = 1;
 800e018:	2301      	movs	r3, #1
 800e01a:	61bb      	str	r3, [r7, #24]
        break;
 800e01c:	e005      	b.n	800e02a <etharp_query+0x1de>
      }
      p = p->next;
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d1df      	bne.n	800dfea <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d007      	beq.n	800e040 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e036:	200e      	movs	r0, #14
 800e038:	f7f9 fa38 	bl	80074ac <pbuf_clone>
 800e03c:	61f8      	str	r0, [r7, #28]
 800e03e:	e004      	b.n	800e04a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e044:	69f8      	ldr	r0, [r7, #28]
 800e046:	f7f9 f865 	bl	8007114 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e04a:	69fb      	ldr	r3, [r7, #28]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d021      	beq.n	800e094 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e050:	7c7a      	ldrb	r2, [r7, #17]
 800e052:	4918      	ldr	r1, [pc, #96]	; (800e0b4 <etharp_query+0x268>)
 800e054:	4613      	mov	r3, r2
 800e056:	005b      	lsls	r3, r3, #1
 800e058:	4413      	add	r3, r2
 800e05a:	00db      	lsls	r3, r3, #3
 800e05c:	440b      	add	r3, r1
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d00a      	beq.n	800e07a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e064:	7c7a      	ldrb	r2, [r7, #17]
 800e066:	4913      	ldr	r1, [pc, #76]	; (800e0b4 <etharp_query+0x268>)
 800e068:	4613      	mov	r3, r2
 800e06a:	005b      	lsls	r3, r3, #1
 800e06c:	4413      	add	r3, r2
 800e06e:	00db      	lsls	r3, r3, #3
 800e070:	440b      	add	r3, r1
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4618      	mov	r0, r3
 800e076:	f7f8 ffad 	bl	8006fd4 <pbuf_free>
      }
      arp_table[i].q = p;
 800e07a:	7c7a      	ldrb	r2, [r7, #17]
 800e07c:	490d      	ldr	r1, [pc, #52]	; (800e0b4 <etharp_query+0x268>)
 800e07e:	4613      	mov	r3, r2
 800e080:	005b      	lsls	r3, r3, #1
 800e082:	4413      	add	r3, r2
 800e084:	00db      	lsls	r3, r3, #3
 800e086:	440b      	add	r3, r1
 800e088:	69fa      	ldr	r2, [r7, #28]
 800e08a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e08c:	2300      	movs	r3, #0
 800e08e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e092:	e002      	b.n	800e09a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e094:	23ff      	movs	r3, #255	; 0xff
 800e096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e09a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3728      	adds	r7, #40	; 0x28
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	0801303c 	.word	0x0801303c
 800e0ac:	080131e8 	.word	0x080131e8
 800e0b0:	080130b4 	.word	0x080130b4
 800e0b4:	20008810 	.word	0x20008810
 800e0b8:	080131f8 	.word	0x080131f8
 800e0bc:	080131dc 	.word	0x080131dc
 800e0c0:	20008900 	.word	0x20008900
 800e0c4:	08013220 	.word	0x08013220

0800e0c8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b08a      	sub	sp, #40	; 0x28
 800e0cc:	af02      	add	r7, sp, #8
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	607a      	str	r2, [r7, #4]
 800e0d4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d106      	bne.n	800e0ee <etharp_raw+0x26>
 800e0e0:	4b3a      	ldr	r3, [pc, #232]	; (800e1cc <etharp_raw+0x104>)
 800e0e2:	f240 4257 	movw	r2, #1111	; 0x457
 800e0e6:	493a      	ldr	r1, [pc, #232]	; (800e1d0 <etharp_raw+0x108>)
 800e0e8:	483a      	ldr	r0, [pc, #232]	; (800e1d4 <etharp_raw+0x10c>)
 800e0ea:	f001 fd01 	bl	800faf0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e0ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e0f2:	211c      	movs	r1, #28
 800e0f4:	200e      	movs	r0, #14
 800e0f6:	f7f8 fc89 	bl	8006a0c <pbuf_alloc>
 800e0fa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d102      	bne.n	800e108 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e106:	e05d      	b.n	800e1c4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e108:	69bb      	ldr	r3, [r7, #24]
 800e10a:	895b      	ldrh	r3, [r3, #10]
 800e10c:	2b1b      	cmp	r3, #27
 800e10e:	d806      	bhi.n	800e11e <etharp_raw+0x56>
 800e110:	4b2e      	ldr	r3, [pc, #184]	; (800e1cc <etharp_raw+0x104>)
 800e112:	f240 4262 	movw	r2, #1122	; 0x462
 800e116:	4930      	ldr	r1, [pc, #192]	; (800e1d8 <etharp_raw+0x110>)
 800e118:	482e      	ldr	r0, [pc, #184]	; (800e1d4 <etharp_raw+0x10c>)
 800e11a:	f001 fce9 	bl	800faf0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e124:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e126:	4618      	mov	r0, r3
 800e128:	f7f7 fbf6 	bl	8005918 <lwip_htons>
 800e12c:	4603      	mov	r3, r0
 800e12e:	461a      	mov	r2, r3
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e13a:	2b06      	cmp	r3, #6
 800e13c:	d006      	beq.n	800e14c <etharp_raw+0x84>
 800e13e:	4b23      	ldr	r3, [pc, #140]	; (800e1cc <etharp_raw+0x104>)
 800e140:	f240 4269 	movw	r2, #1129	; 0x469
 800e144:	4925      	ldr	r1, [pc, #148]	; (800e1dc <etharp_raw+0x114>)
 800e146:	4823      	ldr	r0, [pc, #140]	; (800e1d4 <etharp_raw+0x10c>)
 800e148:	f001 fcd2 	bl	800faf0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	3308      	adds	r3, #8
 800e150:	2206      	movs	r2, #6
 800e152:	6839      	ldr	r1, [r7, #0]
 800e154:	4618      	mov	r0, r3
 800e156:	f001 fcb5 	bl	800fac4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	3312      	adds	r3, #18
 800e15e:	2206      	movs	r2, #6
 800e160:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e162:	4618      	mov	r0, r3
 800e164:	f001 fcae 	bl	800fac4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	330e      	adds	r3, #14
 800e16c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e16e:	6812      	ldr	r2, [r2, #0]
 800e170:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	3318      	adds	r3, #24
 800e176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e178:	6812      	ldr	r2, [r2, #0]
 800e17a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	2200      	movs	r2, #0
 800e180:	701a      	strb	r2, [r3, #0]
 800e182:	2200      	movs	r2, #0
 800e184:	f042 0201 	orr.w	r2, r2, #1
 800e188:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	2200      	movs	r2, #0
 800e18e:	f042 0208 	orr.w	r2, r2, #8
 800e192:	709a      	strb	r2, [r3, #2]
 800e194:	2200      	movs	r2, #0
 800e196:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	2206      	movs	r2, #6
 800e19c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	2204      	movs	r2, #4
 800e1a2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e1a4:	f640 0306 	movw	r3, #2054	; 0x806
 800e1a8:	9300      	str	r3, [sp, #0]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	68ba      	ldr	r2, [r7, #8]
 800e1ae:	69b9      	ldr	r1, [r7, #24]
 800e1b0:	68f8      	ldr	r0, [r7, #12]
 800e1b2:	f001 fc0b 	bl	800f9cc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e1b6:	69b8      	ldr	r0, [r7, #24]
 800e1b8:	f7f8 ff0c 	bl	8006fd4 <pbuf_free>
  p = NULL;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e1c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3720      	adds	r7, #32
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	0801303c 	.word	0x0801303c
 800e1d0:	0801318c 	.word	0x0801318c
 800e1d4:	080130b4 	.word	0x080130b4
 800e1d8:	0801323c 	.word	0x0801323c
 800e1dc:	08013270 	.word	0x08013270

0800e1e0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b088      	sub	sp, #32
 800e1e4:	af04      	add	r7, sp, #16
 800e1e6:	60f8      	str	r0, [r7, #12]
 800e1e8:	60b9      	str	r1, [r7, #8]
 800e1ea:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	9203      	str	r2, [sp, #12]
 800e200:	68ba      	ldr	r2, [r7, #8]
 800e202:	9202      	str	r2, [sp, #8]
 800e204:	4a06      	ldr	r2, [pc, #24]	; (800e220 <etharp_request_dst+0x40>)
 800e206:	9201      	str	r2, [sp, #4]
 800e208:	9300      	str	r3, [sp, #0]
 800e20a:	4603      	mov	r3, r0
 800e20c:	687a      	ldr	r2, [r7, #4]
 800e20e:	68f8      	ldr	r0, [r7, #12]
 800e210:	f7ff ff5a 	bl	800e0c8 <etharp_raw>
 800e214:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e216:	4618      	mov	r0, r3
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	08013800 	.word	0x08013800

0800e224 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e22e:	4a05      	ldr	r2, [pc, #20]	; (800e244 <etharp_request+0x20>)
 800e230:	6839      	ldr	r1, [r7, #0]
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f7ff ffd4 	bl	800e1e0 <etharp_request_dst>
 800e238:	4603      	mov	r3, r0
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3708      	adds	r7, #8
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	080137f8 	.word	0x080137f8

0800e248 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b08e      	sub	sp, #56	; 0x38
 800e24c:	af04      	add	r7, sp, #16
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e252:	4b79      	ldr	r3, [pc, #484]	; (800e438 <icmp_input+0x1f0>)
 800e254:	689b      	ldr	r3, [r3, #8]
 800e256:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	f003 030f 	and.w	r3, r3, #15
 800e260:	b2db      	uxtb	r3, r3
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	b2db      	uxtb	r3, r3
 800e266:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e268:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e26a:	2b13      	cmp	r3, #19
 800e26c:	f240 80cd 	bls.w	800e40a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	895b      	ldrh	r3, [r3, #10]
 800e274:	2b03      	cmp	r3, #3
 800e276:	f240 80ca 	bls.w	800e40e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e284:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e288:	2b00      	cmp	r3, #0
 800e28a:	f000 80b7 	beq.w	800e3fc <icmp_input+0x1b4>
 800e28e:	2b08      	cmp	r3, #8
 800e290:	f040 80b7 	bne.w	800e402 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e294:	4b69      	ldr	r3, [pc, #420]	; (800e43c <icmp_input+0x1f4>)
 800e296:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e298:	4b67      	ldr	r3, [pc, #412]	; (800e438 <icmp_input+0x1f0>)
 800e29a:	695b      	ldr	r3, [r3, #20]
 800e29c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2a0:	2be0      	cmp	r3, #224	; 0xe0
 800e2a2:	f000 80bb 	beq.w	800e41c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e2a6:	4b64      	ldr	r3, [pc, #400]	; (800e438 <icmp_input+0x1f0>)
 800e2a8:	695b      	ldr	r3, [r3, #20]
 800e2aa:	4a63      	ldr	r2, [pc, #396]	; (800e438 <icmp_input+0x1f0>)
 800e2ac:	6812      	ldr	r2, [r2, #0]
 800e2ae:	4611      	mov	r1, r2
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f000 fbed 	bl	800ea90 <ip4_addr_isbroadcast_u32>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	f040 80b1 	bne.w	800e420 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	891b      	ldrh	r3, [r3, #8]
 800e2c2:	2b07      	cmp	r3, #7
 800e2c4:	f240 80a5 	bls.w	800e412 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e2c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2ca:	330e      	adds	r3, #14
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f7f8 fdea 	bl	8006ea8 <pbuf_add_header>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d04b      	beq.n	800e372 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	891a      	ldrh	r2, [r3, #8]
 800e2de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2e0:	4413      	add	r3, r2
 800e2e2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	891b      	ldrh	r3, [r3, #8]
 800e2e8:	8b7a      	ldrh	r2, [r7, #26]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	f0c0 809a 	bcc.w	800e424 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e2f0:	8b7b      	ldrh	r3, [r7, #26]
 800e2f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	200e      	movs	r0, #14
 800e2fa:	f7f8 fb87 	bl	8006a0c <pbuf_alloc>
 800e2fe:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	2b00      	cmp	r3, #0
 800e304:	f000 8090 	beq.w	800e428 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	895b      	ldrh	r3, [r3, #10]
 800e30c:	461a      	mov	r2, r3
 800e30e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e310:	3308      	adds	r3, #8
 800e312:	429a      	cmp	r2, r3
 800e314:	d203      	bcs.n	800e31e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e316:	6978      	ldr	r0, [r7, #20]
 800e318:	f7f8 fe5c 	bl	8006fd4 <pbuf_free>
          goto icmperr;
 800e31c:	e085      	b.n	800e42a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e326:	4618      	mov	r0, r3
 800e328:	f001 fbcc 	bl	800fac4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e32c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e32e:	4619      	mov	r1, r3
 800e330:	6978      	ldr	r0, [r7, #20]
 800e332:	f7f8 fdc9 	bl	8006ec8 <pbuf_remove_header>
 800e336:	4603      	mov	r3, r0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d009      	beq.n	800e350 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e33c:	4b40      	ldr	r3, [pc, #256]	; (800e440 <icmp_input+0x1f8>)
 800e33e:	22b6      	movs	r2, #182	; 0xb6
 800e340:	4940      	ldr	r1, [pc, #256]	; (800e444 <icmp_input+0x1fc>)
 800e342:	4841      	ldr	r0, [pc, #260]	; (800e448 <icmp_input+0x200>)
 800e344:	f001 fbd4 	bl	800faf0 <iprintf>
          pbuf_free(r);
 800e348:	6978      	ldr	r0, [r7, #20]
 800e34a:	f7f8 fe43 	bl	8006fd4 <pbuf_free>
          goto icmperr;
 800e34e:	e06c      	b.n	800e42a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e350:	6879      	ldr	r1, [r7, #4]
 800e352:	6978      	ldr	r0, [r7, #20]
 800e354:	f7f8 ff66 	bl	8007224 <pbuf_copy>
 800e358:	4603      	mov	r3, r0
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d003      	beq.n	800e366 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e35e:	6978      	ldr	r0, [r7, #20]
 800e360:	f7f8 fe38 	bl	8006fd4 <pbuf_free>
          goto icmperr;
 800e364:	e061      	b.n	800e42a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f7f8 fe34 	bl	8006fd4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	607b      	str	r3, [r7, #4]
 800e370:	e00f      	b.n	800e392 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e372:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e374:	330e      	adds	r3, #14
 800e376:	4619      	mov	r1, r3
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7f8 fda5 	bl	8006ec8 <pbuf_remove_header>
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	d006      	beq.n	800e392 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e384:	4b2e      	ldr	r3, [pc, #184]	; (800e440 <icmp_input+0x1f8>)
 800e386:	22c7      	movs	r2, #199	; 0xc7
 800e388:	4930      	ldr	r1, [pc, #192]	; (800e44c <icmp_input+0x204>)
 800e38a:	482f      	ldr	r0, [pc, #188]	; (800e448 <icmp_input+0x200>)
 800e38c:	f001 fbb0 	bl	800faf0 <iprintf>
          goto icmperr;
 800e390:	e04b      	b.n	800e42a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e398:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e39a:	4619      	mov	r1, r3
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f7f8 fd83 	bl	8006ea8 <pbuf_add_header>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d12b      	bne.n	800e400 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e3ae:	69fb      	ldr	r3, [r7, #28]
 800e3b0:	681a      	ldr	r2, [r3, #0]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e3b6:	4b20      	ldr	r3, [pc, #128]	; (800e438 <icmp_input+0x1f0>)
 800e3b8:	691a      	ldr	r2, [r3, #16]
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	709a      	strb	r2, [r3, #2]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	22ff      	movs	r2, #255	; 0xff
 800e3d2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	729a      	strb	r2, [r3, #10]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	9302      	str	r3, [sp, #8]
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	9301      	str	r3, [sp, #4]
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	23ff      	movs	r3, #255	; 0xff
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	69f9      	ldr	r1, [r7, #28]
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 fa75 	bl	800e8e0 <ip4_output_if>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e3fa:	e001      	b.n	800e400 <icmp_input+0x1b8>
      break;
 800e3fc:	bf00      	nop
 800e3fe:	e000      	b.n	800e402 <icmp_input+0x1ba>
      break;
 800e400:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7f8 fde6 	bl	8006fd4 <pbuf_free>
  return;
 800e408:	e013      	b.n	800e432 <icmp_input+0x1ea>
    goto lenerr;
 800e40a:	bf00      	nop
 800e40c:	e002      	b.n	800e414 <icmp_input+0x1cc>
    goto lenerr;
 800e40e:	bf00      	nop
 800e410:	e000      	b.n	800e414 <icmp_input+0x1cc>
        goto lenerr;
 800e412:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7f8 fddd 	bl	8006fd4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e41a:	e00a      	b.n	800e432 <icmp_input+0x1ea>
        goto icmperr;
 800e41c:	bf00      	nop
 800e41e:	e004      	b.n	800e42a <icmp_input+0x1e2>
        goto icmperr;
 800e420:	bf00      	nop
 800e422:	e002      	b.n	800e42a <icmp_input+0x1e2>
          goto icmperr;
 800e424:	bf00      	nop
 800e426:	e000      	b.n	800e42a <icmp_input+0x1e2>
          goto icmperr;
 800e428:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f7f8 fdd2 	bl	8006fd4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e430:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e432:	3728      	adds	r7, #40	; 0x28
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	20005240 	.word	0x20005240
 800e43c:	20005254 	.word	0x20005254
 800e440:	080132b4 	.word	0x080132b4
 800e444:	080132ec 	.word	0x080132ec
 800e448:	08013324 	.word	0x08013324
 800e44c:	0801334c 	.word	0x0801334c

0800e450 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	460b      	mov	r3, r1
 800e45a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e45c:	78fb      	ldrb	r3, [r7, #3]
 800e45e:	461a      	mov	r2, r3
 800e460:	2103      	movs	r1, #3
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 f814 	bl	800e490 <icmp_send_response>
}
 800e468:	bf00      	nop
 800e46a:	3708      	adds	r7, #8
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	460b      	mov	r3, r1
 800e47a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e47c:	78fb      	ldrb	r3, [r7, #3]
 800e47e:	461a      	mov	r2, r3
 800e480:	210b      	movs	r1, #11
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 f804 	bl	800e490 <icmp_send_response>
}
 800e488:	bf00      	nop
 800e48a:	3708      	adds	r7, #8
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b08c      	sub	sp, #48	; 0x30
 800e494:	af04      	add	r7, sp, #16
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	460b      	mov	r3, r1
 800e49a:	70fb      	strb	r3, [r7, #3]
 800e49c:	4613      	mov	r3, r2
 800e49e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e4a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e4a4:	2124      	movs	r1, #36	; 0x24
 800e4a6:	2022      	movs	r0, #34	; 0x22
 800e4a8:	f7f8 fab0 	bl	8006a0c <pbuf_alloc>
 800e4ac:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d04c      	beq.n	800e54e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	895b      	ldrh	r3, [r3, #10]
 800e4b8:	2b23      	cmp	r3, #35	; 0x23
 800e4ba:	d806      	bhi.n	800e4ca <icmp_send_response+0x3a>
 800e4bc:	4b26      	ldr	r3, [pc, #152]	; (800e558 <icmp_send_response+0xc8>)
 800e4be:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e4c2:	4926      	ldr	r1, [pc, #152]	; (800e55c <icmp_send_response+0xcc>)
 800e4c4:	4826      	ldr	r0, [pc, #152]	; (800e560 <icmp_send_response+0xd0>)
 800e4c6:	f001 fb13 	bl	800faf0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	78fa      	ldrb	r2, [r7, #3]
 800e4da:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	78ba      	ldrb	r2, [r7, #2]
 800e4e0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	711a      	strb	r2, [r3, #4]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	719a      	strb	r2, [r3, #6]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e4f6:	69fb      	ldr	r3, [r7, #28]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	f103 0008 	add.w	r0, r3, #8
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	221c      	movs	r2, #28
 800e504:	4619      	mov	r1, r3
 800e506:	f001 fadd 	bl	800fac4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e50a:	69bb      	ldr	r3, [r7, #24]
 800e50c:	68db      	ldr	r3, [r3, #12]
 800e50e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e510:	f107 030c 	add.w	r3, r7, #12
 800e514:	4618      	mov	r0, r3
 800e516:	f000 f825 	bl	800e564 <ip4_route>
 800e51a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d011      	beq.n	800e546 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	2200      	movs	r2, #0
 800e526:	709a      	strb	r2, [r3, #2]
 800e528:	2200      	movs	r2, #0
 800e52a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e52c:	f107 020c 	add.w	r2, r7, #12
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	9302      	str	r3, [sp, #8]
 800e534:	2301      	movs	r3, #1
 800e536:	9301      	str	r3, [sp, #4]
 800e538:	2300      	movs	r3, #0
 800e53a:	9300      	str	r3, [sp, #0]
 800e53c:	23ff      	movs	r3, #255	; 0xff
 800e53e:	2100      	movs	r1, #0
 800e540:	69f8      	ldr	r0, [r7, #28]
 800e542:	f000 f9cd 	bl	800e8e0 <ip4_output_if>
  }
  pbuf_free(q);
 800e546:	69f8      	ldr	r0, [r7, #28]
 800e548:	f7f8 fd44 	bl	8006fd4 <pbuf_free>
 800e54c:	e000      	b.n	800e550 <icmp_send_response+0xc0>
    return;
 800e54e:	bf00      	nop
}
 800e550:	3720      	adds	r7, #32
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	080132b4 	.word	0x080132b4
 800e55c:	08013380 	.word	0x08013380
 800e560:	08013324 	.word	0x08013324

0800e564 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e564:	b480      	push	{r7}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e56c:	4b33      	ldr	r3, [pc, #204]	; (800e63c <ip4_route+0xd8>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	60fb      	str	r3, [r7, #12]
 800e572:	e036      	b.n	800e5e2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e57a:	f003 0301 	and.w	r3, r3, #1
 800e57e:	b2db      	uxtb	r3, r3
 800e580:	2b00      	cmp	r3, #0
 800e582:	d02b      	beq.n	800e5dc <ip4_route+0x78>
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e58a:	089b      	lsrs	r3, r3, #2
 800e58c:	f003 0301 	and.w	r3, r3, #1
 800e590:	b2db      	uxtb	r3, r3
 800e592:	2b00      	cmp	r3, #0
 800e594:	d022      	beq.n	800e5dc <ip4_route+0x78>
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	3304      	adds	r3, #4
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d01d      	beq.n	800e5dc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	3304      	adds	r3, #4
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	405a      	eors	r2, r3
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	3308      	adds	r3, #8
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4013      	ands	r3, r2
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d101      	bne.n	800e5bc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	e038      	b.n	800e62e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e5c2:	f003 0302 	and.w	r3, r3, #2
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d108      	bne.n	800e5dc <ip4_route+0x78>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681a      	ldr	r2, [r3, #0]
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	330c      	adds	r3, #12
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d101      	bne.n	800e5dc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	e028      	b.n	800e62e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	60fb      	str	r3, [r7, #12]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1c5      	bne.n	800e574 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e5e8:	4b15      	ldr	r3, [pc, #84]	; (800e640 <ip4_route+0xdc>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d01a      	beq.n	800e626 <ip4_route+0xc2>
 800e5f0:	4b13      	ldr	r3, [pc, #76]	; (800e640 <ip4_route+0xdc>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e5f8:	f003 0301 	and.w	r3, r3, #1
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d012      	beq.n	800e626 <ip4_route+0xc2>
 800e600:	4b0f      	ldr	r3, [pc, #60]	; (800e640 <ip4_route+0xdc>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e608:	f003 0304 	and.w	r3, r3, #4
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d00a      	beq.n	800e626 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e610:	4b0b      	ldr	r3, [pc, #44]	; (800e640 <ip4_route+0xdc>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	3304      	adds	r3, #4
 800e616:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d004      	beq.n	800e626 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	b2db      	uxtb	r3, r3
 800e622:	2b7f      	cmp	r3, #127	; 0x7f
 800e624:	d101      	bne.n	800e62a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e626:	2300      	movs	r3, #0
 800e628:	e001      	b.n	800e62e <ip4_route+0xca>
  }

  return netif_default;
 800e62a:	4b05      	ldr	r3, [pc, #20]	; (800e640 <ip4_route+0xdc>)
 800e62c:	681b      	ldr	r3, [r3, #0]
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3714      	adds	r7, #20
 800e632:	46bd      	mov	sp, r7
 800e634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e638:	4770      	bx	lr
 800e63a:	bf00      	nop
 800e63c:	200087a4 	.word	0x200087a4
 800e640:	200087a8 	.word	0x200087a8

0800e644 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e652:	f003 0301 	and.w	r3, r3, #1
 800e656:	b2db      	uxtb	r3, r3
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d016      	beq.n	800e68a <ip4_input_accept+0x46>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	3304      	adds	r3, #4
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d011      	beq.n	800e68a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e666:	4b0b      	ldr	r3, [pc, #44]	; (800e694 <ip4_input_accept+0x50>)
 800e668:	695a      	ldr	r2, [r3, #20]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	3304      	adds	r3, #4
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	429a      	cmp	r2, r3
 800e672:	d008      	beq.n	800e686 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e674:	4b07      	ldr	r3, [pc, #28]	; (800e694 <ip4_input_accept+0x50>)
 800e676:	695b      	ldr	r3, [r3, #20]
 800e678:	6879      	ldr	r1, [r7, #4]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f000 fa08 	bl	800ea90 <ip4_addr_isbroadcast_u32>
 800e680:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e682:	2b00      	cmp	r3, #0
 800e684:	d001      	beq.n	800e68a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e686:	2301      	movs	r3, #1
 800e688:	e000      	b.n	800e68c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3708      	adds	r7, #8
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}
 800e694:	20005240 	.word	0x20005240

0800e698 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b086      	sub	sp, #24
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	091b      	lsrs	r3, r3, #4
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	2b04      	cmp	r3, #4
 800e6b2:	d004      	beq.n	800e6be <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7f8 fc8d 	bl	8006fd4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	e107      	b.n	800e8ce <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	f003 030f 	and.w	r3, r3, #15
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	b2db      	uxtb	r3, r3
 800e6cc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	885b      	ldrh	r3, [r3, #2]
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7f7 f91f 	bl	8005918 <lwip_htons>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	891b      	ldrh	r3, [r3, #8]
 800e6e2:	89ba      	ldrh	r2, [r7, #12]
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d204      	bcs.n	800e6f2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e6e8:	89bb      	ldrh	r3, [r7, #12]
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f7f8 faeb 	bl	8006cc8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	895b      	ldrh	r3, [r3, #10]
 800e6f6:	89fa      	ldrh	r2, [r7, #14]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d807      	bhi.n	800e70c <ip4_input+0x74>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	891b      	ldrh	r3, [r3, #8]
 800e700:	89ba      	ldrh	r2, [r7, #12]
 800e702:	429a      	cmp	r2, r3
 800e704:	d802      	bhi.n	800e70c <ip4_input+0x74>
 800e706:	89fb      	ldrh	r3, [r7, #14]
 800e708:	2b13      	cmp	r3, #19
 800e70a:	d804      	bhi.n	800e716 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f7f8 fc61 	bl	8006fd4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e712:	2300      	movs	r3, #0
 800e714:	e0db      	b.n	800e8ce <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	691b      	ldr	r3, [r3, #16]
 800e71a:	4a6f      	ldr	r2, [pc, #444]	; (800e8d8 <ip4_input+0x240>)
 800e71c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	4a6d      	ldr	r2, [pc, #436]	; (800e8d8 <ip4_input+0x240>)
 800e724:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e726:	4b6c      	ldr	r3, [pc, #432]	; (800e8d8 <ip4_input+0x240>)
 800e728:	695b      	ldr	r3, [r3, #20]
 800e72a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e72e:	2be0      	cmp	r3, #224	; 0xe0
 800e730:	d112      	bne.n	800e758 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e738:	f003 0301 	and.w	r3, r3, #1
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d007      	beq.n	800e752 <ip4_input+0xba>
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	3304      	adds	r3, #4
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d002      	beq.n	800e752 <ip4_input+0xba>
      netif = inp;
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	613b      	str	r3, [r7, #16]
 800e750:	e02a      	b.n	800e7a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e752:	2300      	movs	r3, #0
 800e754:	613b      	str	r3, [r7, #16]
 800e756:	e027      	b.n	800e7a8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e758:	6838      	ldr	r0, [r7, #0]
 800e75a:	f7ff ff73 	bl	800e644 <ip4_input_accept>
 800e75e:	4603      	mov	r3, r0
 800e760:	2b00      	cmp	r3, #0
 800e762:	d002      	beq.n	800e76a <ip4_input+0xd2>
      netif = inp;
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	613b      	str	r3, [r7, #16]
 800e768:	e01e      	b.n	800e7a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e76a:	2300      	movs	r3, #0
 800e76c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e76e:	4b5a      	ldr	r3, [pc, #360]	; (800e8d8 <ip4_input+0x240>)
 800e770:	695b      	ldr	r3, [r3, #20]
 800e772:	b2db      	uxtb	r3, r3
 800e774:	2b7f      	cmp	r3, #127	; 0x7f
 800e776:	d017      	beq.n	800e7a8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e778:	4b58      	ldr	r3, [pc, #352]	; (800e8dc <ip4_input+0x244>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	613b      	str	r3, [r7, #16]
 800e77e:	e00e      	b.n	800e79e <ip4_input+0x106>
          if (netif == inp) {
 800e780:	693a      	ldr	r2, [r7, #16]
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	429a      	cmp	r2, r3
 800e786:	d006      	beq.n	800e796 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e788:	6938      	ldr	r0, [r7, #16]
 800e78a:	f7ff ff5b 	bl	800e644 <ip4_input_accept>
 800e78e:	4603      	mov	r3, r0
 800e790:	2b00      	cmp	r3, #0
 800e792:	d108      	bne.n	800e7a6 <ip4_input+0x10e>
 800e794:	e000      	b.n	800e798 <ip4_input+0x100>
            continue;
 800e796:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	613b      	str	r3, [r7, #16]
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d1ed      	bne.n	800e780 <ip4_input+0xe8>
 800e7a4:	e000      	b.n	800e7a8 <ip4_input+0x110>
            break;
 800e7a6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e7a8:	4b4b      	ldr	r3, [pc, #300]	; (800e8d8 <ip4_input+0x240>)
 800e7aa:	691b      	ldr	r3, [r3, #16]
 800e7ac:	6839      	ldr	r1, [r7, #0]
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f000 f96e 	bl	800ea90 <ip4_addr_isbroadcast_u32>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d105      	bne.n	800e7c6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e7ba:	4b47      	ldr	r3, [pc, #284]	; (800e8d8 <ip4_input+0x240>)
 800e7bc:	691b      	ldr	r3, [r3, #16]
 800e7be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e7c2:	2be0      	cmp	r3, #224	; 0xe0
 800e7c4:	d104      	bne.n	800e7d0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f7f8 fc04 	bl	8006fd4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	e07e      	b.n	800e8ce <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d104      	bne.n	800e7e0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f7f8 fbfc 	bl	8006fd4 <pbuf_free>
    return ERR_OK;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	e076      	b.n	800e8ce <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	88db      	ldrh	r3, [r3, #6]
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e7ec:	4013      	ands	r3, r2
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d00b      	beq.n	800e80a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 fd22 	bl	800f23c <ip4_reass>
 800e7f8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d101      	bne.n	800e804 <ip4_input+0x16c>
      return ERR_OK;
 800e800:	2300      	movs	r3, #0
 800e802:	e064      	b.n	800e8ce <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e80a:	4a33      	ldr	r2, [pc, #204]	; (800e8d8 <ip4_input+0x240>)
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e810:	4a31      	ldr	r2, [pc, #196]	; (800e8d8 <ip4_input+0x240>)
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e816:	4a30      	ldr	r2, [pc, #192]	; (800e8d8 <ip4_input+0x240>)
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	f003 030f 	and.w	r3, r3, #15
 800e824:	b2db      	uxtb	r3, r3
 800e826:	009b      	lsls	r3, r3, #2
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	b29a      	uxth	r2, r3
 800e82c:	4b2a      	ldr	r3, [pc, #168]	; (800e8d8 <ip4_input+0x240>)
 800e82e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e830:	89fb      	ldrh	r3, [r7, #14]
 800e832:	4619      	mov	r1, r3
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f7f8 fb47 	bl	8006ec8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	7a5b      	ldrb	r3, [r3, #9]
 800e83e:	2b11      	cmp	r3, #17
 800e840:	d006      	beq.n	800e850 <ip4_input+0x1b8>
 800e842:	2b11      	cmp	r3, #17
 800e844:	dc13      	bgt.n	800e86e <ip4_input+0x1d6>
 800e846:	2b01      	cmp	r3, #1
 800e848:	d00c      	beq.n	800e864 <ip4_input+0x1cc>
 800e84a:	2b06      	cmp	r3, #6
 800e84c:	d005      	beq.n	800e85a <ip4_input+0x1c2>
 800e84e:	e00e      	b.n	800e86e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e850:	6839      	ldr	r1, [r7, #0]
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f7fe f9b0 	bl	800cbb8 <udp_input>
        break;
 800e858:	e026      	b.n	800e8a8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e85a:	6839      	ldr	r1, [r7, #0]
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f7fa f9f1 	bl	8008c44 <tcp_input>
        break;
 800e862:	e021      	b.n	800e8a8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e864:	6839      	ldr	r1, [r7, #0]
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f7ff fcee 	bl	800e248 <icmp_input>
        break;
 800e86c:	e01c      	b.n	800e8a8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e86e:	4b1a      	ldr	r3, [pc, #104]	; (800e8d8 <ip4_input+0x240>)
 800e870:	695b      	ldr	r3, [r3, #20]
 800e872:	6939      	ldr	r1, [r7, #16]
 800e874:	4618      	mov	r0, r3
 800e876:	f000 f90b 	bl	800ea90 <ip4_addr_isbroadcast_u32>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d10f      	bne.n	800e8a0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e880:	4b15      	ldr	r3, [pc, #84]	; (800e8d8 <ip4_input+0x240>)
 800e882:	695b      	ldr	r3, [r3, #20]
 800e884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e888:	2be0      	cmp	r3, #224	; 0xe0
 800e88a:	d009      	beq.n	800e8a0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e88c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e890:	4619      	mov	r1, r3
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f7f8 fb8b 	bl	8006fae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e898:	2102      	movs	r1, #2
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f7ff fdd8 	bl	800e450 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f7f8 fb97 	bl	8006fd4 <pbuf_free>
        break;
 800e8a6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e8a8:	4b0b      	ldr	r3, [pc, #44]	; (800e8d8 <ip4_input+0x240>)
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e8ae:	4b0a      	ldr	r3, [pc, #40]	; (800e8d8 <ip4_input+0x240>)
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e8b4:	4b08      	ldr	r3, [pc, #32]	; (800e8d8 <ip4_input+0x240>)
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e8ba:	4b07      	ldr	r3, [pc, #28]	; (800e8d8 <ip4_input+0x240>)
 800e8bc:	2200      	movs	r2, #0
 800e8be:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e8c0:	4b05      	ldr	r3, [pc, #20]	; (800e8d8 <ip4_input+0x240>)
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e8c6:	4b04      	ldr	r3, [pc, #16]	; (800e8d8 <ip4_input+0x240>)
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e8cc:	2300      	movs	r3, #0
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3718      	adds	r7, #24
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	20005240 	.word	0x20005240
 800e8dc:	200087a4 	.word	0x200087a4

0800e8e0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b08a      	sub	sp, #40	; 0x28
 800e8e4:	af04      	add	r7, sp, #16
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	607a      	str	r2, [r7, #4]
 800e8ec:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d009      	beq.n	800e90c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d003      	beq.n	800e906 <ip4_output_if+0x26>
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d102      	bne.n	800e90c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e908:	3304      	adds	r3, #4
 800e90a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e90c:	78fa      	ldrb	r2, [r7, #3]
 800e90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e910:	9302      	str	r3, [sp, #8]
 800e912:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e916:	9301      	str	r3, [sp, #4]
 800e918:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e91c:	9300      	str	r3, [sp, #0]
 800e91e:	4613      	mov	r3, r2
 800e920:	687a      	ldr	r2, [r7, #4]
 800e922:	6979      	ldr	r1, [r7, #20]
 800e924:	68f8      	ldr	r0, [r7, #12]
 800e926:	f000 f805 	bl	800e934 <ip4_output_if_src>
 800e92a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3718      	adds	r7, #24
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b088      	sub	sp, #32
 800e938:	af00      	add	r7, sp, #0
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	60b9      	str	r1, [r7, #8]
 800e93e:	607a      	str	r2, [r7, #4]
 800e940:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	7b9b      	ldrb	r3, [r3, #14]
 800e946:	2b01      	cmp	r3, #1
 800e948:	d006      	beq.n	800e958 <ip4_output_if_src+0x24>
 800e94a:	4b4b      	ldr	r3, [pc, #300]	; (800ea78 <ip4_output_if_src+0x144>)
 800e94c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e950:	494a      	ldr	r1, [pc, #296]	; (800ea7c <ip4_output_if_src+0x148>)
 800e952:	484b      	ldr	r0, [pc, #300]	; (800ea80 <ip4_output_if_src+0x14c>)
 800e954:	f001 f8cc 	bl	800faf0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d060      	beq.n	800ea20 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e95e:	2314      	movs	r3, #20
 800e960:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e962:	2114      	movs	r1, #20
 800e964:	68f8      	ldr	r0, [r7, #12]
 800e966:	f7f8 fa9f 	bl	8006ea8 <pbuf_add_header>
 800e96a:	4603      	mov	r3, r0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d002      	beq.n	800e976 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e970:	f06f 0301 	mvn.w	r3, #1
 800e974:	e07c      	b.n	800ea70 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	895b      	ldrh	r3, [r3, #10]
 800e980:	2b13      	cmp	r3, #19
 800e982:	d806      	bhi.n	800e992 <ip4_output_if_src+0x5e>
 800e984:	4b3c      	ldr	r3, [pc, #240]	; (800ea78 <ip4_output_if_src+0x144>)
 800e986:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e98a:	493e      	ldr	r1, [pc, #248]	; (800ea84 <ip4_output_if_src+0x150>)
 800e98c:	483c      	ldr	r0, [pc, #240]	; (800ea80 <ip4_output_if_src+0x14c>)
 800e98e:	f001 f8af 	bl	800faf0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	78fa      	ldrb	r2, [r7, #3]
 800e996:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e99e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e9a8:	8b7b      	ldrh	r3, [r7, #26]
 800e9aa:	089b      	lsrs	r3, r3, #2
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	b2db      	uxtb	r3, r3
 800e9b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9b4:	b2da      	uxtb	r2, r3
 800e9b6:	69fb      	ldr	r3, [r7, #28]
 800e9b8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e9ba:	69fb      	ldr	r3, [r7, #28]
 800e9bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e9c0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	891b      	ldrh	r3, [r3, #8]
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7f6 ffa6 	bl	8005918 <lwip_htons>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e9d4:	69fb      	ldr	r3, [r7, #28]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	719a      	strb	r2, [r3, #6]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e9de:	4b2a      	ldr	r3, [pc, #168]	; (800ea88 <ip4_output_if_src+0x154>)
 800e9e0:	881b      	ldrh	r3, [r3, #0]
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f7f6 ff98 	bl	8005918 <lwip_htons>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	69fb      	ldr	r3, [r7, #28]
 800e9ee:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e9f0:	4b25      	ldr	r3, [pc, #148]	; (800ea88 <ip4_output_if_src+0x154>)
 800e9f2:	881b      	ldrh	r3, [r3, #0]
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	b29a      	uxth	r2, r3
 800e9f8:	4b23      	ldr	r3, [pc, #140]	; (800ea88 <ip4_output_if_src+0x154>)
 800e9fa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d104      	bne.n	800ea0c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ea02:	4b22      	ldr	r3, [pc, #136]	; (800ea8c <ip4_output_if_src+0x158>)
 800ea04:	681a      	ldr	r2, [r3, #0]
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	60da      	str	r2, [r3, #12]
 800ea0a:	e003      	b.n	800ea14 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	2200      	movs	r2, #0
 800ea18:	729a      	strb	r2, [r3, #10]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	72da      	strb	r2, [r3, #11]
 800ea1e:	e00f      	b.n	800ea40 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	895b      	ldrh	r3, [r3, #10]
 800ea24:	2b13      	cmp	r3, #19
 800ea26:	d802      	bhi.n	800ea2e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ea28:	f06f 0301 	mvn.w	r3, #1
 800ea2c:	e020      	b.n	800ea70 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	691b      	ldr	r3, [r3, #16]
 800ea38:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ea3a:	f107 0314 	add.w	r3, r7, #20
 800ea3e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ea40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d00c      	beq.n	800ea62 <ip4_output_if_src+0x12e>
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	891a      	ldrh	r2, [r3, #8]
 800ea4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d906      	bls.n	800ea62 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f000 fde3 	bl	800f624 <ip4_frag>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	e006      	b.n	800ea70 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ea62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea64:	695b      	ldr	r3, [r3, #20]
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	68f9      	ldr	r1, [r7, #12]
 800ea6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea6c:	4798      	blx	r3
 800ea6e:	4603      	mov	r3, r0
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3720      	adds	r7, #32
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	080133ac 	.word	0x080133ac
 800ea7c:	080133e0 	.word	0x080133e0
 800ea80:	080133ec 	.word	0x080133ec
 800ea84:	08013414 	.word	0x08013414
 800ea88:	20008902 	.word	0x20008902
 800ea8c:	080137f4 	.word	0x080137f4

0800ea90 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b085      	sub	sp, #20
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eaa4:	d002      	beq.n	800eaac <ip4_addr_isbroadcast_u32+0x1c>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d101      	bne.n	800eab0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800eaac:	2301      	movs	r3, #1
 800eaae:	e02a      	b.n	800eb06 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eab6:	f003 0302 	and.w	r3, r3, #2
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d101      	bne.n	800eac2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800eabe:	2300      	movs	r3, #0
 800eac0:	e021      	b.n	800eb06 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	3304      	adds	r3, #4
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	687a      	ldr	r2, [r7, #4]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d101      	bne.n	800ead2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800eace:	2300      	movs	r3, #0
 800ead0:	e019      	b.n	800eb06 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ead2:	68fa      	ldr	r2, [r7, #12]
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	3304      	adds	r3, #4
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	405a      	eors	r2, r3
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	3308      	adds	r3, #8
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	4013      	ands	r3, r2
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d10d      	bne.n	800eb04 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	3308      	adds	r3, #8
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	43da      	mvns	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	3308      	adds	r3, #8
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d101      	bne.n	800eb04 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800eb00:	2301      	movs	r3, #1
 800eb02:	e000      	b.n	800eb06 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800eb04:	2300      	movs	r3, #0
  }
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3714      	adds	r7, #20
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr
	...

0800eb14 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800eb1c:	2210      	movs	r2, #16
 800eb1e:	4904      	ldr	r1, [pc, #16]	; (800eb30 <ip4addr_ntoa+0x1c>)
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f000 f807 	bl	800eb34 <ip4addr_ntoa_r>
 800eb26:	4603      	mov	r3, r0
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3708      	adds	r7, #8
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	20008904 	.word	0x20008904

0800eb34 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b08d      	sub	sp, #52	; 0x34
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800eb40:	2300      	movs	r3, #0
 800eb42:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800eb4e:	f107 0318 	add.w	r3, r7, #24
 800eb52:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800eb54:	2300      	movs	r3, #0
 800eb56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb5a:	e058      	b.n	800ec0e <ip4addr_ntoa_r+0xda>
    i = 0;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800eb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb64:	781a      	ldrb	r2, [r3, #0]
 800eb66:	4b32      	ldr	r3, [pc, #200]	; (800ec30 <ip4addr_ntoa_r+0xfc>)
 800eb68:	fba3 1302 	umull	r1, r3, r3, r2
 800eb6c:	08d9      	lsrs	r1, r3, #3
 800eb6e:	460b      	mov	r3, r1
 800eb70:	009b      	lsls	r3, r3, #2
 800eb72:	440b      	add	r3, r1
 800eb74:	005b      	lsls	r3, r3, #1
 800eb76:	1ad3      	subs	r3, r2, r3
 800eb78:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800eb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	4a2c      	ldr	r2, [pc, #176]	; (800ec30 <ip4addr_ntoa_r+0xfc>)
 800eb80:	fba2 2303 	umull	r2, r3, r2, r3
 800eb84:	08db      	lsrs	r3, r3, #3
 800eb86:	b2da      	uxtb	r2, r3
 800eb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800eb8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb90:	1c5a      	adds	r2, r3, #1
 800eb92:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800eb96:	4619      	mov	r1, r3
 800eb98:	7ffb      	ldrb	r3, [r7, #31]
 800eb9a:	3330      	adds	r3, #48	; 0x30
 800eb9c:	b2da      	uxtb	r2, r3
 800eb9e:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800eba2:	443b      	add	r3, r7
 800eba4:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800eba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d1d8      	bne.n	800eb62 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800ebb0:	e011      	b.n	800ebd6 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800ebb2:	6a3b      	ldr	r3, [r7, #32]
 800ebb4:	1c5a      	adds	r2, r3, #1
 800ebb6:	623a      	str	r2, [r7, #32]
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	dc01      	bgt.n	800ebc2 <ip4addr_ntoa_r+0x8e>
        return NULL;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	e030      	b.n	800ec24 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800ebc2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ebc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc8:	1c59      	adds	r1, r3, #1
 800ebca:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ebcc:	3230      	adds	r2, #48	; 0x30
 800ebce:	443a      	add	r2, r7
 800ebd0:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800ebd4:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800ebd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ebda:	1e5a      	subs	r2, r3, #1
 800ebdc:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d1e6      	bne.n	800ebb2 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800ebe4:	6a3b      	ldr	r3, [r7, #32]
 800ebe6:	1c5a      	adds	r2, r3, #1
 800ebe8:	623a      	str	r2, [r7, #32]
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	dc01      	bgt.n	800ebf4 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	e017      	b.n	800ec24 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800ebf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf6:	1c5a      	adds	r2, r3, #1
 800ebf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ebfa:	222e      	movs	r2, #46	; 0x2e
 800ebfc:	701a      	strb	r2, [r3, #0]
    ap++;
 800ebfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec00:	3301      	adds	r3, #1
 800ec02:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800ec04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec08:	3301      	adds	r3, #1
 800ec0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec12:	2b03      	cmp	r3, #3
 800ec14:	d9a2      	bls.n	800eb5c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800ec16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1e:	2200      	movs	r2, #0
 800ec20:	701a      	strb	r2, [r3, #0]
  return buf;
 800ec22:	68bb      	ldr	r3, [r7, #8]
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3734      	adds	r7, #52	; 0x34
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr
 800ec30:	cccccccd 	.word	0xcccccccd

0800ec34 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b084      	sub	sp, #16
 800ec38:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ec3e:	4b12      	ldr	r3, [pc, #72]	; (800ec88 <ip_reass_tmr+0x54>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ec44:	e018      	b.n	800ec78 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	7fdb      	ldrb	r3, [r3, #31]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d00b      	beq.n	800ec66 <ip_reass_tmr+0x32>
      r->timer--;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	7fdb      	ldrb	r3, [r3, #31]
 800ec52:	3b01      	subs	r3, #1
 800ec54:	b2da      	uxtb	r2, r3
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	60fb      	str	r3, [r7, #12]
 800ec64:	e008      	b.n	800ec78 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ec70:	68b9      	ldr	r1, [r7, #8]
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f000 f80a 	bl	800ec8c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d1e3      	bne.n	800ec46 <ip_reass_tmr+0x12>
    }
  }
}
 800ec7e:	bf00      	nop
 800ec80:	bf00      	nop
 800ec82:	3710      	adds	r7, #16
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	20008914 	.word	0x20008914

0800ec8c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b088      	sub	sp, #32
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ec96:	2300      	movs	r3, #0
 800ec98:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ec9a:	683a      	ldr	r2, [r7, #0]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d105      	bne.n	800ecae <ip_reass_free_complete_datagram+0x22>
 800eca2:	4b45      	ldr	r3, [pc, #276]	; (800edb8 <ip_reass_free_complete_datagram+0x12c>)
 800eca4:	22ab      	movs	r2, #171	; 0xab
 800eca6:	4945      	ldr	r1, [pc, #276]	; (800edbc <ip_reass_free_complete_datagram+0x130>)
 800eca8:	4845      	ldr	r0, [pc, #276]	; (800edc0 <ip_reass_free_complete_datagram+0x134>)
 800ecaa:	f000 ff21 	bl	800faf0 <iprintf>
  if (prev != NULL) {
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d00a      	beq.n	800ecca <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d005      	beq.n	800ecca <ip_reass_free_complete_datagram+0x3e>
 800ecbe:	4b3e      	ldr	r3, [pc, #248]	; (800edb8 <ip_reass_free_complete_datagram+0x12c>)
 800ecc0:	22ad      	movs	r2, #173	; 0xad
 800ecc2:	4940      	ldr	r1, [pc, #256]	; (800edc4 <ip_reass_free_complete_datagram+0x138>)
 800ecc4:	483e      	ldr	r0, [pc, #248]	; (800edc0 <ip_reass_free_complete_datagram+0x134>)
 800ecc6:	f000 ff13 	bl	800faf0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	889b      	ldrh	r3, [r3, #4]
 800ecd6:	b29b      	uxth	r3, r3
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d12a      	bne.n	800ed32 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ecea:	69bb      	ldr	r3, [r7, #24]
 800ecec:	6858      	ldr	r0, [r3, #4]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	3308      	adds	r3, #8
 800ecf2:	2214      	movs	r2, #20
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	f000 fee5 	bl	800fac4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ecfa:	2101      	movs	r1, #1
 800ecfc:	69b8      	ldr	r0, [r7, #24]
 800ecfe:	f7ff fbb7 	bl	800e470 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ed02:	69b8      	ldr	r0, [r7, #24]
 800ed04:	f7f8 f9ee 	bl	80070e4 <pbuf_clen>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ed0c:	8bfa      	ldrh	r2, [r7, #30]
 800ed0e:	8a7b      	ldrh	r3, [r7, #18]
 800ed10:	4413      	add	r3, r2
 800ed12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed16:	db05      	blt.n	800ed24 <ip_reass_free_complete_datagram+0x98>
 800ed18:	4b27      	ldr	r3, [pc, #156]	; (800edb8 <ip_reass_free_complete_datagram+0x12c>)
 800ed1a:	22bc      	movs	r2, #188	; 0xbc
 800ed1c:	492a      	ldr	r1, [pc, #168]	; (800edc8 <ip_reass_free_complete_datagram+0x13c>)
 800ed1e:	4828      	ldr	r0, [pc, #160]	; (800edc0 <ip_reass_free_complete_datagram+0x134>)
 800ed20:	f000 fee6 	bl	800faf0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ed24:	8bfa      	ldrh	r2, [r7, #30]
 800ed26:	8a7b      	ldrh	r3, [r7, #18]
 800ed28:	4413      	add	r3, r2
 800ed2a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ed2c:	69b8      	ldr	r0, [r7, #24]
 800ed2e:	f7f8 f951 	bl	8006fd4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ed38:	e01f      	b.n	800ed7a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ed4a:	68f8      	ldr	r0, [r7, #12]
 800ed4c:	f7f8 f9ca 	bl	80070e4 <pbuf_clen>
 800ed50:	4603      	mov	r3, r0
 800ed52:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ed54:	8bfa      	ldrh	r2, [r7, #30]
 800ed56:	8a7b      	ldrh	r3, [r7, #18]
 800ed58:	4413      	add	r3, r2
 800ed5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed5e:	db05      	blt.n	800ed6c <ip_reass_free_complete_datagram+0xe0>
 800ed60:	4b15      	ldr	r3, [pc, #84]	; (800edb8 <ip_reass_free_complete_datagram+0x12c>)
 800ed62:	22cc      	movs	r2, #204	; 0xcc
 800ed64:	4918      	ldr	r1, [pc, #96]	; (800edc8 <ip_reass_free_complete_datagram+0x13c>)
 800ed66:	4816      	ldr	r0, [pc, #88]	; (800edc0 <ip_reass_free_complete_datagram+0x134>)
 800ed68:	f000 fec2 	bl	800faf0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ed6c:	8bfa      	ldrh	r2, [r7, #30]
 800ed6e:	8a7b      	ldrh	r3, [r7, #18]
 800ed70:	4413      	add	r3, r2
 800ed72:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ed74:	68f8      	ldr	r0, [r7, #12]
 800ed76:	f7f8 f92d 	bl	8006fd4 <pbuf_free>
  while (p != NULL) {
 800ed7a:	69bb      	ldr	r3, [r7, #24]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d1dc      	bne.n	800ed3a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ed80:	6839      	ldr	r1, [r7, #0]
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f000 f8c2 	bl	800ef0c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ed88:	4b10      	ldr	r3, [pc, #64]	; (800edcc <ip_reass_free_complete_datagram+0x140>)
 800ed8a:	881b      	ldrh	r3, [r3, #0]
 800ed8c:	8bfa      	ldrh	r2, [r7, #30]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d905      	bls.n	800ed9e <ip_reass_free_complete_datagram+0x112>
 800ed92:	4b09      	ldr	r3, [pc, #36]	; (800edb8 <ip_reass_free_complete_datagram+0x12c>)
 800ed94:	22d2      	movs	r2, #210	; 0xd2
 800ed96:	490e      	ldr	r1, [pc, #56]	; (800edd0 <ip_reass_free_complete_datagram+0x144>)
 800ed98:	4809      	ldr	r0, [pc, #36]	; (800edc0 <ip_reass_free_complete_datagram+0x134>)
 800ed9a:	f000 fea9 	bl	800faf0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ed9e:	4b0b      	ldr	r3, [pc, #44]	; (800edcc <ip_reass_free_complete_datagram+0x140>)
 800eda0:	881a      	ldrh	r2, [r3, #0]
 800eda2:	8bfb      	ldrh	r3, [r7, #30]
 800eda4:	1ad3      	subs	r3, r2, r3
 800eda6:	b29a      	uxth	r2, r3
 800eda8:	4b08      	ldr	r3, [pc, #32]	; (800edcc <ip_reass_free_complete_datagram+0x140>)
 800edaa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800edac:	8bfb      	ldrh	r3, [r7, #30]
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3720      	adds	r7, #32
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	08013444 	.word	0x08013444
 800edbc:	08013480 	.word	0x08013480
 800edc0:	0801348c 	.word	0x0801348c
 800edc4:	080134b4 	.word	0x080134b4
 800edc8:	080134c8 	.word	0x080134c8
 800edcc:	20008918 	.word	0x20008918
 800edd0:	080134e8 	.word	0x080134e8

0800edd4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b08a      	sub	sp, #40	; 0x28
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800edde:	2300      	movs	r3, #0
 800ede0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ede2:	2300      	movs	r3, #0
 800ede4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ede6:	2300      	movs	r3, #0
 800ede8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800edea:	2300      	movs	r3, #0
 800edec:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800edee:	2300      	movs	r3, #0
 800edf0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800edf2:	4b28      	ldr	r3, [pc, #160]	; (800ee94 <ip_reass_remove_oldest_datagram+0xc0>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800edf8:	e030      	b.n	800ee5c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800edfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfc:	695a      	ldr	r2, [r3, #20]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	68db      	ldr	r3, [r3, #12]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d10c      	bne.n	800ee20 <ip_reass_remove_oldest_datagram+0x4c>
 800ee06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee08:	699a      	ldr	r2, [r3, #24]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	691b      	ldr	r3, [r3, #16]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d106      	bne.n	800ee20 <ip_reass_remove_oldest_datagram+0x4c>
 800ee12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee14:	899a      	ldrh	r2, [r3, #12]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	889b      	ldrh	r3, [r3, #4]
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d014      	beq.n	800ee4a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	3301      	adds	r3, #1
 800ee24:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ee26:	6a3b      	ldr	r3, [r7, #32]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d104      	bne.n	800ee36 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ee2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	61bb      	str	r3, [r7, #24]
 800ee34:	e009      	b.n	800ee4a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ee36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee38:	7fda      	ldrb	r2, [r3, #31]
 800ee3a:	6a3b      	ldr	r3, [r7, #32]
 800ee3c:	7fdb      	ldrb	r3, [r3, #31]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d803      	bhi.n	800ee4a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ee42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee44:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ee4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d001      	beq.n	800ee56 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ee52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee54:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ee56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ee5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d1cb      	bne.n	800edfa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ee62:	6a3b      	ldr	r3, [r7, #32]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d008      	beq.n	800ee7a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ee68:	69b9      	ldr	r1, [r7, #24]
 800ee6a:	6a38      	ldr	r0, [r7, #32]
 800ee6c:	f7ff ff0e 	bl	800ec8c <ip_reass_free_complete_datagram>
 800ee70:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ee72:	697a      	ldr	r2, [r7, #20]
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	4413      	add	r3, r2
 800ee78:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ee7a:	697a      	ldr	r2, [r7, #20]
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	da02      	bge.n	800ee88 <ip_reass_remove_oldest_datagram+0xb4>
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	dcac      	bgt.n	800ede2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ee88:	697b      	ldr	r3, [r7, #20]
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3728      	adds	r7, #40	; 0x28
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	20008914 	.word	0x20008914

0800ee98 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800eea2:	2004      	movs	r0, #4
 800eea4:	f7f7 f9b0 	bl	8006208 <memp_malloc>
 800eea8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d110      	bne.n	800eed2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800eeb0:	6839      	ldr	r1, [r7, #0]
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f7ff ff8e 	bl	800edd4 <ip_reass_remove_oldest_datagram>
 800eeb8:	4602      	mov	r2, r0
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	4293      	cmp	r3, r2
 800eebe:	dc03      	bgt.n	800eec8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800eec0:	2004      	movs	r0, #4
 800eec2:	f7f7 f9a1 	bl	8006208 <memp_malloc>
 800eec6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d101      	bne.n	800eed2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800eece:	2300      	movs	r3, #0
 800eed0:	e016      	b.n	800ef00 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800eed2:	2220      	movs	r2, #32
 800eed4:	2100      	movs	r1, #0
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	f000 fe02 	bl	800fae0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	220f      	movs	r2, #15
 800eee0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800eee2:	4b09      	ldr	r3, [pc, #36]	; (800ef08 <ip_reass_enqueue_new_datagram+0x70>)
 800eee4:	681a      	ldr	r2, [r3, #0]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800eeea:	4a07      	ldr	r2, [pc, #28]	; (800ef08 <ip_reass_enqueue_new_datagram+0x70>)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	3308      	adds	r3, #8
 800eef4:	2214      	movs	r2, #20
 800eef6:	6879      	ldr	r1, [r7, #4]
 800eef8:	4618      	mov	r0, r3
 800eefa:	f000 fde3 	bl	800fac4 <memcpy>
  return ipr;
 800eefe:	68fb      	ldr	r3, [r7, #12]
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3710      	adds	r7, #16
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	20008914 	.word	0x20008914

0800ef0c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ef16:	4b10      	ldr	r3, [pc, #64]	; (800ef58 <ip_reass_dequeue_datagram+0x4c>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d104      	bne.n	800ef2a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4a0c      	ldr	r2, [pc, #48]	; (800ef58 <ip_reass_dequeue_datagram+0x4c>)
 800ef26:	6013      	str	r3, [r2, #0]
 800ef28:	e00d      	b.n	800ef46 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d106      	bne.n	800ef3e <ip_reass_dequeue_datagram+0x32>
 800ef30:	4b0a      	ldr	r3, [pc, #40]	; (800ef5c <ip_reass_dequeue_datagram+0x50>)
 800ef32:	f240 1245 	movw	r2, #325	; 0x145
 800ef36:	490a      	ldr	r1, [pc, #40]	; (800ef60 <ip_reass_dequeue_datagram+0x54>)
 800ef38:	480a      	ldr	r0, [pc, #40]	; (800ef64 <ip_reass_dequeue_datagram+0x58>)
 800ef3a:	f000 fdd9 	bl	800faf0 <iprintf>
    prev->next = ipr->next;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ef46:	6879      	ldr	r1, [r7, #4]
 800ef48:	2004      	movs	r0, #4
 800ef4a:	f7f7 f9cd 	bl	80062e8 <memp_free>
}
 800ef4e:	bf00      	nop
 800ef50:	3708      	adds	r7, #8
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	20008914 	.word	0x20008914
 800ef5c:	08013444 	.word	0x08013444
 800ef60:	0801350c 	.word	0x0801350c
 800ef64:	0801348c 	.word	0x0801348c

0800ef68 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b08c      	sub	sp, #48	; 0x30
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800ef74:	2300      	movs	r3, #0
 800ef76:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800ef78:	2301      	movs	r3, #1
 800ef7a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ef82:	69fb      	ldr	r3, [r7, #28]
 800ef84:	885b      	ldrh	r3, [r3, #2]
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7f6 fcc5 	bl	8005918 <lwip_htons>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	f003 030f 	and.w	r3, r3, #15
 800ef9a:	b2db      	uxtb	r3, r3
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800efa0:	7e7b      	ldrb	r3, [r7, #25]
 800efa2:	b29b      	uxth	r3, r3
 800efa4:	8b7a      	ldrh	r2, [r7, #26]
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d202      	bcs.n	800efb0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800efaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efae:	e135      	b.n	800f21c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800efb0:	7e7b      	ldrb	r3, [r7, #25]
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	8b7a      	ldrh	r2, [r7, #26]
 800efb6:	1ad3      	subs	r3, r2, r3
 800efb8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800efba:	69fb      	ldr	r3, [r7, #28]
 800efbc:	88db      	ldrh	r3, [r3, #6]
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7f6 fca9 	bl	8005918 <lwip_htons>
 800efc6:	4603      	mov	r3, r0
 800efc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800efcc:	b29b      	uxth	r3, r3
 800efce:	00db      	lsls	r3, r3, #3
 800efd0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	685b      	ldr	r3, [r3, #4]
 800efd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800efd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efda:	2200      	movs	r2, #0
 800efdc:	701a      	strb	r2, [r3, #0]
 800efde:	2200      	movs	r2, #0
 800efe0:	705a      	strb	r2, [r3, #1]
 800efe2:	2200      	movs	r2, #0
 800efe4:	709a      	strb	r2, [r3, #2]
 800efe6:	2200      	movs	r2, #0
 800efe8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800efea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efec:	8afa      	ldrh	r2, [r7, #22]
 800efee:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800eff0:	8afa      	ldrh	r2, [r7, #22]
 800eff2:	8b7b      	ldrh	r3, [r7, #26]
 800eff4:	4413      	add	r3, r2
 800eff6:	b29a      	uxth	r2, r3
 800eff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800effc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effe:	88db      	ldrh	r3, [r3, #6]
 800f000:	b29b      	uxth	r3, r3
 800f002:	8afa      	ldrh	r2, [r7, #22]
 800f004:	429a      	cmp	r2, r3
 800f006:	d902      	bls.n	800f00e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f00c:	e106      	b.n	800f21c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	627b      	str	r3, [r7, #36]	; 0x24
 800f014:	e068      	b.n	800f0e8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f01e:	889b      	ldrh	r3, [r3, #4]
 800f020:	b29a      	uxth	r2, r3
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	889b      	ldrh	r3, [r3, #4]
 800f026:	b29b      	uxth	r3, r3
 800f028:	429a      	cmp	r2, r3
 800f02a:	d235      	bcs.n	800f098 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f030:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f034:	2b00      	cmp	r3, #0
 800f036:	d020      	beq.n	800f07a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03a:	889b      	ldrh	r3, [r3, #4]
 800f03c:	b29a      	uxth	r2, r3
 800f03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f040:	88db      	ldrh	r3, [r3, #6]
 800f042:	b29b      	uxth	r3, r3
 800f044:	429a      	cmp	r2, r3
 800f046:	d307      	bcc.n	800f058 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04a:	88db      	ldrh	r3, [r3, #6]
 800f04c:	b29a      	uxth	r2, r3
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	889b      	ldrh	r3, [r3, #4]
 800f052:	b29b      	uxth	r3, r3
 800f054:	429a      	cmp	r2, r3
 800f056:	d902      	bls.n	800f05e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f05c:	e0de      	b.n	800f21c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f060:	68ba      	ldr	r2, [r7, #8]
 800f062:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f066:	88db      	ldrh	r3, [r3, #6]
 800f068:	b29a      	uxth	r2, r3
 800f06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06c:	889b      	ldrh	r3, [r3, #4]
 800f06e:	b29b      	uxth	r3, r3
 800f070:	429a      	cmp	r2, r3
 800f072:	d03d      	beq.n	800f0f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f074:	2300      	movs	r3, #0
 800f076:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f078:	e03a      	b.n	800f0f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07c:	88db      	ldrh	r3, [r3, #6]
 800f07e:	b29a      	uxth	r2, r3
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	889b      	ldrh	r3, [r3, #4]
 800f084:	b29b      	uxth	r3, r3
 800f086:	429a      	cmp	r2, r3
 800f088:	d902      	bls.n	800f090 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f08a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f08e:	e0c5      	b.n	800f21c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	68ba      	ldr	r2, [r7, #8]
 800f094:	605a      	str	r2, [r3, #4]
      break;
 800f096:	e02b      	b.n	800f0f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09a:	889b      	ldrh	r3, [r3, #4]
 800f09c:	b29a      	uxth	r2, r3
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	889b      	ldrh	r3, [r3, #4]
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d102      	bne.n	800f0ae <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f0a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0ac:	e0b6      	b.n	800f21c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b0:	889b      	ldrh	r3, [r3, #4]
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	88db      	ldrh	r3, [r3, #6]
 800f0b8:	b29b      	uxth	r3, r3
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d202      	bcs.n	800f0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f0be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0c2:	e0ab      	b.n	800f21c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d009      	beq.n	800f0de <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0cc:	88db      	ldrh	r3, [r3, #6]
 800f0ce:	b29a      	uxth	r2, r3
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	889b      	ldrh	r3, [r3, #4]
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d001      	beq.n	800f0de <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d193      	bne.n	800f016 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f0ee:	e000      	b.n	800f0f2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f0f0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d12d      	bne.n	800f154 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d01c      	beq.n	800f138 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f100:	88db      	ldrh	r3, [r3, #6]
 800f102:	b29a      	uxth	r2, r3
 800f104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f106:	889b      	ldrh	r3, [r3, #4]
 800f108:	b29b      	uxth	r3, r3
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d906      	bls.n	800f11c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f10e:	4b45      	ldr	r3, [pc, #276]	; (800f224 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f110:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f114:	4944      	ldr	r1, [pc, #272]	; (800f228 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f116:	4845      	ldr	r0, [pc, #276]	; (800f22c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f118:	f000 fcea 	bl	800faf0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11e:	68ba      	ldr	r2, [r7, #8]
 800f120:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f124:	88db      	ldrh	r3, [r3, #6]
 800f126:	b29a      	uxth	r2, r3
 800f128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12a:	889b      	ldrh	r3, [r3, #4]
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	429a      	cmp	r2, r3
 800f130:	d010      	beq.n	800f154 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f132:	2300      	movs	r3, #0
 800f134:	623b      	str	r3, [r7, #32]
 800f136:	e00d      	b.n	800f154 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d006      	beq.n	800f14e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f140:	4b38      	ldr	r3, [pc, #224]	; (800f224 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f142:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f146:	493a      	ldr	r1, [pc, #232]	; (800f230 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f148:	4838      	ldr	r0, [pc, #224]	; (800f22c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f14a:	f000 fcd1 	bl	800faf0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	68ba      	ldr	r2, [r7, #8]
 800f152:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d105      	bne.n	800f166 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	7f9b      	ldrb	r3, [r3, #30]
 800f15e:	f003 0301 	and.w	r3, r3, #1
 800f162:	2b00      	cmp	r3, #0
 800f164:	d059      	beq.n	800f21a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f166:	6a3b      	ldr	r3, [r7, #32]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d04f      	beq.n	800f20c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d006      	beq.n	800f182 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	889b      	ldrh	r3, [r3, #4]
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d002      	beq.n	800f188 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f182:	2300      	movs	r3, #0
 800f184:	623b      	str	r3, [r7, #32]
 800f186:	e041      	b.n	800f20c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f192:	e012      	b.n	800f1ba <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19c:	88db      	ldrh	r3, [r3, #6]
 800f19e:	b29a      	uxth	r2, r3
 800f1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a2:	889b      	ldrh	r3, [r3, #4]
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d002      	beq.n	800f1b0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	623b      	str	r3, [r7, #32]
            break;
 800f1ae:	e007      	b.n	800f1c0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d1e9      	bne.n	800f194 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f1c0:	6a3b      	ldr	r3, [r7, #32]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d022      	beq.n	800f20c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d106      	bne.n	800f1dc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f1ce:	4b15      	ldr	r3, [pc, #84]	; (800f224 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f1d0:	f240 12df 	movw	r2, #479	; 0x1df
 800f1d4:	4917      	ldr	r1, [pc, #92]	; (800f234 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f1d6:	4815      	ldr	r0, [pc, #84]	; (800f22c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f1d8:	f000 fc8a 	bl	800faf0 <iprintf>
          LWIP_ASSERT("sanity check",
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	685b      	ldr	r3, [r3, #4]
 800f1e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d106      	bne.n	800f1f6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f1e8:	4b0e      	ldr	r3, [pc, #56]	; (800f224 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f1ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f1ee:	4911      	ldr	r1, [pc, #68]	; (800f234 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f1f0:	480e      	ldr	r0, [pc, #56]	; (800f22c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f1f2:	f000 fc7d 	bl	800faf0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d006      	beq.n	800f20c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f1fe:	4b09      	ldr	r3, [pc, #36]	; (800f224 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f200:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f204:	490c      	ldr	r1, [pc, #48]	; (800f238 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f206:	4809      	ldr	r0, [pc, #36]	; (800f22c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f208:	f000 fc72 	bl	800faf0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f20c:	6a3b      	ldr	r3, [r7, #32]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	bf14      	ite	ne
 800f212:	2301      	movne	r3, #1
 800f214:	2300      	moveq	r3, #0
 800f216:	b2db      	uxtb	r3, r3
 800f218:	e000      	b.n	800f21c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f21a:	2300      	movs	r3, #0
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3730      	adds	r7, #48	; 0x30
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}
 800f224:	08013444 	.word	0x08013444
 800f228:	08013528 	.word	0x08013528
 800f22c:	0801348c 	.word	0x0801348c
 800f230:	08013548 	.word	0x08013548
 800f234:	08013580 	.word	0x08013580
 800f238:	08013590 	.word	0x08013590

0800f23c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b08e      	sub	sp, #56	; 0x38
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	f003 030f 	and.w	r3, r3, #15
 800f252:	b2db      	uxtb	r3, r3
 800f254:	009b      	lsls	r3, r3, #2
 800f256:	b2db      	uxtb	r3, r3
 800f258:	2b14      	cmp	r3, #20
 800f25a:	f040 8171 	bne.w	800f540 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f260:	88db      	ldrh	r3, [r3, #6]
 800f262:	b29b      	uxth	r3, r3
 800f264:	4618      	mov	r0, r3
 800f266:	f7f6 fb57 	bl	8005918 <lwip_htons>
 800f26a:	4603      	mov	r3, r0
 800f26c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f270:	b29b      	uxth	r3, r3
 800f272:	00db      	lsls	r3, r3, #3
 800f274:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f278:	885b      	ldrh	r3, [r3, #2]
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7f6 fb4b 	bl	8005918 <lwip_htons>
 800f282:	4603      	mov	r3, r0
 800f284:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	f003 030f 	and.w	r3, r3, #15
 800f28e:	b2db      	uxtb	r3, r3
 800f290:	009b      	lsls	r3, r3, #2
 800f292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f296:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	f0c0 8150 	bcc.w	800f544 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f2a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f2a8:	b29b      	uxth	r3, r3
 800f2aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f2ac:	1ad3      	subs	r3, r2, r3
 800f2ae:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f7f7 ff17 	bl	80070e4 <pbuf_clen>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f2ba:	4b8c      	ldr	r3, [pc, #560]	; (800f4ec <ip4_reass+0x2b0>)
 800f2bc:	881b      	ldrh	r3, [r3, #0]
 800f2be:	461a      	mov	r2, r3
 800f2c0:	8c3b      	ldrh	r3, [r7, #32]
 800f2c2:	4413      	add	r3, r2
 800f2c4:	2b0a      	cmp	r3, #10
 800f2c6:	dd10      	ble.n	800f2ea <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f2c8:	8c3b      	ldrh	r3, [r7, #32]
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2ce:	f7ff fd81 	bl	800edd4 <ip_reass_remove_oldest_datagram>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	f000 8137 	beq.w	800f548 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f2da:	4b84      	ldr	r3, [pc, #528]	; (800f4ec <ip4_reass+0x2b0>)
 800f2dc:	881b      	ldrh	r3, [r3, #0]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	8c3b      	ldrh	r3, [r7, #32]
 800f2e2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f2e4:	2b0a      	cmp	r3, #10
 800f2e6:	f300 812f 	bgt.w	800f548 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f2ea:	4b81      	ldr	r3, [pc, #516]	; (800f4f0 <ip4_reass+0x2b4>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	633b      	str	r3, [r7, #48]	; 0x30
 800f2f0:	e015      	b.n	800f31e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f4:	695a      	ldr	r2, [r3, #20]
 800f2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d10c      	bne.n	800f318 <ip4_reass+0xdc>
 800f2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f300:	699a      	ldr	r2, [r3, #24]
 800f302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f304:	691b      	ldr	r3, [r3, #16]
 800f306:	429a      	cmp	r2, r3
 800f308:	d106      	bne.n	800f318 <ip4_reass+0xdc>
 800f30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f30c:	899a      	ldrh	r2, [r3, #12]
 800f30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f310:	889b      	ldrh	r3, [r3, #4]
 800f312:	b29b      	uxth	r3, r3
 800f314:	429a      	cmp	r2, r3
 800f316:	d006      	beq.n	800f326 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	633b      	str	r3, [r7, #48]	; 0x30
 800f31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f320:	2b00      	cmp	r3, #0
 800f322:	d1e6      	bne.n	800f2f2 <ip4_reass+0xb6>
 800f324:	e000      	b.n	800f328 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f326:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d109      	bne.n	800f342 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f32e:	8c3b      	ldrh	r3, [r7, #32]
 800f330:	4619      	mov	r1, r3
 800f332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f334:	f7ff fdb0 	bl	800ee98 <ip_reass_enqueue_new_datagram>
 800f338:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d11c      	bne.n	800f37a <ip4_reass+0x13e>
      goto nullreturn;
 800f340:	e105      	b.n	800f54e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f344:	88db      	ldrh	r3, [r3, #6]
 800f346:	b29b      	uxth	r3, r3
 800f348:	4618      	mov	r0, r3
 800f34a:	f7f6 fae5 	bl	8005918 <lwip_htons>
 800f34e:	4603      	mov	r3, r0
 800f350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f354:	2b00      	cmp	r3, #0
 800f356:	d110      	bne.n	800f37a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35a:	89db      	ldrh	r3, [r3, #14]
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7f6 fadb 	bl	8005918 <lwip_htons>
 800f362:	4603      	mov	r3, r0
 800f364:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d006      	beq.n	800f37a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36e:	3308      	adds	r3, #8
 800f370:	2214      	movs	r2, #20
 800f372:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f374:	4618      	mov	r0, r3
 800f376:	f000 fba5 	bl	800fac4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37c:	88db      	ldrh	r3, [r3, #6]
 800f37e:	b29b      	uxth	r3, r3
 800f380:	f003 0320 	and.w	r3, r3, #32
 800f384:	2b00      	cmp	r3, #0
 800f386:	bf0c      	ite	eq
 800f388:	2301      	moveq	r3, #1
 800f38a:	2300      	movne	r3, #0
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d00e      	beq.n	800f3b4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f396:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f39a:	4413      	add	r3, r2
 800f39c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f39e:	8b7a      	ldrh	r2, [r7, #26]
 800f3a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	f0c0 80a0 	bcc.w	800f4e8 <ip4_reass+0x2ac>
 800f3a8:	8b7b      	ldrh	r3, [r7, #26]
 800f3aa:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	f200 809a 	bhi.w	800f4e8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f3b4:	69fa      	ldr	r2, [r7, #28]
 800f3b6:	6879      	ldr	r1, [r7, #4]
 800f3b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3ba:	f7ff fdd5 	bl	800ef68 <ip_reass_chain_frag_into_datagram_and_validate>
 800f3be:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3c6:	f000 809b 	beq.w	800f500 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f3ca:	4b48      	ldr	r3, [pc, #288]	; (800f4ec <ip4_reass+0x2b0>)
 800f3cc:	881a      	ldrh	r2, [r3, #0]
 800f3ce:	8c3b      	ldrh	r3, [r7, #32]
 800f3d0:	4413      	add	r3, r2
 800f3d2:	b29a      	uxth	r2, r3
 800f3d4:	4b45      	ldr	r3, [pc, #276]	; (800f4ec <ip4_reass+0x2b0>)
 800f3d6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f3d8:	69fb      	ldr	r3, [r7, #28]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00d      	beq.n	800f3fa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f3de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f3e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f3e2:	4413      	add	r3, r2
 800f3e4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e8:	8a7a      	ldrh	r2, [r7, #18]
 800f3ea:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ee:	7f9b      	ldrb	r3, [r3, #30]
 800f3f0:	f043 0301 	orr.w	r3, r3, #1
 800f3f4:	b2da      	uxtb	r2, r3
 800f3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	d171      	bne.n	800f4e4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f402:	8b9b      	ldrh	r3, [r3, #28]
 800f404:	3314      	adds	r3, #20
 800f406:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f40a:	685b      	ldr	r3, [r3, #4]
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41c:	3308      	adds	r3, #8
 800f41e:	2214      	movs	r2, #20
 800f420:	4619      	mov	r1, r3
 800f422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f424:	f000 fb4e 	bl	800fac4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f428:	8a3b      	ldrh	r3, [r7, #16]
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7f6 fa74 	bl	8005918 <lwip_htons>
 800f430:	4603      	mov	r3, r0
 800f432:	461a      	mov	r2, r3
 800f434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f436:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f43a:	2200      	movs	r2, #0
 800f43c:	719a      	strb	r2, [r3, #6]
 800f43e:	2200      	movs	r2, #0
 800f440:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f444:	2200      	movs	r2, #0
 800f446:	729a      	strb	r2, [r3, #10]
 800f448:	2200      	movs	r2, #0
 800f44a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f452:	e00d      	b.n	800f470 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f45a:	2114      	movs	r1, #20
 800f45c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f45e:	f7f7 fd33 	bl	8006ec8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f462:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f7f7 fe77 	bl	8007158 <pbuf_cat>
      r = iprh->next_pbuf;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f472:	2b00      	cmp	r3, #0
 800f474:	d1ee      	bne.n	800f454 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f476:	4b1e      	ldr	r3, [pc, #120]	; (800f4f0 <ip4_reass+0x2b4>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d102      	bne.n	800f486 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f480:	2300      	movs	r3, #0
 800f482:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f484:	e010      	b.n	800f4a8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f486:	4b1a      	ldr	r3, [pc, #104]	; (800f4f0 <ip4_reass+0x2b4>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f48c:	e007      	b.n	800f49e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f494:	429a      	cmp	r2, r3
 800f496:	d006      	beq.n	800f4a6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d1f4      	bne.n	800f48e <ip4_reass+0x252>
 800f4a4:	e000      	b.n	800f4a8 <ip4_reass+0x26c>
          break;
 800f4a6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f4a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f4aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f4ac:	f7ff fd2e 	bl	800ef0c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f7f7 fe17 	bl	80070e4 <pbuf_clen>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f4ba:	4b0c      	ldr	r3, [pc, #48]	; (800f4ec <ip4_reass+0x2b0>)
 800f4bc:	881b      	ldrh	r3, [r3, #0]
 800f4be:	8c3a      	ldrh	r2, [r7, #32]
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d906      	bls.n	800f4d2 <ip4_reass+0x296>
 800f4c4:	4b0b      	ldr	r3, [pc, #44]	; (800f4f4 <ip4_reass+0x2b8>)
 800f4c6:	f240 229b 	movw	r2, #667	; 0x29b
 800f4ca:	490b      	ldr	r1, [pc, #44]	; (800f4f8 <ip4_reass+0x2bc>)
 800f4cc:	480b      	ldr	r0, [pc, #44]	; (800f4fc <ip4_reass+0x2c0>)
 800f4ce:	f000 fb0f 	bl	800faf0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f4d2:	4b06      	ldr	r3, [pc, #24]	; (800f4ec <ip4_reass+0x2b0>)
 800f4d4:	881a      	ldrh	r2, [r3, #0]
 800f4d6:	8c3b      	ldrh	r3, [r7, #32]
 800f4d8:	1ad3      	subs	r3, r2, r3
 800f4da:	b29a      	uxth	r2, r3
 800f4dc:	4b03      	ldr	r3, [pc, #12]	; (800f4ec <ip4_reass+0x2b0>)
 800f4de:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	e038      	b.n	800f556 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	e036      	b.n	800f556 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f4e8:	bf00      	nop
 800f4ea:	e00a      	b.n	800f502 <ip4_reass+0x2c6>
 800f4ec:	20008918 	.word	0x20008918
 800f4f0:	20008914 	.word	0x20008914
 800f4f4:	08013444 	.word	0x08013444
 800f4f8:	080135b4 	.word	0x080135b4
 800f4fc:	0801348c 	.word	0x0801348c
    goto nullreturn_ipr;
 800f500:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f504:	2b00      	cmp	r3, #0
 800f506:	d106      	bne.n	800f516 <ip4_reass+0x2da>
 800f508:	4b15      	ldr	r3, [pc, #84]	; (800f560 <ip4_reass+0x324>)
 800f50a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f50e:	4915      	ldr	r1, [pc, #84]	; (800f564 <ip4_reass+0x328>)
 800f510:	4815      	ldr	r0, [pc, #84]	; (800f568 <ip4_reass+0x32c>)
 800f512:	f000 faed 	bl	800faf0 <iprintf>
  if (ipr->p == NULL) {
 800f516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d116      	bne.n	800f54c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f51e:	4b13      	ldr	r3, [pc, #76]	; (800f56c <ip4_reass+0x330>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f524:	429a      	cmp	r2, r3
 800f526:	d006      	beq.n	800f536 <ip4_reass+0x2fa>
 800f528:	4b0d      	ldr	r3, [pc, #52]	; (800f560 <ip4_reass+0x324>)
 800f52a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f52e:	4910      	ldr	r1, [pc, #64]	; (800f570 <ip4_reass+0x334>)
 800f530:	480d      	ldr	r0, [pc, #52]	; (800f568 <ip4_reass+0x32c>)
 800f532:	f000 fadd 	bl	800faf0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f536:	2100      	movs	r1, #0
 800f538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f53a:	f7ff fce7 	bl	800ef0c <ip_reass_dequeue_datagram>
 800f53e:	e006      	b.n	800f54e <ip4_reass+0x312>
    goto nullreturn;
 800f540:	bf00      	nop
 800f542:	e004      	b.n	800f54e <ip4_reass+0x312>
    goto nullreturn;
 800f544:	bf00      	nop
 800f546:	e002      	b.n	800f54e <ip4_reass+0x312>
      goto nullreturn;
 800f548:	bf00      	nop
 800f54a:	e000      	b.n	800f54e <ip4_reass+0x312>
  }

nullreturn:
 800f54c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f7f7 fd40 	bl	8006fd4 <pbuf_free>
  return NULL;
 800f554:	2300      	movs	r3, #0
}
 800f556:	4618      	mov	r0, r3
 800f558:	3738      	adds	r7, #56	; 0x38
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	08013444 	.word	0x08013444
 800f564:	080135d0 	.word	0x080135d0
 800f568:	0801348c 	.word	0x0801348c
 800f56c:	20008914 	.word	0x20008914
 800f570:	080135dc 	.word	0x080135dc

0800f574 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f578:	2005      	movs	r0, #5
 800f57a:	f7f6 fe45 	bl	8006208 <memp_malloc>
 800f57e:	4603      	mov	r3, r0
}
 800f580:	4618      	mov	r0, r3
 800f582:	bd80      	pop	{r7, pc}

0800f584 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d106      	bne.n	800f5a0 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f592:	4b07      	ldr	r3, [pc, #28]	; (800f5b0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f594:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f598:	4906      	ldr	r1, [pc, #24]	; (800f5b4 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f59a:	4807      	ldr	r0, [pc, #28]	; (800f5b8 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f59c:	f000 faa8 	bl	800faf0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f5a0:	6879      	ldr	r1, [r7, #4]
 800f5a2:	2005      	movs	r0, #5
 800f5a4:	f7f6 fea0 	bl	80062e8 <memp_free>
}
 800f5a8:	bf00      	nop
 800f5aa:	3708      	adds	r7, #8
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	08013444 	.word	0x08013444
 800f5b4:	080135fc 	.word	0x080135fc
 800f5b8:	0801348c 	.word	0x0801348c

0800f5bc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b084      	sub	sp, #16
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d106      	bne.n	800f5dc <ipfrag_free_pbuf_custom+0x20>
 800f5ce:	4b11      	ldr	r3, [pc, #68]	; (800f614 <ipfrag_free_pbuf_custom+0x58>)
 800f5d0:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f5d4:	4910      	ldr	r1, [pc, #64]	; (800f618 <ipfrag_free_pbuf_custom+0x5c>)
 800f5d6:	4811      	ldr	r0, [pc, #68]	; (800f61c <ipfrag_free_pbuf_custom+0x60>)
 800f5d8:	f000 fa8a 	bl	800faf0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f5dc:	68fa      	ldr	r2, [r7, #12]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d006      	beq.n	800f5f2 <ipfrag_free_pbuf_custom+0x36>
 800f5e4:	4b0b      	ldr	r3, [pc, #44]	; (800f614 <ipfrag_free_pbuf_custom+0x58>)
 800f5e6:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f5ea:	490d      	ldr	r1, [pc, #52]	; (800f620 <ipfrag_free_pbuf_custom+0x64>)
 800f5ec:	480b      	ldr	r0, [pc, #44]	; (800f61c <ipfrag_free_pbuf_custom+0x60>)
 800f5ee:	f000 fa7f 	bl	800faf0 <iprintf>
  if (pcr->original != NULL) {
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	695b      	ldr	r3, [r3, #20]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d004      	beq.n	800f604 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	695b      	ldr	r3, [r3, #20]
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7f7 fce8 	bl	8006fd4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f604:	68f8      	ldr	r0, [r7, #12]
 800f606:	f7ff ffbd 	bl	800f584 <ip_frag_free_pbuf_custom_ref>
}
 800f60a:	bf00      	nop
 800f60c:	3710      	adds	r7, #16
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop
 800f614:	08013444 	.word	0x08013444
 800f618:	08013608 	.word	0x08013608
 800f61c:	0801348c 	.word	0x0801348c
 800f620:	08013614 	.word	0x08013614

0800f624 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b094      	sub	sp, #80	; 0x50
 800f628:	af02      	add	r7, sp, #8
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f630:	2300      	movs	r3, #0
 800f632:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f63a:	3b14      	subs	r3, #20
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	da00      	bge.n	800f642 <ip4_frag+0x1e>
 800f640:	3307      	adds	r3, #7
 800f642:	10db      	asrs	r3, r3, #3
 800f644:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f646:	2314      	movs	r3, #20
 800f648:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f652:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	f003 030f 	and.w	r3, r3, #15
 800f65c:	b2db      	uxtb	r3, r3
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	b2db      	uxtb	r3, r3
 800f662:	2b14      	cmp	r3, #20
 800f664:	d002      	beq.n	800f66c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f666:	f06f 0305 	mvn.w	r3, #5
 800f66a:	e110      	b.n	800f88e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	895b      	ldrh	r3, [r3, #10]
 800f670:	2b13      	cmp	r3, #19
 800f672:	d809      	bhi.n	800f688 <ip4_frag+0x64>
 800f674:	4b88      	ldr	r3, [pc, #544]	; (800f898 <ip4_frag+0x274>)
 800f676:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f67a:	4988      	ldr	r1, [pc, #544]	; (800f89c <ip4_frag+0x278>)
 800f67c:	4888      	ldr	r0, [pc, #544]	; (800f8a0 <ip4_frag+0x27c>)
 800f67e:	f000 fa37 	bl	800faf0 <iprintf>
 800f682:	f06f 0305 	mvn.w	r3, #5
 800f686:	e102      	b.n	800f88e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68a:	88db      	ldrh	r3, [r3, #6]
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	4618      	mov	r0, r3
 800f690:	f7f6 f942 	bl	8005918 <lwip_htons>
 800f694:	4603      	mov	r3, r0
 800f696:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f698:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f69a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f69e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f6a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f6a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f6a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	891b      	ldrh	r3, [r3, #8]
 800f6ae:	3b14      	subs	r3, #20
 800f6b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f6b4:	e0e1      	b.n	800f87a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f6b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f6b8:	00db      	lsls	r3, r3, #3
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	bf28      	it	cs
 800f6c4:	4613      	movcs	r3, r2
 800f6c6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f6c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f6cc:	2114      	movs	r1, #20
 800f6ce:	200e      	movs	r0, #14
 800f6d0:	f7f7 f99c 	bl	8006a0c <pbuf_alloc>
 800f6d4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	f000 80d5 	beq.w	800f888 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e0:	895b      	ldrh	r3, [r3, #10]
 800f6e2:	2b13      	cmp	r3, #19
 800f6e4:	d806      	bhi.n	800f6f4 <ip4_frag+0xd0>
 800f6e6:	4b6c      	ldr	r3, [pc, #432]	; (800f898 <ip4_frag+0x274>)
 800f6e8:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f6ec:	496d      	ldr	r1, [pc, #436]	; (800f8a4 <ip4_frag+0x280>)
 800f6ee:	486c      	ldr	r0, [pc, #432]	; (800f8a0 <ip4_frag+0x27c>)
 800f6f0:	f000 f9fe 	bl	800faf0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	2214      	movs	r2, #20
 800f6fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f000 f9e1 	bl	800fac4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f704:	685b      	ldr	r3, [r3, #4]
 800f706:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f708:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f70a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f70e:	e064      	b.n	800f7da <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	895a      	ldrh	r2, [r3, #10]
 800f714:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f716:	1ad3      	subs	r3, r2, r3
 800f718:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	895b      	ldrh	r3, [r3, #10]
 800f71e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f720:	429a      	cmp	r2, r3
 800f722:	d906      	bls.n	800f732 <ip4_frag+0x10e>
 800f724:	4b5c      	ldr	r3, [pc, #368]	; (800f898 <ip4_frag+0x274>)
 800f726:	f240 322d 	movw	r2, #813	; 0x32d
 800f72a:	495f      	ldr	r1, [pc, #380]	; (800f8a8 <ip4_frag+0x284>)
 800f72c:	485c      	ldr	r0, [pc, #368]	; (800f8a0 <ip4_frag+0x27c>)
 800f72e:	f000 f9df 	bl	800faf0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f732:	8bfa      	ldrh	r2, [r7, #30]
 800f734:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f738:	4293      	cmp	r3, r2
 800f73a:	bf28      	it	cs
 800f73c:	4613      	movcs	r3, r2
 800f73e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f742:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f746:	2b00      	cmp	r3, #0
 800f748:	d105      	bne.n	800f756 <ip4_frag+0x132>
        poff = 0;
 800f74a:	2300      	movs	r3, #0
 800f74c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	60fb      	str	r3, [r7, #12]
        continue;
 800f754:	e041      	b.n	800f7da <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f756:	f7ff ff0d 	bl	800f574 <ip_frag_alloc_pbuf_custom_ref>
 800f75a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f75c:	69bb      	ldr	r3, [r7, #24]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d103      	bne.n	800f76a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f764:	f7f7 fc36 	bl	8006fd4 <pbuf_free>
        goto memerr;
 800f768:	e08f      	b.n	800f88a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f76a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f770:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f772:	4413      	add	r3, r2
 800f774:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f778:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f77c:	9201      	str	r2, [sp, #4]
 800f77e:	9300      	str	r3, [sp, #0]
 800f780:	4603      	mov	r3, r0
 800f782:	2241      	movs	r2, #65	; 0x41
 800f784:	2000      	movs	r0, #0
 800f786:	f7f7 fa6b 	bl	8006c60 <pbuf_alloced_custom>
 800f78a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d106      	bne.n	800f7a0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f792:	69b8      	ldr	r0, [r7, #24]
 800f794:	f7ff fef6 	bl	800f584 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f79a:	f7f7 fc1b 	bl	8006fd4 <pbuf_free>
        goto memerr;
 800f79e:	e074      	b.n	800f88a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f7a0:	68f8      	ldr	r0, [r7, #12]
 800f7a2:	f7f7 fcb7 	bl	8007114 <pbuf_ref>
      pcr->original = p;
 800f7a6:	69bb      	ldr	r3, [r7, #24]
 800f7a8:	68fa      	ldr	r2, [r7, #12]
 800f7aa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f7ac:	69bb      	ldr	r3, [r7, #24]
 800f7ae:	4a3f      	ldr	r2, [pc, #252]	; (800f8ac <ip4_frag+0x288>)
 800f7b0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f7b2:	6979      	ldr	r1, [r7, #20]
 800f7b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7b6:	f7f7 fccf 	bl	8007158 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f7ba:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f7be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f7c2:	1ad3      	subs	r3, r2, r3
 800f7c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f7c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d004      	beq.n	800f7da <ip4_frag+0x1b6>
        poff = 0;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f7da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d196      	bne.n	800f710 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f7e2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f7e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f7e8:	4413      	add	r3, r2
 800f7ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f7f0:	f1a3 0213 	sub.w	r2, r3, #19
 800f7f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	bfcc      	ite	gt
 800f7fc:	2301      	movgt	r3, #1
 800f7fe:	2300      	movle	r3, #0
 800f800:	b2db      	uxtb	r3, r3
 800f802:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f804:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f80c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f80e:	6a3b      	ldr	r3, [r7, #32]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d002      	beq.n	800f81a <ip4_frag+0x1f6>
 800f814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f816:	2b00      	cmp	r3, #0
 800f818:	d003      	beq.n	800f822 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f81a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f81c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f820:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f822:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f824:	4618      	mov	r0, r3
 800f826:	f7f6 f877 	bl	8005918 <lwip_htons>
 800f82a:	4603      	mov	r3, r0
 800f82c:	461a      	mov	r2, r3
 800f82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f830:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f832:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f834:	3314      	adds	r3, #20
 800f836:	b29b      	uxth	r3, r3
 800f838:	4618      	mov	r0, r3
 800f83a:	f7f6 f86d 	bl	8005918 <lwip_htons>
 800f83e:	4603      	mov	r3, r0
 800f840:	461a      	mov	r2, r3
 800f842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f844:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f848:	2200      	movs	r2, #0
 800f84a:	729a      	strb	r2, [r3, #10]
 800f84c:	2200      	movs	r2, #0
 800f84e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	695b      	ldr	r3, [r3, #20]
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f858:	68b8      	ldr	r0, [r7, #8]
 800f85a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f85c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f85e:	f7f7 fbb9 	bl	8006fd4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f862:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f866:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f868:	1ad3      	subs	r3, r2, r3
 800f86a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f86e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f872:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f874:	4413      	add	r3, r2
 800f876:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f87a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f87e:	2b00      	cmp	r3, #0
 800f880:	f47f af19 	bne.w	800f6b6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f884:	2300      	movs	r3, #0
 800f886:	e002      	b.n	800f88e <ip4_frag+0x26a>
      goto memerr;
 800f888:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f88a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3748      	adds	r7, #72	; 0x48
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	08013444 	.word	0x08013444
 800f89c:	08013620 	.word	0x08013620
 800f8a0:	0801348c 	.word	0x0801348c
 800f8a4:	0801363c 	.word	0x0801363c
 800f8a8:	0801365c 	.word	0x0801365c
 800f8ac:	0800f5bd 	.word	0x0800f5bd

0800f8b0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b086      	sub	sp, #24
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f8ba:	230e      	movs	r3, #14
 800f8bc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	895b      	ldrh	r3, [r3, #10]
 800f8c2:	2b0e      	cmp	r3, #14
 800f8c4:	d96e      	bls.n	800f9a4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	7bdb      	ldrb	r3, [r3, #15]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d106      	bne.n	800f8dc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	b2da      	uxtb	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	7b1a      	ldrb	r2, [r3, #12]
 800f8e6:	7b5b      	ldrb	r3, [r3, #13]
 800f8e8:	021b      	lsls	r3, r3, #8
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f8ee:	693b      	ldr	r3, [r7, #16]
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	f003 0301 	and.w	r3, r3, #1
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d023      	beq.n	800f942 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	2b01      	cmp	r3, #1
 800f900:	d10f      	bne.n	800f922 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	785b      	ldrb	r3, [r3, #1]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d11b      	bne.n	800f942 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f90e:	2b5e      	cmp	r3, #94	; 0x5e
 800f910:	d117      	bne.n	800f942 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	7b5b      	ldrb	r3, [r3, #13]
 800f916:	f043 0310 	orr.w	r3, r3, #16
 800f91a:	b2da      	uxtb	r2, r3
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	735a      	strb	r2, [r3, #13]
 800f920:	e00f      	b.n	800f942 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	2206      	movs	r2, #6
 800f926:	4928      	ldr	r1, [pc, #160]	; (800f9c8 <ethernet_input+0x118>)
 800f928:	4618      	mov	r0, r3
 800f92a:	f000 f8bb 	bl	800faa4 <memcmp>
 800f92e:	4603      	mov	r3, r0
 800f930:	2b00      	cmp	r3, #0
 800f932:	d106      	bne.n	800f942 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	7b5b      	ldrb	r3, [r3, #13]
 800f938:	f043 0308 	orr.w	r3, r3, #8
 800f93c:	b2da      	uxtb	r2, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f942:	89fb      	ldrh	r3, [r7, #14]
 800f944:	2b08      	cmp	r3, #8
 800f946:	d003      	beq.n	800f950 <ethernet_input+0xa0>
 800f948:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f94c:	d014      	beq.n	800f978 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f94e:	e032      	b.n	800f9b6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f956:	f003 0308 	and.w	r3, r3, #8
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d024      	beq.n	800f9a8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f95e:	8afb      	ldrh	r3, [r7, #22]
 800f960:	4619      	mov	r1, r3
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f7f7 fab0 	bl	8006ec8 <pbuf_remove_header>
 800f968:	4603      	mov	r3, r0
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d11e      	bne.n	800f9ac <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f96e:	6839      	ldr	r1, [r7, #0]
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f7fe fe91 	bl	800e698 <ip4_input>
      break;
 800f976:	e013      	b.n	800f9a0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f97e:	f003 0308 	and.w	r3, r3, #8
 800f982:	2b00      	cmp	r3, #0
 800f984:	d014      	beq.n	800f9b0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f986:	8afb      	ldrh	r3, [r7, #22]
 800f988:	4619      	mov	r1, r3
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f7f7 fa9c 	bl	8006ec8 <pbuf_remove_header>
 800f990:	4603      	mov	r3, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	d10e      	bne.n	800f9b4 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f996:	6839      	ldr	r1, [r7, #0]
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f7fe f831 	bl	800da00 <etharp_input>
      break;
 800f99e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	e00c      	b.n	800f9be <ethernet_input+0x10e>
    goto free_and_return;
 800f9a4:	bf00      	nop
 800f9a6:	e006      	b.n	800f9b6 <ethernet_input+0x106>
        goto free_and_return;
 800f9a8:	bf00      	nop
 800f9aa:	e004      	b.n	800f9b6 <ethernet_input+0x106>
        goto free_and_return;
 800f9ac:	bf00      	nop
 800f9ae:	e002      	b.n	800f9b6 <ethernet_input+0x106>
        goto free_and_return;
 800f9b0:	bf00      	nop
 800f9b2:	e000      	b.n	800f9b6 <ethernet_input+0x106>
        goto free_and_return;
 800f9b4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f7f7 fb0c 	bl	8006fd4 <pbuf_free>
  return ERR_OK;
 800f9bc:	2300      	movs	r3, #0
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3718      	adds	r7, #24
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
 800f9c6:	bf00      	nop
 800f9c8:	080137f8 	.word	0x080137f8

0800f9cc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b086      	sub	sp, #24
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	607a      	str	r2, [r7, #4]
 800f9d8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f9da:	8c3b      	ldrh	r3, [r7, #32]
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7f5 ff9b 	bl	8005918 <lwip_htons>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f9e6:	210e      	movs	r1, #14
 800f9e8:	68b8      	ldr	r0, [r7, #8]
 800f9ea:	f7f7 fa5d 	bl	8006ea8 <pbuf_add_header>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d125      	bne.n	800fa40 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	8afa      	ldrh	r2, [r7, #22]
 800f9fe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	2206      	movs	r2, #6
 800fa04:	6839      	ldr	r1, [r7, #0]
 800fa06:	4618      	mov	r0, r3
 800fa08:	f000 f85c 	bl	800fac4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	3306      	adds	r3, #6
 800fa10:	2206      	movs	r2, #6
 800fa12:	6879      	ldr	r1, [r7, #4]
 800fa14:	4618      	mov	r0, r3
 800fa16:	f000 f855 	bl	800fac4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fa20:	2b06      	cmp	r3, #6
 800fa22:	d006      	beq.n	800fa32 <ethernet_output+0x66>
 800fa24:	4b0a      	ldr	r3, [pc, #40]	; (800fa50 <ethernet_output+0x84>)
 800fa26:	f44f 7299 	mov.w	r2, #306	; 0x132
 800fa2a:	490a      	ldr	r1, [pc, #40]	; (800fa54 <ethernet_output+0x88>)
 800fa2c:	480a      	ldr	r0, [pc, #40]	; (800fa58 <ethernet_output+0x8c>)
 800fa2e:	f000 f85f 	bl	800faf0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	699b      	ldr	r3, [r3, #24]
 800fa36:	68b9      	ldr	r1, [r7, #8]
 800fa38:	68f8      	ldr	r0, [r7, #12]
 800fa3a:	4798      	blx	r3
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	e002      	b.n	800fa46 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fa40:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fa42:	f06f 0301 	mvn.w	r3, #1
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3718      	adds	r7, #24
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
 800fa4e:	bf00      	nop
 800fa50:	0801366c 	.word	0x0801366c
 800fa54:	080136a4 	.word	0x080136a4
 800fa58:	080136d8 	.word	0x080136d8

0800fa5c <__libc_init_array>:
 800fa5c:	b570      	push	{r4, r5, r6, lr}
 800fa5e:	4d0d      	ldr	r5, [pc, #52]	; (800fa94 <__libc_init_array+0x38>)
 800fa60:	4c0d      	ldr	r4, [pc, #52]	; (800fa98 <__libc_init_array+0x3c>)
 800fa62:	1b64      	subs	r4, r4, r5
 800fa64:	10a4      	asrs	r4, r4, #2
 800fa66:	2600      	movs	r6, #0
 800fa68:	42a6      	cmp	r6, r4
 800fa6a:	d109      	bne.n	800fa80 <__libc_init_array+0x24>
 800fa6c:	4d0b      	ldr	r5, [pc, #44]	; (800fa9c <__libc_init_array+0x40>)
 800fa6e:	4c0c      	ldr	r4, [pc, #48]	; (800faa0 <__libc_init_array+0x44>)
 800fa70:	f001 f904 	bl	8010c7c <_init>
 800fa74:	1b64      	subs	r4, r4, r5
 800fa76:	10a4      	asrs	r4, r4, #2
 800fa78:	2600      	movs	r6, #0
 800fa7a:	42a6      	cmp	r6, r4
 800fa7c:	d105      	bne.n	800fa8a <__libc_init_array+0x2e>
 800fa7e:	bd70      	pop	{r4, r5, r6, pc}
 800fa80:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa84:	4798      	blx	r3
 800fa86:	3601      	adds	r6, #1
 800fa88:	e7ee      	b.n	800fa68 <__libc_init_array+0xc>
 800fa8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa8e:	4798      	blx	r3
 800fa90:	3601      	adds	r6, #1
 800fa92:	e7f2      	b.n	800fa7a <__libc_init_array+0x1e>
 800fa94:	08013958 	.word	0x08013958
 800fa98:	08013958 	.word	0x08013958
 800fa9c:	08013958 	.word	0x08013958
 800faa0:	0801395c 	.word	0x0801395c

0800faa4 <memcmp>:
 800faa4:	b510      	push	{r4, lr}
 800faa6:	3901      	subs	r1, #1
 800faa8:	4402      	add	r2, r0
 800faaa:	4290      	cmp	r0, r2
 800faac:	d101      	bne.n	800fab2 <memcmp+0xe>
 800faae:	2000      	movs	r0, #0
 800fab0:	e005      	b.n	800fabe <memcmp+0x1a>
 800fab2:	7803      	ldrb	r3, [r0, #0]
 800fab4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fab8:	42a3      	cmp	r3, r4
 800faba:	d001      	beq.n	800fac0 <memcmp+0x1c>
 800fabc:	1b18      	subs	r0, r3, r4
 800fabe:	bd10      	pop	{r4, pc}
 800fac0:	3001      	adds	r0, #1
 800fac2:	e7f2      	b.n	800faaa <memcmp+0x6>

0800fac4 <memcpy>:
 800fac4:	440a      	add	r2, r1
 800fac6:	4291      	cmp	r1, r2
 800fac8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800facc:	d100      	bne.n	800fad0 <memcpy+0xc>
 800face:	4770      	bx	lr
 800fad0:	b510      	push	{r4, lr}
 800fad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fada:	4291      	cmp	r1, r2
 800fadc:	d1f9      	bne.n	800fad2 <memcpy+0xe>
 800fade:	bd10      	pop	{r4, pc}

0800fae0 <memset>:
 800fae0:	4402      	add	r2, r0
 800fae2:	4603      	mov	r3, r0
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d100      	bne.n	800faea <memset+0xa>
 800fae8:	4770      	bx	lr
 800faea:	f803 1b01 	strb.w	r1, [r3], #1
 800faee:	e7f9      	b.n	800fae4 <memset+0x4>

0800faf0 <iprintf>:
 800faf0:	b40f      	push	{r0, r1, r2, r3}
 800faf2:	4b0a      	ldr	r3, [pc, #40]	; (800fb1c <iprintf+0x2c>)
 800faf4:	b513      	push	{r0, r1, r4, lr}
 800faf6:	681c      	ldr	r4, [r3, #0]
 800faf8:	b124      	cbz	r4, 800fb04 <iprintf+0x14>
 800fafa:	69a3      	ldr	r3, [r4, #24]
 800fafc:	b913      	cbnz	r3, 800fb04 <iprintf+0x14>
 800fafe:	4620      	mov	r0, r4
 800fb00:	f000 faba 	bl	8010078 <__sinit>
 800fb04:	ab05      	add	r3, sp, #20
 800fb06:	9a04      	ldr	r2, [sp, #16]
 800fb08:	68a1      	ldr	r1, [r4, #8]
 800fb0a:	9301      	str	r3, [sp, #4]
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	f000 fcdd 	bl	80104cc <_vfiprintf_r>
 800fb12:	b002      	add	sp, #8
 800fb14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb18:	b004      	add	sp, #16
 800fb1a:	4770      	bx	lr
 800fb1c:	2000002c 	.word	0x2000002c

0800fb20 <_puts_r>:
 800fb20:	b570      	push	{r4, r5, r6, lr}
 800fb22:	460e      	mov	r6, r1
 800fb24:	4605      	mov	r5, r0
 800fb26:	b118      	cbz	r0, 800fb30 <_puts_r+0x10>
 800fb28:	6983      	ldr	r3, [r0, #24]
 800fb2a:	b90b      	cbnz	r3, 800fb30 <_puts_r+0x10>
 800fb2c:	f000 faa4 	bl	8010078 <__sinit>
 800fb30:	69ab      	ldr	r3, [r5, #24]
 800fb32:	68ac      	ldr	r4, [r5, #8]
 800fb34:	b913      	cbnz	r3, 800fb3c <_puts_r+0x1c>
 800fb36:	4628      	mov	r0, r5
 800fb38:	f000 fa9e 	bl	8010078 <__sinit>
 800fb3c:	4b2c      	ldr	r3, [pc, #176]	; (800fbf0 <_puts_r+0xd0>)
 800fb3e:	429c      	cmp	r4, r3
 800fb40:	d120      	bne.n	800fb84 <_puts_r+0x64>
 800fb42:	686c      	ldr	r4, [r5, #4]
 800fb44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb46:	07db      	lsls	r3, r3, #31
 800fb48:	d405      	bmi.n	800fb56 <_puts_r+0x36>
 800fb4a:	89a3      	ldrh	r3, [r4, #12]
 800fb4c:	0598      	lsls	r0, r3, #22
 800fb4e:	d402      	bmi.n	800fb56 <_puts_r+0x36>
 800fb50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb52:	f000 fb41 	bl	80101d8 <__retarget_lock_acquire_recursive>
 800fb56:	89a3      	ldrh	r3, [r4, #12]
 800fb58:	0719      	lsls	r1, r3, #28
 800fb5a:	d51d      	bpl.n	800fb98 <_puts_r+0x78>
 800fb5c:	6923      	ldr	r3, [r4, #16]
 800fb5e:	b1db      	cbz	r3, 800fb98 <_puts_r+0x78>
 800fb60:	3e01      	subs	r6, #1
 800fb62:	68a3      	ldr	r3, [r4, #8]
 800fb64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fb68:	3b01      	subs	r3, #1
 800fb6a:	60a3      	str	r3, [r4, #8]
 800fb6c:	bb39      	cbnz	r1, 800fbbe <_puts_r+0x9e>
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	da38      	bge.n	800fbe4 <_puts_r+0xc4>
 800fb72:	4622      	mov	r2, r4
 800fb74:	210a      	movs	r1, #10
 800fb76:	4628      	mov	r0, r5
 800fb78:	f000 f886 	bl	800fc88 <__swbuf_r>
 800fb7c:	3001      	adds	r0, #1
 800fb7e:	d011      	beq.n	800fba4 <_puts_r+0x84>
 800fb80:	250a      	movs	r5, #10
 800fb82:	e011      	b.n	800fba8 <_puts_r+0x88>
 800fb84:	4b1b      	ldr	r3, [pc, #108]	; (800fbf4 <_puts_r+0xd4>)
 800fb86:	429c      	cmp	r4, r3
 800fb88:	d101      	bne.n	800fb8e <_puts_r+0x6e>
 800fb8a:	68ac      	ldr	r4, [r5, #8]
 800fb8c:	e7da      	b.n	800fb44 <_puts_r+0x24>
 800fb8e:	4b1a      	ldr	r3, [pc, #104]	; (800fbf8 <_puts_r+0xd8>)
 800fb90:	429c      	cmp	r4, r3
 800fb92:	bf08      	it	eq
 800fb94:	68ec      	ldreq	r4, [r5, #12]
 800fb96:	e7d5      	b.n	800fb44 <_puts_r+0x24>
 800fb98:	4621      	mov	r1, r4
 800fb9a:	4628      	mov	r0, r5
 800fb9c:	f000 f8c6 	bl	800fd2c <__swsetup_r>
 800fba0:	2800      	cmp	r0, #0
 800fba2:	d0dd      	beq.n	800fb60 <_puts_r+0x40>
 800fba4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800fba8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbaa:	07da      	lsls	r2, r3, #31
 800fbac:	d405      	bmi.n	800fbba <_puts_r+0x9a>
 800fbae:	89a3      	ldrh	r3, [r4, #12]
 800fbb0:	059b      	lsls	r3, r3, #22
 800fbb2:	d402      	bmi.n	800fbba <_puts_r+0x9a>
 800fbb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbb6:	f000 fb10 	bl	80101da <__retarget_lock_release_recursive>
 800fbba:	4628      	mov	r0, r5
 800fbbc:	bd70      	pop	{r4, r5, r6, pc}
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	da04      	bge.n	800fbcc <_puts_r+0xac>
 800fbc2:	69a2      	ldr	r2, [r4, #24]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	dc06      	bgt.n	800fbd6 <_puts_r+0xb6>
 800fbc8:	290a      	cmp	r1, #10
 800fbca:	d004      	beq.n	800fbd6 <_puts_r+0xb6>
 800fbcc:	6823      	ldr	r3, [r4, #0]
 800fbce:	1c5a      	adds	r2, r3, #1
 800fbd0:	6022      	str	r2, [r4, #0]
 800fbd2:	7019      	strb	r1, [r3, #0]
 800fbd4:	e7c5      	b.n	800fb62 <_puts_r+0x42>
 800fbd6:	4622      	mov	r2, r4
 800fbd8:	4628      	mov	r0, r5
 800fbda:	f000 f855 	bl	800fc88 <__swbuf_r>
 800fbde:	3001      	adds	r0, #1
 800fbe0:	d1bf      	bne.n	800fb62 <_puts_r+0x42>
 800fbe2:	e7df      	b.n	800fba4 <_puts_r+0x84>
 800fbe4:	6823      	ldr	r3, [r4, #0]
 800fbe6:	250a      	movs	r5, #10
 800fbe8:	1c5a      	adds	r2, r3, #1
 800fbea:	6022      	str	r2, [r4, #0]
 800fbec:	701d      	strb	r5, [r3, #0]
 800fbee:	e7db      	b.n	800fba8 <_puts_r+0x88>
 800fbf0:	080138dc 	.word	0x080138dc
 800fbf4:	080138fc 	.word	0x080138fc
 800fbf8:	080138bc 	.word	0x080138bc

0800fbfc <puts>:
 800fbfc:	4b02      	ldr	r3, [pc, #8]	; (800fc08 <puts+0xc>)
 800fbfe:	4601      	mov	r1, r0
 800fc00:	6818      	ldr	r0, [r3, #0]
 800fc02:	f7ff bf8d 	b.w	800fb20 <_puts_r>
 800fc06:	bf00      	nop
 800fc08:	2000002c 	.word	0x2000002c

0800fc0c <rand>:
 800fc0c:	4b16      	ldr	r3, [pc, #88]	; (800fc68 <rand+0x5c>)
 800fc0e:	b510      	push	{r4, lr}
 800fc10:	681c      	ldr	r4, [r3, #0]
 800fc12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fc14:	b9b3      	cbnz	r3, 800fc44 <rand+0x38>
 800fc16:	2018      	movs	r0, #24
 800fc18:	f000 fb46 	bl	80102a8 <malloc>
 800fc1c:	63a0      	str	r0, [r4, #56]	; 0x38
 800fc1e:	b928      	cbnz	r0, 800fc2c <rand+0x20>
 800fc20:	4602      	mov	r2, r0
 800fc22:	4b12      	ldr	r3, [pc, #72]	; (800fc6c <rand+0x60>)
 800fc24:	4812      	ldr	r0, [pc, #72]	; (800fc70 <rand+0x64>)
 800fc26:	214e      	movs	r1, #78	; 0x4e
 800fc28:	f000 f8ee 	bl	800fe08 <__assert_func>
 800fc2c:	4a11      	ldr	r2, [pc, #68]	; (800fc74 <rand+0x68>)
 800fc2e:	4b12      	ldr	r3, [pc, #72]	; (800fc78 <rand+0x6c>)
 800fc30:	e9c0 2300 	strd	r2, r3, [r0]
 800fc34:	4b11      	ldr	r3, [pc, #68]	; (800fc7c <rand+0x70>)
 800fc36:	6083      	str	r3, [r0, #8]
 800fc38:	230b      	movs	r3, #11
 800fc3a:	8183      	strh	r3, [r0, #12]
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	2300      	movs	r3, #0
 800fc40:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800fc44:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800fc46:	4a0e      	ldr	r2, [pc, #56]	; (800fc80 <rand+0x74>)
 800fc48:	6920      	ldr	r0, [r4, #16]
 800fc4a:	6963      	ldr	r3, [r4, #20]
 800fc4c:	490d      	ldr	r1, [pc, #52]	; (800fc84 <rand+0x78>)
 800fc4e:	4342      	muls	r2, r0
 800fc50:	fb01 2203 	mla	r2, r1, r3, r2
 800fc54:	fba0 0101 	umull	r0, r1, r0, r1
 800fc58:	1c43      	adds	r3, r0, #1
 800fc5a:	eb42 0001 	adc.w	r0, r2, r1
 800fc5e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800fc62:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fc66:	bd10      	pop	{r4, pc}
 800fc68:	2000002c 	.word	0x2000002c
 800fc6c:	0801380c 	.word	0x0801380c
 800fc70:	08013823 	.word	0x08013823
 800fc74:	abcd330e 	.word	0xabcd330e
 800fc78:	e66d1234 	.word	0xe66d1234
 800fc7c:	0005deec 	.word	0x0005deec
 800fc80:	5851f42d 	.word	0x5851f42d
 800fc84:	4c957f2d 	.word	0x4c957f2d

0800fc88 <__swbuf_r>:
 800fc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc8a:	460e      	mov	r6, r1
 800fc8c:	4614      	mov	r4, r2
 800fc8e:	4605      	mov	r5, r0
 800fc90:	b118      	cbz	r0, 800fc9a <__swbuf_r+0x12>
 800fc92:	6983      	ldr	r3, [r0, #24]
 800fc94:	b90b      	cbnz	r3, 800fc9a <__swbuf_r+0x12>
 800fc96:	f000 f9ef 	bl	8010078 <__sinit>
 800fc9a:	4b21      	ldr	r3, [pc, #132]	; (800fd20 <__swbuf_r+0x98>)
 800fc9c:	429c      	cmp	r4, r3
 800fc9e:	d12b      	bne.n	800fcf8 <__swbuf_r+0x70>
 800fca0:	686c      	ldr	r4, [r5, #4]
 800fca2:	69a3      	ldr	r3, [r4, #24]
 800fca4:	60a3      	str	r3, [r4, #8]
 800fca6:	89a3      	ldrh	r3, [r4, #12]
 800fca8:	071a      	lsls	r2, r3, #28
 800fcaa:	d52f      	bpl.n	800fd0c <__swbuf_r+0x84>
 800fcac:	6923      	ldr	r3, [r4, #16]
 800fcae:	b36b      	cbz	r3, 800fd0c <__swbuf_r+0x84>
 800fcb0:	6923      	ldr	r3, [r4, #16]
 800fcb2:	6820      	ldr	r0, [r4, #0]
 800fcb4:	1ac0      	subs	r0, r0, r3
 800fcb6:	6963      	ldr	r3, [r4, #20]
 800fcb8:	b2f6      	uxtb	r6, r6
 800fcba:	4283      	cmp	r3, r0
 800fcbc:	4637      	mov	r7, r6
 800fcbe:	dc04      	bgt.n	800fcca <__swbuf_r+0x42>
 800fcc0:	4621      	mov	r1, r4
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	f000 f944 	bl	800ff50 <_fflush_r>
 800fcc8:	bb30      	cbnz	r0, 800fd18 <__swbuf_r+0x90>
 800fcca:	68a3      	ldr	r3, [r4, #8]
 800fccc:	3b01      	subs	r3, #1
 800fcce:	60a3      	str	r3, [r4, #8]
 800fcd0:	6823      	ldr	r3, [r4, #0]
 800fcd2:	1c5a      	adds	r2, r3, #1
 800fcd4:	6022      	str	r2, [r4, #0]
 800fcd6:	701e      	strb	r6, [r3, #0]
 800fcd8:	6963      	ldr	r3, [r4, #20]
 800fcda:	3001      	adds	r0, #1
 800fcdc:	4283      	cmp	r3, r0
 800fcde:	d004      	beq.n	800fcea <__swbuf_r+0x62>
 800fce0:	89a3      	ldrh	r3, [r4, #12]
 800fce2:	07db      	lsls	r3, r3, #31
 800fce4:	d506      	bpl.n	800fcf4 <__swbuf_r+0x6c>
 800fce6:	2e0a      	cmp	r6, #10
 800fce8:	d104      	bne.n	800fcf4 <__swbuf_r+0x6c>
 800fcea:	4621      	mov	r1, r4
 800fcec:	4628      	mov	r0, r5
 800fcee:	f000 f92f 	bl	800ff50 <_fflush_r>
 800fcf2:	b988      	cbnz	r0, 800fd18 <__swbuf_r+0x90>
 800fcf4:	4638      	mov	r0, r7
 800fcf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcf8:	4b0a      	ldr	r3, [pc, #40]	; (800fd24 <__swbuf_r+0x9c>)
 800fcfa:	429c      	cmp	r4, r3
 800fcfc:	d101      	bne.n	800fd02 <__swbuf_r+0x7a>
 800fcfe:	68ac      	ldr	r4, [r5, #8]
 800fd00:	e7cf      	b.n	800fca2 <__swbuf_r+0x1a>
 800fd02:	4b09      	ldr	r3, [pc, #36]	; (800fd28 <__swbuf_r+0xa0>)
 800fd04:	429c      	cmp	r4, r3
 800fd06:	bf08      	it	eq
 800fd08:	68ec      	ldreq	r4, [r5, #12]
 800fd0a:	e7ca      	b.n	800fca2 <__swbuf_r+0x1a>
 800fd0c:	4621      	mov	r1, r4
 800fd0e:	4628      	mov	r0, r5
 800fd10:	f000 f80c 	bl	800fd2c <__swsetup_r>
 800fd14:	2800      	cmp	r0, #0
 800fd16:	d0cb      	beq.n	800fcb0 <__swbuf_r+0x28>
 800fd18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fd1c:	e7ea      	b.n	800fcf4 <__swbuf_r+0x6c>
 800fd1e:	bf00      	nop
 800fd20:	080138dc 	.word	0x080138dc
 800fd24:	080138fc 	.word	0x080138fc
 800fd28:	080138bc 	.word	0x080138bc

0800fd2c <__swsetup_r>:
 800fd2c:	4b32      	ldr	r3, [pc, #200]	; (800fdf8 <__swsetup_r+0xcc>)
 800fd2e:	b570      	push	{r4, r5, r6, lr}
 800fd30:	681d      	ldr	r5, [r3, #0]
 800fd32:	4606      	mov	r6, r0
 800fd34:	460c      	mov	r4, r1
 800fd36:	b125      	cbz	r5, 800fd42 <__swsetup_r+0x16>
 800fd38:	69ab      	ldr	r3, [r5, #24]
 800fd3a:	b913      	cbnz	r3, 800fd42 <__swsetup_r+0x16>
 800fd3c:	4628      	mov	r0, r5
 800fd3e:	f000 f99b 	bl	8010078 <__sinit>
 800fd42:	4b2e      	ldr	r3, [pc, #184]	; (800fdfc <__swsetup_r+0xd0>)
 800fd44:	429c      	cmp	r4, r3
 800fd46:	d10f      	bne.n	800fd68 <__swsetup_r+0x3c>
 800fd48:	686c      	ldr	r4, [r5, #4]
 800fd4a:	89a3      	ldrh	r3, [r4, #12]
 800fd4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd50:	0719      	lsls	r1, r3, #28
 800fd52:	d42c      	bmi.n	800fdae <__swsetup_r+0x82>
 800fd54:	06dd      	lsls	r5, r3, #27
 800fd56:	d411      	bmi.n	800fd7c <__swsetup_r+0x50>
 800fd58:	2309      	movs	r3, #9
 800fd5a:	6033      	str	r3, [r6, #0]
 800fd5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fd60:	81a3      	strh	r3, [r4, #12]
 800fd62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd66:	e03e      	b.n	800fde6 <__swsetup_r+0xba>
 800fd68:	4b25      	ldr	r3, [pc, #148]	; (800fe00 <__swsetup_r+0xd4>)
 800fd6a:	429c      	cmp	r4, r3
 800fd6c:	d101      	bne.n	800fd72 <__swsetup_r+0x46>
 800fd6e:	68ac      	ldr	r4, [r5, #8]
 800fd70:	e7eb      	b.n	800fd4a <__swsetup_r+0x1e>
 800fd72:	4b24      	ldr	r3, [pc, #144]	; (800fe04 <__swsetup_r+0xd8>)
 800fd74:	429c      	cmp	r4, r3
 800fd76:	bf08      	it	eq
 800fd78:	68ec      	ldreq	r4, [r5, #12]
 800fd7a:	e7e6      	b.n	800fd4a <__swsetup_r+0x1e>
 800fd7c:	0758      	lsls	r0, r3, #29
 800fd7e:	d512      	bpl.n	800fda6 <__swsetup_r+0x7a>
 800fd80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd82:	b141      	cbz	r1, 800fd96 <__swsetup_r+0x6a>
 800fd84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd88:	4299      	cmp	r1, r3
 800fd8a:	d002      	beq.n	800fd92 <__swsetup_r+0x66>
 800fd8c:	4630      	mov	r0, r6
 800fd8e:	f000 fa93 	bl	80102b8 <_free_r>
 800fd92:	2300      	movs	r3, #0
 800fd94:	6363      	str	r3, [r4, #52]	; 0x34
 800fd96:	89a3      	ldrh	r3, [r4, #12]
 800fd98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fd9c:	81a3      	strh	r3, [r4, #12]
 800fd9e:	2300      	movs	r3, #0
 800fda0:	6063      	str	r3, [r4, #4]
 800fda2:	6923      	ldr	r3, [r4, #16]
 800fda4:	6023      	str	r3, [r4, #0]
 800fda6:	89a3      	ldrh	r3, [r4, #12]
 800fda8:	f043 0308 	orr.w	r3, r3, #8
 800fdac:	81a3      	strh	r3, [r4, #12]
 800fdae:	6923      	ldr	r3, [r4, #16]
 800fdb0:	b94b      	cbnz	r3, 800fdc6 <__swsetup_r+0x9a>
 800fdb2:	89a3      	ldrh	r3, [r4, #12]
 800fdb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fdb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdbc:	d003      	beq.n	800fdc6 <__swsetup_r+0x9a>
 800fdbe:	4621      	mov	r1, r4
 800fdc0:	4630      	mov	r0, r6
 800fdc2:	f000 fa31 	bl	8010228 <__smakebuf_r>
 800fdc6:	89a0      	ldrh	r0, [r4, #12]
 800fdc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fdcc:	f010 0301 	ands.w	r3, r0, #1
 800fdd0:	d00a      	beq.n	800fde8 <__swsetup_r+0xbc>
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	60a3      	str	r3, [r4, #8]
 800fdd6:	6963      	ldr	r3, [r4, #20]
 800fdd8:	425b      	negs	r3, r3
 800fdda:	61a3      	str	r3, [r4, #24]
 800fddc:	6923      	ldr	r3, [r4, #16]
 800fdde:	b943      	cbnz	r3, 800fdf2 <__swsetup_r+0xc6>
 800fde0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fde4:	d1ba      	bne.n	800fd5c <__swsetup_r+0x30>
 800fde6:	bd70      	pop	{r4, r5, r6, pc}
 800fde8:	0781      	lsls	r1, r0, #30
 800fdea:	bf58      	it	pl
 800fdec:	6963      	ldrpl	r3, [r4, #20]
 800fdee:	60a3      	str	r3, [r4, #8]
 800fdf0:	e7f4      	b.n	800fddc <__swsetup_r+0xb0>
 800fdf2:	2000      	movs	r0, #0
 800fdf4:	e7f7      	b.n	800fde6 <__swsetup_r+0xba>
 800fdf6:	bf00      	nop
 800fdf8:	2000002c 	.word	0x2000002c
 800fdfc:	080138dc 	.word	0x080138dc
 800fe00:	080138fc 	.word	0x080138fc
 800fe04:	080138bc 	.word	0x080138bc

0800fe08 <__assert_func>:
 800fe08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe0a:	4614      	mov	r4, r2
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	4b09      	ldr	r3, [pc, #36]	; (800fe34 <__assert_func+0x2c>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	4605      	mov	r5, r0
 800fe14:	68d8      	ldr	r0, [r3, #12]
 800fe16:	b14c      	cbz	r4, 800fe2c <__assert_func+0x24>
 800fe18:	4b07      	ldr	r3, [pc, #28]	; (800fe38 <__assert_func+0x30>)
 800fe1a:	9100      	str	r1, [sp, #0]
 800fe1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fe20:	4906      	ldr	r1, [pc, #24]	; (800fe3c <__assert_func+0x34>)
 800fe22:	462b      	mov	r3, r5
 800fe24:	f000 f9a6 	bl	8010174 <fiprintf>
 800fe28:	f000 fe7a 	bl	8010b20 <abort>
 800fe2c:	4b04      	ldr	r3, [pc, #16]	; (800fe40 <__assert_func+0x38>)
 800fe2e:	461c      	mov	r4, r3
 800fe30:	e7f3      	b.n	800fe1a <__assert_func+0x12>
 800fe32:	bf00      	nop
 800fe34:	2000002c 	.word	0x2000002c
 800fe38:	0801387e 	.word	0x0801387e
 800fe3c:	0801388b 	.word	0x0801388b
 800fe40:	080138b9 	.word	0x080138b9

0800fe44 <__sflush_r>:
 800fe44:	898a      	ldrh	r2, [r1, #12]
 800fe46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe4a:	4605      	mov	r5, r0
 800fe4c:	0710      	lsls	r0, r2, #28
 800fe4e:	460c      	mov	r4, r1
 800fe50:	d458      	bmi.n	800ff04 <__sflush_r+0xc0>
 800fe52:	684b      	ldr	r3, [r1, #4]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	dc05      	bgt.n	800fe64 <__sflush_r+0x20>
 800fe58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	dc02      	bgt.n	800fe64 <__sflush_r+0x20>
 800fe5e:	2000      	movs	r0, #0
 800fe60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe66:	2e00      	cmp	r6, #0
 800fe68:	d0f9      	beq.n	800fe5e <__sflush_r+0x1a>
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe70:	682f      	ldr	r7, [r5, #0]
 800fe72:	602b      	str	r3, [r5, #0]
 800fe74:	d032      	beq.n	800fedc <__sflush_r+0x98>
 800fe76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fe78:	89a3      	ldrh	r3, [r4, #12]
 800fe7a:	075a      	lsls	r2, r3, #29
 800fe7c:	d505      	bpl.n	800fe8a <__sflush_r+0x46>
 800fe7e:	6863      	ldr	r3, [r4, #4]
 800fe80:	1ac0      	subs	r0, r0, r3
 800fe82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe84:	b10b      	cbz	r3, 800fe8a <__sflush_r+0x46>
 800fe86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe88:	1ac0      	subs	r0, r0, r3
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe90:	6a21      	ldr	r1, [r4, #32]
 800fe92:	4628      	mov	r0, r5
 800fe94:	47b0      	blx	r6
 800fe96:	1c43      	adds	r3, r0, #1
 800fe98:	89a3      	ldrh	r3, [r4, #12]
 800fe9a:	d106      	bne.n	800feaa <__sflush_r+0x66>
 800fe9c:	6829      	ldr	r1, [r5, #0]
 800fe9e:	291d      	cmp	r1, #29
 800fea0:	d82c      	bhi.n	800fefc <__sflush_r+0xb8>
 800fea2:	4a2a      	ldr	r2, [pc, #168]	; (800ff4c <__sflush_r+0x108>)
 800fea4:	40ca      	lsrs	r2, r1
 800fea6:	07d6      	lsls	r6, r2, #31
 800fea8:	d528      	bpl.n	800fefc <__sflush_r+0xb8>
 800feaa:	2200      	movs	r2, #0
 800feac:	6062      	str	r2, [r4, #4]
 800feae:	04d9      	lsls	r1, r3, #19
 800feb0:	6922      	ldr	r2, [r4, #16]
 800feb2:	6022      	str	r2, [r4, #0]
 800feb4:	d504      	bpl.n	800fec0 <__sflush_r+0x7c>
 800feb6:	1c42      	adds	r2, r0, #1
 800feb8:	d101      	bne.n	800febe <__sflush_r+0x7a>
 800feba:	682b      	ldr	r3, [r5, #0]
 800febc:	b903      	cbnz	r3, 800fec0 <__sflush_r+0x7c>
 800febe:	6560      	str	r0, [r4, #84]	; 0x54
 800fec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fec2:	602f      	str	r7, [r5, #0]
 800fec4:	2900      	cmp	r1, #0
 800fec6:	d0ca      	beq.n	800fe5e <__sflush_r+0x1a>
 800fec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fecc:	4299      	cmp	r1, r3
 800fece:	d002      	beq.n	800fed6 <__sflush_r+0x92>
 800fed0:	4628      	mov	r0, r5
 800fed2:	f000 f9f1 	bl	80102b8 <_free_r>
 800fed6:	2000      	movs	r0, #0
 800fed8:	6360      	str	r0, [r4, #52]	; 0x34
 800feda:	e7c1      	b.n	800fe60 <__sflush_r+0x1c>
 800fedc:	6a21      	ldr	r1, [r4, #32]
 800fede:	2301      	movs	r3, #1
 800fee0:	4628      	mov	r0, r5
 800fee2:	47b0      	blx	r6
 800fee4:	1c41      	adds	r1, r0, #1
 800fee6:	d1c7      	bne.n	800fe78 <__sflush_r+0x34>
 800fee8:	682b      	ldr	r3, [r5, #0]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d0c4      	beq.n	800fe78 <__sflush_r+0x34>
 800feee:	2b1d      	cmp	r3, #29
 800fef0:	d001      	beq.n	800fef6 <__sflush_r+0xb2>
 800fef2:	2b16      	cmp	r3, #22
 800fef4:	d101      	bne.n	800fefa <__sflush_r+0xb6>
 800fef6:	602f      	str	r7, [r5, #0]
 800fef8:	e7b1      	b.n	800fe5e <__sflush_r+0x1a>
 800fefa:	89a3      	ldrh	r3, [r4, #12]
 800fefc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff00:	81a3      	strh	r3, [r4, #12]
 800ff02:	e7ad      	b.n	800fe60 <__sflush_r+0x1c>
 800ff04:	690f      	ldr	r7, [r1, #16]
 800ff06:	2f00      	cmp	r7, #0
 800ff08:	d0a9      	beq.n	800fe5e <__sflush_r+0x1a>
 800ff0a:	0793      	lsls	r3, r2, #30
 800ff0c:	680e      	ldr	r6, [r1, #0]
 800ff0e:	bf08      	it	eq
 800ff10:	694b      	ldreq	r3, [r1, #20]
 800ff12:	600f      	str	r7, [r1, #0]
 800ff14:	bf18      	it	ne
 800ff16:	2300      	movne	r3, #0
 800ff18:	eba6 0807 	sub.w	r8, r6, r7
 800ff1c:	608b      	str	r3, [r1, #8]
 800ff1e:	f1b8 0f00 	cmp.w	r8, #0
 800ff22:	dd9c      	ble.n	800fe5e <__sflush_r+0x1a>
 800ff24:	6a21      	ldr	r1, [r4, #32]
 800ff26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ff28:	4643      	mov	r3, r8
 800ff2a:	463a      	mov	r2, r7
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	47b0      	blx	r6
 800ff30:	2800      	cmp	r0, #0
 800ff32:	dc06      	bgt.n	800ff42 <__sflush_r+0xfe>
 800ff34:	89a3      	ldrh	r3, [r4, #12]
 800ff36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff3a:	81a3      	strh	r3, [r4, #12]
 800ff3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff40:	e78e      	b.n	800fe60 <__sflush_r+0x1c>
 800ff42:	4407      	add	r7, r0
 800ff44:	eba8 0800 	sub.w	r8, r8, r0
 800ff48:	e7e9      	b.n	800ff1e <__sflush_r+0xda>
 800ff4a:	bf00      	nop
 800ff4c:	20400001 	.word	0x20400001

0800ff50 <_fflush_r>:
 800ff50:	b538      	push	{r3, r4, r5, lr}
 800ff52:	690b      	ldr	r3, [r1, #16]
 800ff54:	4605      	mov	r5, r0
 800ff56:	460c      	mov	r4, r1
 800ff58:	b913      	cbnz	r3, 800ff60 <_fflush_r+0x10>
 800ff5a:	2500      	movs	r5, #0
 800ff5c:	4628      	mov	r0, r5
 800ff5e:	bd38      	pop	{r3, r4, r5, pc}
 800ff60:	b118      	cbz	r0, 800ff6a <_fflush_r+0x1a>
 800ff62:	6983      	ldr	r3, [r0, #24]
 800ff64:	b90b      	cbnz	r3, 800ff6a <_fflush_r+0x1a>
 800ff66:	f000 f887 	bl	8010078 <__sinit>
 800ff6a:	4b14      	ldr	r3, [pc, #80]	; (800ffbc <_fflush_r+0x6c>)
 800ff6c:	429c      	cmp	r4, r3
 800ff6e:	d11b      	bne.n	800ffa8 <_fflush_r+0x58>
 800ff70:	686c      	ldr	r4, [r5, #4]
 800ff72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d0ef      	beq.n	800ff5a <_fflush_r+0xa>
 800ff7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff7c:	07d0      	lsls	r0, r2, #31
 800ff7e:	d404      	bmi.n	800ff8a <_fflush_r+0x3a>
 800ff80:	0599      	lsls	r1, r3, #22
 800ff82:	d402      	bmi.n	800ff8a <_fflush_r+0x3a>
 800ff84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff86:	f000 f927 	bl	80101d8 <__retarget_lock_acquire_recursive>
 800ff8a:	4628      	mov	r0, r5
 800ff8c:	4621      	mov	r1, r4
 800ff8e:	f7ff ff59 	bl	800fe44 <__sflush_r>
 800ff92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff94:	07da      	lsls	r2, r3, #31
 800ff96:	4605      	mov	r5, r0
 800ff98:	d4e0      	bmi.n	800ff5c <_fflush_r+0xc>
 800ff9a:	89a3      	ldrh	r3, [r4, #12]
 800ff9c:	059b      	lsls	r3, r3, #22
 800ff9e:	d4dd      	bmi.n	800ff5c <_fflush_r+0xc>
 800ffa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffa2:	f000 f91a 	bl	80101da <__retarget_lock_release_recursive>
 800ffa6:	e7d9      	b.n	800ff5c <_fflush_r+0xc>
 800ffa8:	4b05      	ldr	r3, [pc, #20]	; (800ffc0 <_fflush_r+0x70>)
 800ffaa:	429c      	cmp	r4, r3
 800ffac:	d101      	bne.n	800ffb2 <_fflush_r+0x62>
 800ffae:	68ac      	ldr	r4, [r5, #8]
 800ffb0:	e7df      	b.n	800ff72 <_fflush_r+0x22>
 800ffb2:	4b04      	ldr	r3, [pc, #16]	; (800ffc4 <_fflush_r+0x74>)
 800ffb4:	429c      	cmp	r4, r3
 800ffb6:	bf08      	it	eq
 800ffb8:	68ec      	ldreq	r4, [r5, #12]
 800ffba:	e7da      	b.n	800ff72 <_fflush_r+0x22>
 800ffbc:	080138dc 	.word	0x080138dc
 800ffc0:	080138fc 	.word	0x080138fc
 800ffc4:	080138bc 	.word	0x080138bc

0800ffc8 <std>:
 800ffc8:	2300      	movs	r3, #0
 800ffca:	b510      	push	{r4, lr}
 800ffcc:	4604      	mov	r4, r0
 800ffce:	e9c0 3300 	strd	r3, r3, [r0]
 800ffd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ffd6:	6083      	str	r3, [r0, #8]
 800ffd8:	8181      	strh	r1, [r0, #12]
 800ffda:	6643      	str	r3, [r0, #100]	; 0x64
 800ffdc:	81c2      	strh	r2, [r0, #14]
 800ffde:	6183      	str	r3, [r0, #24]
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	2208      	movs	r2, #8
 800ffe4:	305c      	adds	r0, #92	; 0x5c
 800ffe6:	f7ff fd7b 	bl	800fae0 <memset>
 800ffea:	4b05      	ldr	r3, [pc, #20]	; (8010000 <std+0x38>)
 800ffec:	6263      	str	r3, [r4, #36]	; 0x24
 800ffee:	4b05      	ldr	r3, [pc, #20]	; (8010004 <std+0x3c>)
 800fff0:	62a3      	str	r3, [r4, #40]	; 0x28
 800fff2:	4b05      	ldr	r3, [pc, #20]	; (8010008 <std+0x40>)
 800fff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fff6:	4b05      	ldr	r3, [pc, #20]	; (801000c <std+0x44>)
 800fff8:	6224      	str	r4, [r4, #32]
 800fffa:	6323      	str	r3, [r4, #48]	; 0x30
 800fffc:	bd10      	pop	{r4, pc}
 800fffe:	bf00      	nop
 8010000:	08010a75 	.word	0x08010a75
 8010004:	08010a97 	.word	0x08010a97
 8010008:	08010acf 	.word	0x08010acf
 801000c:	08010af3 	.word	0x08010af3

08010010 <_cleanup_r>:
 8010010:	4901      	ldr	r1, [pc, #4]	; (8010018 <_cleanup_r+0x8>)
 8010012:	f000 b8c1 	b.w	8010198 <_fwalk_reent>
 8010016:	bf00      	nop
 8010018:	0800ff51 	.word	0x0800ff51

0801001c <__sfmoreglue>:
 801001c:	b570      	push	{r4, r5, r6, lr}
 801001e:	2268      	movs	r2, #104	; 0x68
 8010020:	1e4d      	subs	r5, r1, #1
 8010022:	4355      	muls	r5, r2
 8010024:	460e      	mov	r6, r1
 8010026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801002a:	f000 f9b1 	bl	8010390 <_malloc_r>
 801002e:	4604      	mov	r4, r0
 8010030:	b140      	cbz	r0, 8010044 <__sfmoreglue+0x28>
 8010032:	2100      	movs	r1, #0
 8010034:	e9c0 1600 	strd	r1, r6, [r0]
 8010038:	300c      	adds	r0, #12
 801003a:	60a0      	str	r0, [r4, #8]
 801003c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010040:	f7ff fd4e 	bl	800fae0 <memset>
 8010044:	4620      	mov	r0, r4
 8010046:	bd70      	pop	{r4, r5, r6, pc}

08010048 <__sfp_lock_acquire>:
 8010048:	4801      	ldr	r0, [pc, #4]	; (8010050 <__sfp_lock_acquire+0x8>)
 801004a:	f000 b8c5 	b.w	80101d8 <__retarget_lock_acquire_recursive>
 801004e:	bf00      	nop
 8010050:	20008921 	.word	0x20008921

08010054 <__sfp_lock_release>:
 8010054:	4801      	ldr	r0, [pc, #4]	; (801005c <__sfp_lock_release+0x8>)
 8010056:	f000 b8c0 	b.w	80101da <__retarget_lock_release_recursive>
 801005a:	bf00      	nop
 801005c:	20008921 	.word	0x20008921

08010060 <__sinit_lock_acquire>:
 8010060:	4801      	ldr	r0, [pc, #4]	; (8010068 <__sinit_lock_acquire+0x8>)
 8010062:	f000 b8b9 	b.w	80101d8 <__retarget_lock_acquire_recursive>
 8010066:	bf00      	nop
 8010068:	20008922 	.word	0x20008922

0801006c <__sinit_lock_release>:
 801006c:	4801      	ldr	r0, [pc, #4]	; (8010074 <__sinit_lock_release+0x8>)
 801006e:	f000 b8b4 	b.w	80101da <__retarget_lock_release_recursive>
 8010072:	bf00      	nop
 8010074:	20008922 	.word	0x20008922

08010078 <__sinit>:
 8010078:	b510      	push	{r4, lr}
 801007a:	4604      	mov	r4, r0
 801007c:	f7ff fff0 	bl	8010060 <__sinit_lock_acquire>
 8010080:	69a3      	ldr	r3, [r4, #24]
 8010082:	b11b      	cbz	r3, 801008c <__sinit+0x14>
 8010084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010088:	f7ff bff0 	b.w	801006c <__sinit_lock_release>
 801008c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010090:	6523      	str	r3, [r4, #80]	; 0x50
 8010092:	4b13      	ldr	r3, [pc, #76]	; (80100e0 <__sinit+0x68>)
 8010094:	4a13      	ldr	r2, [pc, #76]	; (80100e4 <__sinit+0x6c>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	62a2      	str	r2, [r4, #40]	; 0x28
 801009a:	42a3      	cmp	r3, r4
 801009c:	bf04      	itt	eq
 801009e:	2301      	moveq	r3, #1
 80100a0:	61a3      	streq	r3, [r4, #24]
 80100a2:	4620      	mov	r0, r4
 80100a4:	f000 f820 	bl	80100e8 <__sfp>
 80100a8:	6060      	str	r0, [r4, #4]
 80100aa:	4620      	mov	r0, r4
 80100ac:	f000 f81c 	bl	80100e8 <__sfp>
 80100b0:	60a0      	str	r0, [r4, #8]
 80100b2:	4620      	mov	r0, r4
 80100b4:	f000 f818 	bl	80100e8 <__sfp>
 80100b8:	2200      	movs	r2, #0
 80100ba:	60e0      	str	r0, [r4, #12]
 80100bc:	2104      	movs	r1, #4
 80100be:	6860      	ldr	r0, [r4, #4]
 80100c0:	f7ff ff82 	bl	800ffc8 <std>
 80100c4:	68a0      	ldr	r0, [r4, #8]
 80100c6:	2201      	movs	r2, #1
 80100c8:	2109      	movs	r1, #9
 80100ca:	f7ff ff7d 	bl	800ffc8 <std>
 80100ce:	68e0      	ldr	r0, [r4, #12]
 80100d0:	2202      	movs	r2, #2
 80100d2:	2112      	movs	r1, #18
 80100d4:	f7ff ff78 	bl	800ffc8 <std>
 80100d8:	2301      	movs	r3, #1
 80100da:	61a3      	str	r3, [r4, #24]
 80100dc:	e7d2      	b.n	8010084 <__sinit+0xc>
 80100de:	bf00      	nop
 80100e0:	08013808 	.word	0x08013808
 80100e4:	08010011 	.word	0x08010011

080100e8 <__sfp>:
 80100e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ea:	4607      	mov	r7, r0
 80100ec:	f7ff ffac 	bl	8010048 <__sfp_lock_acquire>
 80100f0:	4b1e      	ldr	r3, [pc, #120]	; (801016c <__sfp+0x84>)
 80100f2:	681e      	ldr	r6, [r3, #0]
 80100f4:	69b3      	ldr	r3, [r6, #24]
 80100f6:	b913      	cbnz	r3, 80100fe <__sfp+0x16>
 80100f8:	4630      	mov	r0, r6
 80100fa:	f7ff ffbd 	bl	8010078 <__sinit>
 80100fe:	3648      	adds	r6, #72	; 0x48
 8010100:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010104:	3b01      	subs	r3, #1
 8010106:	d503      	bpl.n	8010110 <__sfp+0x28>
 8010108:	6833      	ldr	r3, [r6, #0]
 801010a:	b30b      	cbz	r3, 8010150 <__sfp+0x68>
 801010c:	6836      	ldr	r6, [r6, #0]
 801010e:	e7f7      	b.n	8010100 <__sfp+0x18>
 8010110:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010114:	b9d5      	cbnz	r5, 801014c <__sfp+0x64>
 8010116:	4b16      	ldr	r3, [pc, #88]	; (8010170 <__sfp+0x88>)
 8010118:	60e3      	str	r3, [r4, #12]
 801011a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801011e:	6665      	str	r5, [r4, #100]	; 0x64
 8010120:	f000 f859 	bl	80101d6 <__retarget_lock_init_recursive>
 8010124:	f7ff ff96 	bl	8010054 <__sfp_lock_release>
 8010128:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801012c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010130:	6025      	str	r5, [r4, #0]
 8010132:	61a5      	str	r5, [r4, #24]
 8010134:	2208      	movs	r2, #8
 8010136:	4629      	mov	r1, r5
 8010138:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801013c:	f7ff fcd0 	bl	800fae0 <memset>
 8010140:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010144:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010148:	4620      	mov	r0, r4
 801014a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801014c:	3468      	adds	r4, #104	; 0x68
 801014e:	e7d9      	b.n	8010104 <__sfp+0x1c>
 8010150:	2104      	movs	r1, #4
 8010152:	4638      	mov	r0, r7
 8010154:	f7ff ff62 	bl	801001c <__sfmoreglue>
 8010158:	4604      	mov	r4, r0
 801015a:	6030      	str	r0, [r6, #0]
 801015c:	2800      	cmp	r0, #0
 801015e:	d1d5      	bne.n	801010c <__sfp+0x24>
 8010160:	f7ff ff78 	bl	8010054 <__sfp_lock_release>
 8010164:	230c      	movs	r3, #12
 8010166:	603b      	str	r3, [r7, #0]
 8010168:	e7ee      	b.n	8010148 <__sfp+0x60>
 801016a:	bf00      	nop
 801016c:	08013808 	.word	0x08013808
 8010170:	ffff0001 	.word	0xffff0001

08010174 <fiprintf>:
 8010174:	b40e      	push	{r1, r2, r3}
 8010176:	b503      	push	{r0, r1, lr}
 8010178:	4601      	mov	r1, r0
 801017a:	ab03      	add	r3, sp, #12
 801017c:	4805      	ldr	r0, [pc, #20]	; (8010194 <fiprintf+0x20>)
 801017e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010182:	6800      	ldr	r0, [r0, #0]
 8010184:	9301      	str	r3, [sp, #4]
 8010186:	f000 f9a1 	bl	80104cc <_vfiprintf_r>
 801018a:	b002      	add	sp, #8
 801018c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010190:	b003      	add	sp, #12
 8010192:	4770      	bx	lr
 8010194:	2000002c 	.word	0x2000002c

08010198 <_fwalk_reent>:
 8010198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801019c:	4606      	mov	r6, r0
 801019e:	4688      	mov	r8, r1
 80101a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80101a4:	2700      	movs	r7, #0
 80101a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80101aa:	f1b9 0901 	subs.w	r9, r9, #1
 80101ae:	d505      	bpl.n	80101bc <_fwalk_reent+0x24>
 80101b0:	6824      	ldr	r4, [r4, #0]
 80101b2:	2c00      	cmp	r4, #0
 80101b4:	d1f7      	bne.n	80101a6 <_fwalk_reent+0xe>
 80101b6:	4638      	mov	r0, r7
 80101b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101bc:	89ab      	ldrh	r3, [r5, #12]
 80101be:	2b01      	cmp	r3, #1
 80101c0:	d907      	bls.n	80101d2 <_fwalk_reent+0x3a>
 80101c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80101c6:	3301      	adds	r3, #1
 80101c8:	d003      	beq.n	80101d2 <_fwalk_reent+0x3a>
 80101ca:	4629      	mov	r1, r5
 80101cc:	4630      	mov	r0, r6
 80101ce:	47c0      	blx	r8
 80101d0:	4307      	orrs	r7, r0
 80101d2:	3568      	adds	r5, #104	; 0x68
 80101d4:	e7e9      	b.n	80101aa <_fwalk_reent+0x12>

080101d6 <__retarget_lock_init_recursive>:
 80101d6:	4770      	bx	lr

080101d8 <__retarget_lock_acquire_recursive>:
 80101d8:	4770      	bx	lr

080101da <__retarget_lock_release_recursive>:
 80101da:	4770      	bx	lr

080101dc <__swhatbuf_r>:
 80101dc:	b570      	push	{r4, r5, r6, lr}
 80101de:	460e      	mov	r6, r1
 80101e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101e4:	2900      	cmp	r1, #0
 80101e6:	b096      	sub	sp, #88	; 0x58
 80101e8:	4614      	mov	r4, r2
 80101ea:	461d      	mov	r5, r3
 80101ec:	da08      	bge.n	8010200 <__swhatbuf_r+0x24>
 80101ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80101f2:	2200      	movs	r2, #0
 80101f4:	602a      	str	r2, [r5, #0]
 80101f6:	061a      	lsls	r2, r3, #24
 80101f8:	d410      	bmi.n	801021c <__swhatbuf_r+0x40>
 80101fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101fe:	e00e      	b.n	801021e <__swhatbuf_r+0x42>
 8010200:	466a      	mov	r2, sp
 8010202:	f000 fca5 	bl	8010b50 <_fstat_r>
 8010206:	2800      	cmp	r0, #0
 8010208:	dbf1      	blt.n	80101ee <__swhatbuf_r+0x12>
 801020a:	9a01      	ldr	r2, [sp, #4]
 801020c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010210:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010214:	425a      	negs	r2, r3
 8010216:	415a      	adcs	r2, r3
 8010218:	602a      	str	r2, [r5, #0]
 801021a:	e7ee      	b.n	80101fa <__swhatbuf_r+0x1e>
 801021c:	2340      	movs	r3, #64	; 0x40
 801021e:	2000      	movs	r0, #0
 8010220:	6023      	str	r3, [r4, #0]
 8010222:	b016      	add	sp, #88	; 0x58
 8010224:	bd70      	pop	{r4, r5, r6, pc}
	...

08010228 <__smakebuf_r>:
 8010228:	898b      	ldrh	r3, [r1, #12]
 801022a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801022c:	079d      	lsls	r5, r3, #30
 801022e:	4606      	mov	r6, r0
 8010230:	460c      	mov	r4, r1
 8010232:	d507      	bpl.n	8010244 <__smakebuf_r+0x1c>
 8010234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010238:	6023      	str	r3, [r4, #0]
 801023a:	6123      	str	r3, [r4, #16]
 801023c:	2301      	movs	r3, #1
 801023e:	6163      	str	r3, [r4, #20]
 8010240:	b002      	add	sp, #8
 8010242:	bd70      	pop	{r4, r5, r6, pc}
 8010244:	ab01      	add	r3, sp, #4
 8010246:	466a      	mov	r2, sp
 8010248:	f7ff ffc8 	bl	80101dc <__swhatbuf_r>
 801024c:	9900      	ldr	r1, [sp, #0]
 801024e:	4605      	mov	r5, r0
 8010250:	4630      	mov	r0, r6
 8010252:	f000 f89d 	bl	8010390 <_malloc_r>
 8010256:	b948      	cbnz	r0, 801026c <__smakebuf_r+0x44>
 8010258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801025c:	059a      	lsls	r2, r3, #22
 801025e:	d4ef      	bmi.n	8010240 <__smakebuf_r+0x18>
 8010260:	f023 0303 	bic.w	r3, r3, #3
 8010264:	f043 0302 	orr.w	r3, r3, #2
 8010268:	81a3      	strh	r3, [r4, #12]
 801026a:	e7e3      	b.n	8010234 <__smakebuf_r+0xc>
 801026c:	4b0d      	ldr	r3, [pc, #52]	; (80102a4 <__smakebuf_r+0x7c>)
 801026e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010270:	89a3      	ldrh	r3, [r4, #12]
 8010272:	6020      	str	r0, [r4, #0]
 8010274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010278:	81a3      	strh	r3, [r4, #12]
 801027a:	9b00      	ldr	r3, [sp, #0]
 801027c:	6163      	str	r3, [r4, #20]
 801027e:	9b01      	ldr	r3, [sp, #4]
 8010280:	6120      	str	r0, [r4, #16]
 8010282:	b15b      	cbz	r3, 801029c <__smakebuf_r+0x74>
 8010284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010288:	4630      	mov	r0, r6
 801028a:	f000 fc73 	bl	8010b74 <_isatty_r>
 801028e:	b128      	cbz	r0, 801029c <__smakebuf_r+0x74>
 8010290:	89a3      	ldrh	r3, [r4, #12]
 8010292:	f023 0303 	bic.w	r3, r3, #3
 8010296:	f043 0301 	orr.w	r3, r3, #1
 801029a:	81a3      	strh	r3, [r4, #12]
 801029c:	89a0      	ldrh	r0, [r4, #12]
 801029e:	4305      	orrs	r5, r0
 80102a0:	81a5      	strh	r5, [r4, #12]
 80102a2:	e7cd      	b.n	8010240 <__smakebuf_r+0x18>
 80102a4:	08010011 	.word	0x08010011

080102a8 <malloc>:
 80102a8:	4b02      	ldr	r3, [pc, #8]	; (80102b4 <malloc+0xc>)
 80102aa:	4601      	mov	r1, r0
 80102ac:	6818      	ldr	r0, [r3, #0]
 80102ae:	f000 b86f 	b.w	8010390 <_malloc_r>
 80102b2:	bf00      	nop
 80102b4:	2000002c 	.word	0x2000002c

080102b8 <_free_r>:
 80102b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102ba:	2900      	cmp	r1, #0
 80102bc:	d044      	beq.n	8010348 <_free_r+0x90>
 80102be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102c2:	9001      	str	r0, [sp, #4]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	f1a1 0404 	sub.w	r4, r1, #4
 80102ca:	bfb8      	it	lt
 80102cc:	18e4      	addlt	r4, r4, r3
 80102ce:	f000 fc73 	bl	8010bb8 <__malloc_lock>
 80102d2:	4a1e      	ldr	r2, [pc, #120]	; (801034c <_free_r+0x94>)
 80102d4:	9801      	ldr	r0, [sp, #4]
 80102d6:	6813      	ldr	r3, [r2, #0]
 80102d8:	b933      	cbnz	r3, 80102e8 <_free_r+0x30>
 80102da:	6063      	str	r3, [r4, #4]
 80102dc:	6014      	str	r4, [r2, #0]
 80102de:	b003      	add	sp, #12
 80102e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102e4:	f000 bc6e 	b.w	8010bc4 <__malloc_unlock>
 80102e8:	42a3      	cmp	r3, r4
 80102ea:	d908      	bls.n	80102fe <_free_r+0x46>
 80102ec:	6825      	ldr	r5, [r4, #0]
 80102ee:	1961      	adds	r1, r4, r5
 80102f0:	428b      	cmp	r3, r1
 80102f2:	bf01      	itttt	eq
 80102f4:	6819      	ldreq	r1, [r3, #0]
 80102f6:	685b      	ldreq	r3, [r3, #4]
 80102f8:	1949      	addeq	r1, r1, r5
 80102fa:	6021      	streq	r1, [r4, #0]
 80102fc:	e7ed      	b.n	80102da <_free_r+0x22>
 80102fe:	461a      	mov	r2, r3
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	b10b      	cbz	r3, 8010308 <_free_r+0x50>
 8010304:	42a3      	cmp	r3, r4
 8010306:	d9fa      	bls.n	80102fe <_free_r+0x46>
 8010308:	6811      	ldr	r1, [r2, #0]
 801030a:	1855      	adds	r5, r2, r1
 801030c:	42a5      	cmp	r5, r4
 801030e:	d10b      	bne.n	8010328 <_free_r+0x70>
 8010310:	6824      	ldr	r4, [r4, #0]
 8010312:	4421      	add	r1, r4
 8010314:	1854      	adds	r4, r2, r1
 8010316:	42a3      	cmp	r3, r4
 8010318:	6011      	str	r1, [r2, #0]
 801031a:	d1e0      	bne.n	80102de <_free_r+0x26>
 801031c:	681c      	ldr	r4, [r3, #0]
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	6053      	str	r3, [r2, #4]
 8010322:	4421      	add	r1, r4
 8010324:	6011      	str	r1, [r2, #0]
 8010326:	e7da      	b.n	80102de <_free_r+0x26>
 8010328:	d902      	bls.n	8010330 <_free_r+0x78>
 801032a:	230c      	movs	r3, #12
 801032c:	6003      	str	r3, [r0, #0]
 801032e:	e7d6      	b.n	80102de <_free_r+0x26>
 8010330:	6825      	ldr	r5, [r4, #0]
 8010332:	1961      	adds	r1, r4, r5
 8010334:	428b      	cmp	r3, r1
 8010336:	bf04      	itt	eq
 8010338:	6819      	ldreq	r1, [r3, #0]
 801033a:	685b      	ldreq	r3, [r3, #4]
 801033c:	6063      	str	r3, [r4, #4]
 801033e:	bf04      	itt	eq
 8010340:	1949      	addeq	r1, r1, r5
 8010342:	6021      	streq	r1, [r4, #0]
 8010344:	6054      	str	r4, [r2, #4]
 8010346:	e7ca      	b.n	80102de <_free_r+0x26>
 8010348:	b003      	add	sp, #12
 801034a:	bd30      	pop	{r4, r5, pc}
 801034c:	20008924 	.word	0x20008924

08010350 <sbrk_aligned>:
 8010350:	b570      	push	{r4, r5, r6, lr}
 8010352:	4e0e      	ldr	r6, [pc, #56]	; (801038c <sbrk_aligned+0x3c>)
 8010354:	460c      	mov	r4, r1
 8010356:	6831      	ldr	r1, [r6, #0]
 8010358:	4605      	mov	r5, r0
 801035a:	b911      	cbnz	r1, 8010362 <sbrk_aligned+0x12>
 801035c:	f000 fb7a 	bl	8010a54 <_sbrk_r>
 8010360:	6030      	str	r0, [r6, #0]
 8010362:	4621      	mov	r1, r4
 8010364:	4628      	mov	r0, r5
 8010366:	f000 fb75 	bl	8010a54 <_sbrk_r>
 801036a:	1c43      	adds	r3, r0, #1
 801036c:	d00a      	beq.n	8010384 <sbrk_aligned+0x34>
 801036e:	1cc4      	adds	r4, r0, #3
 8010370:	f024 0403 	bic.w	r4, r4, #3
 8010374:	42a0      	cmp	r0, r4
 8010376:	d007      	beq.n	8010388 <sbrk_aligned+0x38>
 8010378:	1a21      	subs	r1, r4, r0
 801037a:	4628      	mov	r0, r5
 801037c:	f000 fb6a 	bl	8010a54 <_sbrk_r>
 8010380:	3001      	adds	r0, #1
 8010382:	d101      	bne.n	8010388 <sbrk_aligned+0x38>
 8010384:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010388:	4620      	mov	r0, r4
 801038a:	bd70      	pop	{r4, r5, r6, pc}
 801038c:	20008928 	.word	0x20008928

08010390 <_malloc_r>:
 8010390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010394:	1ccd      	adds	r5, r1, #3
 8010396:	f025 0503 	bic.w	r5, r5, #3
 801039a:	3508      	adds	r5, #8
 801039c:	2d0c      	cmp	r5, #12
 801039e:	bf38      	it	cc
 80103a0:	250c      	movcc	r5, #12
 80103a2:	2d00      	cmp	r5, #0
 80103a4:	4607      	mov	r7, r0
 80103a6:	db01      	blt.n	80103ac <_malloc_r+0x1c>
 80103a8:	42a9      	cmp	r1, r5
 80103aa:	d905      	bls.n	80103b8 <_malloc_r+0x28>
 80103ac:	230c      	movs	r3, #12
 80103ae:	603b      	str	r3, [r7, #0]
 80103b0:	2600      	movs	r6, #0
 80103b2:	4630      	mov	r0, r6
 80103b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103b8:	4e2e      	ldr	r6, [pc, #184]	; (8010474 <_malloc_r+0xe4>)
 80103ba:	f000 fbfd 	bl	8010bb8 <__malloc_lock>
 80103be:	6833      	ldr	r3, [r6, #0]
 80103c0:	461c      	mov	r4, r3
 80103c2:	bb34      	cbnz	r4, 8010412 <_malloc_r+0x82>
 80103c4:	4629      	mov	r1, r5
 80103c6:	4638      	mov	r0, r7
 80103c8:	f7ff ffc2 	bl	8010350 <sbrk_aligned>
 80103cc:	1c43      	adds	r3, r0, #1
 80103ce:	4604      	mov	r4, r0
 80103d0:	d14d      	bne.n	801046e <_malloc_r+0xde>
 80103d2:	6834      	ldr	r4, [r6, #0]
 80103d4:	4626      	mov	r6, r4
 80103d6:	2e00      	cmp	r6, #0
 80103d8:	d140      	bne.n	801045c <_malloc_r+0xcc>
 80103da:	6823      	ldr	r3, [r4, #0]
 80103dc:	4631      	mov	r1, r6
 80103de:	4638      	mov	r0, r7
 80103e0:	eb04 0803 	add.w	r8, r4, r3
 80103e4:	f000 fb36 	bl	8010a54 <_sbrk_r>
 80103e8:	4580      	cmp	r8, r0
 80103ea:	d13a      	bne.n	8010462 <_malloc_r+0xd2>
 80103ec:	6821      	ldr	r1, [r4, #0]
 80103ee:	3503      	adds	r5, #3
 80103f0:	1a6d      	subs	r5, r5, r1
 80103f2:	f025 0503 	bic.w	r5, r5, #3
 80103f6:	3508      	adds	r5, #8
 80103f8:	2d0c      	cmp	r5, #12
 80103fa:	bf38      	it	cc
 80103fc:	250c      	movcc	r5, #12
 80103fe:	4629      	mov	r1, r5
 8010400:	4638      	mov	r0, r7
 8010402:	f7ff ffa5 	bl	8010350 <sbrk_aligned>
 8010406:	3001      	adds	r0, #1
 8010408:	d02b      	beq.n	8010462 <_malloc_r+0xd2>
 801040a:	6823      	ldr	r3, [r4, #0]
 801040c:	442b      	add	r3, r5
 801040e:	6023      	str	r3, [r4, #0]
 8010410:	e00e      	b.n	8010430 <_malloc_r+0xa0>
 8010412:	6822      	ldr	r2, [r4, #0]
 8010414:	1b52      	subs	r2, r2, r5
 8010416:	d41e      	bmi.n	8010456 <_malloc_r+0xc6>
 8010418:	2a0b      	cmp	r2, #11
 801041a:	d916      	bls.n	801044a <_malloc_r+0xba>
 801041c:	1961      	adds	r1, r4, r5
 801041e:	42a3      	cmp	r3, r4
 8010420:	6025      	str	r5, [r4, #0]
 8010422:	bf18      	it	ne
 8010424:	6059      	strne	r1, [r3, #4]
 8010426:	6863      	ldr	r3, [r4, #4]
 8010428:	bf08      	it	eq
 801042a:	6031      	streq	r1, [r6, #0]
 801042c:	5162      	str	r2, [r4, r5]
 801042e:	604b      	str	r3, [r1, #4]
 8010430:	4638      	mov	r0, r7
 8010432:	f104 060b 	add.w	r6, r4, #11
 8010436:	f000 fbc5 	bl	8010bc4 <__malloc_unlock>
 801043a:	f026 0607 	bic.w	r6, r6, #7
 801043e:	1d23      	adds	r3, r4, #4
 8010440:	1af2      	subs	r2, r6, r3
 8010442:	d0b6      	beq.n	80103b2 <_malloc_r+0x22>
 8010444:	1b9b      	subs	r3, r3, r6
 8010446:	50a3      	str	r3, [r4, r2]
 8010448:	e7b3      	b.n	80103b2 <_malloc_r+0x22>
 801044a:	6862      	ldr	r2, [r4, #4]
 801044c:	42a3      	cmp	r3, r4
 801044e:	bf0c      	ite	eq
 8010450:	6032      	streq	r2, [r6, #0]
 8010452:	605a      	strne	r2, [r3, #4]
 8010454:	e7ec      	b.n	8010430 <_malloc_r+0xa0>
 8010456:	4623      	mov	r3, r4
 8010458:	6864      	ldr	r4, [r4, #4]
 801045a:	e7b2      	b.n	80103c2 <_malloc_r+0x32>
 801045c:	4634      	mov	r4, r6
 801045e:	6876      	ldr	r6, [r6, #4]
 8010460:	e7b9      	b.n	80103d6 <_malloc_r+0x46>
 8010462:	230c      	movs	r3, #12
 8010464:	603b      	str	r3, [r7, #0]
 8010466:	4638      	mov	r0, r7
 8010468:	f000 fbac 	bl	8010bc4 <__malloc_unlock>
 801046c:	e7a1      	b.n	80103b2 <_malloc_r+0x22>
 801046e:	6025      	str	r5, [r4, #0]
 8010470:	e7de      	b.n	8010430 <_malloc_r+0xa0>
 8010472:	bf00      	nop
 8010474:	20008924 	.word	0x20008924

08010478 <__sfputc_r>:
 8010478:	6893      	ldr	r3, [r2, #8]
 801047a:	3b01      	subs	r3, #1
 801047c:	2b00      	cmp	r3, #0
 801047e:	b410      	push	{r4}
 8010480:	6093      	str	r3, [r2, #8]
 8010482:	da08      	bge.n	8010496 <__sfputc_r+0x1e>
 8010484:	6994      	ldr	r4, [r2, #24]
 8010486:	42a3      	cmp	r3, r4
 8010488:	db01      	blt.n	801048e <__sfputc_r+0x16>
 801048a:	290a      	cmp	r1, #10
 801048c:	d103      	bne.n	8010496 <__sfputc_r+0x1e>
 801048e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010492:	f7ff bbf9 	b.w	800fc88 <__swbuf_r>
 8010496:	6813      	ldr	r3, [r2, #0]
 8010498:	1c58      	adds	r0, r3, #1
 801049a:	6010      	str	r0, [r2, #0]
 801049c:	7019      	strb	r1, [r3, #0]
 801049e:	4608      	mov	r0, r1
 80104a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104a4:	4770      	bx	lr

080104a6 <__sfputs_r>:
 80104a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104a8:	4606      	mov	r6, r0
 80104aa:	460f      	mov	r7, r1
 80104ac:	4614      	mov	r4, r2
 80104ae:	18d5      	adds	r5, r2, r3
 80104b0:	42ac      	cmp	r4, r5
 80104b2:	d101      	bne.n	80104b8 <__sfputs_r+0x12>
 80104b4:	2000      	movs	r0, #0
 80104b6:	e007      	b.n	80104c8 <__sfputs_r+0x22>
 80104b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104bc:	463a      	mov	r2, r7
 80104be:	4630      	mov	r0, r6
 80104c0:	f7ff ffda 	bl	8010478 <__sfputc_r>
 80104c4:	1c43      	adds	r3, r0, #1
 80104c6:	d1f3      	bne.n	80104b0 <__sfputs_r+0xa>
 80104c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080104cc <_vfiprintf_r>:
 80104cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d0:	460d      	mov	r5, r1
 80104d2:	b09d      	sub	sp, #116	; 0x74
 80104d4:	4614      	mov	r4, r2
 80104d6:	4698      	mov	r8, r3
 80104d8:	4606      	mov	r6, r0
 80104da:	b118      	cbz	r0, 80104e4 <_vfiprintf_r+0x18>
 80104dc:	6983      	ldr	r3, [r0, #24]
 80104de:	b90b      	cbnz	r3, 80104e4 <_vfiprintf_r+0x18>
 80104e0:	f7ff fdca 	bl	8010078 <__sinit>
 80104e4:	4b89      	ldr	r3, [pc, #548]	; (801070c <_vfiprintf_r+0x240>)
 80104e6:	429d      	cmp	r5, r3
 80104e8:	d11b      	bne.n	8010522 <_vfiprintf_r+0x56>
 80104ea:	6875      	ldr	r5, [r6, #4]
 80104ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104ee:	07d9      	lsls	r1, r3, #31
 80104f0:	d405      	bmi.n	80104fe <_vfiprintf_r+0x32>
 80104f2:	89ab      	ldrh	r3, [r5, #12]
 80104f4:	059a      	lsls	r2, r3, #22
 80104f6:	d402      	bmi.n	80104fe <_vfiprintf_r+0x32>
 80104f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104fa:	f7ff fe6d 	bl	80101d8 <__retarget_lock_acquire_recursive>
 80104fe:	89ab      	ldrh	r3, [r5, #12]
 8010500:	071b      	lsls	r3, r3, #28
 8010502:	d501      	bpl.n	8010508 <_vfiprintf_r+0x3c>
 8010504:	692b      	ldr	r3, [r5, #16]
 8010506:	b9eb      	cbnz	r3, 8010544 <_vfiprintf_r+0x78>
 8010508:	4629      	mov	r1, r5
 801050a:	4630      	mov	r0, r6
 801050c:	f7ff fc0e 	bl	800fd2c <__swsetup_r>
 8010510:	b1c0      	cbz	r0, 8010544 <_vfiprintf_r+0x78>
 8010512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010514:	07dc      	lsls	r4, r3, #31
 8010516:	d50e      	bpl.n	8010536 <_vfiprintf_r+0x6a>
 8010518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801051c:	b01d      	add	sp, #116	; 0x74
 801051e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010522:	4b7b      	ldr	r3, [pc, #492]	; (8010710 <_vfiprintf_r+0x244>)
 8010524:	429d      	cmp	r5, r3
 8010526:	d101      	bne.n	801052c <_vfiprintf_r+0x60>
 8010528:	68b5      	ldr	r5, [r6, #8]
 801052a:	e7df      	b.n	80104ec <_vfiprintf_r+0x20>
 801052c:	4b79      	ldr	r3, [pc, #484]	; (8010714 <_vfiprintf_r+0x248>)
 801052e:	429d      	cmp	r5, r3
 8010530:	bf08      	it	eq
 8010532:	68f5      	ldreq	r5, [r6, #12]
 8010534:	e7da      	b.n	80104ec <_vfiprintf_r+0x20>
 8010536:	89ab      	ldrh	r3, [r5, #12]
 8010538:	0598      	lsls	r0, r3, #22
 801053a:	d4ed      	bmi.n	8010518 <_vfiprintf_r+0x4c>
 801053c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801053e:	f7ff fe4c 	bl	80101da <__retarget_lock_release_recursive>
 8010542:	e7e9      	b.n	8010518 <_vfiprintf_r+0x4c>
 8010544:	2300      	movs	r3, #0
 8010546:	9309      	str	r3, [sp, #36]	; 0x24
 8010548:	2320      	movs	r3, #32
 801054a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801054e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010552:	2330      	movs	r3, #48	; 0x30
 8010554:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010718 <_vfiprintf_r+0x24c>
 8010558:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801055c:	f04f 0901 	mov.w	r9, #1
 8010560:	4623      	mov	r3, r4
 8010562:	469a      	mov	sl, r3
 8010564:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010568:	b10a      	cbz	r2, 801056e <_vfiprintf_r+0xa2>
 801056a:	2a25      	cmp	r2, #37	; 0x25
 801056c:	d1f9      	bne.n	8010562 <_vfiprintf_r+0x96>
 801056e:	ebba 0b04 	subs.w	fp, sl, r4
 8010572:	d00b      	beq.n	801058c <_vfiprintf_r+0xc0>
 8010574:	465b      	mov	r3, fp
 8010576:	4622      	mov	r2, r4
 8010578:	4629      	mov	r1, r5
 801057a:	4630      	mov	r0, r6
 801057c:	f7ff ff93 	bl	80104a6 <__sfputs_r>
 8010580:	3001      	adds	r0, #1
 8010582:	f000 80aa 	beq.w	80106da <_vfiprintf_r+0x20e>
 8010586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010588:	445a      	add	r2, fp
 801058a:	9209      	str	r2, [sp, #36]	; 0x24
 801058c:	f89a 3000 	ldrb.w	r3, [sl]
 8010590:	2b00      	cmp	r3, #0
 8010592:	f000 80a2 	beq.w	80106da <_vfiprintf_r+0x20e>
 8010596:	2300      	movs	r3, #0
 8010598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801059c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105a0:	f10a 0a01 	add.w	sl, sl, #1
 80105a4:	9304      	str	r3, [sp, #16]
 80105a6:	9307      	str	r3, [sp, #28]
 80105a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105ac:	931a      	str	r3, [sp, #104]	; 0x68
 80105ae:	4654      	mov	r4, sl
 80105b0:	2205      	movs	r2, #5
 80105b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105b6:	4858      	ldr	r0, [pc, #352]	; (8010718 <_vfiprintf_r+0x24c>)
 80105b8:	f7ef fe42 	bl	8000240 <memchr>
 80105bc:	9a04      	ldr	r2, [sp, #16]
 80105be:	b9d8      	cbnz	r0, 80105f8 <_vfiprintf_r+0x12c>
 80105c0:	06d1      	lsls	r1, r2, #27
 80105c2:	bf44      	itt	mi
 80105c4:	2320      	movmi	r3, #32
 80105c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105ca:	0713      	lsls	r3, r2, #28
 80105cc:	bf44      	itt	mi
 80105ce:	232b      	movmi	r3, #43	; 0x2b
 80105d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105d4:	f89a 3000 	ldrb.w	r3, [sl]
 80105d8:	2b2a      	cmp	r3, #42	; 0x2a
 80105da:	d015      	beq.n	8010608 <_vfiprintf_r+0x13c>
 80105dc:	9a07      	ldr	r2, [sp, #28]
 80105de:	4654      	mov	r4, sl
 80105e0:	2000      	movs	r0, #0
 80105e2:	f04f 0c0a 	mov.w	ip, #10
 80105e6:	4621      	mov	r1, r4
 80105e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105ec:	3b30      	subs	r3, #48	; 0x30
 80105ee:	2b09      	cmp	r3, #9
 80105f0:	d94e      	bls.n	8010690 <_vfiprintf_r+0x1c4>
 80105f2:	b1b0      	cbz	r0, 8010622 <_vfiprintf_r+0x156>
 80105f4:	9207      	str	r2, [sp, #28]
 80105f6:	e014      	b.n	8010622 <_vfiprintf_r+0x156>
 80105f8:	eba0 0308 	sub.w	r3, r0, r8
 80105fc:	fa09 f303 	lsl.w	r3, r9, r3
 8010600:	4313      	orrs	r3, r2
 8010602:	9304      	str	r3, [sp, #16]
 8010604:	46a2      	mov	sl, r4
 8010606:	e7d2      	b.n	80105ae <_vfiprintf_r+0xe2>
 8010608:	9b03      	ldr	r3, [sp, #12]
 801060a:	1d19      	adds	r1, r3, #4
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	9103      	str	r1, [sp, #12]
 8010610:	2b00      	cmp	r3, #0
 8010612:	bfbb      	ittet	lt
 8010614:	425b      	neglt	r3, r3
 8010616:	f042 0202 	orrlt.w	r2, r2, #2
 801061a:	9307      	strge	r3, [sp, #28]
 801061c:	9307      	strlt	r3, [sp, #28]
 801061e:	bfb8      	it	lt
 8010620:	9204      	strlt	r2, [sp, #16]
 8010622:	7823      	ldrb	r3, [r4, #0]
 8010624:	2b2e      	cmp	r3, #46	; 0x2e
 8010626:	d10c      	bne.n	8010642 <_vfiprintf_r+0x176>
 8010628:	7863      	ldrb	r3, [r4, #1]
 801062a:	2b2a      	cmp	r3, #42	; 0x2a
 801062c:	d135      	bne.n	801069a <_vfiprintf_r+0x1ce>
 801062e:	9b03      	ldr	r3, [sp, #12]
 8010630:	1d1a      	adds	r2, r3, #4
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	9203      	str	r2, [sp, #12]
 8010636:	2b00      	cmp	r3, #0
 8010638:	bfb8      	it	lt
 801063a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801063e:	3402      	adds	r4, #2
 8010640:	9305      	str	r3, [sp, #20]
 8010642:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010728 <_vfiprintf_r+0x25c>
 8010646:	7821      	ldrb	r1, [r4, #0]
 8010648:	2203      	movs	r2, #3
 801064a:	4650      	mov	r0, sl
 801064c:	f7ef fdf8 	bl	8000240 <memchr>
 8010650:	b140      	cbz	r0, 8010664 <_vfiprintf_r+0x198>
 8010652:	2340      	movs	r3, #64	; 0x40
 8010654:	eba0 000a 	sub.w	r0, r0, sl
 8010658:	fa03 f000 	lsl.w	r0, r3, r0
 801065c:	9b04      	ldr	r3, [sp, #16]
 801065e:	4303      	orrs	r3, r0
 8010660:	3401      	adds	r4, #1
 8010662:	9304      	str	r3, [sp, #16]
 8010664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010668:	482c      	ldr	r0, [pc, #176]	; (801071c <_vfiprintf_r+0x250>)
 801066a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801066e:	2206      	movs	r2, #6
 8010670:	f7ef fde6 	bl	8000240 <memchr>
 8010674:	2800      	cmp	r0, #0
 8010676:	d03f      	beq.n	80106f8 <_vfiprintf_r+0x22c>
 8010678:	4b29      	ldr	r3, [pc, #164]	; (8010720 <_vfiprintf_r+0x254>)
 801067a:	bb1b      	cbnz	r3, 80106c4 <_vfiprintf_r+0x1f8>
 801067c:	9b03      	ldr	r3, [sp, #12]
 801067e:	3307      	adds	r3, #7
 8010680:	f023 0307 	bic.w	r3, r3, #7
 8010684:	3308      	adds	r3, #8
 8010686:	9303      	str	r3, [sp, #12]
 8010688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801068a:	443b      	add	r3, r7
 801068c:	9309      	str	r3, [sp, #36]	; 0x24
 801068e:	e767      	b.n	8010560 <_vfiprintf_r+0x94>
 8010690:	fb0c 3202 	mla	r2, ip, r2, r3
 8010694:	460c      	mov	r4, r1
 8010696:	2001      	movs	r0, #1
 8010698:	e7a5      	b.n	80105e6 <_vfiprintf_r+0x11a>
 801069a:	2300      	movs	r3, #0
 801069c:	3401      	adds	r4, #1
 801069e:	9305      	str	r3, [sp, #20]
 80106a0:	4619      	mov	r1, r3
 80106a2:	f04f 0c0a 	mov.w	ip, #10
 80106a6:	4620      	mov	r0, r4
 80106a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106ac:	3a30      	subs	r2, #48	; 0x30
 80106ae:	2a09      	cmp	r2, #9
 80106b0:	d903      	bls.n	80106ba <_vfiprintf_r+0x1ee>
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d0c5      	beq.n	8010642 <_vfiprintf_r+0x176>
 80106b6:	9105      	str	r1, [sp, #20]
 80106b8:	e7c3      	b.n	8010642 <_vfiprintf_r+0x176>
 80106ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80106be:	4604      	mov	r4, r0
 80106c0:	2301      	movs	r3, #1
 80106c2:	e7f0      	b.n	80106a6 <_vfiprintf_r+0x1da>
 80106c4:	ab03      	add	r3, sp, #12
 80106c6:	9300      	str	r3, [sp, #0]
 80106c8:	462a      	mov	r2, r5
 80106ca:	4b16      	ldr	r3, [pc, #88]	; (8010724 <_vfiprintf_r+0x258>)
 80106cc:	a904      	add	r1, sp, #16
 80106ce:	4630      	mov	r0, r6
 80106d0:	f3af 8000 	nop.w
 80106d4:	4607      	mov	r7, r0
 80106d6:	1c78      	adds	r0, r7, #1
 80106d8:	d1d6      	bne.n	8010688 <_vfiprintf_r+0x1bc>
 80106da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106dc:	07d9      	lsls	r1, r3, #31
 80106de:	d405      	bmi.n	80106ec <_vfiprintf_r+0x220>
 80106e0:	89ab      	ldrh	r3, [r5, #12]
 80106e2:	059a      	lsls	r2, r3, #22
 80106e4:	d402      	bmi.n	80106ec <_vfiprintf_r+0x220>
 80106e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106e8:	f7ff fd77 	bl	80101da <__retarget_lock_release_recursive>
 80106ec:	89ab      	ldrh	r3, [r5, #12]
 80106ee:	065b      	lsls	r3, r3, #25
 80106f0:	f53f af12 	bmi.w	8010518 <_vfiprintf_r+0x4c>
 80106f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80106f6:	e711      	b.n	801051c <_vfiprintf_r+0x50>
 80106f8:	ab03      	add	r3, sp, #12
 80106fa:	9300      	str	r3, [sp, #0]
 80106fc:	462a      	mov	r2, r5
 80106fe:	4b09      	ldr	r3, [pc, #36]	; (8010724 <_vfiprintf_r+0x258>)
 8010700:	a904      	add	r1, sp, #16
 8010702:	4630      	mov	r0, r6
 8010704:	f000 f880 	bl	8010808 <_printf_i>
 8010708:	e7e4      	b.n	80106d4 <_vfiprintf_r+0x208>
 801070a:	bf00      	nop
 801070c:	080138dc 	.word	0x080138dc
 8010710:	080138fc 	.word	0x080138fc
 8010714:	080138bc 	.word	0x080138bc
 8010718:	0801391c 	.word	0x0801391c
 801071c:	08013926 	.word	0x08013926
 8010720:	00000000 	.word	0x00000000
 8010724:	080104a7 	.word	0x080104a7
 8010728:	08013922 	.word	0x08013922

0801072c <_printf_common>:
 801072c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010730:	4616      	mov	r6, r2
 8010732:	4699      	mov	r9, r3
 8010734:	688a      	ldr	r2, [r1, #8]
 8010736:	690b      	ldr	r3, [r1, #16]
 8010738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801073c:	4293      	cmp	r3, r2
 801073e:	bfb8      	it	lt
 8010740:	4613      	movlt	r3, r2
 8010742:	6033      	str	r3, [r6, #0]
 8010744:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010748:	4607      	mov	r7, r0
 801074a:	460c      	mov	r4, r1
 801074c:	b10a      	cbz	r2, 8010752 <_printf_common+0x26>
 801074e:	3301      	adds	r3, #1
 8010750:	6033      	str	r3, [r6, #0]
 8010752:	6823      	ldr	r3, [r4, #0]
 8010754:	0699      	lsls	r1, r3, #26
 8010756:	bf42      	ittt	mi
 8010758:	6833      	ldrmi	r3, [r6, #0]
 801075a:	3302      	addmi	r3, #2
 801075c:	6033      	strmi	r3, [r6, #0]
 801075e:	6825      	ldr	r5, [r4, #0]
 8010760:	f015 0506 	ands.w	r5, r5, #6
 8010764:	d106      	bne.n	8010774 <_printf_common+0x48>
 8010766:	f104 0a19 	add.w	sl, r4, #25
 801076a:	68e3      	ldr	r3, [r4, #12]
 801076c:	6832      	ldr	r2, [r6, #0]
 801076e:	1a9b      	subs	r3, r3, r2
 8010770:	42ab      	cmp	r3, r5
 8010772:	dc26      	bgt.n	80107c2 <_printf_common+0x96>
 8010774:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010778:	1e13      	subs	r3, r2, #0
 801077a:	6822      	ldr	r2, [r4, #0]
 801077c:	bf18      	it	ne
 801077e:	2301      	movne	r3, #1
 8010780:	0692      	lsls	r2, r2, #26
 8010782:	d42b      	bmi.n	80107dc <_printf_common+0xb0>
 8010784:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010788:	4649      	mov	r1, r9
 801078a:	4638      	mov	r0, r7
 801078c:	47c0      	blx	r8
 801078e:	3001      	adds	r0, #1
 8010790:	d01e      	beq.n	80107d0 <_printf_common+0xa4>
 8010792:	6823      	ldr	r3, [r4, #0]
 8010794:	68e5      	ldr	r5, [r4, #12]
 8010796:	6832      	ldr	r2, [r6, #0]
 8010798:	f003 0306 	and.w	r3, r3, #6
 801079c:	2b04      	cmp	r3, #4
 801079e:	bf08      	it	eq
 80107a0:	1aad      	subeq	r5, r5, r2
 80107a2:	68a3      	ldr	r3, [r4, #8]
 80107a4:	6922      	ldr	r2, [r4, #16]
 80107a6:	bf0c      	ite	eq
 80107a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80107ac:	2500      	movne	r5, #0
 80107ae:	4293      	cmp	r3, r2
 80107b0:	bfc4      	itt	gt
 80107b2:	1a9b      	subgt	r3, r3, r2
 80107b4:	18ed      	addgt	r5, r5, r3
 80107b6:	2600      	movs	r6, #0
 80107b8:	341a      	adds	r4, #26
 80107ba:	42b5      	cmp	r5, r6
 80107bc:	d11a      	bne.n	80107f4 <_printf_common+0xc8>
 80107be:	2000      	movs	r0, #0
 80107c0:	e008      	b.n	80107d4 <_printf_common+0xa8>
 80107c2:	2301      	movs	r3, #1
 80107c4:	4652      	mov	r2, sl
 80107c6:	4649      	mov	r1, r9
 80107c8:	4638      	mov	r0, r7
 80107ca:	47c0      	blx	r8
 80107cc:	3001      	adds	r0, #1
 80107ce:	d103      	bne.n	80107d8 <_printf_common+0xac>
 80107d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107d8:	3501      	adds	r5, #1
 80107da:	e7c6      	b.n	801076a <_printf_common+0x3e>
 80107dc:	18e1      	adds	r1, r4, r3
 80107de:	1c5a      	adds	r2, r3, #1
 80107e0:	2030      	movs	r0, #48	; 0x30
 80107e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80107e6:	4422      	add	r2, r4
 80107e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80107ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80107f0:	3302      	adds	r3, #2
 80107f2:	e7c7      	b.n	8010784 <_printf_common+0x58>
 80107f4:	2301      	movs	r3, #1
 80107f6:	4622      	mov	r2, r4
 80107f8:	4649      	mov	r1, r9
 80107fa:	4638      	mov	r0, r7
 80107fc:	47c0      	blx	r8
 80107fe:	3001      	adds	r0, #1
 8010800:	d0e6      	beq.n	80107d0 <_printf_common+0xa4>
 8010802:	3601      	adds	r6, #1
 8010804:	e7d9      	b.n	80107ba <_printf_common+0x8e>
	...

08010808 <_printf_i>:
 8010808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801080c:	7e0f      	ldrb	r7, [r1, #24]
 801080e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010810:	2f78      	cmp	r7, #120	; 0x78
 8010812:	4691      	mov	r9, r2
 8010814:	4680      	mov	r8, r0
 8010816:	460c      	mov	r4, r1
 8010818:	469a      	mov	sl, r3
 801081a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801081e:	d807      	bhi.n	8010830 <_printf_i+0x28>
 8010820:	2f62      	cmp	r7, #98	; 0x62
 8010822:	d80a      	bhi.n	801083a <_printf_i+0x32>
 8010824:	2f00      	cmp	r7, #0
 8010826:	f000 80d8 	beq.w	80109da <_printf_i+0x1d2>
 801082a:	2f58      	cmp	r7, #88	; 0x58
 801082c:	f000 80a3 	beq.w	8010976 <_printf_i+0x16e>
 8010830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010834:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010838:	e03a      	b.n	80108b0 <_printf_i+0xa8>
 801083a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801083e:	2b15      	cmp	r3, #21
 8010840:	d8f6      	bhi.n	8010830 <_printf_i+0x28>
 8010842:	a101      	add	r1, pc, #4	; (adr r1, 8010848 <_printf_i+0x40>)
 8010844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010848:	080108a1 	.word	0x080108a1
 801084c:	080108b5 	.word	0x080108b5
 8010850:	08010831 	.word	0x08010831
 8010854:	08010831 	.word	0x08010831
 8010858:	08010831 	.word	0x08010831
 801085c:	08010831 	.word	0x08010831
 8010860:	080108b5 	.word	0x080108b5
 8010864:	08010831 	.word	0x08010831
 8010868:	08010831 	.word	0x08010831
 801086c:	08010831 	.word	0x08010831
 8010870:	08010831 	.word	0x08010831
 8010874:	080109c1 	.word	0x080109c1
 8010878:	080108e5 	.word	0x080108e5
 801087c:	080109a3 	.word	0x080109a3
 8010880:	08010831 	.word	0x08010831
 8010884:	08010831 	.word	0x08010831
 8010888:	080109e3 	.word	0x080109e3
 801088c:	08010831 	.word	0x08010831
 8010890:	080108e5 	.word	0x080108e5
 8010894:	08010831 	.word	0x08010831
 8010898:	08010831 	.word	0x08010831
 801089c:	080109ab 	.word	0x080109ab
 80108a0:	682b      	ldr	r3, [r5, #0]
 80108a2:	1d1a      	adds	r2, r3, #4
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	602a      	str	r2, [r5, #0]
 80108a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80108ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80108b0:	2301      	movs	r3, #1
 80108b2:	e0a3      	b.n	80109fc <_printf_i+0x1f4>
 80108b4:	6820      	ldr	r0, [r4, #0]
 80108b6:	6829      	ldr	r1, [r5, #0]
 80108b8:	0606      	lsls	r6, r0, #24
 80108ba:	f101 0304 	add.w	r3, r1, #4
 80108be:	d50a      	bpl.n	80108d6 <_printf_i+0xce>
 80108c0:	680e      	ldr	r6, [r1, #0]
 80108c2:	602b      	str	r3, [r5, #0]
 80108c4:	2e00      	cmp	r6, #0
 80108c6:	da03      	bge.n	80108d0 <_printf_i+0xc8>
 80108c8:	232d      	movs	r3, #45	; 0x2d
 80108ca:	4276      	negs	r6, r6
 80108cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108d0:	485e      	ldr	r0, [pc, #376]	; (8010a4c <_printf_i+0x244>)
 80108d2:	230a      	movs	r3, #10
 80108d4:	e019      	b.n	801090a <_printf_i+0x102>
 80108d6:	680e      	ldr	r6, [r1, #0]
 80108d8:	602b      	str	r3, [r5, #0]
 80108da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80108de:	bf18      	it	ne
 80108e0:	b236      	sxthne	r6, r6
 80108e2:	e7ef      	b.n	80108c4 <_printf_i+0xbc>
 80108e4:	682b      	ldr	r3, [r5, #0]
 80108e6:	6820      	ldr	r0, [r4, #0]
 80108e8:	1d19      	adds	r1, r3, #4
 80108ea:	6029      	str	r1, [r5, #0]
 80108ec:	0601      	lsls	r1, r0, #24
 80108ee:	d501      	bpl.n	80108f4 <_printf_i+0xec>
 80108f0:	681e      	ldr	r6, [r3, #0]
 80108f2:	e002      	b.n	80108fa <_printf_i+0xf2>
 80108f4:	0646      	lsls	r6, r0, #25
 80108f6:	d5fb      	bpl.n	80108f0 <_printf_i+0xe8>
 80108f8:	881e      	ldrh	r6, [r3, #0]
 80108fa:	4854      	ldr	r0, [pc, #336]	; (8010a4c <_printf_i+0x244>)
 80108fc:	2f6f      	cmp	r7, #111	; 0x6f
 80108fe:	bf0c      	ite	eq
 8010900:	2308      	moveq	r3, #8
 8010902:	230a      	movne	r3, #10
 8010904:	2100      	movs	r1, #0
 8010906:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801090a:	6865      	ldr	r5, [r4, #4]
 801090c:	60a5      	str	r5, [r4, #8]
 801090e:	2d00      	cmp	r5, #0
 8010910:	bfa2      	ittt	ge
 8010912:	6821      	ldrge	r1, [r4, #0]
 8010914:	f021 0104 	bicge.w	r1, r1, #4
 8010918:	6021      	strge	r1, [r4, #0]
 801091a:	b90e      	cbnz	r6, 8010920 <_printf_i+0x118>
 801091c:	2d00      	cmp	r5, #0
 801091e:	d04d      	beq.n	80109bc <_printf_i+0x1b4>
 8010920:	4615      	mov	r5, r2
 8010922:	fbb6 f1f3 	udiv	r1, r6, r3
 8010926:	fb03 6711 	mls	r7, r3, r1, r6
 801092a:	5dc7      	ldrb	r7, [r0, r7]
 801092c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010930:	4637      	mov	r7, r6
 8010932:	42bb      	cmp	r3, r7
 8010934:	460e      	mov	r6, r1
 8010936:	d9f4      	bls.n	8010922 <_printf_i+0x11a>
 8010938:	2b08      	cmp	r3, #8
 801093a:	d10b      	bne.n	8010954 <_printf_i+0x14c>
 801093c:	6823      	ldr	r3, [r4, #0]
 801093e:	07de      	lsls	r6, r3, #31
 8010940:	d508      	bpl.n	8010954 <_printf_i+0x14c>
 8010942:	6923      	ldr	r3, [r4, #16]
 8010944:	6861      	ldr	r1, [r4, #4]
 8010946:	4299      	cmp	r1, r3
 8010948:	bfde      	ittt	le
 801094a:	2330      	movle	r3, #48	; 0x30
 801094c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010950:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010954:	1b52      	subs	r2, r2, r5
 8010956:	6122      	str	r2, [r4, #16]
 8010958:	f8cd a000 	str.w	sl, [sp]
 801095c:	464b      	mov	r3, r9
 801095e:	aa03      	add	r2, sp, #12
 8010960:	4621      	mov	r1, r4
 8010962:	4640      	mov	r0, r8
 8010964:	f7ff fee2 	bl	801072c <_printf_common>
 8010968:	3001      	adds	r0, #1
 801096a:	d14c      	bne.n	8010a06 <_printf_i+0x1fe>
 801096c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010970:	b004      	add	sp, #16
 8010972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010976:	4835      	ldr	r0, [pc, #212]	; (8010a4c <_printf_i+0x244>)
 8010978:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801097c:	6829      	ldr	r1, [r5, #0]
 801097e:	6823      	ldr	r3, [r4, #0]
 8010980:	f851 6b04 	ldr.w	r6, [r1], #4
 8010984:	6029      	str	r1, [r5, #0]
 8010986:	061d      	lsls	r5, r3, #24
 8010988:	d514      	bpl.n	80109b4 <_printf_i+0x1ac>
 801098a:	07df      	lsls	r7, r3, #31
 801098c:	bf44      	itt	mi
 801098e:	f043 0320 	orrmi.w	r3, r3, #32
 8010992:	6023      	strmi	r3, [r4, #0]
 8010994:	b91e      	cbnz	r6, 801099e <_printf_i+0x196>
 8010996:	6823      	ldr	r3, [r4, #0]
 8010998:	f023 0320 	bic.w	r3, r3, #32
 801099c:	6023      	str	r3, [r4, #0]
 801099e:	2310      	movs	r3, #16
 80109a0:	e7b0      	b.n	8010904 <_printf_i+0xfc>
 80109a2:	6823      	ldr	r3, [r4, #0]
 80109a4:	f043 0320 	orr.w	r3, r3, #32
 80109a8:	6023      	str	r3, [r4, #0]
 80109aa:	2378      	movs	r3, #120	; 0x78
 80109ac:	4828      	ldr	r0, [pc, #160]	; (8010a50 <_printf_i+0x248>)
 80109ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80109b2:	e7e3      	b.n	801097c <_printf_i+0x174>
 80109b4:	0659      	lsls	r1, r3, #25
 80109b6:	bf48      	it	mi
 80109b8:	b2b6      	uxthmi	r6, r6
 80109ba:	e7e6      	b.n	801098a <_printf_i+0x182>
 80109bc:	4615      	mov	r5, r2
 80109be:	e7bb      	b.n	8010938 <_printf_i+0x130>
 80109c0:	682b      	ldr	r3, [r5, #0]
 80109c2:	6826      	ldr	r6, [r4, #0]
 80109c4:	6961      	ldr	r1, [r4, #20]
 80109c6:	1d18      	adds	r0, r3, #4
 80109c8:	6028      	str	r0, [r5, #0]
 80109ca:	0635      	lsls	r5, r6, #24
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	d501      	bpl.n	80109d4 <_printf_i+0x1cc>
 80109d0:	6019      	str	r1, [r3, #0]
 80109d2:	e002      	b.n	80109da <_printf_i+0x1d2>
 80109d4:	0670      	lsls	r0, r6, #25
 80109d6:	d5fb      	bpl.n	80109d0 <_printf_i+0x1c8>
 80109d8:	8019      	strh	r1, [r3, #0]
 80109da:	2300      	movs	r3, #0
 80109dc:	6123      	str	r3, [r4, #16]
 80109de:	4615      	mov	r5, r2
 80109e0:	e7ba      	b.n	8010958 <_printf_i+0x150>
 80109e2:	682b      	ldr	r3, [r5, #0]
 80109e4:	1d1a      	adds	r2, r3, #4
 80109e6:	602a      	str	r2, [r5, #0]
 80109e8:	681d      	ldr	r5, [r3, #0]
 80109ea:	6862      	ldr	r2, [r4, #4]
 80109ec:	2100      	movs	r1, #0
 80109ee:	4628      	mov	r0, r5
 80109f0:	f7ef fc26 	bl	8000240 <memchr>
 80109f4:	b108      	cbz	r0, 80109fa <_printf_i+0x1f2>
 80109f6:	1b40      	subs	r0, r0, r5
 80109f8:	6060      	str	r0, [r4, #4]
 80109fa:	6863      	ldr	r3, [r4, #4]
 80109fc:	6123      	str	r3, [r4, #16]
 80109fe:	2300      	movs	r3, #0
 8010a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a04:	e7a8      	b.n	8010958 <_printf_i+0x150>
 8010a06:	6923      	ldr	r3, [r4, #16]
 8010a08:	462a      	mov	r2, r5
 8010a0a:	4649      	mov	r1, r9
 8010a0c:	4640      	mov	r0, r8
 8010a0e:	47d0      	blx	sl
 8010a10:	3001      	adds	r0, #1
 8010a12:	d0ab      	beq.n	801096c <_printf_i+0x164>
 8010a14:	6823      	ldr	r3, [r4, #0]
 8010a16:	079b      	lsls	r3, r3, #30
 8010a18:	d413      	bmi.n	8010a42 <_printf_i+0x23a>
 8010a1a:	68e0      	ldr	r0, [r4, #12]
 8010a1c:	9b03      	ldr	r3, [sp, #12]
 8010a1e:	4298      	cmp	r0, r3
 8010a20:	bfb8      	it	lt
 8010a22:	4618      	movlt	r0, r3
 8010a24:	e7a4      	b.n	8010970 <_printf_i+0x168>
 8010a26:	2301      	movs	r3, #1
 8010a28:	4632      	mov	r2, r6
 8010a2a:	4649      	mov	r1, r9
 8010a2c:	4640      	mov	r0, r8
 8010a2e:	47d0      	blx	sl
 8010a30:	3001      	adds	r0, #1
 8010a32:	d09b      	beq.n	801096c <_printf_i+0x164>
 8010a34:	3501      	adds	r5, #1
 8010a36:	68e3      	ldr	r3, [r4, #12]
 8010a38:	9903      	ldr	r1, [sp, #12]
 8010a3a:	1a5b      	subs	r3, r3, r1
 8010a3c:	42ab      	cmp	r3, r5
 8010a3e:	dcf2      	bgt.n	8010a26 <_printf_i+0x21e>
 8010a40:	e7eb      	b.n	8010a1a <_printf_i+0x212>
 8010a42:	2500      	movs	r5, #0
 8010a44:	f104 0619 	add.w	r6, r4, #25
 8010a48:	e7f5      	b.n	8010a36 <_printf_i+0x22e>
 8010a4a:	bf00      	nop
 8010a4c:	0801392d 	.word	0x0801392d
 8010a50:	0801393e 	.word	0x0801393e

08010a54 <_sbrk_r>:
 8010a54:	b538      	push	{r3, r4, r5, lr}
 8010a56:	4d06      	ldr	r5, [pc, #24]	; (8010a70 <_sbrk_r+0x1c>)
 8010a58:	2300      	movs	r3, #0
 8010a5a:	4604      	mov	r4, r0
 8010a5c:	4608      	mov	r0, r1
 8010a5e:	602b      	str	r3, [r5, #0]
 8010a60:	f7f0 f904 	bl	8000c6c <_sbrk>
 8010a64:	1c43      	adds	r3, r0, #1
 8010a66:	d102      	bne.n	8010a6e <_sbrk_r+0x1a>
 8010a68:	682b      	ldr	r3, [r5, #0]
 8010a6a:	b103      	cbz	r3, 8010a6e <_sbrk_r+0x1a>
 8010a6c:	6023      	str	r3, [r4, #0]
 8010a6e:	bd38      	pop	{r3, r4, r5, pc}
 8010a70:	2000891c 	.word	0x2000891c

08010a74 <__sread>:
 8010a74:	b510      	push	{r4, lr}
 8010a76:	460c      	mov	r4, r1
 8010a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a7c:	f000 f8a8 	bl	8010bd0 <_read_r>
 8010a80:	2800      	cmp	r0, #0
 8010a82:	bfab      	itete	ge
 8010a84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010a86:	89a3      	ldrhlt	r3, [r4, #12]
 8010a88:	181b      	addge	r3, r3, r0
 8010a8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010a8e:	bfac      	ite	ge
 8010a90:	6563      	strge	r3, [r4, #84]	; 0x54
 8010a92:	81a3      	strhlt	r3, [r4, #12]
 8010a94:	bd10      	pop	{r4, pc}

08010a96 <__swrite>:
 8010a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a9a:	461f      	mov	r7, r3
 8010a9c:	898b      	ldrh	r3, [r1, #12]
 8010a9e:	05db      	lsls	r3, r3, #23
 8010aa0:	4605      	mov	r5, r0
 8010aa2:	460c      	mov	r4, r1
 8010aa4:	4616      	mov	r6, r2
 8010aa6:	d505      	bpl.n	8010ab4 <__swrite+0x1e>
 8010aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010aac:	2302      	movs	r3, #2
 8010aae:	2200      	movs	r2, #0
 8010ab0:	f000 f870 	bl	8010b94 <_lseek_r>
 8010ab4:	89a3      	ldrh	r3, [r4, #12]
 8010ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010aba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010abe:	81a3      	strh	r3, [r4, #12]
 8010ac0:	4632      	mov	r2, r6
 8010ac2:	463b      	mov	r3, r7
 8010ac4:	4628      	mov	r0, r5
 8010ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010aca:	f000 b817 	b.w	8010afc <_write_r>

08010ace <__sseek>:
 8010ace:	b510      	push	{r4, lr}
 8010ad0:	460c      	mov	r4, r1
 8010ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ad6:	f000 f85d 	bl	8010b94 <_lseek_r>
 8010ada:	1c43      	adds	r3, r0, #1
 8010adc:	89a3      	ldrh	r3, [r4, #12]
 8010ade:	bf15      	itete	ne
 8010ae0:	6560      	strne	r0, [r4, #84]	; 0x54
 8010ae2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010ae6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010aea:	81a3      	strheq	r3, [r4, #12]
 8010aec:	bf18      	it	ne
 8010aee:	81a3      	strhne	r3, [r4, #12]
 8010af0:	bd10      	pop	{r4, pc}

08010af2 <__sclose>:
 8010af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010af6:	f000 b81b 	b.w	8010b30 <_close_r>
	...

08010afc <_write_r>:
 8010afc:	b538      	push	{r3, r4, r5, lr}
 8010afe:	4d07      	ldr	r5, [pc, #28]	; (8010b1c <_write_r+0x20>)
 8010b00:	4604      	mov	r4, r0
 8010b02:	4608      	mov	r0, r1
 8010b04:	4611      	mov	r1, r2
 8010b06:	2200      	movs	r2, #0
 8010b08:	602a      	str	r2, [r5, #0]
 8010b0a:	461a      	mov	r2, r3
 8010b0c:	f7ef fd6a 	bl	80005e4 <_write>
 8010b10:	1c43      	adds	r3, r0, #1
 8010b12:	d102      	bne.n	8010b1a <_write_r+0x1e>
 8010b14:	682b      	ldr	r3, [r5, #0]
 8010b16:	b103      	cbz	r3, 8010b1a <_write_r+0x1e>
 8010b18:	6023      	str	r3, [r4, #0]
 8010b1a:	bd38      	pop	{r3, r4, r5, pc}
 8010b1c:	2000891c 	.word	0x2000891c

08010b20 <abort>:
 8010b20:	b508      	push	{r3, lr}
 8010b22:	2006      	movs	r0, #6
 8010b24:	f000 f88e 	bl	8010c44 <raise>
 8010b28:	2001      	movs	r0, #1
 8010b2a:	f7f0 f843 	bl	8000bb4 <_exit>
	...

08010b30 <_close_r>:
 8010b30:	b538      	push	{r3, r4, r5, lr}
 8010b32:	4d06      	ldr	r5, [pc, #24]	; (8010b4c <_close_r+0x1c>)
 8010b34:	2300      	movs	r3, #0
 8010b36:	4604      	mov	r4, r0
 8010b38:	4608      	mov	r0, r1
 8010b3a:	602b      	str	r3, [r5, #0]
 8010b3c:	f7f0 f861 	bl	8000c02 <_close>
 8010b40:	1c43      	adds	r3, r0, #1
 8010b42:	d102      	bne.n	8010b4a <_close_r+0x1a>
 8010b44:	682b      	ldr	r3, [r5, #0]
 8010b46:	b103      	cbz	r3, 8010b4a <_close_r+0x1a>
 8010b48:	6023      	str	r3, [r4, #0]
 8010b4a:	bd38      	pop	{r3, r4, r5, pc}
 8010b4c:	2000891c 	.word	0x2000891c

08010b50 <_fstat_r>:
 8010b50:	b538      	push	{r3, r4, r5, lr}
 8010b52:	4d07      	ldr	r5, [pc, #28]	; (8010b70 <_fstat_r+0x20>)
 8010b54:	2300      	movs	r3, #0
 8010b56:	4604      	mov	r4, r0
 8010b58:	4608      	mov	r0, r1
 8010b5a:	4611      	mov	r1, r2
 8010b5c:	602b      	str	r3, [r5, #0]
 8010b5e:	f7f0 f85c 	bl	8000c1a <_fstat>
 8010b62:	1c43      	adds	r3, r0, #1
 8010b64:	d102      	bne.n	8010b6c <_fstat_r+0x1c>
 8010b66:	682b      	ldr	r3, [r5, #0]
 8010b68:	b103      	cbz	r3, 8010b6c <_fstat_r+0x1c>
 8010b6a:	6023      	str	r3, [r4, #0]
 8010b6c:	bd38      	pop	{r3, r4, r5, pc}
 8010b6e:	bf00      	nop
 8010b70:	2000891c 	.word	0x2000891c

08010b74 <_isatty_r>:
 8010b74:	b538      	push	{r3, r4, r5, lr}
 8010b76:	4d06      	ldr	r5, [pc, #24]	; (8010b90 <_isatty_r+0x1c>)
 8010b78:	2300      	movs	r3, #0
 8010b7a:	4604      	mov	r4, r0
 8010b7c:	4608      	mov	r0, r1
 8010b7e:	602b      	str	r3, [r5, #0]
 8010b80:	f7f0 f85b 	bl	8000c3a <_isatty>
 8010b84:	1c43      	adds	r3, r0, #1
 8010b86:	d102      	bne.n	8010b8e <_isatty_r+0x1a>
 8010b88:	682b      	ldr	r3, [r5, #0]
 8010b8a:	b103      	cbz	r3, 8010b8e <_isatty_r+0x1a>
 8010b8c:	6023      	str	r3, [r4, #0]
 8010b8e:	bd38      	pop	{r3, r4, r5, pc}
 8010b90:	2000891c 	.word	0x2000891c

08010b94 <_lseek_r>:
 8010b94:	b538      	push	{r3, r4, r5, lr}
 8010b96:	4d07      	ldr	r5, [pc, #28]	; (8010bb4 <_lseek_r+0x20>)
 8010b98:	4604      	mov	r4, r0
 8010b9a:	4608      	mov	r0, r1
 8010b9c:	4611      	mov	r1, r2
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	602a      	str	r2, [r5, #0]
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	f7f0 f854 	bl	8000c50 <_lseek>
 8010ba8:	1c43      	adds	r3, r0, #1
 8010baa:	d102      	bne.n	8010bb2 <_lseek_r+0x1e>
 8010bac:	682b      	ldr	r3, [r5, #0]
 8010bae:	b103      	cbz	r3, 8010bb2 <_lseek_r+0x1e>
 8010bb0:	6023      	str	r3, [r4, #0]
 8010bb2:	bd38      	pop	{r3, r4, r5, pc}
 8010bb4:	2000891c 	.word	0x2000891c

08010bb8 <__malloc_lock>:
 8010bb8:	4801      	ldr	r0, [pc, #4]	; (8010bc0 <__malloc_lock+0x8>)
 8010bba:	f7ff bb0d 	b.w	80101d8 <__retarget_lock_acquire_recursive>
 8010bbe:	bf00      	nop
 8010bc0:	20008920 	.word	0x20008920

08010bc4 <__malloc_unlock>:
 8010bc4:	4801      	ldr	r0, [pc, #4]	; (8010bcc <__malloc_unlock+0x8>)
 8010bc6:	f7ff bb08 	b.w	80101da <__retarget_lock_release_recursive>
 8010bca:	bf00      	nop
 8010bcc:	20008920 	.word	0x20008920

08010bd0 <_read_r>:
 8010bd0:	b538      	push	{r3, r4, r5, lr}
 8010bd2:	4d07      	ldr	r5, [pc, #28]	; (8010bf0 <_read_r+0x20>)
 8010bd4:	4604      	mov	r4, r0
 8010bd6:	4608      	mov	r0, r1
 8010bd8:	4611      	mov	r1, r2
 8010bda:	2200      	movs	r2, #0
 8010bdc:	602a      	str	r2, [r5, #0]
 8010bde:	461a      	mov	r2, r3
 8010be0:	f7ef fff2 	bl	8000bc8 <_read>
 8010be4:	1c43      	adds	r3, r0, #1
 8010be6:	d102      	bne.n	8010bee <_read_r+0x1e>
 8010be8:	682b      	ldr	r3, [r5, #0]
 8010bea:	b103      	cbz	r3, 8010bee <_read_r+0x1e>
 8010bec:	6023      	str	r3, [r4, #0]
 8010bee:	bd38      	pop	{r3, r4, r5, pc}
 8010bf0:	2000891c 	.word	0x2000891c

08010bf4 <_raise_r>:
 8010bf4:	291f      	cmp	r1, #31
 8010bf6:	b538      	push	{r3, r4, r5, lr}
 8010bf8:	4604      	mov	r4, r0
 8010bfa:	460d      	mov	r5, r1
 8010bfc:	d904      	bls.n	8010c08 <_raise_r+0x14>
 8010bfe:	2316      	movs	r3, #22
 8010c00:	6003      	str	r3, [r0, #0]
 8010c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c06:	bd38      	pop	{r3, r4, r5, pc}
 8010c08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010c0a:	b112      	cbz	r2, 8010c12 <_raise_r+0x1e>
 8010c0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c10:	b94b      	cbnz	r3, 8010c26 <_raise_r+0x32>
 8010c12:	4620      	mov	r0, r4
 8010c14:	f000 f830 	bl	8010c78 <_getpid_r>
 8010c18:	462a      	mov	r2, r5
 8010c1a:	4601      	mov	r1, r0
 8010c1c:	4620      	mov	r0, r4
 8010c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c22:	f000 b817 	b.w	8010c54 <_kill_r>
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	d00a      	beq.n	8010c40 <_raise_r+0x4c>
 8010c2a:	1c59      	adds	r1, r3, #1
 8010c2c:	d103      	bne.n	8010c36 <_raise_r+0x42>
 8010c2e:	2316      	movs	r3, #22
 8010c30:	6003      	str	r3, [r0, #0]
 8010c32:	2001      	movs	r0, #1
 8010c34:	e7e7      	b.n	8010c06 <_raise_r+0x12>
 8010c36:	2400      	movs	r4, #0
 8010c38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010c3c:	4628      	mov	r0, r5
 8010c3e:	4798      	blx	r3
 8010c40:	2000      	movs	r0, #0
 8010c42:	e7e0      	b.n	8010c06 <_raise_r+0x12>

08010c44 <raise>:
 8010c44:	4b02      	ldr	r3, [pc, #8]	; (8010c50 <raise+0xc>)
 8010c46:	4601      	mov	r1, r0
 8010c48:	6818      	ldr	r0, [r3, #0]
 8010c4a:	f7ff bfd3 	b.w	8010bf4 <_raise_r>
 8010c4e:	bf00      	nop
 8010c50:	2000002c 	.word	0x2000002c

08010c54 <_kill_r>:
 8010c54:	b538      	push	{r3, r4, r5, lr}
 8010c56:	4d07      	ldr	r5, [pc, #28]	; (8010c74 <_kill_r+0x20>)
 8010c58:	2300      	movs	r3, #0
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	4608      	mov	r0, r1
 8010c5e:	4611      	mov	r1, r2
 8010c60:	602b      	str	r3, [r5, #0]
 8010c62:	f7ef ff95 	bl	8000b90 <_kill>
 8010c66:	1c43      	adds	r3, r0, #1
 8010c68:	d102      	bne.n	8010c70 <_kill_r+0x1c>
 8010c6a:	682b      	ldr	r3, [r5, #0]
 8010c6c:	b103      	cbz	r3, 8010c70 <_kill_r+0x1c>
 8010c6e:	6023      	str	r3, [r4, #0]
 8010c70:	bd38      	pop	{r3, r4, r5, pc}
 8010c72:	bf00      	nop
 8010c74:	2000891c 	.word	0x2000891c

08010c78 <_getpid_r>:
 8010c78:	f7ef bf82 	b.w	8000b80 <_getpid>

08010c7c <_init>:
 8010c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c7e:	bf00      	nop
 8010c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c82:	bc08      	pop	{r3}
 8010c84:	469e      	mov	lr, r3
 8010c86:	4770      	bx	lr

08010c88 <_fini>:
 8010c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c8a:	bf00      	nop
 8010c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c8e:	bc08      	pop	{r3}
 8010c90:	469e      	mov	lr, r3
 8010c92:	4770      	bx	lr
